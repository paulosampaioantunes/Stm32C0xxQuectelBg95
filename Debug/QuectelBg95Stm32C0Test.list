
QuectelBg95Stm32C0Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005964  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08005a24  08005a24  00006a24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08005ffc  08005ffc  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005ffc  08005ffc  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ffc  08005ffc  00006ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006000  08006000  00007000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006004  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000068  0800606c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  0800606c  00008394  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d517  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002317  00000000  00000000  000155a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000178c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000837  00000000  00000000  00018370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145fc  00000000  00000000  00018ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfa3  00000000  00000000  0002d1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007969c  00000000  00000000  0003b146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b47e2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003054  00000000  00000000  000b4828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b787c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a0c 	.word	0x08005a0c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005a0c 	.word	0x08005a0c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fe84 	bl	8000f56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f835 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f951 	bl	80004f8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000256:	f000 f877 	bl	8000348 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f919 	bl	8000490 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //configurando rtc apos reset
  	__HAL_RCC_PWR_CLK_ENABLE();
 800025e:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <main+0x70>)
 8000260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000262:	4b14      	ldr	r3, [pc, #80]	@ (80002b4 <main+0x70>)
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	0549      	lsls	r1, r1, #21
 8000268:	430a      	orrs	r2, r1
 800026a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800026c:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <main+0x70>)
 800026e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	055b      	lsls	r3, r3, #21
 8000274:	4013      	ands	r3, r2
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  	__HAL_RCC_RTC_ENABLE();
 800027a:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <main+0x70>)
 800027c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800027e:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <main+0x70>)
 8000280:	2180      	movs	r1, #128	@ 0x80
 8000282:	0209      	lsls	r1, r1, #8
 8000284:	430a      	orrs	r2, r1
 8000286:	65da      	str	r2, [r3, #92]	@ 0x5c
  	InitFlags();
 8000288:	f000 fc76 	bl	8000b78 <InitFlags>
	        		    	RESPONSE_BUFFER_SIZE);
	        }
	        responseReceived = 0;
			*/

		InitialConfigBg95();
 800028c:	f000 f9d8 	bl	8000640 <InitialConfigBg95>
		ConfigPdpContext();
 8000290:	f000 face 	bl	8000830 <ConfigPdpContext>
		ActivePdp();
 8000294:	f000 fb54 	bl	8000940 <ActivePdp>
		ConfigMqttContext();
 8000298:	f000 fb10 	bl	80008bc <ConfigMqttContext>
		MqttConfigBeforeConnection();
 800029c:	f000 fbb4 	bl	8000a08 <MqttConfigBeforeConnection>
		MqttConnectAndSubscribe();
 80002a0:	f000 fb7e 	bl	80009a0 <MqttConnectAndSubscribe>
		HAL_Delay(10000);
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <main+0x74>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fed2 	bl	8001050 <HAL_Delay>

		EnterSleepMode();
 80002ac:	f000 fbe6 	bl	8000a7c <EnterSleepMode>
		InitialConfigBg95();
 80002b0:	46c0      	nop			@ (mov r8, r8)
 80002b2:	e7eb      	b.n	800028c <main+0x48>
 80002b4:	40021000 	.word	0x40021000
 80002b8:	00002710 	.word	0x00002710

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b08d      	sub	sp, #52	@ 0x34
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2414      	movs	r4, #20
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	231c      	movs	r3, #28
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f003 ff8d 	bl	80041ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	003b      	movs	r3, r7
 80002d4:	0018      	movs	r0, r3
 80002d6:	2314      	movs	r3, #20
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f003 ff86 	bl	80041ec <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	220a      	movs	r2, #10
 80002e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2280      	movs	r2, #128	@ 0x80
 80002ea:	0052      	lsls	r2, r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2240      	movs	r2, #64	@ 0x40
 80002f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2201      	movs	r2, #1
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fa50 	bl	80017a8 <HAL_RCC_OscConfig>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800030c:	f000 fc50 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	003b      	movs	r3, r7
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	003b      	movs	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	003b      	movs	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000322:	003b      	movs	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032e:	003b      	movs	r3, r7
 8000330:	2101      	movs	r1, #1
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fc1c 	bl	8001b70 <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800033c:	f000 fc38 	bl	8000bb0 <Error_Handler>
  }
}
 8000340:	46c0      	nop			@ (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b00d      	add	sp, #52	@ 0x34
 8000346:	bd90      	pop	{r4, r7, pc}

08000348 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	@ 0x40
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800034e:	232c      	movs	r3, #44	@ 0x2c
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	0018      	movs	r0, r3
 8000354:	2314      	movs	r3, #20
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f003 ff47 	bl	80041ec <memset>
  RTC_DateTypeDef sDate = {0};
 800035e:	2328      	movs	r3, #40	@ 0x28
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	2328      	movs	r3, #40	@ 0x28
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f003 ff3c 	bl	80041ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000374:	4b44      	ldr	r3, [pc, #272]	@ (8000488 <MX_RTC_Init+0x140>)
 8000376:	4a45      	ldr	r2, [pc, #276]	@ (800048c <MX_RTC_Init+0x144>)
 8000378:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800037a:	4b43      	ldr	r3, [pc, #268]	@ (8000488 <MX_RTC_Init+0x140>)
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000380:	4b41      	ldr	r3, [pc, #260]	@ (8000488 <MX_RTC_Init+0x140>)
 8000382:	227f      	movs	r2, #127	@ 0x7f
 8000384:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000386:	4b40      	ldr	r3, [pc, #256]	@ (8000488 <MX_RTC_Init+0x140>)
 8000388:	22ff      	movs	r2, #255	@ 0xff
 800038a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800038c:	4b3e      	ldr	r3, [pc, #248]	@ (8000488 <MX_RTC_Init+0x140>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000392:	4b3d      	ldr	r3, [pc, #244]	@ (8000488 <MX_RTC_Init+0x140>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000398:	4b3b      	ldr	r3, [pc, #236]	@ (8000488 <MX_RTC_Init+0x140>)
 800039a:	2200      	movs	r2, #0
 800039c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800039e:	4b3a      	ldr	r3, [pc, #232]	@ (8000488 <MX_RTC_Init+0x140>)
 80003a0:	2280      	movs	r2, #128	@ 0x80
 80003a2:	05d2      	lsls	r2, r2, #23
 80003a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003a6:	4b38      	ldr	r3, [pc, #224]	@ (8000488 <MX_RTC_Init+0x140>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ac:	4b36      	ldr	r3, [pc, #216]	@ (8000488 <MX_RTC_Init+0x140>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 fe5a 	bl	8002068 <HAL_RTC_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80003b8:	f000 fbfa 	bl	8000bb0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003bc:	212c      	movs	r1, #44	@ 0x2c
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003e2:	1879      	adds	r1, r7, r1
 80003e4:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <MX_RTC_Init+0x140>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fecb 	bl	8002184 <HAL_RTC_SetTime>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80003f2:	f000 fbdd 	bl	8000bb0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003f6:	2128      	movs	r1, #40	@ 0x28
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2201      	movs	r2, #1
 8000402:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2201      	movs	r2, #1
 8000408:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000410:	1879      	adds	r1, r7, r1
 8000412:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <MX_RTC_Init+0x140>)
 8000414:	2201      	movs	r2, #1
 8000416:	0018      	movs	r0, r3
 8000418:	f001 ffb8 	bl	800238c <HAL_RTC_SetDate>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000420:	f000 fbc6 	bl	8000bb0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800042a:	003b      	movs	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000430:	003b      	movs	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000436:	003b      	movs	r3, r7
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800043c:	003b      	movs	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000442:	003b      	movs	r3, r7
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000448:	003b      	movs	r3, r7
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800044e:	003b      	movs	r3, r7
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000454:	003b      	movs	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800045a:	003b      	movs	r3, r7
 800045c:	2220      	movs	r2, #32
 800045e:	2101      	movs	r1, #1
 8000460:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000462:	003b      	movs	r3, r7
 8000464:	2280      	movs	r2, #128	@ 0x80
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800046a:	0039      	movs	r1, r7
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_RTC_Init+0x140>)
 800046e:	2201      	movs	r2, #1
 8000470:	0018      	movs	r0, r3
 8000472:	f002 f86b 	bl	800254c <HAL_RTC_SetAlarm_IT>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800047a:	f000 fb99 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b010      	add	sp, #64	@ 0x40
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	20000084 	.word	0x20000084
 800048c:	40002800 	.word	0x40002800

08000490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000494:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 8000496:	4a17      	ldr	r2, [pc, #92]	@ (80004f4 <MX_USART2_UART_Init+0x64>)
 8000498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 800049c:	22e1      	movs	r2, #225	@ 0xe1
 800049e:	0252      	lsls	r2, r2, #9
 80004a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fab8 	bl	8002a50 <HAL_UART_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004e4:	f000 fb64 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	200000ac 	.word	0x200000ac
 80004f4:	40004400 	.word	0x40004400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000502:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000504:	2104      	movs	r1, #4
 8000506:	430a      	orrs	r2, r1
 8000508:	635a      	str	r2, [r3, #52]	@ 0x34
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <MX_GPIO_Init+0x40>)
 800050c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050e:	2204      	movs	r2, #4
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <MX_GPIO_Init+0x40>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	40021000 	.word	0x40021000

0800053c <receiveResponseUntilMatch>:
void sendATCommand(char* command) {
    // Enviar o comando AT via UART
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
}

void receiveResponseUntilMatch(const char *searchPattern) {
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b0a5      	sub	sp, #148	@ 0x94
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    bool responseValid = false;
 8000544:	238f      	movs	r3, #143	@ 0x8f
 8000546:	18fb      	adds	r3, r7, r3
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
    char responseBuffer[128];  // Buffer para a resposta do UART
    int contTryRequestSignal = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	2288      	movs	r2, #136	@ 0x88
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	6013      	str	r3, [r2, #0]

    // Limpar o buffer de resposta
    memset(responseBuffer, 0, sizeof(responseBuffer));
 8000554:	2308      	movs	r3, #8
 8000556:	18fb      	adds	r3, r7, r3
 8000558:	2280      	movs	r2, #128	@ 0x80
 800055a:	2100      	movs	r1, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f003 fe45 	bl	80041ec <memset>

    while (!responseValid && contTryRequestSignal <= 10) {
 8000562:	e044      	b.n	80005ee <receiveResponseUntilMatch+0xb2>
        // Limpar o buffer de resposta a cada tentativa
        memset(responseBuffer, 0, sizeof(responseBuffer));
 8000564:	2408      	movs	r4, #8
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f003 fe3d 	bl	80041ec <memset>

        // Enviar o comando AT ou outro comando conforme necessário
        HAL_UART_Transmit(&huart2, (uint8_t*)searchPattern, strlen(searchPattern), HAL_MAX_DELAY);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fdc7 	bl	8000108 <strlen>
 800057a:	0003      	movs	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	2301      	movs	r3, #1
 8000580:	425b      	negs	r3, r3
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	4828      	ldr	r0, [pc, #160]	@ (8000628 <receiveResponseUntilMatch+0xec>)
 8000586:	f002 fab9 	bl	8002afc <HAL_UART_Transmit>

        // Receber a resposta
        HAL_UART_Receive(&huart2, (uint8_t*)responseBuffer, sizeof(responseBuffer), 1000);
 800058a:	23fa      	movs	r3, #250	@ 0xfa
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	1939      	adds	r1, r7, r4
 8000590:	4825      	ldr	r0, [pc, #148]	@ (8000628 <receiveResponseUntilMatch+0xec>)
 8000592:	2280      	movs	r2, #128	@ 0x80
 8000594:	f002 fb56 	bl	8002c44 <HAL_UART_Receive>

        // Depuração: Mostrar o buffer recebido para verificar seu conteúdo
        printf("Response Buffer Recebido: %s\n", responseBuffer);
 8000598:	193a      	adds	r2, r7, r4
 800059a:	4b24      	ldr	r3, [pc, #144]	@ (800062c <receiveResponseUntilMatch+0xf0>)
 800059c:	0011      	movs	r1, r2
 800059e:	0018      	movs	r0, r3
 80005a0:	f003 fc6a 	bl	8003e78 <iprintf>

        // Procurar por "OK" no buffer
        if (strstr(responseBuffer, "OK") != NULL) {
 80005a4:	4a22      	ldr	r2, [pc, #136]	@ (8000630 <receiveResponseUntilMatch+0xf4>)
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 fe26 	bl	80041fc <strstr>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d00a      	beq.n	80005ca <receiveResponseUntilMatch+0x8e>
            responseValid = true;
 80005b4:	238f      	movs	r3, #143	@ 0x8f
 80005b6:	18fb      	adds	r3, r7, r3
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
            printf("Resposta válida recebida: %s\n", responseBuffer);
 80005bc:	193a      	adds	r2, r7, r4
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <receiveResponseUntilMatch+0xf8>)
 80005c0:	0011      	movs	r1, r2
 80005c2:	0018      	movs	r0, r3
 80005c4:	f003 fc58 	bl	8003e78 <iprintf>
            break;  // Saia do loop ao encontrar uma resposta válida
 80005c8:	e01e      	b.n	8000608 <receiveResponseUntilMatch+0xcc>
        }

        // Se não encontrar a resposta válida
        contTryRequestSignal++;
 80005ca:	2488      	movs	r4, #136	@ 0x88
 80005cc:	193b      	adds	r3, r7, r4
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	193a      	adds	r2, r7, r4
 80005d4:	6013      	str	r3, [r2, #0]
        HAL_Delay(1000);  // Esperar 1 segundo antes de tentar novamente
 80005d6:	23fa      	movs	r3, #250	@ 0xfa
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	0018      	movs	r0, r3
 80005dc:	f000 fd38 	bl	8001050 <HAL_Delay>
        printf("Tentativa %d: Sem resposta válida.\n", contTryRequestSignal);
 80005e0:	193b      	adds	r3, r7, r4
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b14      	ldr	r3, [pc, #80]	@ (8000638 <receiveResponseUntilMatch+0xfc>)
 80005e6:	0011      	movs	r1, r2
 80005e8:	0018      	movs	r0, r3
 80005ea:	f003 fc45 	bl	8003e78 <iprintf>
    while (!responseValid && contTryRequestSignal <= 10) {
 80005ee:	238f      	movs	r3, #143	@ 0x8f
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2201      	movs	r2, #1
 80005f6:	4053      	eors	r3, r2
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d004      	beq.n	8000608 <receiveResponseUntilMatch+0xcc>
 80005fe:	2388      	movs	r3, #136	@ 0x88
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b0a      	cmp	r3, #10
 8000606:	ddad      	ble.n	8000564 <receiveResponseUntilMatch+0x28>
    }

    // Após 10 tentativas sem sucesso, continuar
    if (!responseValid) {
 8000608:	238f      	movs	r3, #143	@ 0x8f
 800060a:	18fb      	adds	r3, r7, r3
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2201      	movs	r2, #1
 8000610:	4053      	eors	r3, r2
 8000612:	b2db      	uxtb	r3, r3
 8000614:	2b00      	cmp	r3, #0
 8000616:	d003      	beq.n	8000620 <receiveResponseUntilMatch+0xe4>
        printf("Tentativas esgotadas, continuando sem resposta válida.\n");
 8000618:	4b08      	ldr	r3, [pc, #32]	@ (800063c <receiveResponseUntilMatch+0x100>)
 800061a:	0018      	movs	r0, r3
 800061c:	f003 fc92 	bl	8003f44 <puts>
    }


}
 8000620:	46c0      	nop			@ (mov r8, r8)
 8000622:	46bd      	mov	sp, r7
 8000624:	b025      	add	sp, #148	@ 0x94
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	200000ac 	.word	0x200000ac
 800062c:	08005a24 	.word	0x08005a24
 8000630:	08005a44 	.word	0x08005a44
 8000634:	08005a48 	.word	0x08005a48
 8000638:	08005a68 	.word	0x08005a68
 800063c:	08005a90 	.word	0x08005a90

08000640 <InitialConfigBg95>:
            match = 1;
        }
    }
}
*/
void InitialConfigBg95() {
 8000640:	b5b0      	push	{r4, r5, r7, lr}
 8000642:	b0a4      	sub	sp, #144	@ 0x90
 8000644:	af00      	add	r7, sp, #0
     // Buffer temporário para respostas AT
    char command[128];    // Buffer para os comandos AT

    // Comando AT+CCID
    strcpy(command, "AT+CCID\r\n");
 8000646:	2410      	movs	r4, #16
 8000648:	193b      	adds	r3, r7, r4
 800064a:	4a65      	ldr	r2, [pc, #404]	@ (80007e0 <InitialConfigBg95+0x1a0>)
 800064c:	ca03      	ldmia	r2!, {r0, r1}
 800064e:	c303      	stmia	r3!, {r0, r1}
 8000650:	8812      	ldrh	r2, [r2, #0]
 8000652:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 8000654:	193b      	adds	r3, r7, r4
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff ff70 	bl	800053c <receiveResponseUntilMatch>

    // Comando AT+CIMI
    strcpy(command, "AT+CIMI\r\n");
 800065c:	193b      	adds	r3, r7, r4
 800065e:	4a61      	ldr	r2, [pc, #388]	@ (80007e4 <InitialConfigBg95+0x1a4>)
 8000660:	ca03      	ldmia	r2!, {r0, r1}
 8000662:	c303      	stmia	r3!, {r0, r1}
 8000664:	8812      	ldrh	r2, [r2, #0]
 8000666:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 8000668:	0025      	movs	r5, r4
 800066a:	197b      	adds	r3, r7, r5
 800066c:	0018      	movs	r0, r3
 800066e:	f7ff ff65 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CFUN=0
    strcpy(command, "AT+CFUN=0\r\n");
 8000672:	197b      	adds	r3, r7, r5
 8000674:	4a5c      	ldr	r2, [pc, #368]	@ (80007e8 <InitialConfigBg95+0x1a8>)
 8000676:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000678:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 800067a:	197b      	adds	r3, r7, r5
 800067c:	0018      	movs	r0, r3
 800067e:	f7ff ff5d 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QCFG="nwscanmode",0,1
    strcpy(command, "AT+QCFG=\"nwscanmode\",0,1\r\n");
 8000682:	197b      	adds	r3, r7, r5
 8000684:	4a59      	ldr	r2, [pc, #356]	@ (80007ec <InitialConfigBg95+0x1ac>)
 8000686:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000688:	c313      	stmia	r3!, {r0, r1, r4}
 800068a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800068c:	c313      	stmia	r3!, {r0, r1, r4}
 800068e:	8811      	ldrh	r1, [r2, #0]
 8000690:	8019      	strh	r1, [r3, #0]
 8000692:	7892      	ldrb	r2, [r2, #2]
 8000694:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 8000696:	197b      	adds	r3, r7, r5
 8000698:	0018      	movs	r0, r3
 800069a:	f7ff ff4f 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QCFG="nwscanseq",020103,1
    strcpy(command, "AT+QCFG=\"nwscanseq\",020103,1\r\n");
 800069e:	197b      	adds	r3, r7, r5
 80006a0:	4a53      	ldr	r2, [pc, #332]	@ (80007f0 <InitialConfigBg95+0x1b0>)
 80006a2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006a4:	c313      	stmia	r3!, {r0, r1, r4}
 80006a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006a8:	c313      	stmia	r3!, {r0, r1, r4}
 80006aa:	6811      	ldr	r1, [r2, #0]
 80006ac:	6019      	str	r1, [r3, #0]
 80006ae:	8891      	ldrh	r1, [r2, #4]
 80006b0:	8099      	strh	r1, [r3, #4]
 80006b2:	7992      	ldrb	r2, [r2, #6]
 80006b4:	719a      	strb	r2, [r3, #6]
    receiveResponseUntilMatch(command);
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff ff3f 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QCFG="band",0,0
    strcpy(command, "AT+QCFG=\"band\",0,0\r\n");
 80006be:	197b      	adds	r3, r7, r5
 80006c0:	4a4c      	ldr	r2, [pc, #304]	@ (80007f4 <InitialConfigBg95+0x1b4>)
 80006c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006c4:	c313      	stmia	r3!, {r0, r1, r4}
 80006c6:	ca03      	ldmia	r2!, {r0, r1}
 80006c8:	c303      	stmia	r3!, {r0, r1}
 80006ca:	7812      	ldrb	r2, [r2, #0]
 80006cc:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 80006ce:	197b      	adds	r3, r7, r5
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff ff33 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+COPS=0
    strcpy(command, "AT+COPS=0\r\n");
 80006d6:	197b      	adds	r3, r7, r5
 80006d8:	4a47      	ldr	r2, [pc, #284]	@ (80007f8 <InitialConfigBg95+0x1b8>)
 80006da:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006dc:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 80006de:	197b      	adds	r3, r7, r5
 80006e0:	0018      	movs	r0, r3
 80006e2:	f7ff ff2b 	bl	800053c <receiveResponseUntilMatch>
    // Configurar o APN, username e password para a Vivo
    strcpy(command, "AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"datatem\",\"datatem\"\r\n");
 80006e6:	197a      	adds	r2, r7, r5
 80006e8:	4b44      	ldr	r3, [pc, #272]	@ (80007fc <InitialConfigBg95+0x1bc>)
 80006ea:	0010      	movs	r0, r2
 80006ec:	0019      	movs	r1, r3
 80006ee:	233c      	movs	r3, #60	@ 0x3c
 80006f0:	001a      	movs	r2, r3
 80006f2:	f003 fe14 	bl	800431e <memcpy>
    receiveResponseUntilMatch(command);
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	0018      	movs	r0, r3
 80006fa:	f7ff ff1f 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CFUN=1
    strcpy(command, "AT+CFUN=1\r\n");
 80006fe:	197b      	adds	r3, r7, r5
 8000700:	4a3f      	ldr	r2, [pc, #252]	@ (8000800 <InitialConfigBg95+0x1c0>)
 8000702:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000704:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 8000706:	197b      	adds	r3, r7, r5
 8000708:	0018      	movs	r0, r3
 800070a:	f7ff ff17 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CREG=1;+CGREG=1;+CEREG=1
    strcpy(command, "AT+CREG=1;+CGREG=1;+CEREG=1\r\n");
 800070e:	197b      	adds	r3, r7, r5
 8000710:	4a3c      	ldr	r2, [pc, #240]	@ (8000804 <InitialConfigBg95+0x1c4>)
 8000712:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000714:	c313      	stmia	r3!, {r0, r1, r4}
 8000716:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000718:	c313      	stmia	r3!, {r0, r1, r4}
 800071a:	6811      	ldr	r1, [r2, #0]
 800071c:	6019      	str	r1, [r3, #0]
 800071e:	8892      	ldrh	r2, [r2, #4]
 8000720:	809a      	strh	r2, [r3, #4]
    receiveResponseUntilMatch(command);
 8000722:	197b      	adds	r3, r7, r5
 8000724:	0018      	movs	r0, r3
 8000726:	f7ff ff09 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+COPS?
    strcpy(command, "AT+COPS?\r\n");
 800072a:	197b      	adds	r3, r7, r5
 800072c:	4a36      	ldr	r2, [pc, #216]	@ (8000808 <InitialConfigBg95+0x1c8>)
 800072e:	ca03      	ldmia	r2!, {r0, r1}
 8000730:	c303      	stmia	r3!, {r0, r1}
 8000732:	8811      	ldrh	r1, [r2, #0]
 8000734:	8019      	strh	r1, [r3, #0]
 8000736:	7892      	ldrb	r2, [r2, #2]
 8000738:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 800073a:	197b      	adds	r3, r7, r5
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fefd 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QCSQ
    strcpy(command, "AT+QCSQ\r\n");
 8000742:	197b      	adds	r3, r7, r5
 8000744:	4a31      	ldr	r2, [pc, #196]	@ (800080c <InitialConfigBg95+0x1cc>)
 8000746:	ca03      	ldmia	r2!, {r0, r1}
 8000748:	c303      	stmia	r3!, {r0, r1}
 800074a:	8812      	ldrh	r2, [r2, #0]
 800074c:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 800074e:	197b      	adds	r3, r7, r5
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff fef3 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CREG?;+CEREG?;+CGREG?
    strcpy(command, "AT+CREG?;+CEREG?;+CGREG?\r\n");
 8000756:	197b      	adds	r3, r7, r5
 8000758:	4a2d      	ldr	r2, [pc, #180]	@ (8000810 <InitialConfigBg95+0x1d0>)
 800075a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800075c:	c313      	stmia	r3!, {r0, r1, r4}
 800075e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000760:	c313      	stmia	r3!, {r0, r1, r4}
 8000762:	8811      	ldrh	r1, [r2, #0]
 8000764:	8019      	strh	r1, [r3, #0]
 8000766:	7892      	ldrb	r2, [r2, #2]
 8000768:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 800076a:	197b      	adds	r3, r7, r5
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff fee5 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CGATT=1 (Conectar à rede)
    strcpy(command, "AT+CGATT=1\r\n");
 8000772:	197b      	adds	r3, r7, r5
 8000774:	4a27      	ldr	r2, [pc, #156]	@ (8000814 <InitialConfigBg95+0x1d4>)
 8000776:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000778:	c313      	stmia	r3!, {r0, r1, r4}
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 800077e:	197b      	adds	r3, r7, r5
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff fedb 	bl	800053c <receiveResponseUntilMatch>
    // Verificar o endereço IP alocado
    strcpy(command, "AT+CGPADDR\r\n");
 8000786:	197b      	adds	r3, r7, r5
 8000788:	4a23      	ldr	r2, [pc, #140]	@ (8000818 <InitialConfigBg95+0x1d8>)
 800078a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800078c:	c313      	stmia	r3!, {r0, r1, r4}
 800078e:	7812      	ldrb	r2, [r2, #0]
 8000790:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 8000792:	002c      	movs	r4, r5
 8000794:	193b      	adds	r3, r7, r4
 8000796:	0018      	movs	r0, r3
 8000798:	f7ff fed0 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QPING para realizar ping com o IP obtido
    char ip[16]; // Buffer para armazenar o IP extraído
    if (sscanf(responseBuffer, "+CGPADDR: 1,\"%15[^\"]", ip) == 1) {
 800079c:	003a      	movs	r2, r7
 800079e:	491f      	ldr	r1, [pc, #124]	@ (800081c <InitialConfigBg95+0x1dc>)
 80007a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000820 <InitialConfigBg95+0x1e0>)
 80007a2:	0018      	movs	r0, r3
 80007a4:	f003 fc0c 	bl	8003fc0 <siscanf>
 80007a8:	0003      	movs	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d110      	bne.n	80007d0 <InitialConfigBg95+0x190>
        printf("Endereço IP alocado: %s\n", ip);
 80007ae:	003a      	movs	r2, r7
 80007b0:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <InitialConfigBg95+0x1e4>)
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f003 fb5f 	bl	8003e78 <iprintf>
        snprintf(command, sizeof(command), "AT+QPING=1,\"%s\"\r\n", ip);
 80007ba:	003b      	movs	r3, r7
 80007bc:	4a1a      	ldr	r2, [pc, #104]	@ (8000828 <InitialConfigBg95+0x1e8>)
 80007be:	1938      	adds	r0, r7, r4
 80007c0:	2180      	movs	r1, #128	@ 0x80
 80007c2:	f003 fbc9 	bl	8003f58 <sniprintf>
        receiveResponseUntilMatch(command);    } else {
 80007c6:	193b      	adds	r3, r7, r4
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff feb7 	bl	800053c <receiveResponseUntilMatch>
        printf("Falha ao obter o endereço IP.\n");
    }
}
 80007ce:	e003      	b.n	80007d8 <InitialConfigBg95+0x198>
        printf("Falha ao obter o endereço IP.\n");
 80007d0:	4b16      	ldr	r3, [pc, #88]	@ (800082c <InitialConfigBg95+0x1ec>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f003 fbb6 	bl	8003f44 <puts>
}
 80007d8:	46c0      	nop			@ (mov r8, r8)
 80007da:	46bd      	mov	sp, r7
 80007dc:	b024      	add	sp, #144	@ 0x90
 80007de:	bdb0      	pop	{r4, r5, r7, pc}
 80007e0:	08005ac8 	.word	0x08005ac8
 80007e4:	08005ad4 	.word	0x08005ad4
 80007e8:	08005ae0 	.word	0x08005ae0
 80007ec:	08005aec 	.word	0x08005aec
 80007f0:	08005b08 	.word	0x08005b08
 80007f4:	08005b28 	.word	0x08005b28
 80007f8:	08005b40 	.word	0x08005b40
 80007fc:	08005b4c 	.word	0x08005b4c
 8000800:	08005b88 	.word	0x08005b88
 8000804:	08005b94 	.word	0x08005b94
 8000808:	08005bb4 	.word	0x08005bb4
 800080c:	08005bc0 	.word	0x08005bc0
 8000810:	08005bcc 	.word	0x08005bcc
 8000814:	08005be8 	.word	0x08005be8
 8000818:	08005bf8 	.word	0x08005bf8
 800081c:	08005c08 	.word	0x08005c08
 8000820:	20000140 	.word	0x20000140
 8000824:	08005c20 	.word	0x08005c20
 8000828:	08005c3c 	.word	0x08005c3c
 800082c:	08005c50 	.word	0x08005c50

08000830 <ConfigPdpContext>:

void ConfigPdpContext() {
 8000830:	b590      	push	{r4, r7, lr}
 8000832:	b0a1      	sub	sp, #132	@ 0x84
 8000834:	af00      	add	r7, sp, #0
    char command[128];

    // Configurar APN com o contexto CID 1, com login e senha
    snprintf(command, sizeof(command), "AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"\",0,0\r\n");
 8000836:	4a1b      	ldr	r2, [pc, #108]	@ (80008a4 <ConfigPdpContext+0x74>)
 8000838:	003b      	movs	r3, r7
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	0018      	movs	r0, r3
 800083e:	f003 fb8b 	bl	8003f58 <sniprintf>
    receiveResponseUntilMatch(command);  // Enviar comando e esperar resposta
 8000842:	003b      	movs	r3, r7
 8000844:	0018      	movs	r0, r3
 8000846:	f7ff fe79 	bl	800053c <receiveResponseUntilMatch>

    // Ativar o contexto PDP
    strcpy(command, "AT+CGACT=1,1\r\n");
 800084a:	003b      	movs	r3, r7
 800084c:	4a16      	ldr	r2, [pc, #88]	@ (80008a8 <ConfigPdpContext+0x78>)
 800084e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000850:	c313      	stmia	r3!, {r0, r1, r4}
 8000852:	8811      	ldrh	r1, [r2, #0]
 8000854:	8019      	strh	r1, [r3, #0]
 8000856:	7892      	ldrb	r2, [r2, #2]
 8000858:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);  // Enviar comando e esperar resposta
 800085a:	003b      	movs	r3, r7
 800085c:	0018      	movs	r0, r3
 800085e:	f7ff fe6d 	bl	800053c <receiveResponseUntilMatch>

    // Verificar se o contexto PDP está ativo
    strcpy(command, "AT+CGPADDR=1\r\n");
 8000862:	003b      	movs	r3, r7
 8000864:	4a11      	ldr	r2, [pc, #68]	@ (80008ac <ConfigPdpContext+0x7c>)
 8000866:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000868:	c313      	stmia	r3!, {r0, r1, r4}
 800086a:	8811      	ldrh	r1, [r2, #0]
 800086c:	8019      	strh	r1, [r3, #0]
 800086e:	7892      	ldrb	r2, [r2, #2]
 8000870:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);  // Enviar comando e esperar resposta
 8000872:	003b      	movs	r3, r7
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fe61 	bl	800053c <receiveResponseUntilMatch>

    // Receber a resposta e verificar se contém o IP
    if (strstr(responseBuffer, "0.0.0.0") == NULL) {
 800087a:	4a0d      	ldr	r2, [pc, #52]	@ (80008b0 <ConfigPdpContext+0x80>)
 800087c:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <ConfigPdpContext+0x84>)
 800087e:	0011      	movs	r1, r2
 8000880:	0018      	movs	r0, r3
 8000882:	f003 fcbb 	bl	80041fc <strstr>
 8000886:	1e03      	subs	r3, r0, #0
 8000888:	d106      	bne.n	8000898 <ConfigPdpContext+0x68>
        // Contexto PDP ativado com sucesso, IP foi alocado corretamente
        snprintf(command, sizeof(command), "PDP context ativado com sucesso. APN: inlog.vivo.com.br, IP: %s\r\n", responseBuffer);
 800088a:	4b0a      	ldr	r3, [pc, #40]	@ (80008b4 <ConfigPdpContext+0x84>)
 800088c:	4a0a      	ldr	r2, [pc, #40]	@ (80008b8 <ConfigPdpContext+0x88>)
 800088e:	0038      	movs	r0, r7
 8000890:	2180      	movs	r1, #128	@ 0x80
 8000892:	f003 fb61 	bl	8003f58 <sniprintf>
        // sendATCommand(command); // Transmitir a mensagem de sucesso pela UART
    } else {
        HAL_NVIC_SystemReset();
    }
}
 8000896:	e001      	b.n	800089c <ConfigPdpContext+0x6c>
        HAL_NVIC_SystemReset();
 8000898:	f000 fce1 	bl	800125e <HAL_NVIC_SystemReset>
}
 800089c:	46c0      	nop			@ (mov r8, r8)
 800089e:	46bd      	mov	sp, r7
 80008a0:	b021      	add	sp, #132	@ 0x84
 80008a2:	bd90      	pop	{r4, r7, pc}
 80008a4:	08005c70 	.word	0x08005c70
 80008a8:	08005ca0 	.word	0x08005ca0
 80008ac:	08005cb0 	.word	0x08005cb0
 80008b0:	08005cc0 	.word	0x08005cc0
 80008b4:	20000140 	.word	0x20000140
 80008b8:	08005cc8 	.word	0x08005cc8

080008bc <ConfigMqttContext>:

void ConfigMqttContext() {
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b0a1      	sub	sp, #132	@ 0x84
 80008c0:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Configurar a versão MQTT como 3.1.1
    strcpy(command, "AT+QMTCFG=\"version\",0,4\r\n");
 80008c2:	003b      	movs	r3, r7
 80008c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000930 <ConfigMqttContext+0x74>)
 80008c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008c8:	c313      	stmia	r3!, {r0, r1, r4}
 80008ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008cc:	c313      	stmia	r3!, {r0, r1, r4}
 80008ce:	8812      	ldrh	r2, [r2, #0]
 80008d0:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 80008d2:	003b      	movs	r3, r7
 80008d4:	0018      	movs	r0, r3
 80008d6:	f7ff fe31 	bl	800053c <receiveResponseUntilMatch>
    // Associar o contexto PDP ao cliente MQTT
    strcpy(command, "AT+QMTCFG=\"pdpcid\",0,1\r\n");
 80008da:	003b      	movs	r3, r7
 80008dc:	4a15      	ldr	r2, [pc, #84]	@ (8000934 <ConfigMqttContext+0x78>)
 80008de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008e0:	c313      	stmia	r3!, {r0, r1, r4}
 80008e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008e4:	c313      	stmia	r3!, {r0, r1, r4}
 80008e6:	7812      	ldrb	r2, [r2, #0]
 80008e8:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 80008ea:	003b      	movs	r3, r7
 80008ec:	0018      	movs	r0, r3
 80008ee:	f7ff fe25 	bl	800053c <receiveResponseUntilMatch>
    // Habilitar SSL para o cliente MQTT
    strcpy(command, "AT+QMTCFG=\"ssl\",0,1,0\r\n");
 80008f2:	003b      	movs	r3, r7
 80008f4:	4a10      	ldr	r2, [pc, #64]	@ (8000938 <ConfigMqttContext+0x7c>)
 80008f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008f8:	c313      	stmia	r3!, {r0, r1, r4}
 80008fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008fc:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 80008fe:	003b      	movs	r3, r7
 8000900:	0018      	movs	r0, r3
 8000902:	f7ff fe1b 	bl	800053c <receiveResponseUntilMatch>
    // Configurar keepalive para 3600 segundos
    strcpy(command, "AT+QMTCFG=\"keepalive\",0,3600\r\n");
 8000906:	003b      	movs	r3, r7
 8000908:	4a0c      	ldr	r2, [pc, #48]	@ (800093c <ConfigMqttContext+0x80>)
 800090a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800090c:	c313      	stmia	r3!, {r0, r1, r4}
 800090e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000910:	c313      	stmia	r3!, {r0, r1, r4}
 8000912:	6811      	ldr	r1, [r2, #0]
 8000914:	6019      	str	r1, [r3, #0]
 8000916:	8891      	ldrh	r1, [r2, #4]
 8000918:	8099      	strh	r1, [r3, #4]
 800091a:	7992      	ldrb	r2, [r2, #6]
 800091c:	719a      	strb	r2, [r3, #6]
    receiveResponseUntilMatch(command);
 800091e:	003b      	movs	r3, r7
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff fe0b 	bl	800053c <receiveResponseUntilMatch>

}
 8000926:	46c0      	nop			@ (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	b021      	add	sp, #132	@ 0x84
 800092c:	bd90      	pop	{r4, r7, pc}
 800092e:	46c0      	nop			@ (mov r8, r8)
 8000930:	08005d0c 	.word	0x08005d0c
 8000934:	08005d28 	.word	0x08005d28
 8000938:	08005d44 	.word	0x08005d44
 800093c:	08005d5c 	.word	0x08005d5c

08000940 <ActivePdp>:

void ActivePdp() {
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b0a1      	sub	sp, #132	@ 0x84
 8000944:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Verificar se o APN está configurado corretamente
    strcpy(command, "AT+CGDCONT?\r\n");
 8000946:	003b      	movs	r3, r7
 8000948:	4a12      	ldr	r2, [pc, #72]	@ (8000994 <ActivePdp+0x54>)
 800094a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800094c:	c313      	stmia	r3!, {r0, r1, r4}
 800094e:	8812      	ldrh	r2, [r2, #0]
 8000950:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 8000952:	003b      	movs	r3, r7
 8000954:	0018      	movs	r0, r3
 8000956:	f7ff fdf1 	bl	800053c <receiveResponseUntilMatch>
    // Ativar o contexto PDP
    strcpy(command, "AT+CGACT=1,1\r\n");
 800095a:	003b      	movs	r3, r7
 800095c:	4a0e      	ldr	r2, [pc, #56]	@ (8000998 <ActivePdp+0x58>)
 800095e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000960:	c313      	stmia	r3!, {r0, r1, r4}
 8000962:	8811      	ldrh	r1, [r2, #0]
 8000964:	8019      	strh	r1, [r3, #0]
 8000966:	7892      	ldrb	r2, [r2, #2]
 8000968:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 800096a:	003b      	movs	r3, r7
 800096c:	0018      	movs	r0, r3
 800096e:	f7ff fde5 	bl	800053c <receiveResponseUntilMatch>
    // Verificar se um endereço IP foi atribuído
    strcpy(command, "AT+CGPADDR=1\r\n");
 8000972:	003b      	movs	r3, r7
 8000974:	4a09      	ldr	r2, [pc, #36]	@ (800099c <ActivePdp+0x5c>)
 8000976:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000978:	c313      	stmia	r3!, {r0, r1, r4}
 800097a:	8811      	ldrh	r1, [r2, #0]
 800097c:	8019      	strh	r1, [r3, #0]
 800097e:	7892      	ldrb	r2, [r2, #2]
 8000980:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);}
 8000982:	003b      	movs	r3, r7
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff fdd9 	bl	800053c <receiveResponseUntilMatch>
 800098a:	46c0      	nop			@ (mov r8, r8)
 800098c:	46bd      	mov	sp, r7
 800098e:	b021      	add	sp, #132	@ 0x84
 8000990:	bd90      	pop	{r4, r7, pc}
 8000992:	46c0      	nop			@ (mov r8, r8)
 8000994:	08005d7c 	.word	0x08005d7c
 8000998:	08005ca0 	.word	0x08005ca0
 800099c:	08005cb0 	.word	0x08005cb0

080009a0 <MqttConnectAndSubscribe>:
void MqttConnectAndSubscribe() {
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b0a1      	sub	sp, #132	@ 0x84
 80009a4:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Conectar ao broker MQTT
    strcpy(command, "AT+QMTOPEN=0,1883\r\n");
 80009a6:	003b      	movs	r3, r7
 80009a8:	4a14      	ldr	r2, [pc, #80]	@ (80009fc <MqttConnectAndSubscribe+0x5c>)
 80009aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009ac:	c313      	stmia	r3!, {r0, r1, r4}
 80009ae:	ca03      	ldmia	r2!, {r0, r1}
 80009b0:	c303      	stmia	r3!, {r0, r1}
    receiveResponseUntilMatch(command);
 80009b2:	003b      	movs	r3, r7
 80009b4:	0018      	movs	r0, r3
 80009b6:	f7ff fdc1 	bl	800053c <receiveResponseUntilMatch>
    // Conectar ao broker MQTT com ID e credenciais
    strcpy(command, "AT+QMTCONN=0,\"1\",\"pixtest\",\"pixtest\"\r\n");
 80009ba:	003b      	movs	r3, r7
 80009bc:	4a10      	ldr	r2, [pc, #64]	@ (8000a00 <MqttConnectAndSubscribe+0x60>)
 80009be:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009c0:	c313      	stmia	r3!, {r0, r1, r4}
 80009c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009c4:	c313      	stmia	r3!, {r0, r1, r4}
 80009c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009c8:	c313      	stmia	r3!, {r0, r1, r4}
 80009ca:	8811      	ldrh	r1, [r2, #0]
 80009cc:	8019      	strh	r1, [r3, #0]
 80009ce:	7892      	ldrb	r2, [r2, #2]
 80009d0:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 80009d2:	003b      	movs	r3, r7
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fdb1 	bl	800053c <receiveResponseUntilMatch>
    // Inscrever-se no tópico desejado
    strcpy(command, "AT+QMTSUB=0,\"pixtest\",1\r\n");
 80009da:	003b      	movs	r3, r7
 80009dc:	4a09      	ldr	r2, [pc, #36]	@ (8000a04 <MqttConnectAndSubscribe+0x64>)
 80009de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009e0:	c313      	stmia	r3!, {r0, r1, r4}
 80009e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009e4:	c313      	stmia	r3!, {r0, r1, r4}
 80009e6:	8812      	ldrh	r2, [r2, #0]
 80009e8:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);}
 80009ea:	003b      	movs	r3, r7
 80009ec:	0018      	movs	r0, r3
 80009ee:	f7ff fda5 	bl	800053c <receiveResponseUntilMatch>
 80009f2:	46c0      	nop			@ (mov r8, r8)
 80009f4:	46bd      	mov	sp, r7
 80009f6:	b021      	add	sp, #132	@ 0x84
 80009f8:	bd90      	pop	{r4, r7, pc}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	08005d8c 	.word	0x08005d8c
 8000a00:	08005da0 	.word	0x08005da0
 8000a04:	08005dc8 	.word	0x08005dc8

08000a08 <MqttConfigBeforeConnection>:

void MqttConfigBeforeConnection() {
 8000a08:	b590      	push	{r4, r7, lr}
 8000a0a:	b0a1      	sub	sp, #132	@ 0x84
 8000a0c:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Verificar se o dispositivo está registrado na rede
    strcpy(command, "AT+CREG?\r\n");
 8000a0e:	003b      	movs	r3, r7
 8000a10:	4a16      	ldr	r2, [pc, #88]	@ (8000a6c <MqttConfigBeforeConnection+0x64>)
 8000a12:	ca03      	ldmia	r2!, {r0, r1}
 8000a14:	c303      	stmia	r3!, {r0, r1}
 8000a16:	8811      	ldrh	r1, [r2, #0]
 8000a18:	8019      	strh	r1, [r3, #0]
 8000a1a:	7892      	ldrb	r2, [r2, #2]
 8000a1c:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 8000a1e:	003b      	movs	r3, r7
 8000a20:	0018      	movs	r0, r3
 8000a22:	f7ff fd8b 	bl	800053c <receiveResponseUntilMatch>
    // Verificar o status do contexto PDP
    strcpy(command, "AT+CGACT?\r\n");
 8000a26:	003b      	movs	r3, r7
 8000a28:	4a11      	ldr	r2, [pc, #68]	@ (8000a70 <MqttConfigBeforeConnection+0x68>)
 8000a2a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a2c:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 8000a2e:	003b      	movs	r3, r7
 8000a30:	0018      	movs	r0, r3
 8000a32:	f7ff fd83 	bl	800053c <receiveResponseUntilMatch>
    // Verificar a qualidade do sinal
    strcpy(command, "AT+CSQ\r\n");
 8000a36:	003b      	movs	r3, r7
 8000a38:	4a0e      	ldr	r2, [pc, #56]	@ (8000a74 <MqttConfigBeforeConnection+0x6c>)
 8000a3a:	ca03      	ldmia	r2!, {r0, r1}
 8000a3c:	c303      	stmia	r3!, {r0, r1}
 8000a3e:	7812      	ldrb	r2, [r2, #0]
 8000a40:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 8000a42:	003b      	movs	r3, r7
 8000a44:	0018      	movs	r0, r3
 8000a46:	f7ff fd79 	bl	800053c <receiveResponseUntilMatch>
    // Configurar o contexto PDP para o canal MQTT
    strcpy(command, "AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000a4a:	003b      	movs	r3, r7
 8000a4c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a78 <MqttConfigBeforeConnection+0x70>)
 8000a4e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a50:	c313      	stmia	r3!, {r0, r1, r4}
 8000a52:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a54:	c313      	stmia	r3!, {r0, r1, r4}
 8000a56:	7812      	ldrb	r2, [r2, #0]
 8000a58:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);}
 8000a5a:	003b      	movs	r3, r7
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f7ff fd6d 	bl	800053c <receiveResponseUntilMatch>
 8000a62:	46c0      	nop			@ (mov r8, r8)
 8000a64:	46bd      	mov	sp, r7
 8000a66:	b021      	add	sp, #132	@ 0x84
 8000a68:	bd90      	pop	{r4, r7, pc}
 8000a6a:	46c0      	nop			@ (mov r8, r8)
 8000a6c:	08005de4 	.word	0x08005de4
 8000a70:	08005df0 	.word	0x08005df0
 8000a74:	08005dfc 	.word	0x08005dfc
 8000a78:	08005d28 	.word	0x08005d28

08000a7c <EnterSleepMode>:

	// Enviar o comando AT
	HAL_UART_Transmit(&huart2, command, sizeof(command), HAL_MAX_DELAY);
}

void EnterSleepMode() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	SetNextAlarm();
 8000a80:	f000 f808 	bl	8000a94 <SetNextAlarm>
	 HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000a84:	2001      	movs	r0, #1
 8000a86:	f000 fe41 	bl	800170c <HAL_PWR_EnableWakeUpPin>
	HAL_PWREx_EnterSHUTDOWNMode();
 8000a8a:	f000 fe73 	bl	8001774 <HAL_PWREx_EnterSHUTDOWNMode>

}
 8000a8e:	46c0      	nop			@ (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SetNextAlarm>:

void SetNextAlarm() {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b094      	sub	sp, #80	@ 0x50
 8000a98:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	RTC_AlarmTypeDef sAlarm;

// Obter o tempo e data atuais
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000a9a:	232c      	movs	r3, #44	@ 0x2c
 8000a9c:	18f9      	adds	r1, r7, r3
 8000a9e:	4b34      	ldr	r3, [pc, #208]	@ (8000b70 <SetNextAlarm+0xdc>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f001 fc16 	bl	80022d4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000aa8:	2328      	movs	r3, #40	@ 0x28
 8000aaa:	18f9      	adds	r1, r7, r3
 8000aac:	4b30      	ldr	r3, [pc, #192]	@ (8000b70 <SetNextAlarm+0xdc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f001 fcfd 	bl	80024b0 <HAL_RTC_GetDate>

// Configurar o tempo para o próximo alarme
	uint32_t totalSeconds = ALARM_PERIOD_IN_SECONDS; // Definir o período em segundos
 8000ab6:	2378      	movs	r3, #120	@ 0x78
 8000ab8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t hours = totalSeconds / 3600;
 8000aba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000abc:	22e1      	movs	r2, #225	@ 0xe1
 8000abe:	0111      	lsls	r1, r2, #4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	f7ff fb33 	bl	800012c <__udivsi3>
 8000ac6:	0003      	movs	r3, r0
 8000ac8:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t minutes = (totalSeconds % 3600) / 60;
 8000aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000acc:	22e1      	movs	r2, #225	@ 0xe1
 8000ace:	0111      	lsls	r1, r2, #4
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f7ff fbb1 	bl	8000238 <__aeabi_uidivmod>
 8000ad6:	000b      	movs	r3, r1
 8000ad8:	213c      	movs	r1, #60	@ 0x3c
 8000ada:	0018      	movs	r0, r3
 8000adc:	f7ff fb26 	bl	800012c <__udivsi3>
 8000ae0:	0003      	movs	r3, r0
 8000ae2:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t seconds = totalSeconds % 60;
 8000ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000ae6:	213c      	movs	r1, #60	@ 0x3c
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f7ff fba5 	bl	8000238 <__aeabi_uidivmod>
 8000aee:	000b      	movs	r3, r1
 8000af0:	643b      	str	r3, [r7, #64]	@ 0x40

// Configurar os valores no alarme
	sAlarm.Alarm = RTC_ALARM_A;
 8000af2:	003b      	movs	r3, r7
 8000af4:	2280      	movs	r2, #128	@ 0x80
 8000af6:	0052      	lsls	r2, r2, #1
 8000af8:	625a      	str	r2, [r3, #36]	@ 0x24
	sAlarm.AlarmTime.Hours = hours;
 8000afa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	003b      	movs	r3, r7
 8000b00:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8000b02:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	003b      	movs	r3, r7
 8000b08:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = seconds;
 8000b0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b0c:	b2da      	uxtb	r2, r3
 8000b0e:	003b      	movs	r3, r7
 8000b10:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2200      	movs	r2, #0
 8000b16:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b18:	003b      	movs	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	611a      	str	r2, [r3, #16]

	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY; // Ignorar a data, repetir alarme diariamente
 8000b1e:	003b      	movs	r3, r7
 8000b20:	2280      	movs	r2, #128	@ 0x80
 8000b22:	0612      	lsls	r2, r2, #24
 8000b24:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000b26:	003b      	movs	r3, r7
 8000b28:	22f0      	movs	r2, #240	@ 0xf0
 8000b2a:	0512      	lsls	r2, r2, #20
 8000b2c:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2200      	movs	r2, #0
 8000b32:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 1;  // Não utilizado devido à máscara
 8000b34:	003b      	movs	r3, r7
 8000b36:	2220      	movs	r2, #32
 8000b38:	2101      	movs	r1, #1
 8000b3a:	5499      	strb	r1, [r3, r2]

// Desativar alarme anterior antes de configurar o novo
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000b3c:	2380      	movs	r3, #128	@ 0x80
 8000b3e:	005a      	lsls	r2, r3, #1
 8000b40:	4b0b      	ldr	r3, [pc, #44]	@ (8000b70 <SetNextAlarm+0xdc>)
 8000b42:	0011      	movs	r1, r2
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 fded 	bl	8002724 <HAL_RTC_DeactivateAlarm>

// Configurar novo alarme com interrupção
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8000b4a:	0039      	movs	r1, r7
 8000b4c:	4b08      	ldr	r3, [pc, #32]	@ (8000b70 <SetNextAlarm+0xdc>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	0018      	movs	r0, r3
 8000b52:	f001 fcfb 	bl	800254c <HAL_RTC_SetAlarm_IT>
 8000b56:	1e03      	subs	r3, r0, #0
 8000b58:	d005      	beq.n	8000b66 <SetNextAlarm+0xd2>
		printf("Erro ao configurar o alarme RTC\n");
 8000b5a:	4b06      	ldr	r3, [pc, #24]	@ (8000b74 <SetNextAlarm+0xe0>)
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	f003 f9f1 	bl	8003f44 <puts>
		while (1)
 8000b62:	46c0      	nop			@ (mov r8, r8)
 8000b64:	e7fd      	b.n	8000b62 <SetNextAlarm+0xce>
			; // Travar em caso de erro crítico
	}


}
 8000b66:	46c0      	nop			@ (mov r8, r8)
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b014      	add	sp, #80	@ 0x50
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			@ (mov r8, r8)
 8000b70:	20000084 	.word	0x20000084
 8000b74:	08005e08 	.word	0x08005e08

08000b78 <InitFlags>:

void InitFlags() {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8000b7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ba8 <InitFlags+0x30>)
 8000b7e:	691a      	ldr	r2, [r3, #16]
 8000b80:	2380      	movs	r3, #128	@ 0x80
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	401a      	ands	r2, r3
 8000b86:	2380      	movs	r3, #128	@ 0x80
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	d106      	bne.n	8000b9c <InitFlags+0x24>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8000b8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ba8 <InitFlags+0x30>)
 8000b90:	4a06      	ldr	r2, [pc, #24]	@ (8000bac <InitFlags+0x34>)
 8000b92:	619a      	str	r2, [r3, #24]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8000b94:	2001      	movs	r0, #1
 8000b96:	f000 fdd9 	bl	800174c <HAL_PWR_DisableWakeUpPin>
	} else {
		MX_RTC_Init();
	}

}
 8000b9a:	e001      	b.n	8000ba0 <InitFlags+0x28>
		MX_RTC_Init();
 8000b9c:	f7ff fbd4 	bl	8000348 <MX_RTC_Init>
}
 8000ba0:	46c0      	nop			@ (mov r8, r8)
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	46c0      	nop			@ (mov r8, r8)
 8000ba8:	40007000 	.word	0x40007000
 8000bac:	00010100 	.word	0x00010100

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	46c0      	nop			@ (mov r8, r8)
 8000bba:	e7fd      	b.n	8000bb8 <Error_Handler+0x8>

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b13      	ldr	r3, [pc, #76]	@ (8000c10 <HAL_MspInit+0x54>)
 8000bc4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000bc6:	4b12      	ldr	r3, [pc, #72]	@ (8000c10 <HAL_MspInit+0x54>)
 8000bc8:	2101      	movs	r1, #1
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bce:	4b10      	ldr	r3, [pc, #64]	@ (8000c10 <HAL_MspInit+0x54>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	4b0d      	ldr	r3, [pc, #52]	@ (8000c10 <HAL_MspInit+0x54>)
 8000bdc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bde:	4b0c      	ldr	r3, [pc, #48]	@ (8000c10 <HAL_MspInit+0x54>)
 8000be0:	2180      	movs	r1, #128	@ 0x80
 8000be2:	0549      	lsls	r1, r1, #21
 8000be4:	430a      	orrs	r2, r1
 8000be6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000be8:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_MspInit+0x54>)
 8000bea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bec:	2380      	movs	r3, #128	@ 0x80
 8000bee:	055b      	lsls	r3, r3, #21
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	2004      	movs	r0, #4
 8000bfc:	f000 fb0a 	bl	8001214 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c00:	2004      	movs	r0, #4
 8000c02:	f000 fb1c 	bl	800123e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c06:	46c0      	nop			@ (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			@ (mov r8, r8)
 8000c10:	40021000 	.word	0x40021000

08000c14 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c14:	b590      	push	{r4, r7, lr}
 8000c16:	b08b      	sub	sp, #44	@ 0x2c
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c1c:	240c      	movs	r4, #12
 8000c1e:	193b      	adds	r3, r7, r4
 8000c20:	0018      	movs	r0, r3
 8000c22:	231c      	movs	r3, #28
 8000c24:	001a      	movs	r2, r3
 8000c26:	2100      	movs	r1, #0
 8000c28:	f003 fae0 	bl	80041ec <memset>
  if(hrtc->Instance==RTC)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a19      	ldr	r2, [pc, #100]	@ (8000c98 <HAL_RTC_MspInit+0x84>)
 8000c32:	4293      	cmp	r3, r2
 8000c34:	d12b      	bne.n	8000c8e <HAL_RTC_MspInit+0x7a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c36:	193b      	adds	r3, r7, r4
 8000c38:	2240      	movs	r2, #64	@ 0x40
 8000c3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c3c:	193b      	adds	r3, r7, r4
 8000c3e:	2280      	movs	r2, #128	@ 0x80
 8000c40:	0092      	lsls	r2, r2, #2
 8000c42:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c44:	193b      	adds	r3, r7, r4
 8000c46:	0018      	movs	r0, r3
 8000c48:	f001 f922 	bl	8001e90 <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	1e03      	subs	r3, r0, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c50:	f7ff ffae 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c54:	4b11      	ldr	r3, [pc, #68]	@ (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000c58:	4b10      	ldr	r3, [pc, #64]	@ (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c5a:	2180      	movs	r1, #128	@ 0x80
 8000c5c:	0209      	lsls	r1, r1, #8
 8000c5e:	430a      	orrs	r2, r1
 8000c60:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c62:	4b0e      	ldr	r3, [pc, #56]	@ (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c64:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c66:	4b0d      	ldr	r3, [pc, #52]	@ (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c68:	2180      	movs	r1, #128	@ 0x80
 8000c6a:	00c9      	lsls	r1, r1, #3
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c70:	4b0a      	ldr	r3, [pc, #40]	@ (8000c9c <HAL_RTC_MspInit+0x88>)
 8000c72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c74:	2380      	movs	r3, #128	@ 0x80
 8000c76:	00db      	lsls	r3, r3, #3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2100      	movs	r1, #0
 8000c82:	2002      	movs	r0, #2
 8000c84:	f000 fac6 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000c88:	2002      	movs	r0, #2
 8000c8a:	f000 fad8 	bl	800123e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000c8e:	46c0      	nop			@ (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b00b      	add	sp, #44	@ 0x2c
 8000c94:	bd90      	pop	{r4, r7, pc}
 8000c96:	46c0      	nop			@ (mov r8, r8)
 8000c98:	40002800 	.word	0x40002800
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca0:	b590      	push	{r4, r7, lr}
 8000ca2:	b08b      	sub	sp, #44	@ 0x2c
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca8:	2414      	movs	r4, #20
 8000caa:	193b      	adds	r3, r7, r4
 8000cac:	0018      	movs	r0, r3
 8000cae:	2314      	movs	r3, #20
 8000cb0:	001a      	movs	r2, r3
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	f003 fa9a 	bl	80041ec <memset>
  if(huart->Instance==USART2)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d3c <HAL_UART_MspInit+0x9c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d138      	bne.n	8000d34 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <HAL_UART_MspInit+0xa0>)
 8000cc4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d40 <HAL_UART_MspInit+0xa0>)
 8000cc8:	2180      	movs	r1, #128	@ 0x80
 8000cca:	0289      	lsls	r1, r1, #10
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d40 <HAL_UART_MspInit+0xa0>)
 8000cd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cd4:	2380      	movs	r3, #128	@ 0x80
 8000cd6:	029b      	lsls	r3, r3, #10
 8000cd8:	4013      	ands	r3, r2
 8000cda:	613b      	str	r3, [r7, #16]
 8000cdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b18      	ldr	r3, [pc, #96]	@ (8000d40 <HAL_UART_MspInit+0xa0>)
 8000ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000ce2:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <HAL_UART_MspInit+0xa0>)
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	635a      	str	r2, [r3, #52]	@ 0x34
 8000cea:	4b15      	ldr	r3, [pc, #84]	@ (8000d40 <HAL_UART_MspInit+0xa0>)
 8000cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cf6:	0021      	movs	r1, r4
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	220c      	movs	r2, #12
 8000cfc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2202      	movs	r2, #2
 8000d02:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d10:	187b      	adds	r3, r7, r1
 8000d12:	2201      	movs	r2, #1
 8000d14:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	187a      	adds	r2, r7, r1
 8000d18:	23a0      	movs	r3, #160	@ 0xa0
 8000d1a:	05db      	lsls	r3, r3, #23
 8000d1c:	0011      	movs	r1, r2
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f000 fb8a 	bl	8001438 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2100      	movs	r1, #0
 8000d28:	201c      	movs	r0, #28
 8000d2a:	f000 fa73 	bl	8001214 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2e:	201c      	movs	r0, #28
 8000d30:	f000 fa85 	bl	800123e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d34:	46c0      	nop			@ (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b00b      	add	sp, #44	@ 0x2c
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40021000 	.word	0x40021000

08000d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d48:	46c0      	nop			@ (mov r8, r8)
 8000d4a:	e7fd      	b.n	8000d48 <NMI_Handler+0x4>

08000d4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d50:	46c0      	nop			@ (mov r8, r8)
 8000d52:	e7fd      	b.n	8000d50 <HardFault_Handler+0x4>

08000d54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d58:	46c0      	nop			@ (mov r8, r8)
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f954 	bl	8001018 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupts through EXTI lines 19 and 21.
  */
void RTC_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d7c:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <RTC_IRQHandler+0x14>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f001 fd38 	bl	80027f4 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000d84:	46c0      	nop			@ (mov r8, r8)
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			@ (mov r8, r8)
 8000d8c:	20000084 	.word	0x20000084

08000d90 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000da0:	4b03      	ldr	r3, [pc, #12]	@ (8000db0 <USART2_IRQHandler+0x14>)
 8000da2:	0018      	movs	r0, r3
 8000da4:	f002 f834 	bl	8002e10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	200000ac 	.word	0x200000ac

08000db4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]
 8000dc4:	e00a      	b.n	8000ddc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc6:	e000      	b.n	8000dca <_read+0x16>
 8000dc8:	bf00      	nop
 8000dca:	0001      	movs	r1, r0
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	1c5a      	adds	r2, r3, #1
 8000dd0:	60ba      	str	r2, [r7, #8]
 8000dd2:	b2ca      	uxtb	r2, r1
 8000dd4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	617b      	str	r3, [r7, #20]
 8000ddc:	697a      	ldr	r2, [r7, #20]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	dbf0      	blt.n	8000dc6 <_read+0x12>
  }

  return len;
 8000de4:	687b      	ldr	r3, [r7, #4]
}
 8000de6:	0018      	movs	r0, r3
 8000de8:	46bd      	mov	sp, r7
 8000dea:	b006      	add	sp, #24
 8000dec:	bd80      	pop	{r7, pc}

08000dee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b086      	sub	sp, #24
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	60f8      	str	r0, [r7, #12]
 8000df6:	60b9      	str	r1, [r7, #8]
 8000df8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	e009      	b.n	8000e14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	1c5a      	adds	r2, r3, #1
 8000e04:	60ba      	str	r2, [r7, #8]
 8000e06:	781b      	ldrb	r3, [r3, #0]
 8000e08:	0018      	movs	r0, r3
 8000e0a:	e000      	b.n	8000e0e <_write+0x20>
 8000e0c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	3301      	adds	r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697a      	ldr	r2, [r7, #20]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	dbf1      	blt.n	8000e00 <_write+0x12>
  }
  return len;
 8000e1c:	687b      	ldr	r3, [r7, #4]
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b006      	add	sp, #24
 8000e24:	bd80      	pop	{r7, pc}

08000e26 <_close>:

int _close(int file)
{
 8000e26:	b580      	push	{r7, lr}
 8000e28:	b082      	sub	sp, #8
 8000e2a:	af00      	add	r7, sp, #0
 8000e2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	425b      	negs	r3, r3
}
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b002      	add	sp, #8
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	2280      	movs	r2, #128	@ 0x80
 8000e48:	0192      	lsls	r2, r2, #6
 8000e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <_isatty>:

int _isatty(int file)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e5e:	2301      	movs	r3, #1
}
 8000e60:	0018      	movs	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	b002      	add	sp, #8
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	60f8      	str	r0, [r7, #12]
 8000e70:	60b9      	str	r1, [r7, #8]
 8000e72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	0018      	movs	r0, r3
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	b004      	add	sp, #16
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e88:	4a14      	ldr	r2, [pc, #80]	@ (8000edc <_sbrk+0x5c>)
 8000e8a:	4b15      	ldr	r3, [pc, #84]	@ (8000ee0 <_sbrk+0x60>)
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e94:	4b13      	ldr	r3, [pc, #76]	@ (8000ee4 <_sbrk+0x64>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d102      	bne.n	8000ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e9c:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <_sbrk+0x64>)
 8000e9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ee8 <_sbrk+0x68>)
 8000ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ea2:	4b10      	ldr	r3, [pc, #64]	@ (8000ee4 <_sbrk+0x64>)
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	18d3      	adds	r3, r2, r3
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d207      	bcs.n	8000ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eb0:	f003 fa08 	bl	80042c4 <__errno>
 8000eb4:	0003      	movs	r3, r0
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	425b      	negs	r3, r3
 8000ebe:	e009      	b.n	8000ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ec0:	4b08      	ldr	r3, [pc, #32]	@ (8000ee4 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec6:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <_sbrk+0x64>)
 8000ec8:	681a      	ldr	r2, [r3, #0]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	18d2      	adds	r2, r2, r3
 8000ece:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <_sbrk+0x64>)
 8000ed0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
}
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b006      	add	sp, #24
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20001800 	.word	0x20001800
 8000ee0:	00000400 	.word	0x00000400
 8000ee4:	20000240 	.word	0x20000240
 8000ee8:	20000398 	.word	0x20000398

08000eec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ef0:	4b03      	ldr	r3, [pc, #12]	@ (8000f00 <SystemInit+0x14>)
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	0512      	lsls	r2, r2, #20
 8000ef6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ef8:	46c0      	nop			@ (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	46c0      	nop			@ (mov r8, r8)
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f04:	480d      	ldr	r0, [pc, #52]	@ (8000f3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f06:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f08:	f7ff fff0 	bl	8000eec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f0e:	e003      	b.n	8000f18 <LoopCopyDataInit>

08000f10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f10:	4b0b      	ldr	r3, [pc, #44]	@ (8000f40 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000f12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f16:	3104      	adds	r1, #4

08000f18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f18:	480a      	ldr	r0, [pc, #40]	@ (8000f44 <LoopForever+0xa>)
  ldr r3, =_edata
 8000f1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f48 <LoopForever+0xe>)
  adds r2, r0, r1
 8000f1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f20:	d3f6      	bcc.n	8000f10 <CopyDataInit>
  ldr r2, =_sbss
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <LoopForever+0x12>)
  b LoopFillZerobss
 8000f24:	e002      	b.n	8000f2c <LoopFillZerobss>

08000f26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f26:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f28:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f2a:	3204      	adds	r2, #4

08000f2c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000f2c:	4b08      	ldr	r3, [pc, #32]	@ (8000f50 <LoopForever+0x16>)
  cmp r2, r3
 8000f2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f30:	d3f9      	bcc.n	8000f26 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000f32:	f003 f9cd 	bl	80042d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f36:	f7ff f985 	bl	8000244 <main>

08000f3a <LoopForever>:

LoopForever:
    b LoopForever
 8000f3a:	e7fe      	b.n	8000f3a <LoopForever>
  ldr   r0, =_estack
 8000f3c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000f40:	08006004 	.word	0x08006004
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f48:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000f4c:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000f50:	20000394 	.word	0x20000394

08000f54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f54:	e7fe      	b.n	8000f54 <ADC1_IRQHandler>

08000f56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b082      	sub	sp, #8
 8000f5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f62:	2003      	movs	r0, #3
 8000f64:	f000 f80e 	bl	8000f84 <HAL_InitTick>
 8000f68:	1e03      	subs	r3, r0, #0
 8000f6a:	d003      	beq.n	8000f74 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000f6c:	1dfb      	adds	r3, r7, #7
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
 8000f72:	e001      	b.n	8000f78 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f74:	f7ff fe22 	bl	8000bbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f78:	1dfb      	adds	r3, r7, #7
 8000f7a:	781b      	ldrb	r3, [r3, #0]
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b002      	add	sp, #8
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b085      	sub	sp, #20
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8c:	230f      	movs	r3, #15
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000f94:	4b1d      	ldr	r3, [pc, #116]	@ (800100c <HAL_InitTick+0x88>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d02b      	beq.n	8000ff4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001010 <HAL_InitTick+0x8c>)
 8000f9e:	681c      	ldr	r4, [r3, #0]
 8000fa0:	4b1a      	ldr	r3, [pc, #104]	@ (800100c <HAL_InitTick+0x88>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	0019      	movs	r1, r3
 8000fa6:	23fa      	movs	r3, #250	@ 0xfa
 8000fa8:	0098      	lsls	r0, r3, #2
 8000faa:	f7ff f8bf 	bl	800012c <__udivsi3>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	0019      	movs	r1, r3
 8000fb2:	0020      	movs	r0, r4
 8000fb4:	f7ff f8ba 	bl	800012c <__udivsi3>
 8000fb8:	0003      	movs	r3, r0
 8000fba:	0018      	movs	r0, r3
 8000fbc:	f000 f953 	bl	8001266 <HAL_SYSTICK_Config>
 8000fc0:	1e03      	subs	r3, r0, #0
 8000fc2:	d112      	bne.n	8000fea <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2b03      	cmp	r3, #3
 8000fc8:	d80a      	bhi.n	8000fe0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fca:	6879      	ldr	r1, [r7, #4]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	425b      	negs	r3, r3
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 f91e 	bl	8001214 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <HAL_InitTick+0x90>)
 8000fda:	687a      	ldr	r2, [r7, #4]
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	e00d      	b.n	8000ffc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fe0:	230f      	movs	r3, #15
 8000fe2:	18fb      	adds	r3, r7, r3
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	701a      	strb	r2, [r3, #0]
 8000fe8:	e008      	b.n	8000ffc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fea:	230f      	movs	r3, #15
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e003      	b.n	8000ffc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	18fb      	adds	r3, r7, r3
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000ffc:	230f      	movs	r3, #15
 8000ffe:	18fb      	adds	r3, r7, r3
 8001000:	781b      	ldrb	r3, [r3, #0]
}
 8001002:	0018      	movs	r0, r3
 8001004:	46bd      	mov	sp, r7
 8001006:	b005      	add	sp, #20
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	20000008 	.word	0x20000008
 8001010:	20000000 	.word	0x20000000
 8001014:	20000004 	.word	0x20000004

08001018 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800101c:	4b05      	ldr	r3, [pc, #20]	@ (8001034 <HAL_IncTick+0x1c>)
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	001a      	movs	r2, r3
 8001022:	4b05      	ldr	r3, [pc, #20]	@ (8001038 <HAL_IncTick+0x20>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	18d2      	adds	r2, r2, r3
 8001028:	4b03      	ldr	r3, [pc, #12]	@ (8001038 <HAL_IncTick+0x20>)
 800102a:	601a      	str	r2, [r3, #0]
}
 800102c:	46c0      	nop			@ (mov r8, r8)
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			@ (mov r8, r8)
 8001034:	20000008 	.word	0x20000008
 8001038:	20000244 	.word	0x20000244

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b02      	ldr	r3, [pc, #8]	@ (800104c <HAL_GetTick+0x10>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	0018      	movs	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	46c0      	nop			@ (mov r8, r8)
 800104c:	20000244 	.word	0x20000244

08001050 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001058:	f7ff fff0 	bl	800103c <HAL_GetTick>
 800105c:	0003      	movs	r3, r0
 800105e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3301      	adds	r3, #1
 8001068:	d005      	beq.n	8001076 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106a:	4b0a      	ldr	r3, [pc, #40]	@ (8001094 <HAL_Delay+0x44>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	001a      	movs	r2, r3
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	189b      	adds	r3, r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001076:	46c0      	nop			@ (mov r8, r8)
 8001078:	f7ff ffe0 	bl	800103c <HAL_GetTick>
 800107c:	0002      	movs	r2, r0
 800107e:	68bb      	ldr	r3, [r7, #8]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	68fa      	ldr	r2, [r7, #12]
 8001084:	429a      	cmp	r2, r3
 8001086:	d8f7      	bhi.n	8001078 <HAL_Delay+0x28>
  {
  }
}
 8001088:	46c0      	nop			@ (mov r8, r8)
 800108a:	46c0      	nop			@ (mov r8, r8)
 800108c:	46bd      	mov	sp, r7
 800108e:	b004      	add	sp, #16
 8001090:	bd80      	pop	{r7, pc}
 8001092:	46c0      	nop			@ (mov r8, r8)
 8001094:	20000008 	.word	0x20000008

08001098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	0002      	movs	r2, r0
 80010a0:	1dfb      	adds	r3, r7, #7
 80010a2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80010aa:	d809      	bhi.n	80010c0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	001a      	movs	r2, r3
 80010b2:	231f      	movs	r3, #31
 80010b4:	401a      	ands	r2, r3
 80010b6:	4b04      	ldr	r3, [pc, #16]	@ (80010c8 <__NVIC_EnableIRQ+0x30>)
 80010b8:	2101      	movs	r1, #1
 80010ba:	4091      	lsls	r1, r2
 80010bc:	000a      	movs	r2, r1
 80010be:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010c0:	46c0      	nop			@ (mov r8, r8)
 80010c2:	46bd      	mov	sp, r7
 80010c4:	b002      	add	sp, #8
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	e000e100 	.word	0xe000e100

080010cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010cc:	b590      	push	{r4, r7, lr}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	0002      	movs	r2, r0
 80010d4:	6039      	str	r1, [r7, #0]
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	2b7f      	cmp	r3, #127	@ 0x7f
 80010e0:	d828      	bhi.n	8001134 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e2:	4a2f      	ldr	r2, [pc, #188]	@ (80011a0 <__NVIC_SetPriority+0xd4>)
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	b25b      	sxtb	r3, r3
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	33c0      	adds	r3, #192	@ 0xc0
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	589b      	ldr	r3, [r3, r2]
 80010f2:	1dfa      	adds	r2, r7, #7
 80010f4:	7812      	ldrb	r2, [r2, #0]
 80010f6:	0011      	movs	r1, r2
 80010f8:	2203      	movs	r2, #3
 80010fa:	400a      	ands	r2, r1
 80010fc:	00d2      	lsls	r2, r2, #3
 80010fe:	21ff      	movs	r1, #255	@ 0xff
 8001100:	4091      	lsls	r1, r2
 8001102:	000a      	movs	r2, r1
 8001104:	43d2      	mvns	r2, r2
 8001106:	401a      	ands	r2, r3
 8001108:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	019b      	lsls	r3, r3, #6
 800110e:	22ff      	movs	r2, #255	@ 0xff
 8001110:	401a      	ands	r2, r3
 8001112:	1dfb      	adds	r3, r7, #7
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	0018      	movs	r0, r3
 8001118:	2303      	movs	r3, #3
 800111a:	4003      	ands	r3, r0
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001120:	481f      	ldr	r0, [pc, #124]	@ (80011a0 <__NVIC_SetPriority+0xd4>)
 8001122:	1dfb      	adds	r3, r7, #7
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	b25b      	sxtb	r3, r3
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	430a      	orrs	r2, r1
 800112c:	33c0      	adds	r3, #192	@ 0xc0
 800112e:	009b      	lsls	r3, r3, #2
 8001130:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001132:	e031      	b.n	8001198 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001134:	4a1b      	ldr	r2, [pc, #108]	@ (80011a4 <__NVIC_SetPriority+0xd8>)
 8001136:	1dfb      	adds	r3, r7, #7
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	0019      	movs	r1, r3
 800113c:	230f      	movs	r3, #15
 800113e:	400b      	ands	r3, r1
 8001140:	3b08      	subs	r3, #8
 8001142:	089b      	lsrs	r3, r3, #2
 8001144:	3306      	adds	r3, #6
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	18d3      	adds	r3, r2, r3
 800114a:	3304      	adds	r3, #4
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	1dfa      	adds	r2, r7, #7
 8001150:	7812      	ldrb	r2, [r2, #0]
 8001152:	0011      	movs	r1, r2
 8001154:	2203      	movs	r2, #3
 8001156:	400a      	ands	r2, r1
 8001158:	00d2      	lsls	r2, r2, #3
 800115a:	21ff      	movs	r1, #255	@ 0xff
 800115c:	4091      	lsls	r1, r2
 800115e:	000a      	movs	r2, r1
 8001160:	43d2      	mvns	r2, r2
 8001162:	401a      	ands	r2, r3
 8001164:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	019b      	lsls	r3, r3, #6
 800116a:	22ff      	movs	r2, #255	@ 0xff
 800116c:	401a      	ands	r2, r3
 800116e:	1dfb      	adds	r3, r7, #7
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	0018      	movs	r0, r3
 8001174:	2303      	movs	r3, #3
 8001176:	4003      	ands	r3, r0
 8001178:	00db      	lsls	r3, r3, #3
 800117a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800117c:	4809      	ldr	r0, [pc, #36]	@ (80011a4 <__NVIC_SetPriority+0xd8>)
 800117e:	1dfb      	adds	r3, r7, #7
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	001c      	movs	r4, r3
 8001184:	230f      	movs	r3, #15
 8001186:	4023      	ands	r3, r4
 8001188:	3b08      	subs	r3, #8
 800118a:	089b      	lsrs	r3, r3, #2
 800118c:	430a      	orrs	r2, r1
 800118e:	3306      	adds	r3, #6
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	18c3      	adds	r3, r0, r3
 8001194:	3304      	adds	r3, #4
 8001196:	601a      	str	r2, [r3, #0]
}
 8001198:	46c0      	nop			@ (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b003      	add	sp, #12
 800119e:	bd90      	pop	{r4, r7, pc}
 80011a0:	e000e100 	.word	0xe000e100
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80011ac:	f3bf 8f4f 	dsb	sy
}
 80011b0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011b2:	4b04      	ldr	r3, [pc, #16]	@ (80011c4 <__NVIC_SystemReset+0x1c>)
 80011b4:	4a04      	ldr	r2, [pc, #16]	@ (80011c8 <__NVIC_SystemReset+0x20>)
 80011b6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011b8:	f3bf 8f4f 	dsb	sy
}
 80011bc:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011be:	46c0      	nop			@ (mov r8, r8)
 80011c0:	e7fd      	b.n	80011be <__NVIC_SystemReset+0x16>
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	05fa0004 	.word	0x05fa0004

080011cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	1e5a      	subs	r2, r3, #1
 80011d8:	2380      	movs	r3, #128	@ 0x80
 80011da:	045b      	lsls	r3, r3, #17
 80011dc:	429a      	cmp	r2, r3
 80011de:	d301      	bcc.n	80011e4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011e0:	2301      	movs	r3, #1
 80011e2:	e010      	b.n	8001206 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <SysTick_Config+0x44>)
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	3a01      	subs	r2, #1
 80011ea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ec:	2301      	movs	r3, #1
 80011ee:	425b      	negs	r3, r3
 80011f0:	2103      	movs	r1, #3
 80011f2:	0018      	movs	r0, r3
 80011f4:	f7ff ff6a 	bl	80010cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f8:	4b05      	ldr	r3, [pc, #20]	@ (8001210 <SysTick_Config+0x44>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <SysTick_Config+0x44>)
 8001200:	2207      	movs	r2, #7
 8001202:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001204:	2300      	movs	r3, #0
}
 8001206:	0018      	movs	r0, r3
 8001208:	46bd      	mov	sp, r7
 800120a:	b002      	add	sp, #8
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			@ (mov r8, r8)
 8001210:	e000e010 	.word	0xe000e010

08001214 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	60b9      	str	r1, [r7, #8]
 800121c:	607a      	str	r2, [r7, #4]
 800121e:	210f      	movs	r1, #15
 8001220:	187b      	adds	r3, r7, r1
 8001222:	1c02      	adds	r2, r0, #0
 8001224:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	187b      	adds	r3, r7, r1
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	b25b      	sxtb	r3, r3
 800122e:	0011      	movs	r1, r2
 8001230:	0018      	movs	r0, r3
 8001232:	f7ff ff4b 	bl	80010cc <__NVIC_SetPriority>
}
 8001236:	46c0      	nop			@ (mov r8, r8)
 8001238:	46bd      	mov	sp, r7
 800123a:	b004      	add	sp, #16
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800123e:	b580      	push	{r7, lr}
 8001240:	b082      	sub	sp, #8
 8001242:	af00      	add	r7, sp, #0
 8001244:	0002      	movs	r2, r0
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff ff21 	bl	8001098 <__NVIC_EnableIRQ>
}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001262:	f7ff ffa1 	bl	80011a8 <__NVIC_SystemReset>

08001266 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff ffab 	bl	80011cc <SysTick_Config>
 8001276:	0003      	movs	r3, r0
}
 8001278:	0018      	movs	r0, r3
 800127a:	46bd      	mov	sp, r7
 800127c:	b002      	add	sp, #8
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e050      	b.n	8001334 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2225      	movs	r2, #37	@ 0x25
 8001296:	5c9b      	ldrb	r3, [r3, r2]
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d008      	beq.n	80012b0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2204      	movs	r2, #4
 80012a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2224      	movs	r2, #36	@ 0x24
 80012a8:	2100      	movs	r1, #0
 80012aa:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012ac:	2301      	movs	r3, #1
 80012ae:	e041      	b.n	8001334 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	210e      	movs	r1, #14
 80012bc:	438a      	bics	r2, r1
 80012be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ca:	491c      	ldr	r1, [pc, #112]	@ (800133c <HAL_DMA_Abort+0xbc>)
 80012cc:	400a      	ands	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2101      	movs	r1, #1
 80012dc:	438a      	bics	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80012e0:	4b17      	ldr	r3, [pc, #92]	@ (8001340 <HAL_DMA_Abort+0xc0>)
 80012e2:	6859      	ldr	r1, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e8:	221c      	movs	r2, #28
 80012ea:	4013      	ands	r3, r2
 80012ec:	2201      	movs	r2, #1
 80012ee:	409a      	lsls	r2, r3
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <HAL_DMA_Abort+0xc0>)
 80012f2:	430a      	orrs	r2, r1
 80012f4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80012fe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001304:	2b00      	cmp	r3, #0
 8001306:	d00c      	beq.n	8001322 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001312:	490a      	ldr	r1, [pc, #40]	@ (800133c <HAL_DMA_Abort+0xbc>)
 8001314:	400a      	ands	r2, r1
 8001316:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800131c:	687a      	ldr	r2, [r7, #4]
 800131e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001320:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2225      	movs	r2, #37	@ 0x25
 8001326:	2101      	movs	r1, #1
 8001328:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2224      	movs	r2, #36	@ 0x24
 800132e:	2100      	movs	r1, #0
 8001330:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001332:	2300      	movs	r3, #0
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b002      	add	sp, #8
 800133a:	bd80      	pop	{r7, pc}
 800133c:	fffffeff 	.word	0xfffffeff
 8001340:	40020000 	.word	0x40020000

08001344 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800134c:	230f      	movs	r3, #15
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	2200      	movs	r2, #0
 8001352:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2224      	movs	r2, #36	@ 0x24
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2224      	movs	r2, #36	@ 0x24
 8001360:	5c9b      	ldrb	r3, [r3, r2]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_DMA_Abort_IT+0x26>
 8001366:	2302      	movs	r3, #2
 8001368:	e05e      	b.n	8001428 <HAL_DMA_Abort_IT+0xe4>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2224      	movs	r2, #36	@ 0x24
 800136e:	2101      	movs	r1, #1
 8001370:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2225      	movs	r2, #37	@ 0x25
 8001376:	5c9b      	ldrb	r3, [r3, r2]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b02      	cmp	r3, #2
 800137c:	d007      	beq.n	800138e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	2204      	movs	r2, #4
 8001382:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001384:	230f      	movs	r3, #15
 8001386:	18fb      	adds	r3, r7, r3
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
 800138c:	e049      	b.n	8001422 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	210e      	movs	r1, #14
 800139a:	438a      	bics	r2, r1
 800139c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2101      	movs	r1, #1
 80013aa:	438a      	bics	r2, r1
 80013ac:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b8:	491d      	ldr	r1, [pc, #116]	@ (8001430 <HAL_DMA_Abort_IT+0xec>)
 80013ba:	400a      	ands	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80013be:	4b1d      	ldr	r3, [pc, #116]	@ (8001434 <HAL_DMA_Abort_IT+0xf0>)
 80013c0:	6859      	ldr	r1, [r3, #4]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	221c      	movs	r2, #28
 80013c8:	4013      	ands	r3, r2
 80013ca:	2201      	movs	r2, #1
 80013cc:	409a      	lsls	r2, r3
 80013ce:	4b19      	ldr	r3, [pc, #100]	@ (8001434 <HAL_DMA_Abort_IT+0xf0>)
 80013d0:	430a      	orrs	r2, r1
 80013d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80013dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00c      	beq.n	8001400 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80013f0:	490f      	ldr	r1, [pc, #60]	@ (8001430 <HAL_DMA_Abort_IT+0xec>)
 80013f2:	400a      	ands	r2, r1
 80013f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80013fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2225      	movs	r2, #37	@ 0x25
 8001404:	2101      	movs	r1, #1
 8001406:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2224      	movs	r2, #36	@ 0x24
 800140c:	2100      	movs	r1, #0
 800140e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001414:	2b00      	cmp	r3, #0
 8001416:	d004      	beq.n	8001422 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	0010      	movs	r0, r2
 8001420:	4798      	blx	r3
    }
  }
  return status;
 8001422:	230f      	movs	r3, #15
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
}
 8001428:	0018      	movs	r0, r3
 800142a:	46bd      	mov	sp, r7
 800142c:	b004      	add	sp, #16
 800142e:	bd80      	pop	{r7, pc}
 8001430:	fffffeff 	.word	0xfffffeff
 8001434:	40020000 	.word	0x40020000

08001438 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b086      	sub	sp, #24
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001446:	e14d      	b.n	80016e4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	2101      	movs	r1, #1
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	4091      	lsls	r1, r2
 8001452:	000a      	movs	r2, r1
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d100      	bne.n	8001460 <HAL_GPIO_Init+0x28>
 800145e:	e13e      	b.n	80016de <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x38>
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2b12      	cmp	r3, #18
 800146e:	d125      	bne.n	80014bc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001470:	693b      	ldr	r3, [r7, #16]
 8001472:	08da      	lsrs	r2, r3, #3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3208      	adds	r2, #8
 8001478:	0092      	lsls	r2, r2, #2
 800147a:	58d3      	ldr	r3, [r2, r3]
 800147c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	2207      	movs	r2, #7
 8001482:	4013      	ands	r3, r2
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	220f      	movs	r2, #15
 8001488:	409a      	lsls	r2, r3
 800148a:	0013      	movs	r3, r2
 800148c:	43da      	mvns	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	4013      	ands	r3, r2
 8001492:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	691b      	ldr	r3, [r3, #16]
 8001498:	220f      	movs	r2, #15
 800149a:	401a      	ands	r2, r3
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	2107      	movs	r1, #7
 80014a0:	400b      	ands	r3, r1
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	409a      	lsls	r2, r3
 80014a6:	0013      	movs	r3, r2
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	4313      	orrs	r3, r2
 80014ac:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	08da      	lsrs	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3208      	adds	r2, #8
 80014b6:	0092      	lsls	r2, r2, #2
 80014b8:	6979      	ldr	r1, [r7, #20]
 80014ba:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	2203      	movs	r2, #3
 80014c8:	409a      	lsls	r2, r3
 80014ca:	0013      	movs	r3, r2
 80014cc:	43da      	mvns	r2, r3
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	4013      	ands	r3, r2
 80014d2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	2203      	movs	r2, #3
 80014da:	401a      	ands	r2, r3
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	409a      	lsls	r2, r3
 80014e2:	0013      	movs	r3, r2
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	4313      	orrs	r3, r2
 80014e8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	697a      	ldr	r2, [r7, #20]
 80014ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b01      	cmp	r3, #1
 80014f6:	d00b      	beq.n	8001510 <HAL_GPIO_Init+0xd8>
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d007      	beq.n	8001510 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001504:	2b11      	cmp	r3, #17
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b12      	cmp	r3, #18
 800150e:	d130      	bne.n	8001572 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	2203      	movs	r2, #3
 800151c:	409a      	lsls	r2, r3
 800151e:	0013      	movs	r3, r2
 8001520:	43da      	mvns	r2, r3
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	4013      	ands	r3, r2
 8001526:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	68da      	ldr	r2, [r3, #12]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	409a      	lsls	r2, r3
 8001532:	0013      	movs	r3, r2
 8001534:	697a      	ldr	r2, [r7, #20]
 8001536:	4313      	orrs	r3, r2
 8001538:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	697a      	ldr	r2, [r7, #20]
 800153e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001546:	2201      	movs	r2, #1
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	409a      	lsls	r2, r3
 800154c:	0013      	movs	r3, r2
 800154e:	43da      	mvns	r2, r3
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	4013      	ands	r3, r2
 8001554:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	091b      	lsrs	r3, r3, #4
 800155c:	2201      	movs	r2, #1
 800155e:	401a      	ands	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	697a      	ldr	r2, [r7, #20]
 8001568:	4313      	orrs	r3, r2
 800156a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	697a      	ldr	r2, [r7, #20]
 8001570:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d017      	beq.n	80015aa <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	409a      	lsls	r2, r3
 8001588:	0013      	movs	r3, r2
 800158a:	43da      	mvns	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	4013      	ands	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	409a      	lsls	r2, r3
 800159c:	0013      	movs	r3, r2
 800159e:	697a      	ldr	r2, [r7, #20]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	697a      	ldr	r2, [r7, #20]
 80015a8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	2380      	movs	r3, #128	@ 0x80
 80015b0:	055b      	lsls	r3, r3, #21
 80015b2:	4013      	ands	r3, r2
 80015b4:	d100      	bne.n	80015b8 <HAL_GPIO_Init+0x180>
 80015b6:	e092      	b.n	80016de <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80015b8:	4a50      	ldr	r2, [pc, #320]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	089b      	lsrs	r3, r3, #2
 80015be:	3318      	adds	r3, #24
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	589b      	ldr	r3, [r3, r2]
 80015c4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	2203      	movs	r2, #3
 80015ca:	4013      	ands	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	220f      	movs	r2, #15
 80015d0:	409a      	lsls	r2, r3
 80015d2:	0013      	movs	r3, r2
 80015d4:	43da      	mvns	r2, r3
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	4013      	ands	r3, r2
 80015da:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80015dc:	687a      	ldr	r2, [r7, #4]
 80015de:	23a0      	movs	r3, #160	@ 0xa0
 80015e0:	05db      	lsls	r3, r3, #23
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d013      	beq.n	800160e <HAL_GPIO_Init+0x1d6>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4a45      	ldr	r2, [pc, #276]	@ (8001700 <HAL_GPIO_Init+0x2c8>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d00d      	beq.n	800160a <HAL_GPIO_Init+0x1d2>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4a44      	ldr	r2, [pc, #272]	@ (8001704 <HAL_GPIO_Init+0x2cc>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d007      	beq.n	8001606 <HAL_GPIO_Init+0x1ce>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	4a43      	ldr	r2, [pc, #268]	@ (8001708 <HAL_GPIO_Init+0x2d0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d101      	bne.n	8001602 <HAL_GPIO_Init+0x1ca>
 80015fe:	2305      	movs	r3, #5
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x1d8>
 8001602:	2306      	movs	r3, #6
 8001604:	e004      	b.n	8001610 <HAL_GPIO_Init+0x1d8>
 8001606:	2302      	movs	r3, #2
 8001608:	e002      	b.n	8001610 <HAL_GPIO_Init+0x1d8>
 800160a:	2301      	movs	r3, #1
 800160c:	e000      	b.n	8001610 <HAL_GPIO_Init+0x1d8>
 800160e:	2300      	movs	r3, #0
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	2103      	movs	r1, #3
 8001614:	400a      	ands	r2, r1
 8001616:	00d2      	lsls	r2, r2, #3
 8001618:	4093      	lsls	r3, r2
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	4313      	orrs	r3, r2
 800161e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001620:	4936      	ldr	r1, [pc, #216]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	089b      	lsrs	r3, r3, #2
 8001626:	3318      	adds	r3, #24
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800162e:	4a33      	ldr	r2, [pc, #204]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 8001630:	2380      	movs	r3, #128	@ 0x80
 8001632:	58d3      	ldr	r3, [r2, r3]
 8001634:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	43da      	mvns	r2, r3
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	4013      	ands	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685a      	ldr	r2, [r3, #4]
 8001644:	2380      	movs	r3, #128	@ 0x80
 8001646:	025b      	lsls	r3, r3, #9
 8001648:	4013      	ands	r3, r2
 800164a:	d003      	beq.n	8001654 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	4313      	orrs	r3, r2
 8001652:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001654:	4929      	ldr	r1, [pc, #164]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 8001656:	2280      	movs	r2, #128	@ 0x80
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800165c:	4a27      	ldr	r2, [pc, #156]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 800165e:	2384      	movs	r3, #132	@ 0x84
 8001660:	58d3      	ldr	r3, [r2, r3]
 8001662:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	43da      	mvns	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	4013      	ands	r3, r2
 800166c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	685a      	ldr	r2, [r3, #4]
 8001672:	2380      	movs	r3, #128	@ 0x80
 8001674:	029b      	lsls	r3, r3, #10
 8001676:	4013      	ands	r3, r2
 8001678:	d003      	beq.n	8001682 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800167a:	697a      	ldr	r2, [r7, #20]
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001682:	491e      	ldr	r1, [pc, #120]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 8001684:	2284      	movs	r2, #132	@ 0x84
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800168a:	4b1c      	ldr	r3, [pc, #112]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	43da      	mvns	r2, r3
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4013      	ands	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	2380      	movs	r3, #128	@ 0x80
 80016a0:	035b      	lsls	r3, r3, #13
 80016a2:	4013      	ands	r3, r2
 80016a4:	d003      	beq.n	80016ae <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80016b4:	4b11      	ldr	r3, [pc, #68]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	43da      	mvns	r2, r3
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	4013      	ands	r3, r2
 80016c2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685a      	ldr	r2, [r3, #4]
 80016c8:	2380      	movs	r3, #128	@ 0x80
 80016ca:	039b      	lsls	r3, r3, #14
 80016cc:	4013      	ands	r3, r2
 80016ce:	d003      	beq.n	80016d8 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <HAL_GPIO_Init+0x2c4>)
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	3301      	adds	r3, #1
 80016e2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	40da      	lsrs	r2, r3
 80016ec:	1e13      	subs	r3, r2, #0
 80016ee:	d000      	beq.n	80016f2 <HAL_GPIO_Init+0x2ba>
 80016f0:	e6aa      	b.n	8001448 <HAL_GPIO_Init+0x10>
  }
}
 80016f2:	46c0      	nop			@ (mov r8, r8)
 80016f4:	46c0      	nop			@ (mov r8, r8)
 80016f6:	46bd      	mov	sp, r7
 80016f8:	b006      	add	sp, #24
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	40021800 	.word	0x40021800
 8001700:	50000400 	.word	0x50000400
 8001704:	50000800 	.word	0x50000800
 8001708:	50001400 	.word	0x50001400

0800170c <HAL_PWR_EnableWakeUpPin>:
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @note  (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	212f      	movs	r1, #47	@ 0x2f
 800171c:	400a      	ands	r2, r1
 800171e:	43d2      	mvns	r2, r2
 8001720:	401a      	ands	r2, r3
 8001722:	0011      	movs	r1, r2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	0a1a      	lsrs	r2, r3, #8
 8001728:	4b07      	ldr	r3, [pc, #28]	@ (8001748 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800172a:	430a      	orrs	r2, r1
 800172c:	60da      	str	r2, [r3, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800172e:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001730:	6899      	ldr	r1, [r3, #8]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	222f      	movs	r2, #47	@ 0x2f
 8001736:	401a      	ands	r2, r3
 8001738:	4b03      	ldr	r3, [pc, #12]	@ (8001748 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
}
 800173e:	46c0      	nop			@ (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b002      	add	sp, #8
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	40007000 	.word	0x40007000

0800174c <HAL_PWR_DisableWakeUpPin>:
  *                PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5 (*), PWR_WAKEUP_PIN6
  * @note   (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8001754:	4b06      	ldr	r3, [pc, #24]	@ (8001770 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	212f      	movs	r1, #47	@ 0x2f
 800175c:	400b      	ands	r3, r1
 800175e:	43d9      	mvns	r1, r3
 8001760:	4b03      	ldr	r3, [pc, #12]	@ (8001770 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001762:	400a      	ands	r2, r1
 8001764:	609a      	str	r2, [r3, #8]
}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	46bd      	mov	sp, r7
 800176a:	b002      	add	sp, #8
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			@ (mov r8, r8)
 8001770:	40007000 	.word	0x40007000

08001774 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8001778:	4b09      	ldr	r3, [pc, #36]	@ (80017a0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	2207      	movs	r2, #7
 800177e:	4393      	bics	r3, r2
 8001780:	001a      	movs	r2, r3
 8001782:	4b07      	ldr	r3, [pc, #28]	@ (80017a0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001784:	2104      	movs	r1, #4
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 800178c:	691a      	ldr	r2, [r3, #16]
 800178e:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001790:	2104      	movs	r1, #4
 8001792:	430a      	orrs	r2, r1
 8001794:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8001796:	bf30      	wfi
}
 8001798:	46c0      	nop			@ (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	40007000 	.word	0x40007000
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b086      	sub	sp, #24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e1d0      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2201      	movs	r2, #1
 80017c0:	4013      	ands	r3, r2
 80017c2:	d100      	bne.n	80017c6 <HAL_RCC_OscConfig+0x1e>
 80017c4:	e069      	b.n	800189a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017c6:	4bc8      	ldr	r3, [pc, #800]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	2238      	movs	r2, #56	@ 0x38
 80017cc:	4013      	ands	r3, r2
 80017ce:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	2b08      	cmp	r3, #8
 80017d4:	d105      	bne.n	80017e2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d15d      	bne.n	800189a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e1bc      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	2380      	movs	r3, #128	@ 0x80
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_OscConfig+0x56>
 80017ee:	4bbe      	ldr	r3, [pc, #760]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	4bbd      	ldr	r3, [pc, #756]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80017f4:	2180      	movs	r1, #128	@ 0x80
 80017f6:	0249      	lsls	r1, r1, #9
 80017f8:	430a      	orrs	r2, r1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e020      	b.n	8001840 <HAL_RCC_OscConfig+0x98>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685a      	ldr	r2, [r3, #4]
 8001802:	23a0      	movs	r3, #160	@ 0xa0
 8001804:	02db      	lsls	r3, r3, #11
 8001806:	429a      	cmp	r2, r3
 8001808:	d10e      	bne.n	8001828 <HAL_RCC_OscConfig+0x80>
 800180a:	4bb7      	ldr	r3, [pc, #732]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4bb6      	ldr	r3, [pc, #728]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001810:	2180      	movs	r1, #128	@ 0x80
 8001812:	02c9      	lsls	r1, r1, #11
 8001814:	430a      	orrs	r2, r1
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	4bb3      	ldr	r3, [pc, #716]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	4bb2      	ldr	r3, [pc, #712]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800181e:	2180      	movs	r1, #128	@ 0x80
 8001820:	0249      	lsls	r1, r1, #9
 8001822:	430a      	orrs	r2, r1
 8001824:	601a      	str	r2, [r3, #0]
 8001826:	e00b      	b.n	8001840 <HAL_RCC_OscConfig+0x98>
 8001828:	4baf      	ldr	r3, [pc, #700]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4bae      	ldr	r3, [pc, #696]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800182e:	49af      	ldr	r1, [pc, #700]	@ (8001aec <HAL_RCC_OscConfig+0x344>)
 8001830:	400a      	ands	r2, r1
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	4bac      	ldr	r3, [pc, #688]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	4bab      	ldr	r3, [pc, #684]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800183a:	49ad      	ldr	r1, [pc, #692]	@ (8001af0 <HAL_RCC_OscConfig+0x348>)
 800183c:	400a      	ands	r2, r1
 800183e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d014      	beq.n	8001872 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001848:	f7ff fbf8 	bl	800103c <HAL_GetTick>
 800184c:	0003      	movs	r3, r0
 800184e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001850:	e008      	b.n	8001864 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001852:	f7ff fbf3 	bl	800103c <HAL_GetTick>
 8001856:	0002      	movs	r2, r0
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	1ad3      	subs	r3, r2, r3
 800185c:	2b64      	cmp	r3, #100	@ 0x64
 800185e:	d901      	bls.n	8001864 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001860:	2303      	movs	r3, #3
 8001862:	e17b      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001864:	4ba0      	ldr	r3, [pc, #640]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	2380      	movs	r3, #128	@ 0x80
 800186a:	029b      	lsls	r3, r3, #10
 800186c:	4013      	ands	r3, r2
 800186e:	d0f0      	beq.n	8001852 <HAL_RCC_OscConfig+0xaa>
 8001870:	e013      	b.n	800189a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001872:	f7ff fbe3 	bl	800103c <HAL_GetTick>
 8001876:	0003      	movs	r3, r0
 8001878:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800187c:	f7ff fbde 	bl	800103c <HAL_GetTick>
 8001880:	0002      	movs	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b64      	cmp	r3, #100	@ 0x64
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e166      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800188e:	4b96      	ldr	r3, [pc, #600]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	@ 0x80
 8001894:	029b      	lsls	r3, r3, #10
 8001896:	4013      	ands	r3, r2
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	2202      	movs	r2, #2
 80018a0:	4013      	ands	r3, r2
 80018a2:	d100      	bne.n	80018a6 <HAL_RCC_OscConfig+0xfe>
 80018a4:	e086      	b.n	80019b4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018a6:	4b90      	ldr	r3, [pc, #576]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2238      	movs	r2, #56	@ 0x38
 80018ac:	4013      	ands	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d12f      	bne.n	8001916 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	68db      	ldr	r3, [r3, #12]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e14c      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c2:	4b89      	ldr	r3, [pc, #548]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	4a8b      	ldr	r2, [pc, #556]	@ (8001af4 <HAL_RCC_OscConfig+0x34c>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	0019      	movs	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	695b      	ldr	r3, [r3, #20]
 80018d0:	021a      	lsls	r2, r3, #8
 80018d2:	4b85      	ldr	r3, [pc, #532]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d112      	bne.n	8001904 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018de:	4b82      	ldr	r3, [pc, #520]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a85      	ldr	r2, [pc, #532]	@ (8001af8 <HAL_RCC_OscConfig+0x350>)
 80018e4:	4013      	ands	r3, r2
 80018e6:	0019      	movs	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691a      	ldr	r2, [r3, #16]
 80018ec:	4b7e      	ldr	r3, [pc, #504]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80018ee:	430a      	orrs	r2, r1
 80018f0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018f2:	4b7d      	ldr	r3, [pc, #500]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	0adb      	lsrs	r3, r3, #11
 80018f8:	2207      	movs	r2, #7
 80018fa:	4013      	ands	r3, r2
 80018fc:	4a7f      	ldr	r2, [pc, #508]	@ (8001afc <HAL_RCC_OscConfig+0x354>)
 80018fe:	40da      	lsrs	r2, r3
 8001900:	4b7f      	ldr	r3, [pc, #508]	@ (8001b00 <HAL_RCC_OscConfig+0x358>)
 8001902:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001904:	4b7f      	ldr	r3, [pc, #508]	@ (8001b04 <HAL_RCC_OscConfig+0x35c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff fb3b 	bl	8000f84 <HAL_InitTick>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d050      	beq.n	80019b4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e122      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d030      	beq.n	8001980 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800191e:	4b72      	ldr	r3, [pc, #456]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a75      	ldr	r2, [pc, #468]	@ (8001af8 <HAL_RCC_OscConfig+0x350>)
 8001924:	4013      	ands	r3, r2
 8001926:	0019      	movs	r1, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	691a      	ldr	r2, [r3, #16]
 800192c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800192e:	430a      	orrs	r2, r1
 8001930:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001932:	4b6d      	ldr	r3, [pc, #436]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b6c      	ldr	r3, [pc, #432]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001938:	2180      	movs	r1, #128	@ 0x80
 800193a:	0049      	lsls	r1, r1, #1
 800193c:	430a      	orrs	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fb7c 	bl	800103c <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800194a:	f7ff fb77 	bl	800103c <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e0ff      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800195c:	4b62      	ldr	r3, [pc, #392]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	@ 0x80
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4013      	ands	r3, r2
 8001966:	d0f0      	beq.n	800194a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b5f      	ldr	r3, [pc, #380]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	4a61      	ldr	r2, [pc, #388]	@ (8001af4 <HAL_RCC_OscConfig+0x34c>)
 800196e:	4013      	ands	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	695b      	ldr	r3, [r3, #20]
 8001976:	021a      	lsls	r2, r3, #8
 8001978:	4b5b      	ldr	r3, [pc, #364]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 800197a:	430a      	orrs	r2, r1
 800197c:	605a      	str	r2, [r3, #4]
 800197e:	e019      	b.n	80019b4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001980:	4b59      	ldr	r3, [pc, #356]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	4b58      	ldr	r3, [pc, #352]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001986:	4960      	ldr	r1, [pc, #384]	@ (8001b08 <HAL_RCC_OscConfig+0x360>)
 8001988:	400a      	ands	r2, r1
 800198a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800198c:	f7ff fb56 	bl	800103c <HAL_GetTick>
 8001990:	0003      	movs	r3, r0
 8001992:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001996:	f7ff fb51 	bl	800103c <HAL_GetTick>
 800199a:	0002      	movs	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0d9      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	2380      	movs	r3, #128	@ 0x80
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	4013      	ands	r3, r2
 80019b2:	d1f0      	bne.n	8001996 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2208      	movs	r2, #8
 80019ba:	4013      	ands	r3, r2
 80019bc:	d042      	beq.n	8001a44 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80019be:	4b4a      	ldr	r3, [pc, #296]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	2238      	movs	r2, #56	@ 0x38
 80019c4:	4013      	ands	r3, r2
 80019c6:	2b18      	cmp	r3, #24
 80019c8:	d105      	bne.n	80019d6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d138      	bne.n	8001a44 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e0c2      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d019      	beq.n	8001a12 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019de:	4b42      	ldr	r3, [pc, #264]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80019e0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80019e2:	4b41      	ldr	r3, [pc, #260]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 80019e4:	2101      	movs	r1, #1
 80019e6:	430a      	orrs	r2, r1
 80019e8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ea:	f7ff fb27 	bl	800103c <HAL_GetTick>
 80019ee:	0003      	movs	r3, r0
 80019f0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80019f4:	f7ff fb22 	bl	800103c <HAL_GetTick>
 80019f8:	0002      	movs	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e0aa      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001a06:	4b38      	ldr	r3, [pc, #224]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a0a:	2202      	movs	r2, #2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d0f1      	beq.n	80019f4 <HAL_RCC_OscConfig+0x24c>
 8001a10:	e018      	b.n	8001a44 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a12:	4b35      	ldr	r3, [pc, #212]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a14:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a16:	4b34      	ldr	r3, [pc, #208]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a18:	2101      	movs	r1, #1
 8001a1a:	438a      	bics	r2, r1
 8001a1c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff fb0d 	bl	800103c <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a28:	f7ff fb08 	bl	800103c <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e090      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a3a:	4b2b      	ldr	r3, [pc, #172]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3e:	2202      	movs	r2, #2
 8001a40:	4013      	ands	r3, r2
 8001a42:	d1f1      	bne.n	8001a28 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2204      	movs	r2, #4
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d100      	bne.n	8001a50 <HAL_RCC_OscConfig+0x2a8>
 8001a4e:	e084      	b.n	8001b5a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a50:	230f      	movs	r3, #15
 8001a52:	18fb      	adds	r3, r7, r3
 8001a54:	2200      	movs	r2, #0
 8001a56:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a58:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	2238      	movs	r2, #56	@ 0x38
 8001a5e:	4013      	ands	r3, r2
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d106      	bne.n	8001a72 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d000      	beq.n	8001a6e <HAL_RCC_OscConfig+0x2c6>
 8001a6c:	e075      	b.n	8001b5a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e074      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	689b      	ldr	r3, [r3, #8]
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d106      	bne.n	8001a88 <HAL_RCC_OscConfig+0x2e0>
 8001a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a80:	2101      	movs	r1, #1
 8001a82:	430a      	orrs	r2, r1
 8001a84:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a86:	e01c      	b.n	8001ac2 <HAL_RCC_OscConfig+0x31a>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b05      	cmp	r3, #5
 8001a8e:	d10c      	bne.n	8001aaa <HAL_RCC_OscConfig+0x302>
 8001a90:	4b15      	ldr	r3, [pc, #84]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a92:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a94:	4b14      	ldr	r3, [pc, #80]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a96:	2104      	movs	r1, #4
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a9c:	4b12      	ldr	r3, [pc, #72]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001a9e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aa0:	4b11      	ldr	r3, [pc, #68]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	430a      	orrs	r2, r1
 8001aa6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aa8:	e00b      	b.n	8001ac2 <HAL_RCC_OscConfig+0x31a>
 8001aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001aac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001ab0:	2101      	movs	r1, #1
 8001ab2:	438a      	bics	r2, r1
 8001ab4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001ab8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001aba:	4b0b      	ldr	r3, [pc, #44]	@ (8001ae8 <HAL_RCC_OscConfig+0x340>)
 8001abc:	2104      	movs	r1, #4
 8001abe:	438a      	bics	r2, r1
 8001ac0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d028      	beq.n	8001b1c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aca:	f7ff fab7 	bl	800103c <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ad2:	e01d      	b.n	8001b10 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fab2 	bl	800103c <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	4a0b      	ldr	r2, [pc, #44]	@ (8001b0c <HAL_RCC_OscConfig+0x364>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d915      	bls.n	8001b10 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e039      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	fffeffff 	.word	0xfffeffff
 8001af0:	fffbffff 	.word	0xfffbffff
 8001af4:	ffff80ff 	.word	0xffff80ff
 8001af8:	ffffc7ff 	.word	0xffffc7ff
 8001afc:	02dc6c00 	.word	0x02dc6c00
 8001b00:	20000000 	.word	0x20000000
 8001b04:	20000004 	.word	0x20000004
 8001b08:	fffffeff 	.word	0xfffffeff
 8001b0c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <HAL_RCC_OscConfig+0x3bc>)
 8001b12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b14:	2202      	movs	r2, #2
 8001b16:	4013      	ands	r3, r2
 8001b18:	d0dc      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x32c>
 8001b1a:	e013      	b.n	8001b44 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b1c:	f7ff fa8e 	bl	800103c <HAL_GetTick>
 8001b20:	0003      	movs	r3, r0
 8001b22:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001b24:	e009      	b.n	8001b3a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff fa89 	bl	800103c <HAL_GetTick>
 8001b2a:	0002      	movs	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	4a0d      	ldr	r2, [pc, #52]	@ (8001b68 <HAL_RCC_OscConfig+0x3c0>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e010      	b.n	8001b5c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b64 <HAL_RCC_OscConfig+0x3bc>)
 8001b3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b3e:	2202      	movs	r2, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d1f0      	bne.n	8001b26 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b44:	230f      	movs	r3, #15
 8001b46:	18fb      	adds	r3, r7, r3
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d105      	bne.n	8001b5a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_OscConfig+0x3bc>)
 8001b50:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b52:	4b04      	ldr	r3, [pc, #16]	@ (8001b64 <HAL_RCC_OscConfig+0x3bc>)
 8001b54:	4905      	ldr	r1, [pc, #20]	@ (8001b6c <HAL_RCC_OscConfig+0x3c4>)
 8001b56:	400a      	ands	r2, r1
 8001b58:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	b006      	add	sp, #24
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	00001388 	.word	0x00001388
 8001b6c:	efffffff 	.word	0xefffffff

08001b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0e9      	b.n	8001d58 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b76      	ldr	r3, [pc, #472]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2207      	movs	r2, #7
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d91e      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b73      	ldr	r3, [pc, #460]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2207      	movs	r2, #7
 8001b98:	4393      	bics	r3, r2
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	4b70      	ldr	r3, [pc, #448]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9e:	683a      	ldr	r2, [r7, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ba4:	f7ff fa4a 	bl	800103c <HAL_GetTick>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bac:	e009      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001bae:	f7ff fa45 	bl	800103c <HAL_GetTick>
 8001bb2:	0002      	movs	r2, r0
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	4a6a      	ldr	r2, [pc, #424]	@ (8001d64 <HAL_RCC_ClockConfig+0x1f4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e0ca      	b.n	8001d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bc2:	4b67      	ldr	r3, [pc, #412]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2207      	movs	r2, #7
 8001bc8:	4013      	ands	r3, r2
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d017      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2204      	movs	r2, #4
 8001be0:	4013      	ands	r3, r2
 8001be2:	d008      	beq.n	8001bf6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001be4:	4b60      	ldr	r3, [pc, #384]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a60      	ldr	r2, [pc, #384]	@ (8001d6c <HAL_RCC_ClockConfig+0x1fc>)
 8001bea:	401a      	ands	r2, r3
 8001bec:	4b5e      	ldr	r3, [pc, #376]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001bee:	21b0      	movs	r1, #176	@ 0xb0
 8001bf0:	0109      	lsls	r1, r1, #4
 8001bf2:	430a      	orrs	r2, r1
 8001bf4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	4a5d      	ldr	r2, [pc, #372]	@ (8001d70 <HAL_RCC_ClockConfig+0x200>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	0019      	movs	r1, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68da      	ldr	r2, [r3, #12]
 8001c04:	4b58      	ldr	r3, [pc, #352]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c06:	430a      	orrs	r2, r1
 8001c08:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	4013      	ands	r3, r2
 8001c12:	d055      	beq.n	8001cc0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001c14:	4b54      	ldr	r3, [pc, #336]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	221c      	movs	r2, #28
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	4b51      	ldr	r3, [pc, #324]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d107      	bne.n	8001c40 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c30:	4b4d      	ldr	r3, [pc, #308]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	029b      	lsls	r3, r3, #10
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d11f      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e08b      	b.n	8001d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d107      	bne.n	8001c58 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c48:	4b47      	ldr	r3, [pc, #284]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	@ 0x80
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4013      	ands	r3, r2
 8001c52:	d113      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e07f      	b.n	8001d58 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b03      	cmp	r3, #3
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c60:	4b41      	ldr	r3, [pc, #260]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c64:	2202      	movs	r2, #2
 8001c66:	4013      	ands	r3, r2
 8001c68:	d108      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e074      	b.n	8001d58 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d101      	bne.n	8001c7c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e06d      	b.n	8001d58 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2207      	movs	r2, #7
 8001c82:	4393      	bics	r3, r2
 8001c84:	0019      	movs	r1, r3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685a      	ldr	r2, [r3, #4]
 8001c8a:	4b37      	ldr	r3, [pc, #220]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c90:	f7ff f9d4 	bl	800103c <HAL_GetTick>
 8001c94:	0003      	movs	r3, r0
 8001c96:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c98:	e009      	b.n	8001cae <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001c9a:	f7ff f9cf 	bl	800103c <HAL_GetTick>
 8001c9e:	0002      	movs	r2, r0
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	4a2f      	ldr	r2, [pc, #188]	@ (8001d64 <HAL_RCC_ClockConfig+0x1f4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e054      	b.n	8001d58 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	4b2e      	ldr	r3, [pc, #184]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2238      	movs	r2, #56	@ 0x38
 8001cb4:	401a      	ands	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d1ec      	bne.n	8001c9a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b27      	ldr	r3, [pc, #156]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	2207      	movs	r2, #7
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d21e      	bcs.n	8001d0c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cce:	4b24      	ldr	r3, [pc, #144]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2207      	movs	r2, #7
 8001cd4:	4393      	bics	r3, r2
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	4b21      	ldr	r3, [pc, #132]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ce0:	f7ff f9ac 	bl	800103c <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ce8:	e009      	b.n	8001cfe <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001cea:	f7ff f9a7 	bl	800103c <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8001d64 <HAL_RCC_ClockConfig+0x1f4>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e02c      	b.n	8001d58 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001cfe:	4b18      	ldr	r3, [pc, #96]	@ (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2207      	movs	r2, #7
 8001d04:	4013      	ands	r3, r2
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d1ee      	bne.n	8001cea <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2204      	movs	r2, #4
 8001d12:	4013      	ands	r3, r2
 8001d14:	d009      	beq.n	8001d2a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d16:	4b14      	ldr	r3, [pc, #80]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	4a16      	ldr	r2, [pc, #88]	@ (8001d74 <HAL_RCC_ClockConfig+0x204>)
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	0019      	movs	r1, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	691a      	ldr	r2, [r3, #16]
 8001d24:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001d26:	430a      	orrs	r2, r1
 8001d28:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d2a:	f000 f82b 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001d2e:	0001      	movs	r1, r0
 8001d30:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001d32:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d34:	0a1b      	lsrs	r3, r3, #8
 8001d36:	220f      	movs	r2, #15
 8001d38:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d78 <HAL_RCC_ClockConfig+0x208>)
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d40:	221f      	movs	r2, #31
 8001d42:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d44:	000a      	movs	r2, r1
 8001d46:	40da      	lsrs	r2, r3
 8001d48:	4b0c      	ldr	r3, [pc, #48]	@ (8001d7c <HAL_RCC_ClockConfig+0x20c>)
 8001d4a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d80 <HAL_RCC_ClockConfig+0x210>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	0018      	movs	r0, r3
 8001d52:	f7ff f917 	bl	8000f84 <HAL_InitTick>
 8001d56:	0003      	movs	r3, r0
}
 8001d58:	0018      	movs	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	b004      	add	sp, #16
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40022000 	.word	0x40022000
 8001d64:	00001388 	.word	0x00001388
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	ffff84ff 	.word	0xffff84ff
 8001d70:	fffff0ff 	.word	0xfffff0ff
 8001d74:	ffff8fff 	.word	0xffff8fff
 8001d78:	08005e34 	.word	0x08005e34
 8001d7c:	20000000 	.word	0x20000000
 8001d80:	20000004 	.word	0x20000004

08001d84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001d8a:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	089b      	lsrs	r3, r3, #2
 8001d90:	2207      	movs	r2, #7
 8001d92:	4013      	ands	r3, r2
 8001d94:	3301      	adds	r3, #1
 8001d96:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001d98:	4b1f      	ldr	r3, [pc, #124]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2238      	movs	r2, #56	@ 0x38
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d10f      	bne.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001da2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	0adb      	lsrs	r3, r3, #11
 8001da8:	2207      	movs	r2, #7
 8001daa:	4013      	ands	r3, r2
 8001dac:	2201      	movs	r2, #1
 8001dae:	409a      	lsls	r2, r3
 8001db0:	0013      	movs	r3, r2
 8001db2:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4819      	ldr	r0, [pc, #100]	@ (8001e1c <HAL_RCC_GetSysClockFreq+0x98>)
 8001db8:	f7fe f9b8 	bl	800012c <__udivsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	e01e      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001dc2:	4b15      	ldr	r3, [pc, #84]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	2238      	movs	r2, #56	@ 0x38
 8001dc8:	4013      	ands	r3, r2
 8001dca:	2b08      	cmp	r3, #8
 8001dcc:	d102      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dce:	4b14      	ldr	r3, [pc, #80]	@ (8001e20 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dd0:	60fb      	str	r3, [r7, #12]
 8001dd2:	e015      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001dd4:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2238      	movs	r2, #56	@ 0x38
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b20      	cmp	r3, #32
 8001dde:	d103      	bne.n	8001de8 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	021b      	lsls	r3, r3, #8
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	e00b      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001de8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	2238      	movs	r2, #56	@ 0x38
 8001dee:	4013      	ands	r3, r2
 8001df0:	2b18      	cmp	r3, #24
 8001df2:	d103      	bne.n	8001dfc <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001df4:	23fa      	movs	r3, #250	@ 0xfa
 8001df6:	01db      	lsls	r3, r3, #7
 8001df8:	60fb      	str	r3, [r7, #12]
 8001dfa:	e001      	b.n	8001e00 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001e00:	68b9      	ldr	r1, [r7, #8]
 8001e02:	68f8      	ldr	r0, [r7, #12]
 8001e04:	f7fe f992 	bl	800012c <__udivsi3>
 8001e08:	0003      	movs	r3, r0
 8001e0a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
}
 8001e0e:	0018      	movs	r0, r3
 8001e10:	46bd      	mov	sp, r7
 8001e12:	b004      	add	sp, #16
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	46c0      	nop			@ (mov r8, r8)
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	02dc6c00 	.word	0x02dc6c00
 8001e20:	007a1200 	.word	0x007a1200

08001e24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e28:	f7ff ffac 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8001e2c:	0001      	movs	r1, r0
 8001e2e:	4b09      	ldr	r3, [pc, #36]	@ (8001e54 <HAL_RCC_GetHCLKFreq+0x30>)
 8001e30:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e32:	0a1b      	lsrs	r3, r3, #8
 8001e34:	220f      	movs	r2, #15
 8001e36:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e38:	4b07      	ldr	r3, [pc, #28]	@ (8001e58 <HAL_RCC_GetHCLKFreq+0x34>)
 8001e3a:	0092      	lsls	r2, r2, #2
 8001e3c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e3e:	221f      	movs	r2, #31
 8001e40:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e42:	000a      	movs	r2, r1
 8001e44:	40da      	lsrs	r2, r3
 8001e46:	4b05      	ldr	r3, [pc, #20]	@ (8001e5c <HAL_RCC_GetHCLKFreq+0x38>)
 8001e48:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001e4a:	4b04      	ldr	r3, [pc, #16]	@ (8001e5c <HAL_RCC_GetHCLKFreq+0x38>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
}
 8001e4e:	0018      	movs	r0, r3
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40021000 	.word	0x40021000
 8001e58:	08005e34 	.word	0x08005e34
 8001e5c:	20000000 	.word	0x20000000

08001e60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001e64:	f7ff ffde 	bl	8001e24 <HAL_RCC_GetHCLKFreq>
 8001e68:	0001      	movs	r1, r0
 8001e6a:	4b07      	ldr	r3, [pc, #28]	@ (8001e88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	0b1b      	lsrs	r3, r3, #12
 8001e70:	2207      	movs	r2, #7
 8001e72:	401a      	ands	r2, r3
 8001e74:	4b05      	ldr	r3, [pc, #20]	@ (8001e8c <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001e76:	0092      	lsls	r2, r2, #2
 8001e78:	58d3      	ldr	r3, [r2, r3]
 8001e7a:	221f      	movs	r2, #31
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	40d9      	lsrs	r1, r3
 8001e80:	000b      	movs	r3, r1
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	08005e74 	.word	0x08005e74

08001e90 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001e98:	2313      	movs	r3, #19
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ea0:	2312      	movs	r3, #18
 8001ea2:	18fb      	adds	r3, r7, r3
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2240      	movs	r2, #64	@ 0x40
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d100      	bne.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001eb2:	e079      	b.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb4:	2011      	movs	r0, #17
 8001eb6:	183b      	adds	r3, r7, r0
 8001eb8:	2200      	movs	r2, #0
 8001eba:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ebc:	4b63      	ldr	r3, [pc, #396]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ec0:	2380      	movs	r3, #128	@ 0x80
 8001ec2:	055b      	lsls	r3, r3, #21
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d110      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b60      	ldr	r3, [pc, #384]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001eca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ecc:	4b5f      	ldr	r3, [pc, #380]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ece:	2180      	movs	r1, #128	@ 0x80
 8001ed0:	0549      	lsls	r1, r1, #21
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ed6:	4b5d      	ldr	r3, [pc, #372]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ed8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eda:	2380      	movs	r3, #128	@ 0x80
 8001edc:	055b      	lsls	r3, r3, #21
 8001ede:	4013      	ands	r3, r2
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee4:	183b      	adds	r3, r7, r0
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001eea:	4b58      	ldr	r3, [pc, #352]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001eec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001eee:	23c0      	movs	r3, #192	@ 0xc0
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d019      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	697a      	ldr	r2, [r7, #20]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d014      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001f06:	4b51      	ldr	r3, [pc, #324]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f0a:	4a51      	ldr	r2, [pc, #324]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f10:	4b4e      	ldr	r3, [pc, #312]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f14:	4b4d      	ldr	r3, [pc, #308]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f16:	2180      	movs	r1, #128	@ 0x80
 8001f18:	0249      	lsls	r1, r1, #9
 8001f1a:	430a      	orrs	r2, r1
 8001f1c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f1e:	4b4b      	ldr	r3, [pc, #300]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f20:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f22:	4b4a      	ldr	r3, [pc, #296]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f24:	494b      	ldr	r1, [pc, #300]	@ (8002054 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f26:	400a      	ands	r2, r1
 8001f28:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001f2a:	4b48      	ldr	r3, [pc, #288]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	2201      	movs	r2, #1
 8001f34:	4013      	ands	r3, r2
 8001f36:	d016      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f38:	f7ff f880 	bl	800103c <HAL_GetTick>
 8001f3c:	0003      	movs	r3, r0
 8001f3e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f40:	e00c      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f42:	f7ff f87b 	bl	800103c <HAL_GetTick>
 8001f46:	0002      	movs	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	4a42      	ldr	r2, [pc, #264]	@ (8002058 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d904      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001f52:	2313      	movs	r3, #19
 8001f54:	18fb      	adds	r3, r7, r3
 8001f56:	2203      	movs	r2, #3
 8001f58:	701a      	strb	r2, [r3, #0]
          break;
 8001f5a:	e004      	b.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f60:	2202      	movs	r2, #2
 8001f62:	4013      	ands	r3, r2
 8001f64:	d0ed      	beq.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001f66:	2313      	movs	r3, #19
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d10a      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f70:	4b36      	ldr	r3, [pc, #216]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f74:	4a36      	ldr	r2, [pc, #216]	@ (8002050 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f76:	4013      	ands	r3, r2
 8001f78:	0019      	movs	r1, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	699a      	ldr	r2, [r3, #24]
 8001f7e:	4b33      	ldr	r3, [pc, #204]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f80:	430a      	orrs	r2, r1
 8001f82:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f84:	e005      	b.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f86:	2312      	movs	r3, #18
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	2213      	movs	r2, #19
 8001f8c:	18ba      	adds	r2, r7, r2
 8001f8e:	7812      	ldrb	r2, [r2, #0]
 8001f90:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f92:	2311      	movs	r3, #17
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fa2:	492e      	ldr	r1, [pc, #184]	@ (800205c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2201      	movs	r2, #1
 8001fae:	4013      	ands	r3, r2
 8001fb0:	d009      	beq.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fb2:	4b26      	ldr	r3, [pc, #152]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fb6:	2203      	movs	r2, #3
 8001fb8:	4393      	bics	r3, r2
 8001fba:	0019      	movs	r1, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4b22      	ldr	r3, [pc, #136]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d009      	beq.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001fd0:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd4:	4a22      	ldr	r2, [pc, #136]	@ (8002060 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68da      	ldr	r2, [r3, #12]
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2220      	movs	r2, #32
 8001fea:	4013      	ands	r3, r2
 8001fec:	d008      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001fee:	4b17      	ldr	r3, [pc, #92]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ff0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	0899      	lsrs	r1, r3, #2
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	695a      	ldr	r2, [r3, #20]
 8001ffa:	4b14      	ldr	r3, [pc, #80]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	2204      	movs	r2, #4
 8002006:	4013      	ands	r3, r2
 8002008:	d009      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800200c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800200e:	4a15      	ldr	r2, [pc, #84]	@ (8002064 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002010:	4013      	ands	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800201a:	430a      	orrs	r2, r1
 800201c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2280      	movs	r2, #128	@ 0x80
 8002024:	4013      	ands	r3, r2
 8002026:	d009      	beq.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002028:	4b08      	ldr	r3, [pc, #32]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	22e0      	movs	r2, #224	@ 0xe0
 800202e:	4393      	bics	r3, r2
 8002030:	0019      	movs	r1, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002038:	430a      	orrs	r2, r1
 800203a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800203c:	2312      	movs	r3, #18
 800203e:	18fb      	adds	r3, r7, r3
 8002040:	781b      	ldrb	r3, [r3, #0]
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b006      	add	sp, #24
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			@ (mov r8, r8)
 800204c:	40021000 	.word	0x40021000
 8002050:	fffffcff 	.word	0xfffffcff
 8002054:	fffeffff 	.word	0xfffeffff
 8002058:	00001388 	.word	0x00001388
 800205c:	efffffff 	.word	0xefffffff
 8002060:	ffffcfff 	.word	0xffffcfff
 8002064:	ffff3fff 	.word	0xffff3fff

08002068 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002070:	230f      	movs	r3, #15
 8002072:	18fb      	adds	r3, r7, r3
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <HAL_RTC_Init+0x18>
 800207e:	e075      	b.n	800216c <HAL_RTC_Init+0x104>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2225      	movs	r2, #37	@ 0x25
 8002084:	5c9b      	ldrb	r3, [r3, r2]
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d107      	bne.n	800209c <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2224      	movs	r2, #36	@ 0x24
 8002090:	2100      	movs	r1, #0
 8002092:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	0018      	movs	r0, r3
 8002098:	f7fe fdbc 	bl	8000c14 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2225      	movs	r2, #37	@ 0x25
 80020a0:	2102      	movs	r1, #2
 80020a2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	2210      	movs	r2, #16
 80020ac:	4013      	ands	r3, r2
 80020ae:	2b10      	cmp	r3, #16
 80020b0:	d04f      	beq.n	8002152 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	22ca      	movs	r2, #202	@ 0xca
 80020b8:	625a      	str	r2, [r3, #36]	@ 0x24
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	2253      	movs	r2, #83	@ 0x53
 80020c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80020c2:	250f      	movs	r5, #15
 80020c4:	197c      	adds	r4, r7, r5
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f000 fbef 	bl	80028ac <RTC_EnterInitMode>
 80020ce:	0003      	movs	r3, r0
 80020d0:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80020d2:	0028      	movs	r0, r5
 80020d4:	183b      	adds	r3, r7, r0
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d121      	bne.n	8002120 <HAL_RTC_Init+0xb8>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL));
 80020dc:	4b27      	ldr	r3, [pc, #156]	@ (800217c <HAL_RTC_Init+0x114>)
 80020de:	699a      	ldr	r2, [r3, #24]
 80020e0:	4b26      	ldr	r3, [pc, #152]	@ (800217c <HAL_RTC_Init+0x114>)
 80020e2:	4927      	ldr	r1, [pc, #156]	@ (8002180 <HAL_RTC_Init+0x118>)
 80020e4:	400a      	ands	r2, r1
 80020e6:	619a      	str	r2, [r3, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 80020e8:	4b24      	ldr	r3, [pc, #144]	@ (800217c <HAL_RTC_Init+0x114>)
 80020ea:	6999      	ldr	r1, [r3, #24]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	431a      	orrs	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	431a      	orrs	r2, r3
 80020fc:	4b1f      	ldr	r3, [pc, #124]	@ (800217c <HAL_RTC_Init+0x114>)
 80020fe:	430a      	orrs	r2, r1
 8002100:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68d9      	ldr	r1, [r3, #12]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	041a      	lsls	r2, r3, #16
 800210c:	4b1b      	ldr	r3, [pc, #108]	@ (800217c <HAL_RTC_Init+0x114>)
 800210e:	430a      	orrs	r2, r1
 8002110:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002112:	183c      	adds	r4, r7, r0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	0018      	movs	r0, r3
 8002118:	f000 fc10 	bl	800293c <RTC_ExitInitMode>
 800211c:	0003      	movs	r3, r0
 800211e:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002120:	230f      	movs	r3, #15
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10e      	bne.n	8002148 <HAL_RTC_Init+0xe0>
      {
        MODIFY_REG(RTC->CR, \
 800212a:	4b14      	ldr	r3, [pc, #80]	@ (800217c <HAL_RTC_Init+0x114>)
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	08d9      	lsrs	r1, r3, #3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1a      	ldr	r2, [r3, #32]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	695b      	ldr	r3, [r3, #20]
 8002140:	431a      	orrs	r2, r3
 8002142:	4b0e      	ldr	r3, [pc, #56]	@ (800217c <HAL_RTC_Init+0x114>)
 8002144:	430a      	orrs	r2, r1
 8002146:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	22ff      	movs	r2, #255	@ 0xff
 800214e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002150:	e003      	b.n	800215a <HAL_RTC_Init+0xf2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002152:	230f      	movs	r3, #15
 8002154:	18fb      	adds	r3, r7, r3
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800215a:	230f      	movs	r3, #15
 800215c:	18fb      	adds	r3, r7, r3
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d103      	bne.n	800216c <HAL_RTC_Init+0x104>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2225      	movs	r2, #37	@ 0x25
 8002168:	2101      	movs	r1, #1
 800216a:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800216c:	230f      	movs	r3, #15
 800216e:	18fb      	adds	r3, r7, r3
 8002170:	781b      	ldrb	r3, [r3, #0]
}
 8002172:	0018      	movs	r0, r3
 8002174:	46bd      	mov	sp, r7
 8002176:	b004      	add	sp, #16
 8002178:	bdb0      	pop	{r4, r5, r7, pc}
 800217a:	46c0      	nop			@ (mov r8, r8)
 800217c:	40002800 	.word	0x40002800
 8002180:	ff8fffbf 	.word	0xff8fffbf

08002184 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002184:	b5b0      	push	{r4, r5, r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2224      	movs	r2, #36	@ 0x24
 8002194:	5c9b      	ldrb	r3, [r3, r2]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d101      	bne.n	800219e <HAL_RTC_SetTime+0x1a>
 800219a:	2302      	movs	r3, #2
 800219c:	e092      	b.n	80022c4 <HAL_RTC_SetTime+0x140>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2224      	movs	r2, #36	@ 0x24
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2225      	movs	r2, #37	@ 0x25
 80021aa:	2102      	movs	r1, #2
 80021ac:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	22ca      	movs	r2, #202	@ 0xca
 80021b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2253      	movs	r2, #83	@ 0x53
 80021bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021be:	2513      	movs	r5, #19
 80021c0:	197c      	adds	r4, r7, r5
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	0018      	movs	r0, r3
 80021c6:	f000 fb71 	bl	80028ac <RTC_EnterInitMode>
 80021ca:	0003      	movs	r3, r0
 80021cc:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80021ce:	197b      	adds	r3, r7, r5
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d162      	bne.n	800229c <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d125      	bne.n	8002228 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2240      	movs	r2, #64	@ 0x40
 80021e4:	4013      	ands	r3, r2
 80021e6:	d102      	bne.n	80021ee <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2200      	movs	r2, #0
 80021ec:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	0018      	movs	r0, r3
 80021f4:	f000 fbe6 	bl	80029c4 <RTC_ByteToBcd2>
 80021f8:	0003      	movs	r3, r0
 80021fa:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	785b      	ldrb	r3, [r3, #1]
 8002200:	0018      	movs	r0, r3
 8002202:	f000 fbdf 	bl	80029c4 <RTC_ByteToBcd2>
 8002206:	0003      	movs	r3, r0
 8002208:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800220a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	789b      	ldrb	r3, [r3, #2]
 8002210:	0018      	movs	r0, r3
 8002212:	f000 fbd7 	bl	80029c4 <RTC_ByteToBcd2>
 8002216:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002218:	0022      	movs	r2, r4
 800221a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	78db      	ldrb	r3, [r3, #3]
 8002220:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002222:	4313      	orrs	r3, r2
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	e017      	b.n	8002258 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2240      	movs	r2, #64	@ 0x40
 8002230:	4013      	ands	r3, r2
 8002232:	d102      	bne.n	800223a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	2200      	movs	r2, #0
 8002238:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	785b      	ldrb	r3, [r3, #1]
 8002244:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002246:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800224c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	78db      	ldrb	r3, [r3, #3]
 8002252:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002254:	4313      	orrs	r3, r2
 8002256:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	491b      	ldr	r1, [pc, #108]	@ (80022cc <HAL_RTC_SetTime+0x148>)
 8002260:	400a      	ands	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699a      	ldr	r2, [r3, #24]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4918      	ldr	r1, [pc, #96]	@ (80022d0 <HAL_RTC_SetTime+0x14c>)
 8002270:	400a      	ands	r2, r1
 8002272:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6999      	ldr	r1, [r3, #24]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	431a      	orrs	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800228c:	2313      	movs	r3, #19
 800228e:	18fc      	adds	r4, r7, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	0018      	movs	r0, r3
 8002294:	f000 fb52 	bl	800293c <RTC_ExitInitMode>
 8002298:	0003      	movs	r3, r0
 800229a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	22ff      	movs	r2, #255	@ 0xff
 80022a2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80022a4:	2313      	movs	r3, #19
 80022a6:	18fb      	adds	r3, r7, r3
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d103      	bne.n	80022b6 <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2225      	movs	r2, #37	@ 0x25
 80022b2:	2101      	movs	r1, #1
 80022b4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2224      	movs	r2, #36	@ 0x24
 80022ba:	2100      	movs	r1, #0
 80022bc:	5499      	strb	r1, [r3, r2]

  return status;
 80022be:	2313      	movs	r3, #19
 80022c0:	18fb      	adds	r3, r7, r3
 80022c2:	781b      	ldrb	r3, [r3, #0]
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b006      	add	sp, #24
 80022ca:	bdb0      	pop	{r4, r5, r7, pc}
 80022cc:	007f7f7f 	.word	0x007f7f7f
 80022d0:	fffbffff 	.word	0xfffbffff

080022d4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	045b      	lsls	r3, r3, #17
 80022f2:	0c5a      	lsrs	r2, r3, #17
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a22      	ldr	r2, [pc, #136]	@ (8002388 <HAL_RTC_GetTime+0xb4>)
 8002300:	4013      	ands	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	0c1b      	lsrs	r3, r3, #16
 8002308:	b2db      	uxtb	r3, r3
 800230a:	223f      	movs	r2, #63	@ 0x3f
 800230c:	4013      	ands	r3, r2
 800230e:	b2da      	uxtb	r2, r3
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	b2db      	uxtb	r3, r3
 800231a:	227f      	movs	r2, #127	@ 0x7f
 800231c:	4013      	ands	r3, r2
 800231e:	b2da      	uxtb	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	227f      	movs	r2, #127	@ 0x7f
 800232a:	4013      	ands	r3, r2
 800232c:	b2da      	uxtb	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	0d9b      	lsrs	r3, r3, #22
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2201      	movs	r2, #1
 800233a:	4013      	ands	r3, r2
 800233c:	b2da      	uxtb	r2, r3
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d11a      	bne.n	800237e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	0018      	movs	r0, r3
 800234e:	f000 fb61 	bl	8002a14 <RTC_Bcd2ToByte>
 8002352:	0003      	movs	r3, r0
 8002354:	001a      	movs	r2, r3
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	785b      	ldrb	r3, [r3, #1]
 800235e:	0018      	movs	r0, r3
 8002360:	f000 fb58 	bl	8002a14 <RTC_Bcd2ToByte>
 8002364:	0003      	movs	r3, r0
 8002366:	001a      	movs	r2, r3
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	789b      	ldrb	r3, [r3, #2]
 8002370:	0018      	movs	r0, r3
 8002372:	f000 fb4f 	bl	8002a14 <RTC_Bcd2ToByte>
 8002376:	0003      	movs	r3, r0
 8002378:	001a      	movs	r2, r3
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b006      	add	sp, #24
 8002386:	bd80      	pop	{r7, pc}
 8002388:	007f7f7f 	.word	0x007f7f7f

0800238c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800238c:	b5b0      	push	{r4, r5, r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	2224      	movs	r2, #36	@ 0x24
 800239c:	5c9b      	ldrb	r3, [r3, r2]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_RTC_SetDate+0x1a>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e07e      	b.n	80024a4 <HAL_RTC_SetDate+0x118>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2224      	movs	r2, #36	@ 0x24
 80023aa:	2101      	movs	r1, #1
 80023ac:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	2225      	movs	r2, #37	@ 0x25
 80023b2:	2102      	movs	r1, #2
 80023b4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10e      	bne.n	80023da <HAL_RTC_SetDate+0x4e>
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	785b      	ldrb	r3, [r3, #1]
 80023c0:	001a      	movs	r2, r3
 80023c2:	2310      	movs	r3, #16
 80023c4:	4013      	ands	r3, r2
 80023c6:	d008      	beq.n	80023da <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	785b      	ldrb	r3, [r3, #1]
 80023cc:	2210      	movs	r2, #16
 80023ce:	4393      	bics	r3, r2
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	330a      	adds	r3, #10
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d11c      	bne.n	800241a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	78db      	ldrb	r3, [r3, #3]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 faed 	bl	80029c4 <RTC_ByteToBcd2>
 80023ea:	0003      	movs	r3, r0
 80023ec:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	785b      	ldrb	r3, [r3, #1]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fae6 	bl	80029c4 <RTC_ByteToBcd2>
 80023f8:	0003      	movs	r3, r0
 80023fa:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80023fc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	789b      	ldrb	r3, [r3, #2]
 8002402:	0018      	movs	r0, r3
 8002404:	f000 fade 	bl	80029c4 <RTC_ByteToBcd2>
 8002408:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800240a:	0022      	movs	r2, r4
 800240c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	e00e      	b.n	8002438 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	78db      	ldrb	r3, [r3, #3]
 800241e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	785b      	ldrb	r3, [r3, #1]
 8002424:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002426:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800242c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	22ca      	movs	r2, #202	@ 0xca
 800243e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	2253      	movs	r2, #83	@ 0x53
 8002446:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002448:	2513      	movs	r5, #19
 800244a:	197c      	adds	r4, r7, r5
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	0018      	movs	r0, r3
 8002450:	f000 fa2c 	bl	80028ac <RTC_EnterInitMode>
 8002454:	0003      	movs	r3, r0
 8002456:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002458:	0028      	movs	r0, r5
 800245a:	183b      	adds	r3, r7, r0
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d10c      	bne.n	800247c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	4910      	ldr	r1, [pc, #64]	@ (80024ac <HAL_RTC_SetDate+0x120>)
 800246a:	400a      	ands	r2, r1
 800246c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800246e:	183c      	adds	r4, r7, r0
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	0018      	movs	r0, r3
 8002474:	f000 fa62 	bl	800293c <RTC_ExitInitMode>
 8002478:	0003      	movs	r3, r0
 800247a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	22ff      	movs	r2, #255	@ 0xff
 8002482:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002484:	2313      	movs	r3, #19
 8002486:	18fb      	adds	r3, r7, r3
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d103      	bne.n	8002496 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	2225      	movs	r2, #37	@ 0x25
 8002492:	2101      	movs	r1, #1
 8002494:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2224      	movs	r2, #36	@ 0x24
 800249a:	2100      	movs	r1, #0
 800249c:	5499      	strb	r1, [r3, r2]

  return status;
 800249e:	2313      	movs	r3, #19
 80024a0:	18fb      	adds	r3, r7, r3
 80024a2:	781b      	ldrb	r3, [r3, #0]
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b006      	add	sp, #24
 80024aa:	bdb0      	pop	{r4, r5, r7, pc}
 80024ac:	00ffff3f 	.word	0x00ffff3f

080024b0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	4a21      	ldr	r2, [pc, #132]	@ (8002548 <HAL_RTC_GetDate+0x98>)
 80024c4:	4013      	ands	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	0c1b      	lsrs	r3, r3, #16
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	221f      	movs	r2, #31
 80024da:	4013      	ands	r3, r2
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	223f      	movs	r2, #63	@ 0x3f
 80024e8:	4013      	ands	r3, r2
 80024ea:	b2da      	uxtb	r2, r3
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	0b5b      	lsrs	r3, r3, #13
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2207      	movs	r2, #7
 80024f8:	4013      	ands	r3, r2
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d11a      	bne.n	800253c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	78db      	ldrb	r3, [r3, #3]
 800250a:	0018      	movs	r0, r3
 800250c:	f000 fa82 	bl	8002a14 <RTC_Bcd2ToByte>
 8002510:	0003      	movs	r3, r0
 8002512:	001a      	movs	r2, r3
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	785b      	ldrb	r3, [r3, #1]
 800251c:	0018      	movs	r0, r3
 800251e:	f000 fa79 	bl	8002a14 <RTC_Bcd2ToByte>
 8002522:	0003      	movs	r3, r0
 8002524:	001a      	movs	r2, r3
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	789b      	ldrb	r3, [r3, #2]
 800252e:	0018      	movs	r0, r3
 8002530:	f000 fa70 	bl	8002a14 <RTC_Bcd2ToByte>
 8002534:	0003      	movs	r3, r0
 8002536:	001a      	movs	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800253c:	2300      	movs	r3, #0
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b006      	add	sp, #24
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			@ (mov r8, r8)
 8002548:	00ffff3f 	.word	0x00ffff3f

0800254c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b089      	sub	sp, #36	@ 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2224      	movs	r2, #36	@ 0x24
 800255c:	5c9b      	ldrb	r3, [r3, r2]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_RTC_SetAlarm_IT+0x1a>
 8002562:	2302      	movs	r3, #2
 8002564:	e0d6      	b.n	8002714 <HAL_RTC_SetAlarm_IT+0x1c8>
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2224      	movs	r2, #36	@ 0x24
 800256a:	2101      	movs	r1, #1
 800256c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2225      	movs	r2, #37	@ 0x25
 8002572:	2102      	movs	r1, #2
 8002574:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d136      	bne.n	80025ea <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2240      	movs	r2, #64	@ 0x40
 8002584:	4013      	ands	r3, r2
 8002586:	d102      	bne.n	800258e <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	0018      	movs	r0, r3
 8002594:	f000 fa16 	bl	80029c4 <RTC_ByteToBcd2>
 8002598:	0003      	movs	r3, r0
 800259a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	785b      	ldrb	r3, [r3, #1]
 80025a0:	0018      	movs	r0, r3
 80025a2:	f000 fa0f 	bl	80029c4 <RTC_ByteToBcd2>
 80025a6:	0003      	movs	r3, r0
 80025a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025aa:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	789b      	ldrb	r3, [r3, #2]
 80025b0:	0018      	movs	r0, r3
 80025b2:	f000 fa07 	bl	80029c4 <RTC_ByteToBcd2>
 80025b6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025b8:	0022      	movs	r2, r4
 80025ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	78db      	ldrb	r3, [r3, #3]
 80025c0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80025c2:	431a      	orrs	r2, r3
 80025c4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	2220      	movs	r2, #32
 80025ca:	5c9b      	ldrb	r3, [r3, r2]
 80025cc:	0018      	movs	r0, r3
 80025ce:	f000 f9f9 	bl	80029c4 <RTC_ByteToBcd2>
 80025d2:	0003      	movs	r3, r0
 80025d4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80025d6:	0022      	movs	r2, r4
 80025d8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80025de:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61fb      	str	r3, [r7, #28]
 80025e8:	e022      	b.n	8002630 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699b      	ldr	r3, [r3, #24]
 80025f0:	2240      	movs	r2, #64	@ 0x40
 80025f2:	4013      	ands	r3, r2
 80025f4:	d102      	bne.n	80025fc <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2200      	movs	r2, #0
 80025fa:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	785b      	ldrb	r3, [r3, #1]
 8002606:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002608:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800260e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	78db      	ldrb	r3, [r3, #3]
 8002614:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002616:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2120      	movs	r1, #32
 800261c:	5c5b      	ldrb	r3, [r3, r1]
 800261e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002620:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002626:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800262c:	4313      	orrs	r3, r2
 800262e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	685a      	ldr	r2, [r3, #4]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	4313      	orrs	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	22ca      	movs	r2, #202	@ 0xca
 8002642:	625a      	str	r2, [r3, #36]	@ 0x24
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2253      	movs	r2, #83	@ 0x53
 800264a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	429a      	cmp	r2, r3
 8002656:	d147      	bne.n	80026e8 <HAL_RTC_SetAlarm_IT+0x19c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	492e      	ldr	r1, [pc, #184]	@ (800271c <HAL_RTC_SetAlarm_IT+0x1d0>)
 8002664:	400a      	ands	r2, r1
 8002666:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2201      	movs	r2, #1
 800266e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8002670:	f7fe fce4 	bl	800103c <HAL_GetTick>
 8002674:	0003      	movs	r3, r0
 8002676:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002678:	e016      	b.n	80026a8 <HAL_RTC_SetAlarm_IT+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800267a:	f7fe fcdf 	bl	800103c <HAL_GetTick>
 800267e:	0002      	movs	r2, r0
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	1ad2      	subs	r2, r2, r3
 8002684:	23fa      	movs	r3, #250	@ 0xfa
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	429a      	cmp	r2, r3
 800268a:	d90d      	bls.n	80026a8 <HAL_RTC_SetAlarm_IT+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	22ff      	movs	r2, #255	@ 0xff
 8002692:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2225      	movs	r2, #37	@ 0x25
 8002698:	2103      	movs	r1, #3
 800269a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2224      	movs	r2, #36	@ 0x24
 80026a0:	2100      	movs	r1, #0
 80026a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e035      	b.n	8002714 <HAL_RTC_SetAlarm_IT+0x1c8>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d0e2      	beq.n	800267a <HAL_RTC_SetAlarm_IT+0x12e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699a      	ldr	r2, [r3, #24]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2180      	movs	r1, #128	@ 0x80
 80026d0:	0049      	lsls	r1, r1, #1
 80026d2:	430a      	orrs	r2, r1
 80026d4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699a      	ldr	r2, [r3, #24]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2180      	movs	r1, #128	@ 0x80
 80026e2:	0149      	lsls	r1, r1, #5
 80026e4:	430a      	orrs	r2, r1
 80026e6:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80026e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <HAL_RTC_SetAlarm_IT+0x1d4>)
 80026ea:	2380      	movs	r3, #128	@ 0x80
 80026ec:	58d3      	ldr	r3, [r2, r3]
 80026ee:	490c      	ldr	r1, [pc, #48]	@ (8002720 <HAL_RTC_SetAlarm_IT+0x1d4>)
 80026f0:	2280      	movs	r2, #128	@ 0x80
 80026f2:	0312      	lsls	r2, r2, #12
 80026f4:	4313      	orrs	r3, r2
 80026f6:	2280      	movs	r2, #128	@ 0x80
 80026f8:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	22ff      	movs	r2, #255	@ 0xff
 8002700:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2225      	movs	r2, #37	@ 0x25
 8002706:	2101      	movs	r1, #1
 8002708:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2224      	movs	r2, #36	@ 0x24
 800270e:	2100      	movs	r1, #0
 8002710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	0018      	movs	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	b009      	add	sp, #36	@ 0x24
 800271a:	bd90      	pop	{r4, r7, pc}
 800271c:	fffffeff 	.word	0xfffffeff
 8002720:	40021800 	.word	0x40021800

08002724 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2224      	movs	r2, #36	@ 0x24
 8002732:	5c9b      	ldrb	r3, [r3, r2]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d101      	bne.n	800273c <HAL_RTC_DeactivateAlarm+0x18>
 8002738:	2302      	movs	r3, #2
 800273a:	e053      	b.n	80027e4 <HAL_RTC_DeactivateAlarm+0xc0>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2224      	movs	r2, #36	@ 0x24
 8002740:	2101      	movs	r1, #1
 8002742:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2225      	movs	r2, #37	@ 0x25
 8002748:	2102      	movs	r1, #2
 800274a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	22ca      	movs	r2, #202	@ 0xca
 8002752:	625a      	str	r2, [r3, #36]	@ 0x24
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2253      	movs	r2, #83	@ 0x53
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	2380      	movs	r3, #128	@ 0x80
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	429a      	cmp	r2, r3
 8002764:	d131      	bne.n	80027ca <HAL_RTC_DeactivateAlarm+0xa6>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699a      	ldr	r2, [r3, #24]
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	491e      	ldr	r1, [pc, #120]	@ (80027ec <HAL_RTC_DeactivateAlarm+0xc8>)
 8002772:	400a      	ands	r2, r1
 8002774:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	699a      	ldr	r2, [r3, #24]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	491b      	ldr	r1, [pc, #108]	@ (80027f0 <HAL_RTC_DeactivateAlarm+0xcc>)
 8002782:	400a      	ands	r2, r1
 8002784:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8002786:	f7fe fc59 	bl	800103c <HAL_GetTick>
 800278a:	0003      	movs	r3, r0
 800278c:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 800278e:	e016      	b.n	80027be <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002790:	f7fe fc54 	bl	800103c <HAL_GetTick>
 8002794:	0002      	movs	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad2      	subs	r2, r2, r3
 800279a:	23fa      	movs	r3, #250	@ 0xfa
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	429a      	cmp	r2, r3
 80027a0:	d90d      	bls.n	80027be <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	22ff      	movs	r2, #255	@ 0xff
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2225      	movs	r2, #37	@ 0x25
 80027ae:	2103      	movs	r1, #3
 80027b0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2224      	movs	r2, #36	@ 0x24
 80027b6:	2100      	movs	r1, #0
 80027b8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e012      	b.n	80027e4 <HAL_RTC_DeactivateAlarm+0xc0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	2201      	movs	r2, #1
 80027c6:	4013      	ands	r3, r2
 80027c8:	d0e2      	beq.n	8002790 <HAL_RTC_DeactivateAlarm+0x6c>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	22ff      	movs	r2, #255	@ 0xff
 80027d0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2225      	movs	r2, #37	@ 0x25
 80027d6:	2101      	movs	r1, #1
 80027d8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2224      	movs	r2, #36	@ 0x24
 80027de:	2100      	movs	r1, #0
 80027e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027e2:	2300      	movs	r3, #0
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b004      	add	sp, #16
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	fffffeff 	.word	0xfffffeff
 80027f0:	ffffefff 	.word	0xffffefff

080027f4 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699a      	ldr	r2, [r3, #24]
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	015b      	lsls	r3, r3, #5
 8002806:	4013      	ands	r3, r2
 8002808:	d00d      	beq.n	8002826 <HAL_RTC_AlarmIRQHandler+0x32>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002810:	2201      	movs	r2, #1
 8002812:	4013      	ands	r3, r2
 8002814:	d007      	beq.n	8002826 <HAL_RTC_AlarmIRQHandler+0x32>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2201      	movs	r2, #1
 800281c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	0018      	movs	r0, r3
 8002822:	f000 f808 	bl	8002836 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2225      	movs	r2, #37	@ 0x25
 800282a:	2101      	movs	r1, #1
 800282c:	5499      	strb	r1, [r3, r2]
}
 800282e:	46c0      	nop			@ (mov r8, r8)
 8002830:	46bd      	mov	sp, r7
 8002832:	b002      	add	sp, #8
 8002834:	bd80      	pop	{r7, pc}

08002836 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002836:	b580      	push	{r7, lr}
 8002838:	b082      	sub	sp, #8
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800283e:	46c0      	nop			@ (mov r8, r8)
 8002840:	46bd      	mov	sp, r7
 8002842:	b002      	add	sp, #8
 8002844:	bd80      	pop	{r7, pc}
	...

08002848 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002850:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_RTC_WaitForSynchro+0x60>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <HAL_RTC_WaitForSynchro+0x60>)
 8002856:	2120      	movs	r1, #32
 8002858:	438a      	bics	r2, r1
 800285a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800285c:	f7fe fbee 	bl	800103c <HAL_GetTick>
 8002860:	0003      	movs	r3, r0
 8002862:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002864:	e013      	b.n	800288e <HAL_RTC_WaitForSynchro+0x46>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002866:	f7fe fbe9 	bl	800103c <HAL_GetTick>
 800286a:	0002      	movs	r2, r0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	1ad2      	subs	r2, r2, r3
 8002870:	23fa      	movs	r3, #250	@ 0xfa
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	429a      	cmp	r2, r3
 8002876:	d90a      	bls.n	800288e <HAL_RTC_WaitForSynchro+0x46>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <HAL_RTC_WaitForSynchro+0x60>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2220      	movs	r2, #32
 800287e:	4013      	ands	r3, r2
 8002880:	d10b      	bne.n	800289a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2225      	movs	r2, #37	@ 0x25
 8002886:	2103      	movs	r1, #3
 8002888:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e007      	b.n	800289e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800288e:	4b06      	ldr	r3, [pc, #24]	@ (80028a8 <HAL_RTC_WaitForSynchro+0x60>)
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	4013      	ands	r3, r2
 8002896:	d0e6      	beq.n	8002866 <HAL_RTC_WaitForSynchro+0x1e>
 8002898:	e000      	b.n	800289c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800289a:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 800289c:	2300      	movs	r3, #0
}
 800289e:	0018      	movs	r0, r3
 80028a0:	46bd      	mov	sp, r7
 80028a2:	b004      	add	sp, #16
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	46c0      	nop			@ (mov r8, r8)
 80028a8:	40002800 	.word	0x40002800

080028ac <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028b4:	230f      	movs	r3, #15
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80028bc:	4b1e      	ldr	r3, [pc, #120]	@ (8002938 <RTC_EnterInitMode+0x8c>)
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2240      	movs	r2, #64	@ 0x40
 80028c2:	4013      	ands	r3, r2
 80028c4:	d130      	bne.n	8002928 <RTC_EnterInitMode+0x7c>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80028c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002938 <RTC_EnterInitMode+0x8c>)
 80028c8:	68da      	ldr	r2, [r3, #12]
 80028ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002938 <RTC_EnterInitMode+0x8c>)
 80028cc:	2180      	movs	r1, #128	@ 0x80
 80028ce:	430a      	orrs	r2, r1
 80028d0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80028d2:	f7fe fbb3 	bl	800103c <HAL_GetTick>
 80028d6:	0003      	movs	r3, r0
 80028d8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80028da:	e019      	b.n	8002910 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80028dc:	f7fe fbae 	bl	800103c <HAL_GetTick>
 80028e0:	0002      	movs	r2, r0
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	1ad2      	subs	r2, r2, r3
 80028e6:	200f      	movs	r0, #15
 80028e8:	183b      	adds	r3, r7, r0
 80028ea:	1839      	adds	r1, r7, r0
 80028ec:	7809      	ldrb	r1, [r1, #0]
 80028ee:	7019      	strb	r1, [r3, #0]
 80028f0:	23fa      	movs	r3, #250	@ 0xfa
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d90b      	bls.n	8002910 <RTC_EnterInitMode+0x64>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80028f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002938 <RTC_EnterInitMode+0x8c>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2240      	movs	r2, #64	@ 0x40
 80028fe:	4013      	ands	r3, r2
 8002900:	d111      	bne.n	8002926 <RTC_EnterInitMode+0x7a>
        {
          status = HAL_TIMEOUT;
 8002902:	183b      	adds	r3, r7, r0
 8002904:	2203      	movs	r2, #3
 8002906:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2225      	movs	r2, #37	@ 0x25
 800290c:	2103      	movs	r1, #3
 800290e:	5499      	strb	r1, [r3, r2]
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002910:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <RTC_EnterInitMode+0x8c>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	2240      	movs	r2, #64	@ 0x40
 8002916:	4013      	ands	r3, r2
 8002918:	d106      	bne.n	8002928 <RTC_EnterInitMode+0x7c>
 800291a:	230f      	movs	r3, #15
 800291c:	18fb      	adds	r3, r7, r3
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d1db      	bne.n	80028dc <RTC_EnterInitMode+0x30>
 8002924:	e000      	b.n	8002928 <RTC_EnterInitMode+0x7c>
        }
        else
        {
          break;
 8002926:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return status;
 8002928:	230f      	movs	r3, #15
 800292a:	18fb      	adds	r3, r7, r3
 800292c:	781b      	ldrb	r3, [r3, #0]
}
 800292e:	0018      	movs	r0, r3
 8002930:	46bd      	mov	sp, r7
 8002932:	b004      	add	sp, #16
 8002934:	bd80      	pop	{r7, pc}
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	40002800 	.word	0x40002800

0800293c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800293c:	b590      	push	{r4, r7, lr}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002944:	240f      	movs	r4, #15
 8002946:	193b      	adds	r3, r7, r4
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800294c:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <RTC_ExitInitMode+0x84>)
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <RTC_ExitInitMode+0x84>)
 8002952:	2180      	movs	r1, #128	@ 0x80
 8002954:	438a      	bics	r2, r1
 8002956:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002958:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <RTC_ExitInitMode+0x84>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	2220      	movs	r2, #32
 800295e:	4013      	ands	r3, r2
 8002960:	d10d      	bne.n	800297e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	0018      	movs	r0, r3
 8002966:	f7ff ff6f 	bl	8002848 <HAL_RTC_WaitForSynchro>
 800296a:	1e03      	subs	r3, r0, #0
 800296c:	d021      	beq.n	80029b2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2225      	movs	r2, #37	@ 0x25
 8002972:	2103      	movs	r1, #3
 8002974:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002976:	193b      	adds	r3, r7, r4
 8002978:	2203      	movs	r2, #3
 800297a:	701a      	strb	r2, [r3, #0]
 800297c:	e019      	b.n	80029b2 <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800297e:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <RTC_ExitInitMode+0x84>)
 8002980:	699a      	ldr	r2, [r3, #24]
 8002982:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <RTC_ExitInitMode+0x84>)
 8002984:	2120      	movs	r1, #32
 8002986:	438a      	bics	r2, r1
 8002988:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	0018      	movs	r0, r3
 800298e:	f7ff ff5b 	bl	8002848 <HAL_RTC_WaitForSynchro>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d007      	beq.n	80029a6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2225      	movs	r2, #37	@ 0x25
 800299a:	2103      	movs	r1, #3
 800299c:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 800299e:	230f      	movs	r3, #15
 80029a0:	18fb      	adds	r3, r7, r3
 80029a2:	2203      	movs	r2, #3
 80029a4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029a6:	4b06      	ldr	r3, [pc, #24]	@ (80029c0 <RTC_ExitInitMode+0x84>)
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <RTC_ExitInitMode+0x84>)
 80029ac:	2120      	movs	r1, #32
 80029ae:	430a      	orrs	r2, r1
 80029b0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80029b2:	230f      	movs	r3, #15
 80029b4:	18fb      	adds	r3, r7, r3
 80029b6:	781b      	ldrb	r3, [r3, #0]
}
 80029b8:	0018      	movs	r0, r3
 80029ba:	46bd      	mov	sp, r7
 80029bc:	b005      	add	sp, #20
 80029be:	bd90      	pop	{r4, r7, pc}
 80029c0:	40002800 	.word	0x40002800

080029c4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	0002      	movs	r2, r0
 80029cc:	1dfb      	adds	r3, r7, #7
 80029ce:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80029d4:	230b      	movs	r3, #11
 80029d6:	18fb      	adds	r3, r7, r3
 80029d8:	1dfa      	adds	r2, r7, #7
 80029da:	7812      	ldrb	r2, [r2, #0]
 80029dc:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80029de:	e008      	b.n	80029f2 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	3301      	adds	r3, #1
 80029e4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80029e6:	220b      	movs	r2, #11
 80029e8:	18bb      	adds	r3, r7, r2
 80029ea:	18ba      	adds	r2, r7, r2
 80029ec:	7812      	ldrb	r2, [r2, #0]
 80029ee:	3a0a      	subs	r2, #10
 80029f0:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 80029f2:	210b      	movs	r1, #11
 80029f4:	187b      	adds	r3, r7, r1
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b09      	cmp	r3, #9
 80029fa:	d8f1      	bhi.n	80029e0 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	187b      	adds	r3, r7, r1
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	b2db      	uxtb	r3, r3
}
 8002a0c:	0018      	movs	r0, r3
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	b004      	add	sp, #16
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	0002      	movs	r2, r0
 8002a1c:	1dfb      	adds	r3, r7, #7
 8002a1e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002a20:	1dfb      	adds	r3, r7, #7
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	001a      	movs	r2, r3
 8002a2a:	0013      	movs	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	b2da      	uxtb	r2, r3
 8002a38:	1dfb      	adds	r3, r7, #7
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	210f      	movs	r1, #15
 8002a3e:	400b      	ands	r3, r1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	18d3      	adds	r3, r2, r3
 8002a44:	b2db      	uxtb	r3, r3
}
 8002a46:	0018      	movs	r0, r3
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	b004      	add	sp, #16
 8002a4c:	bd80      	pop	{r7, pc}
	...

08002a50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d101      	bne.n	8002a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e046      	b.n	8002af0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2288      	movs	r2, #136	@ 0x88
 8002a66:	589b      	ldr	r3, [r3, r2]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d107      	bne.n	8002a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2284      	movs	r2, #132	@ 0x84
 8002a70:	2100      	movs	r1, #0
 8002a72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	0018      	movs	r0, r3
 8002a78:	f7fe f912 	bl	8000ca0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2288      	movs	r2, #136	@ 0x88
 8002a80:	2124      	movs	r1, #36	@ 0x24
 8002a82:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2101      	movs	r1, #1
 8002a90:	438a      	bics	r2, r1
 8002a92:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	f000 fe96 	bl	80037d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 fd14 	bl	80034d4 <UART_SetConfig>
 8002aac:	0003      	movs	r3, r0
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e01c      	b.n	8002af0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	490d      	ldr	r1, [pc, #52]	@ (8002af8 <HAL_UART_Init+0xa8>)
 8002ac2:	400a      	ands	r2, r1
 8002ac4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	212a      	movs	r1, #42	@ 0x2a
 8002ad2:	438a      	bics	r2, r1
 8002ad4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2101      	movs	r1, #1
 8002ae2:	430a      	orrs	r2, r1
 8002ae4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0018      	movs	r0, r3
 8002aea:	f000 ff25 	bl	8003938 <UART_CheckIdleState>
 8002aee:	0003      	movs	r3, r0
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b002      	add	sp, #8
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	ffffb7ff 	.word	0xffffb7ff

08002afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	@ 0x28
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	1dbb      	adds	r3, r7, #6
 8002b0a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2288      	movs	r2, #136	@ 0x88
 8002b10:	589b      	ldr	r3, [r3, r2]
 8002b12:	2b20      	cmp	r3, #32
 8002b14:	d000      	beq.n	8002b18 <HAL_UART_Transmit+0x1c>
 8002b16:	e090      	b.n	8002c3a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_UART_Transmit+0x2a>
 8002b1e:	1dbb      	adds	r3, r7, #6
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e088      	b.n	8002c3c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	689a      	ldr	r2, [r3, #8]
 8002b2e:	2380      	movs	r3, #128	@ 0x80
 8002b30:	015b      	lsls	r3, r3, #5
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d109      	bne.n	8002b4a <HAL_UART_Transmit+0x4e>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	691b      	ldr	r3, [r3, #16]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d105      	bne.n	8002b4a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	2201      	movs	r2, #1
 8002b42:	4013      	ands	r3, r2
 8002b44:	d001      	beq.n	8002b4a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e078      	b.n	8002c3c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2290      	movs	r2, #144	@ 0x90
 8002b4e:	2100      	movs	r1, #0
 8002b50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2288      	movs	r2, #136	@ 0x88
 8002b56:	2121      	movs	r1, #33	@ 0x21
 8002b58:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b5a:	f7fe fa6f 	bl	800103c <HAL_GetTick>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	1dba      	adds	r2, r7, #6
 8002b66:	2154      	movs	r1, #84	@ 0x54
 8002b68:	8812      	ldrh	r2, [r2, #0]
 8002b6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1dba      	adds	r2, r7, #6
 8002b70:	2156      	movs	r1, #86	@ 0x56
 8002b72:	8812      	ldrh	r2, [r2, #0]
 8002b74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	689a      	ldr	r2, [r3, #8]
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	015b      	lsls	r3, r3, #5
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d108      	bne.n	8002b94 <HAL_UART_Transmit+0x98>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d104      	bne.n	8002b94 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	61bb      	str	r3, [r7, #24]
 8002b92:	e003      	b.n	8002b9c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b9c:	e030      	b.n	8002c00 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	0013      	movs	r3, r2
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2180      	movs	r1, #128	@ 0x80
 8002bac:	f000 ff6e 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8002bb0:	1e03      	subs	r3, r0, #0
 8002bb2:	d005      	beq.n	8002bc0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2288      	movs	r2, #136	@ 0x88
 8002bb8:	2120      	movs	r1, #32
 8002bba:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	e03d      	b.n	8002c3c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10b      	bne.n	8002bde <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	001a      	movs	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	05d2      	lsls	r2, r2, #23
 8002bd2:	0dd2      	lsrs	r2, r2, #23
 8002bd4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	3302      	adds	r3, #2
 8002bda:	61bb      	str	r3, [r7, #24]
 8002bdc:	e007      	b.n	8002bee <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bde:	69fb      	ldr	r3, [r7, #28]
 8002be0:	781a      	ldrb	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	3301      	adds	r3, #1
 8002bec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2256      	movs	r2, #86	@ 0x56
 8002bf2:	5a9b      	ldrh	r3, [r3, r2]
 8002bf4:	b29b      	uxth	r3, r3
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	b299      	uxth	r1, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2256      	movs	r2, #86	@ 0x56
 8002bfe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	2256      	movs	r2, #86	@ 0x56
 8002c04:	5a9b      	ldrh	r3, [r3, r2]
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d1c8      	bne.n	8002b9e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	68f8      	ldr	r0, [r7, #12]
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	0013      	movs	r3, r2
 8002c16:	2200      	movs	r2, #0
 8002c18:	2140      	movs	r1, #64	@ 0x40
 8002c1a:	f000 ff37 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8002c1e:	1e03      	subs	r3, r0, #0
 8002c20:	d005      	beq.n	8002c2e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2288      	movs	r2, #136	@ 0x88
 8002c26:	2120      	movs	r1, #32
 8002c28:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e006      	b.n	8002c3c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2288      	movs	r2, #136	@ 0x88
 8002c32:	2120      	movs	r1, #32
 8002c34:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e000      	b.n	8002c3c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002c3a:	2302      	movs	r3, #2
  }
}
 8002c3c:	0018      	movs	r0, r3
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	b008      	add	sp, #32
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b08a      	sub	sp, #40	@ 0x28
 8002c48:	af02      	add	r7, sp, #8
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	603b      	str	r3, [r7, #0]
 8002c50:	1dbb      	adds	r3, r7, #6
 8002c52:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	228c      	movs	r2, #140	@ 0x8c
 8002c58:	589b      	ldr	r3, [r3, r2]
 8002c5a:	2b20      	cmp	r3, #32
 8002c5c:	d000      	beq.n	8002c60 <HAL_UART_Receive+0x1c>
 8002c5e:	e0d0      	b.n	8002e02 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d003      	beq.n	8002c6e <HAL_UART_Receive+0x2a>
 8002c66:	1dbb      	adds	r3, r7, #6
 8002c68:	881b      	ldrh	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e0c8      	b.n	8002e04 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	2380      	movs	r3, #128	@ 0x80
 8002c78:	015b      	lsls	r3, r3, #5
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d109      	bne.n	8002c92 <HAL_UART_Receive+0x4e>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	d001      	beq.n	8002c92 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0b8      	b.n	8002e04 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2290      	movs	r2, #144	@ 0x90
 8002c96:	2100      	movs	r1, #0
 8002c98:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	228c      	movs	r2, #140	@ 0x8c
 8002c9e:	2122      	movs	r1, #34	@ 0x22
 8002ca0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ca8:	f7fe f9c8 	bl	800103c <HAL_GetTick>
 8002cac:	0003      	movs	r3, r0
 8002cae:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1dba      	adds	r2, r7, #6
 8002cb4:	215c      	movs	r1, #92	@ 0x5c
 8002cb6:	8812      	ldrh	r2, [r2, #0]
 8002cb8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	1dba      	adds	r2, r7, #6
 8002cbe:	215e      	movs	r1, #94	@ 0x5e
 8002cc0:	8812      	ldrh	r2, [r2, #0]
 8002cc2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	2380      	movs	r3, #128	@ 0x80
 8002cca:	015b      	lsls	r3, r3, #5
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d10d      	bne.n	8002cec <HAL_UART_Receive+0xa8>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d104      	bne.n	8002ce2 <HAL_UART_Receive+0x9e>
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2260      	movs	r2, #96	@ 0x60
 8002cdc:	494b      	ldr	r1, [pc, #300]	@ (8002e0c <HAL_UART_Receive+0x1c8>)
 8002cde:	5299      	strh	r1, [r3, r2]
 8002ce0:	e02e      	b.n	8002d40 <HAL_UART_Receive+0xfc>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2260      	movs	r2, #96	@ 0x60
 8002ce6:	21ff      	movs	r1, #255	@ 0xff
 8002ce8:	5299      	strh	r1, [r3, r2]
 8002cea:	e029      	b.n	8002d40 <HAL_UART_Receive+0xfc>
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d10d      	bne.n	8002d10 <HAL_UART_Receive+0xcc>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d104      	bne.n	8002d06 <HAL_UART_Receive+0xc2>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2260      	movs	r2, #96	@ 0x60
 8002d00:	21ff      	movs	r1, #255	@ 0xff
 8002d02:	5299      	strh	r1, [r3, r2]
 8002d04:	e01c      	b.n	8002d40 <HAL_UART_Receive+0xfc>
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	2260      	movs	r2, #96	@ 0x60
 8002d0a:	217f      	movs	r1, #127	@ 0x7f
 8002d0c:	5299      	strh	r1, [r3, r2]
 8002d0e:	e017      	b.n	8002d40 <HAL_UART_Receive+0xfc>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	2380      	movs	r3, #128	@ 0x80
 8002d16:	055b      	lsls	r3, r3, #21
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	d10d      	bne.n	8002d38 <HAL_UART_Receive+0xf4>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	691b      	ldr	r3, [r3, #16]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d104      	bne.n	8002d2e <HAL_UART_Receive+0xea>
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	2260      	movs	r2, #96	@ 0x60
 8002d28:	217f      	movs	r1, #127	@ 0x7f
 8002d2a:	5299      	strh	r1, [r3, r2]
 8002d2c:	e008      	b.n	8002d40 <HAL_UART_Receive+0xfc>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2260      	movs	r2, #96	@ 0x60
 8002d32:	213f      	movs	r1, #63	@ 0x3f
 8002d34:	5299      	strh	r1, [r3, r2]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Receive+0xfc>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2260      	movs	r2, #96	@ 0x60
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002d40:	2312      	movs	r3, #18
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	2160      	movs	r1, #96	@ 0x60
 8002d48:	5a52      	ldrh	r2, [r2, r1]
 8002d4a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	2380      	movs	r3, #128	@ 0x80
 8002d52:	015b      	lsls	r3, r3, #5
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d108      	bne.n	8002d6a <HAL_UART_Receive+0x126>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d104      	bne.n	8002d6a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	61bb      	str	r3, [r7, #24]
 8002d68:	e003      	b.n	8002d72 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d72:	e03a      	b.n	8002dea <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	0013      	movs	r3, r2
 8002d7e:	2200      	movs	r2, #0
 8002d80:	2120      	movs	r1, #32
 8002d82:	f000 fe83 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8002d86:	1e03      	subs	r3, r0, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	228c      	movs	r2, #140	@ 0x8c
 8002d8e:	2120      	movs	r1, #32
 8002d90:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	e036      	b.n	8002e04 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10e      	bne.n	8002dba <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2212      	movs	r2, #18
 8002da6:	18ba      	adds	r2, r7, r2
 8002da8:	8812      	ldrh	r2, [r2, #0]
 8002daa:	4013      	ands	r3, r2
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002db2:	69bb      	ldr	r3, [r7, #24]
 8002db4:	3302      	adds	r3, #2
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	e00e      	b.n	8002dd8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc0:	b2db      	uxtb	r3, r3
 8002dc2:	2212      	movs	r2, #18
 8002dc4:	18ba      	adds	r2, r7, r2
 8002dc6:	8812      	ldrh	r2, [r2, #0]
 8002dc8:	b2d2      	uxtb	r2, r2
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3301      	adds	r3, #1
 8002dd6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	225e      	movs	r2, #94	@ 0x5e
 8002ddc:	5a9b      	ldrh	r3, [r3, r2]
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	3b01      	subs	r3, #1
 8002de2:	b299      	uxth	r1, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	225e      	movs	r2, #94	@ 0x5e
 8002de8:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	225e      	movs	r2, #94	@ 0x5e
 8002dee:	5a9b      	ldrh	r3, [r3, r2]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1be      	bne.n	8002d74 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	228c      	movs	r2, #140	@ 0x8c
 8002dfa:	2120      	movs	r1, #32
 8002dfc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	e000      	b.n	8002e04 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002e02:	2302      	movs	r3, #2
  }
}
 8002e04:	0018      	movs	r0, r3
 8002e06:	46bd      	mov	sp, r7
 8002e08:	b008      	add	sp, #32
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	000001ff 	.word	0x000001ff

08002e10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e10:	b5b0      	push	{r4, r5, r7, lr}
 8002e12:	b0aa      	sub	sp, #168	@ 0xa8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	69db      	ldr	r3, [r3, #28]
 8002e1e:	22a4      	movs	r2, #164	@ 0xa4
 8002e20:	18b9      	adds	r1, r7, r2
 8002e22:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	20a0      	movs	r0, #160	@ 0xa0
 8002e2c:	1839      	adds	r1, r7, r0
 8002e2e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	249c      	movs	r4, #156	@ 0x9c
 8002e38:	1939      	adds	r1, r7, r4
 8002e3a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e3c:	0011      	movs	r1, r2
 8002e3e:	18bb      	adds	r3, r7, r2
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4aa2      	ldr	r2, [pc, #648]	@ (80030cc <HAL_UART_IRQHandler+0x2bc>)
 8002e44:	4013      	ands	r3, r2
 8002e46:	2298      	movs	r2, #152	@ 0x98
 8002e48:	18bd      	adds	r5, r7, r2
 8002e4a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002e4c:	18bb      	adds	r3, r7, r2
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d11a      	bne.n	8002e8a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e54:	187b      	adds	r3, r7, r1
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2220      	movs	r2, #32
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	d015      	beq.n	8002e8a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e5e:	183b      	adds	r3, r7, r0
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2220      	movs	r2, #32
 8002e64:	4013      	ands	r3, r2
 8002e66:	d105      	bne.n	8002e74 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e68:	193b      	adds	r3, r7, r4
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2380      	movs	r3, #128	@ 0x80
 8002e6e:	055b      	lsls	r3, r3, #21
 8002e70:	4013      	ands	r3, r2
 8002e72:	d00a      	beq.n	8002e8a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d100      	bne.n	8002e7e <HAL_UART_IRQHandler+0x6e>
 8002e7c:	e2fb      	b.n	8003476 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	0010      	movs	r0, r2
 8002e86:	4798      	blx	r3
      }
      return;
 8002e88:	e2f5      	b.n	8003476 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e8a:	2398      	movs	r3, #152	@ 0x98
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d100      	bne.n	8002e96 <HAL_UART_IRQHandler+0x86>
 8002e94:	e122      	b.n	80030dc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002e96:	239c      	movs	r3, #156	@ 0x9c
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a8c      	ldr	r2, [pc, #560]	@ (80030d0 <HAL_UART_IRQHandler+0x2c0>)
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	d106      	bne.n	8002eb0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ea2:	23a0      	movs	r3, #160	@ 0xa0
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a8a      	ldr	r2, [pc, #552]	@ (80030d4 <HAL_UART_IRQHandler+0x2c4>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d100      	bne.n	8002eb0 <HAL_UART_IRQHandler+0xa0>
 8002eae:	e115      	b.n	80030dc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002eb0:	23a4      	movs	r3, #164	@ 0xa4
 8002eb2:	18fb      	adds	r3, r7, r3
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	4013      	ands	r3, r2
 8002eba:	d012      	beq.n	8002ee2 <HAL_UART_IRQHandler+0xd2>
 8002ebc:	23a0      	movs	r3, #160	@ 0xa0
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d00b      	beq.n	8002ee2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2290      	movs	r2, #144	@ 0x90
 8002ed6:	589b      	ldr	r3, [r3, r2]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	431a      	orrs	r2, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2190      	movs	r1, #144	@ 0x90
 8002ee0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ee2:	23a4      	movs	r3, #164	@ 0xa4
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	4013      	ands	r3, r2
 8002eec:	d011      	beq.n	8002f12 <HAL_UART_IRQHandler+0x102>
 8002eee:	239c      	movs	r3, #156	@ 0x9c
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d00b      	beq.n	8002f12 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2202      	movs	r2, #2
 8002f00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2290      	movs	r2, #144	@ 0x90
 8002f06:	589b      	ldr	r3, [r3, r2]
 8002f08:	2204      	movs	r2, #4
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2190      	movs	r1, #144	@ 0x90
 8002f10:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f12:	23a4      	movs	r3, #164	@ 0xa4
 8002f14:	18fb      	adds	r3, r7, r3
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2204      	movs	r2, #4
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	d011      	beq.n	8002f42 <HAL_UART_IRQHandler+0x132>
 8002f1e:	239c      	movs	r3, #156	@ 0x9c
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2201      	movs	r2, #1
 8002f26:	4013      	ands	r3, r2
 8002f28:	d00b      	beq.n	8002f42 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2290      	movs	r2, #144	@ 0x90
 8002f36:	589b      	ldr	r3, [r3, r2]
 8002f38:	2202      	movs	r2, #2
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2190      	movs	r1, #144	@ 0x90
 8002f40:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f42:	23a4      	movs	r3, #164	@ 0xa4
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	d017      	beq.n	8002f7e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f4e:	23a0      	movs	r3, #160	@ 0xa0
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2220      	movs	r2, #32
 8002f56:	4013      	ands	r3, r2
 8002f58:	d105      	bne.n	8002f66 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f5a:	239c      	movs	r3, #156	@ 0x9c
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a5b      	ldr	r2, [pc, #364]	@ (80030d0 <HAL_UART_IRQHandler+0x2c0>)
 8002f62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f64:	d00b      	beq.n	8002f7e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	2208      	movs	r2, #8
 8002f6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2290      	movs	r2, #144	@ 0x90
 8002f72:	589b      	ldr	r3, [r3, r2]
 8002f74:	2208      	movs	r2, #8
 8002f76:	431a      	orrs	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2190      	movs	r1, #144	@ 0x90
 8002f7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f7e:	23a4      	movs	r3, #164	@ 0xa4
 8002f80:	18fb      	adds	r3, r7, r3
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	2380      	movs	r3, #128	@ 0x80
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	4013      	ands	r3, r2
 8002f8a:	d013      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x1a4>
 8002f8c:	23a0      	movs	r3, #160	@ 0xa0
 8002f8e:	18fb      	adds	r3, r7, r3
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	04db      	lsls	r3, r3, #19
 8002f96:	4013      	ands	r3, r2
 8002f98:	d00c      	beq.n	8002fb4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2280      	movs	r2, #128	@ 0x80
 8002fa0:	0112      	lsls	r2, r2, #4
 8002fa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2290      	movs	r2, #144	@ 0x90
 8002fa8:	589b      	ldr	r3, [r3, r2]
 8002faa:	2220      	movs	r2, #32
 8002fac:	431a      	orrs	r2, r3
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2190      	movs	r1, #144	@ 0x90
 8002fb2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2290      	movs	r2, #144	@ 0x90
 8002fb8:	589b      	ldr	r3, [r3, r2]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d100      	bne.n	8002fc0 <HAL_UART_IRQHandler+0x1b0>
 8002fbe:	e25c      	b.n	800347a <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fc0:	23a4      	movs	r3, #164	@ 0xa4
 8002fc2:	18fb      	adds	r3, r7, r3
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d015      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fcc:	23a0      	movs	r3, #160	@ 0xa0
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d106      	bne.n	8002fe6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fd8:	239c      	movs	r3, #156	@ 0x9c
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	2380      	movs	r3, #128	@ 0x80
 8002fe0:	055b      	lsls	r3, r3, #21
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d008      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d004      	beq.n	8002ff8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	0010      	movs	r0, r2
 8002ff6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2290      	movs	r2, #144	@ 0x90
 8002ffc:	589b      	ldr	r3, [r3, r2]
 8002ffe:	2194      	movs	r1, #148	@ 0x94
 8003000:	187a      	adds	r2, r7, r1
 8003002:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2240      	movs	r2, #64	@ 0x40
 800300c:	4013      	ands	r3, r2
 800300e:	2b40      	cmp	r3, #64	@ 0x40
 8003010:	d004      	beq.n	800301c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003012:	187b      	adds	r3, r7, r1
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2228      	movs	r2, #40	@ 0x28
 8003018:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800301a:	d04c      	beq.n	80030b6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0018      	movs	r0, r3
 8003020:	f000 fda4 	bl	8003b6c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2240      	movs	r2, #64	@ 0x40
 800302c:	4013      	ands	r3, r2
 800302e:	2b40      	cmp	r3, #64	@ 0x40
 8003030:	d13c      	bne.n	80030ac <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003032:	f3ef 8310 	mrs	r3, PRIMASK
 8003036:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003038:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800303a:	2090      	movs	r0, #144	@ 0x90
 800303c:	183a      	adds	r2, r7, r0
 800303e:	6013      	str	r3, [r2, #0]
 8003040:	2301      	movs	r3, #1
 8003042:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003044:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003046:	f383 8810 	msr	PRIMASK, r3
}
 800304a:	46c0      	nop			@ (mov r8, r8)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2140      	movs	r1, #64	@ 0x40
 8003058:	438a      	bics	r2, r1
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	183b      	adds	r3, r7, r0
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003062:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003064:	f383 8810 	msr	PRIMASK, r3
}
 8003068:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2280      	movs	r2, #128	@ 0x80
 800306e:	589b      	ldr	r3, [r3, r2]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d016      	beq.n	80030a2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2280      	movs	r2, #128	@ 0x80
 8003078:	589b      	ldr	r3, [r3, r2]
 800307a:	4a17      	ldr	r2, [pc, #92]	@ (80030d8 <HAL_UART_IRQHandler+0x2c8>)
 800307c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2280      	movs	r2, #128	@ 0x80
 8003082:	589b      	ldr	r3, [r3, r2]
 8003084:	0018      	movs	r0, r3
 8003086:	f7fe f95d 	bl	8001344 <HAL_DMA_Abort_IT>
 800308a:	1e03      	subs	r3, r0, #0
 800308c:	d01c      	beq.n	80030c8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2280      	movs	r2, #128	@ 0x80
 8003092:	589b      	ldr	r3, [r3, r2]
 8003094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	2180      	movs	r1, #128	@ 0x80
 800309a:	5852      	ldr	r2, [r2, r1]
 800309c:	0010      	movs	r0, r2
 800309e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030a0:	e012      	b.n	80030c8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f000 fa01 	bl	80034ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030aa:	e00d      	b.n	80030c8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	0018      	movs	r0, r3
 80030b0:	f000 f9fc 	bl	80034ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b4:	e008      	b.n	80030c8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	0018      	movs	r0, r3
 80030ba:	f000 f9f7 	bl	80034ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2290      	movs	r2, #144	@ 0x90
 80030c2:	2100      	movs	r1, #0
 80030c4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030c6:	e1d8      	b.n	800347a <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c8:	46c0      	nop			@ (mov r8, r8)
    return;
 80030ca:	e1d6      	b.n	800347a <HAL_UART_IRQHandler+0x66a>
 80030cc:	0000080f 	.word	0x0000080f
 80030d0:	10000001 	.word	0x10000001
 80030d4:	04000120 	.word	0x04000120
 80030d8:	08003c39 	.word	0x08003c39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d000      	beq.n	80030e6 <HAL_UART_IRQHandler+0x2d6>
 80030e4:	e15d      	b.n	80033a2 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030e6:	23a4      	movs	r3, #164	@ 0xa4
 80030e8:	18fb      	adds	r3, r7, r3
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2210      	movs	r2, #16
 80030ee:	4013      	ands	r3, r2
 80030f0:	d100      	bne.n	80030f4 <HAL_UART_IRQHandler+0x2e4>
 80030f2:	e156      	b.n	80033a2 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80030f4:	23a0      	movs	r3, #160	@ 0xa0
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2210      	movs	r2, #16
 80030fc:	4013      	ands	r3, r2
 80030fe:	d100      	bne.n	8003102 <HAL_UART_IRQHandler+0x2f2>
 8003100:	e14f      	b.n	80033a2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2210      	movs	r2, #16
 8003108:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2240      	movs	r2, #64	@ 0x40
 8003112:	4013      	ands	r3, r2
 8003114:	2b40      	cmp	r3, #64	@ 0x40
 8003116:	d000      	beq.n	800311a <HAL_UART_IRQHandler+0x30a>
 8003118:	e0c3      	b.n	80032a2 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2280      	movs	r2, #128	@ 0x80
 800311e:	589b      	ldr	r3, [r3, r2]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685a      	ldr	r2, [r3, #4]
 8003124:	217e      	movs	r1, #126	@ 0x7e
 8003126:	187b      	adds	r3, r7, r1
 8003128:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800312a:	187b      	adds	r3, r7, r1
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d100      	bne.n	8003134 <HAL_UART_IRQHandler+0x324>
 8003132:	e097      	b.n	8003264 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	225c      	movs	r2, #92	@ 0x5c
 8003138:	5a9b      	ldrh	r3, [r3, r2]
 800313a:	187a      	adds	r2, r7, r1
 800313c:	8812      	ldrh	r2, [r2, #0]
 800313e:	429a      	cmp	r2, r3
 8003140:	d300      	bcc.n	8003144 <HAL_UART_IRQHandler+0x334>
 8003142:	e08f      	b.n	8003264 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	187a      	adds	r2, r7, r1
 8003148:	215e      	movs	r1, #94	@ 0x5e
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2280      	movs	r2, #128	@ 0x80
 8003152:	589b      	ldr	r3, [r3, r2]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2220      	movs	r2, #32
 800315a:	4013      	ands	r3, r2
 800315c:	d170      	bne.n	8003240 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800315e:	f3ef 8310 	mrs	r3, PRIMASK
 8003162:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003166:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003168:	2301      	movs	r3, #1
 800316a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800316e:	f383 8810 	msr	PRIMASK, r3
}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	49c4      	ldr	r1, [pc, #784]	@ (8003490 <HAL_UART_IRQHandler+0x680>)
 8003180:	400a      	ands	r2, r1
 8003182:	601a      	str	r2, [r3, #0]
 8003184:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003186:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800318a:	f383 8810 	msr	PRIMASK, r3
}
 800318e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003190:	f3ef 8310 	mrs	r3, PRIMASK
 8003194:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003198:	677b      	str	r3, [r7, #116]	@ 0x74
 800319a:	2301      	movs	r3, #1
 800319c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			@ (mov r8, r8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689a      	ldr	r2, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	438a      	bics	r2, r1
 80031b4:	609a      	str	r2, [r3, #8]
 80031b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031b8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031bc:	f383 8810 	msr	PRIMASK, r3
}
 80031c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031c2:	f3ef 8310 	mrs	r3, PRIMASK
 80031c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80031c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ca:	673b      	str	r3, [r7, #112]	@ 0x70
 80031cc:	2301      	movs	r3, #1
 80031ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031d2:	f383 8810 	msr	PRIMASK, r3
}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2140      	movs	r1, #64	@ 0x40
 80031e4:	438a      	bics	r2, r1
 80031e6:	609a      	str	r2, [r3, #8]
 80031e8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031ea:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031ee:	f383 8810 	msr	PRIMASK, r3
}
 80031f2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	228c      	movs	r2, #140	@ 0x8c
 80031f8:	2120      	movs	r1, #32
 80031fa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003202:	f3ef 8310 	mrs	r3, PRIMASK
 8003206:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003208:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800320a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800320c:	2301      	movs	r3, #1
 800320e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	46c0      	nop			@ (mov r8, r8)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2110      	movs	r1, #16
 8003224:	438a      	bics	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800322a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800322c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800322e:	f383 8810 	msr	PRIMASK, r3
}
 8003232:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2280      	movs	r2, #128	@ 0x80
 8003238:	589b      	ldr	r3, [r3, r2]
 800323a:	0018      	movs	r0, r3
 800323c:	f7fe f820 	bl	8001280 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	225c      	movs	r2, #92	@ 0x5c
 800324a:	5a9a      	ldrh	r2, [r3, r2]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	215e      	movs	r1, #94	@ 0x5e
 8003250:	5a5b      	ldrh	r3, [r3, r1]
 8003252:	b29b      	uxth	r3, r3
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	b29a      	uxth	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	0011      	movs	r1, r2
 800325c:	0018      	movs	r0, r3
 800325e:	f000 f92d 	bl	80034bc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003262:	e10c      	b.n	800347e <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	225c      	movs	r2, #92	@ 0x5c
 8003268:	5a9b      	ldrh	r3, [r3, r2]
 800326a:	227e      	movs	r2, #126	@ 0x7e
 800326c:	18ba      	adds	r2, r7, r2
 800326e:	8812      	ldrh	r2, [r2, #0]
 8003270:	429a      	cmp	r2, r3
 8003272:	d000      	beq.n	8003276 <HAL_UART_IRQHandler+0x466>
 8003274:	e103      	b.n	800347e <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2280      	movs	r2, #128	@ 0x80
 800327a:	589b      	ldr	r3, [r3, r2]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2220      	movs	r2, #32
 8003282:	4013      	ands	r3, r2
 8003284:	2b20      	cmp	r3, #32
 8003286:	d000      	beq.n	800328a <HAL_UART_IRQHandler+0x47a>
 8003288:	e0f9      	b.n	800347e <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2202      	movs	r2, #2
 800328e:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	225c      	movs	r2, #92	@ 0x5c
 8003294:	5a9a      	ldrh	r2, [r3, r2]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	0011      	movs	r1, r2
 800329a:	0018      	movs	r0, r3
 800329c:	f000 f90e 	bl	80034bc <HAL_UARTEx_RxEventCallback>
      return;
 80032a0:	e0ed      	b.n	800347e <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	225c      	movs	r2, #92	@ 0x5c
 80032a6:	5a99      	ldrh	r1, [r3, r2]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	225e      	movs	r2, #94	@ 0x5e
 80032ac:	5a9b      	ldrh	r3, [r3, r2]
 80032ae:	b29a      	uxth	r2, r3
 80032b0:	208e      	movs	r0, #142	@ 0x8e
 80032b2:	183b      	adds	r3, r7, r0
 80032b4:	1a8a      	subs	r2, r1, r2
 80032b6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	225e      	movs	r2, #94	@ 0x5e
 80032bc:	5a9b      	ldrh	r3, [r3, r2]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d100      	bne.n	80032c6 <HAL_UART_IRQHandler+0x4b6>
 80032c4:	e0dd      	b.n	8003482 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80032c6:	183b      	adds	r3, r7, r0
 80032c8:	881b      	ldrh	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d100      	bne.n	80032d0 <HAL_UART_IRQHandler+0x4c0>
 80032ce:	e0d8      	b.n	8003482 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032d0:	f3ef 8310 	mrs	r3, PRIMASK
 80032d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80032d6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032d8:	2488      	movs	r4, #136	@ 0x88
 80032da:	193a      	adds	r2, r7, r4
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	2301      	movs	r3, #1
 80032e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	f383 8810 	msr	PRIMASK, r3
}
 80032e8:	46c0      	nop			@ (mov r8, r8)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4967      	ldr	r1, [pc, #412]	@ (8003494 <HAL_UART_IRQHandler+0x684>)
 80032f6:	400a      	ands	r2, r1
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	193b      	adds	r3, r7, r4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	f383 8810 	msr	PRIMASK, r3
}
 8003306:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003308:	f3ef 8310 	mrs	r3, PRIMASK
 800330c:	61bb      	str	r3, [r7, #24]
  return(result);
 800330e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003310:	2484      	movs	r4, #132	@ 0x84
 8003312:	193a      	adds	r2, r7, r4
 8003314:	6013      	str	r3, [r2, #0]
 8003316:	2301      	movs	r3, #1
 8003318:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	f383 8810 	msr	PRIMASK, r3
}
 8003320:	46c0      	nop			@ (mov r8, r8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	689a      	ldr	r2, [r3, #8]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	495a      	ldr	r1, [pc, #360]	@ (8003498 <HAL_UART_IRQHandler+0x688>)
 800332e:	400a      	ands	r2, r1
 8003330:	609a      	str	r2, [r3, #8]
 8003332:	193b      	adds	r3, r7, r4
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	f383 8810 	msr	PRIMASK, r3
}
 800333e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	228c      	movs	r2, #140	@ 0x8c
 8003344:	2120      	movs	r1, #32
 8003346:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003354:	f3ef 8310 	mrs	r3, PRIMASK
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800335a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800335c:	2480      	movs	r4, #128	@ 0x80
 800335e:	193a      	adds	r2, r7, r4
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	2301      	movs	r3, #1
 8003364:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003368:	f383 8810 	msr	PRIMASK, r3
}
 800336c:	46c0      	nop			@ (mov r8, r8)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2110      	movs	r1, #16
 800337a:	438a      	bics	r2, r1
 800337c:	601a      	str	r2, [r3, #0]
 800337e:	193b      	adds	r3, r7, r4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003384:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003386:	f383 8810 	msr	PRIMASK, r3
}
 800338a:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2202      	movs	r2, #2
 8003390:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003392:	183b      	adds	r3, r7, r0
 8003394:	881a      	ldrh	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0011      	movs	r1, r2
 800339a:	0018      	movs	r0, r3
 800339c:	f000 f88e 	bl	80034bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033a0:	e06f      	b.n	8003482 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033a2:	23a4      	movs	r3, #164	@ 0xa4
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2380      	movs	r3, #128	@ 0x80
 80033aa:	035b      	lsls	r3, r3, #13
 80033ac:	4013      	ands	r3, r2
 80033ae:	d010      	beq.n	80033d2 <HAL_UART_IRQHandler+0x5c2>
 80033b0:	239c      	movs	r3, #156	@ 0x9c
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	03db      	lsls	r3, r3, #15
 80033ba:	4013      	ands	r3, r2
 80033bc:	d009      	beq.n	80033d2 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0352      	lsls	r2, r2, #13
 80033c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	0018      	movs	r0, r3
 80033cc:	f000 fc77 	bl	8003cbe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033d0:	e05a      	b.n	8003488 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80033d2:	23a4      	movs	r3, #164	@ 0xa4
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2280      	movs	r2, #128	@ 0x80
 80033da:	4013      	ands	r3, r2
 80033dc:	d016      	beq.n	800340c <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80033de:	23a0      	movs	r3, #160	@ 0xa0
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	4013      	ands	r3, r2
 80033e8:	d106      	bne.n	80033f8 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80033ea:	239c      	movs	r3, #156	@ 0x9c
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	2380      	movs	r3, #128	@ 0x80
 80033f2:	041b      	lsls	r3, r3, #16
 80033f4:	4013      	ands	r3, r2
 80033f6:	d009      	beq.n	800340c <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d042      	beq.n	8003486 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	0010      	movs	r0, r2
 8003408:	4798      	blx	r3
    }
    return;
 800340a:	e03c      	b.n	8003486 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800340c:	23a4      	movs	r3, #164	@ 0xa4
 800340e:	18fb      	adds	r3, r7, r3
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2240      	movs	r2, #64	@ 0x40
 8003414:	4013      	ands	r3, r2
 8003416:	d00a      	beq.n	800342e <HAL_UART_IRQHandler+0x61e>
 8003418:	23a0      	movs	r3, #160	@ 0xa0
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2240      	movs	r2, #64	@ 0x40
 8003420:	4013      	ands	r3, r2
 8003422:	d004      	beq.n	800342e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0018      	movs	r0, r3
 8003428:	f000 fc1d 	bl	8003c66 <UART_EndTransmit_IT>
    return;
 800342c:	e02c      	b.n	8003488 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800342e:	23a4      	movs	r3, #164	@ 0xa4
 8003430:	18fb      	adds	r3, r7, r3
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	2380      	movs	r3, #128	@ 0x80
 8003436:	041b      	lsls	r3, r3, #16
 8003438:	4013      	ands	r3, r2
 800343a:	d00b      	beq.n	8003454 <HAL_UART_IRQHandler+0x644>
 800343c:	23a0      	movs	r3, #160	@ 0xa0
 800343e:	18fb      	adds	r3, r7, r3
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	2380      	movs	r3, #128	@ 0x80
 8003444:	05db      	lsls	r3, r3, #23
 8003446:	4013      	ands	r3, r2
 8003448:	d004      	beq.n	8003454 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	0018      	movs	r0, r3
 800344e:	f000 fc46 	bl	8003cde <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003452:	e019      	b.n	8003488 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003454:	23a4      	movs	r3, #164	@ 0xa4
 8003456:	18fb      	adds	r3, r7, r3
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	2380      	movs	r3, #128	@ 0x80
 800345c:	045b      	lsls	r3, r3, #17
 800345e:	4013      	ands	r3, r2
 8003460:	d012      	beq.n	8003488 <HAL_UART_IRQHandler+0x678>
 8003462:	23a0      	movs	r3, #160	@ 0xa0
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	2b00      	cmp	r3, #0
 800346a:	da0d      	bge.n	8003488 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	0018      	movs	r0, r3
 8003470:	f000 fc2d 	bl	8003cce <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003474:	e008      	b.n	8003488 <HAL_UART_IRQHandler+0x678>
      return;
 8003476:	46c0      	nop			@ (mov r8, r8)
 8003478:	e006      	b.n	8003488 <HAL_UART_IRQHandler+0x678>
    return;
 800347a:	46c0      	nop			@ (mov r8, r8)
 800347c:	e004      	b.n	8003488 <HAL_UART_IRQHandler+0x678>
      return;
 800347e:	46c0      	nop			@ (mov r8, r8)
 8003480:	e002      	b.n	8003488 <HAL_UART_IRQHandler+0x678>
      return;
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	e000      	b.n	8003488 <HAL_UART_IRQHandler+0x678>
    return;
 8003486:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003488:	46bd      	mov	sp, r7
 800348a:	b02a      	add	sp, #168	@ 0xa8
 800348c:	bdb0      	pop	{r4, r5, r7, pc}
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	fffffeff 	.word	0xfffffeff
 8003494:	fffffedf 	.word	0xfffffedf
 8003498:	effffffe 	.word	0xeffffffe

0800349c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034a4:	46c0      	nop			@ (mov r8, r8)
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b002      	add	sp, #8
 80034aa:	bd80      	pop	{r7, pc}

080034ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034b4:	46c0      	nop			@ (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b002      	add	sp, #8
 80034ba:	bd80      	pop	{r7, pc}

080034bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	000a      	movs	r2, r1
 80034c6:	1cbb      	adds	r3, r7, #2
 80034c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034ca:	46c0      	nop			@ (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b002      	add	sp, #8
 80034d0:	bd80      	pop	{r7, pc}
	...

080034d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034dc:	231e      	movs	r3, #30
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	2200      	movs	r2, #0
 80034e2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	691b      	ldr	r3, [r3, #16]
 80034ec:	431a      	orrs	r2, r3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	695b      	ldr	r3, [r3, #20]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	69db      	ldr	r3, [r3, #28]
 80034f8:	4313      	orrs	r3, r2
 80034fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4aab      	ldr	r2, [pc, #684]	@ (80037b0 <UART_SetConfig+0x2dc>)
 8003504:	4013      	ands	r3, r2
 8003506:	0019      	movs	r1, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	430a      	orrs	r2, r1
 8003510:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	4aa6      	ldr	r2, [pc, #664]	@ (80037b4 <UART_SetConfig+0x2e0>)
 800351a:	4013      	ands	r3, r2
 800351c:	0019      	movs	r1, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	699b      	ldr	r3, [r3, #24]
 800352e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	4313      	orrs	r3, r2
 8003538:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	4a9d      	ldr	r2, [pc, #628]	@ (80037b8 <UART_SetConfig+0x2e4>)
 8003542:	4013      	ands	r3, r2
 8003544:	0019      	movs	r1, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	697a      	ldr	r2, [r7, #20]
 800354c:	430a      	orrs	r2, r1
 800354e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003556:	220f      	movs	r2, #15
 8003558:	4393      	bics	r3, r2
 800355a:	0019      	movs	r1, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a93      	ldr	r2, [pc, #588]	@ (80037bc <UART_SetConfig+0x2e8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d127      	bne.n	80035c2 <UART_SetConfig+0xee>
 8003572:	4b93      	ldr	r3, [pc, #588]	@ (80037c0 <UART_SetConfig+0x2ec>)
 8003574:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003576:	2203      	movs	r2, #3
 8003578:	4013      	ands	r3, r2
 800357a:	2b03      	cmp	r3, #3
 800357c:	d017      	beq.n	80035ae <UART_SetConfig+0xda>
 800357e:	d81b      	bhi.n	80035b8 <UART_SetConfig+0xe4>
 8003580:	2b02      	cmp	r3, #2
 8003582:	d00a      	beq.n	800359a <UART_SetConfig+0xc6>
 8003584:	d818      	bhi.n	80035b8 <UART_SetConfig+0xe4>
 8003586:	2b00      	cmp	r3, #0
 8003588:	d002      	beq.n	8003590 <UART_SetConfig+0xbc>
 800358a:	2b01      	cmp	r3, #1
 800358c:	d00a      	beq.n	80035a4 <UART_SetConfig+0xd0>
 800358e:	e013      	b.n	80035b8 <UART_SetConfig+0xe4>
 8003590:	231f      	movs	r3, #31
 8003592:	18fb      	adds	r3, r7, r3
 8003594:	2200      	movs	r2, #0
 8003596:	701a      	strb	r2, [r3, #0]
 8003598:	e021      	b.n	80035de <UART_SetConfig+0x10a>
 800359a:	231f      	movs	r3, #31
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	2202      	movs	r2, #2
 80035a0:	701a      	strb	r2, [r3, #0]
 80035a2:	e01c      	b.n	80035de <UART_SetConfig+0x10a>
 80035a4:	231f      	movs	r3, #31
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	2204      	movs	r2, #4
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e017      	b.n	80035de <UART_SetConfig+0x10a>
 80035ae:	231f      	movs	r3, #31
 80035b0:	18fb      	adds	r3, r7, r3
 80035b2:	2208      	movs	r2, #8
 80035b4:	701a      	strb	r2, [r3, #0]
 80035b6:	e012      	b.n	80035de <UART_SetConfig+0x10a>
 80035b8:	231f      	movs	r3, #31
 80035ba:	18fb      	adds	r3, r7, r3
 80035bc:	2210      	movs	r2, #16
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	e00d      	b.n	80035de <UART_SetConfig+0x10a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a7f      	ldr	r2, [pc, #508]	@ (80037c4 <UART_SetConfig+0x2f0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d104      	bne.n	80035d6 <UART_SetConfig+0x102>
 80035cc:	231f      	movs	r3, #31
 80035ce:	18fb      	adds	r3, r7, r3
 80035d0:	2200      	movs	r2, #0
 80035d2:	701a      	strb	r2, [r3, #0]
 80035d4:	e003      	b.n	80035de <UART_SetConfig+0x10a>
 80035d6:	231f      	movs	r3, #31
 80035d8:	18fb      	adds	r3, r7, r3
 80035da:	2210      	movs	r2, #16
 80035dc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69da      	ldr	r2, [r3, #28]
 80035e2:	2380      	movs	r3, #128	@ 0x80
 80035e4:	021b      	lsls	r3, r3, #8
 80035e6:	429a      	cmp	r2, r3
 80035e8:	d000      	beq.n	80035ec <UART_SetConfig+0x118>
 80035ea:	e06f      	b.n	80036cc <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80035ec:	231f      	movs	r3, #31
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	781b      	ldrb	r3, [r3, #0]
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d01f      	beq.n	8003636 <UART_SetConfig+0x162>
 80035f6:	dc22      	bgt.n	800363e <UART_SetConfig+0x16a>
 80035f8:	2b04      	cmp	r3, #4
 80035fa:	d017      	beq.n	800362c <UART_SetConfig+0x158>
 80035fc:	dc1f      	bgt.n	800363e <UART_SetConfig+0x16a>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <UART_SetConfig+0x134>
 8003602:	2b02      	cmp	r3, #2
 8003604:	d005      	beq.n	8003612 <UART_SetConfig+0x13e>
 8003606:	e01a      	b.n	800363e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003608:	f7fe fc2a 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 800360c:	0003      	movs	r3, r0
 800360e:	61bb      	str	r3, [r7, #24]
        break;
 8003610:	e01c      	b.n	800364c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003612:	4b6b      	ldr	r3, [pc, #428]	@ (80037c0 <UART_SetConfig+0x2ec>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	2207      	movs	r2, #7
 800361a:	4013      	ands	r3, r2
 800361c:	3301      	adds	r3, #1
 800361e:	0019      	movs	r1, r3
 8003620:	4869      	ldr	r0, [pc, #420]	@ (80037c8 <UART_SetConfig+0x2f4>)
 8003622:	f7fc fd83 	bl	800012c <__udivsi3>
 8003626:	0003      	movs	r3, r0
 8003628:	61bb      	str	r3, [r7, #24]
        break;
 800362a:	e00f      	b.n	800364c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800362c:	f7fe fbaa 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8003630:	0003      	movs	r3, r0
 8003632:	61bb      	str	r3, [r7, #24]
        break;
 8003634:	e00a      	b.n	800364c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003636:	2380      	movs	r3, #128	@ 0x80
 8003638:	021b      	lsls	r3, r3, #8
 800363a:	61bb      	str	r3, [r7, #24]
        break;
 800363c:	e006      	b.n	800364c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800363e:	2300      	movs	r3, #0
 8003640:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003642:	231e      	movs	r3, #30
 8003644:	18fb      	adds	r3, r7, r3
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
        break;
 800364a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d100      	bne.n	8003654 <UART_SetConfig+0x180>
 8003652:	e097      	b.n	8003784 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003658:	4b5c      	ldr	r3, [pc, #368]	@ (80037cc <UART_SetConfig+0x2f8>)
 800365a:	0052      	lsls	r2, r2, #1
 800365c:	5ad3      	ldrh	r3, [r2, r3]
 800365e:	0019      	movs	r1, r3
 8003660:	69b8      	ldr	r0, [r7, #24]
 8003662:	f7fc fd63 	bl	800012c <__udivsi3>
 8003666:	0003      	movs	r3, r0
 8003668:	005a      	lsls	r2, r3, #1
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	085b      	lsrs	r3, r3, #1
 8003670:	18d2      	adds	r2, r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	0019      	movs	r1, r3
 8003678:	0010      	movs	r0, r2
 800367a:	f7fc fd57 	bl	800012c <__udivsi3>
 800367e:	0003      	movs	r3, r0
 8003680:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	2b0f      	cmp	r3, #15
 8003686:	d91c      	bls.n	80036c2 <UART_SetConfig+0x1ee>
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	2380      	movs	r3, #128	@ 0x80
 800368c:	025b      	lsls	r3, r3, #9
 800368e:	429a      	cmp	r2, r3
 8003690:	d217      	bcs.n	80036c2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	b29a      	uxth	r2, r3
 8003696:	200e      	movs	r0, #14
 8003698:	183b      	adds	r3, r7, r0
 800369a:	210f      	movs	r1, #15
 800369c:	438a      	bics	r2, r1
 800369e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	085b      	lsrs	r3, r3, #1
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2207      	movs	r2, #7
 80036a8:	4013      	ands	r3, r2
 80036aa:	b299      	uxth	r1, r3
 80036ac:	183b      	adds	r3, r7, r0
 80036ae:	183a      	adds	r2, r7, r0
 80036b0:	8812      	ldrh	r2, [r2, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	183a      	adds	r2, r7, r0
 80036bc:	8812      	ldrh	r2, [r2, #0]
 80036be:	60da      	str	r2, [r3, #12]
 80036c0:	e060      	b.n	8003784 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80036c2:	231e      	movs	r3, #30
 80036c4:	18fb      	adds	r3, r7, r3
 80036c6:	2201      	movs	r2, #1
 80036c8:	701a      	strb	r2, [r3, #0]
 80036ca:	e05b      	b.n	8003784 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036cc:	231f      	movs	r3, #31
 80036ce:	18fb      	adds	r3, r7, r3
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d01f      	beq.n	8003716 <UART_SetConfig+0x242>
 80036d6:	dc22      	bgt.n	800371e <UART_SetConfig+0x24a>
 80036d8:	2b04      	cmp	r3, #4
 80036da:	d017      	beq.n	800370c <UART_SetConfig+0x238>
 80036dc:	dc1f      	bgt.n	800371e <UART_SetConfig+0x24a>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <UART_SetConfig+0x214>
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d005      	beq.n	80036f2 <UART_SetConfig+0x21e>
 80036e6:	e01a      	b.n	800371e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036e8:	f7fe fbba 	bl	8001e60 <HAL_RCC_GetPCLK1Freq>
 80036ec:	0003      	movs	r3, r0
 80036ee:	61bb      	str	r3, [r7, #24]
        break;
 80036f0:	e01c      	b.n	800372c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80036f2:	4b33      	ldr	r3, [pc, #204]	@ (80037c0 <UART_SetConfig+0x2ec>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	095b      	lsrs	r3, r3, #5
 80036f8:	2207      	movs	r2, #7
 80036fa:	4013      	ands	r3, r2
 80036fc:	3301      	adds	r3, #1
 80036fe:	0019      	movs	r1, r3
 8003700:	4831      	ldr	r0, [pc, #196]	@ (80037c8 <UART_SetConfig+0x2f4>)
 8003702:	f7fc fd13 	bl	800012c <__udivsi3>
 8003706:	0003      	movs	r3, r0
 8003708:	61bb      	str	r3, [r7, #24]
        break;
 800370a:	e00f      	b.n	800372c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800370c:	f7fe fb3a 	bl	8001d84 <HAL_RCC_GetSysClockFreq>
 8003710:	0003      	movs	r3, r0
 8003712:	61bb      	str	r3, [r7, #24]
        break;
 8003714:	e00a      	b.n	800372c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003716:	2380      	movs	r3, #128	@ 0x80
 8003718:	021b      	lsls	r3, r3, #8
 800371a:	61bb      	str	r3, [r7, #24]
        break;
 800371c:	e006      	b.n	800372c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003722:	231e      	movs	r3, #30
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
        break;
 800372a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d028      	beq.n	8003784 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003736:	4b25      	ldr	r3, [pc, #148]	@ (80037cc <UART_SetConfig+0x2f8>)
 8003738:	0052      	lsls	r2, r2, #1
 800373a:	5ad3      	ldrh	r3, [r2, r3]
 800373c:	0019      	movs	r1, r3
 800373e:	69b8      	ldr	r0, [r7, #24]
 8003740:	f7fc fcf4 	bl	800012c <__udivsi3>
 8003744:	0003      	movs	r3, r0
 8003746:	001a      	movs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	085b      	lsrs	r3, r3, #1
 800374e:	18d2      	adds	r2, r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	0019      	movs	r1, r3
 8003756:	0010      	movs	r0, r2
 8003758:	f7fc fce8 	bl	800012c <__udivsi3>
 800375c:	0003      	movs	r3, r0
 800375e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	2b0f      	cmp	r3, #15
 8003764:	d90a      	bls.n	800377c <UART_SetConfig+0x2a8>
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	2380      	movs	r3, #128	@ 0x80
 800376a:	025b      	lsls	r3, r3, #9
 800376c:	429a      	cmp	r2, r3
 800376e:	d205      	bcs.n	800377c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	b29a      	uxth	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	60da      	str	r2, [r3, #12]
 800377a:	e003      	b.n	8003784 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800377c:	231e      	movs	r3, #30
 800377e:	18fb      	adds	r3, r7, r3
 8003780:	2201      	movs	r2, #1
 8003782:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	226a      	movs	r2, #106	@ 0x6a
 8003788:	2101      	movs	r1, #1
 800378a:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2268      	movs	r2, #104	@ 0x68
 8003790:	2101      	movs	r1, #1
 8003792:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80037a0:	231e      	movs	r3, #30
 80037a2:	18fb      	adds	r3, r7, r3
 80037a4:	781b      	ldrb	r3, [r3, #0]
}
 80037a6:	0018      	movs	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	b008      	add	sp, #32
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	46c0      	nop			@ (mov r8, r8)
 80037b0:	cfff69f3 	.word	0xcfff69f3
 80037b4:	ffffcfff 	.word	0xffffcfff
 80037b8:	11fff4ff 	.word	0x11fff4ff
 80037bc:	40013800 	.word	0x40013800
 80037c0:	40021000 	.word	0x40021000
 80037c4:	40004400 	.word	0x40004400
 80037c8:	02dc6c00 	.word	0x02dc6c00
 80037cc:	08005e94 	.word	0x08005e94

080037d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037dc:	2208      	movs	r2, #8
 80037de:	4013      	ands	r3, r2
 80037e0:	d00b      	beq.n	80037fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a4a      	ldr	r2, [pc, #296]	@ (8003914 <UART_AdvFeatureConfig+0x144>)
 80037ea:	4013      	ands	r3, r2
 80037ec:	0019      	movs	r1, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fe:	2201      	movs	r2, #1
 8003800:	4013      	ands	r3, r2
 8003802:	d00b      	beq.n	800381c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	4a43      	ldr	r2, [pc, #268]	@ (8003918 <UART_AdvFeatureConfig+0x148>)
 800380c:	4013      	ands	r3, r2
 800380e:	0019      	movs	r1, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	430a      	orrs	r2, r1
 800381a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003820:	2202      	movs	r2, #2
 8003822:	4013      	ands	r3, r2
 8003824:	d00b      	beq.n	800383e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	4a3b      	ldr	r2, [pc, #236]	@ (800391c <UART_AdvFeatureConfig+0x14c>)
 800382e:	4013      	ands	r3, r2
 8003830:	0019      	movs	r1, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	430a      	orrs	r2, r1
 800383c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003842:	2204      	movs	r2, #4
 8003844:	4013      	ands	r3, r2
 8003846:	d00b      	beq.n	8003860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	4a34      	ldr	r2, [pc, #208]	@ (8003920 <UART_AdvFeatureConfig+0x150>)
 8003850:	4013      	ands	r3, r2
 8003852:	0019      	movs	r1, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003864:	2210      	movs	r2, #16
 8003866:	4013      	ands	r3, r2
 8003868:	d00b      	beq.n	8003882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	4a2c      	ldr	r2, [pc, #176]	@ (8003924 <UART_AdvFeatureConfig+0x154>)
 8003872:	4013      	ands	r3, r2
 8003874:	0019      	movs	r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003886:	2220      	movs	r2, #32
 8003888:	4013      	ands	r3, r2
 800388a:	d00b      	beq.n	80038a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	4a25      	ldr	r2, [pc, #148]	@ (8003928 <UART_AdvFeatureConfig+0x158>)
 8003894:	4013      	ands	r3, r2
 8003896:	0019      	movs	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a8:	2240      	movs	r2, #64	@ 0x40
 80038aa:	4013      	ands	r3, r2
 80038ac:	d01d      	beq.n	80038ea <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	4a1d      	ldr	r2, [pc, #116]	@ (800392c <UART_AdvFeatureConfig+0x15c>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	0019      	movs	r1, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038ca:	2380      	movs	r3, #128	@ 0x80
 80038cc:	035b      	lsls	r3, r3, #13
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d10b      	bne.n	80038ea <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4a15      	ldr	r2, [pc, #84]	@ (8003930 <UART_AdvFeatureConfig+0x160>)
 80038da:	4013      	ands	r3, r2
 80038dc:	0019      	movs	r1, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	430a      	orrs	r2, r1
 80038e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ee:	2280      	movs	r2, #128	@ 0x80
 80038f0:	4013      	ands	r3, r2
 80038f2:	d00b      	beq.n	800390c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003934 <UART_AdvFeatureConfig+0x164>)
 80038fc:	4013      	ands	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	430a      	orrs	r2, r1
 800390a:	605a      	str	r2, [r3, #4]
  }
}
 800390c:	46c0      	nop			@ (mov r8, r8)
 800390e:	46bd      	mov	sp, r7
 8003910:	b002      	add	sp, #8
 8003912:	bd80      	pop	{r7, pc}
 8003914:	ffff7fff 	.word	0xffff7fff
 8003918:	fffdffff 	.word	0xfffdffff
 800391c:	fffeffff 	.word	0xfffeffff
 8003920:	fffbffff 	.word	0xfffbffff
 8003924:	ffffefff 	.word	0xffffefff
 8003928:	ffffdfff 	.word	0xffffdfff
 800392c:	ffefffff 	.word	0xffefffff
 8003930:	ff9fffff 	.word	0xff9fffff
 8003934:	fff7ffff 	.word	0xfff7ffff

08003938 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b092      	sub	sp, #72	@ 0x48
 800393c:	af02      	add	r7, sp, #8
 800393e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2290      	movs	r2, #144	@ 0x90
 8003944:	2100      	movs	r1, #0
 8003946:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003948:	f7fd fb78 	bl	800103c <HAL_GetTick>
 800394c:	0003      	movs	r3, r0
 800394e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2208      	movs	r2, #8
 8003958:	4013      	ands	r3, r2
 800395a:	2b08      	cmp	r3, #8
 800395c:	d12d      	bne.n	80039ba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800395e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003960:	2280      	movs	r2, #128	@ 0x80
 8003962:	0391      	lsls	r1, r2, #14
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	4a47      	ldr	r2, [pc, #284]	@ (8003a84 <UART_CheckIdleState+0x14c>)
 8003968:	9200      	str	r2, [sp, #0]
 800396a:	2200      	movs	r2, #0
 800396c:	f000 f88e 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 8003970:	1e03      	subs	r3, r0, #0
 8003972:	d022      	beq.n	80039ba <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003974:	f3ef 8310 	mrs	r3, PRIMASK
 8003978:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800397c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800397e:	2301      	movs	r3, #1
 8003980:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			@ (mov r8, r8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2180      	movs	r1, #128	@ 0x80
 8003996:	438a      	bics	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800399c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039a0:	f383 8810 	msr	PRIMASK, r3
}
 80039a4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2288      	movs	r2, #136	@ 0x88
 80039aa:	2120      	movs	r1, #32
 80039ac:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2284      	movs	r2, #132	@ 0x84
 80039b2:	2100      	movs	r1, #0
 80039b4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039b6:	2303      	movs	r3, #3
 80039b8:	e060      	b.n	8003a7c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2204      	movs	r2, #4
 80039c2:	4013      	ands	r3, r2
 80039c4:	2b04      	cmp	r3, #4
 80039c6:	d146      	bne.n	8003a56 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ca:	2280      	movs	r2, #128	@ 0x80
 80039cc:	03d1      	lsls	r1, r2, #15
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	4a2c      	ldr	r2, [pc, #176]	@ (8003a84 <UART_CheckIdleState+0x14c>)
 80039d2:	9200      	str	r2, [sp, #0]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f000 f859 	bl	8003a8c <UART_WaitOnFlagUntilTimeout>
 80039da:	1e03      	subs	r3, r0, #0
 80039dc:	d03b      	beq.n	8003a56 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039de:	f3ef 8310 	mrs	r3, PRIMASK
 80039e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80039e4:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80039e8:	2301      	movs	r3, #1
 80039ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	f383 8810 	msr	PRIMASK, r3
}
 80039f2:	46c0      	nop			@ (mov r8, r8)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4922      	ldr	r1, [pc, #136]	@ (8003a88 <UART_CheckIdleState+0x150>)
 8003a00:	400a      	ands	r2, r1
 8003a02:	601a      	str	r2, [r3, #0]
 8003a04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	f383 8810 	msr	PRIMASK, r3
}
 8003a0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a10:	f3ef 8310 	mrs	r3, PRIMASK
 8003a14:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a16:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	f383 8810 	msr	PRIMASK, r3
}
 8003a24:	46c0      	nop			@ (mov r8, r8)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	689a      	ldr	r2, [r3, #8]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2101      	movs	r1, #1
 8003a32:	438a      	bics	r2, r1
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3a:	6a3b      	ldr	r3, [r7, #32]
 8003a3c:	f383 8810 	msr	PRIMASK, r3
}
 8003a40:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	228c      	movs	r2, #140	@ 0x8c
 8003a46:	2120      	movs	r1, #32
 8003a48:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2284      	movs	r2, #132	@ 0x84
 8003a4e:	2100      	movs	r1, #0
 8003a50:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	e012      	b.n	8003a7c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2288      	movs	r2, #136	@ 0x88
 8003a5a:	2120      	movs	r1, #32
 8003a5c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	228c      	movs	r2, #140	@ 0x8c
 8003a62:	2120      	movs	r1, #32
 8003a64:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2284      	movs	r2, #132	@ 0x84
 8003a76:	2100      	movs	r1, #0
 8003a78:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	0018      	movs	r0, r3
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b010      	add	sp, #64	@ 0x40
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	01ffffff 	.word	0x01ffffff
 8003a88:	fffffedf 	.word	0xfffffedf

08003a8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b084      	sub	sp, #16
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	603b      	str	r3, [r7, #0]
 8003a98:	1dfb      	adds	r3, r7, #7
 8003a9a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a9c:	e051      	b.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	d04e      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aa4:	f7fd faca 	bl	800103c <HAL_GetTick>
 8003aa8:	0002      	movs	r2, r0
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	1ad3      	subs	r3, r2, r3
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d302      	bcc.n	8003aba <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e051      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	d03b      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b80      	cmp	r3, #128	@ 0x80
 8003ace:	d038      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	2b40      	cmp	r3, #64	@ 0x40
 8003ad4:	d035      	beq.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	2208      	movs	r2, #8
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d111      	bne.n	8003b08 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	0018      	movs	r0, r3
 8003af0:	f000 f83c 	bl	8003b6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2290      	movs	r2, #144	@ 0x90
 8003af8:	2108      	movs	r1, #8
 8003afa:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2284      	movs	r2, #132	@ 0x84
 8003b00:	2100      	movs	r1, #0
 8003b02:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e02c      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69da      	ldr	r2, [r3, #28]
 8003b0e:	2380      	movs	r3, #128	@ 0x80
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	401a      	ands	r2, r3
 8003b14:	2380      	movs	r3, #128	@ 0x80
 8003b16:	011b      	lsls	r3, r3, #4
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d112      	bne.n	8003b42 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2280      	movs	r2, #128	@ 0x80
 8003b22:	0112      	lsls	r2, r2, #4
 8003b24:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	0018      	movs	r0, r3
 8003b2a:	f000 f81f 	bl	8003b6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2290      	movs	r2, #144	@ 0x90
 8003b32:	2120      	movs	r1, #32
 8003b34:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2284      	movs	r2, #132	@ 0x84
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e00f      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	69db      	ldr	r3, [r3, #28]
 8003b48:	68ba      	ldr	r2, [r7, #8]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	68ba      	ldr	r2, [r7, #8]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	425a      	negs	r2, r3
 8003b52:	4153      	adcs	r3, r2
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	001a      	movs	r2, r3
 8003b58:	1dfb      	adds	r3, r7, #7
 8003b5a:	781b      	ldrb	r3, [r3, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d09e      	beq.n	8003a9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	0018      	movs	r0, r3
 8003b64:	46bd      	mov	sp, r7
 8003b66:	b004      	add	sp, #16
 8003b68:	bd80      	pop	{r7, pc}
	...

08003b6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08e      	sub	sp, #56	@ 0x38
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b74:	f3ef 8310 	mrs	r3, PRIMASK
 8003b78:	617b      	str	r3, [r7, #20]
  return(result);
 8003b7a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b7e:	2301      	movs	r3, #1
 8003b80:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	f383 8810 	msr	PRIMASK, r3
}
 8003b88:	46c0      	nop			@ (mov r8, r8)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4926      	ldr	r1, [pc, #152]	@ (8003c30 <UART_EndRxTransfer+0xc4>)
 8003b96:	400a      	ands	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]
 8003b9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f383 8810 	msr	PRIMASK, r3
}
 8003ba4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ba6:	f3ef 8310 	mrs	r3, PRIMASK
 8003baa:	623b      	str	r3, [r7, #32]
  return(result);
 8003bac:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bae:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb6:	f383 8810 	msr	PRIMASK, r3
}
 8003bba:	46c0      	nop			@ (mov r8, r8)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	491b      	ldr	r1, [pc, #108]	@ (8003c34 <UART_EndRxTransfer+0xc8>)
 8003bc8:	400a      	ands	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
 8003bcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bce:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd2:	f383 8810 	msr	PRIMASK, r3
}
 8003bd6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d118      	bne.n	8003c12 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003be0:	f3ef 8310 	mrs	r3, PRIMASK
 8003be4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003be6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bea:	2301      	movs	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f383 8810 	msr	PRIMASK, r3
}
 8003bf4:	46c0      	nop			@ (mov r8, r8)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2110      	movs	r1, #16
 8003c02:	438a      	bics	r2, r1
 8003c04:	601a      	str	r2, [r3, #0]
 8003c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c08:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f383 8810 	msr	PRIMASK, r3
}
 8003c10:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	228c      	movs	r2, #140	@ 0x8c
 8003c16:	2120      	movs	r1, #32
 8003c18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c26:	46c0      	nop			@ (mov r8, r8)
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b00e      	add	sp, #56	@ 0x38
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	fffffedf 	.word	0xfffffedf
 8003c34:	effffffe 	.word	0xeffffffe

08003c38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b084      	sub	sp, #16
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	225e      	movs	r2, #94	@ 0x5e
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2256      	movs	r2, #86	@ 0x56
 8003c52:	2100      	movs	r1, #0
 8003c54:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	0018      	movs	r0, r3
 8003c5a:	f7ff fc27 	bl	80034ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c5e:	46c0      	nop			@ (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b004      	add	sp, #16
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c72:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c74:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	2301      	movs	r3, #1
 8003c7a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f383 8810 	msr	PRIMASK, r3
}
 8003c82:	46c0      	nop			@ (mov r8, r8)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2140      	movs	r1, #64	@ 0x40
 8003c90:	438a      	bics	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f383 8810 	msr	PRIMASK, r3
}
 8003c9e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2288      	movs	r2, #136	@ 0x88
 8003ca4:	2120      	movs	r1, #32
 8003ca6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7ff fbf3 	bl	800349c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cb6:	46c0      	nop			@ (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b006      	add	sp, #24
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b082      	sub	sp, #8
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cc6:	46c0      	nop			@ (mov r8, r8)
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	b002      	add	sp, #8
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003cce:	b580      	push	{r7, lr}
 8003cd0:	b082      	sub	sp, #8
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b002      	add	sp, #8
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}
	...

08003cf0 <std>:
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	b510      	push	{r4, lr}
 8003cf4:	0004      	movs	r4, r0
 8003cf6:	6003      	str	r3, [r0, #0]
 8003cf8:	6043      	str	r3, [r0, #4]
 8003cfa:	6083      	str	r3, [r0, #8]
 8003cfc:	8181      	strh	r1, [r0, #12]
 8003cfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d00:	81c2      	strh	r2, [r0, #14]
 8003d02:	6103      	str	r3, [r0, #16]
 8003d04:	6143      	str	r3, [r0, #20]
 8003d06:	6183      	str	r3, [r0, #24]
 8003d08:	0019      	movs	r1, r3
 8003d0a:	2208      	movs	r2, #8
 8003d0c:	305c      	adds	r0, #92	@ 0x5c
 8003d0e:	f000 fa6d 	bl	80041ec <memset>
 8003d12:	4b0b      	ldr	r3, [pc, #44]	@ (8003d40 <std+0x50>)
 8003d14:	6224      	str	r4, [r4, #32]
 8003d16:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d18:	4b0a      	ldr	r3, [pc, #40]	@ (8003d44 <std+0x54>)
 8003d1a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d48 <std+0x58>)
 8003d1e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d20:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <std+0x5c>)
 8003d22:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <std+0x60>)
 8003d26:	429c      	cmp	r4, r3
 8003d28:	d005      	beq.n	8003d36 <std+0x46>
 8003d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <std+0x64>)
 8003d2c:	429c      	cmp	r4, r3
 8003d2e:	d002      	beq.n	8003d36 <std+0x46>
 8003d30:	4b09      	ldr	r3, [pc, #36]	@ (8003d58 <std+0x68>)
 8003d32:	429c      	cmp	r4, r3
 8003d34:	d103      	bne.n	8003d3e <std+0x4e>
 8003d36:	0020      	movs	r0, r4
 8003d38:	3058      	adds	r0, #88	@ 0x58
 8003d3a:	f000 faed 	bl	8004318 <__retarget_lock_init_recursive>
 8003d3e:	bd10      	pop	{r4, pc}
 8003d40:	08004011 	.word	0x08004011
 8003d44:	0800403d 	.word	0x0800403d
 8003d48:	08004075 	.word	0x08004075
 8003d4c:	080040a1 	.word	0x080040a1
 8003d50:	20000248 	.word	0x20000248
 8003d54:	200002b0 	.word	0x200002b0
 8003d58:	20000318 	.word	0x20000318

08003d5c <stdio_exit_handler>:
 8003d5c:	b510      	push	{r4, lr}
 8003d5e:	4a03      	ldr	r2, [pc, #12]	@ (8003d6c <stdio_exit_handler+0x10>)
 8003d60:	4903      	ldr	r1, [pc, #12]	@ (8003d70 <stdio_exit_handler+0x14>)
 8003d62:	4804      	ldr	r0, [pc, #16]	@ (8003d74 <stdio_exit_handler+0x18>)
 8003d64:	f000 f86c 	bl	8003e40 <_fwalk_sglue>
 8003d68:	bd10      	pop	{r4, pc}
 8003d6a:	46c0      	nop			@ (mov r8, r8)
 8003d6c:	2000000c 	.word	0x2000000c
 8003d70:	080054b1 	.word	0x080054b1
 8003d74:	2000001c 	.word	0x2000001c

08003d78 <cleanup_stdio>:
 8003d78:	6841      	ldr	r1, [r0, #4]
 8003d7a:	4b0b      	ldr	r3, [pc, #44]	@ (8003da8 <cleanup_stdio+0x30>)
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	0004      	movs	r4, r0
 8003d80:	4299      	cmp	r1, r3
 8003d82:	d001      	beq.n	8003d88 <cleanup_stdio+0x10>
 8003d84:	f001 fb94 	bl	80054b0 <_fflush_r>
 8003d88:	68a1      	ldr	r1, [r4, #8]
 8003d8a:	4b08      	ldr	r3, [pc, #32]	@ (8003dac <cleanup_stdio+0x34>)
 8003d8c:	4299      	cmp	r1, r3
 8003d8e:	d002      	beq.n	8003d96 <cleanup_stdio+0x1e>
 8003d90:	0020      	movs	r0, r4
 8003d92:	f001 fb8d 	bl	80054b0 <_fflush_r>
 8003d96:	68e1      	ldr	r1, [r4, #12]
 8003d98:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <cleanup_stdio+0x38>)
 8003d9a:	4299      	cmp	r1, r3
 8003d9c:	d002      	beq.n	8003da4 <cleanup_stdio+0x2c>
 8003d9e:	0020      	movs	r0, r4
 8003da0:	f001 fb86 	bl	80054b0 <_fflush_r>
 8003da4:	bd10      	pop	{r4, pc}
 8003da6:	46c0      	nop			@ (mov r8, r8)
 8003da8:	20000248 	.word	0x20000248
 8003dac:	200002b0 	.word	0x200002b0
 8003db0:	20000318 	.word	0x20000318

08003db4 <global_stdio_init.part.0>:
 8003db4:	b510      	push	{r4, lr}
 8003db6:	4b09      	ldr	r3, [pc, #36]	@ (8003ddc <global_stdio_init.part.0+0x28>)
 8003db8:	4a09      	ldr	r2, [pc, #36]	@ (8003de0 <global_stdio_init.part.0+0x2c>)
 8003dba:	2104      	movs	r1, #4
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	4809      	ldr	r0, [pc, #36]	@ (8003de4 <global_stdio_init.part.0+0x30>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f7ff ff95 	bl	8003cf0 <std>
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	2109      	movs	r1, #9
 8003dca:	4807      	ldr	r0, [pc, #28]	@ (8003de8 <global_stdio_init.part.0+0x34>)
 8003dcc:	f7ff ff90 	bl	8003cf0 <std>
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	2112      	movs	r1, #18
 8003dd4:	4805      	ldr	r0, [pc, #20]	@ (8003dec <global_stdio_init.part.0+0x38>)
 8003dd6:	f7ff ff8b 	bl	8003cf0 <std>
 8003dda:	bd10      	pop	{r4, pc}
 8003ddc:	20000380 	.word	0x20000380
 8003de0:	08003d5d 	.word	0x08003d5d
 8003de4:	20000248 	.word	0x20000248
 8003de8:	200002b0 	.word	0x200002b0
 8003dec:	20000318 	.word	0x20000318

08003df0 <__sfp_lock_acquire>:
 8003df0:	b510      	push	{r4, lr}
 8003df2:	4802      	ldr	r0, [pc, #8]	@ (8003dfc <__sfp_lock_acquire+0xc>)
 8003df4:	f000 fa91 	bl	800431a <__retarget_lock_acquire_recursive>
 8003df8:	bd10      	pop	{r4, pc}
 8003dfa:	46c0      	nop			@ (mov r8, r8)
 8003dfc:	20000389 	.word	0x20000389

08003e00 <__sfp_lock_release>:
 8003e00:	b510      	push	{r4, lr}
 8003e02:	4802      	ldr	r0, [pc, #8]	@ (8003e0c <__sfp_lock_release+0xc>)
 8003e04:	f000 fa8a 	bl	800431c <__retarget_lock_release_recursive>
 8003e08:	bd10      	pop	{r4, pc}
 8003e0a:	46c0      	nop			@ (mov r8, r8)
 8003e0c:	20000389 	.word	0x20000389

08003e10 <__sinit>:
 8003e10:	b510      	push	{r4, lr}
 8003e12:	0004      	movs	r4, r0
 8003e14:	f7ff ffec 	bl	8003df0 <__sfp_lock_acquire>
 8003e18:	6a23      	ldr	r3, [r4, #32]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d002      	beq.n	8003e24 <__sinit+0x14>
 8003e1e:	f7ff ffef 	bl	8003e00 <__sfp_lock_release>
 8003e22:	bd10      	pop	{r4, pc}
 8003e24:	4b04      	ldr	r3, [pc, #16]	@ (8003e38 <__sinit+0x28>)
 8003e26:	6223      	str	r3, [r4, #32]
 8003e28:	4b04      	ldr	r3, [pc, #16]	@ (8003e3c <__sinit+0x2c>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1f6      	bne.n	8003e1e <__sinit+0xe>
 8003e30:	f7ff ffc0 	bl	8003db4 <global_stdio_init.part.0>
 8003e34:	e7f3      	b.n	8003e1e <__sinit+0xe>
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	08003d79 	.word	0x08003d79
 8003e3c:	20000380 	.word	0x20000380

08003e40 <_fwalk_sglue>:
 8003e40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e42:	0014      	movs	r4, r2
 8003e44:	2600      	movs	r6, #0
 8003e46:	9000      	str	r0, [sp, #0]
 8003e48:	9101      	str	r1, [sp, #4]
 8003e4a:	68a5      	ldr	r5, [r4, #8]
 8003e4c:	6867      	ldr	r7, [r4, #4]
 8003e4e:	3f01      	subs	r7, #1
 8003e50:	d504      	bpl.n	8003e5c <_fwalk_sglue+0x1c>
 8003e52:	6824      	ldr	r4, [r4, #0]
 8003e54:	2c00      	cmp	r4, #0
 8003e56:	d1f8      	bne.n	8003e4a <_fwalk_sglue+0xa>
 8003e58:	0030      	movs	r0, r6
 8003e5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e5c:	89ab      	ldrh	r3, [r5, #12]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d908      	bls.n	8003e74 <_fwalk_sglue+0x34>
 8003e62:	220e      	movs	r2, #14
 8003e64:	5eab      	ldrsh	r3, [r5, r2]
 8003e66:	3301      	adds	r3, #1
 8003e68:	d004      	beq.n	8003e74 <_fwalk_sglue+0x34>
 8003e6a:	0029      	movs	r1, r5
 8003e6c:	9800      	ldr	r0, [sp, #0]
 8003e6e:	9b01      	ldr	r3, [sp, #4]
 8003e70:	4798      	blx	r3
 8003e72:	4306      	orrs	r6, r0
 8003e74:	3568      	adds	r5, #104	@ 0x68
 8003e76:	e7ea      	b.n	8003e4e <_fwalk_sglue+0xe>

08003e78 <iprintf>:
 8003e78:	b40f      	push	{r0, r1, r2, r3}
 8003e7a:	b507      	push	{r0, r1, r2, lr}
 8003e7c:	4905      	ldr	r1, [pc, #20]	@ (8003e94 <iprintf+0x1c>)
 8003e7e:	ab04      	add	r3, sp, #16
 8003e80:	6808      	ldr	r0, [r1, #0]
 8003e82:	cb04      	ldmia	r3!, {r2}
 8003e84:	6881      	ldr	r1, [r0, #8]
 8003e86:	9301      	str	r3, [sp, #4]
 8003e88:	f000 fe92 	bl	8004bb0 <_vfiprintf_r>
 8003e8c:	b003      	add	sp, #12
 8003e8e:	bc08      	pop	{r3}
 8003e90:	b004      	add	sp, #16
 8003e92:	4718      	bx	r3
 8003e94:	20000018 	.word	0x20000018

08003e98 <_puts_r>:
 8003e98:	6a03      	ldr	r3, [r0, #32]
 8003e9a:	b570      	push	{r4, r5, r6, lr}
 8003e9c:	0005      	movs	r5, r0
 8003e9e:	000e      	movs	r6, r1
 8003ea0:	6884      	ldr	r4, [r0, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <_puts_r+0x12>
 8003ea6:	f7ff ffb3 	bl	8003e10 <__sinit>
 8003eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eac:	07db      	lsls	r3, r3, #31
 8003eae:	d405      	bmi.n	8003ebc <_puts_r+0x24>
 8003eb0:	89a3      	ldrh	r3, [r4, #12]
 8003eb2:	059b      	lsls	r3, r3, #22
 8003eb4:	d402      	bmi.n	8003ebc <_puts_r+0x24>
 8003eb6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003eb8:	f000 fa2f 	bl	800431a <__retarget_lock_acquire_recursive>
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	071b      	lsls	r3, r3, #28
 8003ec0:	d502      	bpl.n	8003ec8 <_puts_r+0x30>
 8003ec2:	6923      	ldr	r3, [r4, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d11f      	bne.n	8003f08 <_puts_r+0x70>
 8003ec8:	0021      	movs	r1, r4
 8003eca:	0028      	movs	r0, r5
 8003ecc:	f000 f930 	bl	8004130 <__swsetup_r>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d019      	beq.n	8003f08 <_puts_r+0x70>
 8003ed4:	2501      	movs	r5, #1
 8003ed6:	426d      	negs	r5, r5
 8003ed8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eda:	07db      	lsls	r3, r3, #31
 8003edc:	d405      	bmi.n	8003eea <_puts_r+0x52>
 8003ede:	89a3      	ldrh	r3, [r4, #12]
 8003ee0:	059b      	lsls	r3, r3, #22
 8003ee2:	d402      	bmi.n	8003eea <_puts_r+0x52>
 8003ee4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ee6:	f000 fa19 	bl	800431c <__retarget_lock_release_recursive>
 8003eea:	0028      	movs	r0, r5
 8003eec:	bd70      	pop	{r4, r5, r6, pc}
 8003eee:	3601      	adds	r6, #1
 8003ef0:	60a3      	str	r3, [r4, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	da04      	bge.n	8003f00 <_puts_r+0x68>
 8003ef6:	69a2      	ldr	r2, [r4, #24]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	dc16      	bgt.n	8003f2a <_puts_r+0x92>
 8003efc:	290a      	cmp	r1, #10
 8003efe:	d014      	beq.n	8003f2a <_puts_r+0x92>
 8003f00:	6823      	ldr	r3, [r4, #0]
 8003f02:	1c5a      	adds	r2, r3, #1
 8003f04:	6022      	str	r2, [r4, #0]
 8003f06:	7019      	strb	r1, [r3, #0]
 8003f08:	68a3      	ldr	r3, [r4, #8]
 8003f0a:	7831      	ldrb	r1, [r6, #0]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	2900      	cmp	r1, #0
 8003f10:	d1ed      	bne.n	8003eee <_puts_r+0x56>
 8003f12:	60a3      	str	r3, [r4, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	da0f      	bge.n	8003f38 <_puts_r+0xa0>
 8003f18:	0022      	movs	r2, r4
 8003f1a:	0028      	movs	r0, r5
 8003f1c:	310a      	adds	r1, #10
 8003f1e:	f000 f8c5 	bl	80040ac <__swbuf_r>
 8003f22:	3001      	adds	r0, #1
 8003f24:	d0d6      	beq.n	8003ed4 <_puts_r+0x3c>
 8003f26:	250a      	movs	r5, #10
 8003f28:	e7d6      	b.n	8003ed8 <_puts_r+0x40>
 8003f2a:	0022      	movs	r2, r4
 8003f2c:	0028      	movs	r0, r5
 8003f2e:	f000 f8bd 	bl	80040ac <__swbuf_r>
 8003f32:	3001      	adds	r0, #1
 8003f34:	d1e8      	bne.n	8003f08 <_puts_r+0x70>
 8003f36:	e7cd      	b.n	8003ed4 <_puts_r+0x3c>
 8003f38:	6823      	ldr	r3, [r4, #0]
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	6022      	str	r2, [r4, #0]
 8003f3e:	220a      	movs	r2, #10
 8003f40:	701a      	strb	r2, [r3, #0]
 8003f42:	e7f0      	b.n	8003f26 <_puts_r+0x8e>

08003f44 <puts>:
 8003f44:	b510      	push	{r4, lr}
 8003f46:	4b03      	ldr	r3, [pc, #12]	@ (8003f54 <puts+0x10>)
 8003f48:	0001      	movs	r1, r0
 8003f4a:	6818      	ldr	r0, [r3, #0]
 8003f4c:	f7ff ffa4 	bl	8003e98 <_puts_r>
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	46c0      	nop			@ (mov r8, r8)
 8003f54:	20000018 	.word	0x20000018

08003f58 <sniprintf>:
 8003f58:	b40c      	push	{r2, r3}
 8003f5a:	b530      	push	{r4, r5, lr}
 8003f5c:	4b17      	ldr	r3, [pc, #92]	@ (8003fbc <sniprintf+0x64>)
 8003f5e:	000c      	movs	r4, r1
 8003f60:	681d      	ldr	r5, [r3, #0]
 8003f62:	b09d      	sub	sp, #116	@ 0x74
 8003f64:	2900      	cmp	r1, #0
 8003f66:	da08      	bge.n	8003f7a <sniprintf+0x22>
 8003f68:	238b      	movs	r3, #139	@ 0x8b
 8003f6a:	2001      	movs	r0, #1
 8003f6c:	602b      	str	r3, [r5, #0]
 8003f6e:	4240      	negs	r0, r0
 8003f70:	b01d      	add	sp, #116	@ 0x74
 8003f72:	bc30      	pop	{r4, r5}
 8003f74:	bc08      	pop	{r3}
 8003f76:	b002      	add	sp, #8
 8003f78:	4718      	bx	r3
 8003f7a:	2382      	movs	r3, #130	@ 0x82
 8003f7c:	466a      	mov	r2, sp
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	8293      	strh	r3, [r2, #20]
 8003f82:	2300      	movs	r3, #0
 8003f84:	9002      	str	r0, [sp, #8]
 8003f86:	9006      	str	r0, [sp, #24]
 8003f88:	4299      	cmp	r1, r3
 8003f8a:	d000      	beq.n	8003f8e <sniprintf+0x36>
 8003f8c:	1e4b      	subs	r3, r1, #1
 8003f8e:	9304      	str	r3, [sp, #16]
 8003f90:	9307      	str	r3, [sp, #28]
 8003f92:	2301      	movs	r3, #1
 8003f94:	466a      	mov	r2, sp
 8003f96:	425b      	negs	r3, r3
 8003f98:	82d3      	strh	r3, [r2, #22]
 8003f9a:	0028      	movs	r0, r5
 8003f9c:	ab21      	add	r3, sp, #132	@ 0x84
 8003f9e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003fa0:	a902      	add	r1, sp, #8
 8003fa2:	9301      	str	r3, [sp, #4]
 8003fa4:	f000 fb20 	bl	80045e8 <_svfiprintf_r>
 8003fa8:	1c43      	adds	r3, r0, #1
 8003faa:	da01      	bge.n	8003fb0 <sniprintf+0x58>
 8003fac:	238b      	movs	r3, #139	@ 0x8b
 8003fae:	602b      	str	r3, [r5, #0]
 8003fb0:	2c00      	cmp	r4, #0
 8003fb2:	d0dd      	beq.n	8003f70 <sniprintf+0x18>
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	9b02      	ldr	r3, [sp, #8]
 8003fb8:	701a      	strb	r2, [r3, #0]
 8003fba:	e7d9      	b.n	8003f70 <sniprintf+0x18>
 8003fbc:	20000018 	.word	0x20000018

08003fc0 <siscanf>:
 8003fc0:	b40e      	push	{r1, r2, r3}
 8003fc2:	b530      	push	{r4, r5, lr}
 8003fc4:	2381      	movs	r3, #129	@ 0x81
 8003fc6:	b09c      	sub	sp, #112	@ 0x70
 8003fc8:	466a      	mov	r2, sp
 8003fca:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	cc20      	ldmia	r4!, {r5}
 8003fd0:	8293      	strh	r3, [r2, #20]
 8003fd2:	9002      	str	r0, [sp, #8]
 8003fd4:	9006      	str	r0, [sp, #24]
 8003fd6:	f7fc f897 	bl	8000108 <strlen>
 8003fda:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <siscanf+0x48>)
 8003fdc:	466a      	mov	r2, sp
 8003fde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	9003      	str	r0, [sp, #12]
 8003fe4:	9007      	str	r0, [sp, #28]
 8003fe6:	4809      	ldr	r0, [pc, #36]	@ (800400c <siscanf+0x4c>)
 8003fe8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003fea:	9314      	str	r3, [sp, #80]	@ 0x50
 8003fec:	3b01      	subs	r3, #1
 8003fee:	82d3      	strh	r3, [r2, #22]
 8003ff0:	a902      	add	r1, sp, #8
 8003ff2:	0023      	movs	r3, r4
 8003ff4:	002a      	movs	r2, r5
 8003ff6:	6800      	ldr	r0, [r0, #0]
 8003ff8:	9401      	str	r4, [sp, #4]
 8003ffa:	f000 fc4f 	bl	800489c <__ssvfiscanf_r>
 8003ffe:	b01c      	add	sp, #112	@ 0x70
 8004000:	bc30      	pop	{r4, r5}
 8004002:	bc08      	pop	{r3}
 8004004:	b003      	add	sp, #12
 8004006:	4718      	bx	r3
 8004008:	08004039 	.word	0x08004039
 800400c:	20000018 	.word	0x20000018

08004010 <__sread>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	000c      	movs	r4, r1
 8004014:	250e      	movs	r5, #14
 8004016:	5f49      	ldrsh	r1, [r1, r5]
 8004018:	f000 f92c 	bl	8004274 <_read_r>
 800401c:	2800      	cmp	r0, #0
 800401e:	db03      	blt.n	8004028 <__sread+0x18>
 8004020:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004022:	181b      	adds	r3, r3, r0
 8004024:	6563      	str	r3, [r4, #84]	@ 0x54
 8004026:	bd70      	pop	{r4, r5, r6, pc}
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	4a02      	ldr	r2, [pc, #8]	@ (8004034 <__sread+0x24>)
 800402c:	4013      	ands	r3, r2
 800402e:	81a3      	strh	r3, [r4, #12]
 8004030:	e7f9      	b.n	8004026 <__sread+0x16>
 8004032:	46c0      	nop			@ (mov r8, r8)
 8004034:	ffffefff 	.word	0xffffefff

08004038 <__seofread>:
 8004038:	2000      	movs	r0, #0
 800403a:	4770      	bx	lr

0800403c <__swrite>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	001f      	movs	r7, r3
 8004040:	898b      	ldrh	r3, [r1, #12]
 8004042:	0005      	movs	r5, r0
 8004044:	000c      	movs	r4, r1
 8004046:	0016      	movs	r6, r2
 8004048:	05db      	lsls	r3, r3, #23
 800404a:	d505      	bpl.n	8004058 <__swrite+0x1c>
 800404c:	230e      	movs	r3, #14
 800404e:	5ec9      	ldrsh	r1, [r1, r3]
 8004050:	2200      	movs	r2, #0
 8004052:	2302      	movs	r3, #2
 8004054:	f000 f8fa 	bl	800424c <_lseek_r>
 8004058:	89a3      	ldrh	r3, [r4, #12]
 800405a:	4a05      	ldr	r2, [pc, #20]	@ (8004070 <__swrite+0x34>)
 800405c:	0028      	movs	r0, r5
 800405e:	4013      	ands	r3, r2
 8004060:	81a3      	strh	r3, [r4, #12]
 8004062:	0032      	movs	r2, r6
 8004064:	230e      	movs	r3, #14
 8004066:	5ee1      	ldrsh	r1, [r4, r3]
 8004068:	003b      	movs	r3, r7
 800406a:	f000 f917 	bl	800429c <_write_r>
 800406e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004070:	ffffefff 	.word	0xffffefff

08004074 <__sseek>:
 8004074:	b570      	push	{r4, r5, r6, lr}
 8004076:	000c      	movs	r4, r1
 8004078:	250e      	movs	r5, #14
 800407a:	5f49      	ldrsh	r1, [r1, r5]
 800407c:	f000 f8e6 	bl	800424c <_lseek_r>
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	1c42      	adds	r2, r0, #1
 8004084:	d103      	bne.n	800408e <__sseek+0x1a>
 8004086:	4a05      	ldr	r2, [pc, #20]	@ (800409c <__sseek+0x28>)
 8004088:	4013      	ands	r3, r2
 800408a:	81a3      	strh	r3, [r4, #12]
 800408c:	bd70      	pop	{r4, r5, r6, pc}
 800408e:	2280      	movs	r2, #128	@ 0x80
 8004090:	0152      	lsls	r2, r2, #5
 8004092:	4313      	orrs	r3, r2
 8004094:	81a3      	strh	r3, [r4, #12]
 8004096:	6560      	str	r0, [r4, #84]	@ 0x54
 8004098:	e7f8      	b.n	800408c <__sseek+0x18>
 800409a:	46c0      	nop			@ (mov r8, r8)
 800409c:	ffffefff 	.word	0xffffefff

080040a0 <__sclose>:
 80040a0:	b510      	push	{r4, lr}
 80040a2:	230e      	movs	r3, #14
 80040a4:	5ec9      	ldrsh	r1, [r1, r3]
 80040a6:	f000 f8bf 	bl	8004228 <_close_r>
 80040aa:	bd10      	pop	{r4, pc}

080040ac <__swbuf_r>:
 80040ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ae:	0006      	movs	r6, r0
 80040b0:	000d      	movs	r5, r1
 80040b2:	0014      	movs	r4, r2
 80040b4:	2800      	cmp	r0, #0
 80040b6:	d004      	beq.n	80040c2 <__swbuf_r+0x16>
 80040b8:	6a03      	ldr	r3, [r0, #32]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d101      	bne.n	80040c2 <__swbuf_r+0x16>
 80040be:	f7ff fea7 	bl	8003e10 <__sinit>
 80040c2:	69a3      	ldr	r3, [r4, #24]
 80040c4:	60a3      	str	r3, [r4, #8]
 80040c6:	89a3      	ldrh	r3, [r4, #12]
 80040c8:	071b      	lsls	r3, r3, #28
 80040ca:	d502      	bpl.n	80040d2 <__swbuf_r+0x26>
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d109      	bne.n	80040e6 <__swbuf_r+0x3a>
 80040d2:	0021      	movs	r1, r4
 80040d4:	0030      	movs	r0, r6
 80040d6:	f000 f82b 	bl	8004130 <__swsetup_r>
 80040da:	2800      	cmp	r0, #0
 80040dc:	d003      	beq.n	80040e6 <__swbuf_r+0x3a>
 80040de:	2501      	movs	r5, #1
 80040e0:	426d      	negs	r5, r5
 80040e2:	0028      	movs	r0, r5
 80040e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	6820      	ldr	r0, [r4, #0]
 80040ea:	b2ef      	uxtb	r7, r5
 80040ec:	1ac0      	subs	r0, r0, r3
 80040ee:	6963      	ldr	r3, [r4, #20]
 80040f0:	b2ed      	uxtb	r5, r5
 80040f2:	4283      	cmp	r3, r0
 80040f4:	dc05      	bgt.n	8004102 <__swbuf_r+0x56>
 80040f6:	0021      	movs	r1, r4
 80040f8:	0030      	movs	r0, r6
 80040fa:	f001 f9d9 	bl	80054b0 <_fflush_r>
 80040fe:	2800      	cmp	r0, #0
 8004100:	d1ed      	bne.n	80040de <__swbuf_r+0x32>
 8004102:	68a3      	ldr	r3, [r4, #8]
 8004104:	3001      	adds	r0, #1
 8004106:	3b01      	subs	r3, #1
 8004108:	60a3      	str	r3, [r4, #8]
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	6022      	str	r2, [r4, #0]
 8004110:	701f      	strb	r7, [r3, #0]
 8004112:	6963      	ldr	r3, [r4, #20]
 8004114:	4283      	cmp	r3, r0
 8004116:	d004      	beq.n	8004122 <__swbuf_r+0x76>
 8004118:	89a3      	ldrh	r3, [r4, #12]
 800411a:	07db      	lsls	r3, r3, #31
 800411c:	d5e1      	bpl.n	80040e2 <__swbuf_r+0x36>
 800411e:	2d0a      	cmp	r5, #10
 8004120:	d1df      	bne.n	80040e2 <__swbuf_r+0x36>
 8004122:	0021      	movs	r1, r4
 8004124:	0030      	movs	r0, r6
 8004126:	f001 f9c3 	bl	80054b0 <_fflush_r>
 800412a:	2800      	cmp	r0, #0
 800412c:	d0d9      	beq.n	80040e2 <__swbuf_r+0x36>
 800412e:	e7d6      	b.n	80040de <__swbuf_r+0x32>

08004130 <__swsetup_r>:
 8004130:	4b2d      	ldr	r3, [pc, #180]	@ (80041e8 <__swsetup_r+0xb8>)
 8004132:	b570      	push	{r4, r5, r6, lr}
 8004134:	0005      	movs	r5, r0
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	000c      	movs	r4, r1
 800413a:	2800      	cmp	r0, #0
 800413c:	d004      	beq.n	8004148 <__swsetup_r+0x18>
 800413e:	6a03      	ldr	r3, [r0, #32]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <__swsetup_r+0x18>
 8004144:	f7ff fe64 	bl	8003e10 <__sinit>
 8004148:	230c      	movs	r3, #12
 800414a:	5ee2      	ldrsh	r2, [r4, r3]
 800414c:	0713      	lsls	r3, r2, #28
 800414e:	d423      	bmi.n	8004198 <__swsetup_r+0x68>
 8004150:	06d3      	lsls	r3, r2, #27
 8004152:	d407      	bmi.n	8004164 <__swsetup_r+0x34>
 8004154:	2309      	movs	r3, #9
 8004156:	602b      	str	r3, [r5, #0]
 8004158:	2340      	movs	r3, #64	@ 0x40
 800415a:	2001      	movs	r0, #1
 800415c:	4313      	orrs	r3, r2
 800415e:	81a3      	strh	r3, [r4, #12]
 8004160:	4240      	negs	r0, r0
 8004162:	e03a      	b.n	80041da <__swsetup_r+0xaa>
 8004164:	0752      	lsls	r2, r2, #29
 8004166:	d513      	bpl.n	8004190 <__swsetup_r+0x60>
 8004168:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800416a:	2900      	cmp	r1, #0
 800416c:	d008      	beq.n	8004180 <__swsetup_r+0x50>
 800416e:	0023      	movs	r3, r4
 8004170:	3344      	adds	r3, #68	@ 0x44
 8004172:	4299      	cmp	r1, r3
 8004174:	d002      	beq.n	800417c <__swsetup_r+0x4c>
 8004176:	0028      	movs	r0, r5
 8004178:	f000 f8da 	bl	8004330 <_free_r>
 800417c:	2300      	movs	r3, #0
 800417e:	6363      	str	r3, [r4, #52]	@ 0x34
 8004180:	2224      	movs	r2, #36	@ 0x24
 8004182:	89a3      	ldrh	r3, [r4, #12]
 8004184:	4393      	bics	r3, r2
 8004186:	81a3      	strh	r3, [r4, #12]
 8004188:	2300      	movs	r3, #0
 800418a:	6063      	str	r3, [r4, #4]
 800418c:	6923      	ldr	r3, [r4, #16]
 800418e:	6023      	str	r3, [r4, #0]
 8004190:	2308      	movs	r3, #8
 8004192:	89a2      	ldrh	r2, [r4, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d10b      	bne.n	80041b6 <__swsetup_r+0x86>
 800419e:	21a0      	movs	r1, #160	@ 0xa0
 80041a0:	2280      	movs	r2, #128	@ 0x80
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	0089      	lsls	r1, r1, #2
 80041a6:	0092      	lsls	r2, r2, #2
 80041a8:	400b      	ands	r3, r1
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <__swsetup_r+0x86>
 80041ae:	0021      	movs	r1, r4
 80041b0:	0028      	movs	r0, r5
 80041b2:	f001 f9d3 	bl	800555c <__smakebuf_r>
 80041b6:	230c      	movs	r3, #12
 80041b8:	5ee2      	ldrsh	r2, [r4, r3]
 80041ba:	2101      	movs	r1, #1
 80041bc:	0013      	movs	r3, r2
 80041be:	400b      	ands	r3, r1
 80041c0:	420a      	tst	r2, r1
 80041c2:	d00b      	beq.n	80041dc <__swsetup_r+0xac>
 80041c4:	2300      	movs	r3, #0
 80041c6:	60a3      	str	r3, [r4, #8]
 80041c8:	6963      	ldr	r3, [r4, #20]
 80041ca:	425b      	negs	r3, r3
 80041cc:	61a3      	str	r3, [r4, #24]
 80041ce:	2000      	movs	r0, #0
 80041d0:	6923      	ldr	r3, [r4, #16]
 80041d2:	4283      	cmp	r3, r0
 80041d4:	d101      	bne.n	80041da <__swsetup_r+0xaa>
 80041d6:	0613      	lsls	r3, r2, #24
 80041d8:	d4be      	bmi.n	8004158 <__swsetup_r+0x28>
 80041da:	bd70      	pop	{r4, r5, r6, pc}
 80041dc:	0791      	lsls	r1, r2, #30
 80041de:	d400      	bmi.n	80041e2 <__swsetup_r+0xb2>
 80041e0:	6963      	ldr	r3, [r4, #20]
 80041e2:	60a3      	str	r3, [r4, #8]
 80041e4:	e7f3      	b.n	80041ce <__swsetup_r+0x9e>
 80041e6:	46c0      	nop			@ (mov r8, r8)
 80041e8:	20000018 	.word	0x20000018

080041ec <memset>:
 80041ec:	0003      	movs	r3, r0
 80041ee:	1882      	adds	r2, r0, r2
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d100      	bne.n	80041f6 <memset+0xa>
 80041f4:	4770      	bx	lr
 80041f6:	7019      	strb	r1, [r3, #0]
 80041f8:	3301      	adds	r3, #1
 80041fa:	e7f9      	b.n	80041f0 <memset+0x4>

080041fc <strstr>:
 80041fc:	780a      	ldrb	r2, [r1, #0]
 80041fe:	b530      	push	{r4, r5, lr}
 8004200:	2a00      	cmp	r2, #0
 8004202:	d10c      	bne.n	800421e <strstr+0x22>
 8004204:	bd30      	pop	{r4, r5, pc}
 8004206:	429a      	cmp	r2, r3
 8004208:	d108      	bne.n	800421c <strstr+0x20>
 800420a:	2301      	movs	r3, #1
 800420c:	5ccc      	ldrb	r4, [r1, r3]
 800420e:	2c00      	cmp	r4, #0
 8004210:	d0f8      	beq.n	8004204 <strstr+0x8>
 8004212:	5cc5      	ldrb	r5, [r0, r3]
 8004214:	42a5      	cmp	r5, r4
 8004216:	d101      	bne.n	800421c <strstr+0x20>
 8004218:	3301      	adds	r3, #1
 800421a:	e7f7      	b.n	800420c <strstr+0x10>
 800421c:	3001      	adds	r0, #1
 800421e:	7803      	ldrb	r3, [r0, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d1f0      	bne.n	8004206 <strstr+0xa>
 8004224:	0018      	movs	r0, r3
 8004226:	e7ed      	b.n	8004204 <strstr+0x8>

08004228 <_close_r>:
 8004228:	2300      	movs	r3, #0
 800422a:	b570      	push	{r4, r5, r6, lr}
 800422c:	4d06      	ldr	r5, [pc, #24]	@ (8004248 <_close_r+0x20>)
 800422e:	0004      	movs	r4, r0
 8004230:	0008      	movs	r0, r1
 8004232:	602b      	str	r3, [r5, #0]
 8004234:	f7fc fdf7 	bl	8000e26 <_close>
 8004238:	1c43      	adds	r3, r0, #1
 800423a:	d103      	bne.n	8004244 <_close_r+0x1c>
 800423c:	682b      	ldr	r3, [r5, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d000      	beq.n	8004244 <_close_r+0x1c>
 8004242:	6023      	str	r3, [r4, #0]
 8004244:	bd70      	pop	{r4, r5, r6, pc}
 8004246:	46c0      	nop			@ (mov r8, r8)
 8004248:	20000384 	.word	0x20000384

0800424c <_lseek_r>:
 800424c:	b570      	push	{r4, r5, r6, lr}
 800424e:	0004      	movs	r4, r0
 8004250:	0008      	movs	r0, r1
 8004252:	0011      	movs	r1, r2
 8004254:	001a      	movs	r2, r3
 8004256:	2300      	movs	r3, #0
 8004258:	4d05      	ldr	r5, [pc, #20]	@ (8004270 <_lseek_r+0x24>)
 800425a:	602b      	str	r3, [r5, #0]
 800425c:	f7fc fe04 	bl	8000e68 <_lseek>
 8004260:	1c43      	adds	r3, r0, #1
 8004262:	d103      	bne.n	800426c <_lseek_r+0x20>
 8004264:	682b      	ldr	r3, [r5, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d000      	beq.n	800426c <_lseek_r+0x20>
 800426a:	6023      	str	r3, [r4, #0]
 800426c:	bd70      	pop	{r4, r5, r6, pc}
 800426e:	46c0      	nop			@ (mov r8, r8)
 8004270:	20000384 	.word	0x20000384

08004274 <_read_r>:
 8004274:	b570      	push	{r4, r5, r6, lr}
 8004276:	0004      	movs	r4, r0
 8004278:	0008      	movs	r0, r1
 800427a:	0011      	movs	r1, r2
 800427c:	001a      	movs	r2, r3
 800427e:	2300      	movs	r3, #0
 8004280:	4d05      	ldr	r5, [pc, #20]	@ (8004298 <_read_r+0x24>)
 8004282:	602b      	str	r3, [r5, #0]
 8004284:	f7fc fd96 	bl	8000db4 <_read>
 8004288:	1c43      	adds	r3, r0, #1
 800428a:	d103      	bne.n	8004294 <_read_r+0x20>
 800428c:	682b      	ldr	r3, [r5, #0]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d000      	beq.n	8004294 <_read_r+0x20>
 8004292:	6023      	str	r3, [r4, #0]
 8004294:	bd70      	pop	{r4, r5, r6, pc}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	20000384 	.word	0x20000384

0800429c <_write_r>:
 800429c:	b570      	push	{r4, r5, r6, lr}
 800429e:	0004      	movs	r4, r0
 80042a0:	0008      	movs	r0, r1
 80042a2:	0011      	movs	r1, r2
 80042a4:	001a      	movs	r2, r3
 80042a6:	2300      	movs	r3, #0
 80042a8:	4d05      	ldr	r5, [pc, #20]	@ (80042c0 <_write_r+0x24>)
 80042aa:	602b      	str	r3, [r5, #0]
 80042ac:	f7fc fd9f 	bl	8000dee <_write>
 80042b0:	1c43      	adds	r3, r0, #1
 80042b2:	d103      	bne.n	80042bc <_write_r+0x20>
 80042b4:	682b      	ldr	r3, [r5, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d000      	beq.n	80042bc <_write_r+0x20>
 80042ba:	6023      	str	r3, [r4, #0]
 80042bc:	bd70      	pop	{r4, r5, r6, pc}
 80042be:	46c0      	nop			@ (mov r8, r8)
 80042c0:	20000384 	.word	0x20000384

080042c4 <__errno>:
 80042c4:	4b01      	ldr	r3, [pc, #4]	@ (80042cc <__errno+0x8>)
 80042c6:	6818      	ldr	r0, [r3, #0]
 80042c8:	4770      	bx	lr
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	20000018 	.word	0x20000018

080042d0 <__libc_init_array>:
 80042d0:	b570      	push	{r4, r5, r6, lr}
 80042d2:	2600      	movs	r6, #0
 80042d4:	4c0c      	ldr	r4, [pc, #48]	@ (8004308 <__libc_init_array+0x38>)
 80042d6:	4d0d      	ldr	r5, [pc, #52]	@ (800430c <__libc_init_array+0x3c>)
 80042d8:	1b64      	subs	r4, r4, r5
 80042da:	10a4      	asrs	r4, r4, #2
 80042dc:	42a6      	cmp	r6, r4
 80042de:	d109      	bne.n	80042f4 <__libc_init_array+0x24>
 80042e0:	2600      	movs	r6, #0
 80042e2:	f001 fb93 	bl	8005a0c <_init>
 80042e6:	4c0a      	ldr	r4, [pc, #40]	@ (8004310 <__libc_init_array+0x40>)
 80042e8:	4d0a      	ldr	r5, [pc, #40]	@ (8004314 <__libc_init_array+0x44>)
 80042ea:	1b64      	subs	r4, r4, r5
 80042ec:	10a4      	asrs	r4, r4, #2
 80042ee:	42a6      	cmp	r6, r4
 80042f0:	d105      	bne.n	80042fe <__libc_init_array+0x2e>
 80042f2:	bd70      	pop	{r4, r5, r6, pc}
 80042f4:	00b3      	lsls	r3, r6, #2
 80042f6:	58eb      	ldr	r3, [r5, r3]
 80042f8:	4798      	blx	r3
 80042fa:	3601      	adds	r6, #1
 80042fc:	e7ee      	b.n	80042dc <__libc_init_array+0xc>
 80042fe:	00b3      	lsls	r3, r6, #2
 8004300:	58eb      	ldr	r3, [r5, r3]
 8004302:	4798      	blx	r3
 8004304:	3601      	adds	r6, #1
 8004306:	e7f2      	b.n	80042ee <__libc_init_array+0x1e>
 8004308:	08005ffc 	.word	0x08005ffc
 800430c:	08005ffc 	.word	0x08005ffc
 8004310:	08006000 	.word	0x08006000
 8004314:	08005ffc 	.word	0x08005ffc

08004318 <__retarget_lock_init_recursive>:
 8004318:	4770      	bx	lr

0800431a <__retarget_lock_acquire_recursive>:
 800431a:	4770      	bx	lr

0800431c <__retarget_lock_release_recursive>:
 800431c:	4770      	bx	lr

0800431e <memcpy>:
 800431e:	2300      	movs	r3, #0
 8004320:	b510      	push	{r4, lr}
 8004322:	429a      	cmp	r2, r3
 8004324:	d100      	bne.n	8004328 <memcpy+0xa>
 8004326:	bd10      	pop	{r4, pc}
 8004328:	5ccc      	ldrb	r4, [r1, r3]
 800432a:	54c4      	strb	r4, [r0, r3]
 800432c:	3301      	adds	r3, #1
 800432e:	e7f8      	b.n	8004322 <memcpy+0x4>

08004330 <_free_r>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	0005      	movs	r5, r0
 8004334:	1e0c      	subs	r4, r1, #0
 8004336:	d010      	beq.n	800435a <_free_r+0x2a>
 8004338:	3c04      	subs	r4, #4
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	da00      	bge.n	8004342 <_free_r+0x12>
 8004340:	18e4      	adds	r4, r4, r3
 8004342:	0028      	movs	r0, r5
 8004344:	f000 f8e0 	bl	8004508 <__malloc_lock>
 8004348:	4a1d      	ldr	r2, [pc, #116]	@ (80043c0 <_free_r+0x90>)
 800434a:	6813      	ldr	r3, [r2, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d105      	bne.n	800435c <_free_r+0x2c>
 8004350:	6063      	str	r3, [r4, #4]
 8004352:	6014      	str	r4, [r2, #0]
 8004354:	0028      	movs	r0, r5
 8004356:	f000 f8df 	bl	8004518 <__malloc_unlock>
 800435a:	bd70      	pop	{r4, r5, r6, pc}
 800435c:	42a3      	cmp	r3, r4
 800435e:	d908      	bls.n	8004372 <_free_r+0x42>
 8004360:	6820      	ldr	r0, [r4, #0]
 8004362:	1821      	adds	r1, r4, r0
 8004364:	428b      	cmp	r3, r1
 8004366:	d1f3      	bne.n	8004350 <_free_r+0x20>
 8004368:	6819      	ldr	r1, [r3, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	1809      	adds	r1, r1, r0
 800436e:	6021      	str	r1, [r4, #0]
 8004370:	e7ee      	b.n	8004350 <_free_r+0x20>
 8004372:	001a      	movs	r2, r3
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <_free_r+0x4e>
 800437a:	42a3      	cmp	r3, r4
 800437c:	d9f9      	bls.n	8004372 <_free_r+0x42>
 800437e:	6811      	ldr	r1, [r2, #0]
 8004380:	1850      	adds	r0, r2, r1
 8004382:	42a0      	cmp	r0, r4
 8004384:	d10b      	bne.n	800439e <_free_r+0x6e>
 8004386:	6820      	ldr	r0, [r4, #0]
 8004388:	1809      	adds	r1, r1, r0
 800438a:	1850      	adds	r0, r2, r1
 800438c:	6011      	str	r1, [r2, #0]
 800438e:	4283      	cmp	r3, r0
 8004390:	d1e0      	bne.n	8004354 <_free_r+0x24>
 8004392:	6818      	ldr	r0, [r3, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	1841      	adds	r1, r0, r1
 8004398:	6011      	str	r1, [r2, #0]
 800439a:	6053      	str	r3, [r2, #4]
 800439c:	e7da      	b.n	8004354 <_free_r+0x24>
 800439e:	42a0      	cmp	r0, r4
 80043a0:	d902      	bls.n	80043a8 <_free_r+0x78>
 80043a2:	230c      	movs	r3, #12
 80043a4:	602b      	str	r3, [r5, #0]
 80043a6:	e7d5      	b.n	8004354 <_free_r+0x24>
 80043a8:	6820      	ldr	r0, [r4, #0]
 80043aa:	1821      	adds	r1, r4, r0
 80043ac:	428b      	cmp	r3, r1
 80043ae:	d103      	bne.n	80043b8 <_free_r+0x88>
 80043b0:	6819      	ldr	r1, [r3, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	1809      	adds	r1, r1, r0
 80043b6:	6021      	str	r1, [r4, #0]
 80043b8:	6063      	str	r3, [r4, #4]
 80043ba:	6054      	str	r4, [r2, #4]
 80043bc:	e7ca      	b.n	8004354 <_free_r+0x24>
 80043be:	46c0      	nop			@ (mov r8, r8)
 80043c0:	20000390 	.word	0x20000390

080043c4 <sbrk_aligned>:
 80043c4:	b570      	push	{r4, r5, r6, lr}
 80043c6:	4e0f      	ldr	r6, [pc, #60]	@ (8004404 <sbrk_aligned+0x40>)
 80043c8:	000d      	movs	r5, r1
 80043ca:	6831      	ldr	r1, [r6, #0]
 80043cc:	0004      	movs	r4, r0
 80043ce:	2900      	cmp	r1, #0
 80043d0:	d102      	bne.n	80043d8 <sbrk_aligned+0x14>
 80043d2:	f001 f9b3 	bl	800573c <_sbrk_r>
 80043d6:	6030      	str	r0, [r6, #0]
 80043d8:	0029      	movs	r1, r5
 80043da:	0020      	movs	r0, r4
 80043dc:	f001 f9ae 	bl	800573c <_sbrk_r>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d103      	bne.n	80043ec <sbrk_aligned+0x28>
 80043e4:	2501      	movs	r5, #1
 80043e6:	426d      	negs	r5, r5
 80043e8:	0028      	movs	r0, r5
 80043ea:	bd70      	pop	{r4, r5, r6, pc}
 80043ec:	2303      	movs	r3, #3
 80043ee:	1cc5      	adds	r5, r0, #3
 80043f0:	439d      	bics	r5, r3
 80043f2:	42a8      	cmp	r0, r5
 80043f4:	d0f8      	beq.n	80043e8 <sbrk_aligned+0x24>
 80043f6:	1a29      	subs	r1, r5, r0
 80043f8:	0020      	movs	r0, r4
 80043fa:	f001 f99f 	bl	800573c <_sbrk_r>
 80043fe:	3001      	adds	r0, #1
 8004400:	d1f2      	bne.n	80043e8 <sbrk_aligned+0x24>
 8004402:	e7ef      	b.n	80043e4 <sbrk_aligned+0x20>
 8004404:	2000038c 	.word	0x2000038c

08004408 <_malloc_r>:
 8004408:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800440a:	2203      	movs	r2, #3
 800440c:	1ccb      	adds	r3, r1, #3
 800440e:	4393      	bics	r3, r2
 8004410:	3308      	adds	r3, #8
 8004412:	0005      	movs	r5, r0
 8004414:	001f      	movs	r7, r3
 8004416:	2b0c      	cmp	r3, #12
 8004418:	d234      	bcs.n	8004484 <_malloc_r+0x7c>
 800441a:	270c      	movs	r7, #12
 800441c:	42b9      	cmp	r1, r7
 800441e:	d833      	bhi.n	8004488 <_malloc_r+0x80>
 8004420:	0028      	movs	r0, r5
 8004422:	f000 f871 	bl	8004508 <__malloc_lock>
 8004426:	4e37      	ldr	r6, [pc, #220]	@ (8004504 <_malloc_r+0xfc>)
 8004428:	6833      	ldr	r3, [r6, #0]
 800442a:	001c      	movs	r4, r3
 800442c:	2c00      	cmp	r4, #0
 800442e:	d12f      	bne.n	8004490 <_malloc_r+0x88>
 8004430:	0039      	movs	r1, r7
 8004432:	0028      	movs	r0, r5
 8004434:	f7ff ffc6 	bl	80043c4 <sbrk_aligned>
 8004438:	0004      	movs	r4, r0
 800443a:	1c43      	adds	r3, r0, #1
 800443c:	d15f      	bne.n	80044fe <_malloc_r+0xf6>
 800443e:	6834      	ldr	r4, [r6, #0]
 8004440:	9400      	str	r4, [sp, #0]
 8004442:	9b00      	ldr	r3, [sp, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d14a      	bne.n	80044de <_malloc_r+0xd6>
 8004448:	2c00      	cmp	r4, #0
 800444a:	d052      	beq.n	80044f2 <_malloc_r+0xea>
 800444c:	6823      	ldr	r3, [r4, #0]
 800444e:	0028      	movs	r0, r5
 8004450:	18e3      	adds	r3, r4, r3
 8004452:	9900      	ldr	r1, [sp, #0]
 8004454:	9301      	str	r3, [sp, #4]
 8004456:	f001 f971 	bl	800573c <_sbrk_r>
 800445a:	9b01      	ldr	r3, [sp, #4]
 800445c:	4283      	cmp	r3, r0
 800445e:	d148      	bne.n	80044f2 <_malloc_r+0xea>
 8004460:	6823      	ldr	r3, [r4, #0]
 8004462:	0028      	movs	r0, r5
 8004464:	1aff      	subs	r7, r7, r3
 8004466:	0039      	movs	r1, r7
 8004468:	f7ff ffac 	bl	80043c4 <sbrk_aligned>
 800446c:	3001      	adds	r0, #1
 800446e:	d040      	beq.n	80044f2 <_malloc_r+0xea>
 8004470:	6823      	ldr	r3, [r4, #0]
 8004472:	19db      	adds	r3, r3, r7
 8004474:	6023      	str	r3, [r4, #0]
 8004476:	6833      	ldr	r3, [r6, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	2a00      	cmp	r2, #0
 800447c:	d133      	bne.n	80044e6 <_malloc_r+0xde>
 800447e:	9b00      	ldr	r3, [sp, #0]
 8004480:	6033      	str	r3, [r6, #0]
 8004482:	e019      	b.n	80044b8 <_malloc_r+0xb0>
 8004484:	2b00      	cmp	r3, #0
 8004486:	dac9      	bge.n	800441c <_malloc_r+0x14>
 8004488:	230c      	movs	r3, #12
 800448a:	602b      	str	r3, [r5, #0]
 800448c:	2000      	movs	r0, #0
 800448e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004490:	6821      	ldr	r1, [r4, #0]
 8004492:	1bc9      	subs	r1, r1, r7
 8004494:	d420      	bmi.n	80044d8 <_malloc_r+0xd0>
 8004496:	290b      	cmp	r1, #11
 8004498:	d90a      	bls.n	80044b0 <_malloc_r+0xa8>
 800449a:	19e2      	adds	r2, r4, r7
 800449c:	6027      	str	r7, [r4, #0]
 800449e:	42a3      	cmp	r3, r4
 80044a0:	d104      	bne.n	80044ac <_malloc_r+0xa4>
 80044a2:	6032      	str	r2, [r6, #0]
 80044a4:	6863      	ldr	r3, [r4, #4]
 80044a6:	6011      	str	r1, [r2, #0]
 80044a8:	6053      	str	r3, [r2, #4]
 80044aa:	e005      	b.n	80044b8 <_malloc_r+0xb0>
 80044ac:	605a      	str	r2, [r3, #4]
 80044ae:	e7f9      	b.n	80044a4 <_malloc_r+0x9c>
 80044b0:	6862      	ldr	r2, [r4, #4]
 80044b2:	42a3      	cmp	r3, r4
 80044b4:	d10e      	bne.n	80044d4 <_malloc_r+0xcc>
 80044b6:	6032      	str	r2, [r6, #0]
 80044b8:	0028      	movs	r0, r5
 80044ba:	f000 f82d 	bl	8004518 <__malloc_unlock>
 80044be:	0020      	movs	r0, r4
 80044c0:	2207      	movs	r2, #7
 80044c2:	300b      	adds	r0, #11
 80044c4:	1d23      	adds	r3, r4, #4
 80044c6:	4390      	bics	r0, r2
 80044c8:	1ac2      	subs	r2, r0, r3
 80044ca:	4298      	cmp	r0, r3
 80044cc:	d0df      	beq.n	800448e <_malloc_r+0x86>
 80044ce:	1a1b      	subs	r3, r3, r0
 80044d0:	50a3      	str	r3, [r4, r2]
 80044d2:	e7dc      	b.n	800448e <_malloc_r+0x86>
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	e7ef      	b.n	80044b8 <_malloc_r+0xb0>
 80044d8:	0023      	movs	r3, r4
 80044da:	6864      	ldr	r4, [r4, #4]
 80044dc:	e7a6      	b.n	800442c <_malloc_r+0x24>
 80044de:	9c00      	ldr	r4, [sp, #0]
 80044e0:	6863      	ldr	r3, [r4, #4]
 80044e2:	9300      	str	r3, [sp, #0]
 80044e4:	e7ad      	b.n	8004442 <_malloc_r+0x3a>
 80044e6:	001a      	movs	r2, r3
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	42a3      	cmp	r3, r4
 80044ec:	d1fb      	bne.n	80044e6 <_malloc_r+0xde>
 80044ee:	2300      	movs	r3, #0
 80044f0:	e7da      	b.n	80044a8 <_malloc_r+0xa0>
 80044f2:	230c      	movs	r3, #12
 80044f4:	0028      	movs	r0, r5
 80044f6:	602b      	str	r3, [r5, #0]
 80044f8:	f000 f80e 	bl	8004518 <__malloc_unlock>
 80044fc:	e7c6      	b.n	800448c <_malloc_r+0x84>
 80044fe:	6007      	str	r7, [r0, #0]
 8004500:	e7da      	b.n	80044b8 <_malloc_r+0xb0>
 8004502:	46c0      	nop			@ (mov r8, r8)
 8004504:	20000390 	.word	0x20000390

08004508 <__malloc_lock>:
 8004508:	b510      	push	{r4, lr}
 800450a:	4802      	ldr	r0, [pc, #8]	@ (8004514 <__malloc_lock+0xc>)
 800450c:	f7ff ff05 	bl	800431a <__retarget_lock_acquire_recursive>
 8004510:	bd10      	pop	{r4, pc}
 8004512:	46c0      	nop			@ (mov r8, r8)
 8004514:	20000388 	.word	0x20000388

08004518 <__malloc_unlock>:
 8004518:	b510      	push	{r4, lr}
 800451a:	4802      	ldr	r0, [pc, #8]	@ (8004524 <__malloc_unlock+0xc>)
 800451c:	f7ff fefe 	bl	800431c <__retarget_lock_release_recursive>
 8004520:	bd10      	pop	{r4, pc}
 8004522:	46c0      	nop			@ (mov r8, r8)
 8004524:	20000388 	.word	0x20000388

08004528 <__ssputs_r>:
 8004528:	b5f0      	push	{r4, r5, r6, r7, lr}
 800452a:	688e      	ldr	r6, [r1, #8]
 800452c:	b085      	sub	sp, #20
 800452e:	001f      	movs	r7, r3
 8004530:	000c      	movs	r4, r1
 8004532:	680b      	ldr	r3, [r1, #0]
 8004534:	9002      	str	r0, [sp, #8]
 8004536:	9203      	str	r2, [sp, #12]
 8004538:	42be      	cmp	r6, r7
 800453a:	d830      	bhi.n	800459e <__ssputs_r+0x76>
 800453c:	210c      	movs	r1, #12
 800453e:	5e62      	ldrsh	r2, [r4, r1]
 8004540:	2190      	movs	r1, #144	@ 0x90
 8004542:	00c9      	lsls	r1, r1, #3
 8004544:	420a      	tst	r2, r1
 8004546:	d028      	beq.n	800459a <__ssputs_r+0x72>
 8004548:	2003      	movs	r0, #3
 800454a:	6921      	ldr	r1, [r4, #16]
 800454c:	1a5b      	subs	r3, r3, r1
 800454e:	9301      	str	r3, [sp, #4]
 8004550:	6963      	ldr	r3, [r4, #20]
 8004552:	4343      	muls	r3, r0
 8004554:	9801      	ldr	r0, [sp, #4]
 8004556:	0fdd      	lsrs	r5, r3, #31
 8004558:	18ed      	adds	r5, r5, r3
 800455a:	1c7b      	adds	r3, r7, #1
 800455c:	181b      	adds	r3, r3, r0
 800455e:	106d      	asrs	r5, r5, #1
 8004560:	42ab      	cmp	r3, r5
 8004562:	d900      	bls.n	8004566 <__ssputs_r+0x3e>
 8004564:	001d      	movs	r5, r3
 8004566:	0552      	lsls	r2, r2, #21
 8004568:	d528      	bpl.n	80045bc <__ssputs_r+0x94>
 800456a:	0029      	movs	r1, r5
 800456c:	9802      	ldr	r0, [sp, #8]
 800456e:	f7ff ff4b 	bl	8004408 <_malloc_r>
 8004572:	1e06      	subs	r6, r0, #0
 8004574:	d02c      	beq.n	80045d0 <__ssputs_r+0xa8>
 8004576:	9a01      	ldr	r2, [sp, #4]
 8004578:	6921      	ldr	r1, [r4, #16]
 800457a:	f7ff fed0 	bl	800431e <memcpy>
 800457e:	89a2      	ldrh	r2, [r4, #12]
 8004580:	4b18      	ldr	r3, [pc, #96]	@ (80045e4 <__ssputs_r+0xbc>)
 8004582:	401a      	ands	r2, r3
 8004584:	2380      	movs	r3, #128	@ 0x80
 8004586:	4313      	orrs	r3, r2
 8004588:	81a3      	strh	r3, [r4, #12]
 800458a:	9b01      	ldr	r3, [sp, #4]
 800458c:	6126      	str	r6, [r4, #16]
 800458e:	18f6      	adds	r6, r6, r3
 8004590:	6026      	str	r6, [r4, #0]
 8004592:	003e      	movs	r6, r7
 8004594:	6165      	str	r5, [r4, #20]
 8004596:	1aed      	subs	r5, r5, r3
 8004598:	60a5      	str	r5, [r4, #8]
 800459a:	42be      	cmp	r6, r7
 800459c:	d900      	bls.n	80045a0 <__ssputs_r+0x78>
 800459e:	003e      	movs	r6, r7
 80045a0:	0032      	movs	r2, r6
 80045a2:	9903      	ldr	r1, [sp, #12]
 80045a4:	6820      	ldr	r0, [r4, #0]
 80045a6:	f001 f891 	bl	80056cc <memmove>
 80045aa:	2000      	movs	r0, #0
 80045ac:	68a3      	ldr	r3, [r4, #8]
 80045ae:	1b9b      	subs	r3, r3, r6
 80045b0:	60a3      	str	r3, [r4, #8]
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	199b      	adds	r3, r3, r6
 80045b6:	6023      	str	r3, [r4, #0]
 80045b8:	b005      	add	sp, #20
 80045ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045bc:	002a      	movs	r2, r5
 80045be:	9802      	ldr	r0, [sp, #8]
 80045c0:	f001 f8d9 	bl	8005776 <_realloc_r>
 80045c4:	1e06      	subs	r6, r0, #0
 80045c6:	d1e0      	bne.n	800458a <__ssputs_r+0x62>
 80045c8:	6921      	ldr	r1, [r4, #16]
 80045ca:	9802      	ldr	r0, [sp, #8]
 80045cc:	f7ff feb0 	bl	8004330 <_free_r>
 80045d0:	230c      	movs	r3, #12
 80045d2:	2001      	movs	r0, #1
 80045d4:	9a02      	ldr	r2, [sp, #8]
 80045d6:	4240      	negs	r0, r0
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	89a2      	ldrh	r2, [r4, #12]
 80045dc:	3334      	adds	r3, #52	@ 0x34
 80045de:	4313      	orrs	r3, r2
 80045e0:	81a3      	strh	r3, [r4, #12]
 80045e2:	e7e9      	b.n	80045b8 <__ssputs_r+0x90>
 80045e4:	fffffb7f 	.word	0xfffffb7f

080045e8 <_svfiprintf_r>:
 80045e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ea:	b0a1      	sub	sp, #132	@ 0x84
 80045ec:	9003      	str	r0, [sp, #12]
 80045ee:	001d      	movs	r5, r3
 80045f0:	898b      	ldrh	r3, [r1, #12]
 80045f2:	000f      	movs	r7, r1
 80045f4:	0016      	movs	r6, r2
 80045f6:	061b      	lsls	r3, r3, #24
 80045f8:	d511      	bpl.n	800461e <_svfiprintf_r+0x36>
 80045fa:	690b      	ldr	r3, [r1, #16]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10e      	bne.n	800461e <_svfiprintf_r+0x36>
 8004600:	2140      	movs	r1, #64	@ 0x40
 8004602:	f7ff ff01 	bl	8004408 <_malloc_r>
 8004606:	6038      	str	r0, [r7, #0]
 8004608:	6138      	str	r0, [r7, #16]
 800460a:	2800      	cmp	r0, #0
 800460c:	d105      	bne.n	800461a <_svfiprintf_r+0x32>
 800460e:	230c      	movs	r3, #12
 8004610:	9a03      	ldr	r2, [sp, #12]
 8004612:	6013      	str	r3, [r2, #0]
 8004614:	2001      	movs	r0, #1
 8004616:	4240      	negs	r0, r0
 8004618:	e0cf      	b.n	80047ba <_svfiprintf_r+0x1d2>
 800461a:	2340      	movs	r3, #64	@ 0x40
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	2300      	movs	r3, #0
 8004620:	ac08      	add	r4, sp, #32
 8004622:	6163      	str	r3, [r4, #20]
 8004624:	3320      	adds	r3, #32
 8004626:	7663      	strb	r3, [r4, #25]
 8004628:	3310      	adds	r3, #16
 800462a:	76a3      	strb	r3, [r4, #26]
 800462c:	9507      	str	r5, [sp, #28]
 800462e:	0035      	movs	r5, r6
 8004630:	782b      	ldrb	r3, [r5, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <_svfiprintf_r+0x52>
 8004636:	2b25      	cmp	r3, #37	@ 0x25
 8004638:	d148      	bne.n	80046cc <_svfiprintf_r+0xe4>
 800463a:	1bab      	subs	r3, r5, r6
 800463c:	9305      	str	r3, [sp, #20]
 800463e:	42b5      	cmp	r5, r6
 8004640:	d00b      	beq.n	800465a <_svfiprintf_r+0x72>
 8004642:	0032      	movs	r2, r6
 8004644:	0039      	movs	r1, r7
 8004646:	9803      	ldr	r0, [sp, #12]
 8004648:	f7ff ff6e 	bl	8004528 <__ssputs_r>
 800464c:	3001      	adds	r0, #1
 800464e:	d100      	bne.n	8004652 <_svfiprintf_r+0x6a>
 8004650:	e0ae      	b.n	80047b0 <_svfiprintf_r+0x1c8>
 8004652:	6963      	ldr	r3, [r4, #20]
 8004654:	9a05      	ldr	r2, [sp, #20]
 8004656:	189b      	adds	r3, r3, r2
 8004658:	6163      	str	r3, [r4, #20]
 800465a:	782b      	ldrb	r3, [r5, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d100      	bne.n	8004662 <_svfiprintf_r+0x7a>
 8004660:	e0a6      	b.n	80047b0 <_svfiprintf_r+0x1c8>
 8004662:	2201      	movs	r2, #1
 8004664:	2300      	movs	r3, #0
 8004666:	4252      	negs	r2, r2
 8004668:	6062      	str	r2, [r4, #4]
 800466a:	a904      	add	r1, sp, #16
 800466c:	3254      	adds	r2, #84	@ 0x54
 800466e:	1852      	adds	r2, r2, r1
 8004670:	1c6e      	adds	r6, r5, #1
 8004672:	6023      	str	r3, [r4, #0]
 8004674:	60e3      	str	r3, [r4, #12]
 8004676:	60a3      	str	r3, [r4, #8]
 8004678:	7013      	strb	r3, [r2, #0]
 800467a:	65a3      	str	r3, [r4, #88]	@ 0x58
 800467c:	4b54      	ldr	r3, [pc, #336]	@ (80047d0 <_svfiprintf_r+0x1e8>)
 800467e:	2205      	movs	r2, #5
 8004680:	0018      	movs	r0, r3
 8004682:	7831      	ldrb	r1, [r6, #0]
 8004684:	9305      	str	r3, [sp, #20]
 8004686:	f001 f86b 	bl	8005760 <memchr>
 800468a:	1c75      	adds	r5, r6, #1
 800468c:	2800      	cmp	r0, #0
 800468e:	d11f      	bne.n	80046d0 <_svfiprintf_r+0xe8>
 8004690:	6822      	ldr	r2, [r4, #0]
 8004692:	06d3      	lsls	r3, r2, #27
 8004694:	d504      	bpl.n	80046a0 <_svfiprintf_r+0xb8>
 8004696:	2353      	movs	r3, #83	@ 0x53
 8004698:	a904      	add	r1, sp, #16
 800469a:	185b      	adds	r3, r3, r1
 800469c:	2120      	movs	r1, #32
 800469e:	7019      	strb	r1, [r3, #0]
 80046a0:	0713      	lsls	r3, r2, #28
 80046a2:	d504      	bpl.n	80046ae <_svfiprintf_r+0xc6>
 80046a4:	2353      	movs	r3, #83	@ 0x53
 80046a6:	a904      	add	r1, sp, #16
 80046a8:	185b      	adds	r3, r3, r1
 80046aa:	212b      	movs	r1, #43	@ 0x2b
 80046ac:	7019      	strb	r1, [r3, #0]
 80046ae:	7833      	ldrb	r3, [r6, #0]
 80046b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b2:	d016      	beq.n	80046e2 <_svfiprintf_r+0xfa>
 80046b4:	0035      	movs	r5, r6
 80046b6:	2100      	movs	r1, #0
 80046b8:	200a      	movs	r0, #10
 80046ba:	68e3      	ldr	r3, [r4, #12]
 80046bc:	782a      	ldrb	r2, [r5, #0]
 80046be:	1c6e      	adds	r6, r5, #1
 80046c0:	3a30      	subs	r2, #48	@ 0x30
 80046c2:	2a09      	cmp	r2, #9
 80046c4:	d950      	bls.n	8004768 <_svfiprintf_r+0x180>
 80046c6:	2900      	cmp	r1, #0
 80046c8:	d111      	bne.n	80046ee <_svfiprintf_r+0x106>
 80046ca:	e017      	b.n	80046fc <_svfiprintf_r+0x114>
 80046cc:	3501      	adds	r5, #1
 80046ce:	e7af      	b.n	8004630 <_svfiprintf_r+0x48>
 80046d0:	9b05      	ldr	r3, [sp, #20]
 80046d2:	6822      	ldr	r2, [r4, #0]
 80046d4:	1ac0      	subs	r0, r0, r3
 80046d6:	2301      	movs	r3, #1
 80046d8:	4083      	lsls	r3, r0
 80046da:	4313      	orrs	r3, r2
 80046dc:	002e      	movs	r6, r5
 80046de:	6023      	str	r3, [r4, #0]
 80046e0:	e7cc      	b.n	800467c <_svfiprintf_r+0x94>
 80046e2:	9b07      	ldr	r3, [sp, #28]
 80046e4:	1d19      	adds	r1, r3, #4
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	9107      	str	r1, [sp, #28]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	db01      	blt.n	80046f2 <_svfiprintf_r+0x10a>
 80046ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80046f0:	e004      	b.n	80046fc <_svfiprintf_r+0x114>
 80046f2:	425b      	negs	r3, r3
 80046f4:	60e3      	str	r3, [r4, #12]
 80046f6:	2302      	movs	r3, #2
 80046f8:	4313      	orrs	r3, r2
 80046fa:	6023      	str	r3, [r4, #0]
 80046fc:	782b      	ldrb	r3, [r5, #0]
 80046fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004700:	d10c      	bne.n	800471c <_svfiprintf_r+0x134>
 8004702:	786b      	ldrb	r3, [r5, #1]
 8004704:	2b2a      	cmp	r3, #42	@ 0x2a
 8004706:	d134      	bne.n	8004772 <_svfiprintf_r+0x18a>
 8004708:	9b07      	ldr	r3, [sp, #28]
 800470a:	3502      	adds	r5, #2
 800470c:	1d1a      	adds	r2, r3, #4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	9207      	str	r2, [sp, #28]
 8004712:	2b00      	cmp	r3, #0
 8004714:	da01      	bge.n	800471a <_svfiprintf_r+0x132>
 8004716:	2301      	movs	r3, #1
 8004718:	425b      	negs	r3, r3
 800471a:	9309      	str	r3, [sp, #36]	@ 0x24
 800471c:	4e2d      	ldr	r6, [pc, #180]	@ (80047d4 <_svfiprintf_r+0x1ec>)
 800471e:	2203      	movs	r2, #3
 8004720:	0030      	movs	r0, r6
 8004722:	7829      	ldrb	r1, [r5, #0]
 8004724:	f001 f81c 	bl	8005760 <memchr>
 8004728:	2800      	cmp	r0, #0
 800472a:	d006      	beq.n	800473a <_svfiprintf_r+0x152>
 800472c:	2340      	movs	r3, #64	@ 0x40
 800472e:	1b80      	subs	r0, r0, r6
 8004730:	4083      	lsls	r3, r0
 8004732:	6822      	ldr	r2, [r4, #0]
 8004734:	3501      	adds	r5, #1
 8004736:	4313      	orrs	r3, r2
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	7829      	ldrb	r1, [r5, #0]
 800473c:	2206      	movs	r2, #6
 800473e:	4826      	ldr	r0, [pc, #152]	@ (80047d8 <_svfiprintf_r+0x1f0>)
 8004740:	1c6e      	adds	r6, r5, #1
 8004742:	7621      	strb	r1, [r4, #24]
 8004744:	f001 f80c 	bl	8005760 <memchr>
 8004748:	2800      	cmp	r0, #0
 800474a:	d038      	beq.n	80047be <_svfiprintf_r+0x1d6>
 800474c:	4b23      	ldr	r3, [pc, #140]	@ (80047dc <_svfiprintf_r+0x1f4>)
 800474e:	2b00      	cmp	r3, #0
 8004750:	d122      	bne.n	8004798 <_svfiprintf_r+0x1b0>
 8004752:	2207      	movs	r2, #7
 8004754:	9b07      	ldr	r3, [sp, #28]
 8004756:	3307      	adds	r3, #7
 8004758:	4393      	bics	r3, r2
 800475a:	3308      	adds	r3, #8
 800475c:	9307      	str	r3, [sp, #28]
 800475e:	6963      	ldr	r3, [r4, #20]
 8004760:	9a04      	ldr	r2, [sp, #16]
 8004762:	189b      	adds	r3, r3, r2
 8004764:	6163      	str	r3, [r4, #20]
 8004766:	e762      	b.n	800462e <_svfiprintf_r+0x46>
 8004768:	4343      	muls	r3, r0
 800476a:	0035      	movs	r5, r6
 800476c:	2101      	movs	r1, #1
 800476e:	189b      	adds	r3, r3, r2
 8004770:	e7a4      	b.n	80046bc <_svfiprintf_r+0xd4>
 8004772:	2300      	movs	r3, #0
 8004774:	200a      	movs	r0, #10
 8004776:	0019      	movs	r1, r3
 8004778:	3501      	adds	r5, #1
 800477a:	6063      	str	r3, [r4, #4]
 800477c:	782a      	ldrb	r2, [r5, #0]
 800477e:	1c6e      	adds	r6, r5, #1
 8004780:	3a30      	subs	r2, #48	@ 0x30
 8004782:	2a09      	cmp	r2, #9
 8004784:	d903      	bls.n	800478e <_svfiprintf_r+0x1a6>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d0c8      	beq.n	800471c <_svfiprintf_r+0x134>
 800478a:	9109      	str	r1, [sp, #36]	@ 0x24
 800478c:	e7c6      	b.n	800471c <_svfiprintf_r+0x134>
 800478e:	4341      	muls	r1, r0
 8004790:	0035      	movs	r5, r6
 8004792:	2301      	movs	r3, #1
 8004794:	1889      	adds	r1, r1, r2
 8004796:	e7f1      	b.n	800477c <_svfiprintf_r+0x194>
 8004798:	aa07      	add	r2, sp, #28
 800479a:	9200      	str	r2, [sp, #0]
 800479c:	0021      	movs	r1, r4
 800479e:	003a      	movs	r2, r7
 80047a0:	4b0f      	ldr	r3, [pc, #60]	@ (80047e0 <_svfiprintf_r+0x1f8>)
 80047a2:	9803      	ldr	r0, [sp, #12]
 80047a4:	e000      	b.n	80047a8 <_svfiprintf_r+0x1c0>
 80047a6:	bf00      	nop
 80047a8:	9004      	str	r0, [sp, #16]
 80047aa:	9b04      	ldr	r3, [sp, #16]
 80047ac:	3301      	adds	r3, #1
 80047ae:	d1d6      	bne.n	800475e <_svfiprintf_r+0x176>
 80047b0:	89bb      	ldrh	r3, [r7, #12]
 80047b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80047b4:	065b      	lsls	r3, r3, #25
 80047b6:	d500      	bpl.n	80047ba <_svfiprintf_r+0x1d2>
 80047b8:	e72c      	b.n	8004614 <_svfiprintf_r+0x2c>
 80047ba:	b021      	add	sp, #132	@ 0x84
 80047bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047be:	aa07      	add	r2, sp, #28
 80047c0:	9200      	str	r2, [sp, #0]
 80047c2:	0021      	movs	r1, r4
 80047c4:	003a      	movs	r2, r7
 80047c6:	4b06      	ldr	r3, [pc, #24]	@ (80047e0 <_svfiprintf_r+0x1f8>)
 80047c8:	9803      	ldr	r0, [sp, #12]
 80047ca:	f000 fb7d 	bl	8004ec8 <_printf_i>
 80047ce:	e7eb      	b.n	80047a8 <_svfiprintf_r+0x1c0>
 80047d0:	08005eac 	.word	0x08005eac
 80047d4:	08005eb2 	.word	0x08005eb2
 80047d8:	08005eb6 	.word	0x08005eb6
 80047dc:	00000000 	.word	0x00000000
 80047e0:	08004529 	.word	0x08004529

080047e4 <_sungetc_r>:
 80047e4:	b570      	push	{r4, r5, r6, lr}
 80047e6:	0014      	movs	r4, r2
 80047e8:	1c4b      	adds	r3, r1, #1
 80047ea:	d103      	bne.n	80047f4 <_sungetc_r+0x10>
 80047ec:	2501      	movs	r5, #1
 80047ee:	426d      	negs	r5, r5
 80047f0:	0028      	movs	r0, r5
 80047f2:	bd70      	pop	{r4, r5, r6, pc}
 80047f4:	8993      	ldrh	r3, [r2, #12]
 80047f6:	2220      	movs	r2, #32
 80047f8:	4393      	bics	r3, r2
 80047fa:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80047fc:	81a3      	strh	r3, [r4, #12]
 80047fe:	b2ce      	uxtb	r6, r1
 8004800:	6863      	ldr	r3, [r4, #4]
 8004802:	b2cd      	uxtb	r5, r1
 8004804:	2a00      	cmp	r2, #0
 8004806:	d010      	beq.n	800482a <_sungetc_r+0x46>
 8004808:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800480a:	429a      	cmp	r2, r3
 800480c:	dd07      	ble.n	800481e <_sungetc_r+0x3a>
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	3b01      	subs	r3, #1
 8004812:	6023      	str	r3, [r4, #0]
 8004814:	701e      	strb	r6, [r3, #0]
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	3301      	adds	r3, #1
 800481a:	6063      	str	r3, [r4, #4]
 800481c:	e7e8      	b.n	80047f0 <_sungetc_r+0xc>
 800481e:	0021      	movs	r1, r4
 8004820:	f000 ff16 	bl	8005650 <__submore>
 8004824:	2800      	cmp	r0, #0
 8004826:	d0f2      	beq.n	800480e <_sungetc_r+0x2a>
 8004828:	e7e0      	b.n	80047ec <_sungetc_r+0x8>
 800482a:	6921      	ldr	r1, [r4, #16]
 800482c:	6822      	ldr	r2, [r4, #0]
 800482e:	2900      	cmp	r1, #0
 8004830:	d007      	beq.n	8004842 <_sungetc_r+0x5e>
 8004832:	4291      	cmp	r1, r2
 8004834:	d205      	bcs.n	8004842 <_sungetc_r+0x5e>
 8004836:	1e51      	subs	r1, r2, #1
 8004838:	7808      	ldrb	r0, [r1, #0]
 800483a:	42a8      	cmp	r0, r5
 800483c:	d101      	bne.n	8004842 <_sungetc_r+0x5e>
 800483e:	6021      	str	r1, [r4, #0]
 8004840:	e7ea      	b.n	8004818 <_sungetc_r+0x34>
 8004842:	6423      	str	r3, [r4, #64]	@ 0x40
 8004844:	0023      	movs	r3, r4
 8004846:	3344      	adds	r3, #68	@ 0x44
 8004848:	6363      	str	r3, [r4, #52]	@ 0x34
 800484a:	2303      	movs	r3, #3
 800484c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800484e:	0023      	movs	r3, r4
 8004850:	3346      	adds	r3, #70	@ 0x46
 8004852:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8004854:	701e      	strb	r6, [r3, #0]
 8004856:	6023      	str	r3, [r4, #0]
 8004858:	2301      	movs	r3, #1
 800485a:	e7de      	b.n	800481a <_sungetc_r+0x36>

0800485c <__ssrefill_r>:
 800485c:	b510      	push	{r4, lr}
 800485e:	000c      	movs	r4, r1
 8004860:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004862:	2900      	cmp	r1, #0
 8004864:	d00e      	beq.n	8004884 <__ssrefill_r+0x28>
 8004866:	0023      	movs	r3, r4
 8004868:	3344      	adds	r3, #68	@ 0x44
 800486a:	4299      	cmp	r1, r3
 800486c:	d001      	beq.n	8004872 <__ssrefill_r+0x16>
 800486e:	f7ff fd5f 	bl	8004330 <_free_r>
 8004872:	2000      	movs	r0, #0
 8004874:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004876:	6360      	str	r0, [r4, #52]	@ 0x34
 8004878:	6063      	str	r3, [r4, #4]
 800487a:	4283      	cmp	r3, r0
 800487c:	d002      	beq.n	8004884 <__ssrefill_r+0x28>
 800487e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004880:	6023      	str	r3, [r4, #0]
 8004882:	bd10      	pop	{r4, pc}
 8004884:	6923      	ldr	r3, [r4, #16]
 8004886:	2001      	movs	r0, #1
 8004888:	6023      	str	r3, [r4, #0]
 800488a:	2300      	movs	r3, #0
 800488c:	89a2      	ldrh	r2, [r4, #12]
 800488e:	6063      	str	r3, [r4, #4]
 8004890:	3320      	adds	r3, #32
 8004892:	4313      	orrs	r3, r2
 8004894:	81a3      	strh	r3, [r4, #12]
 8004896:	4240      	negs	r0, r0
 8004898:	e7f3      	b.n	8004882 <__ssrefill_r+0x26>
	...

0800489c <__ssvfiscanf_r>:
 800489c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800489e:	4caa      	ldr	r4, [pc, #680]	@ (8004b48 <__ssvfiscanf_r+0x2ac>)
 80048a0:	44a5      	add	sp, r4
 80048a2:	000c      	movs	r4, r1
 80048a4:	2100      	movs	r1, #0
 80048a6:	9001      	str	r0, [sp, #4]
 80048a8:	20be      	movs	r0, #190	@ 0xbe
 80048aa:	9146      	str	r1, [sp, #280]	@ 0x118
 80048ac:	9147      	str	r1, [sp, #284]	@ 0x11c
 80048ae:	a903      	add	r1, sp, #12
 80048b0:	9148      	str	r1, [sp, #288]	@ 0x120
 80048b2:	49a6      	ldr	r1, [pc, #664]	@ (8004b4c <__ssvfiscanf_r+0x2b0>)
 80048b4:	0040      	lsls	r0, r0, #1
 80048b6:	ad43      	add	r5, sp, #268	@ 0x10c
 80048b8:	5029      	str	r1, [r5, r0]
 80048ba:	49a5      	ldr	r1, [pc, #660]	@ (8004b50 <__ssvfiscanf_r+0x2b4>)
 80048bc:	3004      	adds	r0, #4
 80048be:	ad43      	add	r5, sp, #268	@ 0x10c
 80048c0:	5029      	str	r1, [r5, r0]
 80048c2:	9302      	str	r3, [sp, #8]
 80048c4:	7813      	ldrb	r3, [r2, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d100      	bne.n	80048cc <__ssvfiscanf_r+0x30>
 80048ca:	e13a      	b.n	8004b42 <__ssvfiscanf_r+0x2a6>
 80048cc:	2108      	movs	r1, #8
 80048ce:	2708      	movs	r7, #8
 80048d0:	4ea0      	ldr	r6, [pc, #640]	@ (8004b54 <__ssvfiscanf_r+0x2b8>)
 80048d2:	1c55      	adds	r5, r2, #1
 80048d4:	5cf0      	ldrb	r0, [r6, r3]
 80048d6:	4001      	ands	r1, r0
 80048d8:	4238      	tst	r0, r7
 80048da:	d01c      	beq.n	8004916 <__ssvfiscanf_r+0x7a>
 80048dc:	6863      	ldr	r3, [r4, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	dd0f      	ble.n	8004902 <__ssvfiscanf_r+0x66>
 80048e2:	6823      	ldr	r3, [r4, #0]
 80048e4:	781a      	ldrb	r2, [r3, #0]
 80048e6:	5cb2      	ldrb	r2, [r6, r2]
 80048e8:	423a      	tst	r2, r7
 80048ea:	d101      	bne.n	80048f0 <__ssvfiscanf_r+0x54>
 80048ec:	002a      	movs	r2, r5
 80048ee:	e7e9      	b.n	80048c4 <__ssvfiscanf_r+0x28>
 80048f0:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 80048f2:	3301      	adds	r3, #1
 80048f4:	3201      	adds	r2, #1
 80048f6:	9247      	str	r2, [sp, #284]	@ 0x11c
 80048f8:	6862      	ldr	r2, [r4, #4]
 80048fa:	6023      	str	r3, [r4, #0]
 80048fc:	3a01      	subs	r2, #1
 80048fe:	6062      	str	r2, [r4, #4]
 8004900:	e7ec      	b.n	80048dc <__ssvfiscanf_r+0x40>
 8004902:	22c0      	movs	r2, #192	@ 0xc0
 8004904:	ab43      	add	r3, sp, #268	@ 0x10c
 8004906:	0052      	lsls	r2, r2, #1
 8004908:	0021      	movs	r1, r4
 800490a:	589b      	ldr	r3, [r3, r2]
 800490c:	9801      	ldr	r0, [sp, #4]
 800490e:	4798      	blx	r3
 8004910:	2800      	cmp	r0, #0
 8004912:	d0e6      	beq.n	80048e2 <__ssvfiscanf_r+0x46>
 8004914:	e7ea      	b.n	80048ec <__ssvfiscanf_r+0x50>
 8004916:	001e      	movs	r6, r3
 8004918:	2b25      	cmp	r3, #37	@ 0x25
 800491a:	d160      	bne.n	80049de <__ssvfiscanf_r+0x142>
 800491c:	9145      	str	r1, [sp, #276]	@ 0x114
 800491e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8004920:	7853      	ldrb	r3, [r2, #1]
 8004922:	2b2a      	cmp	r3, #42	@ 0x2a
 8004924:	d102      	bne.n	800492c <__ssvfiscanf_r+0x90>
 8004926:	3b1a      	subs	r3, #26
 8004928:	9343      	str	r3, [sp, #268]	@ 0x10c
 800492a:	1c95      	adds	r5, r2, #2
 800492c:	002e      	movs	r6, r5
 800492e:	220a      	movs	r2, #10
 8004930:	7831      	ldrb	r1, [r6, #0]
 8004932:	1c75      	adds	r5, r6, #1
 8004934:	000b      	movs	r3, r1
 8004936:	3b30      	subs	r3, #48	@ 0x30
 8004938:	2b09      	cmp	r3, #9
 800493a:	d91d      	bls.n	8004978 <__ssvfiscanf_r+0xdc>
 800493c:	4f86      	ldr	r7, [pc, #536]	@ (8004b58 <__ssvfiscanf_r+0x2bc>)
 800493e:	2203      	movs	r2, #3
 8004940:	0038      	movs	r0, r7
 8004942:	f000 ff0d 	bl	8005760 <memchr>
 8004946:	2800      	cmp	r0, #0
 8004948:	d006      	beq.n	8004958 <__ssvfiscanf_r+0xbc>
 800494a:	2301      	movs	r3, #1
 800494c:	1bc0      	subs	r0, r0, r7
 800494e:	4083      	lsls	r3, r0
 8004950:	002e      	movs	r6, r5
 8004952:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004954:	4313      	orrs	r3, r2
 8004956:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004958:	1c75      	adds	r5, r6, #1
 800495a:	7836      	ldrb	r6, [r6, #0]
 800495c:	2e78      	cmp	r6, #120	@ 0x78
 800495e:	d806      	bhi.n	800496e <__ssvfiscanf_r+0xd2>
 8004960:	2e57      	cmp	r6, #87	@ 0x57
 8004962:	d810      	bhi.n	8004986 <__ssvfiscanf_r+0xea>
 8004964:	2e25      	cmp	r6, #37	@ 0x25
 8004966:	d03a      	beq.n	80049de <__ssvfiscanf_r+0x142>
 8004968:	d834      	bhi.n	80049d4 <__ssvfiscanf_r+0x138>
 800496a:	2e00      	cmp	r6, #0
 800496c:	d055      	beq.n	8004a1a <__ssvfiscanf_r+0x17e>
 800496e:	2303      	movs	r3, #3
 8004970:	9349      	str	r3, [sp, #292]	@ 0x124
 8004972:	3307      	adds	r3, #7
 8004974:	9344      	str	r3, [sp, #272]	@ 0x110
 8004976:	e069      	b.n	8004a4c <__ssvfiscanf_r+0x1b0>
 8004978:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800497a:	002e      	movs	r6, r5
 800497c:	4353      	muls	r3, r2
 800497e:	3b30      	subs	r3, #48	@ 0x30
 8004980:	185b      	adds	r3, r3, r1
 8004982:	9345      	str	r3, [sp, #276]	@ 0x114
 8004984:	e7d4      	b.n	8004930 <__ssvfiscanf_r+0x94>
 8004986:	0030      	movs	r0, r6
 8004988:	3858      	subs	r0, #88	@ 0x58
 800498a:	2820      	cmp	r0, #32
 800498c:	d8ef      	bhi.n	800496e <__ssvfiscanf_r+0xd2>
 800498e:	f7fb fbc3 	bl	8000118 <__gnu_thumb1_case_shi>
 8004992:	004b      	.short	0x004b
 8004994:	ffeeffee 	.word	0xffeeffee
 8004998:	ffee007d 	.word	0xffee007d
 800499c:	ffeeffee 	.word	0xffeeffee
 80049a0:	ffeeffee 	.word	0xffeeffee
 80049a4:	ffeeffee 	.word	0xffeeffee
 80049a8:	007b0088 	.word	0x007b0088
 80049ac:	00240024 	.word	0x00240024
 80049b0:	ffee0024 	.word	0xffee0024
 80049b4:	ffee0055 	.word	0xffee0055
 80049b8:	ffeeffee 	.word	0xffeeffee
 80049bc:	0090ffee 	.word	0x0090ffee
 80049c0:	00470059 	.word	0x00470059
 80049c4:	ffeeffee 	.word	0xffeeffee
 80049c8:	ffee008e 	.word	0xffee008e
 80049cc:	ffee007b 	.word	0xffee007b
 80049d0:	004bffee 	.word	0x004bffee
 80049d4:	3e45      	subs	r6, #69	@ 0x45
 80049d6:	2e02      	cmp	r6, #2
 80049d8:	d8c9      	bhi.n	800496e <__ssvfiscanf_r+0xd2>
 80049da:	2305      	movs	r3, #5
 80049dc:	e035      	b.n	8004a4a <__ssvfiscanf_r+0x1ae>
 80049de:	6863      	ldr	r3, [r4, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	dd0d      	ble.n	8004a00 <__ssvfiscanf_r+0x164>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	781a      	ldrb	r2, [r3, #0]
 80049e8:	42b2      	cmp	r2, r6
 80049ea:	d000      	beq.n	80049ee <__ssvfiscanf_r+0x152>
 80049ec:	e0a9      	b.n	8004b42 <__ssvfiscanf_r+0x2a6>
 80049ee:	3301      	adds	r3, #1
 80049f0:	6862      	ldr	r2, [r4, #4]
 80049f2:	6023      	str	r3, [r4, #0]
 80049f4:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80049f6:	3a01      	subs	r2, #1
 80049f8:	3301      	adds	r3, #1
 80049fa:	6062      	str	r2, [r4, #4]
 80049fc:	9347      	str	r3, [sp, #284]	@ 0x11c
 80049fe:	e775      	b.n	80048ec <__ssvfiscanf_r+0x50>
 8004a00:	23c0      	movs	r3, #192	@ 0xc0
 8004a02:	aa43      	add	r2, sp, #268	@ 0x10c
 8004a04:	005b      	lsls	r3, r3, #1
 8004a06:	0021      	movs	r1, r4
 8004a08:	58d3      	ldr	r3, [r2, r3]
 8004a0a:	9801      	ldr	r0, [sp, #4]
 8004a0c:	4798      	blx	r3
 8004a0e:	2800      	cmp	r0, #0
 8004a10:	d0e8      	beq.n	80049e4 <__ssvfiscanf_r+0x148>
 8004a12:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d000      	beq.n	8004a1a <__ssvfiscanf_r+0x17e>
 8004a18:	e08b      	b.n	8004b32 <__ssvfiscanf_r+0x296>
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	4240      	negs	r0, r0
 8004a1e:	e08c      	b.n	8004b3a <__ssvfiscanf_r+0x29e>
 8004a20:	2320      	movs	r3, #32
 8004a22:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004a24:	4313      	orrs	r3, r2
 8004a26:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004a28:	2380      	movs	r3, #128	@ 0x80
 8004a2a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004a32:	2310      	movs	r3, #16
 8004a34:	9344      	str	r3, [sp, #272]	@ 0x110
 8004a36:	2e6e      	cmp	r6, #110	@ 0x6e
 8004a38:	d902      	bls.n	8004a40 <__ssvfiscanf_r+0x1a4>
 8004a3a:	e005      	b.n	8004a48 <__ssvfiscanf_r+0x1ac>
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	9344      	str	r3, [sp, #272]	@ 0x110
 8004a40:	2303      	movs	r3, #3
 8004a42:	e002      	b.n	8004a4a <__ssvfiscanf_r+0x1ae>
 8004a44:	2308      	movs	r3, #8
 8004a46:	9344      	str	r3, [sp, #272]	@ 0x110
 8004a48:	2304      	movs	r3, #4
 8004a4a:	9349      	str	r3, [sp, #292]	@ 0x124
 8004a4c:	6863      	ldr	r3, [r4, #4]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	dd3e      	ble.n	8004ad0 <__ssvfiscanf_r+0x234>
 8004a52:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004a54:	065b      	lsls	r3, r3, #25
 8004a56:	d408      	bmi.n	8004a6a <__ssvfiscanf_r+0x1ce>
 8004a58:	27c0      	movs	r7, #192	@ 0xc0
 8004a5a:	2608      	movs	r6, #8
 8004a5c:	007f      	lsls	r7, r7, #1
 8004a5e:	6823      	ldr	r3, [r4, #0]
 8004a60:	493c      	ldr	r1, [pc, #240]	@ (8004b54 <__ssvfiscanf_r+0x2b8>)
 8004a62:	781a      	ldrb	r2, [r3, #0]
 8004a64:	5c8a      	ldrb	r2, [r1, r2]
 8004a66:	4232      	tst	r2, r6
 8004a68:	d13c      	bne.n	8004ae4 <__ssvfiscanf_r+0x248>
 8004a6a:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	dc4c      	bgt.n	8004b0a <__ssvfiscanf_r+0x26e>
 8004a70:	0022      	movs	r2, r4
 8004a72:	9801      	ldr	r0, [sp, #4]
 8004a74:	ab02      	add	r3, sp, #8
 8004a76:	a943      	add	r1, sp, #268	@ 0x10c
 8004a78:	f000 fb34 	bl	80050e4 <_scanf_chars>
 8004a7c:	2801      	cmp	r0, #1
 8004a7e:	d060      	beq.n	8004b42 <__ssvfiscanf_r+0x2a6>
 8004a80:	2802      	cmp	r0, #2
 8004a82:	d000      	beq.n	8004a86 <__ssvfiscanf_r+0x1ea>
 8004a84:	e732      	b.n	80048ec <__ssvfiscanf_r+0x50>
 8004a86:	e7c4      	b.n	8004a12 <__ssvfiscanf_r+0x176>
 8004a88:	230a      	movs	r3, #10
 8004a8a:	e7d3      	b.n	8004a34 <__ssvfiscanf_r+0x198>
 8004a8c:	0029      	movs	r1, r5
 8004a8e:	a803      	add	r0, sp, #12
 8004a90:	f000 fda5 	bl	80055de <__sccl>
 8004a94:	2340      	movs	r3, #64	@ 0x40
 8004a96:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004a98:	0005      	movs	r5, r0
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e7d3      	b.n	8004a4a <__ssvfiscanf_r+0x1ae>
 8004aa2:	2340      	movs	r3, #64	@ 0x40
 8004aa4:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e7cd      	b.n	8004a4a <__ssvfiscanf_r+0x1ae>
 8004aae:	2302      	movs	r3, #2
 8004ab0:	e7cb      	b.n	8004a4a <__ssvfiscanf_r+0x1ae>
 8004ab2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004ab4:	06d3      	lsls	r3, r2, #27
 8004ab6:	d500      	bpl.n	8004aba <__ssvfiscanf_r+0x21e>
 8004ab8:	e718      	b.n	80048ec <__ssvfiscanf_r+0x50>
 8004aba:	9b02      	ldr	r3, [sp, #8]
 8004abc:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8004abe:	1d18      	adds	r0, r3, #4
 8004ac0:	9002      	str	r0, [sp, #8]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	07d6      	lsls	r6, r2, #31
 8004ac6:	d501      	bpl.n	8004acc <__ssvfiscanf_r+0x230>
 8004ac8:	8019      	strh	r1, [r3, #0]
 8004aca:	e70f      	b.n	80048ec <__ssvfiscanf_r+0x50>
 8004acc:	6019      	str	r1, [r3, #0]
 8004ace:	e70d      	b.n	80048ec <__ssvfiscanf_r+0x50>
 8004ad0:	23c0      	movs	r3, #192	@ 0xc0
 8004ad2:	aa43      	add	r2, sp, #268	@ 0x10c
 8004ad4:	005b      	lsls	r3, r3, #1
 8004ad6:	0021      	movs	r1, r4
 8004ad8:	58d3      	ldr	r3, [r2, r3]
 8004ada:	9801      	ldr	r0, [sp, #4]
 8004adc:	4798      	blx	r3
 8004ade:	2800      	cmp	r0, #0
 8004ae0:	d0b7      	beq.n	8004a52 <__ssvfiscanf_r+0x1b6>
 8004ae2:	e796      	b.n	8004a12 <__ssvfiscanf_r+0x176>
 8004ae4:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8004ae6:	3201      	adds	r2, #1
 8004ae8:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004aea:	6862      	ldr	r2, [r4, #4]
 8004aec:	3a01      	subs	r2, #1
 8004aee:	6062      	str	r2, [r4, #4]
 8004af0:	2a00      	cmp	r2, #0
 8004af2:	dd02      	ble.n	8004afa <__ssvfiscanf_r+0x25e>
 8004af4:	3301      	adds	r3, #1
 8004af6:	6023      	str	r3, [r4, #0]
 8004af8:	e7b1      	b.n	8004a5e <__ssvfiscanf_r+0x1c2>
 8004afa:	ab43      	add	r3, sp, #268	@ 0x10c
 8004afc:	0021      	movs	r1, r4
 8004afe:	59db      	ldr	r3, [r3, r7]
 8004b00:	9801      	ldr	r0, [sp, #4]
 8004b02:	4798      	blx	r3
 8004b04:	2800      	cmp	r0, #0
 8004b06:	d0aa      	beq.n	8004a5e <__ssvfiscanf_r+0x1c2>
 8004b08:	e783      	b.n	8004a12 <__ssvfiscanf_r+0x176>
 8004b0a:	2b04      	cmp	r3, #4
 8004b0c:	dc06      	bgt.n	8004b1c <__ssvfiscanf_r+0x280>
 8004b0e:	0022      	movs	r2, r4
 8004b10:	9801      	ldr	r0, [sp, #4]
 8004b12:	ab02      	add	r3, sp, #8
 8004b14:	a943      	add	r1, sp, #268	@ 0x10c
 8004b16:	f000 fb45 	bl	80051a4 <_scanf_i>
 8004b1a:	e7af      	b.n	8004a7c <__ssvfiscanf_r+0x1e0>
 8004b1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004b5c <__ssvfiscanf_r+0x2c0>)
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d100      	bne.n	8004b24 <__ssvfiscanf_r+0x288>
 8004b22:	e6e3      	b.n	80048ec <__ssvfiscanf_r+0x50>
 8004b24:	0022      	movs	r2, r4
 8004b26:	9801      	ldr	r0, [sp, #4]
 8004b28:	ab02      	add	r3, sp, #8
 8004b2a:	a943      	add	r1, sp, #268	@ 0x10c
 8004b2c:	e000      	b.n	8004b30 <__ssvfiscanf_r+0x294>
 8004b2e:	bf00      	nop
 8004b30:	e7a4      	b.n	8004a7c <__ssvfiscanf_r+0x1e0>
 8004b32:	89a3      	ldrh	r3, [r4, #12]
 8004b34:	065b      	lsls	r3, r3, #25
 8004b36:	d500      	bpl.n	8004b3a <__ssvfiscanf_r+0x29e>
 8004b38:	e76f      	b.n	8004a1a <__ssvfiscanf_r+0x17e>
 8004b3a:	23a5      	movs	r3, #165	@ 0xa5
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	449d      	add	sp, r3
 8004b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b42:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004b44:	e7f9      	b.n	8004b3a <__ssvfiscanf_r+0x29e>
 8004b46:	46c0      	nop			@ (mov r8, r8)
 8004b48:	fffffd6c 	.word	0xfffffd6c
 8004b4c:	080047e5 	.word	0x080047e5
 8004b50:	0800485d 	.word	0x0800485d
 8004b54:	08005efb 	.word	0x08005efb
 8004b58:	08005eb2 	.word	0x08005eb2
 8004b5c:	00000000 	.word	0x00000000

08004b60 <__sfputc_r>:
 8004b60:	6893      	ldr	r3, [r2, #8]
 8004b62:	b510      	push	{r4, lr}
 8004b64:	3b01      	subs	r3, #1
 8004b66:	6093      	str	r3, [r2, #8]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	da04      	bge.n	8004b76 <__sfputc_r+0x16>
 8004b6c:	6994      	ldr	r4, [r2, #24]
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	db07      	blt.n	8004b82 <__sfputc_r+0x22>
 8004b72:	290a      	cmp	r1, #10
 8004b74:	d005      	beq.n	8004b82 <__sfputc_r+0x22>
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	1c58      	adds	r0, r3, #1
 8004b7a:	6010      	str	r0, [r2, #0]
 8004b7c:	7019      	strb	r1, [r3, #0]
 8004b7e:	0008      	movs	r0, r1
 8004b80:	bd10      	pop	{r4, pc}
 8004b82:	f7ff fa93 	bl	80040ac <__swbuf_r>
 8004b86:	0001      	movs	r1, r0
 8004b88:	e7f9      	b.n	8004b7e <__sfputc_r+0x1e>

08004b8a <__sfputs_r>:
 8004b8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8c:	0006      	movs	r6, r0
 8004b8e:	000f      	movs	r7, r1
 8004b90:	0014      	movs	r4, r2
 8004b92:	18d5      	adds	r5, r2, r3
 8004b94:	42ac      	cmp	r4, r5
 8004b96:	d101      	bne.n	8004b9c <__sfputs_r+0x12>
 8004b98:	2000      	movs	r0, #0
 8004b9a:	e007      	b.n	8004bac <__sfputs_r+0x22>
 8004b9c:	7821      	ldrb	r1, [r4, #0]
 8004b9e:	003a      	movs	r2, r7
 8004ba0:	0030      	movs	r0, r6
 8004ba2:	f7ff ffdd 	bl	8004b60 <__sfputc_r>
 8004ba6:	3401      	adds	r4, #1
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d1f3      	bne.n	8004b94 <__sfputs_r+0xa>
 8004bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bb0 <_vfiprintf_r>:
 8004bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb2:	b0a1      	sub	sp, #132	@ 0x84
 8004bb4:	000f      	movs	r7, r1
 8004bb6:	0015      	movs	r5, r2
 8004bb8:	001e      	movs	r6, r3
 8004bba:	9003      	str	r0, [sp, #12]
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d004      	beq.n	8004bca <_vfiprintf_r+0x1a>
 8004bc0:	6a03      	ldr	r3, [r0, #32]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <_vfiprintf_r+0x1a>
 8004bc6:	f7ff f923 	bl	8003e10 <__sinit>
 8004bca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bcc:	07db      	lsls	r3, r3, #31
 8004bce:	d405      	bmi.n	8004bdc <_vfiprintf_r+0x2c>
 8004bd0:	89bb      	ldrh	r3, [r7, #12]
 8004bd2:	059b      	lsls	r3, r3, #22
 8004bd4:	d402      	bmi.n	8004bdc <_vfiprintf_r+0x2c>
 8004bd6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004bd8:	f7ff fb9f 	bl	800431a <__retarget_lock_acquire_recursive>
 8004bdc:	89bb      	ldrh	r3, [r7, #12]
 8004bde:	071b      	lsls	r3, r3, #28
 8004be0:	d502      	bpl.n	8004be8 <_vfiprintf_r+0x38>
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d113      	bne.n	8004c10 <_vfiprintf_r+0x60>
 8004be8:	0039      	movs	r1, r7
 8004bea:	9803      	ldr	r0, [sp, #12]
 8004bec:	f7ff faa0 	bl	8004130 <__swsetup_r>
 8004bf0:	2800      	cmp	r0, #0
 8004bf2:	d00d      	beq.n	8004c10 <_vfiprintf_r+0x60>
 8004bf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004bf6:	07db      	lsls	r3, r3, #31
 8004bf8:	d503      	bpl.n	8004c02 <_vfiprintf_r+0x52>
 8004bfa:	2001      	movs	r0, #1
 8004bfc:	4240      	negs	r0, r0
 8004bfe:	b021      	add	sp, #132	@ 0x84
 8004c00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c02:	89bb      	ldrh	r3, [r7, #12]
 8004c04:	059b      	lsls	r3, r3, #22
 8004c06:	d4f8      	bmi.n	8004bfa <_vfiprintf_r+0x4a>
 8004c08:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004c0a:	f7ff fb87 	bl	800431c <__retarget_lock_release_recursive>
 8004c0e:	e7f4      	b.n	8004bfa <_vfiprintf_r+0x4a>
 8004c10:	2300      	movs	r3, #0
 8004c12:	ac08      	add	r4, sp, #32
 8004c14:	6163      	str	r3, [r4, #20]
 8004c16:	3320      	adds	r3, #32
 8004c18:	7663      	strb	r3, [r4, #25]
 8004c1a:	3310      	adds	r3, #16
 8004c1c:	76a3      	strb	r3, [r4, #26]
 8004c1e:	9607      	str	r6, [sp, #28]
 8004c20:	002e      	movs	r6, r5
 8004c22:	7833      	ldrb	r3, [r6, #0]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d001      	beq.n	8004c2c <_vfiprintf_r+0x7c>
 8004c28:	2b25      	cmp	r3, #37	@ 0x25
 8004c2a:	d148      	bne.n	8004cbe <_vfiprintf_r+0x10e>
 8004c2c:	1b73      	subs	r3, r6, r5
 8004c2e:	9305      	str	r3, [sp, #20]
 8004c30:	42ae      	cmp	r6, r5
 8004c32:	d00b      	beq.n	8004c4c <_vfiprintf_r+0x9c>
 8004c34:	002a      	movs	r2, r5
 8004c36:	0039      	movs	r1, r7
 8004c38:	9803      	ldr	r0, [sp, #12]
 8004c3a:	f7ff ffa6 	bl	8004b8a <__sfputs_r>
 8004c3e:	3001      	adds	r0, #1
 8004c40:	d100      	bne.n	8004c44 <_vfiprintf_r+0x94>
 8004c42:	e0ae      	b.n	8004da2 <_vfiprintf_r+0x1f2>
 8004c44:	6963      	ldr	r3, [r4, #20]
 8004c46:	9a05      	ldr	r2, [sp, #20]
 8004c48:	189b      	adds	r3, r3, r2
 8004c4a:	6163      	str	r3, [r4, #20]
 8004c4c:	7833      	ldrb	r3, [r6, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d100      	bne.n	8004c54 <_vfiprintf_r+0xa4>
 8004c52:	e0a6      	b.n	8004da2 <_vfiprintf_r+0x1f2>
 8004c54:	2201      	movs	r2, #1
 8004c56:	2300      	movs	r3, #0
 8004c58:	4252      	negs	r2, r2
 8004c5a:	6062      	str	r2, [r4, #4]
 8004c5c:	a904      	add	r1, sp, #16
 8004c5e:	3254      	adds	r2, #84	@ 0x54
 8004c60:	1852      	adds	r2, r2, r1
 8004c62:	1c75      	adds	r5, r6, #1
 8004c64:	6023      	str	r3, [r4, #0]
 8004c66:	60e3      	str	r3, [r4, #12]
 8004c68:	60a3      	str	r3, [r4, #8]
 8004c6a:	7013      	strb	r3, [r2, #0]
 8004c6c:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004c6e:	4b59      	ldr	r3, [pc, #356]	@ (8004dd4 <_vfiprintf_r+0x224>)
 8004c70:	2205      	movs	r2, #5
 8004c72:	0018      	movs	r0, r3
 8004c74:	7829      	ldrb	r1, [r5, #0]
 8004c76:	9305      	str	r3, [sp, #20]
 8004c78:	f000 fd72 	bl	8005760 <memchr>
 8004c7c:	1c6e      	adds	r6, r5, #1
 8004c7e:	2800      	cmp	r0, #0
 8004c80:	d11f      	bne.n	8004cc2 <_vfiprintf_r+0x112>
 8004c82:	6822      	ldr	r2, [r4, #0]
 8004c84:	06d3      	lsls	r3, r2, #27
 8004c86:	d504      	bpl.n	8004c92 <_vfiprintf_r+0xe2>
 8004c88:	2353      	movs	r3, #83	@ 0x53
 8004c8a:	a904      	add	r1, sp, #16
 8004c8c:	185b      	adds	r3, r3, r1
 8004c8e:	2120      	movs	r1, #32
 8004c90:	7019      	strb	r1, [r3, #0]
 8004c92:	0713      	lsls	r3, r2, #28
 8004c94:	d504      	bpl.n	8004ca0 <_vfiprintf_r+0xf0>
 8004c96:	2353      	movs	r3, #83	@ 0x53
 8004c98:	a904      	add	r1, sp, #16
 8004c9a:	185b      	adds	r3, r3, r1
 8004c9c:	212b      	movs	r1, #43	@ 0x2b
 8004c9e:	7019      	strb	r1, [r3, #0]
 8004ca0:	782b      	ldrb	r3, [r5, #0]
 8004ca2:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ca4:	d016      	beq.n	8004cd4 <_vfiprintf_r+0x124>
 8004ca6:	002e      	movs	r6, r5
 8004ca8:	2100      	movs	r1, #0
 8004caa:	200a      	movs	r0, #10
 8004cac:	68e3      	ldr	r3, [r4, #12]
 8004cae:	7832      	ldrb	r2, [r6, #0]
 8004cb0:	1c75      	adds	r5, r6, #1
 8004cb2:	3a30      	subs	r2, #48	@ 0x30
 8004cb4:	2a09      	cmp	r2, #9
 8004cb6:	d950      	bls.n	8004d5a <_vfiprintf_r+0x1aa>
 8004cb8:	2900      	cmp	r1, #0
 8004cba:	d111      	bne.n	8004ce0 <_vfiprintf_r+0x130>
 8004cbc:	e017      	b.n	8004cee <_vfiprintf_r+0x13e>
 8004cbe:	3601      	adds	r6, #1
 8004cc0:	e7af      	b.n	8004c22 <_vfiprintf_r+0x72>
 8004cc2:	9b05      	ldr	r3, [sp, #20]
 8004cc4:	6822      	ldr	r2, [r4, #0]
 8004cc6:	1ac0      	subs	r0, r0, r3
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4083      	lsls	r3, r0
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	0035      	movs	r5, r6
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	e7cc      	b.n	8004c6e <_vfiprintf_r+0xbe>
 8004cd4:	9b07      	ldr	r3, [sp, #28]
 8004cd6:	1d19      	adds	r1, r3, #4
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	9107      	str	r1, [sp, #28]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	db01      	blt.n	8004ce4 <_vfiprintf_r+0x134>
 8004ce0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004ce2:	e004      	b.n	8004cee <_vfiprintf_r+0x13e>
 8004ce4:	425b      	negs	r3, r3
 8004ce6:	60e3      	str	r3, [r4, #12]
 8004ce8:	2302      	movs	r3, #2
 8004cea:	4313      	orrs	r3, r2
 8004cec:	6023      	str	r3, [r4, #0]
 8004cee:	7833      	ldrb	r3, [r6, #0]
 8004cf0:	2b2e      	cmp	r3, #46	@ 0x2e
 8004cf2:	d10c      	bne.n	8004d0e <_vfiprintf_r+0x15e>
 8004cf4:	7873      	ldrb	r3, [r6, #1]
 8004cf6:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cf8:	d134      	bne.n	8004d64 <_vfiprintf_r+0x1b4>
 8004cfa:	9b07      	ldr	r3, [sp, #28]
 8004cfc:	3602      	adds	r6, #2
 8004cfe:	1d1a      	adds	r2, r3, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	9207      	str	r2, [sp, #28]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	da01      	bge.n	8004d0c <_vfiprintf_r+0x15c>
 8004d08:	2301      	movs	r3, #1
 8004d0a:	425b      	negs	r3, r3
 8004d0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d0e:	4d32      	ldr	r5, [pc, #200]	@ (8004dd8 <_vfiprintf_r+0x228>)
 8004d10:	2203      	movs	r2, #3
 8004d12:	0028      	movs	r0, r5
 8004d14:	7831      	ldrb	r1, [r6, #0]
 8004d16:	f000 fd23 	bl	8005760 <memchr>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d006      	beq.n	8004d2c <_vfiprintf_r+0x17c>
 8004d1e:	2340      	movs	r3, #64	@ 0x40
 8004d20:	1b40      	subs	r0, r0, r5
 8004d22:	4083      	lsls	r3, r0
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	3601      	adds	r6, #1
 8004d28:	4313      	orrs	r3, r2
 8004d2a:	6023      	str	r3, [r4, #0]
 8004d2c:	7831      	ldrb	r1, [r6, #0]
 8004d2e:	2206      	movs	r2, #6
 8004d30:	482a      	ldr	r0, [pc, #168]	@ (8004ddc <_vfiprintf_r+0x22c>)
 8004d32:	1c75      	adds	r5, r6, #1
 8004d34:	7621      	strb	r1, [r4, #24]
 8004d36:	f000 fd13 	bl	8005760 <memchr>
 8004d3a:	2800      	cmp	r0, #0
 8004d3c:	d040      	beq.n	8004dc0 <_vfiprintf_r+0x210>
 8004d3e:	4b28      	ldr	r3, [pc, #160]	@ (8004de0 <_vfiprintf_r+0x230>)
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d122      	bne.n	8004d8a <_vfiprintf_r+0x1da>
 8004d44:	2207      	movs	r2, #7
 8004d46:	9b07      	ldr	r3, [sp, #28]
 8004d48:	3307      	adds	r3, #7
 8004d4a:	4393      	bics	r3, r2
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	9307      	str	r3, [sp, #28]
 8004d50:	6963      	ldr	r3, [r4, #20]
 8004d52:	9a04      	ldr	r2, [sp, #16]
 8004d54:	189b      	adds	r3, r3, r2
 8004d56:	6163      	str	r3, [r4, #20]
 8004d58:	e762      	b.n	8004c20 <_vfiprintf_r+0x70>
 8004d5a:	4343      	muls	r3, r0
 8004d5c:	002e      	movs	r6, r5
 8004d5e:	2101      	movs	r1, #1
 8004d60:	189b      	adds	r3, r3, r2
 8004d62:	e7a4      	b.n	8004cae <_vfiprintf_r+0xfe>
 8004d64:	2300      	movs	r3, #0
 8004d66:	200a      	movs	r0, #10
 8004d68:	0019      	movs	r1, r3
 8004d6a:	3601      	adds	r6, #1
 8004d6c:	6063      	str	r3, [r4, #4]
 8004d6e:	7832      	ldrb	r2, [r6, #0]
 8004d70:	1c75      	adds	r5, r6, #1
 8004d72:	3a30      	subs	r2, #48	@ 0x30
 8004d74:	2a09      	cmp	r2, #9
 8004d76:	d903      	bls.n	8004d80 <_vfiprintf_r+0x1d0>
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d0c8      	beq.n	8004d0e <_vfiprintf_r+0x15e>
 8004d7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d7e:	e7c6      	b.n	8004d0e <_vfiprintf_r+0x15e>
 8004d80:	4341      	muls	r1, r0
 8004d82:	002e      	movs	r6, r5
 8004d84:	2301      	movs	r3, #1
 8004d86:	1889      	adds	r1, r1, r2
 8004d88:	e7f1      	b.n	8004d6e <_vfiprintf_r+0x1be>
 8004d8a:	aa07      	add	r2, sp, #28
 8004d8c:	9200      	str	r2, [sp, #0]
 8004d8e:	0021      	movs	r1, r4
 8004d90:	003a      	movs	r2, r7
 8004d92:	4b14      	ldr	r3, [pc, #80]	@ (8004de4 <_vfiprintf_r+0x234>)
 8004d94:	9803      	ldr	r0, [sp, #12]
 8004d96:	e000      	b.n	8004d9a <_vfiprintf_r+0x1ea>
 8004d98:	bf00      	nop
 8004d9a:	9004      	str	r0, [sp, #16]
 8004d9c:	9b04      	ldr	r3, [sp, #16]
 8004d9e:	3301      	adds	r3, #1
 8004da0:	d1d6      	bne.n	8004d50 <_vfiprintf_r+0x1a0>
 8004da2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004da4:	07db      	lsls	r3, r3, #31
 8004da6:	d405      	bmi.n	8004db4 <_vfiprintf_r+0x204>
 8004da8:	89bb      	ldrh	r3, [r7, #12]
 8004daa:	059b      	lsls	r3, r3, #22
 8004dac:	d402      	bmi.n	8004db4 <_vfiprintf_r+0x204>
 8004dae:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004db0:	f7ff fab4 	bl	800431c <__retarget_lock_release_recursive>
 8004db4:	89bb      	ldrh	r3, [r7, #12]
 8004db6:	065b      	lsls	r3, r3, #25
 8004db8:	d500      	bpl.n	8004dbc <_vfiprintf_r+0x20c>
 8004dba:	e71e      	b.n	8004bfa <_vfiprintf_r+0x4a>
 8004dbc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004dbe:	e71e      	b.n	8004bfe <_vfiprintf_r+0x4e>
 8004dc0:	aa07      	add	r2, sp, #28
 8004dc2:	9200      	str	r2, [sp, #0]
 8004dc4:	0021      	movs	r1, r4
 8004dc6:	003a      	movs	r2, r7
 8004dc8:	4b06      	ldr	r3, [pc, #24]	@ (8004de4 <_vfiprintf_r+0x234>)
 8004dca:	9803      	ldr	r0, [sp, #12]
 8004dcc:	f000 f87c 	bl	8004ec8 <_printf_i>
 8004dd0:	e7e3      	b.n	8004d9a <_vfiprintf_r+0x1ea>
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	08005eac 	.word	0x08005eac
 8004dd8:	08005eb2 	.word	0x08005eb2
 8004ddc:	08005eb6 	.word	0x08005eb6
 8004de0:	00000000 	.word	0x00000000
 8004de4:	08004b8b 	.word	0x08004b8b

08004de8 <_printf_common>:
 8004de8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dea:	0016      	movs	r6, r2
 8004dec:	9301      	str	r3, [sp, #4]
 8004dee:	688a      	ldr	r2, [r1, #8]
 8004df0:	690b      	ldr	r3, [r1, #16]
 8004df2:	000c      	movs	r4, r1
 8004df4:	9000      	str	r0, [sp, #0]
 8004df6:	4293      	cmp	r3, r2
 8004df8:	da00      	bge.n	8004dfc <_printf_common+0x14>
 8004dfa:	0013      	movs	r3, r2
 8004dfc:	0022      	movs	r2, r4
 8004dfe:	6033      	str	r3, [r6, #0]
 8004e00:	3243      	adds	r2, #67	@ 0x43
 8004e02:	7812      	ldrb	r2, [r2, #0]
 8004e04:	2a00      	cmp	r2, #0
 8004e06:	d001      	beq.n	8004e0c <_printf_common+0x24>
 8004e08:	3301      	adds	r3, #1
 8004e0a:	6033      	str	r3, [r6, #0]
 8004e0c:	6823      	ldr	r3, [r4, #0]
 8004e0e:	069b      	lsls	r3, r3, #26
 8004e10:	d502      	bpl.n	8004e18 <_printf_common+0x30>
 8004e12:	6833      	ldr	r3, [r6, #0]
 8004e14:	3302      	adds	r3, #2
 8004e16:	6033      	str	r3, [r6, #0]
 8004e18:	6822      	ldr	r2, [r4, #0]
 8004e1a:	2306      	movs	r3, #6
 8004e1c:	0015      	movs	r5, r2
 8004e1e:	401d      	ands	r5, r3
 8004e20:	421a      	tst	r2, r3
 8004e22:	d027      	beq.n	8004e74 <_printf_common+0x8c>
 8004e24:	0023      	movs	r3, r4
 8004e26:	3343      	adds	r3, #67	@ 0x43
 8004e28:	781b      	ldrb	r3, [r3, #0]
 8004e2a:	1e5a      	subs	r2, r3, #1
 8004e2c:	4193      	sbcs	r3, r2
 8004e2e:	6822      	ldr	r2, [r4, #0]
 8004e30:	0692      	lsls	r2, r2, #26
 8004e32:	d430      	bmi.n	8004e96 <_printf_common+0xae>
 8004e34:	0022      	movs	r2, r4
 8004e36:	9901      	ldr	r1, [sp, #4]
 8004e38:	9800      	ldr	r0, [sp, #0]
 8004e3a:	9d08      	ldr	r5, [sp, #32]
 8004e3c:	3243      	adds	r2, #67	@ 0x43
 8004e3e:	47a8      	blx	r5
 8004e40:	3001      	adds	r0, #1
 8004e42:	d025      	beq.n	8004e90 <_printf_common+0xa8>
 8004e44:	2206      	movs	r2, #6
 8004e46:	6823      	ldr	r3, [r4, #0]
 8004e48:	2500      	movs	r5, #0
 8004e4a:	4013      	ands	r3, r2
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d105      	bne.n	8004e5c <_printf_common+0x74>
 8004e50:	6833      	ldr	r3, [r6, #0]
 8004e52:	68e5      	ldr	r5, [r4, #12]
 8004e54:	1aed      	subs	r5, r5, r3
 8004e56:	43eb      	mvns	r3, r5
 8004e58:	17db      	asrs	r3, r3, #31
 8004e5a:	401d      	ands	r5, r3
 8004e5c:	68a3      	ldr	r3, [r4, #8]
 8004e5e:	6922      	ldr	r2, [r4, #16]
 8004e60:	4293      	cmp	r3, r2
 8004e62:	dd01      	ble.n	8004e68 <_printf_common+0x80>
 8004e64:	1a9b      	subs	r3, r3, r2
 8004e66:	18ed      	adds	r5, r5, r3
 8004e68:	2600      	movs	r6, #0
 8004e6a:	42b5      	cmp	r5, r6
 8004e6c:	d120      	bne.n	8004eb0 <_printf_common+0xc8>
 8004e6e:	2000      	movs	r0, #0
 8004e70:	e010      	b.n	8004e94 <_printf_common+0xac>
 8004e72:	3501      	adds	r5, #1
 8004e74:	68e3      	ldr	r3, [r4, #12]
 8004e76:	6832      	ldr	r2, [r6, #0]
 8004e78:	1a9b      	subs	r3, r3, r2
 8004e7a:	42ab      	cmp	r3, r5
 8004e7c:	ddd2      	ble.n	8004e24 <_printf_common+0x3c>
 8004e7e:	0022      	movs	r2, r4
 8004e80:	2301      	movs	r3, #1
 8004e82:	9901      	ldr	r1, [sp, #4]
 8004e84:	9800      	ldr	r0, [sp, #0]
 8004e86:	9f08      	ldr	r7, [sp, #32]
 8004e88:	3219      	adds	r2, #25
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	d1f0      	bne.n	8004e72 <_printf_common+0x8a>
 8004e90:	2001      	movs	r0, #1
 8004e92:	4240      	negs	r0, r0
 8004e94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004e96:	2030      	movs	r0, #48	@ 0x30
 8004e98:	18e1      	adds	r1, r4, r3
 8004e9a:	3143      	adds	r1, #67	@ 0x43
 8004e9c:	7008      	strb	r0, [r1, #0]
 8004e9e:	0021      	movs	r1, r4
 8004ea0:	1c5a      	adds	r2, r3, #1
 8004ea2:	3145      	adds	r1, #69	@ 0x45
 8004ea4:	7809      	ldrb	r1, [r1, #0]
 8004ea6:	18a2      	adds	r2, r4, r2
 8004ea8:	3243      	adds	r2, #67	@ 0x43
 8004eaa:	3302      	adds	r3, #2
 8004eac:	7011      	strb	r1, [r2, #0]
 8004eae:	e7c1      	b.n	8004e34 <_printf_common+0x4c>
 8004eb0:	0022      	movs	r2, r4
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	9901      	ldr	r1, [sp, #4]
 8004eb6:	9800      	ldr	r0, [sp, #0]
 8004eb8:	9f08      	ldr	r7, [sp, #32]
 8004eba:	321a      	adds	r2, #26
 8004ebc:	47b8      	blx	r7
 8004ebe:	3001      	adds	r0, #1
 8004ec0:	d0e6      	beq.n	8004e90 <_printf_common+0xa8>
 8004ec2:	3601      	adds	r6, #1
 8004ec4:	e7d1      	b.n	8004e6a <_printf_common+0x82>
	...

08004ec8 <_printf_i>:
 8004ec8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eca:	b08b      	sub	sp, #44	@ 0x2c
 8004ecc:	9206      	str	r2, [sp, #24]
 8004ece:	000a      	movs	r2, r1
 8004ed0:	3243      	adds	r2, #67	@ 0x43
 8004ed2:	9307      	str	r3, [sp, #28]
 8004ed4:	9005      	str	r0, [sp, #20]
 8004ed6:	9203      	str	r2, [sp, #12]
 8004ed8:	7e0a      	ldrb	r2, [r1, #24]
 8004eda:	000c      	movs	r4, r1
 8004edc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004ede:	2a78      	cmp	r2, #120	@ 0x78
 8004ee0:	d809      	bhi.n	8004ef6 <_printf_i+0x2e>
 8004ee2:	2a62      	cmp	r2, #98	@ 0x62
 8004ee4:	d80b      	bhi.n	8004efe <_printf_i+0x36>
 8004ee6:	2a00      	cmp	r2, #0
 8004ee8:	d100      	bne.n	8004eec <_printf_i+0x24>
 8004eea:	e0bc      	b.n	8005066 <_printf_i+0x19e>
 8004eec:	497b      	ldr	r1, [pc, #492]	@ (80050dc <_printf_i+0x214>)
 8004eee:	9104      	str	r1, [sp, #16]
 8004ef0:	2a58      	cmp	r2, #88	@ 0x58
 8004ef2:	d100      	bne.n	8004ef6 <_printf_i+0x2e>
 8004ef4:	e090      	b.n	8005018 <_printf_i+0x150>
 8004ef6:	0025      	movs	r5, r4
 8004ef8:	3542      	adds	r5, #66	@ 0x42
 8004efa:	702a      	strb	r2, [r5, #0]
 8004efc:	e022      	b.n	8004f44 <_printf_i+0x7c>
 8004efe:	0010      	movs	r0, r2
 8004f00:	3863      	subs	r0, #99	@ 0x63
 8004f02:	2815      	cmp	r0, #21
 8004f04:	d8f7      	bhi.n	8004ef6 <_printf_i+0x2e>
 8004f06:	f7fb f907 	bl	8000118 <__gnu_thumb1_case_shi>
 8004f0a:	0016      	.short	0x0016
 8004f0c:	fff6001f 	.word	0xfff6001f
 8004f10:	fff6fff6 	.word	0xfff6fff6
 8004f14:	001ffff6 	.word	0x001ffff6
 8004f18:	fff6fff6 	.word	0xfff6fff6
 8004f1c:	fff6fff6 	.word	0xfff6fff6
 8004f20:	003600a1 	.word	0x003600a1
 8004f24:	fff60080 	.word	0xfff60080
 8004f28:	00b2fff6 	.word	0x00b2fff6
 8004f2c:	0036fff6 	.word	0x0036fff6
 8004f30:	fff6fff6 	.word	0xfff6fff6
 8004f34:	0084      	.short	0x0084
 8004f36:	0025      	movs	r5, r4
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	3542      	adds	r5, #66	@ 0x42
 8004f3c:	1d11      	adds	r1, r2, #4
 8004f3e:	6019      	str	r1, [r3, #0]
 8004f40:	6813      	ldr	r3, [r2, #0]
 8004f42:	702b      	strb	r3, [r5, #0]
 8004f44:	2301      	movs	r3, #1
 8004f46:	e0a0      	b.n	800508a <_printf_i+0x1c2>
 8004f48:	6818      	ldr	r0, [r3, #0]
 8004f4a:	6809      	ldr	r1, [r1, #0]
 8004f4c:	1d02      	adds	r2, r0, #4
 8004f4e:	060d      	lsls	r5, r1, #24
 8004f50:	d50b      	bpl.n	8004f6a <_printf_i+0xa2>
 8004f52:	6806      	ldr	r6, [r0, #0]
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	2e00      	cmp	r6, #0
 8004f58:	da03      	bge.n	8004f62 <_printf_i+0x9a>
 8004f5a:	232d      	movs	r3, #45	@ 0x2d
 8004f5c:	9a03      	ldr	r2, [sp, #12]
 8004f5e:	4276      	negs	r6, r6
 8004f60:	7013      	strb	r3, [r2, #0]
 8004f62:	4b5e      	ldr	r3, [pc, #376]	@ (80050dc <_printf_i+0x214>)
 8004f64:	270a      	movs	r7, #10
 8004f66:	9304      	str	r3, [sp, #16]
 8004f68:	e018      	b.n	8004f9c <_printf_i+0xd4>
 8004f6a:	6806      	ldr	r6, [r0, #0]
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	0649      	lsls	r1, r1, #25
 8004f70:	d5f1      	bpl.n	8004f56 <_printf_i+0x8e>
 8004f72:	b236      	sxth	r6, r6
 8004f74:	e7ef      	b.n	8004f56 <_printf_i+0x8e>
 8004f76:	6808      	ldr	r0, [r1, #0]
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	c940      	ldmia	r1!, {r6}
 8004f7c:	0605      	lsls	r5, r0, #24
 8004f7e:	d402      	bmi.n	8004f86 <_printf_i+0xbe>
 8004f80:	0640      	lsls	r0, r0, #25
 8004f82:	d500      	bpl.n	8004f86 <_printf_i+0xbe>
 8004f84:	b2b6      	uxth	r6, r6
 8004f86:	6019      	str	r1, [r3, #0]
 8004f88:	4b54      	ldr	r3, [pc, #336]	@ (80050dc <_printf_i+0x214>)
 8004f8a:	270a      	movs	r7, #10
 8004f8c:	9304      	str	r3, [sp, #16]
 8004f8e:	2a6f      	cmp	r2, #111	@ 0x6f
 8004f90:	d100      	bne.n	8004f94 <_printf_i+0xcc>
 8004f92:	3f02      	subs	r7, #2
 8004f94:	0023      	movs	r3, r4
 8004f96:	2200      	movs	r2, #0
 8004f98:	3343      	adds	r3, #67	@ 0x43
 8004f9a:	701a      	strb	r2, [r3, #0]
 8004f9c:	6863      	ldr	r3, [r4, #4]
 8004f9e:	60a3      	str	r3, [r4, #8]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	db03      	blt.n	8004fac <_printf_i+0xe4>
 8004fa4:	2104      	movs	r1, #4
 8004fa6:	6822      	ldr	r2, [r4, #0]
 8004fa8:	438a      	bics	r2, r1
 8004faa:	6022      	str	r2, [r4, #0]
 8004fac:	2e00      	cmp	r6, #0
 8004fae:	d102      	bne.n	8004fb6 <_printf_i+0xee>
 8004fb0:	9d03      	ldr	r5, [sp, #12]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00c      	beq.n	8004fd0 <_printf_i+0x108>
 8004fb6:	9d03      	ldr	r5, [sp, #12]
 8004fb8:	0030      	movs	r0, r6
 8004fba:	0039      	movs	r1, r7
 8004fbc:	f7fb f93c 	bl	8000238 <__aeabi_uidivmod>
 8004fc0:	9b04      	ldr	r3, [sp, #16]
 8004fc2:	3d01      	subs	r5, #1
 8004fc4:	5c5b      	ldrb	r3, [r3, r1]
 8004fc6:	702b      	strb	r3, [r5, #0]
 8004fc8:	0033      	movs	r3, r6
 8004fca:	0006      	movs	r6, r0
 8004fcc:	429f      	cmp	r7, r3
 8004fce:	d9f3      	bls.n	8004fb8 <_printf_i+0xf0>
 8004fd0:	2f08      	cmp	r7, #8
 8004fd2:	d109      	bne.n	8004fe8 <_printf_i+0x120>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	07db      	lsls	r3, r3, #31
 8004fd8:	d506      	bpl.n	8004fe8 <_printf_i+0x120>
 8004fda:	6862      	ldr	r2, [r4, #4]
 8004fdc:	6923      	ldr	r3, [r4, #16]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	dc02      	bgt.n	8004fe8 <_printf_i+0x120>
 8004fe2:	2330      	movs	r3, #48	@ 0x30
 8004fe4:	3d01      	subs	r5, #1
 8004fe6:	702b      	strb	r3, [r5, #0]
 8004fe8:	9b03      	ldr	r3, [sp, #12]
 8004fea:	1b5b      	subs	r3, r3, r5
 8004fec:	6123      	str	r3, [r4, #16]
 8004fee:	9b07      	ldr	r3, [sp, #28]
 8004ff0:	0021      	movs	r1, r4
 8004ff2:	9300      	str	r3, [sp, #0]
 8004ff4:	9805      	ldr	r0, [sp, #20]
 8004ff6:	9b06      	ldr	r3, [sp, #24]
 8004ff8:	aa09      	add	r2, sp, #36	@ 0x24
 8004ffa:	f7ff fef5 	bl	8004de8 <_printf_common>
 8004ffe:	3001      	adds	r0, #1
 8005000:	d148      	bne.n	8005094 <_printf_i+0x1cc>
 8005002:	2001      	movs	r0, #1
 8005004:	4240      	negs	r0, r0
 8005006:	b00b      	add	sp, #44	@ 0x2c
 8005008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800500a:	2220      	movs	r2, #32
 800500c:	6809      	ldr	r1, [r1, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	6022      	str	r2, [r4, #0]
 8005012:	2278      	movs	r2, #120	@ 0x78
 8005014:	4932      	ldr	r1, [pc, #200]	@ (80050e0 <_printf_i+0x218>)
 8005016:	9104      	str	r1, [sp, #16]
 8005018:	0021      	movs	r1, r4
 800501a:	3145      	adds	r1, #69	@ 0x45
 800501c:	700a      	strb	r2, [r1, #0]
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	6822      	ldr	r2, [r4, #0]
 8005022:	c940      	ldmia	r1!, {r6}
 8005024:	0610      	lsls	r0, r2, #24
 8005026:	d402      	bmi.n	800502e <_printf_i+0x166>
 8005028:	0650      	lsls	r0, r2, #25
 800502a:	d500      	bpl.n	800502e <_printf_i+0x166>
 800502c:	b2b6      	uxth	r6, r6
 800502e:	6019      	str	r1, [r3, #0]
 8005030:	07d3      	lsls	r3, r2, #31
 8005032:	d502      	bpl.n	800503a <_printf_i+0x172>
 8005034:	2320      	movs	r3, #32
 8005036:	4313      	orrs	r3, r2
 8005038:	6023      	str	r3, [r4, #0]
 800503a:	2e00      	cmp	r6, #0
 800503c:	d001      	beq.n	8005042 <_printf_i+0x17a>
 800503e:	2710      	movs	r7, #16
 8005040:	e7a8      	b.n	8004f94 <_printf_i+0xcc>
 8005042:	2220      	movs	r2, #32
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	4393      	bics	r3, r2
 8005048:	6023      	str	r3, [r4, #0]
 800504a:	e7f8      	b.n	800503e <_printf_i+0x176>
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	680d      	ldr	r5, [r1, #0]
 8005050:	1d10      	adds	r0, r2, #4
 8005052:	6949      	ldr	r1, [r1, #20]
 8005054:	6018      	str	r0, [r3, #0]
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	062e      	lsls	r6, r5, #24
 800505a:	d501      	bpl.n	8005060 <_printf_i+0x198>
 800505c:	6019      	str	r1, [r3, #0]
 800505e:	e002      	b.n	8005066 <_printf_i+0x19e>
 8005060:	066d      	lsls	r5, r5, #25
 8005062:	d5fb      	bpl.n	800505c <_printf_i+0x194>
 8005064:	8019      	strh	r1, [r3, #0]
 8005066:	2300      	movs	r3, #0
 8005068:	9d03      	ldr	r5, [sp, #12]
 800506a:	6123      	str	r3, [r4, #16]
 800506c:	e7bf      	b.n	8004fee <_printf_i+0x126>
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	1d11      	adds	r1, r2, #4
 8005072:	6019      	str	r1, [r3, #0]
 8005074:	6815      	ldr	r5, [r2, #0]
 8005076:	2100      	movs	r1, #0
 8005078:	0028      	movs	r0, r5
 800507a:	6862      	ldr	r2, [r4, #4]
 800507c:	f000 fb70 	bl	8005760 <memchr>
 8005080:	2800      	cmp	r0, #0
 8005082:	d001      	beq.n	8005088 <_printf_i+0x1c0>
 8005084:	1b40      	subs	r0, r0, r5
 8005086:	6060      	str	r0, [r4, #4]
 8005088:	6863      	ldr	r3, [r4, #4]
 800508a:	6123      	str	r3, [r4, #16]
 800508c:	2300      	movs	r3, #0
 800508e:	9a03      	ldr	r2, [sp, #12]
 8005090:	7013      	strb	r3, [r2, #0]
 8005092:	e7ac      	b.n	8004fee <_printf_i+0x126>
 8005094:	002a      	movs	r2, r5
 8005096:	6923      	ldr	r3, [r4, #16]
 8005098:	9906      	ldr	r1, [sp, #24]
 800509a:	9805      	ldr	r0, [sp, #20]
 800509c:	9d07      	ldr	r5, [sp, #28]
 800509e:	47a8      	blx	r5
 80050a0:	3001      	adds	r0, #1
 80050a2:	d0ae      	beq.n	8005002 <_printf_i+0x13a>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	079b      	lsls	r3, r3, #30
 80050a8:	d415      	bmi.n	80050d6 <_printf_i+0x20e>
 80050aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050ac:	68e0      	ldr	r0, [r4, #12]
 80050ae:	4298      	cmp	r0, r3
 80050b0:	daa9      	bge.n	8005006 <_printf_i+0x13e>
 80050b2:	0018      	movs	r0, r3
 80050b4:	e7a7      	b.n	8005006 <_printf_i+0x13e>
 80050b6:	0022      	movs	r2, r4
 80050b8:	2301      	movs	r3, #1
 80050ba:	9906      	ldr	r1, [sp, #24]
 80050bc:	9805      	ldr	r0, [sp, #20]
 80050be:	9e07      	ldr	r6, [sp, #28]
 80050c0:	3219      	adds	r2, #25
 80050c2:	47b0      	blx	r6
 80050c4:	3001      	adds	r0, #1
 80050c6:	d09c      	beq.n	8005002 <_printf_i+0x13a>
 80050c8:	3501      	adds	r5, #1
 80050ca:	68e3      	ldr	r3, [r4, #12]
 80050cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80050ce:	1a9b      	subs	r3, r3, r2
 80050d0:	42ab      	cmp	r3, r5
 80050d2:	dcf0      	bgt.n	80050b6 <_printf_i+0x1ee>
 80050d4:	e7e9      	b.n	80050aa <_printf_i+0x1e2>
 80050d6:	2500      	movs	r5, #0
 80050d8:	e7f7      	b.n	80050ca <_printf_i+0x202>
 80050da:	46c0      	nop			@ (mov r8, r8)
 80050dc:	08005ebd 	.word	0x08005ebd
 80050e0:	08005ece 	.word	0x08005ece

080050e4 <_scanf_chars>:
 80050e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050e6:	0015      	movs	r5, r2
 80050e8:	688a      	ldr	r2, [r1, #8]
 80050ea:	000c      	movs	r4, r1
 80050ec:	9001      	str	r0, [sp, #4]
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d104      	bne.n	80050fc <_scanf_chars+0x18>
 80050f2:	698a      	ldr	r2, [r1, #24]
 80050f4:	2a00      	cmp	r2, #0
 80050f6:	d117      	bne.n	8005128 <_scanf_chars+0x44>
 80050f8:	3201      	adds	r2, #1
 80050fa:	60a2      	str	r2, [r4, #8]
 80050fc:	6822      	ldr	r2, [r4, #0]
 80050fe:	06d2      	lsls	r2, r2, #27
 8005100:	d403      	bmi.n	800510a <_scanf_chars+0x26>
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	1d11      	adds	r1, r2, #4
 8005106:	6019      	str	r1, [r3, #0]
 8005108:	6817      	ldr	r7, [r2, #0]
 800510a:	2600      	movs	r6, #0
 800510c:	69a0      	ldr	r0, [r4, #24]
 800510e:	2800      	cmp	r0, #0
 8005110:	d016      	beq.n	8005140 <_scanf_chars+0x5c>
 8005112:	2801      	cmp	r0, #1
 8005114:	d10b      	bne.n	800512e <_scanf_chars+0x4a>
 8005116:	682b      	ldr	r3, [r5, #0]
 8005118:	6962      	ldr	r2, [r4, #20]
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	5cd3      	ldrb	r3, [r2, r3]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10e      	bne.n	8005140 <_scanf_chars+0x5c>
 8005122:	2e00      	cmp	r6, #0
 8005124:	d03b      	beq.n	800519e <_scanf_chars+0xba>
 8005126:	e029      	b.n	800517c <_scanf_chars+0x98>
 8005128:	2201      	movs	r2, #1
 800512a:	4252      	negs	r2, r2
 800512c:	e7e5      	b.n	80050fa <_scanf_chars+0x16>
 800512e:	2802      	cmp	r0, #2
 8005130:	d124      	bne.n	800517c <_scanf_chars+0x98>
 8005132:	682b      	ldr	r3, [r5, #0]
 8005134:	4a1a      	ldr	r2, [pc, #104]	@ (80051a0 <_scanf_chars+0xbc>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	5cd3      	ldrb	r3, [r2, r3]
 800513a:	2208      	movs	r2, #8
 800513c:	4213      	tst	r3, r2
 800513e:	d11d      	bne.n	800517c <_scanf_chars+0x98>
 8005140:	2210      	movs	r2, #16
 8005142:	6823      	ldr	r3, [r4, #0]
 8005144:	3601      	adds	r6, #1
 8005146:	4213      	tst	r3, r2
 8005148:	d103      	bne.n	8005152 <_scanf_chars+0x6e>
 800514a:	682b      	ldr	r3, [r5, #0]
 800514c:	781b      	ldrb	r3, [r3, #0]
 800514e:	703b      	strb	r3, [r7, #0]
 8005150:	3701      	adds	r7, #1
 8005152:	682a      	ldr	r2, [r5, #0]
 8005154:	686b      	ldr	r3, [r5, #4]
 8005156:	3201      	adds	r2, #1
 8005158:	602a      	str	r2, [r5, #0]
 800515a:	68a2      	ldr	r2, [r4, #8]
 800515c:	3b01      	subs	r3, #1
 800515e:	3a01      	subs	r2, #1
 8005160:	606b      	str	r3, [r5, #4]
 8005162:	60a2      	str	r2, [r4, #8]
 8005164:	2a00      	cmp	r2, #0
 8005166:	d009      	beq.n	800517c <_scanf_chars+0x98>
 8005168:	2b00      	cmp	r3, #0
 800516a:	dccf      	bgt.n	800510c <_scanf_chars+0x28>
 800516c:	23c0      	movs	r3, #192	@ 0xc0
 800516e:	005b      	lsls	r3, r3, #1
 8005170:	0029      	movs	r1, r5
 8005172:	58e3      	ldr	r3, [r4, r3]
 8005174:	9801      	ldr	r0, [sp, #4]
 8005176:	4798      	blx	r3
 8005178:	2800      	cmp	r0, #0
 800517a:	d0c7      	beq.n	800510c <_scanf_chars+0x28>
 800517c:	6822      	ldr	r2, [r4, #0]
 800517e:	2310      	movs	r3, #16
 8005180:	0011      	movs	r1, r2
 8005182:	4019      	ands	r1, r3
 8005184:	421a      	tst	r2, r3
 8005186:	d106      	bne.n	8005196 <_scanf_chars+0xb2>
 8005188:	68e3      	ldr	r3, [r4, #12]
 800518a:	3301      	adds	r3, #1
 800518c:	60e3      	str	r3, [r4, #12]
 800518e:	69a3      	ldr	r3, [r4, #24]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d000      	beq.n	8005196 <_scanf_chars+0xb2>
 8005194:	7039      	strb	r1, [r7, #0]
 8005196:	2000      	movs	r0, #0
 8005198:	6923      	ldr	r3, [r4, #16]
 800519a:	199b      	adds	r3, r3, r6
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051a0:	08005efb 	.word	0x08005efb

080051a4 <_scanf_i>:
 80051a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051a6:	b08b      	sub	sp, #44	@ 0x2c
 80051a8:	9301      	str	r3, [sp, #4]
 80051aa:	4b78      	ldr	r3, [pc, #480]	@ (800538c <_scanf_i+0x1e8>)
 80051ac:	0016      	movs	r6, r2
 80051ae:	9004      	str	r0, [sp, #16]
 80051b0:	aa07      	add	r2, sp, #28
 80051b2:	cba1      	ldmia	r3!, {r0, r5, r7}
 80051b4:	c2a1      	stmia	r2!, {r0, r5, r7}
 80051b6:	4a76      	ldr	r2, [pc, #472]	@ (8005390 <_scanf_i+0x1ec>)
 80051b8:	698b      	ldr	r3, [r1, #24]
 80051ba:	000c      	movs	r4, r1
 80051bc:	9205      	str	r2, [sp, #20]
 80051be:	2b03      	cmp	r3, #3
 80051c0:	d101      	bne.n	80051c6 <_scanf_i+0x22>
 80051c2:	4b74      	ldr	r3, [pc, #464]	@ (8005394 <_scanf_i+0x1f0>)
 80051c4:	9305      	str	r3, [sp, #20]
 80051c6:	22ae      	movs	r2, #174	@ 0xae
 80051c8:	2000      	movs	r0, #0
 80051ca:	68a3      	ldr	r3, [r4, #8]
 80051cc:	0052      	lsls	r2, r2, #1
 80051ce:	1e59      	subs	r1, r3, #1
 80051d0:	9003      	str	r0, [sp, #12]
 80051d2:	4291      	cmp	r1, r2
 80051d4:	d905      	bls.n	80051e2 <_scanf_i+0x3e>
 80051d6:	3b5e      	subs	r3, #94	@ 0x5e
 80051d8:	3bff      	subs	r3, #255	@ 0xff
 80051da:	9303      	str	r3, [sp, #12]
 80051dc:	235e      	movs	r3, #94	@ 0x5e
 80051de:	33ff      	adds	r3, #255	@ 0xff
 80051e0:	60a3      	str	r3, [r4, #8]
 80051e2:	0023      	movs	r3, r4
 80051e4:	331c      	adds	r3, #28
 80051e6:	9300      	str	r3, [sp, #0]
 80051e8:	23d0      	movs	r3, #208	@ 0xd0
 80051ea:	2700      	movs	r7, #0
 80051ec:	6822      	ldr	r2, [r4, #0]
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	4313      	orrs	r3, r2
 80051f2:	6023      	str	r3, [r4, #0]
 80051f4:	9b00      	ldr	r3, [sp, #0]
 80051f6:	9302      	str	r3, [sp, #8]
 80051f8:	6833      	ldr	r3, [r6, #0]
 80051fa:	a807      	add	r0, sp, #28
 80051fc:	7819      	ldrb	r1, [r3, #0]
 80051fe:	00bb      	lsls	r3, r7, #2
 8005200:	2202      	movs	r2, #2
 8005202:	5818      	ldr	r0, [r3, r0]
 8005204:	f000 faac 	bl	8005760 <memchr>
 8005208:	2800      	cmp	r0, #0
 800520a:	d029      	beq.n	8005260 <_scanf_i+0xbc>
 800520c:	2f01      	cmp	r7, #1
 800520e:	d15e      	bne.n	80052ce <_scanf_i+0x12a>
 8005210:	6863      	ldr	r3, [r4, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d106      	bne.n	8005224 <_scanf_i+0x80>
 8005216:	3308      	adds	r3, #8
 8005218:	6822      	ldr	r2, [r4, #0]
 800521a:	6063      	str	r3, [r4, #4]
 800521c:	33f9      	adds	r3, #249	@ 0xf9
 800521e:	33ff      	adds	r3, #255	@ 0xff
 8005220:	4313      	orrs	r3, r2
 8005222:	6023      	str	r3, [r4, #0]
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	4a5c      	ldr	r2, [pc, #368]	@ (8005398 <_scanf_i+0x1f4>)
 8005228:	4013      	ands	r3, r2
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	68a3      	ldr	r3, [r4, #8]
 800522e:	1e5a      	subs	r2, r3, #1
 8005230:	60a2      	str	r2, [r4, #8]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d014      	beq.n	8005260 <_scanf_i+0xbc>
 8005236:	6833      	ldr	r3, [r6, #0]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	6032      	str	r2, [r6, #0]
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	9a02      	ldr	r2, [sp, #8]
 8005240:	7013      	strb	r3, [r2, #0]
 8005242:	6873      	ldr	r3, [r6, #4]
 8005244:	1c55      	adds	r5, r2, #1
 8005246:	3b01      	subs	r3, #1
 8005248:	6073      	str	r3, [r6, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	dc07      	bgt.n	800525e <_scanf_i+0xba>
 800524e:	23c0      	movs	r3, #192	@ 0xc0
 8005250:	005b      	lsls	r3, r3, #1
 8005252:	0031      	movs	r1, r6
 8005254:	58e3      	ldr	r3, [r4, r3]
 8005256:	9804      	ldr	r0, [sp, #16]
 8005258:	4798      	blx	r3
 800525a:	2800      	cmp	r0, #0
 800525c:	d17e      	bne.n	800535c <_scanf_i+0x1b8>
 800525e:	9502      	str	r5, [sp, #8]
 8005260:	3701      	adds	r7, #1
 8005262:	2f03      	cmp	r7, #3
 8005264:	d1c8      	bne.n	80051f8 <_scanf_i+0x54>
 8005266:	6863      	ldr	r3, [r4, #4]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <_scanf_i+0xcc>
 800526c:	330a      	adds	r3, #10
 800526e:	6063      	str	r3, [r4, #4]
 8005270:	2700      	movs	r7, #0
 8005272:	6863      	ldr	r3, [r4, #4]
 8005274:	4949      	ldr	r1, [pc, #292]	@ (800539c <_scanf_i+0x1f8>)
 8005276:	6960      	ldr	r0, [r4, #20]
 8005278:	1ac9      	subs	r1, r1, r3
 800527a:	f000 f9b0 	bl	80055de <__sccl>
 800527e:	9d02      	ldr	r5, [sp, #8]
 8005280:	68a3      	ldr	r3, [r4, #8]
 8005282:	6820      	ldr	r0, [r4, #0]
 8005284:	9302      	str	r3, [sp, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d03f      	beq.n	800530a <_scanf_i+0x166>
 800528a:	6831      	ldr	r1, [r6, #0]
 800528c:	6963      	ldr	r3, [r4, #20]
 800528e:	780a      	ldrb	r2, [r1, #0]
 8005290:	5c9b      	ldrb	r3, [r3, r2]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d039      	beq.n	800530a <_scanf_i+0x166>
 8005296:	2a30      	cmp	r2, #48	@ 0x30
 8005298:	d128      	bne.n	80052ec <_scanf_i+0x148>
 800529a:	2380      	movs	r3, #128	@ 0x80
 800529c:	011b      	lsls	r3, r3, #4
 800529e:	4218      	tst	r0, r3
 80052a0:	d024      	beq.n	80052ec <_scanf_i+0x148>
 80052a2:	9b03      	ldr	r3, [sp, #12]
 80052a4:	3701      	adds	r7, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d005      	beq.n	80052b6 <_scanf_i+0x112>
 80052aa:	001a      	movs	r2, r3
 80052ac:	9b02      	ldr	r3, [sp, #8]
 80052ae:	3a01      	subs	r2, #1
 80052b0:	3301      	adds	r3, #1
 80052b2:	9203      	str	r2, [sp, #12]
 80052b4:	60a3      	str	r3, [r4, #8]
 80052b6:	6873      	ldr	r3, [r6, #4]
 80052b8:	3b01      	subs	r3, #1
 80052ba:	6073      	str	r3, [r6, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dd1c      	ble.n	80052fa <_scanf_i+0x156>
 80052c0:	6833      	ldr	r3, [r6, #0]
 80052c2:	3301      	adds	r3, #1
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	68a3      	ldr	r3, [r4, #8]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	60a3      	str	r3, [r4, #8]
 80052cc:	e7d8      	b.n	8005280 <_scanf_i+0xdc>
 80052ce:	2f02      	cmp	r7, #2
 80052d0:	d1ac      	bne.n	800522c <_scanf_i+0x88>
 80052d2:	23c0      	movs	r3, #192	@ 0xc0
 80052d4:	2180      	movs	r1, #128	@ 0x80
 80052d6:	6822      	ldr	r2, [r4, #0]
 80052d8:	00db      	lsls	r3, r3, #3
 80052da:	4013      	ands	r3, r2
 80052dc:	0089      	lsls	r1, r1, #2
 80052de:	428b      	cmp	r3, r1
 80052e0:	d1c1      	bne.n	8005266 <_scanf_i+0xc2>
 80052e2:	2310      	movs	r3, #16
 80052e4:	6063      	str	r3, [r4, #4]
 80052e6:	33f0      	adds	r3, #240	@ 0xf0
 80052e8:	4313      	orrs	r3, r2
 80052ea:	e79e      	b.n	800522a <_scanf_i+0x86>
 80052ec:	4b2c      	ldr	r3, [pc, #176]	@ (80053a0 <_scanf_i+0x1fc>)
 80052ee:	4003      	ands	r3, r0
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	780b      	ldrb	r3, [r1, #0]
 80052f4:	702b      	strb	r3, [r5, #0]
 80052f6:	3501      	adds	r5, #1
 80052f8:	e7dd      	b.n	80052b6 <_scanf_i+0x112>
 80052fa:	23c0      	movs	r3, #192	@ 0xc0
 80052fc:	005b      	lsls	r3, r3, #1
 80052fe:	0031      	movs	r1, r6
 8005300:	58e3      	ldr	r3, [r4, r3]
 8005302:	9804      	ldr	r0, [sp, #16]
 8005304:	4798      	blx	r3
 8005306:	2800      	cmp	r0, #0
 8005308:	d0dd      	beq.n	80052c6 <_scanf_i+0x122>
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	05db      	lsls	r3, r3, #23
 800530e:	d50e      	bpl.n	800532e <_scanf_i+0x18a>
 8005310:	9b00      	ldr	r3, [sp, #0]
 8005312:	429d      	cmp	r5, r3
 8005314:	d907      	bls.n	8005326 <_scanf_i+0x182>
 8005316:	23be      	movs	r3, #190	@ 0xbe
 8005318:	3d01      	subs	r5, #1
 800531a:	005b      	lsls	r3, r3, #1
 800531c:	0032      	movs	r2, r6
 800531e:	7829      	ldrb	r1, [r5, #0]
 8005320:	58e3      	ldr	r3, [r4, r3]
 8005322:	9804      	ldr	r0, [sp, #16]
 8005324:	4798      	blx	r3
 8005326:	9b00      	ldr	r3, [sp, #0]
 8005328:	2001      	movs	r0, #1
 800532a:	429d      	cmp	r5, r3
 800532c:	d029      	beq.n	8005382 <_scanf_i+0x1de>
 800532e:	6821      	ldr	r1, [r4, #0]
 8005330:	2310      	movs	r3, #16
 8005332:	000a      	movs	r2, r1
 8005334:	401a      	ands	r2, r3
 8005336:	4219      	tst	r1, r3
 8005338:	d11c      	bne.n	8005374 <_scanf_i+0x1d0>
 800533a:	702a      	strb	r2, [r5, #0]
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	9900      	ldr	r1, [sp, #0]
 8005340:	9804      	ldr	r0, [sp, #16]
 8005342:	9e05      	ldr	r6, [sp, #20]
 8005344:	47b0      	blx	r6
 8005346:	9b01      	ldr	r3, [sp, #4]
 8005348:	6822      	ldr	r2, [r4, #0]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	0691      	lsls	r1, r2, #26
 800534e:	d507      	bpl.n	8005360 <_scanf_i+0x1bc>
 8005350:	9901      	ldr	r1, [sp, #4]
 8005352:	1d1a      	adds	r2, r3, #4
 8005354:	600a      	str	r2, [r1, #0]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	6018      	str	r0, [r3, #0]
 800535a:	e008      	b.n	800536e <_scanf_i+0x1ca>
 800535c:	2700      	movs	r7, #0
 800535e:	e7d4      	b.n	800530a <_scanf_i+0x166>
 8005360:	1d19      	adds	r1, r3, #4
 8005362:	07d6      	lsls	r6, r2, #31
 8005364:	d50f      	bpl.n	8005386 <_scanf_i+0x1e2>
 8005366:	9a01      	ldr	r2, [sp, #4]
 8005368:	6011      	str	r1, [r2, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	8018      	strh	r0, [r3, #0]
 800536e:	68e3      	ldr	r3, [r4, #12]
 8005370:	3301      	adds	r3, #1
 8005372:	60e3      	str	r3, [r4, #12]
 8005374:	2000      	movs	r0, #0
 8005376:	9b00      	ldr	r3, [sp, #0]
 8005378:	1aed      	subs	r5, r5, r3
 800537a:	6923      	ldr	r3, [r4, #16]
 800537c:	19ed      	adds	r5, r5, r7
 800537e:	195b      	adds	r3, r3, r5
 8005380:	6123      	str	r3, [r4, #16]
 8005382:	b00b      	add	sp, #44	@ 0x2c
 8005384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005386:	9a01      	ldr	r2, [sp, #4]
 8005388:	6011      	str	r1, [r2, #0]
 800538a:	e7e4      	b.n	8005356 <_scanf_i+0x1b2>
 800538c:	08005e28 	.word	0x08005e28
 8005390:	080059f5 	.word	0x080059f5
 8005394:	080058e9 	.word	0x080058e9
 8005398:	fffffaff 	.word	0xfffffaff
 800539c:	08005eef 	.word	0x08005eef
 80053a0:	fffff6ff 	.word	0xfffff6ff

080053a4 <__sflush_r>:
 80053a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053a6:	220c      	movs	r2, #12
 80053a8:	5e8b      	ldrsh	r3, [r1, r2]
 80053aa:	0005      	movs	r5, r0
 80053ac:	000c      	movs	r4, r1
 80053ae:	071a      	lsls	r2, r3, #28
 80053b0:	d456      	bmi.n	8005460 <__sflush_r+0xbc>
 80053b2:	684a      	ldr	r2, [r1, #4]
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	dc02      	bgt.n	80053be <__sflush_r+0x1a>
 80053b8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80053ba:	2a00      	cmp	r2, #0
 80053bc:	dd4e      	ble.n	800545c <__sflush_r+0xb8>
 80053be:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80053c0:	2f00      	cmp	r7, #0
 80053c2:	d04b      	beq.n	800545c <__sflush_r+0xb8>
 80053c4:	2200      	movs	r2, #0
 80053c6:	2080      	movs	r0, #128	@ 0x80
 80053c8:	682e      	ldr	r6, [r5, #0]
 80053ca:	602a      	str	r2, [r5, #0]
 80053cc:	001a      	movs	r2, r3
 80053ce:	0140      	lsls	r0, r0, #5
 80053d0:	6a21      	ldr	r1, [r4, #32]
 80053d2:	4002      	ands	r2, r0
 80053d4:	4203      	tst	r3, r0
 80053d6:	d033      	beq.n	8005440 <__sflush_r+0x9c>
 80053d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80053da:	89a3      	ldrh	r3, [r4, #12]
 80053dc:	075b      	lsls	r3, r3, #29
 80053de:	d506      	bpl.n	80053ee <__sflush_r+0x4a>
 80053e0:	6863      	ldr	r3, [r4, #4]
 80053e2:	1ad2      	subs	r2, r2, r3
 80053e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d001      	beq.n	80053ee <__sflush_r+0x4a>
 80053ea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80053ec:	1ad2      	subs	r2, r2, r3
 80053ee:	2300      	movs	r3, #0
 80053f0:	0028      	movs	r0, r5
 80053f2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80053f4:	6a21      	ldr	r1, [r4, #32]
 80053f6:	47b8      	blx	r7
 80053f8:	89a2      	ldrh	r2, [r4, #12]
 80053fa:	1c43      	adds	r3, r0, #1
 80053fc:	d106      	bne.n	800540c <__sflush_r+0x68>
 80053fe:	6829      	ldr	r1, [r5, #0]
 8005400:	291d      	cmp	r1, #29
 8005402:	d846      	bhi.n	8005492 <__sflush_r+0xee>
 8005404:	4b29      	ldr	r3, [pc, #164]	@ (80054ac <__sflush_r+0x108>)
 8005406:	410b      	asrs	r3, r1
 8005408:	07db      	lsls	r3, r3, #31
 800540a:	d442      	bmi.n	8005492 <__sflush_r+0xee>
 800540c:	2300      	movs	r3, #0
 800540e:	6063      	str	r3, [r4, #4]
 8005410:	6923      	ldr	r3, [r4, #16]
 8005412:	6023      	str	r3, [r4, #0]
 8005414:	04d2      	lsls	r2, r2, #19
 8005416:	d505      	bpl.n	8005424 <__sflush_r+0x80>
 8005418:	1c43      	adds	r3, r0, #1
 800541a:	d102      	bne.n	8005422 <__sflush_r+0x7e>
 800541c:	682b      	ldr	r3, [r5, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d100      	bne.n	8005424 <__sflush_r+0x80>
 8005422:	6560      	str	r0, [r4, #84]	@ 0x54
 8005424:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005426:	602e      	str	r6, [r5, #0]
 8005428:	2900      	cmp	r1, #0
 800542a:	d017      	beq.n	800545c <__sflush_r+0xb8>
 800542c:	0023      	movs	r3, r4
 800542e:	3344      	adds	r3, #68	@ 0x44
 8005430:	4299      	cmp	r1, r3
 8005432:	d002      	beq.n	800543a <__sflush_r+0x96>
 8005434:	0028      	movs	r0, r5
 8005436:	f7fe ff7b 	bl	8004330 <_free_r>
 800543a:	2300      	movs	r3, #0
 800543c:	6363      	str	r3, [r4, #52]	@ 0x34
 800543e:	e00d      	b.n	800545c <__sflush_r+0xb8>
 8005440:	2301      	movs	r3, #1
 8005442:	0028      	movs	r0, r5
 8005444:	47b8      	blx	r7
 8005446:	0002      	movs	r2, r0
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d1c6      	bne.n	80053da <__sflush_r+0x36>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0c3      	beq.n	80053da <__sflush_r+0x36>
 8005452:	2b1d      	cmp	r3, #29
 8005454:	d001      	beq.n	800545a <__sflush_r+0xb6>
 8005456:	2b16      	cmp	r3, #22
 8005458:	d11a      	bne.n	8005490 <__sflush_r+0xec>
 800545a:	602e      	str	r6, [r5, #0]
 800545c:	2000      	movs	r0, #0
 800545e:	e01e      	b.n	800549e <__sflush_r+0xfa>
 8005460:	690e      	ldr	r6, [r1, #16]
 8005462:	2e00      	cmp	r6, #0
 8005464:	d0fa      	beq.n	800545c <__sflush_r+0xb8>
 8005466:	680f      	ldr	r7, [r1, #0]
 8005468:	600e      	str	r6, [r1, #0]
 800546a:	1bba      	subs	r2, r7, r6
 800546c:	9201      	str	r2, [sp, #4]
 800546e:	2200      	movs	r2, #0
 8005470:	079b      	lsls	r3, r3, #30
 8005472:	d100      	bne.n	8005476 <__sflush_r+0xd2>
 8005474:	694a      	ldr	r2, [r1, #20]
 8005476:	60a2      	str	r2, [r4, #8]
 8005478:	9b01      	ldr	r3, [sp, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	ddee      	ble.n	800545c <__sflush_r+0xb8>
 800547e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005480:	0032      	movs	r2, r6
 8005482:	001f      	movs	r7, r3
 8005484:	0028      	movs	r0, r5
 8005486:	9b01      	ldr	r3, [sp, #4]
 8005488:	6a21      	ldr	r1, [r4, #32]
 800548a:	47b8      	blx	r7
 800548c:	2800      	cmp	r0, #0
 800548e:	dc07      	bgt.n	80054a0 <__sflush_r+0xfc>
 8005490:	89a2      	ldrh	r2, [r4, #12]
 8005492:	2340      	movs	r3, #64	@ 0x40
 8005494:	2001      	movs	r0, #1
 8005496:	4313      	orrs	r3, r2
 8005498:	b21b      	sxth	r3, r3
 800549a:	81a3      	strh	r3, [r4, #12]
 800549c:	4240      	negs	r0, r0
 800549e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054a0:	9b01      	ldr	r3, [sp, #4]
 80054a2:	1836      	adds	r6, r6, r0
 80054a4:	1a1b      	subs	r3, r3, r0
 80054a6:	9301      	str	r3, [sp, #4]
 80054a8:	e7e6      	b.n	8005478 <__sflush_r+0xd4>
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	dfbffffe 	.word	0xdfbffffe

080054b0 <_fflush_r>:
 80054b0:	690b      	ldr	r3, [r1, #16]
 80054b2:	b570      	push	{r4, r5, r6, lr}
 80054b4:	0005      	movs	r5, r0
 80054b6:	000c      	movs	r4, r1
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d102      	bne.n	80054c2 <_fflush_r+0x12>
 80054bc:	2500      	movs	r5, #0
 80054be:	0028      	movs	r0, r5
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	2800      	cmp	r0, #0
 80054c4:	d004      	beq.n	80054d0 <_fflush_r+0x20>
 80054c6:	6a03      	ldr	r3, [r0, #32]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <_fflush_r+0x20>
 80054cc:	f7fe fca0 	bl	8003e10 <__sinit>
 80054d0:	220c      	movs	r2, #12
 80054d2:	5ea3      	ldrsh	r3, [r4, r2]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f1      	beq.n	80054bc <_fflush_r+0xc>
 80054d8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80054da:	07d2      	lsls	r2, r2, #31
 80054dc:	d404      	bmi.n	80054e8 <_fflush_r+0x38>
 80054de:	059b      	lsls	r3, r3, #22
 80054e0:	d402      	bmi.n	80054e8 <_fflush_r+0x38>
 80054e2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80054e4:	f7fe ff19 	bl	800431a <__retarget_lock_acquire_recursive>
 80054e8:	0028      	movs	r0, r5
 80054ea:	0021      	movs	r1, r4
 80054ec:	f7ff ff5a 	bl	80053a4 <__sflush_r>
 80054f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80054f2:	0005      	movs	r5, r0
 80054f4:	07db      	lsls	r3, r3, #31
 80054f6:	d4e2      	bmi.n	80054be <_fflush_r+0xe>
 80054f8:	89a3      	ldrh	r3, [r4, #12]
 80054fa:	059b      	lsls	r3, r3, #22
 80054fc:	d4df      	bmi.n	80054be <_fflush_r+0xe>
 80054fe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005500:	f7fe ff0c 	bl	800431c <__retarget_lock_release_recursive>
 8005504:	e7db      	b.n	80054be <_fflush_r+0xe>
	...

08005508 <__swhatbuf_r>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	000e      	movs	r6, r1
 800550c:	001d      	movs	r5, r3
 800550e:	230e      	movs	r3, #14
 8005510:	5ec9      	ldrsh	r1, [r1, r3]
 8005512:	0014      	movs	r4, r2
 8005514:	b096      	sub	sp, #88	@ 0x58
 8005516:	2900      	cmp	r1, #0
 8005518:	da0c      	bge.n	8005534 <__swhatbuf_r+0x2c>
 800551a:	89b2      	ldrh	r2, [r6, #12]
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	0011      	movs	r1, r2
 8005520:	4019      	ands	r1, r3
 8005522:	421a      	tst	r2, r3
 8005524:	d114      	bne.n	8005550 <__swhatbuf_r+0x48>
 8005526:	2380      	movs	r3, #128	@ 0x80
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	2000      	movs	r0, #0
 800552c:	6029      	str	r1, [r5, #0]
 800552e:	6023      	str	r3, [r4, #0]
 8005530:	b016      	add	sp, #88	@ 0x58
 8005532:	bd70      	pop	{r4, r5, r6, pc}
 8005534:	466a      	mov	r2, sp
 8005536:	f000 f8dd 	bl	80056f4 <_fstat_r>
 800553a:	2800      	cmp	r0, #0
 800553c:	dbed      	blt.n	800551a <__swhatbuf_r+0x12>
 800553e:	23f0      	movs	r3, #240	@ 0xf0
 8005540:	9901      	ldr	r1, [sp, #4]
 8005542:	021b      	lsls	r3, r3, #8
 8005544:	4019      	ands	r1, r3
 8005546:	4b04      	ldr	r3, [pc, #16]	@ (8005558 <__swhatbuf_r+0x50>)
 8005548:	18c9      	adds	r1, r1, r3
 800554a:	424b      	negs	r3, r1
 800554c:	4159      	adcs	r1, r3
 800554e:	e7ea      	b.n	8005526 <__swhatbuf_r+0x1e>
 8005550:	2100      	movs	r1, #0
 8005552:	2340      	movs	r3, #64	@ 0x40
 8005554:	e7e9      	b.n	800552a <__swhatbuf_r+0x22>
 8005556:	46c0      	nop			@ (mov r8, r8)
 8005558:	ffffe000 	.word	0xffffe000

0800555c <__smakebuf_r>:
 800555c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800555e:	2602      	movs	r6, #2
 8005560:	898b      	ldrh	r3, [r1, #12]
 8005562:	0005      	movs	r5, r0
 8005564:	000c      	movs	r4, r1
 8005566:	b085      	sub	sp, #20
 8005568:	4233      	tst	r3, r6
 800556a:	d007      	beq.n	800557c <__smakebuf_r+0x20>
 800556c:	0023      	movs	r3, r4
 800556e:	3347      	adds	r3, #71	@ 0x47
 8005570:	6023      	str	r3, [r4, #0]
 8005572:	6123      	str	r3, [r4, #16]
 8005574:	2301      	movs	r3, #1
 8005576:	6163      	str	r3, [r4, #20]
 8005578:	b005      	add	sp, #20
 800557a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800557c:	ab03      	add	r3, sp, #12
 800557e:	aa02      	add	r2, sp, #8
 8005580:	f7ff ffc2 	bl	8005508 <__swhatbuf_r>
 8005584:	9f02      	ldr	r7, [sp, #8]
 8005586:	9001      	str	r0, [sp, #4]
 8005588:	0039      	movs	r1, r7
 800558a:	0028      	movs	r0, r5
 800558c:	f7fe ff3c 	bl	8004408 <_malloc_r>
 8005590:	2800      	cmp	r0, #0
 8005592:	d108      	bne.n	80055a6 <__smakebuf_r+0x4a>
 8005594:	220c      	movs	r2, #12
 8005596:	5ea3      	ldrsh	r3, [r4, r2]
 8005598:	059a      	lsls	r2, r3, #22
 800559a:	d4ed      	bmi.n	8005578 <__smakebuf_r+0x1c>
 800559c:	2203      	movs	r2, #3
 800559e:	4393      	bics	r3, r2
 80055a0:	431e      	orrs	r6, r3
 80055a2:	81a6      	strh	r6, [r4, #12]
 80055a4:	e7e2      	b.n	800556c <__smakebuf_r+0x10>
 80055a6:	2380      	movs	r3, #128	@ 0x80
 80055a8:	89a2      	ldrh	r2, [r4, #12]
 80055aa:	6020      	str	r0, [r4, #0]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	81a3      	strh	r3, [r4, #12]
 80055b0:	9b03      	ldr	r3, [sp, #12]
 80055b2:	6120      	str	r0, [r4, #16]
 80055b4:	6167      	str	r7, [r4, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <__smakebuf_r+0x78>
 80055ba:	0028      	movs	r0, r5
 80055bc:	230e      	movs	r3, #14
 80055be:	5ee1      	ldrsh	r1, [r4, r3]
 80055c0:	f000 f8aa 	bl	8005718 <_isatty_r>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d005      	beq.n	80055d4 <__smakebuf_r+0x78>
 80055c8:	2303      	movs	r3, #3
 80055ca:	89a2      	ldrh	r2, [r4, #12]
 80055cc:	439a      	bics	r2, r3
 80055ce:	3b02      	subs	r3, #2
 80055d0:	4313      	orrs	r3, r2
 80055d2:	81a3      	strh	r3, [r4, #12]
 80055d4:	89a3      	ldrh	r3, [r4, #12]
 80055d6:	9a01      	ldr	r2, [sp, #4]
 80055d8:	4313      	orrs	r3, r2
 80055da:	81a3      	strh	r3, [r4, #12]
 80055dc:	e7cc      	b.n	8005578 <__smakebuf_r+0x1c>

080055de <__sccl>:
 80055de:	b570      	push	{r4, r5, r6, lr}
 80055e0:	780b      	ldrb	r3, [r1, #0]
 80055e2:	0004      	movs	r4, r0
 80055e4:	2b5e      	cmp	r3, #94	@ 0x5e
 80055e6:	d018      	beq.n	800561a <__sccl+0x3c>
 80055e8:	2200      	movs	r2, #0
 80055ea:	1c4d      	adds	r5, r1, #1
 80055ec:	0021      	movs	r1, r4
 80055ee:	1c60      	adds	r0, r4, #1
 80055f0:	30ff      	adds	r0, #255	@ 0xff
 80055f2:	700a      	strb	r2, [r1, #0]
 80055f4:	3101      	adds	r1, #1
 80055f6:	4281      	cmp	r1, r0
 80055f8:	d1fb      	bne.n	80055f2 <__sccl+0x14>
 80055fa:	1e68      	subs	r0, r5, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d00b      	beq.n	8005618 <__sccl+0x3a>
 8005600:	2101      	movs	r1, #1
 8005602:	404a      	eors	r2, r1
 8005604:	0028      	movs	r0, r5
 8005606:	54e2      	strb	r2, [r4, r3]
 8005608:	7801      	ldrb	r1, [r0, #0]
 800560a:	1c45      	adds	r5, r0, #1
 800560c:	292d      	cmp	r1, #45	@ 0x2d
 800560e:	d00a      	beq.n	8005626 <__sccl+0x48>
 8005610:	295d      	cmp	r1, #93	@ 0x5d
 8005612:	d01b      	beq.n	800564c <__sccl+0x6e>
 8005614:	2900      	cmp	r1, #0
 8005616:	d104      	bne.n	8005622 <__sccl+0x44>
 8005618:	bd70      	pop	{r4, r5, r6, pc}
 800561a:	2201      	movs	r2, #1
 800561c:	784b      	ldrb	r3, [r1, #1]
 800561e:	1c8d      	adds	r5, r1, #2
 8005620:	e7e4      	b.n	80055ec <__sccl+0xe>
 8005622:	000b      	movs	r3, r1
 8005624:	e7ee      	b.n	8005604 <__sccl+0x26>
 8005626:	7846      	ldrb	r6, [r0, #1]
 8005628:	2e5d      	cmp	r6, #93	@ 0x5d
 800562a:	d0fa      	beq.n	8005622 <__sccl+0x44>
 800562c:	42b3      	cmp	r3, r6
 800562e:	dcf8      	bgt.n	8005622 <__sccl+0x44>
 8005630:	0019      	movs	r1, r3
 8005632:	3002      	adds	r0, #2
 8005634:	3101      	adds	r1, #1
 8005636:	5462      	strb	r2, [r4, r1]
 8005638:	428e      	cmp	r6, r1
 800563a:	dcfb      	bgt.n	8005634 <__sccl+0x56>
 800563c:	2100      	movs	r1, #0
 800563e:	1c5d      	adds	r5, r3, #1
 8005640:	42b3      	cmp	r3, r6
 8005642:	da01      	bge.n	8005648 <__sccl+0x6a>
 8005644:	1af1      	subs	r1, r6, r3
 8005646:	3901      	subs	r1, #1
 8005648:	186b      	adds	r3, r5, r1
 800564a:	e7dd      	b.n	8005608 <__sccl+0x2a>
 800564c:	0028      	movs	r0, r5
 800564e:	e7e3      	b.n	8005618 <__sccl+0x3a>

08005650 <__submore>:
 8005650:	000b      	movs	r3, r1
 8005652:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005654:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8005656:	3344      	adds	r3, #68	@ 0x44
 8005658:	000c      	movs	r4, r1
 800565a:	429d      	cmp	r5, r3
 800565c:	d11c      	bne.n	8005698 <__submore+0x48>
 800565e:	2680      	movs	r6, #128	@ 0x80
 8005660:	00f6      	lsls	r6, r6, #3
 8005662:	0031      	movs	r1, r6
 8005664:	f7fe fed0 	bl	8004408 <_malloc_r>
 8005668:	2800      	cmp	r0, #0
 800566a:	d102      	bne.n	8005672 <__submore+0x22>
 800566c:	2001      	movs	r0, #1
 800566e:	4240      	negs	r0, r0
 8005670:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005672:	0023      	movs	r3, r4
 8005674:	6360      	str	r0, [r4, #52]	@ 0x34
 8005676:	63a6      	str	r6, [r4, #56]	@ 0x38
 8005678:	3346      	adds	r3, #70	@ 0x46
 800567a:	781a      	ldrb	r2, [r3, #0]
 800567c:	4b10      	ldr	r3, [pc, #64]	@ (80056c0 <__submore+0x70>)
 800567e:	54c2      	strb	r2, [r0, r3]
 8005680:	0023      	movs	r3, r4
 8005682:	3345      	adds	r3, #69	@ 0x45
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	4b0f      	ldr	r3, [pc, #60]	@ (80056c4 <__submore+0x74>)
 8005688:	54c2      	strb	r2, [r0, r3]
 800568a:	782a      	ldrb	r2, [r5, #0]
 800568c:	4b0e      	ldr	r3, [pc, #56]	@ (80056c8 <__submore+0x78>)
 800568e:	54c2      	strb	r2, [r0, r3]
 8005690:	18c0      	adds	r0, r0, r3
 8005692:	6020      	str	r0, [r4, #0]
 8005694:	2000      	movs	r0, #0
 8005696:	e7eb      	b.n	8005670 <__submore+0x20>
 8005698:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800569a:	0029      	movs	r1, r5
 800569c:	0073      	lsls	r3, r6, #1
 800569e:	001a      	movs	r2, r3
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	f000 f868 	bl	8005776 <_realloc_r>
 80056a6:	1e05      	subs	r5, r0, #0
 80056a8:	d0e0      	beq.n	800566c <__submore+0x1c>
 80056aa:	1987      	adds	r7, r0, r6
 80056ac:	0001      	movs	r1, r0
 80056ae:	0032      	movs	r2, r6
 80056b0:	0038      	movs	r0, r7
 80056b2:	f7fe fe34 	bl	800431e <memcpy>
 80056b6:	9b01      	ldr	r3, [sp, #4]
 80056b8:	6027      	str	r7, [r4, #0]
 80056ba:	6365      	str	r5, [r4, #52]	@ 0x34
 80056bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80056be:	e7e9      	b.n	8005694 <__submore+0x44>
 80056c0:	000003ff 	.word	0x000003ff
 80056c4:	000003fe 	.word	0x000003fe
 80056c8:	000003fd 	.word	0x000003fd

080056cc <memmove>:
 80056cc:	b510      	push	{r4, lr}
 80056ce:	4288      	cmp	r0, r1
 80056d0:	d806      	bhi.n	80056e0 <memmove+0x14>
 80056d2:	2300      	movs	r3, #0
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d008      	beq.n	80056ea <memmove+0x1e>
 80056d8:	5ccc      	ldrb	r4, [r1, r3]
 80056da:	54c4      	strb	r4, [r0, r3]
 80056dc:	3301      	adds	r3, #1
 80056de:	e7f9      	b.n	80056d4 <memmove+0x8>
 80056e0:	188b      	adds	r3, r1, r2
 80056e2:	4298      	cmp	r0, r3
 80056e4:	d2f5      	bcs.n	80056d2 <memmove+0x6>
 80056e6:	3a01      	subs	r2, #1
 80056e8:	d200      	bcs.n	80056ec <memmove+0x20>
 80056ea:	bd10      	pop	{r4, pc}
 80056ec:	5c8b      	ldrb	r3, [r1, r2]
 80056ee:	5483      	strb	r3, [r0, r2]
 80056f0:	e7f9      	b.n	80056e6 <memmove+0x1a>
	...

080056f4 <_fstat_r>:
 80056f4:	2300      	movs	r3, #0
 80056f6:	b570      	push	{r4, r5, r6, lr}
 80056f8:	4d06      	ldr	r5, [pc, #24]	@ (8005714 <_fstat_r+0x20>)
 80056fa:	0004      	movs	r4, r0
 80056fc:	0008      	movs	r0, r1
 80056fe:	0011      	movs	r1, r2
 8005700:	602b      	str	r3, [r5, #0]
 8005702:	f7fb fb9a 	bl	8000e3a <_fstat>
 8005706:	1c43      	adds	r3, r0, #1
 8005708:	d103      	bne.n	8005712 <_fstat_r+0x1e>
 800570a:	682b      	ldr	r3, [r5, #0]
 800570c:	2b00      	cmp	r3, #0
 800570e:	d000      	beq.n	8005712 <_fstat_r+0x1e>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd70      	pop	{r4, r5, r6, pc}
 8005714:	20000384 	.word	0x20000384

08005718 <_isatty_r>:
 8005718:	2300      	movs	r3, #0
 800571a:	b570      	push	{r4, r5, r6, lr}
 800571c:	4d06      	ldr	r5, [pc, #24]	@ (8005738 <_isatty_r+0x20>)
 800571e:	0004      	movs	r4, r0
 8005720:	0008      	movs	r0, r1
 8005722:	602b      	str	r3, [r5, #0]
 8005724:	f7fb fb97 	bl	8000e56 <_isatty>
 8005728:	1c43      	adds	r3, r0, #1
 800572a:	d103      	bne.n	8005734 <_isatty_r+0x1c>
 800572c:	682b      	ldr	r3, [r5, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d000      	beq.n	8005734 <_isatty_r+0x1c>
 8005732:	6023      	str	r3, [r4, #0]
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	20000384 	.word	0x20000384

0800573c <_sbrk_r>:
 800573c:	2300      	movs	r3, #0
 800573e:	b570      	push	{r4, r5, r6, lr}
 8005740:	4d06      	ldr	r5, [pc, #24]	@ (800575c <_sbrk_r+0x20>)
 8005742:	0004      	movs	r4, r0
 8005744:	0008      	movs	r0, r1
 8005746:	602b      	str	r3, [r5, #0]
 8005748:	f7fb fb9a 	bl	8000e80 <_sbrk>
 800574c:	1c43      	adds	r3, r0, #1
 800574e:	d103      	bne.n	8005758 <_sbrk_r+0x1c>
 8005750:	682b      	ldr	r3, [r5, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d000      	beq.n	8005758 <_sbrk_r+0x1c>
 8005756:	6023      	str	r3, [r4, #0]
 8005758:	bd70      	pop	{r4, r5, r6, pc}
 800575a:	46c0      	nop			@ (mov r8, r8)
 800575c:	20000384 	.word	0x20000384

08005760 <memchr>:
 8005760:	b2c9      	uxtb	r1, r1
 8005762:	1882      	adds	r2, r0, r2
 8005764:	4290      	cmp	r0, r2
 8005766:	d101      	bne.n	800576c <memchr+0xc>
 8005768:	2000      	movs	r0, #0
 800576a:	4770      	bx	lr
 800576c:	7803      	ldrb	r3, [r0, #0]
 800576e:	428b      	cmp	r3, r1
 8005770:	d0fb      	beq.n	800576a <memchr+0xa>
 8005772:	3001      	adds	r0, #1
 8005774:	e7f6      	b.n	8005764 <memchr+0x4>

08005776 <_realloc_r>:
 8005776:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005778:	0006      	movs	r6, r0
 800577a:	000c      	movs	r4, r1
 800577c:	0015      	movs	r5, r2
 800577e:	2900      	cmp	r1, #0
 8005780:	d105      	bne.n	800578e <_realloc_r+0x18>
 8005782:	0011      	movs	r1, r2
 8005784:	f7fe fe40 	bl	8004408 <_malloc_r>
 8005788:	0004      	movs	r4, r0
 800578a:	0020      	movs	r0, r4
 800578c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800578e:	2a00      	cmp	r2, #0
 8005790:	d103      	bne.n	800579a <_realloc_r+0x24>
 8005792:	f7fe fdcd 	bl	8004330 <_free_r>
 8005796:	2400      	movs	r4, #0
 8005798:	e7f7      	b.n	800578a <_realloc_r+0x14>
 800579a:	f000 f92f 	bl	80059fc <_malloc_usable_size_r>
 800579e:	0007      	movs	r7, r0
 80057a0:	4285      	cmp	r5, r0
 80057a2:	d802      	bhi.n	80057aa <_realloc_r+0x34>
 80057a4:	0843      	lsrs	r3, r0, #1
 80057a6:	42ab      	cmp	r3, r5
 80057a8:	d3ef      	bcc.n	800578a <_realloc_r+0x14>
 80057aa:	0029      	movs	r1, r5
 80057ac:	0030      	movs	r0, r6
 80057ae:	f7fe fe2b 	bl	8004408 <_malloc_r>
 80057b2:	9001      	str	r0, [sp, #4]
 80057b4:	2800      	cmp	r0, #0
 80057b6:	d0ee      	beq.n	8005796 <_realloc_r+0x20>
 80057b8:	002a      	movs	r2, r5
 80057ba:	42bd      	cmp	r5, r7
 80057bc:	d900      	bls.n	80057c0 <_realloc_r+0x4a>
 80057be:	003a      	movs	r2, r7
 80057c0:	0021      	movs	r1, r4
 80057c2:	9801      	ldr	r0, [sp, #4]
 80057c4:	f7fe fdab 	bl	800431e <memcpy>
 80057c8:	0021      	movs	r1, r4
 80057ca:	0030      	movs	r0, r6
 80057cc:	f7fe fdb0 	bl	8004330 <_free_r>
 80057d0:	9c01      	ldr	r4, [sp, #4]
 80057d2:	e7da      	b.n	800578a <_realloc_r+0x14>

080057d4 <_strtol_l.constprop.0>:
 80057d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80057d6:	b085      	sub	sp, #20
 80057d8:	0017      	movs	r7, r2
 80057da:	001e      	movs	r6, r3
 80057dc:	9003      	str	r0, [sp, #12]
 80057de:	9101      	str	r1, [sp, #4]
 80057e0:	2b24      	cmp	r3, #36	@ 0x24
 80057e2:	d844      	bhi.n	800586e <_strtol_l.constprop.0+0x9a>
 80057e4:	000c      	movs	r4, r1
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d041      	beq.n	800586e <_strtol_l.constprop.0+0x9a>
 80057ea:	4b3d      	ldr	r3, [pc, #244]	@ (80058e0 <_strtol_l.constprop.0+0x10c>)
 80057ec:	2208      	movs	r2, #8
 80057ee:	469c      	mov	ip, r3
 80057f0:	0023      	movs	r3, r4
 80057f2:	4661      	mov	r1, ip
 80057f4:	781d      	ldrb	r5, [r3, #0]
 80057f6:	3401      	adds	r4, #1
 80057f8:	5d48      	ldrb	r0, [r1, r5]
 80057fa:	0001      	movs	r1, r0
 80057fc:	4011      	ands	r1, r2
 80057fe:	4210      	tst	r0, r2
 8005800:	d1f6      	bne.n	80057f0 <_strtol_l.constprop.0+0x1c>
 8005802:	2d2d      	cmp	r5, #45	@ 0x2d
 8005804:	d13a      	bne.n	800587c <_strtol_l.constprop.0+0xa8>
 8005806:	7825      	ldrb	r5, [r4, #0]
 8005808:	1c9c      	adds	r4, r3, #2
 800580a:	2301      	movs	r3, #1
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	2210      	movs	r2, #16
 8005810:	0033      	movs	r3, r6
 8005812:	4393      	bics	r3, r2
 8005814:	d109      	bne.n	800582a <_strtol_l.constprop.0+0x56>
 8005816:	2d30      	cmp	r5, #48	@ 0x30
 8005818:	d136      	bne.n	8005888 <_strtol_l.constprop.0+0xb4>
 800581a:	2120      	movs	r1, #32
 800581c:	7823      	ldrb	r3, [r4, #0]
 800581e:	438b      	bics	r3, r1
 8005820:	2b58      	cmp	r3, #88	@ 0x58
 8005822:	d131      	bne.n	8005888 <_strtol_l.constprop.0+0xb4>
 8005824:	0016      	movs	r6, r2
 8005826:	7865      	ldrb	r5, [r4, #1]
 8005828:	3402      	adds	r4, #2
 800582a:	4a2e      	ldr	r2, [pc, #184]	@ (80058e4 <_strtol_l.constprop.0+0x110>)
 800582c:	9b00      	ldr	r3, [sp, #0]
 800582e:	4694      	mov	ip, r2
 8005830:	4463      	add	r3, ip
 8005832:	0031      	movs	r1, r6
 8005834:	0018      	movs	r0, r3
 8005836:	9302      	str	r3, [sp, #8]
 8005838:	f7fa fcfe 	bl	8000238 <__aeabi_uidivmod>
 800583c:	2200      	movs	r2, #0
 800583e:	4684      	mov	ip, r0
 8005840:	0010      	movs	r0, r2
 8005842:	002b      	movs	r3, r5
 8005844:	3b30      	subs	r3, #48	@ 0x30
 8005846:	2b09      	cmp	r3, #9
 8005848:	d825      	bhi.n	8005896 <_strtol_l.constprop.0+0xc2>
 800584a:	001d      	movs	r5, r3
 800584c:	42ae      	cmp	r6, r5
 800584e:	dd31      	ble.n	80058b4 <_strtol_l.constprop.0+0xe0>
 8005850:	1c53      	adds	r3, r2, #1
 8005852:	d009      	beq.n	8005868 <_strtol_l.constprop.0+0x94>
 8005854:	2201      	movs	r2, #1
 8005856:	4252      	negs	r2, r2
 8005858:	4584      	cmp	ip, r0
 800585a:	d305      	bcc.n	8005868 <_strtol_l.constprop.0+0x94>
 800585c:	d101      	bne.n	8005862 <_strtol_l.constprop.0+0x8e>
 800585e:	42a9      	cmp	r1, r5
 8005860:	db25      	blt.n	80058ae <_strtol_l.constprop.0+0xda>
 8005862:	2201      	movs	r2, #1
 8005864:	4370      	muls	r0, r6
 8005866:	1828      	adds	r0, r5, r0
 8005868:	7825      	ldrb	r5, [r4, #0]
 800586a:	3401      	adds	r4, #1
 800586c:	e7e9      	b.n	8005842 <_strtol_l.constprop.0+0x6e>
 800586e:	f7fe fd29 	bl	80042c4 <__errno>
 8005872:	2316      	movs	r3, #22
 8005874:	6003      	str	r3, [r0, #0]
 8005876:	2000      	movs	r0, #0
 8005878:	b005      	add	sp, #20
 800587a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800587c:	9100      	str	r1, [sp, #0]
 800587e:	2d2b      	cmp	r5, #43	@ 0x2b
 8005880:	d1c5      	bne.n	800580e <_strtol_l.constprop.0+0x3a>
 8005882:	7825      	ldrb	r5, [r4, #0]
 8005884:	1c9c      	adds	r4, r3, #2
 8005886:	e7c2      	b.n	800580e <_strtol_l.constprop.0+0x3a>
 8005888:	2e00      	cmp	r6, #0
 800588a:	d1ce      	bne.n	800582a <_strtol_l.constprop.0+0x56>
 800588c:	3608      	adds	r6, #8
 800588e:	2d30      	cmp	r5, #48	@ 0x30
 8005890:	d0cb      	beq.n	800582a <_strtol_l.constprop.0+0x56>
 8005892:	3602      	adds	r6, #2
 8005894:	e7c9      	b.n	800582a <_strtol_l.constprop.0+0x56>
 8005896:	002b      	movs	r3, r5
 8005898:	3b41      	subs	r3, #65	@ 0x41
 800589a:	2b19      	cmp	r3, #25
 800589c:	d801      	bhi.n	80058a2 <_strtol_l.constprop.0+0xce>
 800589e:	3d37      	subs	r5, #55	@ 0x37
 80058a0:	e7d4      	b.n	800584c <_strtol_l.constprop.0+0x78>
 80058a2:	002b      	movs	r3, r5
 80058a4:	3b61      	subs	r3, #97	@ 0x61
 80058a6:	2b19      	cmp	r3, #25
 80058a8:	d804      	bhi.n	80058b4 <_strtol_l.constprop.0+0xe0>
 80058aa:	3d57      	subs	r5, #87	@ 0x57
 80058ac:	e7ce      	b.n	800584c <_strtol_l.constprop.0+0x78>
 80058ae:	2201      	movs	r2, #1
 80058b0:	4252      	negs	r2, r2
 80058b2:	e7d9      	b.n	8005868 <_strtol_l.constprop.0+0x94>
 80058b4:	1c53      	adds	r3, r2, #1
 80058b6:	d108      	bne.n	80058ca <_strtol_l.constprop.0+0xf6>
 80058b8:	2322      	movs	r3, #34	@ 0x22
 80058ba:	9a03      	ldr	r2, [sp, #12]
 80058bc:	9802      	ldr	r0, [sp, #8]
 80058be:	6013      	str	r3, [r2, #0]
 80058c0:	2f00      	cmp	r7, #0
 80058c2:	d0d9      	beq.n	8005878 <_strtol_l.constprop.0+0xa4>
 80058c4:	1e63      	subs	r3, r4, #1
 80058c6:	9301      	str	r3, [sp, #4]
 80058c8:	e007      	b.n	80058da <_strtol_l.constprop.0+0x106>
 80058ca:	9b00      	ldr	r3, [sp, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d000      	beq.n	80058d2 <_strtol_l.constprop.0+0xfe>
 80058d0:	4240      	negs	r0, r0
 80058d2:	2f00      	cmp	r7, #0
 80058d4:	d0d0      	beq.n	8005878 <_strtol_l.constprop.0+0xa4>
 80058d6:	2a00      	cmp	r2, #0
 80058d8:	d1f4      	bne.n	80058c4 <_strtol_l.constprop.0+0xf0>
 80058da:	9b01      	ldr	r3, [sp, #4]
 80058dc:	603b      	str	r3, [r7, #0]
 80058de:	e7cb      	b.n	8005878 <_strtol_l.constprop.0+0xa4>
 80058e0:	08005efb 	.word	0x08005efb
 80058e4:	7fffffff 	.word	0x7fffffff

080058e8 <_strtol_r>:
 80058e8:	b510      	push	{r4, lr}
 80058ea:	f7ff ff73 	bl	80057d4 <_strtol_l.constprop.0>
 80058ee:	bd10      	pop	{r4, pc}

080058f0 <_strtoul_l.constprop.0>:
 80058f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058f2:	001e      	movs	r6, r3
 80058f4:	4b3e      	ldr	r3, [pc, #248]	@ (80059f0 <_strtoul_l.constprop.0+0x100>)
 80058f6:	0017      	movs	r7, r2
 80058f8:	000c      	movs	r4, r1
 80058fa:	469c      	mov	ip, r3
 80058fc:	2208      	movs	r2, #8
 80058fe:	b085      	sub	sp, #20
 8005900:	9003      	str	r0, [sp, #12]
 8005902:	9100      	str	r1, [sp, #0]
 8005904:	0023      	movs	r3, r4
 8005906:	4661      	mov	r1, ip
 8005908:	781d      	ldrb	r5, [r3, #0]
 800590a:	3401      	adds	r4, #1
 800590c:	5d48      	ldrb	r0, [r1, r5]
 800590e:	0001      	movs	r1, r0
 8005910:	4011      	ands	r1, r2
 8005912:	4210      	tst	r0, r2
 8005914:	d1f6      	bne.n	8005904 <_strtoul_l.constprop.0+0x14>
 8005916:	2d2d      	cmp	r5, #45	@ 0x2d
 8005918:	d137      	bne.n	800598a <_strtoul_l.constprop.0+0x9a>
 800591a:	7825      	ldrb	r5, [r4, #0]
 800591c:	1c9c      	adds	r4, r3, #2
 800591e:	2301      	movs	r3, #1
 8005920:	9302      	str	r3, [sp, #8]
 8005922:	2210      	movs	r2, #16
 8005924:	0033      	movs	r3, r6
 8005926:	4393      	bics	r3, r2
 8005928:	d109      	bne.n	800593e <_strtoul_l.constprop.0+0x4e>
 800592a:	2d30      	cmp	r5, #48	@ 0x30
 800592c:	d133      	bne.n	8005996 <_strtoul_l.constprop.0+0xa6>
 800592e:	2120      	movs	r1, #32
 8005930:	7823      	ldrb	r3, [r4, #0]
 8005932:	438b      	bics	r3, r1
 8005934:	2b58      	cmp	r3, #88	@ 0x58
 8005936:	d12e      	bne.n	8005996 <_strtoul_l.constprop.0+0xa6>
 8005938:	0016      	movs	r6, r2
 800593a:	7865      	ldrb	r5, [r4, #1]
 800593c:	3402      	adds	r4, #2
 800593e:	2001      	movs	r0, #1
 8005940:	0031      	movs	r1, r6
 8005942:	4240      	negs	r0, r0
 8005944:	f7fa fbf2 	bl	800012c <__udivsi3>
 8005948:	9001      	str	r0, [sp, #4]
 800594a:	2001      	movs	r0, #1
 800594c:	0031      	movs	r1, r6
 800594e:	4240      	negs	r0, r0
 8005950:	f7fa fc72 	bl	8000238 <__aeabi_uidivmod>
 8005954:	2300      	movs	r3, #0
 8005956:	2201      	movs	r2, #1
 8005958:	0018      	movs	r0, r3
 800595a:	4694      	mov	ip, r2
 800595c:	002a      	movs	r2, r5
 800595e:	3a30      	subs	r2, #48	@ 0x30
 8005960:	2a09      	cmp	r2, #9
 8005962:	d81f      	bhi.n	80059a4 <_strtoul_l.constprop.0+0xb4>
 8005964:	0015      	movs	r5, r2
 8005966:	42ae      	cmp	r6, r5
 8005968:	dd2b      	ble.n	80059c2 <_strtoul_l.constprop.0+0xd2>
 800596a:	1c5a      	adds	r2, r3, #1
 800596c:	d00a      	beq.n	8005984 <_strtoul_l.constprop.0+0x94>
 800596e:	2301      	movs	r3, #1
 8005970:	9a01      	ldr	r2, [sp, #4]
 8005972:	425b      	negs	r3, r3
 8005974:	4282      	cmp	r2, r0
 8005976:	d305      	bcc.n	8005984 <_strtoul_l.constprop.0+0x94>
 8005978:	d101      	bne.n	800597e <_strtoul_l.constprop.0+0x8e>
 800597a:	42a9      	cmp	r1, r5
 800597c:	db1e      	blt.n	80059bc <_strtoul_l.constprop.0+0xcc>
 800597e:	4663      	mov	r3, ip
 8005980:	4370      	muls	r0, r6
 8005982:	1828      	adds	r0, r5, r0
 8005984:	7825      	ldrb	r5, [r4, #0]
 8005986:	3401      	adds	r4, #1
 8005988:	e7e8      	b.n	800595c <_strtoul_l.constprop.0+0x6c>
 800598a:	9102      	str	r1, [sp, #8]
 800598c:	2d2b      	cmp	r5, #43	@ 0x2b
 800598e:	d1c8      	bne.n	8005922 <_strtoul_l.constprop.0+0x32>
 8005990:	7825      	ldrb	r5, [r4, #0]
 8005992:	1c9c      	adds	r4, r3, #2
 8005994:	e7c5      	b.n	8005922 <_strtoul_l.constprop.0+0x32>
 8005996:	2e00      	cmp	r6, #0
 8005998:	d1d1      	bne.n	800593e <_strtoul_l.constprop.0+0x4e>
 800599a:	3608      	adds	r6, #8
 800599c:	2d30      	cmp	r5, #48	@ 0x30
 800599e:	d0ce      	beq.n	800593e <_strtoul_l.constprop.0+0x4e>
 80059a0:	3602      	adds	r6, #2
 80059a2:	e7cc      	b.n	800593e <_strtoul_l.constprop.0+0x4e>
 80059a4:	002a      	movs	r2, r5
 80059a6:	3a41      	subs	r2, #65	@ 0x41
 80059a8:	2a19      	cmp	r2, #25
 80059aa:	d801      	bhi.n	80059b0 <_strtoul_l.constprop.0+0xc0>
 80059ac:	3d37      	subs	r5, #55	@ 0x37
 80059ae:	e7da      	b.n	8005966 <_strtoul_l.constprop.0+0x76>
 80059b0:	002a      	movs	r2, r5
 80059b2:	3a61      	subs	r2, #97	@ 0x61
 80059b4:	2a19      	cmp	r2, #25
 80059b6:	d804      	bhi.n	80059c2 <_strtoul_l.constprop.0+0xd2>
 80059b8:	3d57      	subs	r5, #87	@ 0x57
 80059ba:	e7d4      	b.n	8005966 <_strtoul_l.constprop.0+0x76>
 80059bc:	2301      	movs	r3, #1
 80059be:	425b      	negs	r3, r3
 80059c0:	e7e0      	b.n	8005984 <_strtoul_l.constprop.0+0x94>
 80059c2:	1c5a      	adds	r2, r3, #1
 80059c4:	d107      	bne.n	80059d6 <_strtoul_l.constprop.0+0xe6>
 80059c6:	2222      	movs	r2, #34	@ 0x22
 80059c8:	9903      	ldr	r1, [sp, #12]
 80059ca:	0018      	movs	r0, r3
 80059cc:	600a      	str	r2, [r1, #0]
 80059ce:	2f00      	cmp	r7, #0
 80059d0:	d109      	bne.n	80059e6 <_strtoul_l.constprop.0+0xf6>
 80059d2:	b005      	add	sp, #20
 80059d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d6:	9a02      	ldr	r2, [sp, #8]
 80059d8:	2a00      	cmp	r2, #0
 80059da:	d000      	beq.n	80059de <_strtoul_l.constprop.0+0xee>
 80059dc:	4240      	negs	r0, r0
 80059de:	2f00      	cmp	r7, #0
 80059e0:	d0f7      	beq.n	80059d2 <_strtoul_l.constprop.0+0xe2>
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <_strtoul_l.constprop.0+0xfa>
 80059e6:	1e63      	subs	r3, r4, #1
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	9b00      	ldr	r3, [sp, #0]
 80059ec:	603b      	str	r3, [r7, #0]
 80059ee:	e7f0      	b.n	80059d2 <_strtoul_l.constprop.0+0xe2>
 80059f0:	08005efb 	.word	0x08005efb

080059f4 <_strtoul_r>:
 80059f4:	b510      	push	{r4, lr}
 80059f6:	f7ff ff7b 	bl	80058f0 <_strtoul_l.constprop.0>
 80059fa:	bd10      	pop	{r4, pc}

080059fc <_malloc_usable_size_r>:
 80059fc:	1f0b      	subs	r3, r1, #4
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	1f18      	subs	r0, r3, #4
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	da01      	bge.n	8005a0a <_malloc_usable_size_r+0xe>
 8005a06:	580b      	ldr	r3, [r1, r0]
 8005a08:	18c0      	adds	r0, r0, r3
 8005a0a:	4770      	bx	lr

08005a0c <_init>:
 8005a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0e:	46c0      	nop			@ (mov r8, r8)
 8005a10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a12:	bc08      	pop	{r3}
 8005a14:	469e      	mov	lr, r3
 8005a16:	4770      	bx	lr

08005a18 <_fini>:
 8005a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a1a:	46c0      	nop			@ (mov r8, r8)
 8005a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a1e:	bc08      	pop	{r3}
 8005a20:	469e      	mov	lr, r3
 8005a22:	4770      	bx	lr
