
QuectelBg95Stm32C0Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006038  08006038  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006038  08006038  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006038  08006038  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006038  08006038  00007038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800603c  0800603c  0000703c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006040  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000032c  20000068  080060a8  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  080060a8  00008394  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d517  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002317  00000000  00000000  000155a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000178c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000837  00000000  00000000  00018370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000145fc  00000000  00000000  00018ba7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfbe  00000000  00000000  0002d1a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007969c  00000000  00000000  0003b161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b47fd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003074  00000000  00000000  000b4840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b78b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005a48 	.word	0x08005a48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005a48 	.word	0x08005a48

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fe94 	bl	8000f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f835 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f951 	bl	80004f8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000256:	f000 f877 	bl	8000348 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f919 	bl	8000490 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //configurando rtc apos reset
  	__HAL_RCC_PWR_CLK_ENABLE();
 800025e:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <main+0x70>)
 8000260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000262:	4b14      	ldr	r3, [pc, #80]	@ (80002b4 <main+0x70>)
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	0549      	lsls	r1, r1, #21
 8000268:	430a      	orrs	r2, r1
 800026a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800026c:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <main+0x70>)
 800026e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	055b      	lsls	r3, r3, #21
 8000274:	4013      	ands	r3, r2
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  	__HAL_RCC_RTC_ENABLE();
 800027a:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <main+0x70>)
 800027c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800027e:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <main+0x70>)
 8000280:	2180      	movs	r1, #128	@ 0x80
 8000282:	0209      	lsls	r1, r1, #8
 8000284:	430a      	orrs	r2, r1
 8000286:	65da      	str	r2, [r3, #92]	@ 0x5c
  	InitFlags();
 8000288:	f000 fc86 	bl	8000b98 <InitFlags>
	        		    	RESPONSE_BUFFER_SIZE);
	        }
	        responseReceived = 0;
			*/

		InitialConfigBg95();
 800028c:	f000 f9e8 	bl	8000660 <InitialConfigBg95>
		ConfigPdpContext();
 8000290:	f000 fade 	bl	8000850 <ConfigPdpContext>
		ActivePdp();
 8000294:	f000 fb64 	bl	8000960 <ActivePdp>
		ConfigMqttContext();
 8000298:	f000 fb20 	bl	80008dc <ConfigMqttContext>
		MqttConfigBeforeConnection();
 800029c:	f000 fbc4 	bl	8000a28 <MqttConfigBeforeConnection>
		MqttConnectAndSubscribe();
 80002a0:	f000 fb8e 	bl	80009c0 <MqttConnectAndSubscribe>
		HAL_Delay(10000);
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <main+0x74>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fee2 	bl	8001070 <HAL_Delay>

		EnterSleepMode();
 80002ac:	f000 fbf6 	bl	8000a9c <EnterSleepMode>
		InitialConfigBg95();
 80002b0:	46c0      	nop			@ (mov r8, r8)
 80002b2:	e7eb      	b.n	800028c <main+0x48>
 80002b4:	40021000 	.word	0x40021000
 80002b8:	00002710 	.word	0x00002710

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b08d      	sub	sp, #52	@ 0x34
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2414      	movs	r4, #20
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	231c      	movs	r3, #28
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f003 ff9d 	bl	800420c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	003b      	movs	r3, r7
 80002d4:	0018      	movs	r0, r3
 80002d6:	2314      	movs	r3, #20
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f003 ff96 	bl	800420c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	220a      	movs	r2, #10
 80002e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2280      	movs	r2, #128	@ 0x80
 80002ea:	0052      	lsls	r2, r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2240      	movs	r2, #64	@ 0x40
 80002f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2201      	movs	r2, #1
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fa60 	bl	80017c8 <HAL_RCC_OscConfig>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800030c:	f000 fc60 	bl	8000bd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	003b      	movs	r3, r7
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	003b      	movs	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	003b      	movs	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000322:	003b      	movs	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032e:	003b      	movs	r3, r7
 8000330:	2101      	movs	r1, #1
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fc2c 	bl	8001b90 <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800033c:	f000 fc48 	bl	8000bd0 <Error_Handler>
  }
}
 8000340:	46c0      	nop			@ (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b00d      	add	sp, #52	@ 0x34
 8000346:	bd90      	pop	{r4, r7, pc}

08000348 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	@ 0x40
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800034e:	232c      	movs	r3, #44	@ 0x2c
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	0018      	movs	r0, r3
 8000354:	2314      	movs	r3, #20
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f003 ff57 	bl	800420c <memset>
  RTC_DateTypeDef sDate = {0};
 800035e:	2328      	movs	r3, #40	@ 0x28
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	2328      	movs	r3, #40	@ 0x28
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f003 ff4c 	bl	800420c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000374:	4b44      	ldr	r3, [pc, #272]	@ (8000488 <MX_RTC_Init+0x140>)
 8000376:	4a45      	ldr	r2, [pc, #276]	@ (800048c <MX_RTC_Init+0x144>)
 8000378:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800037a:	4b43      	ldr	r3, [pc, #268]	@ (8000488 <MX_RTC_Init+0x140>)
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000380:	4b41      	ldr	r3, [pc, #260]	@ (8000488 <MX_RTC_Init+0x140>)
 8000382:	227f      	movs	r2, #127	@ 0x7f
 8000384:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000386:	4b40      	ldr	r3, [pc, #256]	@ (8000488 <MX_RTC_Init+0x140>)
 8000388:	22ff      	movs	r2, #255	@ 0xff
 800038a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800038c:	4b3e      	ldr	r3, [pc, #248]	@ (8000488 <MX_RTC_Init+0x140>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000392:	4b3d      	ldr	r3, [pc, #244]	@ (8000488 <MX_RTC_Init+0x140>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000398:	4b3b      	ldr	r3, [pc, #236]	@ (8000488 <MX_RTC_Init+0x140>)
 800039a:	2200      	movs	r2, #0
 800039c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800039e:	4b3a      	ldr	r3, [pc, #232]	@ (8000488 <MX_RTC_Init+0x140>)
 80003a0:	2280      	movs	r2, #128	@ 0x80
 80003a2:	05d2      	lsls	r2, r2, #23
 80003a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003a6:	4b38      	ldr	r3, [pc, #224]	@ (8000488 <MX_RTC_Init+0x140>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ac:	4b36      	ldr	r3, [pc, #216]	@ (8000488 <MX_RTC_Init+0x140>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 fe6a 	bl	8002088 <HAL_RTC_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80003b8:	f000 fc0a 	bl	8000bd0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003bc:	212c      	movs	r1, #44	@ 0x2c
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003e2:	1879      	adds	r1, r7, r1
 80003e4:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <MX_RTC_Init+0x140>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fedb 	bl	80021a4 <HAL_RTC_SetTime>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80003f2:	f000 fbed 	bl	8000bd0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003f6:	2128      	movs	r1, #40	@ 0x28
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2201      	movs	r2, #1
 8000402:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2201      	movs	r2, #1
 8000408:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000410:	1879      	adds	r1, r7, r1
 8000412:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <MX_RTC_Init+0x140>)
 8000414:	2201      	movs	r2, #1
 8000416:	0018      	movs	r0, r3
 8000418:	f001 ffc8 	bl	80023ac <HAL_RTC_SetDate>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000420:	f000 fbd6 	bl	8000bd0 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800042a:	003b      	movs	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000430:	003b      	movs	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000436:	003b      	movs	r3, r7
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800043c:	003b      	movs	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000442:	003b      	movs	r3, r7
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000448:	003b      	movs	r3, r7
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800044e:	003b      	movs	r3, r7
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000454:	003b      	movs	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800045a:	003b      	movs	r3, r7
 800045c:	2220      	movs	r2, #32
 800045e:	2101      	movs	r1, #1
 8000460:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000462:	003b      	movs	r3, r7
 8000464:	2280      	movs	r2, #128	@ 0x80
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800046a:	0039      	movs	r1, r7
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_RTC_Init+0x140>)
 800046e:	2201      	movs	r2, #1
 8000470:	0018      	movs	r0, r3
 8000472:	f002 f87b 	bl	800256c <HAL_RTC_SetAlarm_IT>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800047a:	f000 fba9 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b010      	add	sp, #64	@ 0x40
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	20000084 	.word	0x20000084
 800048c:	40002800 	.word	0x40002800

08000490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000494:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 8000496:	4a17      	ldr	r2, [pc, #92]	@ (80004f4 <MX_USART2_UART_Init+0x64>)
 8000498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 800049c:	22e1      	movs	r2, #225	@ 0xe1
 800049e:	0252      	lsls	r2, r2, #9
 80004a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fac8 	bl	8002a70 <HAL_UART_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004e4:	f000 fb74 	bl	8000bd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	200000ac 	.word	0x200000ac
 80004f4:	40004400 	.word	0x40004400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000502:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000504:	2104      	movs	r1, #4
 8000506:	430a      	orrs	r2, r1
 8000508:	635a      	str	r2, [r3, #52]	@ 0x34
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <MX_GPIO_Init+0x40>)
 800050c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050e:	2204      	movs	r2, #4
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <MX_GPIO_Init+0x40>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	40021000 	.word	0x40021000

0800053c <receiveResponseUntilMatch>:
void sendATCommand(char* command) {
    // Enviar o comando AT via UART
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
}

void receiveResponseUntilMatch(const char *searchPattern) {
 800053c:	b590      	push	{r4, r7, lr}
 800053e:	b0a5      	sub	sp, #148	@ 0x94
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    bool responseValid = false;
 8000544:	238f      	movs	r3, #143	@ 0x8f
 8000546:	18fb      	adds	r3, r7, r3
 8000548:	2200      	movs	r2, #0
 800054a:	701a      	strb	r2, [r3, #0]
    char responseBuffer[128];  // Buffer para a resposta do UART
    int contTryRequestSignal = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	2288      	movs	r2, #136	@ 0x88
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	6013      	str	r3, [r2, #0]

    // Limpar o buffer de resposta
    memset(responseBuffer, 0, sizeof(responseBuffer));
 8000554:	2308      	movs	r3, #8
 8000556:	18fb      	adds	r3, r7, r3
 8000558:	2280      	movs	r2, #128	@ 0x80
 800055a:	2100      	movs	r1, #0
 800055c:	0018      	movs	r0, r3
 800055e:	f003 fe55 	bl	800420c <memset>

    while (!responseValid && contTryRequestSignal <= 60) {
 8000562:	e053      	b.n	800060c <receiveResponseUntilMatch+0xd0>
        // Limpar o buffer de resposta a cada tentativa
        memset(responseBuffer, 0, sizeof(responseBuffer));
 8000564:	2408      	movs	r4, #8
 8000566:	193b      	adds	r3, r7, r4
 8000568:	2280      	movs	r2, #128	@ 0x80
 800056a:	2100      	movs	r1, #0
 800056c:	0018      	movs	r0, r3
 800056e:	f003 fe4d 	bl	800420c <memset>

        // Enviar o comando AT ou outro comando conforme necessário
        HAL_UART_Transmit(&huart2, (uint8_t*)searchPattern, strlen(searchPattern), HAL_MAX_DELAY);
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	0018      	movs	r0, r3
 8000576:	f7ff fdc7 	bl	8000108 <strlen>
 800057a:	0003      	movs	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	2301      	movs	r3, #1
 8000580:	425b      	negs	r3, r3
 8000582:	6879      	ldr	r1, [r7, #4]
 8000584:	4830      	ldr	r0, [pc, #192]	@ (8000648 <receiveResponseUntilMatch+0x10c>)
 8000586:	f002 fac9 	bl	8002b1c <HAL_UART_Transmit>

        // Receber a resposta
        HAL_UART_Receive(&huart2, (uint8_t*)responseBuffer, sizeof(responseBuffer), 1000);
 800058a:	23fa      	movs	r3, #250	@ 0xfa
 800058c:	009b      	lsls	r3, r3, #2
 800058e:	1939      	adds	r1, r7, r4
 8000590:	482d      	ldr	r0, [pc, #180]	@ (8000648 <receiveResponseUntilMatch+0x10c>)
 8000592:	2280      	movs	r2, #128	@ 0x80
 8000594:	f002 fb66 	bl	8002c64 <HAL_UART_Receive>

        // Depuração: Mostrar o buffer recebido para verificar seu conteúdo
        printf("Response Buffer Recebido: %s\n", responseBuffer);
 8000598:	193a      	adds	r2, r7, r4
 800059a:	4b2c      	ldr	r3, [pc, #176]	@ (800064c <receiveResponseUntilMatch+0x110>)
 800059c:	0011      	movs	r1, r2
 800059e:	0018      	movs	r0, r3
 80005a0:	f003 fc7a 	bl	8003e98 <iprintf>

        // Procurar por "OK" no buffer
        if (strstr(responseBuffer, "OK") != NULL || strstr(responseBuffer, "+") != NULL || strstr(responseBuffer, "\n") != NULL) {
 80005a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000650 <receiveResponseUntilMatch+0x114>)
 80005a6:	193b      	adds	r3, r7, r4
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 fe44 	bl	8004238 <strstr>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d10d      	bne.n	80005d0 <receiveResponseUntilMatch+0x94>
 80005b4:	193b      	adds	r3, r7, r4
 80005b6:	212b      	movs	r1, #43	@ 0x2b
 80005b8:	0018      	movs	r0, r3
 80005ba:	f003 fe2f 	bl	800421c <strchr>
 80005be:	1e03      	subs	r3, r0, #0
 80005c0:	d106      	bne.n	80005d0 <receiveResponseUntilMatch+0x94>
 80005c2:	193b      	adds	r3, r7, r4
 80005c4:	210a      	movs	r1, #10
 80005c6:	0018      	movs	r0, r3
 80005c8:	f003 fe28 	bl	800421c <strchr>
 80005cc:	1e03      	subs	r3, r0, #0
 80005ce:	d00b      	beq.n	80005e8 <receiveResponseUntilMatch+0xac>
            responseValid = true;
 80005d0:	238f      	movs	r3, #143	@ 0x8f
 80005d2:	18fb      	adds	r3, r7, r3
 80005d4:	2201      	movs	r2, #1
 80005d6:	701a      	strb	r2, [r3, #0]
            printf("Resposta válida recebida: %s\n", responseBuffer);
 80005d8:	2308      	movs	r3, #8
 80005da:	18fa      	adds	r2, r7, r3
 80005dc:	4b1d      	ldr	r3, [pc, #116]	@ (8000654 <receiveResponseUntilMatch+0x118>)
 80005de:	0011      	movs	r1, r2
 80005e0:	0018      	movs	r0, r3
 80005e2:	f003 fc59 	bl	8003e98 <iprintf>
            break;  // Saia do loop ao encontrar uma resposta válida
 80005e6:	e01e      	b.n	8000626 <receiveResponseUntilMatch+0xea>
        }

        // Se não encontrar a resposta válida
        contTryRequestSignal++;
 80005e8:	2488      	movs	r4, #136	@ 0x88
 80005ea:	193b      	adds	r3, r7, r4
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	193a      	adds	r2, r7, r4
 80005f2:	6013      	str	r3, [r2, #0]
        HAL_Delay(1000);  // Esperar 1 segundo antes de tentar novamente
 80005f4:	23fa      	movs	r3, #250	@ 0xfa
 80005f6:	009b      	lsls	r3, r3, #2
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fd39 	bl	8001070 <HAL_Delay>
        printf("Tentativa %d: Sem resposta válida.\n", contTryRequestSignal);
 80005fe:	193b      	adds	r3, r7, r4
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <receiveResponseUntilMatch+0x11c>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f003 fc46 	bl	8003e98 <iprintf>
    while (!responseValid && contTryRequestSignal <= 60) {
 800060c:	238f      	movs	r3, #143	@ 0x8f
 800060e:	18fb      	adds	r3, r7, r3
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2201      	movs	r2, #1
 8000614:	4053      	eors	r3, r2
 8000616:	b2db      	uxtb	r3, r3
 8000618:	2b00      	cmp	r3, #0
 800061a:	d004      	beq.n	8000626 <receiveResponseUntilMatch+0xea>
 800061c:	2388      	movs	r3, #136	@ 0x88
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	2b3c      	cmp	r3, #60	@ 0x3c
 8000624:	dd9e      	ble.n	8000564 <receiveResponseUntilMatch+0x28>
    }

    // Após 10 tentativas sem sucesso, continuar
    if (!responseValid) {
 8000626:	238f      	movs	r3, #143	@ 0x8f
 8000628:	18fb      	adds	r3, r7, r3
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2201      	movs	r2, #1
 800062e:	4053      	eors	r3, r2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2b00      	cmp	r3, #0
 8000634:	d003      	beq.n	800063e <receiveResponseUntilMatch+0x102>
        printf("Tentativas esgotadas, continuando sem resposta válida.\n");
 8000636:	4b09      	ldr	r3, [pc, #36]	@ (800065c <receiveResponseUntilMatch+0x120>)
 8000638:	0018      	movs	r0, r3
 800063a:	f003 fc93 	bl	8003f64 <puts>
    }


}
 800063e:	46c0      	nop			@ (mov r8, r8)
 8000640:	46bd      	mov	sp, r7
 8000642:	b025      	add	sp, #148	@ 0x94
 8000644:	bd90      	pop	{r4, r7, pc}
 8000646:	46c0      	nop			@ (mov r8, r8)
 8000648:	200000ac 	.word	0x200000ac
 800064c:	08005a60 	.word	0x08005a60
 8000650:	08005a80 	.word	0x08005a80
 8000654:	08005a84 	.word	0x08005a84
 8000658:	08005aa4 	.word	0x08005aa4
 800065c:	08005acc 	.word	0x08005acc

08000660 <InitialConfigBg95>:
            match = 1;
        }
    }
}
*/
void InitialConfigBg95() {
 8000660:	b5b0      	push	{r4, r5, r7, lr}
 8000662:	b0a4      	sub	sp, #144	@ 0x90
 8000664:	af00      	add	r7, sp, #0
     // Buffer temporário para respostas AT
    char command[128];    // Buffer para os comandos AT

    // Comando AT+CCID
    strcpy(command, "AT+CCID\r\n");
 8000666:	2410      	movs	r4, #16
 8000668:	193b      	adds	r3, r7, r4
 800066a:	4a65      	ldr	r2, [pc, #404]	@ (8000800 <InitialConfigBg95+0x1a0>)
 800066c:	ca03      	ldmia	r2!, {r0, r1}
 800066e:	c303      	stmia	r3!, {r0, r1}
 8000670:	8812      	ldrh	r2, [r2, #0]
 8000672:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 8000674:	193b      	adds	r3, r7, r4
 8000676:	0018      	movs	r0, r3
 8000678:	f7ff ff60 	bl	800053c <receiveResponseUntilMatch>

    // Comando AT+CIMI
    strcpy(command, "AT+CIMI\r\n");
 800067c:	193b      	adds	r3, r7, r4
 800067e:	4a61      	ldr	r2, [pc, #388]	@ (8000804 <InitialConfigBg95+0x1a4>)
 8000680:	ca03      	ldmia	r2!, {r0, r1}
 8000682:	c303      	stmia	r3!, {r0, r1}
 8000684:	8812      	ldrh	r2, [r2, #0]
 8000686:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 8000688:	0025      	movs	r5, r4
 800068a:	197b      	adds	r3, r7, r5
 800068c:	0018      	movs	r0, r3
 800068e:	f7ff ff55 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CFUN=0
    strcpy(command, "AT+CFUN=0\r\n");
 8000692:	197b      	adds	r3, r7, r5
 8000694:	4a5c      	ldr	r2, [pc, #368]	@ (8000808 <InitialConfigBg95+0x1a8>)
 8000696:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000698:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 800069a:	197b      	adds	r3, r7, r5
 800069c:	0018      	movs	r0, r3
 800069e:	f7ff ff4d 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QCFG="nwscanmode",0,1
    strcpy(command, "AT+QCFG=\"nwscanmode\",0,1\r\n");
 80006a2:	197b      	adds	r3, r7, r5
 80006a4:	4a59      	ldr	r2, [pc, #356]	@ (800080c <InitialConfigBg95+0x1ac>)
 80006a6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006a8:	c313      	stmia	r3!, {r0, r1, r4}
 80006aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006ac:	c313      	stmia	r3!, {r0, r1, r4}
 80006ae:	8811      	ldrh	r1, [r2, #0]
 80006b0:	8019      	strh	r1, [r3, #0]
 80006b2:	7892      	ldrb	r2, [r2, #2]
 80006b4:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 80006b6:	197b      	adds	r3, r7, r5
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff ff3f 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QCFG="nwscanseq",020103,1
    strcpy(command, "AT+QCFG=\"nwscanseq\",020103,1\r\n");
 80006be:	197b      	adds	r3, r7, r5
 80006c0:	4a53      	ldr	r2, [pc, #332]	@ (8000810 <InitialConfigBg95+0x1b0>)
 80006c2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006c4:	c313      	stmia	r3!, {r0, r1, r4}
 80006c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006c8:	c313      	stmia	r3!, {r0, r1, r4}
 80006ca:	6811      	ldr	r1, [r2, #0]
 80006cc:	6019      	str	r1, [r3, #0]
 80006ce:	8891      	ldrh	r1, [r2, #4]
 80006d0:	8099      	strh	r1, [r3, #4]
 80006d2:	7992      	ldrb	r2, [r2, #6]
 80006d4:	719a      	strb	r2, [r3, #6]
    receiveResponseUntilMatch(command);
 80006d6:	197b      	adds	r3, r7, r5
 80006d8:	0018      	movs	r0, r3
 80006da:	f7ff ff2f 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QCFG="band",0,0
    strcpy(command, "AT+QCFG=\"band\",0,0\r\n");
 80006de:	197b      	adds	r3, r7, r5
 80006e0:	4a4c      	ldr	r2, [pc, #304]	@ (8000814 <InitialConfigBg95+0x1b4>)
 80006e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006e4:	c313      	stmia	r3!, {r0, r1, r4}
 80006e6:	ca03      	ldmia	r2!, {r0, r1}
 80006e8:	c303      	stmia	r3!, {r0, r1}
 80006ea:	7812      	ldrb	r2, [r2, #0]
 80006ec:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 80006ee:	197b      	adds	r3, r7, r5
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ff23 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+COPS=0
    strcpy(command, "AT+COPS=0\r\n");
 80006f6:	197b      	adds	r3, r7, r5
 80006f8:	4a47      	ldr	r2, [pc, #284]	@ (8000818 <InitialConfigBg95+0x1b8>)
 80006fa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80006fc:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 80006fe:	197b      	adds	r3, r7, r5
 8000700:	0018      	movs	r0, r3
 8000702:	f7ff ff1b 	bl	800053c <receiveResponseUntilMatch>
    // Configurar o APN, username e password para a Vivo
    strcpy(command, "AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"datatem\",\"datatem\"\r\n");
 8000706:	197a      	adds	r2, r7, r5
 8000708:	4b44      	ldr	r3, [pc, #272]	@ (800081c <InitialConfigBg95+0x1bc>)
 800070a:	0010      	movs	r0, r2
 800070c:	0019      	movs	r1, r3
 800070e:	233c      	movs	r3, #60	@ 0x3c
 8000710:	001a      	movs	r2, r3
 8000712:	f003 fe22 	bl	800435a <memcpy>
    receiveResponseUntilMatch(command);
 8000716:	197b      	adds	r3, r7, r5
 8000718:	0018      	movs	r0, r3
 800071a:	f7ff ff0f 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CFUN=1
    strcpy(command, "AT+CFUN=1\r\n");
 800071e:	197b      	adds	r3, r7, r5
 8000720:	4a3f      	ldr	r2, [pc, #252]	@ (8000820 <InitialConfigBg95+0x1c0>)
 8000722:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000724:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 8000726:	197b      	adds	r3, r7, r5
 8000728:	0018      	movs	r0, r3
 800072a:	f7ff ff07 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CREG=1;+CGREG=1;+CEREG=1
    strcpy(command, "AT+CREG=1;+CGREG=1;+CEREG=1\r\n");
 800072e:	197b      	adds	r3, r7, r5
 8000730:	4a3c      	ldr	r2, [pc, #240]	@ (8000824 <InitialConfigBg95+0x1c4>)
 8000732:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000734:	c313      	stmia	r3!, {r0, r1, r4}
 8000736:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000738:	c313      	stmia	r3!, {r0, r1, r4}
 800073a:	6811      	ldr	r1, [r2, #0]
 800073c:	6019      	str	r1, [r3, #0]
 800073e:	8892      	ldrh	r2, [r2, #4]
 8000740:	809a      	strh	r2, [r3, #4]
    receiveResponseUntilMatch(command);
 8000742:	197b      	adds	r3, r7, r5
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff fef9 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+COPS?
    strcpy(command, "AT+COPS?\r\n");
 800074a:	197b      	adds	r3, r7, r5
 800074c:	4a36      	ldr	r2, [pc, #216]	@ (8000828 <InitialConfigBg95+0x1c8>)
 800074e:	ca03      	ldmia	r2!, {r0, r1}
 8000750:	c303      	stmia	r3!, {r0, r1}
 8000752:	8811      	ldrh	r1, [r2, #0]
 8000754:	8019      	strh	r1, [r3, #0]
 8000756:	7892      	ldrb	r2, [r2, #2]
 8000758:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 800075a:	197b      	adds	r3, r7, r5
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff feed 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QCSQ
    strcpy(command, "AT+QCSQ\r\n");
 8000762:	197b      	adds	r3, r7, r5
 8000764:	4a31      	ldr	r2, [pc, #196]	@ (800082c <InitialConfigBg95+0x1cc>)
 8000766:	ca03      	ldmia	r2!, {r0, r1}
 8000768:	c303      	stmia	r3!, {r0, r1}
 800076a:	8812      	ldrh	r2, [r2, #0]
 800076c:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 800076e:	197b      	adds	r3, r7, r5
 8000770:	0018      	movs	r0, r3
 8000772:	f7ff fee3 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CREG?;+CEREG?;+CGREG?
    strcpy(command, "AT+CREG?;+CEREG?;+CGREG?\r\n");
 8000776:	197b      	adds	r3, r7, r5
 8000778:	4a2d      	ldr	r2, [pc, #180]	@ (8000830 <InitialConfigBg95+0x1d0>)
 800077a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800077c:	c313      	stmia	r3!, {r0, r1, r4}
 800077e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000780:	c313      	stmia	r3!, {r0, r1, r4}
 8000782:	8811      	ldrh	r1, [r2, #0]
 8000784:	8019      	strh	r1, [r3, #0]
 8000786:	7892      	ldrb	r2, [r2, #2]
 8000788:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 800078a:	197b      	adds	r3, r7, r5
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff fed5 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+CGATT=1 (Conectar à rede)
    strcpy(command, "AT+CGATT=1\r\n");
 8000792:	197b      	adds	r3, r7, r5
 8000794:	4a27      	ldr	r2, [pc, #156]	@ (8000834 <InitialConfigBg95+0x1d4>)
 8000796:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000798:	c313      	stmia	r3!, {r0, r1, r4}
 800079a:	7812      	ldrb	r2, [r2, #0]
 800079c:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 800079e:	197b      	adds	r3, r7, r5
 80007a0:	0018      	movs	r0, r3
 80007a2:	f7ff fecb 	bl	800053c <receiveResponseUntilMatch>
    // Verificar o endereço IP alocado
    strcpy(command, "AT+CGPADDR\r\n");
 80007a6:	197b      	adds	r3, r7, r5
 80007a8:	4a23      	ldr	r2, [pc, #140]	@ (8000838 <InitialConfigBg95+0x1d8>)
 80007aa:	ca13      	ldmia	r2!, {r0, r1, r4}
 80007ac:	c313      	stmia	r3!, {r0, r1, r4}
 80007ae:	7812      	ldrb	r2, [r2, #0]
 80007b0:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 80007b2:	002c      	movs	r4, r5
 80007b4:	193b      	adds	r3, r7, r4
 80007b6:	0018      	movs	r0, r3
 80007b8:	f7ff fec0 	bl	800053c <receiveResponseUntilMatch>
    // Comando AT+QPING para realizar ping com o IP obtido
    char ip[16]; // Buffer para armazenar o IP extraído
    if (sscanf(responseBuffer, "+CGPADDR: 1,\"%15[^\"]", ip) == 1) {
 80007bc:	003a      	movs	r2, r7
 80007be:	491f      	ldr	r1, [pc, #124]	@ (800083c <InitialConfigBg95+0x1dc>)
 80007c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000840 <InitialConfigBg95+0x1e0>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f003 fc0c 	bl	8003fe0 <siscanf>
 80007c8:	0003      	movs	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d110      	bne.n	80007f0 <InitialConfigBg95+0x190>
        printf("Endereço IP alocado: %s\n", ip);
 80007ce:	003a      	movs	r2, r7
 80007d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000844 <InitialConfigBg95+0x1e4>)
 80007d2:	0011      	movs	r1, r2
 80007d4:	0018      	movs	r0, r3
 80007d6:	f003 fb5f 	bl	8003e98 <iprintf>
        snprintf(command, sizeof(command), "AT+QPING=1,\"%s\"\r\n", ip);
 80007da:	003b      	movs	r3, r7
 80007dc:	4a1a      	ldr	r2, [pc, #104]	@ (8000848 <InitialConfigBg95+0x1e8>)
 80007de:	1938      	adds	r0, r7, r4
 80007e0:	2180      	movs	r1, #128	@ 0x80
 80007e2:	f003 fbc9 	bl	8003f78 <sniprintf>
        receiveResponseUntilMatch(command);    } else {
 80007e6:	193b      	adds	r3, r7, r4
 80007e8:	0018      	movs	r0, r3
 80007ea:	f7ff fea7 	bl	800053c <receiveResponseUntilMatch>
        printf("Falha ao obter o endereço IP.\n");
    }
}
 80007ee:	e003      	b.n	80007f8 <InitialConfigBg95+0x198>
        printf("Falha ao obter o endereço IP.\n");
 80007f0:	4b16      	ldr	r3, [pc, #88]	@ (800084c <InitialConfigBg95+0x1ec>)
 80007f2:	0018      	movs	r0, r3
 80007f4:	f003 fbb6 	bl	8003f64 <puts>
}
 80007f8:	46c0      	nop			@ (mov r8, r8)
 80007fa:	46bd      	mov	sp, r7
 80007fc:	b024      	add	sp, #144	@ 0x90
 80007fe:	bdb0      	pop	{r4, r5, r7, pc}
 8000800:	08005b04 	.word	0x08005b04
 8000804:	08005b10 	.word	0x08005b10
 8000808:	08005b1c 	.word	0x08005b1c
 800080c:	08005b28 	.word	0x08005b28
 8000810:	08005b44 	.word	0x08005b44
 8000814:	08005b64 	.word	0x08005b64
 8000818:	08005b7c 	.word	0x08005b7c
 800081c:	08005b88 	.word	0x08005b88
 8000820:	08005bc4 	.word	0x08005bc4
 8000824:	08005bd0 	.word	0x08005bd0
 8000828:	08005bf0 	.word	0x08005bf0
 800082c:	08005bfc 	.word	0x08005bfc
 8000830:	08005c08 	.word	0x08005c08
 8000834:	08005c24 	.word	0x08005c24
 8000838:	08005c34 	.word	0x08005c34
 800083c:	08005c44 	.word	0x08005c44
 8000840:	20000140 	.word	0x20000140
 8000844:	08005c5c 	.word	0x08005c5c
 8000848:	08005c78 	.word	0x08005c78
 800084c:	08005c8c 	.word	0x08005c8c

08000850 <ConfigPdpContext>:

void ConfigPdpContext() {
 8000850:	b590      	push	{r4, r7, lr}
 8000852:	b0a1      	sub	sp, #132	@ 0x84
 8000854:	af00      	add	r7, sp, #0
    char command[128];

    // Configurar APN com o contexto CID 1, com login e senha
    snprintf(command, sizeof(command), "AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"\",0,0\r\n");
 8000856:	4a1b      	ldr	r2, [pc, #108]	@ (80008c4 <ConfigPdpContext+0x74>)
 8000858:	003b      	movs	r3, r7
 800085a:	2180      	movs	r1, #128	@ 0x80
 800085c:	0018      	movs	r0, r3
 800085e:	f003 fb8b 	bl	8003f78 <sniprintf>
    receiveResponseUntilMatch(command);  // Enviar comando e esperar resposta
 8000862:	003b      	movs	r3, r7
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff fe69 	bl	800053c <receiveResponseUntilMatch>

    // Ativar o contexto PDP
    strcpy(command, "AT+CGACT=1,1\r\n");
 800086a:	003b      	movs	r3, r7
 800086c:	4a16      	ldr	r2, [pc, #88]	@ (80008c8 <ConfigPdpContext+0x78>)
 800086e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000870:	c313      	stmia	r3!, {r0, r1, r4}
 8000872:	8811      	ldrh	r1, [r2, #0]
 8000874:	8019      	strh	r1, [r3, #0]
 8000876:	7892      	ldrb	r2, [r2, #2]
 8000878:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);  // Enviar comando e esperar resposta
 800087a:	003b      	movs	r3, r7
 800087c:	0018      	movs	r0, r3
 800087e:	f7ff fe5d 	bl	800053c <receiveResponseUntilMatch>

    // Verificar se o contexto PDP está ativo
    strcpy(command, "AT+CGPADDR=1\r\n");
 8000882:	003b      	movs	r3, r7
 8000884:	4a11      	ldr	r2, [pc, #68]	@ (80008cc <ConfigPdpContext+0x7c>)
 8000886:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000888:	c313      	stmia	r3!, {r0, r1, r4}
 800088a:	8811      	ldrh	r1, [r2, #0]
 800088c:	8019      	strh	r1, [r3, #0]
 800088e:	7892      	ldrb	r2, [r2, #2]
 8000890:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);  // Enviar comando e esperar resposta
 8000892:	003b      	movs	r3, r7
 8000894:	0018      	movs	r0, r3
 8000896:	f7ff fe51 	bl	800053c <receiveResponseUntilMatch>

    // Receber a resposta e verificar se contém o IP
    if (strstr(responseBuffer, "0.0.0.0") == NULL) {
 800089a:	4a0d      	ldr	r2, [pc, #52]	@ (80008d0 <ConfigPdpContext+0x80>)
 800089c:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <ConfigPdpContext+0x84>)
 800089e:	0011      	movs	r1, r2
 80008a0:	0018      	movs	r0, r3
 80008a2:	f003 fcc9 	bl	8004238 <strstr>
 80008a6:	1e03      	subs	r3, r0, #0
 80008a8:	d106      	bne.n	80008b8 <ConfigPdpContext+0x68>
        // Contexto PDP ativado com sucesso, IP foi alocado corretamente
        snprintf(command, sizeof(command), "PDP context ativado com sucesso. APN: inlog.vivo.com.br, IP: %s\r\n", responseBuffer);
 80008aa:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <ConfigPdpContext+0x84>)
 80008ac:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <ConfigPdpContext+0x88>)
 80008ae:	0038      	movs	r0, r7
 80008b0:	2180      	movs	r1, #128	@ 0x80
 80008b2:	f003 fb61 	bl	8003f78 <sniprintf>
        // sendATCommand(command); // Transmitir a mensagem de sucesso pela UART
    } else {
        HAL_NVIC_SystemReset();
    }
}
 80008b6:	e001      	b.n	80008bc <ConfigPdpContext+0x6c>
        HAL_NVIC_SystemReset();
 80008b8:	f000 fce1 	bl	800127e <HAL_NVIC_SystemReset>
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b021      	add	sp, #132	@ 0x84
 80008c2:	bd90      	pop	{r4, r7, pc}
 80008c4:	08005cac 	.word	0x08005cac
 80008c8:	08005cdc 	.word	0x08005cdc
 80008cc:	08005cec 	.word	0x08005cec
 80008d0:	08005cfc 	.word	0x08005cfc
 80008d4:	20000140 	.word	0x20000140
 80008d8:	08005d04 	.word	0x08005d04

080008dc <ConfigMqttContext>:

void ConfigMqttContext() {
 80008dc:	b590      	push	{r4, r7, lr}
 80008de:	b0a1      	sub	sp, #132	@ 0x84
 80008e0:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Configurar a versão MQTT como 3.1.1
    strcpy(command, "AT+QMTCFG=\"version\",0,4\r\n");
 80008e2:	003b      	movs	r3, r7
 80008e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000950 <ConfigMqttContext+0x74>)
 80008e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008e8:	c313      	stmia	r3!, {r0, r1, r4}
 80008ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80008ec:	c313      	stmia	r3!, {r0, r1, r4}
 80008ee:	8812      	ldrh	r2, [r2, #0]
 80008f0:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 80008f2:	003b      	movs	r3, r7
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff fe21 	bl	800053c <receiveResponseUntilMatch>
    // Associar o contexto PDP ao cliente MQTT
    strcpy(command, "AT+QMTCFG=\"pdpcid\",0,1\r\n");
 80008fa:	003b      	movs	r3, r7
 80008fc:	4a15      	ldr	r2, [pc, #84]	@ (8000954 <ConfigMqttContext+0x78>)
 80008fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000900:	c313      	stmia	r3!, {r0, r1, r4}
 8000902:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000904:	c313      	stmia	r3!, {r0, r1, r4}
 8000906:	7812      	ldrb	r2, [r2, #0]
 8000908:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 800090a:	003b      	movs	r3, r7
 800090c:	0018      	movs	r0, r3
 800090e:	f7ff fe15 	bl	800053c <receiveResponseUntilMatch>
    // Habilitar SSL para o cliente MQTT
    strcpy(command, "AT+QMTCFG=\"ssl\",0,1,0\r\n");
 8000912:	003b      	movs	r3, r7
 8000914:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <ConfigMqttContext+0x7c>)
 8000916:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000918:	c313      	stmia	r3!, {r0, r1, r4}
 800091a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800091c:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 800091e:	003b      	movs	r3, r7
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff fe0b 	bl	800053c <receiveResponseUntilMatch>
    // Configurar keepalive para 3600 segundos
    strcpy(command, "AT+QMTCFG=\"keepalive\",0,3600\r\n");
 8000926:	003b      	movs	r3, r7
 8000928:	4a0c      	ldr	r2, [pc, #48]	@ (800095c <ConfigMqttContext+0x80>)
 800092a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800092c:	c313      	stmia	r3!, {r0, r1, r4}
 800092e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000930:	c313      	stmia	r3!, {r0, r1, r4}
 8000932:	6811      	ldr	r1, [r2, #0]
 8000934:	6019      	str	r1, [r3, #0]
 8000936:	8891      	ldrh	r1, [r2, #4]
 8000938:	8099      	strh	r1, [r3, #4]
 800093a:	7992      	ldrb	r2, [r2, #6]
 800093c:	719a      	strb	r2, [r3, #6]
    receiveResponseUntilMatch(command);
 800093e:	003b      	movs	r3, r7
 8000940:	0018      	movs	r0, r3
 8000942:	f7ff fdfb 	bl	800053c <receiveResponseUntilMatch>

}
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	46bd      	mov	sp, r7
 800094a:	b021      	add	sp, #132	@ 0x84
 800094c:	bd90      	pop	{r4, r7, pc}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	08005d48 	.word	0x08005d48
 8000954:	08005d64 	.word	0x08005d64
 8000958:	08005d80 	.word	0x08005d80
 800095c:	08005d98 	.word	0x08005d98

08000960 <ActivePdp>:

void ActivePdp() {
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b0a1      	sub	sp, #132	@ 0x84
 8000964:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Verificar se o APN está configurado corretamente
    strcpy(command, "AT+CGDCONT?\r\n");
 8000966:	003b      	movs	r3, r7
 8000968:	4a12      	ldr	r2, [pc, #72]	@ (80009b4 <ActivePdp+0x54>)
 800096a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800096c:	c313      	stmia	r3!, {r0, r1, r4}
 800096e:	8812      	ldrh	r2, [r2, #0]
 8000970:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 8000972:	003b      	movs	r3, r7
 8000974:	0018      	movs	r0, r3
 8000976:	f7ff fde1 	bl	800053c <receiveResponseUntilMatch>
    // Ativar o contexto PDP
    strcpy(command, "AT+CGACT=1,1\r\n");
 800097a:	003b      	movs	r3, r7
 800097c:	4a0e      	ldr	r2, [pc, #56]	@ (80009b8 <ActivePdp+0x58>)
 800097e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000980:	c313      	stmia	r3!, {r0, r1, r4}
 8000982:	8811      	ldrh	r1, [r2, #0]
 8000984:	8019      	strh	r1, [r3, #0]
 8000986:	7892      	ldrb	r2, [r2, #2]
 8000988:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 800098a:	003b      	movs	r3, r7
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fdd5 	bl	800053c <receiveResponseUntilMatch>
    // Verificar se um endereço IP foi atribuído
    strcpy(command, "AT+CGPADDR=1\r\n");
 8000992:	003b      	movs	r3, r7
 8000994:	4a09      	ldr	r2, [pc, #36]	@ (80009bc <ActivePdp+0x5c>)
 8000996:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000998:	c313      	stmia	r3!, {r0, r1, r4}
 800099a:	8811      	ldrh	r1, [r2, #0]
 800099c:	8019      	strh	r1, [r3, #0]
 800099e:	7892      	ldrb	r2, [r2, #2]
 80009a0:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);}
 80009a2:	003b      	movs	r3, r7
 80009a4:	0018      	movs	r0, r3
 80009a6:	f7ff fdc9 	bl	800053c <receiveResponseUntilMatch>
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b021      	add	sp, #132	@ 0x84
 80009b0:	bd90      	pop	{r4, r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	08005db8 	.word	0x08005db8
 80009b8:	08005cdc 	.word	0x08005cdc
 80009bc:	08005cec 	.word	0x08005cec

080009c0 <MqttConnectAndSubscribe>:
void MqttConnectAndSubscribe() {
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b0a1      	sub	sp, #132	@ 0x84
 80009c4:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Conectar ao broker MQTT
    strcpy(command, "AT+QMTOPEN=0,1883\r\n");
 80009c6:	003b      	movs	r3, r7
 80009c8:	4a14      	ldr	r2, [pc, #80]	@ (8000a1c <MqttConnectAndSubscribe+0x5c>)
 80009ca:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009cc:	c313      	stmia	r3!, {r0, r1, r4}
 80009ce:	ca03      	ldmia	r2!, {r0, r1}
 80009d0:	c303      	stmia	r3!, {r0, r1}
    receiveResponseUntilMatch(command);
 80009d2:	003b      	movs	r3, r7
 80009d4:	0018      	movs	r0, r3
 80009d6:	f7ff fdb1 	bl	800053c <receiveResponseUntilMatch>
    // Conectar ao broker MQTT com ID e credenciais
    strcpy(command, "AT+QMTCONN=0,\"1\",\"pixtest\",\"pixtest\"\r\n");
 80009da:	003b      	movs	r3, r7
 80009dc:	4a10      	ldr	r2, [pc, #64]	@ (8000a20 <MqttConnectAndSubscribe+0x60>)
 80009de:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009e0:	c313      	stmia	r3!, {r0, r1, r4}
 80009e2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009e4:	c313      	stmia	r3!, {r0, r1, r4}
 80009e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80009e8:	c313      	stmia	r3!, {r0, r1, r4}
 80009ea:	8811      	ldrh	r1, [r2, #0]
 80009ec:	8019      	strh	r1, [r3, #0]
 80009ee:	7892      	ldrb	r2, [r2, #2]
 80009f0:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 80009f2:	003b      	movs	r3, r7
 80009f4:	0018      	movs	r0, r3
 80009f6:	f7ff fda1 	bl	800053c <receiveResponseUntilMatch>
    // Inscrever-se no tópico desejado
    strcpy(command, "AT+QMTSUB=0,\"pixtest\",1\r\n");
 80009fa:	003b      	movs	r3, r7
 80009fc:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <MqttConnectAndSubscribe+0x64>)
 80009fe:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a00:	c313      	stmia	r3!, {r0, r1, r4}
 8000a02:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a04:	c313      	stmia	r3!, {r0, r1, r4}
 8000a06:	8812      	ldrh	r2, [r2, #0]
 8000a08:	801a      	strh	r2, [r3, #0]
    receiveResponseUntilMatch(command);}
 8000a0a:	003b      	movs	r3, r7
 8000a0c:	0018      	movs	r0, r3
 8000a0e:	f7ff fd95 	bl	800053c <receiveResponseUntilMatch>
 8000a12:	46c0      	nop			@ (mov r8, r8)
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b021      	add	sp, #132	@ 0x84
 8000a18:	bd90      	pop	{r4, r7, pc}
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	08005dc8 	.word	0x08005dc8
 8000a20:	08005ddc 	.word	0x08005ddc
 8000a24:	08005e04 	.word	0x08005e04

08000a28 <MqttConfigBeforeConnection>:

void MqttConfigBeforeConnection() {
 8000a28:	b590      	push	{r4, r7, lr}
 8000a2a:	b0a1      	sub	sp, #132	@ 0x84
 8000a2c:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Verificar se o dispositivo está registrado na rede
    strcpy(command, "AT+CREG?\r\n");
 8000a2e:	003b      	movs	r3, r7
 8000a30:	4a16      	ldr	r2, [pc, #88]	@ (8000a8c <MqttConfigBeforeConnection+0x64>)
 8000a32:	ca03      	ldmia	r2!, {r0, r1}
 8000a34:	c303      	stmia	r3!, {r0, r1}
 8000a36:	8811      	ldrh	r1, [r2, #0]
 8000a38:	8019      	strh	r1, [r3, #0]
 8000a3a:	7892      	ldrb	r2, [r2, #2]
 8000a3c:	709a      	strb	r2, [r3, #2]
    receiveResponseUntilMatch(command);
 8000a3e:	003b      	movs	r3, r7
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff fd7b 	bl	800053c <receiveResponseUntilMatch>
    // Verificar o status do contexto PDP
    strcpy(command, "AT+CGACT?\r\n");
 8000a46:	003b      	movs	r3, r7
 8000a48:	4a11      	ldr	r2, [pc, #68]	@ (8000a90 <MqttConfigBeforeConnection+0x68>)
 8000a4a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a4c:	c313      	stmia	r3!, {r0, r1, r4}
    receiveResponseUntilMatch(command);
 8000a4e:	003b      	movs	r3, r7
 8000a50:	0018      	movs	r0, r3
 8000a52:	f7ff fd73 	bl	800053c <receiveResponseUntilMatch>
    // Verificar a qualidade do sinal
    strcpy(command, "AT+CSQ\r\n");
 8000a56:	003b      	movs	r3, r7
 8000a58:	4a0e      	ldr	r2, [pc, #56]	@ (8000a94 <MqttConfigBeforeConnection+0x6c>)
 8000a5a:	ca03      	ldmia	r2!, {r0, r1}
 8000a5c:	c303      	stmia	r3!, {r0, r1}
 8000a5e:	7812      	ldrb	r2, [r2, #0]
 8000a60:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);
 8000a62:	003b      	movs	r3, r7
 8000a64:	0018      	movs	r0, r3
 8000a66:	f7ff fd69 	bl	800053c <receiveResponseUntilMatch>
    // Configurar o contexto PDP para o canal MQTT
    strcpy(command, "AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000a6a:	003b      	movs	r3, r7
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8000a98 <MqttConfigBeforeConnection+0x70>)
 8000a6e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a70:	c313      	stmia	r3!, {r0, r1, r4}
 8000a72:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000a74:	c313      	stmia	r3!, {r0, r1, r4}
 8000a76:	7812      	ldrb	r2, [r2, #0]
 8000a78:	701a      	strb	r2, [r3, #0]
    receiveResponseUntilMatch(command);}
 8000a7a:	003b      	movs	r3, r7
 8000a7c:	0018      	movs	r0, r3
 8000a7e:	f7ff fd5d 	bl	800053c <receiveResponseUntilMatch>
 8000a82:	46c0      	nop			@ (mov r8, r8)
 8000a84:	46bd      	mov	sp, r7
 8000a86:	b021      	add	sp, #132	@ 0x84
 8000a88:	bd90      	pop	{r4, r7, pc}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	08005e20 	.word	0x08005e20
 8000a90:	08005e2c 	.word	0x08005e2c
 8000a94:	08005e38 	.word	0x08005e38
 8000a98:	08005d64 	.word	0x08005d64

08000a9c <EnterSleepMode>:

	// Enviar o comando AT
	HAL_UART_Transmit(&huart2, command, sizeof(command), HAL_MAX_DELAY);
}

void EnterSleepMode() {
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
	SetNextAlarm();
 8000aa0:	f000 f808 	bl	8000ab4 <SetNextAlarm>
	 HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000aa4:	2001      	movs	r0, #1
 8000aa6:	f000 fe41 	bl	800172c <HAL_PWR_EnableWakeUpPin>
	HAL_PWREx_EnterSHUTDOWNMode();
 8000aaa:	f000 fe73 	bl	8001794 <HAL_PWREx_EnterSHUTDOWNMode>

}
 8000aae:	46c0      	nop			@ (mov r8, r8)
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <SetNextAlarm>:

void SetNextAlarm() {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	@ 0x50
 8000ab8:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	RTC_AlarmTypeDef sAlarm;

// Obter o tempo e data atuais
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000aba:	232c      	movs	r3, #44	@ 0x2c
 8000abc:	18f9      	adds	r1, r7, r3
 8000abe:	4b34      	ldr	r3, [pc, #208]	@ (8000b90 <SetNextAlarm+0xdc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f001 fc16 	bl	80022f4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000ac8:	2328      	movs	r3, #40	@ 0x28
 8000aca:	18f9      	adds	r1, r7, r3
 8000acc:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <SetNextAlarm+0xdc>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	f001 fcfd 	bl	80024d0 <HAL_RTC_GetDate>

// Configurar o tempo para o próximo alarme
	uint32_t totalSeconds = ALARM_PERIOD_IN_SECONDS; // Definir o período em segundos
 8000ad6:	2378      	movs	r3, #120	@ 0x78
 8000ad8:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t hours = totalSeconds / 3600;
 8000ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000adc:	22e1      	movs	r2, #225	@ 0xe1
 8000ade:	0111      	lsls	r1, r2, #4
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f7ff fb23 	bl	800012c <__udivsi3>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t minutes = (totalSeconds % 3600) / 60;
 8000aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000aec:	22e1      	movs	r2, #225	@ 0xe1
 8000aee:	0111      	lsls	r1, r2, #4
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fba1 	bl	8000238 <__aeabi_uidivmod>
 8000af6:	000b      	movs	r3, r1
 8000af8:	213c      	movs	r1, #60	@ 0x3c
 8000afa:	0018      	movs	r0, r3
 8000afc:	f7ff fb16 	bl	800012c <__udivsi3>
 8000b00:	0003      	movs	r3, r0
 8000b02:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t seconds = totalSeconds % 60;
 8000b04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b06:	213c      	movs	r1, #60	@ 0x3c
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f7ff fb95 	bl	8000238 <__aeabi_uidivmod>
 8000b0e:	000b      	movs	r3, r1
 8000b10:	643b      	str	r3, [r7, #64]	@ 0x40

// Configurar os valores no alarme
	sAlarm.Alarm = RTC_ALARM_A;
 8000b12:	003b      	movs	r3, r7
 8000b14:	2280      	movs	r2, #128	@ 0x80
 8000b16:	0052      	lsls	r2, r2, #1
 8000b18:	625a      	str	r2, [r3, #36]	@ 0x24
	sAlarm.AlarmTime.Hours = hours;
 8000b1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	003b      	movs	r3, r7
 8000b20:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8000b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b24:	b2da      	uxtb	r2, r3
 8000b26:	003b      	movs	r3, r7
 8000b28:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = seconds;
 8000b2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000b2c:	b2da      	uxtb	r2, r3
 8000b2e:	003b      	movs	r3, r7
 8000b30:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000b32:	003b      	movs	r3, r7
 8000b34:	2200      	movs	r2, #0
 8000b36:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000b38:	003b      	movs	r3, r7
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]

	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY; // Ignorar a data, repetir alarme diariamente
 8000b3e:	003b      	movs	r3, r7
 8000b40:	2280      	movs	r2, #128	@ 0x80
 8000b42:	0612      	lsls	r2, r2, #24
 8000b44:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000b46:	003b      	movs	r3, r7
 8000b48:	22f0      	movs	r2, #240	@ 0xf0
 8000b4a:	0512      	lsls	r2, r2, #20
 8000b4c:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 1;  // Não utilizado devido à máscara
 8000b54:	003b      	movs	r3, r7
 8000b56:	2220      	movs	r2, #32
 8000b58:	2101      	movs	r1, #1
 8000b5a:	5499      	strb	r1, [r3, r2]

// Desativar alarme anterior antes de configurar o novo
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000b5c:	2380      	movs	r3, #128	@ 0x80
 8000b5e:	005a      	lsls	r2, r3, #1
 8000b60:	4b0b      	ldr	r3, [pc, #44]	@ (8000b90 <SetNextAlarm+0xdc>)
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 fded 	bl	8002744 <HAL_RTC_DeactivateAlarm>

// Configurar novo alarme com interrupção
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8000b6a:	0039      	movs	r1, r7
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <SetNextAlarm+0xdc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	0018      	movs	r0, r3
 8000b72:	f001 fcfb 	bl	800256c <HAL_RTC_SetAlarm_IT>
 8000b76:	1e03      	subs	r3, r0, #0
 8000b78:	d005      	beq.n	8000b86 <SetNextAlarm+0xd2>
		printf("Erro ao configurar o alarme RTC\n");
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <SetNextAlarm+0xe0>)
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	f003 f9f1 	bl	8003f64 <puts>
		while (1)
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	e7fd      	b.n	8000b82 <SetNextAlarm+0xce>
			; // Travar em caso de erro crítico
	}


}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b014      	add	sp, #80	@ 0x50
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			@ (mov r8, r8)
 8000b90:	20000084 	.word	0x20000084
 8000b94:	08005e44 	.word	0x08005e44

08000b98 <InitFlags>:

void InitFlags() {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8000b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc8 <InitFlags+0x30>)
 8000b9e:	691a      	ldr	r2, [r3, #16]
 8000ba0:	2380      	movs	r3, #128	@ 0x80
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	2380      	movs	r3, #128	@ 0x80
 8000ba8:	005b      	lsls	r3, r3, #1
 8000baa:	429a      	cmp	r2, r3
 8000bac:	d106      	bne.n	8000bbc <InitFlags+0x24>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8000bae:	4b06      	ldr	r3, [pc, #24]	@ (8000bc8 <InitFlags+0x30>)
 8000bb0:	4a06      	ldr	r2, [pc, #24]	@ (8000bcc <InitFlags+0x34>)
 8000bb2:	619a      	str	r2, [r3, #24]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	f000 fdd9 	bl	800176c <HAL_PWR_DisableWakeUpPin>
	} else {
		MX_RTC_Init();
	}

}
 8000bba:	e001      	b.n	8000bc0 <InitFlags+0x28>
		MX_RTC_Init();
 8000bbc:	f7ff fbc4 	bl	8000348 <MX_RTC_Init>
}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	40007000 	.word	0x40007000
 8000bcc:	00010100 	.word	0x00010100

08000bd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bd4:	b672      	cpsid	i
}
 8000bd6:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bd8:	46c0      	nop			@ (mov r8, r8)
 8000bda:	e7fd      	b.n	8000bd8 <Error_Handler+0x8>

08000bdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be2:	4b13      	ldr	r3, [pc, #76]	@ (8000c30 <HAL_MspInit+0x54>)
 8000be4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000be6:	4b12      	ldr	r3, [pc, #72]	@ (8000c30 <HAL_MspInit+0x54>)
 8000be8:	2101      	movs	r1, #1
 8000bea:	430a      	orrs	r2, r1
 8000bec:	641a      	str	r2, [r3, #64]	@ 0x40
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <HAL_MspInit+0x54>)
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000c30 <HAL_MspInit+0x54>)
 8000bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <HAL_MspInit+0x54>)
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	0549      	lsls	r1, r1, #21
 8000c04:	430a      	orrs	r2, r1
 8000c06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c08:	4b09      	ldr	r3, [pc, #36]	@ (8000c30 <HAL_MspInit+0x54>)
 8000c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c0c:	2380      	movs	r3, #128	@ 0x80
 8000c0e:	055b      	lsls	r3, r3, #21
 8000c10:	4013      	ands	r3, r2
 8000c12:	603b      	str	r3, [r7, #0]
 8000c14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000c16:	2200      	movs	r2, #0
 8000c18:	2100      	movs	r1, #0
 8000c1a:	2004      	movs	r0, #4
 8000c1c:	f000 fb0a 	bl	8001234 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000c20:	2004      	movs	r0, #4
 8000c22:	f000 fb1c 	bl	800125e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	40021000 	.word	0x40021000

08000c34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c34:	b590      	push	{r4, r7, lr}
 8000c36:	b08b      	sub	sp, #44	@ 0x2c
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	240c      	movs	r4, #12
 8000c3e:	193b      	adds	r3, r7, r4
 8000c40:	0018      	movs	r0, r3
 8000c42:	231c      	movs	r3, #28
 8000c44:	001a      	movs	r2, r3
 8000c46:	2100      	movs	r1, #0
 8000c48:	f003 fae0 	bl	800420c <memset>
  if(hrtc->Instance==RTC)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a19      	ldr	r2, [pc, #100]	@ (8000cb8 <HAL_RTC_MspInit+0x84>)
 8000c52:	4293      	cmp	r3, r2
 8000c54:	d12b      	bne.n	8000cae <HAL_RTC_MspInit+0x7a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c56:	193b      	adds	r3, r7, r4
 8000c58:	2240      	movs	r2, #64	@ 0x40
 8000c5a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c5c:	193b      	adds	r3, r7, r4
 8000c5e:	2280      	movs	r2, #128	@ 0x80
 8000c60:	0092      	lsls	r2, r2, #2
 8000c62:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c64:	193b      	adds	r3, r7, r4
 8000c66:	0018      	movs	r0, r3
 8000c68:	f001 f922 	bl	8001eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000c6c:	1e03      	subs	r3, r0, #0
 8000c6e:	d001      	beq.n	8000c74 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000c70:	f7ff ffae 	bl	8000bd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c74:	4b11      	ldr	r3, [pc, #68]	@ (8000cbc <HAL_RTC_MspInit+0x88>)
 8000c76:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000c78:	4b10      	ldr	r3, [pc, #64]	@ (8000cbc <HAL_RTC_MspInit+0x88>)
 8000c7a:	2180      	movs	r1, #128	@ 0x80
 8000c7c:	0209      	lsls	r1, r1, #8
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c82:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <HAL_RTC_MspInit+0x88>)
 8000c84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c86:	4b0d      	ldr	r3, [pc, #52]	@ (8000cbc <HAL_RTC_MspInit+0x88>)
 8000c88:	2180      	movs	r1, #128	@ 0x80
 8000c8a:	00c9      	lsls	r1, r1, #3
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c90:	4b0a      	ldr	r3, [pc, #40]	@ (8000cbc <HAL_RTC_MspInit+0x88>)
 8000c92:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000c94:	2380      	movs	r3, #128	@ 0x80
 8000c96:	00db      	lsls	r3, r3, #3
 8000c98:	4013      	ands	r3, r2
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	2002      	movs	r0, #2
 8000ca4:	f000 fac6 	bl	8001234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f000 fad8 	bl	800125e <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b00b      	add	sp, #44	@ 0x2c
 8000cb4:	bd90      	pop	{r4, r7, pc}
 8000cb6:	46c0      	nop			@ (mov r8, r8)
 8000cb8:	40002800 	.word	0x40002800
 8000cbc:	40021000 	.word	0x40021000

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b590      	push	{r4, r7, lr}
 8000cc2:	b08b      	sub	sp, #44	@ 0x2c
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	2414      	movs	r4, #20
 8000cca:	193b      	adds	r3, r7, r4
 8000ccc:	0018      	movs	r0, r3
 8000cce:	2314      	movs	r3, #20
 8000cd0:	001a      	movs	r2, r3
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	f003 fa9a 	bl	800420c <memset>
  if(huart->Instance==USART2)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a1f      	ldr	r2, [pc, #124]	@ (8000d5c <HAL_UART_MspInit+0x9c>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d138      	bne.n	8000d54 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	@ (8000d60 <HAL_UART_MspInit+0xa0>)
 8000ce4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d60 <HAL_UART_MspInit+0xa0>)
 8000ce8:	2180      	movs	r1, #128	@ 0x80
 8000cea:	0289      	lsls	r1, r1, #10
 8000cec:	430a      	orrs	r2, r1
 8000cee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <HAL_UART_MspInit+0xa0>)
 8000cf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cf4:	2380      	movs	r3, #128	@ 0x80
 8000cf6:	029b      	lsls	r3, r3, #10
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	4b18      	ldr	r3, [pc, #96]	@ (8000d60 <HAL_UART_MspInit+0xa0>)
 8000d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000d02:	4b17      	ldr	r3, [pc, #92]	@ (8000d60 <HAL_UART_MspInit+0xa0>)
 8000d04:	2101      	movs	r1, #1
 8000d06:	430a      	orrs	r2, r1
 8000d08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000d0a:	4b15      	ldr	r3, [pc, #84]	@ (8000d60 <HAL_UART_MspInit+0xa0>)
 8000d0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d0e:	2201      	movs	r2, #1
 8000d10:	4013      	ands	r3, r2
 8000d12:	60fb      	str	r3, [r7, #12]
 8000d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d16:	0021      	movs	r1, r4
 8000d18:	187b      	adds	r3, r7, r1
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	2202      	movs	r2, #2
 8000d22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2201      	movs	r2, #1
 8000d34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	187a      	adds	r2, r7, r1
 8000d38:	23a0      	movs	r3, #160	@ 0xa0
 8000d3a:	05db      	lsls	r3, r3, #23
 8000d3c:	0011      	movs	r1, r2
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 fb8a 	bl	8001458 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d44:	2200      	movs	r2, #0
 8000d46:	2100      	movs	r1, #0
 8000d48:	201c      	movs	r0, #28
 8000d4a:	f000 fa73 	bl	8001234 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d4e:	201c      	movs	r0, #28
 8000d50:	f000 fa85 	bl	800125e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d54:	46c0      	nop			@ (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b00b      	add	sp, #44	@ 0x2c
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	40004400 	.word	0x40004400
 8000d60:	40021000 	.word	0x40021000

08000d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d68:	46c0      	nop			@ (mov r8, r8)
 8000d6a:	e7fd      	b.n	8000d68 <NMI_Handler+0x4>

08000d6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d70:	46c0      	nop			@ (mov r8, r8)
 8000d72:	e7fd      	b.n	8000d70 <HardFault_Handler+0x4>

08000d74 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d78:	46c0      	nop			@ (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8c:	f000 f954 	bl	8001038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d90:	46c0      	nop			@ (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupts through EXTI lines 19 and 21.
  */
void RTC_IRQHandler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000d9c:	4b03      	ldr	r3, [pc, #12]	@ (8000dac <RTC_IRQHandler+0x14>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f001 fd38 	bl	8002814 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000da4:	46c0      	nop			@ (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	46c0      	nop			@ (mov r8, r8)
 8000dac:	20000084 	.word	0x20000084

08000db0 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000db4:	46c0      	nop			@ (mov r8, r8)
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dc0:	4b03      	ldr	r3, [pc, #12]	@ (8000dd0 <USART2_IRQHandler+0x14>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f002 f834 	bl	8002e30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dc8:	46c0      	nop			@ (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			@ (mov r8, r8)
 8000dd0:	200000ac 	.word	0x200000ac

08000dd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e00a      	b.n	8000dfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de6:	e000      	b.n	8000dea <_read+0x16>
 8000de8:	bf00      	nop
 8000dea:	0001      	movs	r1, r0
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	60ba      	str	r2, [r7, #8]
 8000df2:	b2ca      	uxtb	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbf0      	blt.n	8000de6 <_read+0x12>
  }

  return len;
 8000e04:	687b      	ldr	r3, [r7, #4]
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b006      	add	sp, #24
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e009      	b.n	8000e34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	60ba      	str	r2, [r7, #8]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	0018      	movs	r0, r3
 8000e2a:	e000      	b.n	8000e2e <_write+0x20>
 8000e2c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf1      	blt.n	8000e20 <_write+0x12>
  }
  return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	0018      	movs	r0, r3
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b006      	add	sp, #24
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_close>:

int _close(int file)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	425b      	negs	r3, r3
}
 8000e52:	0018      	movs	r0, r3
 8000e54:	46bd      	mov	sp, r7
 8000e56:	b002      	add	sp, #8
 8000e58:	bd80      	pop	{r7, pc}

08000e5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5a:	b580      	push	{r7, lr}
 8000e5c:	b082      	sub	sp, #8
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
 8000e62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	2280      	movs	r2, #128	@ 0x80
 8000e68:	0192      	lsls	r2, r2, #6
 8000e6a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	0018      	movs	r0, r3
 8000e70:	46bd      	mov	sp, r7
 8000e72:	b002      	add	sp, #8
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <_isatty>:

int _isatty(int file)
{
 8000e76:	b580      	push	{r7, lr}
 8000e78:	b082      	sub	sp, #8
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b002      	add	sp, #8
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e94:	2300      	movs	r3, #0
}
 8000e96:	0018      	movs	r0, r3
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	b004      	add	sp, #16
 8000e9c:	bd80      	pop	{r7, pc}
	...

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	18d3      	adds	r3, r2, r3
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f003 fa16 	bl	8004300 <__errno>
 8000ed4:	0003      	movs	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	2301      	movs	r3, #1
 8000edc:	425b      	negs	r3, r3
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	18d2      	adds	r2, r2, r3
 8000eee:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <_sbrk+0x64>)
 8000ef0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	0018      	movs	r0, r3
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	b006      	add	sp, #24
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20001800 	.word	0x20001800
 8000f00:	00000400 	.word	0x00000400
 8000f04:	20000240 	.word	0x20000240
 8000f08:	20000398 	.word	0x20000398

08000f0c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f10:	4b03      	ldr	r3, [pc, #12]	@ (8000f20 <SystemInit+0x14>)
 8000f12:	2280      	movs	r2, #128	@ 0x80
 8000f14:	0512      	lsls	r2, r2, #20
 8000f16:	609a      	str	r2, [r3, #8]
#endif
}
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			@ (mov r8, r8)
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f24:	480d      	ldr	r0, [pc, #52]	@ (8000f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f28:	f7ff fff0 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f2c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f2e:	e003      	b.n	8000f38 <LoopCopyDataInit>

08000f30 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f30:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000f32:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f34:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f36:	3104      	adds	r1, #4

08000f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f38:	480a      	ldr	r0, [pc, #40]	@ (8000f64 <LoopForever+0xa>)
  ldr r3, =_edata
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <LoopForever+0xe>)
  adds r2, r0, r1
 8000f3c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f3e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f40:	d3f6      	bcc.n	8000f30 <CopyDataInit>
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	@ (8000f6c <LoopForever+0x12>)
  b LoopFillZerobss
 8000f44:	e002      	b.n	8000f4c <LoopFillZerobss>

08000f46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f48:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4a:	3204      	adds	r2, #4

08000f4c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000f4c:	4b08      	ldr	r3, [pc, #32]	@ (8000f70 <LoopForever+0x16>)
  cmp r2, r3
 8000f4e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f50:	d3f9      	bcc.n	8000f46 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000f52:	f003 f9db 	bl	800430c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f56:	f7ff f975 	bl	8000244 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   r0, =_estack
 8000f5c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000f60:	08006040 	.word	0x08006040
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f68:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000f6c:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000f70:	20000394 	.word	0x20000394

08000f74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_IRQHandler>

08000f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	1dfb      	adds	r3, r7, #7
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f82:	2003      	movs	r0, #3
 8000f84:	f000 f80e 	bl	8000fa4 <HAL_InitTick>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
 8000f92:	e001      	b.n	8000f98 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f94:	f7ff fe22 	bl	8000bdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f98:	1dfb      	adds	r3, r7, #7
 8000f9a:	781b      	ldrb	r3, [r3, #0]
}
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	b002      	add	sp, #8
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b590      	push	{r4, r7, lr}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fac:	230f      	movs	r3, #15
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <HAL_InitTick+0x88>)
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d02b      	beq.n	8001014 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000fbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001030 <HAL_InitTick+0x8c>)
 8000fbe:	681c      	ldr	r4, [r3, #0]
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	@ (800102c <HAL_InitTick+0x88>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	0019      	movs	r1, r3
 8000fc6:	23fa      	movs	r3, #250	@ 0xfa
 8000fc8:	0098      	lsls	r0, r3, #2
 8000fca:	f7ff f8af 	bl	800012c <__udivsi3>
 8000fce:	0003      	movs	r3, r0
 8000fd0:	0019      	movs	r1, r3
 8000fd2:	0020      	movs	r0, r4
 8000fd4:	f7ff f8aa 	bl	800012c <__udivsi3>
 8000fd8:	0003      	movs	r3, r0
 8000fda:	0018      	movs	r0, r3
 8000fdc:	f000 f953 	bl	8001286 <HAL_SYSTICK_Config>
 8000fe0:	1e03      	subs	r3, r0, #0
 8000fe2:	d112      	bne.n	800100a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d80a      	bhi.n	8001000 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	2301      	movs	r3, #1
 8000fee:	425b      	negs	r3, r3
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f000 f91e 	bl	8001234 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <HAL_InitTick+0x90>)
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	e00d      	b.n	800101c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001000:	230f      	movs	r3, #15
 8001002:	18fb      	adds	r3, r7, r3
 8001004:	2201      	movs	r2, #1
 8001006:	701a      	strb	r2, [r3, #0]
 8001008:	e008      	b.n	800101c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800100a:	230f      	movs	r3, #15
 800100c:	18fb      	adds	r3, r7, r3
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	e003      	b.n	800101c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001014:	230f      	movs	r3, #15
 8001016:	18fb      	adds	r3, r7, r3
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800101c:	230f      	movs	r3, #15
 800101e:	18fb      	adds	r3, r7, r3
 8001020:	781b      	ldrb	r3, [r3, #0]
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b005      	add	sp, #20
 8001028:	bd90      	pop	{r4, r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	20000008 	.word	0x20000008
 8001030:	20000000 	.word	0x20000000
 8001034:	20000004 	.word	0x20000004

08001038 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800103c:	4b05      	ldr	r3, [pc, #20]	@ (8001054 <HAL_IncTick+0x1c>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	001a      	movs	r2, r3
 8001042:	4b05      	ldr	r3, [pc, #20]	@ (8001058 <HAL_IncTick+0x20>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	18d2      	adds	r2, r2, r3
 8001048:	4b03      	ldr	r3, [pc, #12]	@ (8001058 <HAL_IncTick+0x20>)
 800104a:	601a      	str	r2, [r3, #0]
}
 800104c:	46c0      	nop			@ (mov r8, r8)
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	46c0      	nop			@ (mov r8, r8)
 8001054:	20000008 	.word	0x20000008
 8001058:	20000244 	.word	0x20000244

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b02      	ldr	r3, [pc, #8]	@ (800106c <HAL_GetTick+0x10>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			@ (mov r8, r8)
 800106c:	20000244 	.word	0x20000244

08001070 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001078:	f7ff fff0 	bl	800105c <HAL_GetTick>
 800107c:	0003      	movs	r3, r0
 800107e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	3301      	adds	r3, #1
 8001088:	d005      	beq.n	8001096 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108a:	4b0a      	ldr	r3, [pc, #40]	@ (80010b4 <HAL_Delay+0x44>)
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	001a      	movs	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	189b      	adds	r3, r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	f7ff ffe0 	bl	800105c <HAL_GetTick>
 800109c:	0002      	movs	r2, r0
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	68fa      	ldr	r2, [r7, #12]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d8f7      	bhi.n	8001098 <HAL_Delay+0x28>
  {
  }
}
 80010a8:	46c0      	nop			@ (mov r8, r8)
 80010aa:	46c0      	nop			@ (mov r8, r8)
 80010ac:	46bd      	mov	sp, r7
 80010ae:	b004      	add	sp, #16
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	46c0      	nop			@ (mov r8, r8)
 80010b4:	20000008 	.word	0x20000008

080010b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	0002      	movs	r2, r0
 80010c0:	1dfb      	adds	r3, r7, #7
 80010c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010c4:	1dfb      	adds	r3, r7, #7
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80010ca:	d809      	bhi.n	80010e0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010cc:	1dfb      	adds	r3, r7, #7
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	001a      	movs	r2, r3
 80010d2:	231f      	movs	r3, #31
 80010d4:	401a      	ands	r2, r3
 80010d6:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <__NVIC_EnableIRQ+0x30>)
 80010d8:	2101      	movs	r1, #1
 80010da:	4091      	lsls	r1, r2
 80010dc:	000a      	movs	r2, r1
 80010de:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80010e0:	46c0      	nop			@ (mov r8, r8)
 80010e2:	46bd      	mov	sp, r7
 80010e4:	b002      	add	sp, #8
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	e000e100 	.word	0xe000e100

080010ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010ec:	b590      	push	{r4, r7, lr}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	0002      	movs	r2, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	1dfb      	adds	r3, r7, #7
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8001100:	d828      	bhi.n	8001154 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001102:	4a2f      	ldr	r2, [pc, #188]	@ (80011c0 <__NVIC_SetPriority+0xd4>)
 8001104:	1dfb      	adds	r3, r7, #7
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b25b      	sxtb	r3, r3
 800110a:	089b      	lsrs	r3, r3, #2
 800110c:	33c0      	adds	r3, #192	@ 0xc0
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	589b      	ldr	r3, [r3, r2]
 8001112:	1dfa      	adds	r2, r7, #7
 8001114:	7812      	ldrb	r2, [r2, #0]
 8001116:	0011      	movs	r1, r2
 8001118:	2203      	movs	r2, #3
 800111a:	400a      	ands	r2, r1
 800111c:	00d2      	lsls	r2, r2, #3
 800111e:	21ff      	movs	r1, #255	@ 0xff
 8001120:	4091      	lsls	r1, r2
 8001122:	000a      	movs	r2, r1
 8001124:	43d2      	mvns	r2, r2
 8001126:	401a      	ands	r2, r3
 8001128:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	019b      	lsls	r3, r3, #6
 800112e:	22ff      	movs	r2, #255	@ 0xff
 8001130:	401a      	ands	r2, r3
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	0018      	movs	r0, r3
 8001138:	2303      	movs	r3, #3
 800113a:	4003      	ands	r3, r0
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001140:	481f      	ldr	r0, [pc, #124]	@ (80011c0 <__NVIC_SetPriority+0xd4>)
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b25b      	sxtb	r3, r3
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	430a      	orrs	r2, r1
 800114c:	33c0      	adds	r3, #192	@ 0xc0
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001152:	e031      	b.n	80011b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001154:	4a1b      	ldr	r2, [pc, #108]	@ (80011c4 <__NVIC_SetPriority+0xd8>)
 8001156:	1dfb      	adds	r3, r7, #7
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	0019      	movs	r1, r3
 800115c:	230f      	movs	r3, #15
 800115e:	400b      	ands	r3, r1
 8001160:	3b08      	subs	r3, #8
 8001162:	089b      	lsrs	r3, r3, #2
 8001164:	3306      	adds	r3, #6
 8001166:	009b      	lsls	r3, r3, #2
 8001168:	18d3      	adds	r3, r2, r3
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	1dfa      	adds	r2, r7, #7
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	0011      	movs	r1, r2
 8001174:	2203      	movs	r2, #3
 8001176:	400a      	ands	r2, r1
 8001178:	00d2      	lsls	r2, r2, #3
 800117a:	21ff      	movs	r1, #255	@ 0xff
 800117c:	4091      	lsls	r1, r2
 800117e:	000a      	movs	r2, r1
 8001180:	43d2      	mvns	r2, r2
 8001182:	401a      	ands	r2, r3
 8001184:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	019b      	lsls	r3, r3, #6
 800118a:	22ff      	movs	r2, #255	@ 0xff
 800118c:	401a      	ands	r2, r3
 800118e:	1dfb      	adds	r3, r7, #7
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	0018      	movs	r0, r3
 8001194:	2303      	movs	r3, #3
 8001196:	4003      	ands	r3, r0
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800119c:	4809      	ldr	r0, [pc, #36]	@ (80011c4 <__NVIC_SetPriority+0xd8>)
 800119e:	1dfb      	adds	r3, r7, #7
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	001c      	movs	r4, r3
 80011a4:	230f      	movs	r3, #15
 80011a6:	4023      	ands	r3, r4
 80011a8:	3b08      	subs	r3, #8
 80011aa:	089b      	lsrs	r3, r3, #2
 80011ac:	430a      	orrs	r2, r1
 80011ae:	3306      	adds	r3, #6
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	18c3      	adds	r3, r0, r3
 80011b4:	3304      	adds	r3, #4
 80011b6:	601a      	str	r2, [r3, #0]
}
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b003      	add	sp, #12
 80011be:	bd90      	pop	{r4, r7, pc}
 80011c0:	e000e100 	.word	0xe000e100
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 80011cc:	f3bf 8f4f 	dsb	sy
}
 80011d0:	46c0      	nop			@ (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d2:	4b04      	ldr	r3, [pc, #16]	@ (80011e4 <__NVIC_SystemReset+0x1c>)
 80011d4:	4a04      	ldr	r2, [pc, #16]	@ (80011e8 <__NVIC_SystemReset+0x20>)
 80011d6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80011d8:	f3bf 8f4f 	dsb	sy
}
 80011dc:	46c0      	nop			@ (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80011de:	46c0      	nop			@ (mov r8, r8)
 80011e0:	e7fd      	b.n	80011de <__NVIC_SystemReset+0x16>
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	e000ed00 	.word	0xe000ed00
 80011e8:	05fa0004 	.word	0x05fa0004

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	1e5a      	subs	r2, r3, #1
 80011f8:	2380      	movs	r3, #128	@ 0x80
 80011fa:	045b      	lsls	r3, r3, #17
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d301      	bcc.n	8001204 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001200:	2301      	movs	r3, #1
 8001202:	e010      	b.n	8001226 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <SysTick_Config+0x44>)
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	3a01      	subs	r2, #1
 800120a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120c:	2301      	movs	r3, #1
 800120e:	425b      	negs	r3, r3
 8001210:	2103      	movs	r1, #3
 8001212:	0018      	movs	r0, r3
 8001214:	f7ff ff6a 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001218:	4b05      	ldr	r3, [pc, #20]	@ (8001230 <SysTick_Config+0x44>)
 800121a:	2200      	movs	r2, #0
 800121c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121e:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <SysTick_Config+0x44>)
 8001220:	2207      	movs	r2, #7
 8001222:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001224:	2300      	movs	r3, #0
}
 8001226:	0018      	movs	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	b002      	add	sp, #8
 800122c:	bd80      	pop	{r7, pc}
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	e000e010 	.word	0xe000e010

08001234 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	60b9      	str	r1, [r7, #8]
 800123c:	607a      	str	r2, [r7, #4]
 800123e:	210f      	movs	r1, #15
 8001240:	187b      	adds	r3, r7, r1
 8001242:	1c02      	adds	r2, r0, #0
 8001244:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	187b      	adds	r3, r7, r1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	b25b      	sxtb	r3, r3
 800124e:	0011      	movs	r1, r2
 8001250:	0018      	movs	r0, r3
 8001252:	f7ff ff4b 	bl	80010ec <__NVIC_SetPriority>
}
 8001256:	46c0      	nop			@ (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b004      	add	sp, #16
 800125c:	bd80      	pop	{r7, pc}

0800125e <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
 8001264:	0002      	movs	r2, r0
 8001266:	1dfb      	adds	r3, r7, #7
 8001268:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b25b      	sxtb	r3, r3
 8001270:	0018      	movs	r0, r3
 8001272:	f7ff ff21 	bl	80010b8 <__NVIC_EnableIRQ>
}
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	b002      	add	sp, #8
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001282:	f7ff ffa1 	bl	80011c8 <__NVIC_SystemReset>

08001286 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff ffab 	bl	80011ec <SysTick_Config>
 8001296:	0003      	movs	r3, r0
}
 8001298:	0018      	movs	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e050      	b.n	8001354 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2225      	movs	r2, #37	@ 0x25
 80012b6:	5c9b      	ldrb	r3, [r3, r2]
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d008      	beq.n	80012d0 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2204      	movs	r2, #4
 80012c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2224      	movs	r2, #36	@ 0x24
 80012c8:	2100      	movs	r1, #0
 80012ca:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e041      	b.n	8001354 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	681a      	ldr	r2, [r3, #0]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	210e      	movs	r1, #14
 80012dc:	438a      	bics	r2, r1
 80012de:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	491c      	ldr	r1, [pc, #112]	@ (800135c <HAL_DMA_Abort+0xbc>)
 80012ec:	400a      	ands	r2, r1
 80012ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2101      	movs	r1, #1
 80012fc:	438a      	bics	r2, r1
 80012fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001300:	4b17      	ldr	r3, [pc, #92]	@ (8001360 <HAL_DMA_Abort+0xc0>)
 8001302:	6859      	ldr	r1, [r3, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001308:	221c      	movs	r2, #28
 800130a:	4013      	ands	r3, r2
 800130c:	2201      	movs	r2, #1
 800130e:	409a      	lsls	r2, r3
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <HAL_DMA_Abort+0xc0>)
 8001312:	430a      	orrs	r2, r1
 8001314:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131a:	687a      	ldr	r2, [r7, #4]
 800131c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800131e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001324:	2b00      	cmp	r3, #0
 8001326:	d00c      	beq.n	8001342 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001332:	490a      	ldr	r1, [pc, #40]	@ (800135c <HAL_DMA_Abort+0xbc>)
 8001334:	400a      	ands	r2, r1
 8001336:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001340:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2225      	movs	r2, #37	@ 0x25
 8001346:	2101      	movs	r1, #1
 8001348:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2224      	movs	r2, #36	@ 0x24
 800134e:	2100      	movs	r1, #0
 8001350:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001352:	2300      	movs	r3, #0
}
 8001354:	0018      	movs	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	b002      	add	sp, #8
 800135a:	bd80      	pop	{r7, pc}
 800135c:	fffffeff 	.word	0xfffffeff
 8001360:	40020000 	.word	0x40020000

08001364 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800136c:	230f      	movs	r3, #15
 800136e:	18fb      	adds	r3, r7, r3
 8001370:	2200      	movs	r2, #0
 8001372:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2224      	movs	r2, #36	@ 0x24
 8001378:	2100      	movs	r1, #0
 800137a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2224      	movs	r2, #36	@ 0x24
 8001380:	5c9b      	ldrb	r3, [r3, r2]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d101      	bne.n	800138a <HAL_DMA_Abort_IT+0x26>
 8001386:	2302      	movs	r3, #2
 8001388:	e05e      	b.n	8001448 <HAL_DMA_Abort_IT+0xe4>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2224      	movs	r2, #36	@ 0x24
 800138e:	2101      	movs	r1, #1
 8001390:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2225      	movs	r2, #37	@ 0x25
 8001396:	5c9b      	ldrb	r3, [r3, r2]
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d007      	beq.n	80013ae <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2204      	movs	r2, #4
 80013a2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80013a4:	230f      	movs	r3, #15
 80013a6:	18fb      	adds	r3, r7, r3
 80013a8:	2201      	movs	r2, #1
 80013aa:	701a      	strb	r2, [r3, #0]
 80013ac:	e049      	b.n	8001442 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	210e      	movs	r1, #14
 80013ba:	438a      	bics	r2, r1
 80013bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	438a      	bics	r2, r1
 80013cc:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d8:	491d      	ldr	r1, [pc, #116]	@ (8001450 <HAL_DMA_Abort_IT+0xec>)
 80013da:	400a      	ands	r2, r1
 80013dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80013de:	4b1d      	ldr	r3, [pc, #116]	@ (8001454 <HAL_DMA_Abort_IT+0xf0>)
 80013e0:	6859      	ldr	r1, [r3, #4]
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	221c      	movs	r2, #28
 80013e8:	4013      	ands	r3, r2
 80013ea:	2201      	movs	r2, #1
 80013ec:	409a      	lsls	r2, r3
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_DMA_Abort_IT+0xf0>)
 80013f0:	430a      	orrs	r2, r1
 80013f2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80013fc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001402:	2b00      	cmp	r3, #0
 8001404:	d00c      	beq.n	8001420 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001410:	490f      	ldr	r1, [pc, #60]	@ (8001450 <HAL_DMA_Abort_IT+0xec>)
 8001412:	400a      	ands	r2, r1
 8001414:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800141e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2225      	movs	r2, #37	@ 0x25
 8001424:	2101      	movs	r1, #1
 8001426:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2224      	movs	r2, #36	@ 0x24
 800142c:	2100      	movs	r1, #0
 800142e:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001434:	2b00      	cmp	r3, #0
 8001436:	d004      	beq.n	8001442 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800143c:	687a      	ldr	r2, [r7, #4]
 800143e:	0010      	movs	r0, r2
 8001440:	4798      	blx	r3
    }
  }
  return status;
 8001442:	230f      	movs	r3, #15
 8001444:	18fb      	adds	r3, r7, r3
 8001446:	781b      	ldrb	r3, [r3, #0]
}
 8001448:	0018      	movs	r0, r3
 800144a:	46bd      	mov	sp, r7
 800144c:	b004      	add	sp, #16
 800144e:	bd80      	pop	{r7, pc}
 8001450:	fffffeff 	.word	0xfffffeff
 8001454:	40020000 	.word	0x40020000

08001458 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
 8001460:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001466:	e14d      	b.n	8001704 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2101      	movs	r1, #1
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	4091      	lsls	r1, r2
 8001472:	000a      	movs	r2, r1
 8001474:	4013      	ands	r3, r2
 8001476:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d100      	bne.n	8001480 <HAL_GPIO_Init+0x28>
 800147e:	e13e      	b.n	80016fe <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b02      	cmp	r3, #2
 8001486:	d003      	beq.n	8001490 <HAL_GPIO_Init+0x38>
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b12      	cmp	r3, #18
 800148e:	d125      	bne.n	80014dc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001490:	693b      	ldr	r3, [r7, #16]
 8001492:	08da      	lsrs	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	3208      	adds	r2, #8
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	58d3      	ldr	r3, [r2, r3]
 800149c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	2207      	movs	r2, #7
 80014a2:	4013      	ands	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	220f      	movs	r2, #15
 80014a8:	409a      	lsls	r2, r3
 80014aa:	0013      	movs	r3, r2
 80014ac:	43da      	mvns	r2, r3
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	4013      	ands	r3, r2
 80014b2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	691b      	ldr	r3, [r3, #16]
 80014b8:	220f      	movs	r2, #15
 80014ba:	401a      	ands	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	2107      	movs	r1, #7
 80014c0:	400b      	ands	r3, r1
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	697a      	ldr	r2, [r7, #20]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	08da      	lsrs	r2, r3, #3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3208      	adds	r2, #8
 80014d6:	0092      	lsls	r2, r2, #2
 80014d8:	6979      	ldr	r1, [r7, #20]
 80014da:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	005b      	lsls	r3, r3, #1
 80014e6:	2203      	movs	r2, #3
 80014e8:	409a      	lsls	r2, r3
 80014ea:	0013      	movs	r3, r2
 80014ec:	43da      	mvns	r2, r3
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	4013      	ands	r3, r2
 80014f2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2203      	movs	r2, #3
 80014fa:	401a      	ands	r2, r3
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	409a      	lsls	r2, r3
 8001502:	0013      	movs	r3, r2
 8001504:	697a      	ldr	r2, [r7, #20]
 8001506:	4313      	orrs	r3, r2
 8001508:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d00b      	beq.n	8001530 <HAL_GPIO_Init+0xd8>
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	2b02      	cmp	r3, #2
 800151e:	d007      	beq.n	8001530 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001524:	2b11      	cmp	r3, #17
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b12      	cmp	r3, #18
 800152e:	d130      	bne.n	8001592 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	409a      	lsls	r2, r3
 800153e:	0013      	movs	r3, r2
 8001540:	43da      	mvns	r2, r3
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	4013      	ands	r3, r2
 8001546:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	68da      	ldr	r2, [r3, #12]
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	409a      	lsls	r2, r3
 8001552:	0013      	movs	r3, r2
 8001554:	697a      	ldr	r2, [r7, #20]
 8001556:	4313      	orrs	r3, r2
 8001558:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	697a      	ldr	r2, [r7, #20]
 800155e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001566:	2201      	movs	r2, #1
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	43da      	mvns	r2, r3
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	4013      	ands	r3, r2
 8001574:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	091b      	lsrs	r3, r3, #4
 800157c:	2201      	movs	r2, #1
 800157e:	401a      	ands	r2, r3
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	409a      	lsls	r2, r3
 8001584:	0013      	movs	r3, r2
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	4313      	orrs	r3, r2
 800158a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	2b03      	cmp	r3, #3
 8001598:	d017      	beq.n	80015ca <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	68db      	ldr	r3, [r3, #12]
 800159e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2203      	movs	r2, #3
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	43da      	mvns	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	4013      	ands	r3, r2
 80015b0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	697a      	ldr	r2, [r7, #20]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	2380      	movs	r3, #128	@ 0x80
 80015d0:	055b      	lsls	r3, r3, #21
 80015d2:	4013      	ands	r3, r2
 80015d4:	d100      	bne.n	80015d8 <HAL_GPIO_Init+0x180>
 80015d6:	e092      	b.n	80016fe <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80015d8:	4a50      	ldr	r2, [pc, #320]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3318      	adds	r3, #24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	589b      	ldr	r3, [r3, r2]
 80015e4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	2203      	movs	r2, #3
 80015ea:	4013      	ands	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	220f      	movs	r2, #15
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	43da      	mvns	r2, r3
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	4013      	ands	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	23a0      	movs	r3, #160	@ 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	429a      	cmp	r2, r3
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x1d6>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a45      	ldr	r2, [pc, #276]	@ (8001720 <HAL_GPIO_Init+0x2c8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x1d2>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a44      	ldr	r2, [pc, #272]	@ (8001724 <HAL_GPIO_Init+0x2cc>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x1ce>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a43      	ldr	r2, [pc, #268]	@ (8001728 <HAL_GPIO_Init+0x2d0>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x1ca>
 800161e:	2305      	movs	r3, #5
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x1d8>
 8001622:	2306      	movs	r3, #6
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x1d8>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x1d8>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x1d8>
 800162e:	2300      	movs	r3, #0
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	2103      	movs	r1, #3
 8001634:	400a      	ands	r2, r1
 8001636:	00d2      	lsls	r2, r2, #3
 8001638:	4093      	lsls	r3, r2
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	4313      	orrs	r3, r2
 800163e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001640:	4936      	ldr	r1, [pc, #216]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3318      	adds	r3, #24
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800164e:	4a33      	ldr	r2, [pc, #204]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 8001650:	2380      	movs	r3, #128	@ 0x80
 8001652:	58d3      	ldr	r3, [r2, r3]
 8001654:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	43da      	mvns	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	4013      	ands	r3, r2
 800165e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	2380      	movs	r3, #128	@ 0x80
 8001666:	025b      	lsls	r3, r3, #9
 8001668:	4013      	ands	r3, r2
 800166a:	d003      	beq.n	8001674 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 800166c:	697a      	ldr	r2, [r7, #20]
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	4313      	orrs	r3, r2
 8001672:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001674:	4929      	ldr	r1, [pc, #164]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 8001676:	2280      	movs	r2, #128	@ 0x80
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800167c:	4a27      	ldr	r2, [pc, #156]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 800167e:	2384      	movs	r3, #132	@ 0x84
 8001680:	58d3      	ldr	r3, [r2, r3]
 8001682:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	43da      	mvns	r2, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	4013      	ands	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	2380      	movs	r3, #128	@ 0x80
 8001694:	029b      	lsls	r3, r3, #10
 8001696:	4013      	ands	r3, r2
 8001698:	d003      	beq.n	80016a2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800169a:	697a      	ldr	r2, [r7, #20]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4313      	orrs	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80016a2:	491e      	ldr	r1, [pc, #120]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 80016a4:	2284      	movs	r2, #132	@ 0x84
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80016aa:	4b1c      	ldr	r3, [pc, #112]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	43da      	mvns	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	4013      	ands	r3, r2
 80016b8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	2380      	movs	r3, #128	@ 0x80
 80016c0:	035b      	lsls	r3, r3, #13
 80016c2:	4013      	ands	r3, r2
 80016c4:	d003      	beq.n	80016ce <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80016c6:	697a      	ldr	r2, [r7, #20]
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	4313      	orrs	r3, r2
 80016cc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80016ce:	4b13      	ldr	r3, [pc, #76]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80016d4:	4b11      	ldr	r3, [pc, #68]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	43da      	mvns	r2, r3
 80016de:	697b      	ldr	r3, [r7, #20]
 80016e0:	4013      	ands	r3, r2
 80016e2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685a      	ldr	r2, [r3, #4]
 80016e8:	2380      	movs	r3, #128	@ 0x80
 80016ea:	039b      	lsls	r3, r3, #14
 80016ec:	4013      	ands	r3, r2
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80016f0:	697a      	ldr	r2, [r7, #20]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80016f8:	4b08      	ldr	r3, [pc, #32]	@ (800171c <HAL_GPIO_Init+0x2c4>)
 80016fa:	697a      	ldr	r2, [r7, #20]
 80016fc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	3301      	adds	r3, #1
 8001702:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	40da      	lsrs	r2, r3
 800170c:	1e13      	subs	r3, r2, #0
 800170e:	d000      	beq.n	8001712 <HAL_GPIO_Init+0x2ba>
 8001710:	e6aa      	b.n	8001468 <HAL_GPIO_Init+0x10>
  }
}
 8001712:	46c0      	nop			@ (mov r8, r8)
 8001714:	46c0      	nop			@ (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b006      	add	sp, #24
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021800 	.word	0x40021800
 8001720:	50000400 	.word	0x50000400
 8001724:	50000800 	.word	0x50000800
 8001728:	50001400 	.word	0x50001400

0800172c <HAL_PWR_EnableWakeUpPin>:
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @note  (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	212f      	movs	r1, #47	@ 0x2f
 800173c:	400a      	ands	r2, r1
 800173e:	43d2      	mvns	r2, r2
 8001740:	401a      	ands	r2, r3
 8001742:	0011      	movs	r1, r2
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	0a1a      	lsrs	r2, r3, #8
 8001748:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800174a:	430a      	orrs	r2, r1
 800174c:	60da      	str	r2, [r3, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 800174e:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001750:	6899      	ldr	r1, [r3, #8]
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	222f      	movs	r2, #47	@ 0x2f
 8001756:	401a      	ands	r2, r3
 8001758:	4b03      	ldr	r3, [pc, #12]	@ (8001768 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800175a:	430a      	orrs	r2, r1
 800175c:	609a      	str	r2, [r3, #8]
}
 800175e:	46c0      	nop			@ (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	40007000 	.word	0x40007000

0800176c <HAL_PWR_DisableWakeUpPin>:
  *                PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5 (*), PWR_WAKEUP_PIN6
  * @note   (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8001774:	4b06      	ldr	r3, [pc, #24]	@ (8001790 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001776:	689a      	ldr	r2, [r3, #8]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	212f      	movs	r1, #47	@ 0x2f
 800177c:	400b      	ands	r3, r1
 800177e:	43d9      	mvns	r1, r3
 8001780:	4b03      	ldr	r3, [pc, #12]	@ (8001790 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001782:	400a      	ands	r2, r1
 8001784:	609a      	str	r2, [r3, #8]
}
 8001786:	46c0      	nop			@ (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b002      	add	sp, #8
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			@ (mov r8, r8)
 8001790:	40007000 	.word	0x40007000

08001794 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8001798:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2207      	movs	r2, #7
 800179e:	4393      	bics	r3, r2
 80017a0:	001a      	movs	r2, r3
 80017a2:	4b07      	ldr	r3, [pc, #28]	@ (80017c0 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 80017a4:	2104      	movs	r1, #4
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	4b05      	ldr	r3, [pc, #20]	@ (80017c4 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 80017b0:	2104      	movs	r1, #4
 80017b2:	430a      	orrs	r2, r1
 80017b4:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 80017b6:	bf30      	wfi
}
 80017b8:	46c0      	nop			@ (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	46c0      	nop			@ (mov r8, r8)
 80017c0:	40007000 	.word	0x40007000
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d101      	bne.n	80017da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e1d0      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2201      	movs	r2, #1
 80017e0:	4013      	ands	r3, r2
 80017e2:	d100      	bne.n	80017e6 <HAL_RCC_OscConfig+0x1e>
 80017e4:	e069      	b.n	80018ba <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017e6:	4bc8      	ldr	r3, [pc, #800]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 80017e8:	689b      	ldr	r3, [r3, #8]
 80017ea:	2238      	movs	r2, #56	@ 0x38
 80017ec:	4013      	ands	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	2b08      	cmp	r3, #8
 80017f4:	d105      	bne.n	8001802 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d15d      	bne.n	80018ba <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e1bc      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685a      	ldr	r2, [r3, #4]
 8001806:	2380      	movs	r3, #128	@ 0x80
 8001808:	025b      	lsls	r3, r3, #9
 800180a:	429a      	cmp	r2, r3
 800180c:	d107      	bne.n	800181e <HAL_RCC_OscConfig+0x56>
 800180e:	4bbe      	ldr	r3, [pc, #760]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4bbd      	ldr	r3, [pc, #756]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001814:	2180      	movs	r1, #128	@ 0x80
 8001816:	0249      	lsls	r1, r1, #9
 8001818:	430a      	orrs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
 800181c:	e020      	b.n	8001860 <HAL_RCC_OscConfig+0x98>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	23a0      	movs	r3, #160	@ 0xa0
 8001824:	02db      	lsls	r3, r3, #11
 8001826:	429a      	cmp	r2, r3
 8001828:	d10e      	bne.n	8001848 <HAL_RCC_OscConfig+0x80>
 800182a:	4bb7      	ldr	r3, [pc, #732]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4bb6      	ldr	r3, [pc, #728]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001830:	2180      	movs	r1, #128	@ 0x80
 8001832:	02c9      	lsls	r1, r1, #11
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	4bb3      	ldr	r3, [pc, #716]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4bb2      	ldr	r3, [pc, #712]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800183e:	2180      	movs	r1, #128	@ 0x80
 8001840:	0249      	lsls	r1, r1, #9
 8001842:	430a      	orrs	r2, r1
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	e00b      	b.n	8001860 <HAL_RCC_OscConfig+0x98>
 8001848:	4baf      	ldr	r3, [pc, #700]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	4bae      	ldr	r3, [pc, #696]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800184e:	49af      	ldr	r1, [pc, #700]	@ (8001b0c <HAL_RCC_OscConfig+0x344>)
 8001850:	400a      	ands	r2, r1
 8001852:	601a      	str	r2, [r3, #0]
 8001854:	4bac      	ldr	r3, [pc, #688]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001856:	681a      	ldr	r2, [r3, #0]
 8001858:	4bab      	ldr	r3, [pc, #684]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800185a:	49ad      	ldr	r1, [pc, #692]	@ (8001b10 <HAL_RCC_OscConfig+0x348>)
 800185c:	400a      	ands	r2, r1
 800185e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d014      	beq.n	8001892 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001868:	f7ff fbf8 	bl	800105c <HAL_GetTick>
 800186c:	0003      	movs	r3, r0
 800186e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001872:	f7ff fbf3 	bl	800105c <HAL_GetTick>
 8001876:	0002      	movs	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b64      	cmp	r3, #100	@ 0x64
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e17b      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001884:	4ba0      	ldr	r3, [pc, #640]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	2380      	movs	r3, #128	@ 0x80
 800188a:	029b      	lsls	r3, r3, #10
 800188c:	4013      	ands	r3, r2
 800188e:	d0f0      	beq.n	8001872 <HAL_RCC_OscConfig+0xaa>
 8001890:	e013      	b.n	80018ba <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001892:	f7ff fbe3 	bl	800105c <HAL_GetTick>
 8001896:	0003      	movs	r3, r0
 8001898:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800189c:	f7ff fbde 	bl	800105c <HAL_GetTick>
 80018a0:	0002      	movs	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b64      	cmp	r3, #100	@ 0x64
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e166      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ae:	4b96      	ldr	r3, [pc, #600]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 80018b0:	681a      	ldr	r2, [r3, #0]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	029b      	lsls	r3, r3, #10
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2202      	movs	r2, #2
 80018c0:	4013      	ands	r3, r2
 80018c2:	d100      	bne.n	80018c6 <HAL_RCC_OscConfig+0xfe>
 80018c4:	e086      	b.n	80019d4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018c6:	4b90      	ldr	r3, [pc, #576]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	2238      	movs	r2, #56	@ 0x38
 80018cc:	4013      	ands	r3, r2
 80018ce:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d12f      	bne.n	8001936 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e14c      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e2:	4b89      	ldr	r3, [pc, #548]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	4a8b      	ldr	r2, [pc, #556]	@ (8001b14 <HAL_RCC_OscConfig+0x34c>)
 80018e8:	4013      	ands	r3, r2
 80018ea:	0019      	movs	r1, r3
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	695b      	ldr	r3, [r3, #20]
 80018f0:	021a      	lsls	r2, r3, #8
 80018f2:	4b85      	ldr	r3, [pc, #532]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 80018f4:	430a      	orrs	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d112      	bne.n	8001924 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018fe:	4b82      	ldr	r3, [pc, #520]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a85      	ldr	r2, [pc, #532]	@ (8001b18 <HAL_RCC_OscConfig+0x350>)
 8001904:	4013      	ands	r3, r2
 8001906:	0019      	movs	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	691a      	ldr	r2, [r3, #16]
 800190c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800190e:	430a      	orrs	r2, r1
 8001910:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001912:	4b7d      	ldr	r3, [pc, #500]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	0adb      	lsrs	r3, r3, #11
 8001918:	2207      	movs	r2, #7
 800191a:	4013      	ands	r3, r2
 800191c:	4a7f      	ldr	r2, [pc, #508]	@ (8001b1c <HAL_RCC_OscConfig+0x354>)
 800191e:	40da      	lsrs	r2, r3
 8001920:	4b7f      	ldr	r3, [pc, #508]	@ (8001b20 <HAL_RCC_OscConfig+0x358>)
 8001922:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001924:	4b7f      	ldr	r3, [pc, #508]	@ (8001b24 <HAL_RCC_OscConfig+0x35c>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	0018      	movs	r0, r3
 800192a:	f7ff fb3b 	bl	8000fa4 <HAL_InitTick>
 800192e:	1e03      	subs	r3, r0, #0
 8001930:	d050      	beq.n	80019d4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001932:	2301      	movs	r3, #1
 8001934:	e122      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d030      	beq.n	80019a0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800193e:	4b72      	ldr	r3, [pc, #456]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a75      	ldr	r2, [pc, #468]	@ (8001b18 <HAL_RCC_OscConfig+0x350>)
 8001944:	4013      	ands	r3, r2
 8001946:	0019      	movs	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	691a      	ldr	r2, [r3, #16]
 800194c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800194e:	430a      	orrs	r2, r1
 8001950:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001952:	4b6d      	ldr	r3, [pc, #436]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001954:	681a      	ldr	r2, [r3, #0]
 8001956:	4b6c      	ldr	r3, [pc, #432]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001958:	2180      	movs	r1, #128	@ 0x80
 800195a:	0049      	lsls	r1, r1, #1
 800195c:	430a      	orrs	r2, r1
 800195e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001960:	f7ff fb7c 	bl	800105c <HAL_GetTick>
 8001964:	0003      	movs	r3, r0
 8001966:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001968:	e008      	b.n	800197c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800196a:	f7ff fb77 	bl	800105c <HAL_GetTick>
 800196e:	0002      	movs	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0ff      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800197c:	4b62      	ldr	r3, [pc, #392]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800197e:	681a      	ldr	r2, [r3, #0]
 8001980:	2380      	movs	r3, #128	@ 0x80
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	4013      	ands	r3, r2
 8001986:	d0f0      	beq.n	800196a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001988:	4b5f      	ldr	r3, [pc, #380]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a61      	ldr	r2, [pc, #388]	@ (8001b14 <HAL_RCC_OscConfig+0x34c>)
 800198e:	4013      	ands	r3, r2
 8001990:	0019      	movs	r1, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	021a      	lsls	r2, r3, #8
 8001998:	4b5b      	ldr	r3, [pc, #364]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 800199a:	430a      	orrs	r2, r1
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	e019      	b.n	80019d4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80019a0:	4b59      	ldr	r3, [pc, #356]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4b58      	ldr	r3, [pc, #352]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 80019a6:	4960      	ldr	r1, [pc, #384]	@ (8001b28 <HAL_RCC_OscConfig+0x360>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb56 	bl	800105c <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fb51 	bl	800105c <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e0d9      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c8:	4b4f      	ldr	r3, [pc, #316]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	2380      	movs	r3, #128	@ 0x80
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4013      	ands	r3, r2
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	2208      	movs	r2, #8
 80019da:	4013      	ands	r3, r2
 80019dc:	d042      	beq.n	8001a64 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80019de:	4b4a      	ldr	r3, [pc, #296]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2238      	movs	r2, #56	@ 0x38
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b18      	cmp	r3, #24
 80019e8:	d105      	bne.n	80019f6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d138      	bne.n	8001a64 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e0c2      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d019      	beq.n	8001a32 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019fe:	4b42      	ldr	r3, [pc, #264]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001a00:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a02:	4b41      	ldr	r3, [pc, #260]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001a04:	2101      	movs	r1, #1
 8001a06:	430a      	orrs	r2, r1
 8001a08:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a0a:	f7ff fb27 	bl	800105c <HAL_GetTick>
 8001a0e:	0003      	movs	r3, r0
 8001a10:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a14:	f7ff fb22 	bl	800105c <HAL_GetTick>
 8001a18:	0002      	movs	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e0aa      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001a26:	4b38      	ldr	r3, [pc, #224]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d0f1      	beq.n	8001a14 <HAL_RCC_OscConfig+0x24c>
 8001a30:	e018      	b.n	8001a64 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001a32:	4b35      	ldr	r3, [pc, #212]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001a34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001a36:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001a38:	2101      	movs	r1, #1
 8001a3a:	438a      	bics	r2, r1
 8001a3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff fb0d 	bl	800105c <HAL_GetTick>
 8001a42:	0003      	movs	r3, r0
 8001a44:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001a48:	f7ff fb08 	bl	800105c <HAL_GetTick>
 8001a4c:	0002      	movs	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e090      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001a5a:	4b2b      	ldr	r3, [pc, #172]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001a5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a5e:	2202      	movs	r2, #2
 8001a60:	4013      	ands	r3, r2
 8001a62:	d1f1      	bne.n	8001a48 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2204      	movs	r2, #4
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d100      	bne.n	8001a70 <HAL_RCC_OscConfig+0x2a8>
 8001a6e:	e084      	b.n	8001b7a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a70:	230f      	movs	r3, #15
 8001a72:	18fb      	adds	r3, r7, r3
 8001a74:	2200      	movs	r2, #0
 8001a76:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a78:	4b23      	ldr	r3, [pc, #140]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	2238      	movs	r2, #56	@ 0x38
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d106      	bne.n	8001a92 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d000      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2c6>
 8001a8c:	e075      	b.n	8001b7a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e074      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d106      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x2e0>
 8001a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001a9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001aa0:	2101      	movs	r1, #1
 8001aa2:	430a      	orrs	r2, r1
 8001aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001aa6:	e01c      	b.n	8001ae2 <HAL_RCC_OscConfig+0x31a>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d10c      	bne.n	8001aca <HAL_RCC_OscConfig+0x302>
 8001ab0:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001ab2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ab4:	4b14      	ldr	r3, [pc, #80]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001ab6:	2104      	movs	r1, #4
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001abc:	4b12      	ldr	r3, [pc, #72]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001abe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ac0:	4b11      	ldr	r3, [pc, #68]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ac8:	e00b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x31a>
 8001aca:	4b0f      	ldr	r3, [pc, #60]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001acc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ace:	4b0e      	ldr	r3, [pc, #56]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	438a      	bics	r2, r1
 8001ad4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001ad8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001ada:	4b0b      	ldr	r3, [pc, #44]	@ (8001b08 <HAL_RCC_OscConfig+0x340>)
 8001adc:	2104      	movs	r1, #4
 8001ade:	438a      	bics	r2, r1
 8001ae0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d028      	beq.n	8001b3c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fab7 	bl	800105c <HAL_GetTick>
 8001aee:	0003      	movs	r3, r0
 8001af0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001af2:	e01d      	b.n	8001b30 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af4:	f7ff fab2 	bl	800105c <HAL_GetTick>
 8001af8:	0002      	movs	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	4a0b      	ldr	r2, [pc, #44]	@ (8001b2c <HAL_RCC_OscConfig+0x364>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d915      	bls.n	8001b30 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e039      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	fffeffff 	.word	0xfffeffff
 8001b10:	fffbffff 	.word	0xfffbffff
 8001b14:	ffff80ff 	.word	0xffff80ff
 8001b18:	ffffc7ff 	.word	0xffffc7ff
 8001b1c:	02dc6c00 	.word	0x02dc6c00
 8001b20:	20000000 	.word	0x20000000
 8001b24:	20000004 	.word	0x20000004
 8001b28:	fffffeff 	.word	0xfffffeff
 8001b2c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001b30:	4b14      	ldr	r3, [pc, #80]	@ (8001b84 <HAL_RCC_OscConfig+0x3bc>)
 8001b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b34:	2202      	movs	r2, #2
 8001b36:	4013      	ands	r3, r2
 8001b38:	d0dc      	beq.n	8001af4 <HAL_RCC_OscConfig+0x32c>
 8001b3a:	e013      	b.n	8001b64 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff fa8e 	bl	800105c <HAL_GetTick>
 8001b40:	0003      	movs	r3, r0
 8001b42:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001b44:	e009      	b.n	8001b5a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b46:	f7ff fa89 	bl	800105c <HAL_GetTick>
 8001b4a:	0002      	movs	r2, r0
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	4a0d      	ldr	r2, [pc, #52]	@ (8001b88 <HAL_RCC_OscConfig+0x3c0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e010      	b.n	8001b7c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001b5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b84 <HAL_RCC_OscConfig+0x3bc>)
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b5e:	2202      	movs	r2, #2
 8001b60:	4013      	ands	r3, r2
 8001b62:	d1f0      	bne.n	8001b46 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b64:	230f      	movs	r3, #15
 8001b66:	18fb      	adds	r3, r7, r3
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d105      	bne.n	8001b7a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b6e:	4b05      	ldr	r3, [pc, #20]	@ (8001b84 <HAL_RCC_OscConfig+0x3bc>)
 8001b70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b72:	4b04      	ldr	r3, [pc, #16]	@ (8001b84 <HAL_RCC_OscConfig+0x3bc>)
 8001b74:	4905      	ldr	r1, [pc, #20]	@ (8001b8c <HAL_RCC_OscConfig+0x3c4>)
 8001b76:	400a      	ands	r2, r1
 8001b78:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	b006      	add	sp, #24
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40021000 	.word	0x40021000
 8001b88:	00001388 	.word	0x00001388
 8001b8c:	efffffff 	.word	0xefffffff

08001b90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e0e9      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ba4:	4b76      	ldr	r3, [pc, #472]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2207      	movs	r2, #7
 8001baa:	4013      	ands	r3, r2
 8001bac:	683a      	ldr	r2, [r7, #0]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d91e      	bls.n	8001bf0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bb2:	4b73      	ldr	r3, [pc, #460]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2207      	movs	r2, #7
 8001bb8:	4393      	bics	r3, r2
 8001bba:	0019      	movs	r1, r3
 8001bbc:	4b70      	ldr	r3, [pc, #448]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bc4:	f7ff fa4a 	bl	800105c <HAL_GetTick>
 8001bc8:	0003      	movs	r3, r0
 8001bca:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001bcc:	e009      	b.n	8001be2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001bce:	f7ff fa45 	bl	800105c <HAL_GetTick>
 8001bd2:	0002      	movs	r2, r0
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	4a6a      	ldr	r2, [pc, #424]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f4>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0ca      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001be2:	4b67      	ldr	r3, [pc, #412]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2207      	movs	r2, #7
 8001be8:	4013      	ands	r3, r2
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d1ee      	bne.n	8001bce <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2202      	movs	r2, #2
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d017      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2204      	movs	r2, #4
 8001c00:	4013      	ands	r3, r2
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c04:	4b60      	ldr	r3, [pc, #384]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	4a60      	ldr	r2, [pc, #384]	@ (8001d8c <HAL_RCC_ClockConfig+0x1fc>)
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	4b5e      	ldr	r3, [pc, #376]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c0e:	21b0      	movs	r1, #176	@ 0xb0
 8001c10:	0109      	lsls	r1, r1, #4
 8001c12:	430a      	orrs	r2, r1
 8001c14:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c16:	4b5c      	ldr	r3, [pc, #368]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	4a5d      	ldr	r2, [pc, #372]	@ (8001d90 <HAL_RCC_ClockConfig+0x200>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68da      	ldr	r2, [r3, #12]
 8001c24:	4b58      	ldr	r3, [pc, #352]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	4013      	ands	r3, r2
 8001c32:	d055      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001c34:	4b54      	ldr	r3, [pc, #336]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	221c      	movs	r2, #28
 8001c3a:	4393      	bics	r3, r2
 8001c3c:	0019      	movs	r1, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689a      	ldr	r2, [r3, #8]
 8001c42:	4b51      	ldr	r3, [pc, #324]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c44:	430a      	orrs	r2, r1
 8001c46:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d107      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c50:	4b4d      	ldr	r3, [pc, #308]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2380      	movs	r3, #128	@ 0x80
 8001c56:	029b      	lsls	r3, r3, #10
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d11f      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e08b      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c68:	4b47      	ldr	r3, [pc, #284]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	2380      	movs	r3, #128	@ 0x80
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4013      	ands	r3, r2
 8001c72:	d113      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e07f      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c80:	4b41      	ldr	r3, [pc, #260]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c84:	2202      	movs	r2, #2
 8001c86:	4013      	ands	r3, r2
 8001c88:	d108      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e074      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c8e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d101      	bne.n	8001c9c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e06d      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c9c:	4b3a      	ldr	r3, [pc, #232]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	2207      	movs	r2, #7
 8001ca2:	4393      	bics	r3, r2
 8001ca4:	0019      	movs	r1, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685a      	ldr	r2, [r3, #4]
 8001caa:	4b37      	ldr	r3, [pc, #220]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cb0:	f7ff f9d4 	bl	800105c <HAL_GetTick>
 8001cb4:	0003      	movs	r3, r0
 8001cb6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cb8:	e009      	b.n	8001cce <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001cba:	f7ff f9cf 	bl	800105c <HAL_GetTick>
 8001cbe:	0002      	movs	r2, r0
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	4a2f      	ldr	r2, [pc, #188]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e054      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cce:	4b2e      	ldr	r3, [pc, #184]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	2238      	movs	r2, #56	@ 0x38
 8001cd4:	401a      	ands	r2, r3
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d1ec      	bne.n	8001cba <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ce0:	4b27      	ldr	r3, [pc, #156]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2207      	movs	r2, #7
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d21e      	bcs.n	8001d2c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cee:	4b24      	ldr	r3, [pc, #144]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	4393      	bics	r3, r2
 8001cf6:	0019      	movs	r1, r3
 8001cf8:	4b21      	ldr	r3, [pc, #132]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d00:	f7ff f9ac 	bl	800105c <HAL_GetTick>
 8001d04:	0003      	movs	r3, r0
 8001d06:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d08:	e009      	b.n	8001d1e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d0a:	f7ff f9a7 	bl	800105c <HAL_GetTick>
 8001d0e:	0002      	movs	r2, r0
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	4a1b      	ldr	r2, [pc, #108]	@ (8001d84 <HAL_RCC_ClockConfig+0x1f4>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e02c      	b.n	8001d78 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d1e:	4b18      	ldr	r3, [pc, #96]	@ (8001d80 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2207      	movs	r2, #7
 8001d24:	4013      	ands	r3, r2
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d1ee      	bne.n	8001d0a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	2204      	movs	r2, #4
 8001d32:	4013      	ands	r3, r2
 8001d34:	d009      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d36:	4b14      	ldr	r3, [pc, #80]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4a16      	ldr	r2, [pc, #88]	@ (8001d94 <HAL_RCC_ClockConfig+0x204>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	0019      	movs	r1, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	4b10      	ldr	r3, [pc, #64]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001d46:	430a      	orrs	r2, r1
 8001d48:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d4a:	f000 f82b 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001d4e:	0001      	movs	r1, r0
 8001d50:	4b0d      	ldr	r3, [pc, #52]	@ (8001d88 <HAL_RCC_ClockConfig+0x1f8>)
 8001d52:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d54:	0a1b      	lsrs	r3, r3, #8
 8001d56:	220f      	movs	r2, #15
 8001d58:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8001d98 <HAL_RCC_ClockConfig+0x208>)
 8001d5c:	0092      	lsls	r2, r2, #2
 8001d5e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001d60:	221f      	movs	r2, #31
 8001d62:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001d64:	000a      	movs	r2, r1
 8001d66:	40da      	lsrs	r2, r3
 8001d68:	4b0c      	ldr	r3, [pc, #48]	@ (8001d9c <HAL_RCC_ClockConfig+0x20c>)
 8001d6a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001da0 <HAL_RCC_ClockConfig+0x210>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f7ff f917 	bl	8000fa4 <HAL_InitTick>
 8001d76:	0003      	movs	r3, r0
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b004      	add	sp, #16
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40022000 	.word	0x40022000
 8001d84:	00001388 	.word	0x00001388
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	ffff84ff 	.word	0xffff84ff
 8001d90:	fffff0ff 	.word	0xfffff0ff
 8001d94:	ffff8fff 	.word	0xffff8fff
 8001d98:	08005e70 	.word	0x08005e70
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	20000004 	.word	0x20000004

08001da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001daa:	4b23      	ldr	r3, [pc, #140]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	089b      	lsrs	r3, r3, #2
 8001db0:	2207      	movs	r2, #7
 8001db2:	4013      	ands	r3, r2
 8001db4:	3301      	adds	r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001db8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2238      	movs	r2, #56	@ 0x38
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	d10f      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	0adb      	lsrs	r3, r3, #11
 8001dc8:	2207      	movs	r2, #7
 8001dca:	4013      	ands	r3, r2
 8001dcc:	2201      	movs	r2, #1
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	0013      	movs	r3, r2
 8001dd2:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001dd4:	6879      	ldr	r1, [r7, #4]
 8001dd6:	4819      	ldr	r0, [pc, #100]	@ (8001e3c <HAL_RCC_GetSysClockFreq+0x98>)
 8001dd8:	f7fe f9a8 	bl	800012c <__udivsi3>
 8001ddc:	0003      	movs	r3, r0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e01e      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001de2:	4b15      	ldr	r3, [pc, #84]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	2238      	movs	r2, #56	@ 0x38
 8001de8:	4013      	ands	r3, r2
 8001dea:	2b08      	cmp	r3, #8
 8001dec:	d102      	bne.n	8001df4 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001dee:	4b14      	ldr	r3, [pc, #80]	@ (8001e40 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	e015      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001df4:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2238      	movs	r2, #56	@ 0x38
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d103      	bne.n	8001e08 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001e00:	2380      	movs	r3, #128	@ 0x80
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	e00b      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001e08:	4b0b      	ldr	r3, [pc, #44]	@ (8001e38 <HAL_RCC_GetSysClockFreq+0x94>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2238      	movs	r2, #56	@ 0x38
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b18      	cmp	r3, #24
 8001e12:	d103      	bne.n	8001e1c <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001e14:	23fa      	movs	r3, #250	@ 0xfa
 8001e16:	01db      	lsls	r3, r3, #7
 8001e18:	60fb      	str	r3, [r7, #12]
 8001e1a:	e001      	b.n	8001e20 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001e20:	68b9      	ldr	r1, [r7, #8]
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f7fe f982 	bl	800012c <__udivsi3>
 8001e28:	0003      	movs	r3, r0
 8001e2a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
}
 8001e2e:	0018      	movs	r0, r3
 8001e30:	46bd      	mov	sp, r7
 8001e32:	b004      	add	sp, #16
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	02dc6c00 	.word	0x02dc6c00
 8001e40:	007a1200 	.word	0x007a1200

08001e44 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e48:	f7ff ffac 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8001e4c:	0001      	movs	r1, r0
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_RCC_GetHCLKFreq+0x30>)
 8001e50:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e52:	0a1b      	lsrs	r3, r3, #8
 8001e54:	220f      	movs	r2, #15
 8001e56:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e58:	4b07      	ldr	r3, [pc, #28]	@ (8001e78 <HAL_RCC_GetHCLKFreq+0x34>)
 8001e5a:	0092      	lsls	r2, r2, #2
 8001e5c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001e5e:	221f      	movs	r2, #31
 8001e60:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001e62:	000a      	movs	r2, r1
 8001e64:	40da      	lsrs	r2, r3
 8001e66:	4b05      	ldr	r3, [pc, #20]	@ (8001e7c <HAL_RCC_GetHCLKFreq+0x38>)
 8001e68:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001e6a:	4b04      	ldr	r3, [pc, #16]	@ (8001e7c <HAL_RCC_GetHCLKFreq+0x38>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
}
 8001e6e:	0018      	movs	r0, r3
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	40021000 	.word	0x40021000
 8001e78:	08005e70 	.word	0x08005e70
 8001e7c:	20000000 	.word	0x20000000

08001e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001e84:	f7ff ffde 	bl	8001e44 <HAL_RCC_GetHCLKFreq>
 8001e88:	0001      	movs	r1, r0
 8001e8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ea8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e8c:	689b      	ldr	r3, [r3, #8]
 8001e8e:	0b1b      	lsrs	r3, r3, #12
 8001e90:	2207      	movs	r2, #7
 8001e92:	401a      	ands	r2, r3
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001e96:	0092      	lsls	r2, r2, #2
 8001e98:	58d3      	ldr	r3, [r2, r3]
 8001e9a:	221f      	movs	r2, #31
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	40d9      	lsrs	r1, r3
 8001ea0:	000b      	movs	r3, r1
}
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	08005eb0 	.word	0x08005eb0

08001eb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001eb8:	2313      	movs	r3, #19
 8001eba:	18fb      	adds	r3, r7, r3
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ec0:	2312      	movs	r3, #18
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	2240      	movs	r2, #64	@ 0x40
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d100      	bne.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001ed2:	e079      	b.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed4:	2011      	movs	r0, #17
 8001ed6:	183b      	adds	r3, r7, r0
 8001ed8:	2200      	movs	r2, #0
 8001eda:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001edc:	4b63      	ldr	r3, [pc, #396]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ede:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ee0:	2380      	movs	r3, #128	@ 0x80
 8001ee2:	055b      	lsls	r3, r3, #21
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d110      	bne.n	8001f0a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee8:	4b60      	ldr	r3, [pc, #384]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001eea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001eec:	4b5f      	ldr	r3, [pc, #380]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001eee:	2180      	movs	r1, #128	@ 0x80
 8001ef0:	0549      	lsls	r1, r1, #21
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ef8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	055b      	lsls	r3, r3, #21
 8001efe:	4013      	ands	r3, r2
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f04:	183b      	adds	r3, r7, r0
 8001f06:	2201      	movs	r2, #1
 8001f08:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001f0a:	4b58      	ldr	r3, [pc, #352]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f0e:	23c0      	movs	r3, #192	@ 0xc0
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4013      	ands	r3, r2
 8001f14:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d019      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	697a      	ldr	r2, [r7, #20]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d014      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001f26:	4b51      	ldr	r3, [pc, #324]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2a:	4a51      	ldr	r2, [pc, #324]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f30:	4b4e      	ldr	r3, [pc, #312]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f32:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f34:	4b4d      	ldr	r3, [pc, #308]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f36:	2180      	movs	r1, #128	@ 0x80
 8001f38:	0249      	lsls	r1, r1, #9
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f3e:	4b4b      	ldr	r3, [pc, #300]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f42:	4b4a      	ldr	r3, [pc, #296]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f44:	494b      	ldr	r1, [pc, #300]	@ (8002074 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001f46:	400a      	ands	r2, r1
 8001f48:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001f4a:	4b48      	ldr	r3, [pc, #288]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2201      	movs	r2, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	d016      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff f880 	bl	800105c <HAL_GetTick>
 8001f5c:	0003      	movs	r3, r0
 8001f5e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f60:	e00c      	b.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f62:	f7ff f87b 	bl	800105c <HAL_GetTick>
 8001f66:	0002      	movs	r2, r0
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	4a42      	ldr	r2, [pc, #264]	@ (8002078 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d904      	bls.n	8001f7c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001f72:	2313      	movs	r3, #19
 8001f74:	18fb      	adds	r3, r7, r3
 8001f76:	2203      	movs	r2, #3
 8001f78:	701a      	strb	r2, [r3, #0]
          break;
 8001f7a:	e004      	b.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f80:	2202      	movs	r2, #2
 8001f82:	4013      	ands	r3, r2
 8001f84:	d0ed      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001f86:	2313      	movs	r3, #19
 8001f88:	18fb      	adds	r3, r7, r3
 8001f8a:	781b      	ldrb	r3, [r3, #0]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d10a      	bne.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f90:	4b36      	ldr	r3, [pc, #216]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f94:	4a36      	ldr	r2, [pc, #216]	@ (8002070 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001f96:	4013      	ands	r3, r2
 8001f98:	0019      	movs	r1, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	699a      	ldr	r2, [r3, #24]
 8001f9e:	4b33      	ldr	r3, [pc, #204]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001fa4:	e005      	b.n	8001fb2 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fa6:	2312      	movs	r3, #18
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2213      	movs	r2, #19
 8001fac:	18ba      	adds	r2, r7, r2
 8001fae:	7812      	ldrb	r2, [r2, #0]
 8001fb0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fb2:	2311      	movs	r3, #17
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d105      	bne.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fbe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fc2:	492e      	ldr	r1, [pc, #184]	@ (800207c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001fc4:	400a      	ands	r2, r1
 8001fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001fd2:	4b26      	ldr	r3, [pc, #152]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fd6:	2203      	movs	r2, #3
 8001fd8:	4393      	bics	r3, r2
 8001fda:	0019      	movs	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4b22      	ldr	r3, [pc, #136]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2202      	movs	r2, #2
 8001fec:	4013      	ands	r3, r2
 8001fee:	d009      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ff0:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff4:	4a22      	ldr	r2, [pc, #136]	@ (8002080 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	0019      	movs	r1, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002000:	430a      	orrs	r2, r1
 8002002:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2220      	movs	r2, #32
 800200a:	4013      	ands	r3, r2
 800200c:	d008      	beq.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800200e:	4b17      	ldr	r3, [pc, #92]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002010:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	0899      	lsrs	r1, r3, #2
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	4b14      	ldr	r3, [pc, #80]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800201c:	430a      	orrs	r2, r1
 800201e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2204      	movs	r2, #4
 8002026:	4013      	ands	r3, r2
 8002028:	d009      	beq.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800202e:	4a15      	ldr	r2, [pc, #84]	@ (8002084 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	691a      	ldr	r2, [r3, #16]
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800203a:	430a      	orrs	r2, r1
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2280      	movs	r2, #128	@ 0x80
 8002044:	4013      	ands	r3, r2
 8002046:	d009      	beq.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002048:	4b08      	ldr	r3, [pc, #32]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	22e0      	movs	r2, #224	@ 0xe0
 800204e:	4393      	bics	r3, r2
 8002050:	0019      	movs	r1, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685a      	ldr	r2, [r3, #4]
 8002056:	4b05      	ldr	r3, [pc, #20]	@ (800206c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002058:	430a      	orrs	r2, r1
 800205a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800205c:	2312      	movs	r3, #18
 800205e:	18fb      	adds	r3, r7, r3
 8002060:	781b      	ldrb	r3, [r3, #0]
}
 8002062:	0018      	movs	r0, r3
 8002064:	46bd      	mov	sp, r7
 8002066:	b006      	add	sp, #24
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			@ (mov r8, r8)
 800206c:	40021000 	.word	0x40021000
 8002070:	fffffcff 	.word	0xfffffcff
 8002074:	fffeffff 	.word	0xfffeffff
 8002078:	00001388 	.word	0x00001388
 800207c:	efffffff 	.word	0xefffffff
 8002080:	ffffcfff 	.word	0xffffcfff
 8002084:	ffff3fff 	.word	0xffff3fff

08002088 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002088:	b5b0      	push	{r4, r5, r7, lr}
 800208a:	b084      	sub	sp, #16
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002090:	230f      	movs	r3, #15
 8002092:	18fb      	adds	r3, r7, r3
 8002094:	2201      	movs	r2, #1
 8002096:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d100      	bne.n	80020a0 <HAL_RTC_Init+0x18>
 800209e:	e075      	b.n	800218c <HAL_RTC_Init+0x104>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2225      	movs	r2, #37	@ 0x25
 80020a4:	5c9b      	ldrb	r3, [r3, r2]
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2224      	movs	r2, #36	@ 0x24
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	0018      	movs	r0, r3
 80020b8:	f7fe fdbc 	bl	8000c34 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2225      	movs	r2, #37	@ 0x25
 80020c0:	2102      	movs	r1, #2
 80020c2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	2210      	movs	r2, #16
 80020cc:	4013      	ands	r3, r2
 80020ce:	2b10      	cmp	r3, #16
 80020d0:	d04f      	beq.n	8002172 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	22ca      	movs	r2, #202	@ 0xca
 80020d8:	625a      	str	r2, [r3, #36]	@ 0x24
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	2253      	movs	r2, #83	@ 0x53
 80020e0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80020e2:	250f      	movs	r5, #15
 80020e4:	197c      	adds	r4, r7, r5
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0018      	movs	r0, r3
 80020ea:	f000 fbef 	bl	80028cc <RTC_EnterInitMode>
 80020ee:	0003      	movs	r3, r0
 80020f0:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 80020f2:	0028      	movs	r0, r5
 80020f4:	183b      	adds	r3, r7, r0
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d121      	bne.n	8002140 <HAL_RTC_Init+0xb8>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL));
 80020fc:	4b27      	ldr	r3, [pc, #156]	@ (800219c <HAL_RTC_Init+0x114>)
 80020fe:	699a      	ldr	r2, [r3, #24]
 8002100:	4b26      	ldr	r3, [pc, #152]	@ (800219c <HAL_RTC_Init+0x114>)
 8002102:	4927      	ldr	r1, [pc, #156]	@ (80021a0 <HAL_RTC_Init+0x118>)
 8002104:	400a      	ands	r2, r1
 8002106:	619a      	str	r2, [r3, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002108:	4b24      	ldr	r3, [pc, #144]	@ (800219c <HAL_RTC_Init+0x114>)
 800210a:	6999      	ldr	r1, [r3, #24]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685a      	ldr	r2, [r3, #4]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	691b      	ldr	r3, [r3, #16]
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	699b      	ldr	r3, [r3, #24]
 800211a:	431a      	orrs	r2, r3
 800211c:	4b1f      	ldr	r3, [pc, #124]	@ (800219c <HAL_RTC_Init+0x114>)
 800211e:	430a      	orrs	r2, r1
 8002120:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68d9      	ldr	r1, [r3, #12]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	041a      	lsls	r2, r3, #16
 800212c:	4b1b      	ldr	r3, [pc, #108]	@ (800219c <HAL_RTC_Init+0x114>)
 800212e:	430a      	orrs	r2, r1
 8002130:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002132:	183c      	adds	r4, r7, r0
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	0018      	movs	r0, r3
 8002138:	f000 fc10 	bl	800295c <RTC_ExitInitMode>
 800213c:	0003      	movs	r3, r0
 800213e:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002140:	230f      	movs	r3, #15
 8002142:	18fb      	adds	r3, r7, r3
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10e      	bne.n	8002168 <HAL_RTC_Init+0xe0>
      {
        MODIFY_REG(RTC->CR, \
 800214a:	4b14      	ldr	r3, [pc, #80]	@ (800219c <HAL_RTC_Init+0x114>)
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	08d9      	lsrs	r1, r3, #3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6a1a      	ldr	r2, [r3, #32]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
 800215a:	431a      	orrs	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	695b      	ldr	r3, [r3, #20]
 8002160:	431a      	orrs	r2, r3
 8002162:	4b0e      	ldr	r3, [pc, #56]	@ (800219c <HAL_RTC_Init+0x114>)
 8002164:	430a      	orrs	r2, r1
 8002166:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	22ff      	movs	r2, #255	@ 0xff
 800216e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002170:	e003      	b.n	800217a <HAL_RTC_Init+0xf2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002172:	230f      	movs	r3, #15
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	2200      	movs	r2, #0
 8002178:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800217a:	230f      	movs	r3, #15
 800217c:	18fb      	adds	r3, r7, r3
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d103      	bne.n	800218c <HAL_RTC_Init+0x104>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2225      	movs	r2, #37	@ 0x25
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800218c:	230f      	movs	r3, #15
 800218e:	18fb      	adds	r3, r7, r3
 8002190:	781b      	ldrb	r3, [r3, #0]
}
 8002192:	0018      	movs	r0, r3
 8002194:	46bd      	mov	sp, r7
 8002196:	b004      	add	sp, #16
 8002198:	bdb0      	pop	{r4, r5, r7, pc}
 800219a:	46c0      	nop			@ (mov r8, r8)
 800219c:	40002800 	.word	0x40002800
 80021a0:	ff8fffbf 	.word	0xff8fffbf

080021a4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80021a4:	b5b0      	push	{r4, r5, r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2224      	movs	r2, #36	@ 0x24
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d101      	bne.n	80021be <HAL_RTC_SetTime+0x1a>
 80021ba:	2302      	movs	r3, #2
 80021bc:	e092      	b.n	80022e4 <HAL_RTC_SetTime+0x140>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2224      	movs	r2, #36	@ 0x24
 80021c2:	2101      	movs	r1, #1
 80021c4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2225      	movs	r2, #37	@ 0x25
 80021ca:	2102      	movs	r1, #2
 80021cc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	22ca      	movs	r2, #202	@ 0xca
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2253      	movs	r2, #83	@ 0x53
 80021dc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80021de:	2513      	movs	r5, #19
 80021e0:	197c      	adds	r4, r7, r5
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	0018      	movs	r0, r3
 80021e6:	f000 fb71 	bl	80028cc <RTC_EnterInitMode>
 80021ea:	0003      	movs	r3, r0
 80021ec:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80021ee:	197b      	adds	r3, r7, r5
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d162      	bne.n	80022bc <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d125      	bne.n	8002248 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	2240      	movs	r2, #64	@ 0x40
 8002204:	4013      	ands	r3, r2
 8002206:	d102      	bne.n	800220e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2200      	movs	r2, #0
 800220c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	0018      	movs	r0, r3
 8002214:	f000 fbe6 	bl	80029e4 <RTC_ByteToBcd2>
 8002218:	0003      	movs	r3, r0
 800221a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	785b      	ldrb	r3, [r3, #1]
 8002220:	0018      	movs	r0, r3
 8002222:	f000 fbdf 	bl	80029e4 <RTC_ByteToBcd2>
 8002226:	0003      	movs	r3, r0
 8002228:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800222a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	789b      	ldrb	r3, [r3, #2]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fbd7 	bl	80029e4 <RTC_ByteToBcd2>
 8002236:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002238:	0022      	movs	r2, r4
 800223a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	78db      	ldrb	r3, [r3, #3]
 8002240:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002242:	4313      	orrs	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
 8002246:	e017      	b.n	8002278 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	2240      	movs	r2, #64	@ 0x40
 8002250:	4013      	ands	r3, r2
 8002252:	d102      	bne.n	800225a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2200      	movs	r2, #0
 8002258:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	785b      	ldrb	r3, [r3, #1]
 8002264:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002266:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800226c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	78db      	ldrb	r3, [r3, #3]
 8002272:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002274:	4313      	orrs	r3, r2
 8002276:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	697a      	ldr	r2, [r7, #20]
 800227e:	491b      	ldr	r1, [pc, #108]	@ (80022ec <HAL_RTC_SetTime+0x148>)
 8002280:	400a      	ands	r2, r1
 8002282:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	699a      	ldr	r2, [r3, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4918      	ldr	r1, [pc, #96]	@ (80022f0 <HAL_RTC_SetTime+0x14c>)
 8002290:	400a      	ands	r2, r1
 8002292:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6999      	ldr	r1, [r3, #24]
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	68da      	ldr	r2, [r3, #12]
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	431a      	orrs	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	430a      	orrs	r2, r1
 80022aa:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80022ac:	2313      	movs	r3, #19
 80022ae:	18fc      	adds	r4, r7, r3
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	0018      	movs	r0, r3
 80022b4:	f000 fb52 	bl	800295c <RTC_ExitInitMode>
 80022b8:	0003      	movs	r3, r0
 80022ba:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	22ff      	movs	r2, #255	@ 0xff
 80022c2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80022c4:	2313      	movs	r3, #19
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d103      	bne.n	80022d6 <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2225      	movs	r2, #37	@ 0x25
 80022d2:	2101      	movs	r1, #1
 80022d4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2224      	movs	r2, #36	@ 0x24
 80022da:	2100      	movs	r1, #0
 80022dc:	5499      	strb	r1, [r3, r2]

  return status;
 80022de:	2313      	movs	r3, #19
 80022e0:	18fb      	adds	r3, r7, r3
 80022e2:	781b      	ldrb	r3, [r3, #0]
}
 80022e4:	0018      	movs	r0, r3
 80022e6:	46bd      	mov	sp, r7
 80022e8:	b006      	add	sp, #24
 80022ea:	bdb0      	pop	{r4, r5, r7, pc}
 80022ec:	007f7f7f 	.word	0x007f7f7f
 80022f0:	fffbffff 	.word	0xfffbffff

080022f4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	60f8      	str	r0, [r7, #12]
 80022fc:	60b9      	str	r1, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	691b      	ldr	r3, [r3, #16]
 8002310:	045b      	lsls	r3, r3, #17
 8002312:	0c5a      	lsrs	r2, r3, #17
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a22      	ldr	r2, [pc, #136]	@ (80023a8 <HAL_RTC_GetTime+0xb4>)
 8002320:	4013      	ands	r3, r2
 8002322:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	0c1b      	lsrs	r3, r3, #16
 8002328:	b2db      	uxtb	r3, r3
 800232a:	223f      	movs	r2, #63	@ 0x3f
 800232c:	4013      	ands	r3, r2
 800232e:	b2da      	uxtb	r2, r3
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	0a1b      	lsrs	r3, r3, #8
 8002338:	b2db      	uxtb	r3, r3
 800233a:	227f      	movs	r2, #127	@ 0x7f
 800233c:	4013      	ands	r3, r2
 800233e:	b2da      	uxtb	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	b2db      	uxtb	r3, r3
 8002348:	227f      	movs	r2, #127	@ 0x7f
 800234a:	4013      	ands	r3, r2
 800234c:	b2da      	uxtb	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002352:	697b      	ldr	r3, [r7, #20]
 8002354:	0d9b      	lsrs	r3, r3, #22
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2201      	movs	r2, #1
 800235a:	4013      	ands	r3, r2
 800235c:	b2da      	uxtb	r2, r3
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d11a      	bne.n	800239e <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	0018      	movs	r0, r3
 800236e:	f000 fb61 	bl	8002a34 <RTC_Bcd2ToByte>
 8002372:	0003      	movs	r3, r0
 8002374:	001a      	movs	r2, r3
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	785b      	ldrb	r3, [r3, #1]
 800237e:	0018      	movs	r0, r3
 8002380:	f000 fb58 	bl	8002a34 <RTC_Bcd2ToByte>
 8002384:	0003      	movs	r3, r0
 8002386:	001a      	movs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	789b      	ldrb	r3, [r3, #2]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 fb4f 	bl	8002a34 <RTC_Bcd2ToByte>
 8002396:	0003      	movs	r3, r0
 8002398:	001a      	movs	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b006      	add	sp, #24
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	007f7f7f 	.word	0x007f7f7f

080023ac <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80023ac:	b5b0      	push	{r4, r5, r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2224      	movs	r2, #36	@ 0x24
 80023bc:	5c9b      	ldrb	r3, [r3, r2]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_RTC_SetDate+0x1a>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e07e      	b.n	80024c4 <HAL_RTC_SetDate+0x118>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2224      	movs	r2, #36	@ 0x24
 80023ca:	2101      	movs	r1, #1
 80023cc:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2225      	movs	r2, #37	@ 0x25
 80023d2:	2102      	movs	r1, #2
 80023d4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10e      	bne.n	80023fa <HAL_RTC_SetDate+0x4e>
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	785b      	ldrb	r3, [r3, #1]
 80023e0:	001a      	movs	r2, r3
 80023e2:	2310      	movs	r3, #16
 80023e4:	4013      	ands	r3, r2
 80023e6:	d008      	beq.n	80023fa <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	785b      	ldrb	r3, [r3, #1]
 80023ec:	2210      	movs	r2, #16
 80023ee:	4393      	bics	r3, r2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	330a      	adds	r3, #10
 80023f4:	b2da      	uxtb	r2, r3
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d11c      	bne.n	800243a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	78db      	ldrb	r3, [r3, #3]
 8002404:	0018      	movs	r0, r3
 8002406:	f000 faed 	bl	80029e4 <RTC_ByteToBcd2>
 800240a:	0003      	movs	r3, r0
 800240c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	785b      	ldrb	r3, [r3, #1]
 8002412:	0018      	movs	r0, r3
 8002414:	f000 fae6 	bl	80029e4 <RTC_ByteToBcd2>
 8002418:	0003      	movs	r3, r0
 800241a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800241c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	789b      	ldrb	r3, [r3, #2]
 8002422:	0018      	movs	r0, r3
 8002424:	f000 fade 	bl	80029e4 <RTC_ByteToBcd2>
 8002428:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800242a:	0022      	movs	r2, r4
 800242c:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002434:	4313      	orrs	r3, r2
 8002436:	617b      	str	r3, [r7, #20]
 8002438:	e00e      	b.n	8002458 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	78db      	ldrb	r3, [r3, #3]
 800243e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	785b      	ldrb	r3, [r3, #1]
 8002444:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002446:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800244c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002454:	4313      	orrs	r3, r2
 8002456:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	22ca      	movs	r2, #202	@ 0xca
 800245e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2253      	movs	r2, #83	@ 0x53
 8002466:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002468:	2513      	movs	r5, #19
 800246a:	197c      	adds	r4, r7, r5
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	0018      	movs	r0, r3
 8002470:	f000 fa2c 	bl	80028cc <RTC_EnterInitMode>
 8002474:	0003      	movs	r3, r0
 8002476:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002478:	0028      	movs	r0, r5
 800247a:	183b      	adds	r3, r7, r0
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10c      	bne.n	800249c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	4910      	ldr	r1, [pc, #64]	@ (80024cc <HAL_RTC_SetDate+0x120>)
 800248a:	400a      	ands	r2, r1
 800248c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800248e:	183c      	adds	r4, r7, r0
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	0018      	movs	r0, r3
 8002494:	f000 fa62 	bl	800295c <RTC_ExitInitMode>
 8002498:	0003      	movs	r3, r0
 800249a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	22ff      	movs	r2, #255	@ 0xff
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80024a4:	2313      	movs	r3, #19
 80024a6:	18fb      	adds	r3, r7, r3
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d103      	bne.n	80024b6 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2225      	movs	r2, #37	@ 0x25
 80024b2:	2101      	movs	r1, #1
 80024b4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2224      	movs	r2, #36	@ 0x24
 80024ba:	2100      	movs	r1, #0
 80024bc:	5499      	strb	r1, [r3, r2]

  return status;
 80024be:	2313      	movs	r3, #19
 80024c0:	18fb      	adds	r3, r7, r3
 80024c2:	781b      	ldrb	r3, [r3, #0]
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b006      	add	sp, #24
 80024ca:	bdb0      	pop	{r4, r5, r7, pc}
 80024cc:	00ffff3f 	.word	0x00ffff3f

080024d0 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	4a21      	ldr	r2, [pc, #132]	@ (8002568 <HAL_RTC_GetDate+0x98>)
 80024e4:	4013      	ands	r3, r2
 80024e6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	0c1b      	lsrs	r3, r3, #16
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	221f      	movs	r2, #31
 80024fa:	4013      	ands	r3, r2
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	223f      	movs	r2, #63	@ 0x3f
 8002508:	4013      	ands	r3, r2
 800250a:	b2da      	uxtb	r2, r3
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	0b5b      	lsrs	r3, r3, #13
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2207      	movs	r2, #7
 8002518:	4013      	ands	r3, r2
 800251a:	b2da      	uxtb	r2, r3
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d11a      	bne.n	800255c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	78db      	ldrb	r3, [r3, #3]
 800252a:	0018      	movs	r0, r3
 800252c:	f000 fa82 	bl	8002a34 <RTC_Bcd2ToByte>
 8002530:	0003      	movs	r3, r0
 8002532:	001a      	movs	r2, r3
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	785b      	ldrb	r3, [r3, #1]
 800253c:	0018      	movs	r0, r3
 800253e:	f000 fa79 	bl	8002a34 <RTC_Bcd2ToByte>
 8002542:	0003      	movs	r3, r0
 8002544:	001a      	movs	r2, r3
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	789b      	ldrb	r3, [r3, #2]
 800254e:	0018      	movs	r0, r3
 8002550:	f000 fa70 	bl	8002a34 <RTC_Bcd2ToByte>
 8002554:	0003      	movs	r3, r0
 8002556:	001a      	movs	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800255c:	2300      	movs	r3, #0
}
 800255e:	0018      	movs	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	b006      	add	sp, #24
 8002564:	bd80      	pop	{r7, pc}
 8002566:	46c0      	nop			@ (mov r8, r8)
 8002568:	00ffff3f 	.word	0x00ffff3f

0800256c <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800256c:	b590      	push	{r4, r7, lr}
 800256e:	b089      	sub	sp, #36	@ 0x24
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	2224      	movs	r2, #36	@ 0x24
 800257c:	5c9b      	ldrb	r3, [r3, r2]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_RTC_SetAlarm_IT+0x1a>
 8002582:	2302      	movs	r3, #2
 8002584:	e0d6      	b.n	8002734 <HAL_RTC_SetAlarm_IT+0x1c8>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2224      	movs	r2, #36	@ 0x24
 800258a:	2101      	movs	r1, #1
 800258c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2225      	movs	r2, #37	@ 0x25
 8002592:	2102      	movs	r1, #2
 8002594:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d136      	bne.n	800260a <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2240      	movs	r2, #64	@ 0x40
 80025a4:	4013      	ands	r3, r2
 80025a6:	d102      	bne.n	80025ae <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	2200      	movs	r2, #0
 80025ac:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	0018      	movs	r0, r3
 80025b4:	f000 fa16 	bl	80029e4 <RTC_ByteToBcd2>
 80025b8:	0003      	movs	r3, r0
 80025ba:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	785b      	ldrb	r3, [r3, #1]
 80025c0:	0018      	movs	r0, r3
 80025c2:	f000 fa0f 	bl	80029e4 <RTC_ByteToBcd2>
 80025c6:	0003      	movs	r3, r0
 80025c8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80025ca:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	789b      	ldrb	r3, [r3, #2]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f000 fa07 	bl	80029e4 <RTC_ByteToBcd2>
 80025d6:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80025d8:	0022      	movs	r2, r4
 80025da:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	78db      	ldrb	r3, [r3, #3]
 80025e0:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80025e2:	431a      	orrs	r2, r3
 80025e4:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2220      	movs	r2, #32
 80025ea:	5c9b      	ldrb	r3, [r3, r2]
 80025ec:	0018      	movs	r0, r3
 80025ee:	f000 f9f9 	bl	80029e4 <RTC_ByteToBcd2>
 80025f2:	0003      	movs	r3, r0
 80025f4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80025f6:	0022      	movs	r2, r4
 80025f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80025fe:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002604:	4313      	orrs	r3, r2
 8002606:	61fb      	str	r3, [r7, #28]
 8002608:	e022      	b.n	8002650 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	2240      	movs	r2, #64	@ 0x40
 8002612:	4013      	ands	r3, r2
 8002614:	d102      	bne.n	800261c <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	2200      	movs	r2, #0
 800261a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800261c:	68bb      	ldr	r3, [r7, #8]
 800261e:	781b      	ldrb	r3, [r3, #0]
 8002620:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	785b      	ldrb	r3, [r3, #1]
 8002626:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002628:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800262e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	78db      	ldrb	r3, [r3, #3]
 8002634:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002636:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2120      	movs	r1, #32
 800263c:	5c5b      	ldrb	r3, [r3, r1]
 800263e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002640:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002646:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800264c:	4313      	orrs	r3, r2
 800264e:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	22ca      	movs	r2, #202	@ 0xca
 8002662:	625a      	str	r2, [r3, #36]	@ 0x24
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2253      	movs	r2, #83	@ 0x53
 800266a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002670:	2380      	movs	r3, #128	@ 0x80
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	429a      	cmp	r2, r3
 8002676:	d147      	bne.n	8002708 <HAL_RTC_SetAlarm_IT+0x19c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	699a      	ldr	r2, [r3, #24]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	492e      	ldr	r1, [pc, #184]	@ (800273c <HAL_RTC_SetAlarm_IT+0x1d0>)
 8002684:	400a      	ands	r2, r1
 8002686:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2201      	movs	r2, #1
 800268e:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8002690:	f7fe fce4 	bl	800105c <HAL_GetTick>
 8002694:	0003      	movs	r3, r0
 8002696:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002698:	e016      	b.n	80026c8 <HAL_RTC_SetAlarm_IT+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800269a:	f7fe fcdf 	bl	800105c <HAL_GetTick>
 800269e:	0002      	movs	r2, r0
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	1ad2      	subs	r2, r2, r3
 80026a4:	23fa      	movs	r3, #250	@ 0xfa
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d90d      	bls.n	80026c8 <HAL_RTC_SetAlarm_IT+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	22ff      	movs	r2, #255	@ 0xff
 80026b2:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2225      	movs	r2, #37	@ 0x25
 80026b8:	2103      	movs	r1, #3
 80026ba:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	2224      	movs	r2, #36	@ 0x24
 80026c0:	2100      	movs	r1, #0
 80026c2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	e035      	b.n	8002734 <HAL_RTC_SetAlarm_IT+0x1c8>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68db      	ldr	r3, [r3, #12]
 80026ce:	2201      	movs	r2, #1
 80026d0:	4013      	ands	r3, r2
 80026d2:	d0e2      	beq.n	800269a <HAL_RTC_SetAlarm_IT+0x12e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2180      	movs	r1, #128	@ 0x80
 80026f0:	0049      	lsls	r1, r1, #1
 80026f2:	430a      	orrs	r2, r1
 80026f4:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699a      	ldr	r2, [r3, #24]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2180      	movs	r1, #128	@ 0x80
 8002702:	0149      	lsls	r1, r1, #5
 8002704:	430a      	orrs	r2, r1
 8002706:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002708:	4a0d      	ldr	r2, [pc, #52]	@ (8002740 <HAL_RTC_SetAlarm_IT+0x1d4>)
 800270a:	2380      	movs	r3, #128	@ 0x80
 800270c:	58d3      	ldr	r3, [r2, r3]
 800270e:	490c      	ldr	r1, [pc, #48]	@ (8002740 <HAL_RTC_SetAlarm_IT+0x1d4>)
 8002710:	2280      	movs	r2, #128	@ 0x80
 8002712:	0312      	lsls	r2, r2, #12
 8002714:	4313      	orrs	r3, r2
 8002716:	2280      	movs	r2, #128	@ 0x80
 8002718:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	22ff      	movs	r2, #255	@ 0xff
 8002720:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	2225      	movs	r2, #37	@ 0x25
 8002726:	2101      	movs	r1, #1
 8002728:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2224      	movs	r2, #36	@ 0x24
 800272e:	2100      	movs	r1, #0
 8002730:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	0018      	movs	r0, r3
 8002736:	46bd      	mov	sp, r7
 8002738:	b009      	add	sp, #36	@ 0x24
 800273a:	bd90      	pop	{r4, r7, pc}
 800273c:	fffffeff 	.word	0xfffffeff
 8002740:	40021800 	.word	0x40021800

08002744 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2224      	movs	r2, #36	@ 0x24
 8002752:	5c9b      	ldrb	r3, [r3, r2]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d101      	bne.n	800275c <HAL_RTC_DeactivateAlarm+0x18>
 8002758:	2302      	movs	r3, #2
 800275a:	e053      	b.n	8002804 <HAL_RTC_DeactivateAlarm+0xc0>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2224      	movs	r2, #36	@ 0x24
 8002760:	2101      	movs	r1, #1
 8002762:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2225      	movs	r2, #37	@ 0x25
 8002768:	2102      	movs	r1, #2
 800276a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	22ca      	movs	r2, #202	@ 0xca
 8002772:	625a      	str	r2, [r3, #36]	@ 0x24
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2253      	movs	r2, #83	@ 0x53
 800277a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	2380      	movs	r3, #128	@ 0x80
 8002780:	005b      	lsls	r3, r3, #1
 8002782:	429a      	cmp	r2, r3
 8002784:	d131      	bne.n	80027ea <HAL_RTC_DeactivateAlarm+0xa6>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699a      	ldr	r2, [r3, #24]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	491e      	ldr	r1, [pc, #120]	@ (800280c <HAL_RTC_DeactivateAlarm+0xc8>)
 8002792:	400a      	ands	r2, r1
 8002794:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	699a      	ldr	r2, [r3, #24]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	491b      	ldr	r1, [pc, #108]	@ (8002810 <HAL_RTC_DeactivateAlarm+0xcc>)
 80027a2:	400a      	ands	r2, r1
 80027a4:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 80027a6:	f7fe fc59 	bl	800105c <HAL_GetTick>
 80027aa:	0003      	movs	r3, r0
 80027ac:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80027ae:	e016      	b.n	80027de <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80027b0:	f7fe fc54 	bl	800105c <HAL_GetTick>
 80027b4:	0002      	movs	r2, r0
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	1ad2      	subs	r2, r2, r3
 80027ba:	23fa      	movs	r3, #250	@ 0xfa
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	429a      	cmp	r2, r3
 80027c0:	d90d      	bls.n	80027de <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	22ff      	movs	r2, #255	@ 0xff
 80027c8:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2225      	movs	r2, #37	@ 0x25
 80027ce:	2103      	movs	r1, #3
 80027d0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2224      	movs	r2, #36	@ 0x24
 80027d6:	2100      	movs	r1, #0
 80027d8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e012      	b.n	8002804 <HAL_RTC_DeactivateAlarm+0xc0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	4013      	ands	r3, r2
 80027e8:	d0e2      	beq.n	80027b0 <HAL_RTC_DeactivateAlarm+0x6c>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	22ff      	movs	r2, #255	@ 0xff
 80027f0:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2225      	movs	r2, #37	@ 0x25
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2224      	movs	r2, #36	@ 0x24
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b004      	add	sp, #16
 800280a:	bd80      	pop	{r7, pc}
 800280c:	fffffeff 	.word	0xfffffeff
 8002810:	ffffefff 	.word	0xffffefff

08002814 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	699a      	ldr	r2, [r3, #24]
 8002822:	2380      	movs	r3, #128	@ 0x80
 8002824:	015b      	lsls	r3, r3, #5
 8002826:	4013      	ands	r3, r2
 8002828:	d00d      	beq.n	8002846 <HAL_RTC_AlarmIRQHandler+0x32>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002830:	2201      	movs	r2, #1
 8002832:	4013      	ands	r3, r2
 8002834:	d007      	beq.n	8002846 <HAL_RTC_AlarmIRQHandler+0x32>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2201      	movs	r2, #1
 800283c:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	0018      	movs	r0, r3
 8002842:	f000 f808 	bl	8002856 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2225      	movs	r2, #37	@ 0x25
 800284a:	2101      	movs	r1, #1
 800284c:	5499      	strb	r1, [r3, r2]
}
 800284e:	46c0      	nop			@ (mov r8, r8)
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 800285e:	46c0      	nop			@ (mov r8, r8)
 8002860:	46bd      	mov	sp, r7
 8002862:	b002      	add	sp, #8
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002870:	4b15      	ldr	r3, [pc, #84]	@ (80028c8 <HAL_RTC_WaitForSynchro+0x60>)
 8002872:	68da      	ldr	r2, [r3, #12]
 8002874:	4b14      	ldr	r3, [pc, #80]	@ (80028c8 <HAL_RTC_WaitForSynchro+0x60>)
 8002876:	2120      	movs	r1, #32
 8002878:	438a      	bics	r2, r1
 800287a:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 800287c:	f7fe fbee 	bl	800105c <HAL_GetTick>
 8002880:	0003      	movs	r3, r0
 8002882:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002884:	e013      	b.n	80028ae <HAL_RTC_WaitForSynchro+0x46>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002886:	f7fe fbe9 	bl	800105c <HAL_GetTick>
 800288a:	0002      	movs	r2, r0
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	1ad2      	subs	r2, r2, r3
 8002890:	23fa      	movs	r3, #250	@ 0xfa
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	429a      	cmp	r2, r3
 8002896:	d90a      	bls.n	80028ae <HAL_RTC_WaitForSynchro+0x46>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002898:	4b0b      	ldr	r3, [pc, #44]	@ (80028c8 <HAL_RTC_WaitForSynchro+0x60>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	2220      	movs	r2, #32
 800289e:	4013      	ands	r3, r2
 80028a0:	d10b      	bne.n	80028ba <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2225      	movs	r2, #37	@ 0x25
 80028a6:	2103      	movs	r1, #3
 80028a8:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e007      	b.n	80028be <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80028ae:	4b06      	ldr	r3, [pc, #24]	@ (80028c8 <HAL_RTC_WaitForSynchro+0x60>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2220      	movs	r2, #32
 80028b4:	4013      	ands	r3, r2
 80028b6:	d0e6      	beq.n	8002886 <HAL_RTC_WaitForSynchro+0x1e>
 80028b8:	e000      	b.n	80028bc <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80028ba:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	0018      	movs	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	40002800 	.word	0x40002800

080028cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028d4:	230f      	movs	r3, #15
 80028d6:	18fb      	adds	r3, r7, r3
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 80028dc:	4b1e      	ldr	r3, [pc, #120]	@ (8002958 <RTC_EnterInitMode+0x8c>)
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	2240      	movs	r2, #64	@ 0x40
 80028e2:	4013      	ands	r3, r2
 80028e4:	d130      	bne.n	8002948 <RTC_EnterInitMode+0x7c>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80028e6:	4b1c      	ldr	r3, [pc, #112]	@ (8002958 <RTC_EnterInitMode+0x8c>)
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002958 <RTC_EnterInitMode+0x8c>)
 80028ec:	2180      	movs	r1, #128	@ 0x80
 80028ee:	430a      	orrs	r2, r1
 80028f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80028f2:	f7fe fbb3 	bl	800105c <HAL_GetTick>
 80028f6:	0003      	movs	r3, r0
 80028f8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80028fa:	e019      	b.n	8002930 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80028fc:	f7fe fbae 	bl	800105c <HAL_GetTick>
 8002900:	0002      	movs	r2, r0
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	1ad2      	subs	r2, r2, r3
 8002906:	200f      	movs	r0, #15
 8002908:	183b      	adds	r3, r7, r0
 800290a:	1839      	adds	r1, r7, r0
 800290c:	7809      	ldrb	r1, [r1, #0]
 800290e:	7019      	strb	r1, [r3, #0]
 8002910:	23fa      	movs	r3, #250	@ 0xfa
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d90b      	bls.n	8002930 <RTC_EnterInitMode+0x64>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002918:	4b0f      	ldr	r3, [pc, #60]	@ (8002958 <RTC_EnterInitMode+0x8c>)
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	2240      	movs	r2, #64	@ 0x40
 800291e:	4013      	ands	r3, r2
 8002920:	d111      	bne.n	8002946 <RTC_EnterInitMode+0x7a>
        {
          status = HAL_TIMEOUT;
 8002922:	183b      	adds	r3, r7, r0
 8002924:	2203      	movs	r2, #3
 8002926:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2225      	movs	r2, #37	@ 0x25
 800292c:	2103      	movs	r1, #3
 800292e:	5499      	strb	r1, [r3, r2]
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002930:	4b09      	ldr	r3, [pc, #36]	@ (8002958 <RTC_EnterInitMode+0x8c>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2240      	movs	r2, #64	@ 0x40
 8002936:	4013      	ands	r3, r2
 8002938:	d106      	bne.n	8002948 <RTC_EnterInitMode+0x7c>
 800293a:	230f      	movs	r3, #15
 800293c:	18fb      	adds	r3, r7, r3
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b03      	cmp	r3, #3
 8002942:	d1db      	bne.n	80028fc <RTC_EnterInitMode+0x30>
 8002944:	e000      	b.n	8002948 <RTC_EnterInitMode+0x7c>
        }
        else
        {
          break;
 8002946:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return status;
 8002948:	230f      	movs	r3, #15
 800294a:	18fb      	adds	r3, r7, r3
 800294c:	781b      	ldrb	r3, [r3, #0]
}
 800294e:	0018      	movs	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	b004      	add	sp, #16
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	40002800 	.word	0x40002800

0800295c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800295c:	b590      	push	{r4, r7, lr}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002964:	240f      	movs	r4, #15
 8002966:	193b      	adds	r3, r7, r4
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800296c:	4b1c      	ldr	r3, [pc, #112]	@ (80029e0 <RTC_ExitInitMode+0x84>)
 800296e:	68da      	ldr	r2, [r3, #12]
 8002970:	4b1b      	ldr	r3, [pc, #108]	@ (80029e0 <RTC_ExitInitMode+0x84>)
 8002972:	2180      	movs	r1, #128	@ 0x80
 8002974:	438a      	bics	r2, r1
 8002976:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002978:	4b19      	ldr	r3, [pc, #100]	@ (80029e0 <RTC_ExitInitMode+0x84>)
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	2220      	movs	r2, #32
 800297e:	4013      	ands	r3, r2
 8002980:	d10d      	bne.n	800299e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	0018      	movs	r0, r3
 8002986:	f7ff ff6f 	bl	8002868 <HAL_RTC_WaitForSynchro>
 800298a:	1e03      	subs	r3, r0, #0
 800298c:	d021      	beq.n	80029d2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2225      	movs	r2, #37	@ 0x25
 8002992:	2103      	movs	r1, #3
 8002994:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002996:	193b      	adds	r3, r7, r4
 8002998:	2203      	movs	r2, #3
 800299a:	701a      	strb	r2, [r3, #0]
 800299c:	e019      	b.n	80029d2 <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800299e:	4b10      	ldr	r3, [pc, #64]	@ (80029e0 <RTC_ExitInitMode+0x84>)
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	4b0f      	ldr	r3, [pc, #60]	@ (80029e0 <RTC_ExitInitMode+0x84>)
 80029a4:	2120      	movs	r1, #32
 80029a6:	438a      	bics	r2, r1
 80029a8:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7ff ff5b 	bl	8002868 <HAL_RTC_WaitForSynchro>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d007      	beq.n	80029c6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2225      	movs	r2, #37	@ 0x25
 80029ba:	2103      	movs	r1, #3
 80029bc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80029be:	230f      	movs	r3, #15
 80029c0:	18fb      	adds	r3, r7, r3
 80029c2:	2203      	movs	r2, #3
 80029c4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029c6:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <RTC_ExitInitMode+0x84>)
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	4b05      	ldr	r3, [pc, #20]	@ (80029e0 <RTC_ExitInitMode+0x84>)
 80029cc:	2120      	movs	r1, #32
 80029ce:	430a      	orrs	r2, r1
 80029d0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80029d2:	230f      	movs	r3, #15
 80029d4:	18fb      	adds	r3, r7, r3
 80029d6:	781b      	ldrb	r3, [r3, #0]
}
 80029d8:	0018      	movs	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	b005      	add	sp, #20
 80029de:	bd90      	pop	{r4, r7, pc}
 80029e0:	40002800 	.word	0x40002800

080029e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	0002      	movs	r2, r0
 80029ec:	1dfb      	adds	r3, r7, #7
 80029ee:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80029f0:	2300      	movs	r3, #0
 80029f2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80029f4:	230b      	movs	r3, #11
 80029f6:	18fb      	adds	r3, r7, r3
 80029f8:	1dfa      	adds	r2, r7, #7
 80029fa:	7812      	ldrb	r2, [r2, #0]
 80029fc:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 80029fe:	e008      	b.n	8002a12 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	3301      	adds	r3, #1
 8002a04:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002a06:	220b      	movs	r2, #11
 8002a08:	18bb      	adds	r3, r7, r2
 8002a0a:	18ba      	adds	r2, r7, r2
 8002a0c:	7812      	ldrb	r2, [r2, #0]
 8002a0e:	3a0a      	subs	r2, #10
 8002a10:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002a12:	210b      	movs	r1, #11
 8002a14:	187b      	adds	r3, r7, r1
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b09      	cmp	r3, #9
 8002a1a:	d8f1      	bhi.n	8002a00 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	187b      	adds	r3, r7, r1
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	b2db      	uxtb	r3, r3
}
 8002a2c:	0018      	movs	r0, r3
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b004      	add	sp, #16
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	1dfb      	adds	r3, r7, #7
 8002a3e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	001a      	movs	r2, r3
 8002a4a:	0013      	movs	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	189b      	adds	r3, r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	1dfb      	adds	r3, r7, #7
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	210f      	movs	r1, #15
 8002a5e:	400b      	ands	r3, r1
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	18d3      	adds	r3, r2, r3
 8002a64:	b2db      	uxtb	r3, r3
}
 8002a66:	0018      	movs	r0, r3
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	b004      	add	sp, #16
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d101      	bne.n	8002a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e046      	b.n	8002b10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2288      	movs	r2, #136	@ 0x88
 8002a86:	589b      	ldr	r3, [r3, r2]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2284      	movs	r2, #132	@ 0x84
 8002a90:	2100      	movs	r1, #0
 8002a92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	0018      	movs	r0, r3
 8002a98:	f7fe f912 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2288      	movs	r2, #136	@ 0x88
 8002aa0:	2124      	movs	r1, #36	@ 0x24
 8002aa2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2101      	movs	r1, #1
 8002ab0:	438a      	bics	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d003      	beq.n	8002ac4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	0018      	movs	r0, r3
 8002ac0:	f000 fe96 	bl	80037f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	f000 fd14 	bl	80034f4 <UART_SetConfig>
 8002acc:	0003      	movs	r3, r0
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d101      	bne.n	8002ad6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e01c      	b.n	8002b10 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685a      	ldr	r2, [r3, #4]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	490d      	ldr	r1, [pc, #52]	@ (8002b18 <HAL_UART_Init+0xa8>)
 8002ae2:	400a      	ands	r2, r1
 8002ae4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	212a      	movs	r1, #42	@ 0x2a
 8002af2:	438a      	bics	r2, r1
 8002af4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2101      	movs	r1, #1
 8002b02:	430a      	orrs	r2, r1
 8002b04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 ff25 	bl	8003958 <UART_CheckIdleState>
 8002b0e:	0003      	movs	r3, r0
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b002      	add	sp, #8
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	ffffb7ff 	.word	0xffffb7ff

08002b1c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08a      	sub	sp, #40	@ 0x28
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	603b      	str	r3, [r7, #0]
 8002b28:	1dbb      	adds	r3, r7, #6
 8002b2a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2288      	movs	r2, #136	@ 0x88
 8002b30:	589b      	ldr	r3, [r3, r2]
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	d000      	beq.n	8002b38 <HAL_UART_Transmit+0x1c>
 8002b36:	e090      	b.n	8002c5a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d003      	beq.n	8002b46 <HAL_UART_Transmit+0x2a>
 8002b3e:	1dbb      	adds	r3, r7, #6
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e088      	b.n	8002c5c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	2380      	movs	r3, #128	@ 0x80
 8002b50:	015b      	lsls	r3, r3, #5
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d109      	bne.n	8002b6a <HAL_UART_Transmit+0x4e>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	691b      	ldr	r3, [r3, #16]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	2201      	movs	r2, #1
 8002b62:	4013      	ands	r3, r2
 8002b64:	d001      	beq.n	8002b6a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e078      	b.n	8002c5c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2290      	movs	r2, #144	@ 0x90
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2288      	movs	r2, #136	@ 0x88
 8002b76:	2121      	movs	r1, #33	@ 0x21
 8002b78:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b7a:	f7fe fa6f 	bl	800105c <HAL_GetTick>
 8002b7e:	0003      	movs	r3, r0
 8002b80:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1dba      	adds	r2, r7, #6
 8002b86:	2154      	movs	r1, #84	@ 0x54
 8002b88:	8812      	ldrh	r2, [r2, #0]
 8002b8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	1dba      	adds	r2, r7, #6
 8002b90:	2156      	movs	r1, #86	@ 0x56
 8002b92:	8812      	ldrh	r2, [r2, #0]
 8002b94:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	689a      	ldr	r2, [r3, #8]
 8002b9a:	2380      	movs	r3, #128	@ 0x80
 8002b9c:	015b      	lsls	r3, r3, #5
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d108      	bne.n	8002bb4 <HAL_UART_Transmit+0x98>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d104      	bne.n	8002bb4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	61bb      	str	r3, [r7, #24]
 8002bb2:	e003      	b.n	8002bbc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002bbc:	e030      	b.n	8002c20 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	0013      	movs	r3, r2
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2180      	movs	r1, #128	@ 0x80
 8002bcc:	f000 ff6e 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 8002bd0:	1e03      	subs	r3, r0, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2288      	movs	r2, #136	@ 0x88
 8002bd8:	2120      	movs	r1, #32
 8002bda:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bdc:	2303      	movs	r3, #3
 8002bde:	e03d      	b.n	8002c5c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d10b      	bne.n	8002bfe <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	001a      	movs	r2, r3
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	05d2      	lsls	r2, r2, #23
 8002bf2:	0dd2      	lsrs	r2, r2, #23
 8002bf4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	61bb      	str	r3, [r7, #24]
 8002bfc:	e007      	b.n	8002c0e <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	781a      	ldrb	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	2256      	movs	r2, #86	@ 0x56
 8002c12:	5a9b      	ldrh	r3, [r3, r2]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b299      	uxth	r1, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2256      	movs	r2, #86	@ 0x56
 8002c1e:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2256      	movs	r2, #86	@ 0x56
 8002c24:	5a9b      	ldrh	r3, [r3, r2]
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1c8      	bne.n	8002bbe <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	0013      	movs	r3, r2
 8002c36:	2200      	movs	r2, #0
 8002c38:	2140      	movs	r1, #64	@ 0x40
 8002c3a:	f000 ff37 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 8002c3e:	1e03      	subs	r3, r0, #0
 8002c40:	d005      	beq.n	8002c4e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2288      	movs	r2, #136	@ 0x88
 8002c46:	2120      	movs	r1, #32
 8002c48:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e006      	b.n	8002c5c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2288      	movs	r2, #136	@ 0x88
 8002c52:	2120      	movs	r1, #32
 8002c54:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e000      	b.n	8002c5c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002c5a:	2302      	movs	r3, #2
  }
}
 8002c5c:	0018      	movs	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	b008      	add	sp, #32
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08a      	sub	sp, #40	@ 0x28
 8002c68:	af02      	add	r7, sp, #8
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	603b      	str	r3, [r7, #0]
 8002c70:	1dbb      	adds	r3, r7, #6
 8002c72:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	228c      	movs	r2, #140	@ 0x8c
 8002c78:	589b      	ldr	r3, [r3, r2]
 8002c7a:	2b20      	cmp	r3, #32
 8002c7c:	d000      	beq.n	8002c80 <HAL_UART_Receive+0x1c>
 8002c7e:	e0d0      	b.n	8002e22 <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <HAL_UART_Receive+0x2a>
 8002c86:	1dbb      	adds	r3, r7, #6
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e0c8      	b.n	8002e24 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	2380      	movs	r3, #128	@ 0x80
 8002c98:	015b      	lsls	r3, r3, #5
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d109      	bne.n	8002cb2 <HAL_UART_Receive+0x4e>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d105      	bne.n	8002cb2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	4013      	ands	r3, r2
 8002cac:	d001      	beq.n	8002cb2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e0b8      	b.n	8002e24 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2290      	movs	r2, #144	@ 0x90
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	228c      	movs	r2, #140	@ 0x8c
 8002cbe:	2122      	movs	r1, #34	@ 0x22
 8002cc0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cc8:	f7fe f9c8 	bl	800105c <HAL_GetTick>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	1dba      	adds	r2, r7, #6
 8002cd4:	215c      	movs	r1, #92	@ 0x5c
 8002cd6:	8812      	ldrh	r2, [r2, #0]
 8002cd8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	1dba      	adds	r2, r7, #6
 8002cde:	215e      	movs	r1, #94	@ 0x5e
 8002ce0:	8812      	ldrh	r2, [r2, #0]
 8002ce2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689a      	ldr	r2, [r3, #8]
 8002ce8:	2380      	movs	r3, #128	@ 0x80
 8002cea:	015b      	lsls	r3, r3, #5
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d10d      	bne.n	8002d0c <HAL_UART_Receive+0xa8>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d104      	bne.n	8002d02 <HAL_UART_Receive+0x9e>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2260      	movs	r2, #96	@ 0x60
 8002cfc:	494b      	ldr	r1, [pc, #300]	@ (8002e2c <HAL_UART_Receive+0x1c8>)
 8002cfe:	5299      	strh	r1, [r3, r2]
 8002d00:	e02e      	b.n	8002d60 <HAL_UART_Receive+0xfc>
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2260      	movs	r2, #96	@ 0x60
 8002d06:	21ff      	movs	r1, #255	@ 0xff
 8002d08:	5299      	strh	r1, [r3, r2]
 8002d0a:	e029      	b.n	8002d60 <HAL_UART_Receive+0xfc>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10d      	bne.n	8002d30 <HAL_UART_Receive+0xcc>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d104      	bne.n	8002d26 <HAL_UART_Receive+0xc2>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2260      	movs	r2, #96	@ 0x60
 8002d20:	21ff      	movs	r1, #255	@ 0xff
 8002d22:	5299      	strh	r1, [r3, r2]
 8002d24:	e01c      	b.n	8002d60 <HAL_UART_Receive+0xfc>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2260      	movs	r2, #96	@ 0x60
 8002d2a:	217f      	movs	r1, #127	@ 0x7f
 8002d2c:	5299      	strh	r1, [r3, r2]
 8002d2e:	e017      	b.n	8002d60 <HAL_UART_Receive+0xfc>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	689a      	ldr	r2, [r3, #8]
 8002d34:	2380      	movs	r3, #128	@ 0x80
 8002d36:	055b      	lsls	r3, r3, #21
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d10d      	bne.n	8002d58 <HAL_UART_Receive+0xf4>
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d104      	bne.n	8002d4e <HAL_UART_Receive+0xea>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2260      	movs	r2, #96	@ 0x60
 8002d48:	217f      	movs	r1, #127	@ 0x7f
 8002d4a:	5299      	strh	r1, [r3, r2]
 8002d4c:	e008      	b.n	8002d60 <HAL_UART_Receive+0xfc>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2260      	movs	r2, #96	@ 0x60
 8002d52:	213f      	movs	r1, #63	@ 0x3f
 8002d54:	5299      	strh	r1, [r3, r2]
 8002d56:	e003      	b.n	8002d60 <HAL_UART_Receive+0xfc>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2260      	movs	r2, #96	@ 0x60
 8002d5c:	2100      	movs	r1, #0
 8002d5e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002d60:	2312      	movs	r3, #18
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	2160      	movs	r1, #96	@ 0x60
 8002d68:	5a52      	ldrh	r2, [r2, r1]
 8002d6a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	2380      	movs	r3, #128	@ 0x80
 8002d72:	015b      	lsls	r3, r3, #5
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d108      	bne.n	8002d8a <HAL_UART_Receive+0x126>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	691b      	ldr	r3, [r3, #16]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d104      	bne.n	8002d8a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	61bb      	str	r3, [r7, #24]
 8002d88:	e003      	b.n	8002d92 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d92:	e03a      	b.n	8002e0a <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	68f8      	ldr	r0, [r7, #12]
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	9300      	str	r3, [sp, #0]
 8002d9c:	0013      	movs	r3, r2
 8002d9e:	2200      	movs	r2, #0
 8002da0:	2120      	movs	r1, #32
 8002da2:	f000 fe83 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 8002da6:	1e03      	subs	r3, r0, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	228c      	movs	r2, #140	@ 0x8c
 8002dae:	2120      	movs	r1, #32
 8002db0:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e036      	b.n	8002e24 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10e      	bne.n	8002dda <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	2212      	movs	r2, #18
 8002dc6:	18ba      	adds	r2, r7, r2
 8002dc8:	8812      	ldrh	r2, [r2, #0]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	69bb      	ldr	r3, [r7, #24]
 8002dd0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	61bb      	str	r3, [r7, #24]
 8002dd8:	e00e      	b.n	8002df8 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2212      	movs	r2, #18
 8002de4:	18ba      	adds	r2, r7, r2
 8002de6:	8812      	ldrh	r2, [r2, #0]
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	4013      	ands	r3, r2
 8002dec:	b2da      	uxtb	r2, r3
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	3301      	adds	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	225e      	movs	r2, #94	@ 0x5e
 8002dfc:	5a9b      	ldrh	r3, [r3, r2]
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	3b01      	subs	r3, #1
 8002e02:	b299      	uxth	r1, r3
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	225e      	movs	r2, #94	@ 0x5e
 8002e08:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	225e      	movs	r2, #94	@ 0x5e
 8002e0e:	5a9b      	ldrh	r3, [r3, r2]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1be      	bne.n	8002d94 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	228c      	movs	r2, #140	@ 0x8c
 8002e1a:	2120      	movs	r1, #32
 8002e1c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
  }
}
 8002e24:	0018      	movs	r0, r3
 8002e26:	46bd      	mov	sp, r7
 8002e28:	b008      	add	sp, #32
 8002e2a:	bd80      	pop	{r7, pc}
 8002e2c:	000001ff 	.word	0x000001ff

08002e30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e30:	b5b0      	push	{r4, r5, r7, lr}
 8002e32:	b0aa      	sub	sp, #168	@ 0xa8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	69db      	ldr	r3, [r3, #28]
 8002e3e:	22a4      	movs	r2, #164	@ 0xa4
 8002e40:	18b9      	adds	r1, r7, r2
 8002e42:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	20a0      	movs	r0, #160	@ 0xa0
 8002e4c:	1839      	adds	r1, r7, r0
 8002e4e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	689b      	ldr	r3, [r3, #8]
 8002e56:	249c      	movs	r4, #156	@ 0x9c
 8002e58:	1939      	adds	r1, r7, r4
 8002e5a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e5c:	0011      	movs	r1, r2
 8002e5e:	18bb      	adds	r3, r7, r2
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4aa2      	ldr	r2, [pc, #648]	@ (80030ec <HAL_UART_IRQHandler+0x2bc>)
 8002e64:	4013      	ands	r3, r2
 8002e66:	2298      	movs	r2, #152	@ 0x98
 8002e68:	18bd      	adds	r5, r7, r2
 8002e6a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002e6c:	18bb      	adds	r3, r7, r2
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11a      	bne.n	8002eaa <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e74:	187b      	adds	r3, r7, r1
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2220      	movs	r2, #32
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	d015      	beq.n	8002eaa <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e7e:	183b      	adds	r3, r7, r0
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2220      	movs	r2, #32
 8002e84:	4013      	ands	r3, r2
 8002e86:	d105      	bne.n	8002e94 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e88:	193b      	adds	r3, r7, r4
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	2380      	movs	r3, #128	@ 0x80
 8002e8e:	055b      	lsls	r3, r3, #21
 8002e90:	4013      	ands	r3, r2
 8002e92:	d00a      	beq.n	8002eaa <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d100      	bne.n	8002e9e <HAL_UART_IRQHandler+0x6e>
 8002e9c:	e2fb      	b.n	8003496 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	0010      	movs	r0, r2
 8002ea6:	4798      	blx	r3
      }
      return;
 8002ea8:	e2f5      	b.n	8003496 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002eaa:	2398      	movs	r3, #152	@ 0x98
 8002eac:	18fb      	adds	r3, r7, r3
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d100      	bne.n	8002eb6 <HAL_UART_IRQHandler+0x86>
 8002eb4:	e122      	b.n	80030fc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002eb6:	239c      	movs	r3, #156	@ 0x9c
 8002eb8:	18fb      	adds	r3, r7, r3
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a8c      	ldr	r2, [pc, #560]	@ (80030f0 <HAL_UART_IRQHandler+0x2c0>)
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	d106      	bne.n	8002ed0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002ec2:	23a0      	movs	r3, #160	@ 0xa0
 8002ec4:	18fb      	adds	r3, r7, r3
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a8a      	ldr	r2, [pc, #552]	@ (80030f4 <HAL_UART_IRQHandler+0x2c4>)
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d100      	bne.n	8002ed0 <HAL_UART_IRQHandler+0xa0>
 8002ece:	e115      	b.n	80030fc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ed0:	23a4      	movs	r3, #164	@ 0xa4
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d012      	beq.n	8002f02 <HAL_UART_IRQHandler+0xd2>
 8002edc:	23a0      	movs	r3, #160	@ 0xa0
 8002ede:	18fb      	adds	r3, r7, r3
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	2380      	movs	r3, #128	@ 0x80
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d00b      	beq.n	8002f02 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2290      	movs	r2, #144	@ 0x90
 8002ef6:	589b      	ldr	r3, [r3, r2]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	431a      	orrs	r2, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2190      	movs	r1, #144	@ 0x90
 8002f00:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f02:	23a4      	movs	r3, #164	@ 0xa4
 8002f04:	18fb      	adds	r3, r7, r3
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2202      	movs	r2, #2
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d011      	beq.n	8002f32 <HAL_UART_IRQHandler+0x102>
 8002f0e:	239c      	movs	r3, #156	@ 0x9c
 8002f10:	18fb      	adds	r3, r7, r3
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2201      	movs	r2, #1
 8002f16:	4013      	ands	r3, r2
 8002f18:	d00b      	beq.n	8002f32 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2290      	movs	r2, #144	@ 0x90
 8002f26:	589b      	ldr	r3, [r3, r2]
 8002f28:	2204      	movs	r2, #4
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2190      	movs	r1, #144	@ 0x90
 8002f30:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f32:	23a4      	movs	r3, #164	@ 0xa4
 8002f34:	18fb      	adds	r3, r7, r3
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2204      	movs	r2, #4
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d011      	beq.n	8002f62 <HAL_UART_IRQHandler+0x132>
 8002f3e:	239c      	movs	r3, #156	@ 0x9c
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	2201      	movs	r2, #1
 8002f46:	4013      	ands	r3, r2
 8002f48:	d00b      	beq.n	8002f62 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2290      	movs	r2, #144	@ 0x90
 8002f56:	589b      	ldr	r3, [r3, r2]
 8002f58:	2202      	movs	r2, #2
 8002f5a:	431a      	orrs	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2190      	movs	r1, #144	@ 0x90
 8002f60:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f62:	23a4      	movs	r3, #164	@ 0xa4
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2208      	movs	r2, #8
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d017      	beq.n	8002f9e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f6e:	23a0      	movs	r3, #160	@ 0xa0
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2220      	movs	r2, #32
 8002f76:	4013      	ands	r3, r2
 8002f78:	d105      	bne.n	8002f86 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f7a:	239c      	movs	r3, #156	@ 0x9c
 8002f7c:	18fb      	adds	r3, r7, r3
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a5b      	ldr	r2, [pc, #364]	@ (80030f0 <HAL_UART_IRQHandler+0x2c0>)
 8002f82:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f84:	d00b      	beq.n	8002f9e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2208      	movs	r2, #8
 8002f8c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2290      	movs	r2, #144	@ 0x90
 8002f92:	589b      	ldr	r3, [r3, r2]
 8002f94:	2208      	movs	r2, #8
 8002f96:	431a      	orrs	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2190      	movs	r1, #144	@ 0x90
 8002f9c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f9e:	23a4      	movs	r3, #164	@ 0xa4
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	@ 0x80
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d013      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x1a4>
 8002fac:	23a0      	movs	r3, #160	@ 0xa0
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	@ 0x80
 8002fb4:	04db      	lsls	r3, r3, #19
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d00c      	beq.n	8002fd4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2280      	movs	r2, #128	@ 0x80
 8002fc0:	0112      	lsls	r2, r2, #4
 8002fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2290      	movs	r2, #144	@ 0x90
 8002fc8:	589b      	ldr	r3, [r3, r2]
 8002fca:	2220      	movs	r2, #32
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2190      	movs	r1, #144	@ 0x90
 8002fd2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2290      	movs	r2, #144	@ 0x90
 8002fd8:	589b      	ldr	r3, [r3, r2]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d100      	bne.n	8002fe0 <HAL_UART_IRQHandler+0x1b0>
 8002fde:	e25c      	b.n	800349a <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fe0:	23a4      	movs	r3, #164	@ 0xa4
 8002fe2:	18fb      	adds	r3, r7, r3
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d015      	beq.n	8003018 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fec:	23a0      	movs	r3, #160	@ 0xa0
 8002fee:	18fb      	adds	r3, r7, r3
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	d106      	bne.n	8003006 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002ff8:	239c      	movs	r3, #156	@ 0x9c
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	2380      	movs	r3, #128	@ 0x80
 8003000:	055b      	lsls	r3, r3, #21
 8003002:	4013      	ands	r3, r2
 8003004:	d008      	beq.n	8003018 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003012:	687a      	ldr	r2, [r7, #4]
 8003014:	0010      	movs	r0, r2
 8003016:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2290      	movs	r2, #144	@ 0x90
 800301c:	589b      	ldr	r3, [r3, r2]
 800301e:	2194      	movs	r1, #148	@ 0x94
 8003020:	187a      	adds	r2, r7, r1
 8003022:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	2240      	movs	r2, #64	@ 0x40
 800302c:	4013      	ands	r3, r2
 800302e:	2b40      	cmp	r3, #64	@ 0x40
 8003030:	d004      	beq.n	800303c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003032:	187b      	adds	r3, r7, r1
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2228      	movs	r2, #40	@ 0x28
 8003038:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800303a:	d04c      	beq.n	80030d6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	0018      	movs	r0, r3
 8003040:	f000 fda4 	bl	8003b8c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2240      	movs	r2, #64	@ 0x40
 800304c:	4013      	ands	r3, r2
 800304e:	2b40      	cmp	r3, #64	@ 0x40
 8003050:	d13c      	bne.n	80030cc <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003052:	f3ef 8310 	mrs	r3, PRIMASK
 8003056:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003058:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800305a:	2090      	movs	r0, #144	@ 0x90
 800305c:	183a      	adds	r2, r7, r0
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	2301      	movs	r3, #1
 8003062:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003064:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003066:	f383 8810 	msr	PRIMASK, r3
}
 800306a:	46c0      	nop			@ (mov r8, r8)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2140      	movs	r1, #64	@ 0x40
 8003078:	438a      	bics	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	183b      	adds	r3, r7, r0
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003082:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003084:	f383 8810 	msr	PRIMASK, r3
}
 8003088:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	589b      	ldr	r3, [r3, r2]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d016      	beq.n	80030c2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2280      	movs	r2, #128	@ 0x80
 8003098:	589b      	ldr	r3, [r3, r2]
 800309a:	4a17      	ldr	r2, [pc, #92]	@ (80030f8 <HAL_UART_IRQHandler+0x2c8>)
 800309c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2280      	movs	r2, #128	@ 0x80
 80030a2:	589b      	ldr	r3, [r3, r2]
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7fe f95d 	bl	8001364 <HAL_DMA_Abort_IT>
 80030aa:	1e03      	subs	r3, r0, #0
 80030ac:	d01c      	beq.n	80030e8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2280      	movs	r2, #128	@ 0x80
 80030b2:	589b      	ldr	r3, [r3, r2]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	2180      	movs	r1, #128	@ 0x80
 80030ba:	5852      	ldr	r2, [r2, r1]
 80030bc:	0010      	movs	r0, r2
 80030be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	e012      	b.n	80030e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 fa01 	bl	80034cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ca:	e00d      	b.n	80030e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	0018      	movs	r0, r3
 80030d0:	f000 f9fc 	bl	80034cc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	e008      	b.n	80030e8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	0018      	movs	r0, r3
 80030da:	f000 f9f7 	bl	80034cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2290      	movs	r2, #144	@ 0x90
 80030e2:	2100      	movs	r1, #0
 80030e4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030e6:	e1d8      	b.n	800349a <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e8:	46c0      	nop			@ (mov r8, r8)
    return;
 80030ea:	e1d6      	b.n	800349a <HAL_UART_IRQHandler+0x66a>
 80030ec:	0000080f 	.word	0x0000080f
 80030f0:	10000001 	.word	0x10000001
 80030f4:	04000120 	.word	0x04000120
 80030f8:	08003c59 	.word	0x08003c59

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003100:	2b01      	cmp	r3, #1
 8003102:	d000      	beq.n	8003106 <HAL_UART_IRQHandler+0x2d6>
 8003104:	e15d      	b.n	80033c2 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003106:	23a4      	movs	r3, #164	@ 0xa4
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2210      	movs	r2, #16
 800310e:	4013      	ands	r3, r2
 8003110:	d100      	bne.n	8003114 <HAL_UART_IRQHandler+0x2e4>
 8003112:	e156      	b.n	80033c2 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003114:	23a0      	movs	r3, #160	@ 0xa0
 8003116:	18fb      	adds	r3, r7, r3
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	2210      	movs	r2, #16
 800311c:	4013      	ands	r3, r2
 800311e:	d100      	bne.n	8003122 <HAL_UART_IRQHandler+0x2f2>
 8003120:	e14f      	b.n	80033c2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2210      	movs	r2, #16
 8003128:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2240      	movs	r2, #64	@ 0x40
 8003132:	4013      	ands	r3, r2
 8003134:	2b40      	cmp	r3, #64	@ 0x40
 8003136:	d000      	beq.n	800313a <HAL_UART_IRQHandler+0x30a>
 8003138:	e0c3      	b.n	80032c2 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2280      	movs	r2, #128	@ 0x80
 800313e:	589b      	ldr	r3, [r3, r2]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	685a      	ldr	r2, [r3, #4]
 8003144:	217e      	movs	r1, #126	@ 0x7e
 8003146:	187b      	adds	r3, r7, r1
 8003148:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800314a:	187b      	adds	r3, r7, r1
 800314c:	881b      	ldrh	r3, [r3, #0]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d100      	bne.n	8003154 <HAL_UART_IRQHandler+0x324>
 8003152:	e097      	b.n	8003284 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	225c      	movs	r2, #92	@ 0x5c
 8003158:	5a9b      	ldrh	r3, [r3, r2]
 800315a:	187a      	adds	r2, r7, r1
 800315c:	8812      	ldrh	r2, [r2, #0]
 800315e:	429a      	cmp	r2, r3
 8003160:	d300      	bcc.n	8003164 <HAL_UART_IRQHandler+0x334>
 8003162:	e08f      	b.n	8003284 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	187a      	adds	r2, r7, r1
 8003168:	215e      	movs	r1, #94	@ 0x5e
 800316a:	8812      	ldrh	r2, [r2, #0]
 800316c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2280      	movs	r2, #128	@ 0x80
 8003172:	589b      	ldr	r3, [r3, r2]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2220      	movs	r2, #32
 800317a:	4013      	ands	r3, r2
 800317c:	d170      	bne.n	8003260 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800317e:	f3ef 8310 	mrs	r3, PRIMASK
 8003182:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003186:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003188:	2301      	movs	r3, #1
 800318a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318e:	f383 8810 	msr	PRIMASK, r3
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	49c4      	ldr	r1, [pc, #784]	@ (80034b0 <HAL_UART_IRQHandler+0x680>)
 80031a0:	400a      	ands	r2, r1
 80031a2:	601a      	str	r2, [r3, #0]
 80031a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80031a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031aa:	f383 8810 	msr	PRIMASK, r3
}
 80031ae:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031b0:	f3ef 8310 	mrs	r3, PRIMASK
 80031b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80031b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80031ba:	2301      	movs	r3, #1
 80031bc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031c0:	f383 8810 	msr	PRIMASK, r3
}
 80031c4:	46c0      	nop			@ (mov r8, r8)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	438a      	bics	r2, r1
 80031d4:	609a      	str	r2, [r3, #8]
 80031d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031d8:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031dc:	f383 8810 	msr	PRIMASK, r3
}
 80031e0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031e2:	f3ef 8310 	mrs	r3, PRIMASK
 80031e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80031e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031ea:	673b      	str	r3, [r7, #112]	@ 0x70
 80031ec:	2301      	movs	r3, #1
 80031ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031f2:	f383 8810 	msr	PRIMASK, r3
}
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689a      	ldr	r2, [r3, #8]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2140      	movs	r1, #64	@ 0x40
 8003204:	438a      	bics	r2, r1
 8003206:	609a      	str	r2, [r3, #8]
 8003208:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800320a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800320c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800320e:	f383 8810 	msr	PRIMASK, r3
}
 8003212:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	228c      	movs	r2, #140	@ 0x8c
 8003218:	2120      	movs	r1, #32
 800321a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003222:	f3ef 8310 	mrs	r3, PRIMASK
 8003226:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003228:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800322a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800322c:	2301      	movs	r3, #1
 800322e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003230:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003232:	f383 8810 	msr	PRIMASK, r3
}
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	2110      	movs	r1, #16
 8003244:	438a      	bics	r2, r1
 8003246:	601a      	str	r2, [r3, #0]
 8003248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800324a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800324c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800324e:	f383 8810 	msr	PRIMASK, r3
}
 8003252:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2280      	movs	r2, #128	@ 0x80
 8003258:	589b      	ldr	r3, [r3, r2]
 800325a:	0018      	movs	r0, r3
 800325c:	f7fe f820 	bl	80012a0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	225c      	movs	r2, #92	@ 0x5c
 800326a:	5a9a      	ldrh	r2, [r3, r2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	215e      	movs	r1, #94	@ 0x5e
 8003270:	5a5b      	ldrh	r3, [r3, r1]
 8003272:	b29b      	uxth	r3, r3
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	b29a      	uxth	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	0011      	movs	r1, r2
 800327c:	0018      	movs	r0, r3
 800327e:	f000 f92d 	bl	80034dc <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8003282:	e10c      	b.n	800349e <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	225c      	movs	r2, #92	@ 0x5c
 8003288:	5a9b      	ldrh	r3, [r3, r2]
 800328a:	227e      	movs	r2, #126	@ 0x7e
 800328c:	18ba      	adds	r2, r7, r2
 800328e:	8812      	ldrh	r2, [r2, #0]
 8003290:	429a      	cmp	r2, r3
 8003292:	d000      	beq.n	8003296 <HAL_UART_IRQHandler+0x466>
 8003294:	e103      	b.n	800349e <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2280      	movs	r2, #128	@ 0x80
 800329a:	589b      	ldr	r3, [r3, r2]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2220      	movs	r2, #32
 80032a2:	4013      	ands	r3, r2
 80032a4:	2b20      	cmp	r3, #32
 80032a6:	d000      	beq.n	80032aa <HAL_UART_IRQHandler+0x47a>
 80032a8:	e0f9      	b.n	800349e <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2202      	movs	r2, #2
 80032ae:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	225c      	movs	r2, #92	@ 0x5c
 80032b4:	5a9a      	ldrh	r2, [r3, r2]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0011      	movs	r1, r2
 80032ba:	0018      	movs	r0, r3
 80032bc:	f000 f90e 	bl	80034dc <HAL_UARTEx_RxEventCallback>
      return;
 80032c0:	e0ed      	b.n	800349e <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	225c      	movs	r2, #92	@ 0x5c
 80032c6:	5a99      	ldrh	r1, [r3, r2]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	225e      	movs	r2, #94	@ 0x5e
 80032cc:	5a9b      	ldrh	r3, [r3, r2]
 80032ce:	b29a      	uxth	r2, r3
 80032d0:	208e      	movs	r0, #142	@ 0x8e
 80032d2:	183b      	adds	r3, r7, r0
 80032d4:	1a8a      	subs	r2, r1, r2
 80032d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	225e      	movs	r2, #94	@ 0x5e
 80032dc:	5a9b      	ldrh	r3, [r3, r2]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d100      	bne.n	80032e6 <HAL_UART_IRQHandler+0x4b6>
 80032e4:	e0dd      	b.n	80034a2 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80032e6:	183b      	adds	r3, r7, r0
 80032e8:	881b      	ldrh	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d100      	bne.n	80032f0 <HAL_UART_IRQHandler+0x4c0>
 80032ee:	e0d8      	b.n	80034a2 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032f0:	f3ef 8310 	mrs	r3, PRIMASK
 80032f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80032f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032f8:	2488      	movs	r4, #136	@ 0x88
 80032fa:	193a      	adds	r2, r7, r4
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	2301      	movs	r3, #1
 8003300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f383 8810 	msr	PRIMASK, r3
}
 8003308:	46c0      	nop			@ (mov r8, r8)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4967      	ldr	r1, [pc, #412]	@ (80034b4 <HAL_UART_IRQHandler+0x684>)
 8003316:	400a      	ands	r2, r1
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	193b      	adds	r3, r7, r4
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003328:	f3ef 8310 	mrs	r3, PRIMASK
 800332c:	61bb      	str	r3, [r7, #24]
  return(result);
 800332e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003330:	2484      	movs	r4, #132	@ 0x84
 8003332:	193a      	adds	r2, r7, r4
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	2301      	movs	r3, #1
 8003338:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	f383 8810 	msr	PRIMASK, r3
}
 8003340:	46c0      	nop			@ (mov r8, r8)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689a      	ldr	r2, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	495a      	ldr	r1, [pc, #360]	@ (80034b8 <HAL_UART_IRQHandler+0x688>)
 800334e:	400a      	ands	r2, r1
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	193b      	adds	r3, r7, r4
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	f383 8810 	msr	PRIMASK, r3
}
 800335e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	228c      	movs	r2, #140	@ 0x8c
 8003364:	2120      	movs	r1, #32
 8003366:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003374:	f3ef 8310 	mrs	r3, PRIMASK
 8003378:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800337a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800337c:	2480      	movs	r4, #128	@ 0x80
 800337e:	193a      	adds	r2, r7, r4
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	2301      	movs	r3, #1
 8003384:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003386:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003388:	f383 8810 	msr	PRIMASK, r3
}
 800338c:	46c0      	nop			@ (mov r8, r8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2110      	movs	r1, #16
 800339a:	438a      	bics	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
 800339e:	193b      	adds	r3, r7, r4
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033a6:	f383 8810 	msr	PRIMASK, r3
}
 80033aa:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033b2:	183b      	adds	r3, r7, r0
 80033b4:	881a      	ldrh	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0011      	movs	r1, r2
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f88e 	bl	80034dc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033c0:	e06f      	b.n	80034a2 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033c2:	23a4      	movs	r3, #164	@ 0xa4
 80033c4:	18fb      	adds	r3, r7, r3
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	2380      	movs	r3, #128	@ 0x80
 80033ca:	035b      	lsls	r3, r3, #13
 80033cc:	4013      	ands	r3, r2
 80033ce:	d010      	beq.n	80033f2 <HAL_UART_IRQHandler+0x5c2>
 80033d0:	239c      	movs	r3, #156	@ 0x9c
 80033d2:	18fb      	adds	r3, r7, r3
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	2380      	movs	r3, #128	@ 0x80
 80033d8:	03db      	lsls	r3, r3, #15
 80033da:	4013      	ands	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2280      	movs	r2, #128	@ 0x80
 80033e4:	0352      	lsls	r2, r2, #13
 80033e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	0018      	movs	r0, r3
 80033ec:	f000 fc77 	bl	8003cde <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033f0:	e05a      	b.n	80034a8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80033f2:	23a4      	movs	r3, #164	@ 0xa4
 80033f4:	18fb      	adds	r3, r7, r3
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2280      	movs	r2, #128	@ 0x80
 80033fa:	4013      	ands	r3, r2
 80033fc:	d016      	beq.n	800342c <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80033fe:	23a0      	movs	r3, #160	@ 0xa0
 8003400:	18fb      	adds	r3, r7, r3
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2280      	movs	r2, #128	@ 0x80
 8003406:	4013      	ands	r3, r2
 8003408:	d106      	bne.n	8003418 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800340a:	239c      	movs	r3, #156	@ 0x9c
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	041b      	lsls	r3, r3, #16
 8003414:	4013      	ands	r3, r2
 8003416:	d009      	beq.n	800342c <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800341c:	2b00      	cmp	r3, #0
 800341e:	d042      	beq.n	80034a6 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	0010      	movs	r0, r2
 8003428:	4798      	blx	r3
    }
    return;
 800342a:	e03c      	b.n	80034a6 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800342c:	23a4      	movs	r3, #164	@ 0xa4
 800342e:	18fb      	adds	r3, r7, r3
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2240      	movs	r2, #64	@ 0x40
 8003434:	4013      	ands	r3, r2
 8003436:	d00a      	beq.n	800344e <HAL_UART_IRQHandler+0x61e>
 8003438:	23a0      	movs	r3, #160	@ 0xa0
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	2240      	movs	r2, #64	@ 0x40
 8003440:	4013      	ands	r3, r2
 8003442:	d004      	beq.n	800344e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	0018      	movs	r0, r3
 8003448:	f000 fc1d 	bl	8003c86 <UART_EndTransmit_IT>
    return;
 800344c:	e02c      	b.n	80034a8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800344e:	23a4      	movs	r3, #164	@ 0xa4
 8003450:	18fb      	adds	r3, r7, r3
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	2380      	movs	r3, #128	@ 0x80
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	4013      	ands	r3, r2
 800345a:	d00b      	beq.n	8003474 <HAL_UART_IRQHandler+0x644>
 800345c:	23a0      	movs	r3, #160	@ 0xa0
 800345e:	18fb      	adds	r3, r7, r3
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	@ 0x80
 8003464:	05db      	lsls	r3, r3, #23
 8003466:	4013      	ands	r3, r2
 8003468:	d004      	beq.n	8003474 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	0018      	movs	r0, r3
 800346e:	f000 fc46 	bl	8003cfe <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003472:	e019      	b.n	80034a8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003474:	23a4      	movs	r3, #164	@ 0xa4
 8003476:	18fb      	adds	r3, r7, r3
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	2380      	movs	r3, #128	@ 0x80
 800347c:	045b      	lsls	r3, r3, #17
 800347e:	4013      	ands	r3, r2
 8003480:	d012      	beq.n	80034a8 <HAL_UART_IRQHandler+0x678>
 8003482:	23a0      	movs	r3, #160	@ 0xa0
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	da0d      	bge.n	80034a8 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	0018      	movs	r0, r3
 8003490:	f000 fc2d 	bl	8003cee <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003494:	e008      	b.n	80034a8 <HAL_UART_IRQHandler+0x678>
      return;
 8003496:	46c0      	nop			@ (mov r8, r8)
 8003498:	e006      	b.n	80034a8 <HAL_UART_IRQHandler+0x678>
    return;
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	e004      	b.n	80034a8 <HAL_UART_IRQHandler+0x678>
      return;
 800349e:	46c0      	nop			@ (mov r8, r8)
 80034a0:	e002      	b.n	80034a8 <HAL_UART_IRQHandler+0x678>
      return;
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	e000      	b.n	80034a8 <HAL_UART_IRQHandler+0x678>
    return;
 80034a6:	46c0      	nop			@ (mov r8, r8)
  }
}
 80034a8:	46bd      	mov	sp, r7
 80034aa:	b02a      	add	sp, #168	@ 0xa8
 80034ac:	bdb0      	pop	{r4, r5, r7, pc}
 80034ae:	46c0      	nop			@ (mov r8, r8)
 80034b0:	fffffeff 	.word	0xfffffeff
 80034b4:	fffffedf 	.word	0xfffffedf
 80034b8:	effffffe 	.word	0xeffffffe

080034bc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034c4:	46c0      	nop			@ (mov r8, r8)
 80034c6:	46bd      	mov	sp, r7
 80034c8:	b002      	add	sp, #8
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034d4:	46c0      	nop			@ (mov r8, r8)
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b002      	add	sp, #8
 80034da:	bd80      	pop	{r7, pc}

080034dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	000a      	movs	r2, r1
 80034e6:	1cbb      	adds	r3, r7, #2
 80034e8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	46bd      	mov	sp, r7
 80034ee:	b002      	add	sp, #8
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b088      	sub	sp, #32
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034fc:	231e      	movs	r3, #30
 80034fe:	18fb      	adds	r3, r7, r3
 8003500:	2200      	movs	r2, #0
 8003502:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4aab      	ldr	r2, [pc, #684]	@ (80037d0 <UART_SetConfig+0x2dc>)
 8003524:	4013      	ands	r3, r2
 8003526:	0019      	movs	r1, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	430a      	orrs	r2, r1
 8003530:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	4aa6      	ldr	r2, [pc, #664]	@ (80037d4 <UART_SetConfig+0x2e0>)
 800353a:	4013      	ands	r3, r2
 800353c:	0019      	movs	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68da      	ldr	r2, [r3, #12]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	4313      	orrs	r3, r2
 8003558:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	4a9d      	ldr	r2, [pc, #628]	@ (80037d8 <UART_SetConfig+0x2e4>)
 8003562:	4013      	ands	r3, r2
 8003564:	0019      	movs	r1, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003576:	220f      	movs	r2, #15
 8003578:	4393      	bics	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a93      	ldr	r2, [pc, #588]	@ (80037dc <UART_SetConfig+0x2e8>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d127      	bne.n	80035e2 <UART_SetConfig+0xee>
 8003592:	4b93      	ldr	r3, [pc, #588]	@ (80037e0 <UART_SetConfig+0x2ec>)
 8003594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003596:	2203      	movs	r2, #3
 8003598:	4013      	ands	r3, r2
 800359a:	2b03      	cmp	r3, #3
 800359c:	d017      	beq.n	80035ce <UART_SetConfig+0xda>
 800359e:	d81b      	bhi.n	80035d8 <UART_SetConfig+0xe4>
 80035a0:	2b02      	cmp	r3, #2
 80035a2:	d00a      	beq.n	80035ba <UART_SetConfig+0xc6>
 80035a4:	d818      	bhi.n	80035d8 <UART_SetConfig+0xe4>
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d002      	beq.n	80035b0 <UART_SetConfig+0xbc>
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d00a      	beq.n	80035c4 <UART_SetConfig+0xd0>
 80035ae:	e013      	b.n	80035d8 <UART_SetConfig+0xe4>
 80035b0:	231f      	movs	r3, #31
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	2200      	movs	r2, #0
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	e021      	b.n	80035fe <UART_SetConfig+0x10a>
 80035ba:	231f      	movs	r3, #31
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2202      	movs	r2, #2
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e01c      	b.n	80035fe <UART_SetConfig+0x10a>
 80035c4:	231f      	movs	r3, #31
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2204      	movs	r2, #4
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e017      	b.n	80035fe <UART_SetConfig+0x10a>
 80035ce:	231f      	movs	r3, #31
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	2208      	movs	r2, #8
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	e012      	b.n	80035fe <UART_SetConfig+0x10a>
 80035d8:	231f      	movs	r3, #31
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2210      	movs	r2, #16
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e00d      	b.n	80035fe <UART_SetConfig+0x10a>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7f      	ldr	r2, [pc, #508]	@ (80037e4 <UART_SetConfig+0x2f0>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d104      	bne.n	80035f6 <UART_SetConfig+0x102>
 80035ec:	231f      	movs	r3, #31
 80035ee:	18fb      	adds	r3, r7, r3
 80035f0:	2200      	movs	r2, #0
 80035f2:	701a      	strb	r2, [r3, #0]
 80035f4:	e003      	b.n	80035fe <UART_SetConfig+0x10a>
 80035f6:	231f      	movs	r3, #31
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	2210      	movs	r2, #16
 80035fc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	2380      	movs	r3, #128	@ 0x80
 8003604:	021b      	lsls	r3, r3, #8
 8003606:	429a      	cmp	r2, r3
 8003608:	d000      	beq.n	800360c <UART_SetConfig+0x118>
 800360a:	e06f      	b.n	80036ec <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 800360c:	231f      	movs	r3, #31
 800360e:	18fb      	adds	r3, r7, r3
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b08      	cmp	r3, #8
 8003614:	d01f      	beq.n	8003656 <UART_SetConfig+0x162>
 8003616:	dc22      	bgt.n	800365e <UART_SetConfig+0x16a>
 8003618:	2b04      	cmp	r3, #4
 800361a:	d017      	beq.n	800364c <UART_SetConfig+0x158>
 800361c:	dc1f      	bgt.n	800365e <UART_SetConfig+0x16a>
 800361e:	2b00      	cmp	r3, #0
 8003620:	d002      	beq.n	8003628 <UART_SetConfig+0x134>
 8003622:	2b02      	cmp	r3, #2
 8003624:	d005      	beq.n	8003632 <UART_SetConfig+0x13e>
 8003626:	e01a      	b.n	800365e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003628:	f7fe fc2a 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 800362c:	0003      	movs	r3, r0
 800362e:	61bb      	str	r3, [r7, #24]
        break;
 8003630:	e01c      	b.n	800366c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003632:	4b6b      	ldr	r3, [pc, #428]	@ (80037e0 <UART_SetConfig+0x2ec>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	095b      	lsrs	r3, r3, #5
 8003638:	2207      	movs	r2, #7
 800363a:	4013      	ands	r3, r2
 800363c:	3301      	adds	r3, #1
 800363e:	0019      	movs	r1, r3
 8003640:	4869      	ldr	r0, [pc, #420]	@ (80037e8 <UART_SetConfig+0x2f4>)
 8003642:	f7fc fd73 	bl	800012c <__udivsi3>
 8003646:	0003      	movs	r3, r0
 8003648:	61bb      	str	r3, [r7, #24]
        break;
 800364a:	e00f      	b.n	800366c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800364c:	f7fe fbaa 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8003650:	0003      	movs	r3, r0
 8003652:	61bb      	str	r3, [r7, #24]
        break;
 8003654:	e00a      	b.n	800366c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003656:	2380      	movs	r3, #128	@ 0x80
 8003658:	021b      	lsls	r3, r3, #8
 800365a:	61bb      	str	r3, [r7, #24]
        break;
 800365c:	e006      	b.n	800366c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003662:	231e      	movs	r3, #30
 8003664:	18fb      	adds	r3, r7, r3
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
        break;
 800366a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d100      	bne.n	8003674 <UART_SetConfig+0x180>
 8003672:	e097      	b.n	80037a4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003678:	4b5c      	ldr	r3, [pc, #368]	@ (80037ec <UART_SetConfig+0x2f8>)
 800367a:	0052      	lsls	r2, r2, #1
 800367c:	5ad3      	ldrh	r3, [r2, r3]
 800367e:	0019      	movs	r1, r3
 8003680:	69b8      	ldr	r0, [r7, #24]
 8003682:	f7fc fd53 	bl	800012c <__udivsi3>
 8003686:	0003      	movs	r3, r0
 8003688:	005a      	lsls	r2, r3, #1
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	18d2      	adds	r2, r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	0019      	movs	r1, r3
 8003698:	0010      	movs	r0, r2
 800369a:	f7fc fd47 	bl	800012c <__udivsi3>
 800369e:	0003      	movs	r3, r0
 80036a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d91c      	bls.n	80036e2 <UART_SetConfig+0x1ee>
 80036a8:	693a      	ldr	r2, [r7, #16]
 80036aa:	2380      	movs	r3, #128	@ 0x80
 80036ac:	025b      	lsls	r3, r3, #9
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d217      	bcs.n	80036e2 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	200e      	movs	r0, #14
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	210f      	movs	r1, #15
 80036bc:	438a      	bics	r2, r1
 80036be:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2207      	movs	r2, #7
 80036c8:	4013      	ands	r3, r2
 80036ca:	b299      	uxth	r1, r3
 80036cc:	183b      	adds	r3, r7, r0
 80036ce:	183a      	adds	r2, r7, r0
 80036d0:	8812      	ldrh	r2, [r2, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	183a      	adds	r2, r7, r0
 80036dc:	8812      	ldrh	r2, [r2, #0]
 80036de:	60da      	str	r2, [r3, #12]
 80036e0:	e060      	b.n	80037a4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80036e2:	231e      	movs	r3, #30
 80036e4:	18fb      	adds	r3, r7, r3
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e05b      	b.n	80037a4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036ec:	231f      	movs	r3, #31
 80036ee:	18fb      	adds	r3, r7, r3
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	2b08      	cmp	r3, #8
 80036f4:	d01f      	beq.n	8003736 <UART_SetConfig+0x242>
 80036f6:	dc22      	bgt.n	800373e <UART_SetConfig+0x24a>
 80036f8:	2b04      	cmp	r3, #4
 80036fa:	d017      	beq.n	800372c <UART_SetConfig+0x238>
 80036fc:	dc1f      	bgt.n	800373e <UART_SetConfig+0x24a>
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d002      	beq.n	8003708 <UART_SetConfig+0x214>
 8003702:	2b02      	cmp	r3, #2
 8003704:	d005      	beq.n	8003712 <UART_SetConfig+0x21e>
 8003706:	e01a      	b.n	800373e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003708:	f7fe fbba 	bl	8001e80 <HAL_RCC_GetPCLK1Freq>
 800370c:	0003      	movs	r3, r0
 800370e:	61bb      	str	r3, [r7, #24]
        break;
 8003710:	e01c      	b.n	800374c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003712:	4b33      	ldr	r3, [pc, #204]	@ (80037e0 <UART_SetConfig+0x2ec>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2207      	movs	r2, #7
 800371a:	4013      	ands	r3, r2
 800371c:	3301      	adds	r3, #1
 800371e:	0019      	movs	r1, r3
 8003720:	4831      	ldr	r0, [pc, #196]	@ (80037e8 <UART_SetConfig+0x2f4>)
 8003722:	f7fc fd03 	bl	800012c <__udivsi3>
 8003726:	0003      	movs	r3, r0
 8003728:	61bb      	str	r3, [r7, #24]
        break;
 800372a:	e00f      	b.n	800374c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800372c:	f7fe fb3a 	bl	8001da4 <HAL_RCC_GetSysClockFreq>
 8003730:	0003      	movs	r3, r0
 8003732:	61bb      	str	r3, [r7, #24]
        break;
 8003734:	e00a      	b.n	800374c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003736:	2380      	movs	r3, #128	@ 0x80
 8003738:	021b      	lsls	r3, r3, #8
 800373a:	61bb      	str	r3, [r7, #24]
        break;
 800373c:	e006      	b.n	800374c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003742:	231e      	movs	r3, #30
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2201      	movs	r2, #1
 8003748:	701a      	strb	r2, [r3, #0]
        break;
 800374a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d028      	beq.n	80037a4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003756:	4b25      	ldr	r3, [pc, #148]	@ (80037ec <UART_SetConfig+0x2f8>)
 8003758:	0052      	lsls	r2, r2, #1
 800375a:	5ad3      	ldrh	r3, [r2, r3]
 800375c:	0019      	movs	r1, r3
 800375e:	69b8      	ldr	r0, [r7, #24]
 8003760:	f7fc fce4 	bl	800012c <__udivsi3>
 8003764:	0003      	movs	r3, r0
 8003766:	001a      	movs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	085b      	lsrs	r3, r3, #1
 800376e:	18d2      	adds	r2, r2, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0019      	movs	r1, r3
 8003776:	0010      	movs	r0, r2
 8003778:	f7fc fcd8 	bl	800012c <__udivsi3>
 800377c:	0003      	movs	r3, r0
 800377e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	2b0f      	cmp	r3, #15
 8003784:	d90a      	bls.n	800379c <UART_SetConfig+0x2a8>
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	2380      	movs	r3, #128	@ 0x80
 800378a:	025b      	lsls	r3, r3, #9
 800378c:	429a      	cmp	r2, r3
 800378e:	d205      	bcs.n	800379c <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	b29a      	uxth	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60da      	str	r2, [r3, #12]
 800379a:	e003      	b.n	80037a4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800379c:	231e      	movs	r3, #30
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	2201      	movs	r2, #1
 80037a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	226a      	movs	r2, #106	@ 0x6a
 80037a8:	2101      	movs	r1, #1
 80037aa:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2268      	movs	r2, #104	@ 0x68
 80037b0:	2101      	movs	r1, #1
 80037b2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80037c0:	231e      	movs	r3, #30
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	781b      	ldrb	r3, [r3, #0]
}
 80037c6:	0018      	movs	r0, r3
 80037c8:	46bd      	mov	sp, r7
 80037ca:	b008      	add	sp, #32
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	cfff69f3 	.word	0xcfff69f3
 80037d4:	ffffcfff 	.word	0xffffcfff
 80037d8:	11fff4ff 	.word	0x11fff4ff
 80037dc:	40013800 	.word	0x40013800
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40004400 	.word	0x40004400
 80037e8:	02dc6c00 	.word	0x02dc6c00
 80037ec:	08005ed0 	.word	0x08005ed0

080037f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037fc:	2208      	movs	r2, #8
 80037fe:	4013      	ands	r3, r2
 8003800:	d00b      	beq.n	800381a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	4a4a      	ldr	r2, [pc, #296]	@ (8003934 <UART_AdvFeatureConfig+0x144>)
 800380a:	4013      	ands	r3, r2
 800380c:	0019      	movs	r1, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	430a      	orrs	r2, r1
 8003818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800381e:	2201      	movs	r2, #1
 8003820:	4013      	ands	r3, r2
 8003822:	d00b      	beq.n	800383c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	4a43      	ldr	r2, [pc, #268]	@ (8003938 <UART_AdvFeatureConfig+0x148>)
 800382c:	4013      	ands	r3, r2
 800382e:	0019      	movs	r1, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	430a      	orrs	r2, r1
 800383a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003840:	2202      	movs	r2, #2
 8003842:	4013      	ands	r3, r2
 8003844:	d00b      	beq.n	800385e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a3b      	ldr	r2, [pc, #236]	@ (800393c <UART_AdvFeatureConfig+0x14c>)
 800384e:	4013      	ands	r3, r2
 8003850:	0019      	movs	r1, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	430a      	orrs	r2, r1
 800385c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003862:	2204      	movs	r2, #4
 8003864:	4013      	ands	r3, r2
 8003866:	d00b      	beq.n	8003880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	4a34      	ldr	r2, [pc, #208]	@ (8003940 <UART_AdvFeatureConfig+0x150>)
 8003870:	4013      	ands	r3, r2
 8003872:	0019      	movs	r1, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003884:	2210      	movs	r2, #16
 8003886:	4013      	ands	r3, r2
 8003888:	d00b      	beq.n	80038a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	4a2c      	ldr	r2, [pc, #176]	@ (8003944 <UART_AdvFeatureConfig+0x154>)
 8003892:	4013      	ands	r3, r2
 8003894:	0019      	movs	r1, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	2220      	movs	r2, #32
 80038a8:	4013      	ands	r3, r2
 80038aa:	d00b      	beq.n	80038c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	4a25      	ldr	r2, [pc, #148]	@ (8003948 <UART_AdvFeatureConfig+0x158>)
 80038b4:	4013      	ands	r3, r2
 80038b6:	0019      	movs	r1, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	430a      	orrs	r2, r1
 80038c2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c8:	2240      	movs	r2, #64	@ 0x40
 80038ca:	4013      	ands	r3, r2
 80038cc:	d01d      	beq.n	800390a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	@ (800394c <UART_AdvFeatureConfig+0x15c>)
 80038d6:	4013      	ands	r3, r2
 80038d8:	0019      	movs	r1, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	430a      	orrs	r2, r1
 80038e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038ea:	2380      	movs	r3, #128	@ 0x80
 80038ec:	035b      	lsls	r3, r3, #13
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d10b      	bne.n	800390a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	4a15      	ldr	r2, [pc, #84]	@ (8003950 <UART_AdvFeatureConfig+0x160>)
 80038fa:	4013      	ands	r3, r2
 80038fc:	0019      	movs	r1, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	4013      	ands	r3, r2
 8003912:	d00b      	beq.n	800392c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	4a0e      	ldr	r2, [pc, #56]	@ (8003954 <UART_AdvFeatureConfig+0x164>)
 800391c:	4013      	ands	r3, r2
 800391e:	0019      	movs	r1, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	430a      	orrs	r2, r1
 800392a:	605a      	str	r2, [r3, #4]
  }
}
 800392c:	46c0      	nop			@ (mov r8, r8)
 800392e:	46bd      	mov	sp, r7
 8003930:	b002      	add	sp, #8
 8003932:	bd80      	pop	{r7, pc}
 8003934:	ffff7fff 	.word	0xffff7fff
 8003938:	fffdffff 	.word	0xfffdffff
 800393c:	fffeffff 	.word	0xfffeffff
 8003940:	fffbffff 	.word	0xfffbffff
 8003944:	ffffefff 	.word	0xffffefff
 8003948:	ffffdfff 	.word	0xffffdfff
 800394c:	ffefffff 	.word	0xffefffff
 8003950:	ff9fffff 	.word	0xff9fffff
 8003954:	fff7ffff 	.word	0xfff7ffff

08003958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b092      	sub	sp, #72	@ 0x48
 800395c:	af02      	add	r7, sp, #8
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2290      	movs	r2, #144	@ 0x90
 8003964:	2100      	movs	r1, #0
 8003966:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003968:	f7fd fb78 	bl	800105c <HAL_GetTick>
 800396c:	0003      	movs	r3, r0
 800396e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2208      	movs	r2, #8
 8003978:	4013      	ands	r3, r2
 800397a:	2b08      	cmp	r3, #8
 800397c:	d12d      	bne.n	80039da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800397e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003980:	2280      	movs	r2, #128	@ 0x80
 8003982:	0391      	lsls	r1, r2, #14
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	4a47      	ldr	r2, [pc, #284]	@ (8003aa4 <UART_CheckIdleState+0x14c>)
 8003988:	9200      	str	r2, [sp, #0]
 800398a:	2200      	movs	r2, #0
 800398c:	f000 f88e 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 8003990:	1e03      	subs	r3, r0, #0
 8003992:	d022      	beq.n	80039da <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003994:	f3ef 8310 	mrs	r3, PRIMASK
 8003998:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800399a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800399c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800399e:	2301      	movs	r3, #1
 80039a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a4:	f383 8810 	msr	PRIMASK, r3
}
 80039a8:	46c0      	nop			@ (mov r8, r8)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	2180      	movs	r1, #128	@ 0x80
 80039b6:	438a      	bics	r2, r1
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c0:	f383 8810 	msr	PRIMASK, r3
}
 80039c4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2288      	movs	r2, #136	@ 0x88
 80039ca:	2120      	movs	r1, #32
 80039cc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2284      	movs	r2, #132	@ 0x84
 80039d2:	2100      	movs	r1, #0
 80039d4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e060      	b.n	8003a9c <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	2204      	movs	r2, #4
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b04      	cmp	r3, #4
 80039e6:	d146      	bne.n	8003a76 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039ea:	2280      	movs	r2, #128	@ 0x80
 80039ec:	03d1      	lsls	r1, r2, #15
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa4 <UART_CheckIdleState+0x14c>)
 80039f2:	9200      	str	r2, [sp, #0]
 80039f4:	2200      	movs	r2, #0
 80039f6:	f000 f859 	bl	8003aac <UART_WaitOnFlagUntilTimeout>
 80039fa:	1e03      	subs	r3, r0, #0
 80039fc:	d03b      	beq.n	8003a76 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a04:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003a06:	637b      	str	r3, [r7, #52]	@ 0x34
 8003a08:	2301      	movs	r3, #1
 8003a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4922      	ldr	r1, [pc, #136]	@ (8003aa8 <UART_CheckIdleState+0x150>)
 8003a20:	400a      	ands	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a26:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a30:	f3ef 8310 	mrs	r3, PRIMASK
 8003a34:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a36:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a38:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	f383 8810 	msr	PRIMASK, r3
}
 8003a44:	46c0      	nop			@ (mov r8, r8)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	2101      	movs	r1, #1
 8003a52:	438a      	bics	r2, r1
 8003a54:	609a      	str	r2, [r3, #8]
 8003a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a58:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	6a3b      	ldr	r3, [r7, #32]
 8003a5c:	f383 8810 	msr	PRIMASK, r3
}
 8003a60:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	228c      	movs	r2, #140	@ 0x8c
 8003a66:	2120      	movs	r1, #32
 8003a68:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2284      	movs	r2, #132	@ 0x84
 8003a6e:	2100      	movs	r1, #0
 8003a70:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a72:	2303      	movs	r3, #3
 8003a74:	e012      	b.n	8003a9c <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2288      	movs	r2, #136	@ 0x88
 8003a7a:	2120      	movs	r1, #32
 8003a7c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	228c      	movs	r2, #140	@ 0x8c
 8003a82:	2120      	movs	r1, #32
 8003a84:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2284      	movs	r2, #132	@ 0x84
 8003a96:	2100      	movs	r1, #0
 8003a98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a9a:	2300      	movs	r3, #0
}
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	b010      	add	sp, #64	@ 0x40
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	01ffffff 	.word	0x01ffffff
 8003aa8:	fffffedf 	.word	0xfffffedf

08003aac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	603b      	str	r3, [r7, #0]
 8003ab8:	1dfb      	adds	r3, r7, #7
 8003aba:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003abc:	e051      	b.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	d04e      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ac4:	f7fd faca 	bl	800105c <HAL_GetTick>
 8003ac8:	0002      	movs	r2, r0
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d302      	bcc.n	8003ada <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d101      	bne.n	8003ade <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e051      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d03b      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	2b80      	cmp	r3, #128	@ 0x80
 8003aee:	d038      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b40      	cmp	r3, #64	@ 0x40
 8003af4:	d035      	beq.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	2208      	movs	r2, #8
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d111      	bne.n	8003b28 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	2208      	movs	r2, #8
 8003b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	0018      	movs	r0, r3
 8003b10:	f000 f83c 	bl	8003b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2290      	movs	r2, #144	@ 0x90
 8003b18:	2108      	movs	r1, #8
 8003b1a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2284      	movs	r2, #132	@ 0x84
 8003b20:	2100      	movs	r1, #0
 8003b22:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e02c      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	69da      	ldr	r2, [r3, #28]
 8003b2e:	2380      	movs	r3, #128	@ 0x80
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	401a      	ands	r2, r3
 8003b34:	2380      	movs	r3, #128	@ 0x80
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d112      	bne.n	8003b62 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2280      	movs	r2, #128	@ 0x80
 8003b42:	0112      	lsls	r2, r2, #4
 8003b44:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	0018      	movs	r0, r3
 8003b4a:	f000 f81f 	bl	8003b8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2290      	movs	r2, #144	@ 0x90
 8003b52:	2120      	movs	r1, #32
 8003b54:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2284      	movs	r2, #132	@ 0x84
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e00f      	b.n	8003b82 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	425a      	negs	r2, r3
 8003b72:	4153      	adcs	r3, r2
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	001a      	movs	r2, r3
 8003b78:	1dfb      	adds	r3, r7, #7
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d09e      	beq.n	8003abe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b004      	add	sp, #16
 8003b88:	bd80      	pop	{r7, pc}
	...

08003b8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b08e      	sub	sp, #56	@ 0x38
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b94:	f3ef 8310 	mrs	r3, PRIMASK
 8003b98:	617b      	str	r3, [r7, #20]
  return(result);
 8003b9a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	f383 8810 	msr	PRIMASK, r3
}
 8003ba8:	46c0      	nop			@ (mov r8, r8)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4926      	ldr	r1, [pc, #152]	@ (8003c50 <UART_EndRxTransfer+0xc4>)
 8003bb6:	400a      	ands	r2, r1
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003bbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	f383 8810 	msr	PRIMASK, r3
}
 8003bc4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003bca:	623b      	str	r3, [r7, #32]
  return(result);
 8003bcc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bce:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bd6:	f383 8810 	msr	PRIMASK, r3
}
 8003bda:	46c0      	nop			@ (mov r8, r8)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	491b      	ldr	r1, [pc, #108]	@ (8003c54 <UART_EndRxTransfer+0xc8>)
 8003be8:	400a      	ands	r2, r1
 8003bea:	609a      	str	r2, [r3, #8]
 8003bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bee:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf2:	f383 8810 	msr	PRIMASK, r3
}
 8003bf6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d118      	bne.n	8003c32 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c00:	f3ef 8310 	mrs	r3, PRIMASK
 8003c04:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c06:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f383 8810 	msr	PRIMASK, r3
}
 8003c14:	46c0      	nop			@ (mov r8, r8)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	681a      	ldr	r2, [r3, #0]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	2110      	movs	r1, #16
 8003c22:	438a      	bics	r2, r1
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c28:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f383 8810 	msr	PRIMASK, r3
}
 8003c30:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	228c      	movs	r2, #140	@ 0x8c
 8003c36:	2120      	movs	r1, #32
 8003c38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	b00e      	add	sp, #56	@ 0x38
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	46c0      	nop			@ (mov r8, r8)
 8003c50:	fffffedf 	.word	0xfffffedf
 8003c54:	effffffe 	.word	0xeffffffe

08003c58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	225e      	movs	r2, #94	@ 0x5e
 8003c6a:	2100      	movs	r1, #0
 8003c6c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2256      	movs	r2, #86	@ 0x56
 8003c72:	2100      	movs	r1, #0
 8003c74:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff fc27 	bl	80034cc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c7e:	46c0      	nop			@ (mov r8, r8)
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b004      	add	sp, #16
 8003c84:	bd80      	pop	{r7, pc}

08003c86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c86:	b580      	push	{r7, lr}
 8003c88:	b086      	sub	sp, #24
 8003c8a:	af00      	add	r7, sp, #0
 8003c8c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c8e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c92:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c94:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	2301      	movs	r3, #1
 8003c9a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			@ (mov r8, r8)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2140      	movs	r1, #64	@ 0x40
 8003cb0:	438a      	bics	r2, r1
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	f383 8810 	msr	PRIMASK, r3
}
 8003cbe:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2288      	movs	r2, #136	@ 0x88
 8003cc4:	2120      	movs	r1, #32
 8003cc6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff fbf3 	bl	80034bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cd6:	46c0      	nop			@ (mov r8, r8)
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	b006      	add	sp, #24
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b082      	sub	sp, #8
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ce6:	46c0      	nop			@ (mov r8, r8)
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	b002      	add	sp, #8
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b082      	sub	sp, #8
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003cf6:	46c0      	nop			@ (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b002      	add	sp, #8
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b082      	sub	sp, #8
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003d06:	46c0      	nop			@ (mov r8, r8)
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b002      	add	sp, #8
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <std>:
 8003d10:	2300      	movs	r3, #0
 8003d12:	b510      	push	{r4, lr}
 8003d14:	0004      	movs	r4, r0
 8003d16:	6003      	str	r3, [r0, #0]
 8003d18:	6043      	str	r3, [r0, #4]
 8003d1a:	6083      	str	r3, [r0, #8]
 8003d1c:	8181      	strh	r1, [r0, #12]
 8003d1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d20:	81c2      	strh	r2, [r0, #14]
 8003d22:	6103      	str	r3, [r0, #16]
 8003d24:	6143      	str	r3, [r0, #20]
 8003d26:	6183      	str	r3, [r0, #24]
 8003d28:	0019      	movs	r1, r3
 8003d2a:	2208      	movs	r2, #8
 8003d2c:	305c      	adds	r0, #92	@ 0x5c
 8003d2e:	f000 fa6d 	bl	800420c <memset>
 8003d32:	4b0b      	ldr	r3, [pc, #44]	@ (8003d60 <std+0x50>)
 8003d34:	6224      	str	r4, [r4, #32]
 8003d36:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d38:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <std+0x54>)
 8003d3a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <std+0x58>)
 8003d3e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d40:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <std+0x5c>)
 8003d42:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d44:	4b0a      	ldr	r3, [pc, #40]	@ (8003d70 <std+0x60>)
 8003d46:	429c      	cmp	r4, r3
 8003d48:	d005      	beq.n	8003d56 <std+0x46>
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d74 <std+0x64>)
 8003d4c:	429c      	cmp	r4, r3
 8003d4e:	d002      	beq.n	8003d56 <std+0x46>
 8003d50:	4b09      	ldr	r3, [pc, #36]	@ (8003d78 <std+0x68>)
 8003d52:	429c      	cmp	r4, r3
 8003d54:	d103      	bne.n	8003d5e <std+0x4e>
 8003d56:	0020      	movs	r0, r4
 8003d58:	3058      	adds	r0, #88	@ 0x58
 8003d5a:	f000 fafb 	bl	8004354 <__retarget_lock_init_recursive>
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	08004031 	.word	0x08004031
 8003d64:	0800405d 	.word	0x0800405d
 8003d68:	08004095 	.word	0x08004095
 8003d6c:	080040c1 	.word	0x080040c1
 8003d70:	20000248 	.word	0x20000248
 8003d74:	200002b0 	.word	0x200002b0
 8003d78:	20000318 	.word	0x20000318

08003d7c <stdio_exit_handler>:
 8003d7c:	b510      	push	{r4, lr}
 8003d7e:	4a03      	ldr	r2, [pc, #12]	@ (8003d8c <stdio_exit_handler+0x10>)
 8003d80:	4903      	ldr	r1, [pc, #12]	@ (8003d90 <stdio_exit_handler+0x14>)
 8003d82:	4804      	ldr	r0, [pc, #16]	@ (8003d94 <stdio_exit_handler+0x18>)
 8003d84:	f000 f86c 	bl	8003e60 <_fwalk_sglue>
 8003d88:	bd10      	pop	{r4, pc}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	2000000c 	.word	0x2000000c
 8003d90:	080054ed 	.word	0x080054ed
 8003d94:	2000001c 	.word	0x2000001c

08003d98 <cleanup_stdio>:
 8003d98:	6841      	ldr	r1, [r0, #4]
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8003dc8 <cleanup_stdio+0x30>)
 8003d9c:	b510      	push	{r4, lr}
 8003d9e:	0004      	movs	r4, r0
 8003da0:	4299      	cmp	r1, r3
 8003da2:	d001      	beq.n	8003da8 <cleanup_stdio+0x10>
 8003da4:	f001 fba2 	bl	80054ec <_fflush_r>
 8003da8:	68a1      	ldr	r1, [r4, #8]
 8003daa:	4b08      	ldr	r3, [pc, #32]	@ (8003dcc <cleanup_stdio+0x34>)
 8003dac:	4299      	cmp	r1, r3
 8003dae:	d002      	beq.n	8003db6 <cleanup_stdio+0x1e>
 8003db0:	0020      	movs	r0, r4
 8003db2:	f001 fb9b 	bl	80054ec <_fflush_r>
 8003db6:	68e1      	ldr	r1, [r4, #12]
 8003db8:	4b05      	ldr	r3, [pc, #20]	@ (8003dd0 <cleanup_stdio+0x38>)
 8003dba:	4299      	cmp	r1, r3
 8003dbc:	d002      	beq.n	8003dc4 <cleanup_stdio+0x2c>
 8003dbe:	0020      	movs	r0, r4
 8003dc0:	f001 fb94 	bl	80054ec <_fflush_r>
 8003dc4:	bd10      	pop	{r4, pc}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	20000248 	.word	0x20000248
 8003dcc:	200002b0 	.word	0x200002b0
 8003dd0:	20000318 	.word	0x20000318

08003dd4 <global_stdio_init.part.0>:
 8003dd4:	b510      	push	{r4, lr}
 8003dd6:	4b09      	ldr	r3, [pc, #36]	@ (8003dfc <global_stdio_init.part.0+0x28>)
 8003dd8:	4a09      	ldr	r2, [pc, #36]	@ (8003e00 <global_stdio_init.part.0+0x2c>)
 8003dda:	2104      	movs	r1, #4
 8003ddc:	601a      	str	r2, [r3, #0]
 8003dde:	4809      	ldr	r0, [pc, #36]	@ (8003e04 <global_stdio_init.part.0+0x30>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	f7ff ff95 	bl	8003d10 <std>
 8003de6:	2201      	movs	r2, #1
 8003de8:	2109      	movs	r1, #9
 8003dea:	4807      	ldr	r0, [pc, #28]	@ (8003e08 <global_stdio_init.part.0+0x34>)
 8003dec:	f7ff ff90 	bl	8003d10 <std>
 8003df0:	2202      	movs	r2, #2
 8003df2:	2112      	movs	r1, #18
 8003df4:	4805      	ldr	r0, [pc, #20]	@ (8003e0c <global_stdio_init.part.0+0x38>)
 8003df6:	f7ff ff8b 	bl	8003d10 <std>
 8003dfa:	bd10      	pop	{r4, pc}
 8003dfc:	20000380 	.word	0x20000380
 8003e00:	08003d7d 	.word	0x08003d7d
 8003e04:	20000248 	.word	0x20000248
 8003e08:	200002b0 	.word	0x200002b0
 8003e0c:	20000318 	.word	0x20000318

08003e10 <__sfp_lock_acquire>:
 8003e10:	b510      	push	{r4, lr}
 8003e12:	4802      	ldr	r0, [pc, #8]	@ (8003e1c <__sfp_lock_acquire+0xc>)
 8003e14:	f000 fa9f 	bl	8004356 <__retarget_lock_acquire_recursive>
 8003e18:	bd10      	pop	{r4, pc}
 8003e1a:	46c0      	nop			@ (mov r8, r8)
 8003e1c:	20000389 	.word	0x20000389

08003e20 <__sfp_lock_release>:
 8003e20:	b510      	push	{r4, lr}
 8003e22:	4802      	ldr	r0, [pc, #8]	@ (8003e2c <__sfp_lock_release+0xc>)
 8003e24:	f000 fa98 	bl	8004358 <__retarget_lock_release_recursive>
 8003e28:	bd10      	pop	{r4, pc}
 8003e2a:	46c0      	nop			@ (mov r8, r8)
 8003e2c:	20000389 	.word	0x20000389

08003e30 <__sinit>:
 8003e30:	b510      	push	{r4, lr}
 8003e32:	0004      	movs	r4, r0
 8003e34:	f7ff ffec 	bl	8003e10 <__sfp_lock_acquire>
 8003e38:	6a23      	ldr	r3, [r4, #32]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <__sinit+0x14>
 8003e3e:	f7ff ffef 	bl	8003e20 <__sfp_lock_release>
 8003e42:	bd10      	pop	{r4, pc}
 8003e44:	4b04      	ldr	r3, [pc, #16]	@ (8003e58 <__sinit+0x28>)
 8003e46:	6223      	str	r3, [r4, #32]
 8003e48:	4b04      	ldr	r3, [pc, #16]	@ (8003e5c <__sinit+0x2c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d1f6      	bne.n	8003e3e <__sinit+0xe>
 8003e50:	f7ff ffc0 	bl	8003dd4 <global_stdio_init.part.0>
 8003e54:	e7f3      	b.n	8003e3e <__sinit+0xe>
 8003e56:	46c0      	nop			@ (mov r8, r8)
 8003e58:	08003d99 	.word	0x08003d99
 8003e5c:	20000380 	.word	0x20000380

08003e60 <_fwalk_sglue>:
 8003e60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e62:	0014      	movs	r4, r2
 8003e64:	2600      	movs	r6, #0
 8003e66:	9000      	str	r0, [sp, #0]
 8003e68:	9101      	str	r1, [sp, #4]
 8003e6a:	68a5      	ldr	r5, [r4, #8]
 8003e6c:	6867      	ldr	r7, [r4, #4]
 8003e6e:	3f01      	subs	r7, #1
 8003e70:	d504      	bpl.n	8003e7c <_fwalk_sglue+0x1c>
 8003e72:	6824      	ldr	r4, [r4, #0]
 8003e74:	2c00      	cmp	r4, #0
 8003e76:	d1f8      	bne.n	8003e6a <_fwalk_sglue+0xa>
 8003e78:	0030      	movs	r0, r6
 8003e7a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e7c:	89ab      	ldrh	r3, [r5, #12]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d908      	bls.n	8003e94 <_fwalk_sglue+0x34>
 8003e82:	220e      	movs	r2, #14
 8003e84:	5eab      	ldrsh	r3, [r5, r2]
 8003e86:	3301      	adds	r3, #1
 8003e88:	d004      	beq.n	8003e94 <_fwalk_sglue+0x34>
 8003e8a:	0029      	movs	r1, r5
 8003e8c:	9800      	ldr	r0, [sp, #0]
 8003e8e:	9b01      	ldr	r3, [sp, #4]
 8003e90:	4798      	blx	r3
 8003e92:	4306      	orrs	r6, r0
 8003e94:	3568      	adds	r5, #104	@ 0x68
 8003e96:	e7ea      	b.n	8003e6e <_fwalk_sglue+0xe>

08003e98 <iprintf>:
 8003e98:	b40f      	push	{r0, r1, r2, r3}
 8003e9a:	b507      	push	{r0, r1, r2, lr}
 8003e9c:	4905      	ldr	r1, [pc, #20]	@ (8003eb4 <iprintf+0x1c>)
 8003e9e:	ab04      	add	r3, sp, #16
 8003ea0:	6808      	ldr	r0, [r1, #0]
 8003ea2:	cb04      	ldmia	r3!, {r2}
 8003ea4:	6881      	ldr	r1, [r0, #8]
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	f000 fea0 	bl	8004bec <_vfiprintf_r>
 8003eac:	b003      	add	sp, #12
 8003eae:	bc08      	pop	{r3}
 8003eb0:	b004      	add	sp, #16
 8003eb2:	4718      	bx	r3
 8003eb4:	20000018 	.word	0x20000018

08003eb8 <_puts_r>:
 8003eb8:	6a03      	ldr	r3, [r0, #32]
 8003eba:	b570      	push	{r4, r5, r6, lr}
 8003ebc:	0005      	movs	r5, r0
 8003ebe:	000e      	movs	r6, r1
 8003ec0:	6884      	ldr	r4, [r0, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <_puts_r+0x12>
 8003ec6:	f7ff ffb3 	bl	8003e30 <__sinit>
 8003eca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ecc:	07db      	lsls	r3, r3, #31
 8003ece:	d405      	bmi.n	8003edc <_puts_r+0x24>
 8003ed0:	89a3      	ldrh	r3, [r4, #12]
 8003ed2:	059b      	lsls	r3, r3, #22
 8003ed4:	d402      	bmi.n	8003edc <_puts_r+0x24>
 8003ed6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ed8:	f000 fa3d 	bl	8004356 <__retarget_lock_acquire_recursive>
 8003edc:	89a3      	ldrh	r3, [r4, #12]
 8003ede:	071b      	lsls	r3, r3, #28
 8003ee0:	d502      	bpl.n	8003ee8 <_puts_r+0x30>
 8003ee2:	6923      	ldr	r3, [r4, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d11f      	bne.n	8003f28 <_puts_r+0x70>
 8003ee8:	0021      	movs	r1, r4
 8003eea:	0028      	movs	r0, r5
 8003eec:	f000 f930 	bl	8004150 <__swsetup_r>
 8003ef0:	2800      	cmp	r0, #0
 8003ef2:	d019      	beq.n	8003f28 <_puts_r+0x70>
 8003ef4:	2501      	movs	r5, #1
 8003ef6:	426d      	negs	r5, r5
 8003ef8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003efa:	07db      	lsls	r3, r3, #31
 8003efc:	d405      	bmi.n	8003f0a <_puts_r+0x52>
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	059b      	lsls	r3, r3, #22
 8003f02:	d402      	bmi.n	8003f0a <_puts_r+0x52>
 8003f04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f06:	f000 fa27 	bl	8004358 <__retarget_lock_release_recursive>
 8003f0a:	0028      	movs	r0, r5
 8003f0c:	bd70      	pop	{r4, r5, r6, pc}
 8003f0e:	3601      	adds	r6, #1
 8003f10:	60a3      	str	r3, [r4, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	da04      	bge.n	8003f20 <_puts_r+0x68>
 8003f16:	69a2      	ldr	r2, [r4, #24]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	dc16      	bgt.n	8003f4a <_puts_r+0x92>
 8003f1c:	290a      	cmp	r1, #10
 8003f1e:	d014      	beq.n	8003f4a <_puts_r+0x92>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	1c5a      	adds	r2, r3, #1
 8003f24:	6022      	str	r2, [r4, #0]
 8003f26:	7019      	strb	r1, [r3, #0]
 8003f28:	68a3      	ldr	r3, [r4, #8]
 8003f2a:	7831      	ldrb	r1, [r6, #0]
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	2900      	cmp	r1, #0
 8003f30:	d1ed      	bne.n	8003f0e <_puts_r+0x56>
 8003f32:	60a3      	str	r3, [r4, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	da0f      	bge.n	8003f58 <_puts_r+0xa0>
 8003f38:	0022      	movs	r2, r4
 8003f3a:	0028      	movs	r0, r5
 8003f3c:	310a      	adds	r1, #10
 8003f3e:	f000 f8c5 	bl	80040cc <__swbuf_r>
 8003f42:	3001      	adds	r0, #1
 8003f44:	d0d6      	beq.n	8003ef4 <_puts_r+0x3c>
 8003f46:	250a      	movs	r5, #10
 8003f48:	e7d6      	b.n	8003ef8 <_puts_r+0x40>
 8003f4a:	0022      	movs	r2, r4
 8003f4c:	0028      	movs	r0, r5
 8003f4e:	f000 f8bd 	bl	80040cc <__swbuf_r>
 8003f52:	3001      	adds	r0, #1
 8003f54:	d1e8      	bne.n	8003f28 <_puts_r+0x70>
 8003f56:	e7cd      	b.n	8003ef4 <_puts_r+0x3c>
 8003f58:	6823      	ldr	r3, [r4, #0]
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	6022      	str	r2, [r4, #0]
 8003f5e:	220a      	movs	r2, #10
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	e7f0      	b.n	8003f46 <_puts_r+0x8e>

08003f64 <puts>:
 8003f64:	b510      	push	{r4, lr}
 8003f66:	4b03      	ldr	r3, [pc, #12]	@ (8003f74 <puts+0x10>)
 8003f68:	0001      	movs	r1, r0
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	f7ff ffa4 	bl	8003eb8 <_puts_r>
 8003f70:	bd10      	pop	{r4, pc}
 8003f72:	46c0      	nop			@ (mov r8, r8)
 8003f74:	20000018 	.word	0x20000018

08003f78 <sniprintf>:
 8003f78:	b40c      	push	{r2, r3}
 8003f7a:	b530      	push	{r4, r5, lr}
 8003f7c:	4b17      	ldr	r3, [pc, #92]	@ (8003fdc <sniprintf+0x64>)
 8003f7e:	000c      	movs	r4, r1
 8003f80:	681d      	ldr	r5, [r3, #0]
 8003f82:	b09d      	sub	sp, #116	@ 0x74
 8003f84:	2900      	cmp	r1, #0
 8003f86:	da08      	bge.n	8003f9a <sniprintf+0x22>
 8003f88:	238b      	movs	r3, #139	@ 0x8b
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	602b      	str	r3, [r5, #0]
 8003f8e:	4240      	negs	r0, r0
 8003f90:	b01d      	add	sp, #116	@ 0x74
 8003f92:	bc30      	pop	{r4, r5}
 8003f94:	bc08      	pop	{r3}
 8003f96:	b002      	add	sp, #8
 8003f98:	4718      	bx	r3
 8003f9a:	2382      	movs	r3, #130	@ 0x82
 8003f9c:	466a      	mov	r2, sp
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	8293      	strh	r3, [r2, #20]
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	9002      	str	r0, [sp, #8]
 8003fa6:	9006      	str	r0, [sp, #24]
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	d000      	beq.n	8003fae <sniprintf+0x36>
 8003fac:	1e4b      	subs	r3, r1, #1
 8003fae:	9304      	str	r3, [sp, #16]
 8003fb0:	9307      	str	r3, [sp, #28]
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	466a      	mov	r2, sp
 8003fb6:	425b      	negs	r3, r3
 8003fb8:	82d3      	strh	r3, [r2, #22]
 8003fba:	0028      	movs	r0, r5
 8003fbc:	ab21      	add	r3, sp, #132	@ 0x84
 8003fbe:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003fc0:	a902      	add	r1, sp, #8
 8003fc2:	9301      	str	r3, [sp, #4]
 8003fc4:	f000 fb2e 	bl	8004624 <_svfiprintf_r>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	da01      	bge.n	8003fd0 <sniprintf+0x58>
 8003fcc:	238b      	movs	r3, #139	@ 0x8b
 8003fce:	602b      	str	r3, [r5, #0]
 8003fd0:	2c00      	cmp	r4, #0
 8003fd2:	d0dd      	beq.n	8003f90 <sniprintf+0x18>
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	9b02      	ldr	r3, [sp, #8]
 8003fd8:	701a      	strb	r2, [r3, #0]
 8003fda:	e7d9      	b.n	8003f90 <sniprintf+0x18>
 8003fdc:	20000018 	.word	0x20000018

08003fe0 <siscanf>:
 8003fe0:	b40e      	push	{r1, r2, r3}
 8003fe2:	b530      	push	{r4, r5, lr}
 8003fe4:	2381      	movs	r3, #129	@ 0x81
 8003fe6:	b09c      	sub	sp, #112	@ 0x70
 8003fe8:	466a      	mov	r2, sp
 8003fea:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	cc20      	ldmia	r4!, {r5}
 8003ff0:	8293      	strh	r3, [r2, #20]
 8003ff2:	9002      	str	r0, [sp, #8]
 8003ff4:	9006      	str	r0, [sp, #24]
 8003ff6:	f7fc f887 	bl	8000108 <strlen>
 8003ffa:	4b0b      	ldr	r3, [pc, #44]	@ (8004028 <siscanf+0x48>)
 8003ffc:	466a      	mov	r2, sp
 8003ffe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004000:	2300      	movs	r3, #0
 8004002:	9003      	str	r0, [sp, #12]
 8004004:	9007      	str	r0, [sp, #28]
 8004006:	4809      	ldr	r0, [pc, #36]	@ (800402c <siscanf+0x4c>)
 8004008:	930f      	str	r3, [sp, #60]	@ 0x3c
 800400a:	9314      	str	r3, [sp, #80]	@ 0x50
 800400c:	3b01      	subs	r3, #1
 800400e:	82d3      	strh	r3, [r2, #22]
 8004010:	a902      	add	r1, sp, #8
 8004012:	0023      	movs	r3, r4
 8004014:	002a      	movs	r2, r5
 8004016:	6800      	ldr	r0, [r0, #0]
 8004018:	9401      	str	r4, [sp, #4]
 800401a:	f000 fc5d 	bl	80048d8 <__ssvfiscanf_r>
 800401e:	b01c      	add	sp, #112	@ 0x70
 8004020:	bc30      	pop	{r4, r5}
 8004022:	bc08      	pop	{r3}
 8004024:	b003      	add	sp, #12
 8004026:	4718      	bx	r3
 8004028:	08004059 	.word	0x08004059
 800402c:	20000018 	.word	0x20000018

08004030 <__sread>:
 8004030:	b570      	push	{r4, r5, r6, lr}
 8004032:	000c      	movs	r4, r1
 8004034:	250e      	movs	r5, #14
 8004036:	5f49      	ldrsh	r1, [r1, r5]
 8004038:	f000 f93a 	bl	80042b0 <_read_r>
 800403c:	2800      	cmp	r0, #0
 800403e:	db03      	blt.n	8004048 <__sread+0x18>
 8004040:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004042:	181b      	adds	r3, r3, r0
 8004044:	6563      	str	r3, [r4, #84]	@ 0x54
 8004046:	bd70      	pop	{r4, r5, r6, pc}
 8004048:	89a3      	ldrh	r3, [r4, #12]
 800404a:	4a02      	ldr	r2, [pc, #8]	@ (8004054 <__sread+0x24>)
 800404c:	4013      	ands	r3, r2
 800404e:	81a3      	strh	r3, [r4, #12]
 8004050:	e7f9      	b.n	8004046 <__sread+0x16>
 8004052:	46c0      	nop			@ (mov r8, r8)
 8004054:	ffffefff 	.word	0xffffefff

08004058 <__seofread>:
 8004058:	2000      	movs	r0, #0
 800405a:	4770      	bx	lr

0800405c <__swrite>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	001f      	movs	r7, r3
 8004060:	898b      	ldrh	r3, [r1, #12]
 8004062:	0005      	movs	r5, r0
 8004064:	000c      	movs	r4, r1
 8004066:	0016      	movs	r6, r2
 8004068:	05db      	lsls	r3, r3, #23
 800406a:	d505      	bpl.n	8004078 <__swrite+0x1c>
 800406c:	230e      	movs	r3, #14
 800406e:	5ec9      	ldrsh	r1, [r1, r3]
 8004070:	2200      	movs	r2, #0
 8004072:	2302      	movs	r3, #2
 8004074:	f000 f908 	bl	8004288 <_lseek_r>
 8004078:	89a3      	ldrh	r3, [r4, #12]
 800407a:	4a05      	ldr	r2, [pc, #20]	@ (8004090 <__swrite+0x34>)
 800407c:	0028      	movs	r0, r5
 800407e:	4013      	ands	r3, r2
 8004080:	81a3      	strh	r3, [r4, #12]
 8004082:	0032      	movs	r2, r6
 8004084:	230e      	movs	r3, #14
 8004086:	5ee1      	ldrsh	r1, [r4, r3]
 8004088:	003b      	movs	r3, r7
 800408a:	f000 f925 	bl	80042d8 <_write_r>
 800408e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004090:	ffffefff 	.word	0xffffefff

08004094 <__sseek>:
 8004094:	b570      	push	{r4, r5, r6, lr}
 8004096:	000c      	movs	r4, r1
 8004098:	250e      	movs	r5, #14
 800409a:	5f49      	ldrsh	r1, [r1, r5]
 800409c:	f000 f8f4 	bl	8004288 <_lseek_r>
 80040a0:	89a3      	ldrh	r3, [r4, #12]
 80040a2:	1c42      	adds	r2, r0, #1
 80040a4:	d103      	bne.n	80040ae <__sseek+0x1a>
 80040a6:	4a05      	ldr	r2, [pc, #20]	@ (80040bc <__sseek+0x28>)
 80040a8:	4013      	ands	r3, r2
 80040aa:	81a3      	strh	r3, [r4, #12]
 80040ac:	bd70      	pop	{r4, r5, r6, pc}
 80040ae:	2280      	movs	r2, #128	@ 0x80
 80040b0:	0152      	lsls	r2, r2, #5
 80040b2:	4313      	orrs	r3, r2
 80040b4:	81a3      	strh	r3, [r4, #12]
 80040b6:	6560      	str	r0, [r4, #84]	@ 0x54
 80040b8:	e7f8      	b.n	80040ac <__sseek+0x18>
 80040ba:	46c0      	nop			@ (mov r8, r8)
 80040bc:	ffffefff 	.word	0xffffefff

080040c0 <__sclose>:
 80040c0:	b510      	push	{r4, lr}
 80040c2:	230e      	movs	r3, #14
 80040c4:	5ec9      	ldrsh	r1, [r1, r3]
 80040c6:	f000 f8cd 	bl	8004264 <_close_r>
 80040ca:	bd10      	pop	{r4, pc}

080040cc <__swbuf_r>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	0006      	movs	r6, r0
 80040d0:	000d      	movs	r5, r1
 80040d2:	0014      	movs	r4, r2
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d004      	beq.n	80040e2 <__swbuf_r+0x16>
 80040d8:	6a03      	ldr	r3, [r0, #32]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <__swbuf_r+0x16>
 80040de:	f7ff fea7 	bl	8003e30 <__sinit>
 80040e2:	69a3      	ldr	r3, [r4, #24]
 80040e4:	60a3      	str	r3, [r4, #8]
 80040e6:	89a3      	ldrh	r3, [r4, #12]
 80040e8:	071b      	lsls	r3, r3, #28
 80040ea:	d502      	bpl.n	80040f2 <__swbuf_r+0x26>
 80040ec:	6923      	ldr	r3, [r4, #16]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <__swbuf_r+0x3a>
 80040f2:	0021      	movs	r1, r4
 80040f4:	0030      	movs	r0, r6
 80040f6:	f000 f82b 	bl	8004150 <__swsetup_r>
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d003      	beq.n	8004106 <__swbuf_r+0x3a>
 80040fe:	2501      	movs	r5, #1
 8004100:	426d      	negs	r5, r5
 8004102:	0028      	movs	r0, r5
 8004104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004106:	6923      	ldr	r3, [r4, #16]
 8004108:	6820      	ldr	r0, [r4, #0]
 800410a:	b2ef      	uxtb	r7, r5
 800410c:	1ac0      	subs	r0, r0, r3
 800410e:	6963      	ldr	r3, [r4, #20]
 8004110:	b2ed      	uxtb	r5, r5
 8004112:	4283      	cmp	r3, r0
 8004114:	dc05      	bgt.n	8004122 <__swbuf_r+0x56>
 8004116:	0021      	movs	r1, r4
 8004118:	0030      	movs	r0, r6
 800411a:	f001 f9e7 	bl	80054ec <_fflush_r>
 800411e:	2800      	cmp	r0, #0
 8004120:	d1ed      	bne.n	80040fe <__swbuf_r+0x32>
 8004122:	68a3      	ldr	r3, [r4, #8]
 8004124:	3001      	adds	r0, #1
 8004126:	3b01      	subs	r3, #1
 8004128:	60a3      	str	r3, [r4, #8]
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	1c5a      	adds	r2, r3, #1
 800412e:	6022      	str	r2, [r4, #0]
 8004130:	701f      	strb	r7, [r3, #0]
 8004132:	6963      	ldr	r3, [r4, #20]
 8004134:	4283      	cmp	r3, r0
 8004136:	d004      	beq.n	8004142 <__swbuf_r+0x76>
 8004138:	89a3      	ldrh	r3, [r4, #12]
 800413a:	07db      	lsls	r3, r3, #31
 800413c:	d5e1      	bpl.n	8004102 <__swbuf_r+0x36>
 800413e:	2d0a      	cmp	r5, #10
 8004140:	d1df      	bne.n	8004102 <__swbuf_r+0x36>
 8004142:	0021      	movs	r1, r4
 8004144:	0030      	movs	r0, r6
 8004146:	f001 f9d1 	bl	80054ec <_fflush_r>
 800414a:	2800      	cmp	r0, #0
 800414c:	d0d9      	beq.n	8004102 <__swbuf_r+0x36>
 800414e:	e7d6      	b.n	80040fe <__swbuf_r+0x32>

08004150 <__swsetup_r>:
 8004150:	4b2d      	ldr	r3, [pc, #180]	@ (8004208 <__swsetup_r+0xb8>)
 8004152:	b570      	push	{r4, r5, r6, lr}
 8004154:	0005      	movs	r5, r0
 8004156:	6818      	ldr	r0, [r3, #0]
 8004158:	000c      	movs	r4, r1
 800415a:	2800      	cmp	r0, #0
 800415c:	d004      	beq.n	8004168 <__swsetup_r+0x18>
 800415e:	6a03      	ldr	r3, [r0, #32]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d101      	bne.n	8004168 <__swsetup_r+0x18>
 8004164:	f7ff fe64 	bl	8003e30 <__sinit>
 8004168:	230c      	movs	r3, #12
 800416a:	5ee2      	ldrsh	r2, [r4, r3]
 800416c:	0713      	lsls	r3, r2, #28
 800416e:	d423      	bmi.n	80041b8 <__swsetup_r+0x68>
 8004170:	06d3      	lsls	r3, r2, #27
 8004172:	d407      	bmi.n	8004184 <__swsetup_r+0x34>
 8004174:	2309      	movs	r3, #9
 8004176:	602b      	str	r3, [r5, #0]
 8004178:	2340      	movs	r3, #64	@ 0x40
 800417a:	2001      	movs	r0, #1
 800417c:	4313      	orrs	r3, r2
 800417e:	81a3      	strh	r3, [r4, #12]
 8004180:	4240      	negs	r0, r0
 8004182:	e03a      	b.n	80041fa <__swsetup_r+0xaa>
 8004184:	0752      	lsls	r2, r2, #29
 8004186:	d513      	bpl.n	80041b0 <__swsetup_r+0x60>
 8004188:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800418a:	2900      	cmp	r1, #0
 800418c:	d008      	beq.n	80041a0 <__swsetup_r+0x50>
 800418e:	0023      	movs	r3, r4
 8004190:	3344      	adds	r3, #68	@ 0x44
 8004192:	4299      	cmp	r1, r3
 8004194:	d002      	beq.n	800419c <__swsetup_r+0x4c>
 8004196:	0028      	movs	r0, r5
 8004198:	f000 f8e8 	bl	800436c <_free_r>
 800419c:	2300      	movs	r3, #0
 800419e:	6363      	str	r3, [r4, #52]	@ 0x34
 80041a0:	2224      	movs	r2, #36	@ 0x24
 80041a2:	89a3      	ldrh	r3, [r4, #12]
 80041a4:	4393      	bics	r3, r2
 80041a6:	81a3      	strh	r3, [r4, #12]
 80041a8:	2300      	movs	r3, #0
 80041aa:	6063      	str	r3, [r4, #4]
 80041ac:	6923      	ldr	r3, [r4, #16]
 80041ae:	6023      	str	r3, [r4, #0]
 80041b0:	2308      	movs	r3, #8
 80041b2:	89a2      	ldrh	r2, [r4, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	81a3      	strh	r3, [r4, #12]
 80041b8:	6923      	ldr	r3, [r4, #16]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10b      	bne.n	80041d6 <__swsetup_r+0x86>
 80041be:	21a0      	movs	r1, #160	@ 0xa0
 80041c0:	2280      	movs	r2, #128	@ 0x80
 80041c2:	89a3      	ldrh	r3, [r4, #12]
 80041c4:	0089      	lsls	r1, r1, #2
 80041c6:	0092      	lsls	r2, r2, #2
 80041c8:	400b      	ands	r3, r1
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d003      	beq.n	80041d6 <__swsetup_r+0x86>
 80041ce:	0021      	movs	r1, r4
 80041d0:	0028      	movs	r0, r5
 80041d2:	f001 f9e1 	bl	8005598 <__smakebuf_r>
 80041d6:	230c      	movs	r3, #12
 80041d8:	5ee2      	ldrsh	r2, [r4, r3]
 80041da:	2101      	movs	r1, #1
 80041dc:	0013      	movs	r3, r2
 80041de:	400b      	ands	r3, r1
 80041e0:	420a      	tst	r2, r1
 80041e2:	d00b      	beq.n	80041fc <__swsetup_r+0xac>
 80041e4:	2300      	movs	r3, #0
 80041e6:	60a3      	str	r3, [r4, #8]
 80041e8:	6963      	ldr	r3, [r4, #20]
 80041ea:	425b      	negs	r3, r3
 80041ec:	61a3      	str	r3, [r4, #24]
 80041ee:	2000      	movs	r0, #0
 80041f0:	6923      	ldr	r3, [r4, #16]
 80041f2:	4283      	cmp	r3, r0
 80041f4:	d101      	bne.n	80041fa <__swsetup_r+0xaa>
 80041f6:	0613      	lsls	r3, r2, #24
 80041f8:	d4be      	bmi.n	8004178 <__swsetup_r+0x28>
 80041fa:	bd70      	pop	{r4, r5, r6, pc}
 80041fc:	0791      	lsls	r1, r2, #30
 80041fe:	d400      	bmi.n	8004202 <__swsetup_r+0xb2>
 8004200:	6963      	ldr	r3, [r4, #20]
 8004202:	60a3      	str	r3, [r4, #8]
 8004204:	e7f3      	b.n	80041ee <__swsetup_r+0x9e>
 8004206:	46c0      	nop			@ (mov r8, r8)
 8004208:	20000018 	.word	0x20000018

0800420c <memset>:
 800420c:	0003      	movs	r3, r0
 800420e:	1882      	adds	r2, r0, r2
 8004210:	4293      	cmp	r3, r2
 8004212:	d100      	bne.n	8004216 <memset+0xa>
 8004214:	4770      	bx	lr
 8004216:	7019      	strb	r1, [r3, #0]
 8004218:	3301      	adds	r3, #1
 800421a:	e7f9      	b.n	8004210 <memset+0x4>

0800421c <strchr>:
 800421c:	b2c9      	uxtb	r1, r1
 800421e:	7803      	ldrb	r3, [r0, #0]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d004      	beq.n	800422e <strchr+0x12>
 8004224:	428b      	cmp	r3, r1
 8004226:	d100      	bne.n	800422a <strchr+0xe>
 8004228:	4770      	bx	lr
 800422a:	3001      	adds	r0, #1
 800422c:	e7f7      	b.n	800421e <strchr+0x2>
 800422e:	424b      	negs	r3, r1
 8004230:	4159      	adcs	r1, r3
 8004232:	4249      	negs	r1, r1
 8004234:	4008      	ands	r0, r1
 8004236:	e7f7      	b.n	8004228 <strchr+0xc>

08004238 <strstr>:
 8004238:	780a      	ldrb	r2, [r1, #0]
 800423a:	b530      	push	{r4, r5, lr}
 800423c:	2a00      	cmp	r2, #0
 800423e:	d10c      	bne.n	800425a <strstr+0x22>
 8004240:	bd30      	pop	{r4, r5, pc}
 8004242:	429a      	cmp	r2, r3
 8004244:	d108      	bne.n	8004258 <strstr+0x20>
 8004246:	2301      	movs	r3, #1
 8004248:	5ccc      	ldrb	r4, [r1, r3]
 800424a:	2c00      	cmp	r4, #0
 800424c:	d0f8      	beq.n	8004240 <strstr+0x8>
 800424e:	5cc5      	ldrb	r5, [r0, r3]
 8004250:	42a5      	cmp	r5, r4
 8004252:	d101      	bne.n	8004258 <strstr+0x20>
 8004254:	3301      	adds	r3, #1
 8004256:	e7f7      	b.n	8004248 <strstr+0x10>
 8004258:	3001      	adds	r0, #1
 800425a:	7803      	ldrb	r3, [r0, #0]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1f0      	bne.n	8004242 <strstr+0xa>
 8004260:	0018      	movs	r0, r3
 8004262:	e7ed      	b.n	8004240 <strstr+0x8>

08004264 <_close_r>:
 8004264:	2300      	movs	r3, #0
 8004266:	b570      	push	{r4, r5, r6, lr}
 8004268:	4d06      	ldr	r5, [pc, #24]	@ (8004284 <_close_r+0x20>)
 800426a:	0004      	movs	r4, r0
 800426c:	0008      	movs	r0, r1
 800426e:	602b      	str	r3, [r5, #0]
 8004270:	f7fc fde9 	bl	8000e46 <_close>
 8004274:	1c43      	adds	r3, r0, #1
 8004276:	d103      	bne.n	8004280 <_close_r+0x1c>
 8004278:	682b      	ldr	r3, [r5, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d000      	beq.n	8004280 <_close_r+0x1c>
 800427e:	6023      	str	r3, [r4, #0]
 8004280:	bd70      	pop	{r4, r5, r6, pc}
 8004282:	46c0      	nop			@ (mov r8, r8)
 8004284:	20000384 	.word	0x20000384

08004288 <_lseek_r>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	0004      	movs	r4, r0
 800428c:	0008      	movs	r0, r1
 800428e:	0011      	movs	r1, r2
 8004290:	001a      	movs	r2, r3
 8004292:	2300      	movs	r3, #0
 8004294:	4d05      	ldr	r5, [pc, #20]	@ (80042ac <_lseek_r+0x24>)
 8004296:	602b      	str	r3, [r5, #0]
 8004298:	f7fc fdf6 	bl	8000e88 <_lseek>
 800429c:	1c43      	adds	r3, r0, #1
 800429e:	d103      	bne.n	80042a8 <_lseek_r+0x20>
 80042a0:	682b      	ldr	r3, [r5, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d000      	beq.n	80042a8 <_lseek_r+0x20>
 80042a6:	6023      	str	r3, [r4, #0]
 80042a8:	bd70      	pop	{r4, r5, r6, pc}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	20000384 	.word	0x20000384

080042b0 <_read_r>:
 80042b0:	b570      	push	{r4, r5, r6, lr}
 80042b2:	0004      	movs	r4, r0
 80042b4:	0008      	movs	r0, r1
 80042b6:	0011      	movs	r1, r2
 80042b8:	001a      	movs	r2, r3
 80042ba:	2300      	movs	r3, #0
 80042bc:	4d05      	ldr	r5, [pc, #20]	@ (80042d4 <_read_r+0x24>)
 80042be:	602b      	str	r3, [r5, #0]
 80042c0:	f7fc fd88 	bl	8000dd4 <_read>
 80042c4:	1c43      	adds	r3, r0, #1
 80042c6:	d103      	bne.n	80042d0 <_read_r+0x20>
 80042c8:	682b      	ldr	r3, [r5, #0]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d000      	beq.n	80042d0 <_read_r+0x20>
 80042ce:	6023      	str	r3, [r4, #0]
 80042d0:	bd70      	pop	{r4, r5, r6, pc}
 80042d2:	46c0      	nop			@ (mov r8, r8)
 80042d4:	20000384 	.word	0x20000384

080042d8 <_write_r>:
 80042d8:	b570      	push	{r4, r5, r6, lr}
 80042da:	0004      	movs	r4, r0
 80042dc:	0008      	movs	r0, r1
 80042de:	0011      	movs	r1, r2
 80042e0:	001a      	movs	r2, r3
 80042e2:	2300      	movs	r3, #0
 80042e4:	4d05      	ldr	r5, [pc, #20]	@ (80042fc <_write_r+0x24>)
 80042e6:	602b      	str	r3, [r5, #0]
 80042e8:	f7fc fd91 	bl	8000e0e <_write>
 80042ec:	1c43      	adds	r3, r0, #1
 80042ee:	d103      	bne.n	80042f8 <_write_r+0x20>
 80042f0:	682b      	ldr	r3, [r5, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d000      	beq.n	80042f8 <_write_r+0x20>
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	bd70      	pop	{r4, r5, r6, pc}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	20000384 	.word	0x20000384

08004300 <__errno>:
 8004300:	4b01      	ldr	r3, [pc, #4]	@ (8004308 <__errno+0x8>)
 8004302:	6818      	ldr	r0, [r3, #0]
 8004304:	4770      	bx	lr
 8004306:	46c0      	nop			@ (mov r8, r8)
 8004308:	20000018 	.word	0x20000018

0800430c <__libc_init_array>:
 800430c:	b570      	push	{r4, r5, r6, lr}
 800430e:	2600      	movs	r6, #0
 8004310:	4c0c      	ldr	r4, [pc, #48]	@ (8004344 <__libc_init_array+0x38>)
 8004312:	4d0d      	ldr	r5, [pc, #52]	@ (8004348 <__libc_init_array+0x3c>)
 8004314:	1b64      	subs	r4, r4, r5
 8004316:	10a4      	asrs	r4, r4, #2
 8004318:	42a6      	cmp	r6, r4
 800431a:	d109      	bne.n	8004330 <__libc_init_array+0x24>
 800431c:	2600      	movs	r6, #0
 800431e:	f001 fb93 	bl	8005a48 <_init>
 8004322:	4c0a      	ldr	r4, [pc, #40]	@ (800434c <__libc_init_array+0x40>)
 8004324:	4d0a      	ldr	r5, [pc, #40]	@ (8004350 <__libc_init_array+0x44>)
 8004326:	1b64      	subs	r4, r4, r5
 8004328:	10a4      	asrs	r4, r4, #2
 800432a:	42a6      	cmp	r6, r4
 800432c:	d105      	bne.n	800433a <__libc_init_array+0x2e>
 800432e:	bd70      	pop	{r4, r5, r6, pc}
 8004330:	00b3      	lsls	r3, r6, #2
 8004332:	58eb      	ldr	r3, [r5, r3]
 8004334:	4798      	blx	r3
 8004336:	3601      	adds	r6, #1
 8004338:	e7ee      	b.n	8004318 <__libc_init_array+0xc>
 800433a:	00b3      	lsls	r3, r6, #2
 800433c:	58eb      	ldr	r3, [r5, r3]
 800433e:	4798      	blx	r3
 8004340:	3601      	adds	r6, #1
 8004342:	e7f2      	b.n	800432a <__libc_init_array+0x1e>
 8004344:	08006038 	.word	0x08006038
 8004348:	08006038 	.word	0x08006038
 800434c:	0800603c 	.word	0x0800603c
 8004350:	08006038 	.word	0x08006038

08004354 <__retarget_lock_init_recursive>:
 8004354:	4770      	bx	lr

08004356 <__retarget_lock_acquire_recursive>:
 8004356:	4770      	bx	lr

08004358 <__retarget_lock_release_recursive>:
 8004358:	4770      	bx	lr

0800435a <memcpy>:
 800435a:	2300      	movs	r3, #0
 800435c:	b510      	push	{r4, lr}
 800435e:	429a      	cmp	r2, r3
 8004360:	d100      	bne.n	8004364 <memcpy+0xa>
 8004362:	bd10      	pop	{r4, pc}
 8004364:	5ccc      	ldrb	r4, [r1, r3]
 8004366:	54c4      	strb	r4, [r0, r3]
 8004368:	3301      	adds	r3, #1
 800436a:	e7f8      	b.n	800435e <memcpy+0x4>

0800436c <_free_r>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	0005      	movs	r5, r0
 8004370:	1e0c      	subs	r4, r1, #0
 8004372:	d010      	beq.n	8004396 <_free_r+0x2a>
 8004374:	3c04      	subs	r4, #4
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	da00      	bge.n	800437e <_free_r+0x12>
 800437c:	18e4      	adds	r4, r4, r3
 800437e:	0028      	movs	r0, r5
 8004380:	f000 f8e0 	bl	8004544 <__malloc_lock>
 8004384:	4a1d      	ldr	r2, [pc, #116]	@ (80043fc <_free_r+0x90>)
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <_free_r+0x2c>
 800438c:	6063      	str	r3, [r4, #4]
 800438e:	6014      	str	r4, [r2, #0]
 8004390:	0028      	movs	r0, r5
 8004392:	f000 f8df 	bl	8004554 <__malloc_unlock>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	42a3      	cmp	r3, r4
 800439a:	d908      	bls.n	80043ae <_free_r+0x42>
 800439c:	6820      	ldr	r0, [r4, #0]
 800439e:	1821      	adds	r1, r4, r0
 80043a0:	428b      	cmp	r3, r1
 80043a2:	d1f3      	bne.n	800438c <_free_r+0x20>
 80043a4:	6819      	ldr	r1, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	1809      	adds	r1, r1, r0
 80043aa:	6021      	str	r1, [r4, #0]
 80043ac:	e7ee      	b.n	800438c <_free_r+0x20>
 80043ae:	001a      	movs	r2, r3
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <_free_r+0x4e>
 80043b6:	42a3      	cmp	r3, r4
 80043b8:	d9f9      	bls.n	80043ae <_free_r+0x42>
 80043ba:	6811      	ldr	r1, [r2, #0]
 80043bc:	1850      	adds	r0, r2, r1
 80043be:	42a0      	cmp	r0, r4
 80043c0:	d10b      	bne.n	80043da <_free_r+0x6e>
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	1809      	adds	r1, r1, r0
 80043c6:	1850      	adds	r0, r2, r1
 80043c8:	6011      	str	r1, [r2, #0]
 80043ca:	4283      	cmp	r3, r0
 80043cc:	d1e0      	bne.n	8004390 <_free_r+0x24>
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	685b      	ldr	r3, [r3, #4]
 80043d2:	1841      	adds	r1, r0, r1
 80043d4:	6011      	str	r1, [r2, #0]
 80043d6:	6053      	str	r3, [r2, #4]
 80043d8:	e7da      	b.n	8004390 <_free_r+0x24>
 80043da:	42a0      	cmp	r0, r4
 80043dc:	d902      	bls.n	80043e4 <_free_r+0x78>
 80043de:	230c      	movs	r3, #12
 80043e0:	602b      	str	r3, [r5, #0]
 80043e2:	e7d5      	b.n	8004390 <_free_r+0x24>
 80043e4:	6820      	ldr	r0, [r4, #0]
 80043e6:	1821      	adds	r1, r4, r0
 80043e8:	428b      	cmp	r3, r1
 80043ea:	d103      	bne.n	80043f4 <_free_r+0x88>
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	1809      	adds	r1, r1, r0
 80043f2:	6021      	str	r1, [r4, #0]
 80043f4:	6063      	str	r3, [r4, #4]
 80043f6:	6054      	str	r4, [r2, #4]
 80043f8:	e7ca      	b.n	8004390 <_free_r+0x24>
 80043fa:	46c0      	nop			@ (mov r8, r8)
 80043fc:	20000390 	.word	0x20000390

08004400 <sbrk_aligned>:
 8004400:	b570      	push	{r4, r5, r6, lr}
 8004402:	4e0f      	ldr	r6, [pc, #60]	@ (8004440 <sbrk_aligned+0x40>)
 8004404:	000d      	movs	r5, r1
 8004406:	6831      	ldr	r1, [r6, #0]
 8004408:	0004      	movs	r4, r0
 800440a:	2900      	cmp	r1, #0
 800440c:	d102      	bne.n	8004414 <sbrk_aligned+0x14>
 800440e:	f001 f9b3 	bl	8005778 <_sbrk_r>
 8004412:	6030      	str	r0, [r6, #0]
 8004414:	0029      	movs	r1, r5
 8004416:	0020      	movs	r0, r4
 8004418:	f001 f9ae 	bl	8005778 <_sbrk_r>
 800441c:	1c43      	adds	r3, r0, #1
 800441e:	d103      	bne.n	8004428 <sbrk_aligned+0x28>
 8004420:	2501      	movs	r5, #1
 8004422:	426d      	negs	r5, r5
 8004424:	0028      	movs	r0, r5
 8004426:	bd70      	pop	{r4, r5, r6, pc}
 8004428:	2303      	movs	r3, #3
 800442a:	1cc5      	adds	r5, r0, #3
 800442c:	439d      	bics	r5, r3
 800442e:	42a8      	cmp	r0, r5
 8004430:	d0f8      	beq.n	8004424 <sbrk_aligned+0x24>
 8004432:	1a29      	subs	r1, r5, r0
 8004434:	0020      	movs	r0, r4
 8004436:	f001 f99f 	bl	8005778 <_sbrk_r>
 800443a:	3001      	adds	r0, #1
 800443c:	d1f2      	bne.n	8004424 <sbrk_aligned+0x24>
 800443e:	e7ef      	b.n	8004420 <sbrk_aligned+0x20>
 8004440:	2000038c 	.word	0x2000038c

08004444 <_malloc_r>:
 8004444:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004446:	2203      	movs	r2, #3
 8004448:	1ccb      	adds	r3, r1, #3
 800444a:	4393      	bics	r3, r2
 800444c:	3308      	adds	r3, #8
 800444e:	0005      	movs	r5, r0
 8004450:	001f      	movs	r7, r3
 8004452:	2b0c      	cmp	r3, #12
 8004454:	d234      	bcs.n	80044c0 <_malloc_r+0x7c>
 8004456:	270c      	movs	r7, #12
 8004458:	42b9      	cmp	r1, r7
 800445a:	d833      	bhi.n	80044c4 <_malloc_r+0x80>
 800445c:	0028      	movs	r0, r5
 800445e:	f000 f871 	bl	8004544 <__malloc_lock>
 8004462:	4e37      	ldr	r6, [pc, #220]	@ (8004540 <_malloc_r+0xfc>)
 8004464:	6833      	ldr	r3, [r6, #0]
 8004466:	001c      	movs	r4, r3
 8004468:	2c00      	cmp	r4, #0
 800446a:	d12f      	bne.n	80044cc <_malloc_r+0x88>
 800446c:	0039      	movs	r1, r7
 800446e:	0028      	movs	r0, r5
 8004470:	f7ff ffc6 	bl	8004400 <sbrk_aligned>
 8004474:	0004      	movs	r4, r0
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	d15f      	bne.n	800453a <_malloc_r+0xf6>
 800447a:	6834      	ldr	r4, [r6, #0]
 800447c:	9400      	str	r4, [sp, #0]
 800447e:	9b00      	ldr	r3, [sp, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d14a      	bne.n	800451a <_malloc_r+0xd6>
 8004484:	2c00      	cmp	r4, #0
 8004486:	d052      	beq.n	800452e <_malloc_r+0xea>
 8004488:	6823      	ldr	r3, [r4, #0]
 800448a:	0028      	movs	r0, r5
 800448c:	18e3      	adds	r3, r4, r3
 800448e:	9900      	ldr	r1, [sp, #0]
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	f001 f971 	bl	8005778 <_sbrk_r>
 8004496:	9b01      	ldr	r3, [sp, #4]
 8004498:	4283      	cmp	r3, r0
 800449a:	d148      	bne.n	800452e <_malloc_r+0xea>
 800449c:	6823      	ldr	r3, [r4, #0]
 800449e:	0028      	movs	r0, r5
 80044a0:	1aff      	subs	r7, r7, r3
 80044a2:	0039      	movs	r1, r7
 80044a4:	f7ff ffac 	bl	8004400 <sbrk_aligned>
 80044a8:	3001      	adds	r0, #1
 80044aa:	d040      	beq.n	800452e <_malloc_r+0xea>
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	19db      	adds	r3, r3, r7
 80044b0:	6023      	str	r3, [r4, #0]
 80044b2:	6833      	ldr	r3, [r6, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	2a00      	cmp	r2, #0
 80044b8:	d133      	bne.n	8004522 <_malloc_r+0xde>
 80044ba:	9b00      	ldr	r3, [sp, #0]
 80044bc:	6033      	str	r3, [r6, #0]
 80044be:	e019      	b.n	80044f4 <_malloc_r+0xb0>
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	dac9      	bge.n	8004458 <_malloc_r+0x14>
 80044c4:	230c      	movs	r3, #12
 80044c6:	602b      	str	r3, [r5, #0]
 80044c8:	2000      	movs	r0, #0
 80044ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80044cc:	6821      	ldr	r1, [r4, #0]
 80044ce:	1bc9      	subs	r1, r1, r7
 80044d0:	d420      	bmi.n	8004514 <_malloc_r+0xd0>
 80044d2:	290b      	cmp	r1, #11
 80044d4:	d90a      	bls.n	80044ec <_malloc_r+0xa8>
 80044d6:	19e2      	adds	r2, r4, r7
 80044d8:	6027      	str	r7, [r4, #0]
 80044da:	42a3      	cmp	r3, r4
 80044dc:	d104      	bne.n	80044e8 <_malloc_r+0xa4>
 80044de:	6032      	str	r2, [r6, #0]
 80044e0:	6863      	ldr	r3, [r4, #4]
 80044e2:	6011      	str	r1, [r2, #0]
 80044e4:	6053      	str	r3, [r2, #4]
 80044e6:	e005      	b.n	80044f4 <_malloc_r+0xb0>
 80044e8:	605a      	str	r2, [r3, #4]
 80044ea:	e7f9      	b.n	80044e0 <_malloc_r+0x9c>
 80044ec:	6862      	ldr	r2, [r4, #4]
 80044ee:	42a3      	cmp	r3, r4
 80044f0:	d10e      	bne.n	8004510 <_malloc_r+0xcc>
 80044f2:	6032      	str	r2, [r6, #0]
 80044f4:	0028      	movs	r0, r5
 80044f6:	f000 f82d 	bl	8004554 <__malloc_unlock>
 80044fa:	0020      	movs	r0, r4
 80044fc:	2207      	movs	r2, #7
 80044fe:	300b      	adds	r0, #11
 8004500:	1d23      	adds	r3, r4, #4
 8004502:	4390      	bics	r0, r2
 8004504:	1ac2      	subs	r2, r0, r3
 8004506:	4298      	cmp	r0, r3
 8004508:	d0df      	beq.n	80044ca <_malloc_r+0x86>
 800450a:	1a1b      	subs	r3, r3, r0
 800450c:	50a3      	str	r3, [r4, r2]
 800450e:	e7dc      	b.n	80044ca <_malloc_r+0x86>
 8004510:	605a      	str	r2, [r3, #4]
 8004512:	e7ef      	b.n	80044f4 <_malloc_r+0xb0>
 8004514:	0023      	movs	r3, r4
 8004516:	6864      	ldr	r4, [r4, #4]
 8004518:	e7a6      	b.n	8004468 <_malloc_r+0x24>
 800451a:	9c00      	ldr	r4, [sp, #0]
 800451c:	6863      	ldr	r3, [r4, #4]
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	e7ad      	b.n	800447e <_malloc_r+0x3a>
 8004522:	001a      	movs	r2, r3
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	42a3      	cmp	r3, r4
 8004528:	d1fb      	bne.n	8004522 <_malloc_r+0xde>
 800452a:	2300      	movs	r3, #0
 800452c:	e7da      	b.n	80044e4 <_malloc_r+0xa0>
 800452e:	230c      	movs	r3, #12
 8004530:	0028      	movs	r0, r5
 8004532:	602b      	str	r3, [r5, #0]
 8004534:	f000 f80e 	bl	8004554 <__malloc_unlock>
 8004538:	e7c6      	b.n	80044c8 <_malloc_r+0x84>
 800453a:	6007      	str	r7, [r0, #0]
 800453c:	e7da      	b.n	80044f4 <_malloc_r+0xb0>
 800453e:	46c0      	nop			@ (mov r8, r8)
 8004540:	20000390 	.word	0x20000390

08004544 <__malloc_lock>:
 8004544:	b510      	push	{r4, lr}
 8004546:	4802      	ldr	r0, [pc, #8]	@ (8004550 <__malloc_lock+0xc>)
 8004548:	f7ff ff05 	bl	8004356 <__retarget_lock_acquire_recursive>
 800454c:	bd10      	pop	{r4, pc}
 800454e:	46c0      	nop			@ (mov r8, r8)
 8004550:	20000388 	.word	0x20000388

08004554 <__malloc_unlock>:
 8004554:	b510      	push	{r4, lr}
 8004556:	4802      	ldr	r0, [pc, #8]	@ (8004560 <__malloc_unlock+0xc>)
 8004558:	f7ff fefe 	bl	8004358 <__retarget_lock_release_recursive>
 800455c:	bd10      	pop	{r4, pc}
 800455e:	46c0      	nop			@ (mov r8, r8)
 8004560:	20000388 	.word	0x20000388

08004564 <__ssputs_r>:
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004566:	688e      	ldr	r6, [r1, #8]
 8004568:	b085      	sub	sp, #20
 800456a:	001f      	movs	r7, r3
 800456c:	000c      	movs	r4, r1
 800456e:	680b      	ldr	r3, [r1, #0]
 8004570:	9002      	str	r0, [sp, #8]
 8004572:	9203      	str	r2, [sp, #12]
 8004574:	42be      	cmp	r6, r7
 8004576:	d830      	bhi.n	80045da <__ssputs_r+0x76>
 8004578:	210c      	movs	r1, #12
 800457a:	5e62      	ldrsh	r2, [r4, r1]
 800457c:	2190      	movs	r1, #144	@ 0x90
 800457e:	00c9      	lsls	r1, r1, #3
 8004580:	420a      	tst	r2, r1
 8004582:	d028      	beq.n	80045d6 <__ssputs_r+0x72>
 8004584:	2003      	movs	r0, #3
 8004586:	6921      	ldr	r1, [r4, #16]
 8004588:	1a5b      	subs	r3, r3, r1
 800458a:	9301      	str	r3, [sp, #4]
 800458c:	6963      	ldr	r3, [r4, #20]
 800458e:	4343      	muls	r3, r0
 8004590:	9801      	ldr	r0, [sp, #4]
 8004592:	0fdd      	lsrs	r5, r3, #31
 8004594:	18ed      	adds	r5, r5, r3
 8004596:	1c7b      	adds	r3, r7, #1
 8004598:	181b      	adds	r3, r3, r0
 800459a:	106d      	asrs	r5, r5, #1
 800459c:	42ab      	cmp	r3, r5
 800459e:	d900      	bls.n	80045a2 <__ssputs_r+0x3e>
 80045a0:	001d      	movs	r5, r3
 80045a2:	0552      	lsls	r2, r2, #21
 80045a4:	d528      	bpl.n	80045f8 <__ssputs_r+0x94>
 80045a6:	0029      	movs	r1, r5
 80045a8:	9802      	ldr	r0, [sp, #8]
 80045aa:	f7ff ff4b 	bl	8004444 <_malloc_r>
 80045ae:	1e06      	subs	r6, r0, #0
 80045b0:	d02c      	beq.n	800460c <__ssputs_r+0xa8>
 80045b2:	9a01      	ldr	r2, [sp, #4]
 80045b4:	6921      	ldr	r1, [r4, #16]
 80045b6:	f7ff fed0 	bl	800435a <memcpy>
 80045ba:	89a2      	ldrh	r2, [r4, #12]
 80045bc:	4b18      	ldr	r3, [pc, #96]	@ (8004620 <__ssputs_r+0xbc>)
 80045be:	401a      	ands	r2, r3
 80045c0:	2380      	movs	r3, #128	@ 0x80
 80045c2:	4313      	orrs	r3, r2
 80045c4:	81a3      	strh	r3, [r4, #12]
 80045c6:	9b01      	ldr	r3, [sp, #4]
 80045c8:	6126      	str	r6, [r4, #16]
 80045ca:	18f6      	adds	r6, r6, r3
 80045cc:	6026      	str	r6, [r4, #0]
 80045ce:	003e      	movs	r6, r7
 80045d0:	6165      	str	r5, [r4, #20]
 80045d2:	1aed      	subs	r5, r5, r3
 80045d4:	60a5      	str	r5, [r4, #8]
 80045d6:	42be      	cmp	r6, r7
 80045d8:	d900      	bls.n	80045dc <__ssputs_r+0x78>
 80045da:	003e      	movs	r6, r7
 80045dc:	0032      	movs	r2, r6
 80045de:	9903      	ldr	r1, [sp, #12]
 80045e0:	6820      	ldr	r0, [r4, #0]
 80045e2:	f001 f891 	bl	8005708 <memmove>
 80045e6:	2000      	movs	r0, #0
 80045e8:	68a3      	ldr	r3, [r4, #8]
 80045ea:	1b9b      	subs	r3, r3, r6
 80045ec:	60a3      	str	r3, [r4, #8]
 80045ee:	6823      	ldr	r3, [r4, #0]
 80045f0:	199b      	adds	r3, r3, r6
 80045f2:	6023      	str	r3, [r4, #0]
 80045f4:	b005      	add	sp, #20
 80045f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f8:	002a      	movs	r2, r5
 80045fa:	9802      	ldr	r0, [sp, #8]
 80045fc:	f001 f8d9 	bl	80057b2 <_realloc_r>
 8004600:	1e06      	subs	r6, r0, #0
 8004602:	d1e0      	bne.n	80045c6 <__ssputs_r+0x62>
 8004604:	6921      	ldr	r1, [r4, #16]
 8004606:	9802      	ldr	r0, [sp, #8]
 8004608:	f7ff feb0 	bl	800436c <_free_r>
 800460c:	230c      	movs	r3, #12
 800460e:	2001      	movs	r0, #1
 8004610:	9a02      	ldr	r2, [sp, #8]
 8004612:	4240      	negs	r0, r0
 8004614:	6013      	str	r3, [r2, #0]
 8004616:	89a2      	ldrh	r2, [r4, #12]
 8004618:	3334      	adds	r3, #52	@ 0x34
 800461a:	4313      	orrs	r3, r2
 800461c:	81a3      	strh	r3, [r4, #12]
 800461e:	e7e9      	b.n	80045f4 <__ssputs_r+0x90>
 8004620:	fffffb7f 	.word	0xfffffb7f

08004624 <_svfiprintf_r>:
 8004624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004626:	b0a1      	sub	sp, #132	@ 0x84
 8004628:	9003      	str	r0, [sp, #12]
 800462a:	001d      	movs	r5, r3
 800462c:	898b      	ldrh	r3, [r1, #12]
 800462e:	000f      	movs	r7, r1
 8004630:	0016      	movs	r6, r2
 8004632:	061b      	lsls	r3, r3, #24
 8004634:	d511      	bpl.n	800465a <_svfiprintf_r+0x36>
 8004636:	690b      	ldr	r3, [r1, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d10e      	bne.n	800465a <_svfiprintf_r+0x36>
 800463c:	2140      	movs	r1, #64	@ 0x40
 800463e:	f7ff ff01 	bl	8004444 <_malloc_r>
 8004642:	6038      	str	r0, [r7, #0]
 8004644:	6138      	str	r0, [r7, #16]
 8004646:	2800      	cmp	r0, #0
 8004648:	d105      	bne.n	8004656 <_svfiprintf_r+0x32>
 800464a:	230c      	movs	r3, #12
 800464c:	9a03      	ldr	r2, [sp, #12]
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	2001      	movs	r0, #1
 8004652:	4240      	negs	r0, r0
 8004654:	e0cf      	b.n	80047f6 <_svfiprintf_r+0x1d2>
 8004656:	2340      	movs	r3, #64	@ 0x40
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	2300      	movs	r3, #0
 800465c:	ac08      	add	r4, sp, #32
 800465e:	6163      	str	r3, [r4, #20]
 8004660:	3320      	adds	r3, #32
 8004662:	7663      	strb	r3, [r4, #25]
 8004664:	3310      	adds	r3, #16
 8004666:	76a3      	strb	r3, [r4, #26]
 8004668:	9507      	str	r5, [sp, #28]
 800466a:	0035      	movs	r5, r6
 800466c:	782b      	ldrb	r3, [r5, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <_svfiprintf_r+0x52>
 8004672:	2b25      	cmp	r3, #37	@ 0x25
 8004674:	d148      	bne.n	8004708 <_svfiprintf_r+0xe4>
 8004676:	1bab      	subs	r3, r5, r6
 8004678:	9305      	str	r3, [sp, #20]
 800467a:	42b5      	cmp	r5, r6
 800467c:	d00b      	beq.n	8004696 <_svfiprintf_r+0x72>
 800467e:	0032      	movs	r2, r6
 8004680:	0039      	movs	r1, r7
 8004682:	9803      	ldr	r0, [sp, #12]
 8004684:	f7ff ff6e 	bl	8004564 <__ssputs_r>
 8004688:	3001      	adds	r0, #1
 800468a:	d100      	bne.n	800468e <_svfiprintf_r+0x6a>
 800468c:	e0ae      	b.n	80047ec <_svfiprintf_r+0x1c8>
 800468e:	6963      	ldr	r3, [r4, #20]
 8004690:	9a05      	ldr	r2, [sp, #20]
 8004692:	189b      	adds	r3, r3, r2
 8004694:	6163      	str	r3, [r4, #20]
 8004696:	782b      	ldrb	r3, [r5, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d100      	bne.n	800469e <_svfiprintf_r+0x7a>
 800469c:	e0a6      	b.n	80047ec <_svfiprintf_r+0x1c8>
 800469e:	2201      	movs	r2, #1
 80046a0:	2300      	movs	r3, #0
 80046a2:	4252      	negs	r2, r2
 80046a4:	6062      	str	r2, [r4, #4]
 80046a6:	a904      	add	r1, sp, #16
 80046a8:	3254      	adds	r2, #84	@ 0x54
 80046aa:	1852      	adds	r2, r2, r1
 80046ac:	1c6e      	adds	r6, r5, #1
 80046ae:	6023      	str	r3, [r4, #0]
 80046b0:	60e3      	str	r3, [r4, #12]
 80046b2:	60a3      	str	r3, [r4, #8]
 80046b4:	7013      	strb	r3, [r2, #0]
 80046b6:	65a3      	str	r3, [r4, #88]	@ 0x58
 80046b8:	4b54      	ldr	r3, [pc, #336]	@ (800480c <_svfiprintf_r+0x1e8>)
 80046ba:	2205      	movs	r2, #5
 80046bc:	0018      	movs	r0, r3
 80046be:	7831      	ldrb	r1, [r6, #0]
 80046c0:	9305      	str	r3, [sp, #20]
 80046c2:	f001 f86b 	bl	800579c <memchr>
 80046c6:	1c75      	adds	r5, r6, #1
 80046c8:	2800      	cmp	r0, #0
 80046ca:	d11f      	bne.n	800470c <_svfiprintf_r+0xe8>
 80046cc:	6822      	ldr	r2, [r4, #0]
 80046ce:	06d3      	lsls	r3, r2, #27
 80046d0:	d504      	bpl.n	80046dc <_svfiprintf_r+0xb8>
 80046d2:	2353      	movs	r3, #83	@ 0x53
 80046d4:	a904      	add	r1, sp, #16
 80046d6:	185b      	adds	r3, r3, r1
 80046d8:	2120      	movs	r1, #32
 80046da:	7019      	strb	r1, [r3, #0]
 80046dc:	0713      	lsls	r3, r2, #28
 80046de:	d504      	bpl.n	80046ea <_svfiprintf_r+0xc6>
 80046e0:	2353      	movs	r3, #83	@ 0x53
 80046e2:	a904      	add	r1, sp, #16
 80046e4:	185b      	adds	r3, r3, r1
 80046e6:	212b      	movs	r1, #43	@ 0x2b
 80046e8:	7019      	strb	r1, [r3, #0]
 80046ea:	7833      	ldrb	r3, [r6, #0]
 80046ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80046ee:	d016      	beq.n	800471e <_svfiprintf_r+0xfa>
 80046f0:	0035      	movs	r5, r6
 80046f2:	2100      	movs	r1, #0
 80046f4:	200a      	movs	r0, #10
 80046f6:	68e3      	ldr	r3, [r4, #12]
 80046f8:	782a      	ldrb	r2, [r5, #0]
 80046fa:	1c6e      	adds	r6, r5, #1
 80046fc:	3a30      	subs	r2, #48	@ 0x30
 80046fe:	2a09      	cmp	r2, #9
 8004700:	d950      	bls.n	80047a4 <_svfiprintf_r+0x180>
 8004702:	2900      	cmp	r1, #0
 8004704:	d111      	bne.n	800472a <_svfiprintf_r+0x106>
 8004706:	e017      	b.n	8004738 <_svfiprintf_r+0x114>
 8004708:	3501      	adds	r5, #1
 800470a:	e7af      	b.n	800466c <_svfiprintf_r+0x48>
 800470c:	9b05      	ldr	r3, [sp, #20]
 800470e:	6822      	ldr	r2, [r4, #0]
 8004710:	1ac0      	subs	r0, r0, r3
 8004712:	2301      	movs	r3, #1
 8004714:	4083      	lsls	r3, r0
 8004716:	4313      	orrs	r3, r2
 8004718:	002e      	movs	r6, r5
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	e7cc      	b.n	80046b8 <_svfiprintf_r+0x94>
 800471e:	9b07      	ldr	r3, [sp, #28]
 8004720:	1d19      	adds	r1, r3, #4
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	9107      	str	r1, [sp, #28]
 8004726:	2b00      	cmp	r3, #0
 8004728:	db01      	blt.n	800472e <_svfiprintf_r+0x10a>
 800472a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800472c:	e004      	b.n	8004738 <_svfiprintf_r+0x114>
 800472e:	425b      	negs	r3, r3
 8004730:	60e3      	str	r3, [r4, #12]
 8004732:	2302      	movs	r3, #2
 8004734:	4313      	orrs	r3, r2
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	782b      	ldrb	r3, [r5, #0]
 800473a:	2b2e      	cmp	r3, #46	@ 0x2e
 800473c:	d10c      	bne.n	8004758 <_svfiprintf_r+0x134>
 800473e:	786b      	ldrb	r3, [r5, #1]
 8004740:	2b2a      	cmp	r3, #42	@ 0x2a
 8004742:	d134      	bne.n	80047ae <_svfiprintf_r+0x18a>
 8004744:	9b07      	ldr	r3, [sp, #28]
 8004746:	3502      	adds	r5, #2
 8004748:	1d1a      	adds	r2, r3, #4
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	9207      	str	r2, [sp, #28]
 800474e:	2b00      	cmp	r3, #0
 8004750:	da01      	bge.n	8004756 <_svfiprintf_r+0x132>
 8004752:	2301      	movs	r3, #1
 8004754:	425b      	negs	r3, r3
 8004756:	9309      	str	r3, [sp, #36]	@ 0x24
 8004758:	4e2d      	ldr	r6, [pc, #180]	@ (8004810 <_svfiprintf_r+0x1ec>)
 800475a:	2203      	movs	r2, #3
 800475c:	0030      	movs	r0, r6
 800475e:	7829      	ldrb	r1, [r5, #0]
 8004760:	f001 f81c 	bl	800579c <memchr>
 8004764:	2800      	cmp	r0, #0
 8004766:	d006      	beq.n	8004776 <_svfiprintf_r+0x152>
 8004768:	2340      	movs	r3, #64	@ 0x40
 800476a:	1b80      	subs	r0, r0, r6
 800476c:	4083      	lsls	r3, r0
 800476e:	6822      	ldr	r2, [r4, #0]
 8004770:	3501      	adds	r5, #1
 8004772:	4313      	orrs	r3, r2
 8004774:	6023      	str	r3, [r4, #0]
 8004776:	7829      	ldrb	r1, [r5, #0]
 8004778:	2206      	movs	r2, #6
 800477a:	4826      	ldr	r0, [pc, #152]	@ (8004814 <_svfiprintf_r+0x1f0>)
 800477c:	1c6e      	adds	r6, r5, #1
 800477e:	7621      	strb	r1, [r4, #24]
 8004780:	f001 f80c 	bl	800579c <memchr>
 8004784:	2800      	cmp	r0, #0
 8004786:	d038      	beq.n	80047fa <_svfiprintf_r+0x1d6>
 8004788:	4b23      	ldr	r3, [pc, #140]	@ (8004818 <_svfiprintf_r+0x1f4>)
 800478a:	2b00      	cmp	r3, #0
 800478c:	d122      	bne.n	80047d4 <_svfiprintf_r+0x1b0>
 800478e:	2207      	movs	r2, #7
 8004790:	9b07      	ldr	r3, [sp, #28]
 8004792:	3307      	adds	r3, #7
 8004794:	4393      	bics	r3, r2
 8004796:	3308      	adds	r3, #8
 8004798:	9307      	str	r3, [sp, #28]
 800479a:	6963      	ldr	r3, [r4, #20]
 800479c:	9a04      	ldr	r2, [sp, #16]
 800479e:	189b      	adds	r3, r3, r2
 80047a0:	6163      	str	r3, [r4, #20]
 80047a2:	e762      	b.n	800466a <_svfiprintf_r+0x46>
 80047a4:	4343      	muls	r3, r0
 80047a6:	0035      	movs	r5, r6
 80047a8:	2101      	movs	r1, #1
 80047aa:	189b      	adds	r3, r3, r2
 80047ac:	e7a4      	b.n	80046f8 <_svfiprintf_r+0xd4>
 80047ae:	2300      	movs	r3, #0
 80047b0:	200a      	movs	r0, #10
 80047b2:	0019      	movs	r1, r3
 80047b4:	3501      	adds	r5, #1
 80047b6:	6063      	str	r3, [r4, #4]
 80047b8:	782a      	ldrb	r2, [r5, #0]
 80047ba:	1c6e      	adds	r6, r5, #1
 80047bc:	3a30      	subs	r2, #48	@ 0x30
 80047be:	2a09      	cmp	r2, #9
 80047c0:	d903      	bls.n	80047ca <_svfiprintf_r+0x1a6>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d0c8      	beq.n	8004758 <_svfiprintf_r+0x134>
 80047c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80047c8:	e7c6      	b.n	8004758 <_svfiprintf_r+0x134>
 80047ca:	4341      	muls	r1, r0
 80047cc:	0035      	movs	r5, r6
 80047ce:	2301      	movs	r3, #1
 80047d0:	1889      	adds	r1, r1, r2
 80047d2:	e7f1      	b.n	80047b8 <_svfiprintf_r+0x194>
 80047d4:	aa07      	add	r2, sp, #28
 80047d6:	9200      	str	r2, [sp, #0]
 80047d8:	0021      	movs	r1, r4
 80047da:	003a      	movs	r2, r7
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <_svfiprintf_r+0x1f8>)
 80047de:	9803      	ldr	r0, [sp, #12]
 80047e0:	e000      	b.n	80047e4 <_svfiprintf_r+0x1c0>
 80047e2:	bf00      	nop
 80047e4:	9004      	str	r0, [sp, #16]
 80047e6:	9b04      	ldr	r3, [sp, #16]
 80047e8:	3301      	adds	r3, #1
 80047ea:	d1d6      	bne.n	800479a <_svfiprintf_r+0x176>
 80047ec:	89bb      	ldrh	r3, [r7, #12]
 80047ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80047f0:	065b      	lsls	r3, r3, #25
 80047f2:	d500      	bpl.n	80047f6 <_svfiprintf_r+0x1d2>
 80047f4:	e72c      	b.n	8004650 <_svfiprintf_r+0x2c>
 80047f6:	b021      	add	sp, #132	@ 0x84
 80047f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047fa:	aa07      	add	r2, sp, #28
 80047fc:	9200      	str	r2, [sp, #0]
 80047fe:	0021      	movs	r1, r4
 8004800:	003a      	movs	r2, r7
 8004802:	4b06      	ldr	r3, [pc, #24]	@ (800481c <_svfiprintf_r+0x1f8>)
 8004804:	9803      	ldr	r0, [sp, #12]
 8004806:	f000 fb7d 	bl	8004f04 <_printf_i>
 800480a:	e7eb      	b.n	80047e4 <_svfiprintf_r+0x1c0>
 800480c:	08005ee8 	.word	0x08005ee8
 8004810:	08005eee 	.word	0x08005eee
 8004814:	08005ef2 	.word	0x08005ef2
 8004818:	00000000 	.word	0x00000000
 800481c:	08004565 	.word	0x08004565

08004820 <_sungetc_r>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	0014      	movs	r4, r2
 8004824:	1c4b      	adds	r3, r1, #1
 8004826:	d103      	bne.n	8004830 <_sungetc_r+0x10>
 8004828:	2501      	movs	r5, #1
 800482a:	426d      	negs	r5, r5
 800482c:	0028      	movs	r0, r5
 800482e:	bd70      	pop	{r4, r5, r6, pc}
 8004830:	8993      	ldrh	r3, [r2, #12]
 8004832:	2220      	movs	r2, #32
 8004834:	4393      	bics	r3, r2
 8004836:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004838:	81a3      	strh	r3, [r4, #12]
 800483a:	b2ce      	uxtb	r6, r1
 800483c:	6863      	ldr	r3, [r4, #4]
 800483e:	b2cd      	uxtb	r5, r1
 8004840:	2a00      	cmp	r2, #0
 8004842:	d010      	beq.n	8004866 <_sungetc_r+0x46>
 8004844:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004846:	429a      	cmp	r2, r3
 8004848:	dd07      	ble.n	800485a <_sungetc_r+0x3a>
 800484a:	6823      	ldr	r3, [r4, #0]
 800484c:	3b01      	subs	r3, #1
 800484e:	6023      	str	r3, [r4, #0]
 8004850:	701e      	strb	r6, [r3, #0]
 8004852:	6863      	ldr	r3, [r4, #4]
 8004854:	3301      	adds	r3, #1
 8004856:	6063      	str	r3, [r4, #4]
 8004858:	e7e8      	b.n	800482c <_sungetc_r+0xc>
 800485a:	0021      	movs	r1, r4
 800485c:	f000 ff16 	bl	800568c <__submore>
 8004860:	2800      	cmp	r0, #0
 8004862:	d0f2      	beq.n	800484a <_sungetc_r+0x2a>
 8004864:	e7e0      	b.n	8004828 <_sungetc_r+0x8>
 8004866:	6921      	ldr	r1, [r4, #16]
 8004868:	6822      	ldr	r2, [r4, #0]
 800486a:	2900      	cmp	r1, #0
 800486c:	d007      	beq.n	800487e <_sungetc_r+0x5e>
 800486e:	4291      	cmp	r1, r2
 8004870:	d205      	bcs.n	800487e <_sungetc_r+0x5e>
 8004872:	1e51      	subs	r1, r2, #1
 8004874:	7808      	ldrb	r0, [r1, #0]
 8004876:	42a8      	cmp	r0, r5
 8004878:	d101      	bne.n	800487e <_sungetc_r+0x5e>
 800487a:	6021      	str	r1, [r4, #0]
 800487c:	e7ea      	b.n	8004854 <_sungetc_r+0x34>
 800487e:	6423      	str	r3, [r4, #64]	@ 0x40
 8004880:	0023      	movs	r3, r4
 8004882:	3344      	adds	r3, #68	@ 0x44
 8004884:	6363      	str	r3, [r4, #52]	@ 0x34
 8004886:	2303      	movs	r3, #3
 8004888:	63a3      	str	r3, [r4, #56]	@ 0x38
 800488a:	0023      	movs	r3, r4
 800488c:	3346      	adds	r3, #70	@ 0x46
 800488e:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8004890:	701e      	strb	r6, [r3, #0]
 8004892:	6023      	str	r3, [r4, #0]
 8004894:	2301      	movs	r3, #1
 8004896:	e7de      	b.n	8004856 <_sungetc_r+0x36>

08004898 <__ssrefill_r>:
 8004898:	b510      	push	{r4, lr}
 800489a:	000c      	movs	r4, r1
 800489c:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800489e:	2900      	cmp	r1, #0
 80048a0:	d00e      	beq.n	80048c0 <__ssrefill_r+0x28>
 80048a2:	0023      	movs	r3, r4
 80048a4:	3344      	adds	r3, #68	@ 0x44
 80048a6:	4299      	cmp	r1, r3
 80048a8:	d001      	beq.n	80048ae <__ssrefill_r+0x16>
 80048aa:	f7ff fd5f 	bl	800436c <_free_r>
 80048ae:	2000      	movs	r0, #0
 80048b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048b2:	6360      	str	r0, [r4, #52]	@ 0x34
 80048b4:	6063      	str	r3, [r4, #4]
 80048b6:	4283      	cmp	r3, r0
 80048b8:	d002      	beq.n	80048c0 <__ssrefill_r+0x28>
 80048ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd10      	pop	{r4, pc}
 80048c0:	6923      	ldr	r3, [r4, #16]
 80048c2:	2001      	movs	r0, #1
 80048c4:	6023      	str	r3, [r4, #0]
 80048c6:	2300      	movs	r3, #0
 80048c8:	89a2      	ldrh	r2, [r4, #12]
 80048ca:	6063      	str	r3, [r4, #4]
 80048cc:	3320      	adds	r3, #32
 80048ce:	4313      	orrs	r3, r2
 80048d0:	81a3      	strh	r3, [r4, #12]
 80048d2:	4240      	negs	r0, r0
 80048d4:	e7f3      	b.n	80048be <__ssrefill_r+0x26>
	...

080048d8 <__ssvfiscanf_r>:
 80048d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048da:	4caa      	ldr	r4, [pc, #680]	@ (8004b84 <__ssvfiscanf_r+0x2ac>)
 80048dc:	44a5      	add	sp, r4
 80048de:	000c      	movs	r4, r1
 80048e0:	2100      	movs	r1, #0
 80048e2:	9001      	str	r0, [sp, #4]
 80048e4:	20be      	movs	r0, #190	@ 0xbe
 80048e6:	9146      	str	r1, [sp, #280]	@ 0x118
 80048e8:	9147      	str	r1, [sp, #284]	@ 0x11c
 80048ea:	a903      	add	r1, sp, #12
 80048ec:	9148      	str	r1, [sp, #288]	@ 0x120
 80048ee:	49a6      	ldr	r1, [pc, #664]	@ (8004b88 <__ssvfiscanf_r+0x2b0>)
 80048f0:	0040      	lsls	r0, r0, #1
 80048f2:	ad43      	add	r5, sp, #268	@ 0x10c
 80048f4:	5029      	str	r1, [r5, r0]
 80048f6:	49a5      	ldr	r1, [pc, #660]	@ (8004b8c <__ssvfiscanf_r+0x2b4>)
 80048f8:	3004      	adds	r0, #4
 80048fa:	ad43      	add	r5, sp, #268	@ 0x10c
 80048fc:	5029      	str	r1, [r5, r0]
 80048fe:	9302      	str	r3, [sp, #8]
 8004900:	7813      	ldrb	r3, [r2, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d100      	bne.n	8004908 <__ssvfiscanf_r+0x30>
 8004906:	e13a      	b.n	8004b7e <__ssvfiscanf_r+0x2a6>
 8004908:	2108      	movs	r1, #8
 800490a:	2708      	movs	r7, #8
 800490c:	4ea0      	ldr	r6, [pc, #640]	@ (8004b90 <__ssvfiscanf_r+0x2b8>)
 800490e:	1c55      	adds	r5, r2, #1
 8004910:	5cf0      	ldrb	r0, [r6, r3]
 8004912:	4001      	ands	r1, r0
 8004914:	4238      	tst	r0, r7
 8004916:	d01c      	beq.n	8004952 <__ssvfiscanf_r+0x7a>
 8004918:	6863      	ldr	r3, [r4, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	dd0f      	ble.n	800493e <__ssvfiscanf_r+0x66>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	781a      	ldrb	r2, [r3, #0]
 8004922:	5cb2      	ldrb	r2, [r6, r2]
 8004924:	423a      	tst	r2, r7
 8004926:	d101      	bne.n	800492c <__ssvfiscanf_r+0x54>
 8004928:	002a      	movs	r2, r5
 800492a:	e7e9      	b.n	8004900 <__ssvfiscanf_r+0x28>
 800492c:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800492e:	3301      	adds	r3, #1
 8004930:	3201      	adds	r2, #1
 8004932:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004934:	6862      	ldr	r2, [r4, #4]
 8004936:	6023      	str	r3, [r4, #0]
 8004938:	3a01      	subs	r2, #1
 800493a:	6062      	str	r2, [r4, #4]
 800493c:	e7ec      	b.n	8004918 <__ssvfiscanf_r+0x40>
 800493e:	22c0      	movs	r2, #192	@ 0xc0
 8004940:	ab43      	add	r3, sp, #268	@ 0x10c
 8004942:	0052      	lsls	r2, r2, #1
 8004944:	0021      	movs	r1, r4
 8004946:	589b      	ldr	r3, [r3, r2]
 8004948:	9801      	ldr	r0, [sp, #4]
 800494a:	4798      	blx	r3
 800494c:	2800      	cmp	r0, #0
 800494e:	d0e6      	beq.n	800491e <__ssvfiscanf_r+0x46>
 8004950:	e7ea      	b.n	8004928 <__ssvfiscanf_r+0x50>
 8004952:	001e      	movs	r6, r3
 8004954:	2b25      	cmp	r3, #37	@ 0x25
 8004956:	d160      	bne.n	8004a1a <__ssvfiscanf_r+0x142>
 8004958:	9145      	str	r1, [sp, #276]	@ 0x114
 800495a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800495c:	7853      	ldrb	r3, [r2, #1]
 800495e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004960:	d102      	bne.n	8004968 <__ssvfiscanf_r+0x90>
 8004962:	3b1a      	subs	r3, #26
 8004964:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004966:	1c95      	adds	r5, r2, #2
 8004968:	002e      	movs	r6, r5
 800496a:	220a      	movs	r2, #10
 800496c:	7831      	ldrb	r1, [r6, #0]
 800496e:	1c75      	adds	r5, r6, #1
 8004970:	000b      	movs	r3, r1
 8004972:	3b30      	subs	r3, #48	@ 0x30
 8004974:	2b09      	cmp	r3, #9
 8004976:	d91d      	bls.n	80049b4 <__ssvfiscanf_r+0xdc>
 8004978:	4f86      	ldr	r7, [pc, #536]	@ (8004b94 <__ssvfiscanf_r+0x2bc>)
 800497a:	2203      	movs	r2, #3
 800497c:	0038      	movs	r0, r7
 800497e:	f000 ff0d 	bl	800579c <memchr>
 8004982:	2800      	cmp	r0, #0
 8004984:	d006      	beq.n	8004994 <__ssvfiscanf_r+0xbc>
 8004986:	2301      	movs	r3, #1
 8004988:	1bc0      	subs	r0, r0, r7
 800498a:	4083      	lsls	r3, r0
 800498c:	002e      	movs	r6, r5
 800498e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004990:	4313      	orrs	r3, r2
 8004992:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004994:	1c75      	adds	r5, r6, #1
 8004996:	7836      	ldrb	r6, [r6, #0]
 8004998:	2e78      	cmp	r6, #120	@ 0x78
 800499a:	d806      	bhi.n	80049aa <__ssvfiscanf_r+0xd2>
 800499c:	2e57      	cmp	r6, #87	@ 0x57
 800499e:	d810      	bhi.n	80049c2 <__ssvfiscanf_r+0xea>
 80049a0:	2e25      	cmp	r6, #37	@ 0x25
 80049a2:	d03a      	beq.n	8004a1a <__ssvfiscanf_r+0x142>
 80049a4:	d834      	bhi.n	8004a10 <__ssvfiscanf_r+0x138>
 80049a6:	2e00      	cmp	r6, #0
 80049a8:	d055      	beq.n	8004a56 <__ssvfiscanf_r+0x17e>
 80049aa:	2303      	movs	r3, #3
 80049ac:	9349      	str	r3, [sp, #292]	@ 0x124
 80049ae:	3307      	adds	r3, #7
 80049b0:	9344      	str	r3, [sp, #272]	@ 0x110
 80049b2:	e069      	b.n	8004a88 <__ssvfiscanf_r+0x1b0>
 80049b4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80049b6:	002e      	movs	r6, r5
 80049b8:	4353      	muls	r3, r2
 80049ba:	3b30      	subs	r3, #48	@ 0x30
 80049bc:	185b      	adds	r3, r3, r1
 80049be:	9345      	str	r3, [sp, #276]	@ 0x114
 80049c0:	e7d4      	b.n	800496c <__ssvfiscanf_r+0x94>
 80049c2:	0030      	movs	r0, r6
 80049c4:	3858      	subs	r0, #88	@ 0x58
 80049c6:	2820      	cmp	r0, #32
 80049c8:	d8ef      	bhi.n	80049aa <__ssvfiscanf_r+0xd2>
 80049ca:	f7fb fba5 	bl	8000118 <__gnu_thumb1_case_shi>
 80049ce:	004b      	.short	0x004b
 80049d0:	ffeeffee 	.word	0xffeeffee
 80049d4:	ffee007d 	.word	0xffee007d
 80049d8:	ffeeffee 	.word	0xffeeffee
 80049dc:	ffeeffee 	.word	0xffeeffee
 80049e0:	ffeeffee 	.word	0xffeeffee
 80049e4:	007b0088 	.word	0x007b0088
 80049e8:	00240024 	.word	0x00240024
 80049ec:	ffee0024 	.word	0xffee0024
 80049f0:	ffee0055 	.word	0xffee0055
 80049f4:	ffeeffee 	.word	0xffeeffee
 80049f8:	0090ffee 	.word	0x0090ffee
 80049fc:	00470059 	.word	0x00470059
 8004a00:	ffeeffee 	.word	0xffeeffee
 8004a04:	ffee008e 	.word	0xffee008e
 8004a08:	ffee007b 	.word	0xffee007b
 8004a0c:	004bffee 	.word	0x004bffee
 8004a10:	3e45      	subs	r6, #69	@ 0x45
 8004a12:	2e02      	cmp	r6, #2
 8004a14:	d8c9      	bhi.n	80049aa <__ssvfiscanf_r+0xd2>
 8004a16:	2305      	movs	r3, #5
 8004a18:	e035      	b.n	8004a86 <__ssvfiscanf_r+0x1ae>
 8004a1a:	6863      	ldr	r3, [r4, #4]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	dd0d      	ble.n	8004a3c <__ssvfiscanf_r+0x164>
 8004a20:	6823      	ldr	r3, [r4, #0]
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	42b2      	cmp	r2, r6
 8004a26:	d000      	beq.n	8004a2a <__ssvfiscanf_r+0x152>
 8004a28:	e0a9      	b.n	8004b7e <__ssvfiscanf_r+0x2a6>
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	6862      	ldr	r2, [r4, #4]
 8004a2e:	6023      	str	r3, [r4, #0]
 8004a30:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004a32:	3a01      	subs	r2, #1
 8004a34:	3301      	adds	r3, #1
 8004a36:	6062      	str	r2, [r4, #4]
 8004a38:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004a3a:	e775      	b.n	8004928 <__ssvfiscanf_r+0x50>
 8004a3c:	23c0      	movs	r3, #192	@ 0xc0
 8004a3e:	aa43      	add	r2, sp, #268	@ 0x10c
 8004a40:	005b      	lsls	r3, r3, #1
 8004a42:	0021      	movs	r1, r4
 8004a44:	58d3      	ldr	r3, [r2, r3]
 8004a46:	9801      	ldr	r0, [sp, #4]
 8004a48:	4798      	blx	r3
 8004a4a:	2800      	cmp	r0, #0
 8004a4c:	d0e8      	beq.n	8004a20 <__ssvfiscanf_r+0x148>
 8004a4e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004a50:	2800      	cmp	r0, #0
 8004a52:	d000      	beq.n	8004a56 <__ssvfiscanf_r+0x17e>
 8004a54:	e08b      	b.n	8004b6e <__ssvfiscanf_r+0x296>
 8004a56:	2001      	movs	r0, #1
 8004a58:	4240      	negs	r0, r0
 8004a5a:	e08c      	b.n	8004b76 <__ssvfiscanf_r+0x29e>
 8004a5c:	2320      	movs	r3, #32
 8004a5e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004a60:	4313      	orrs	r3, r2
 8004a62:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004a64:	2380      	movs	r3, #128	@ 0x80
 8004a66:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004a6e:	2310      	movs	r3, #16
 8004a70:	9344      	str	r3, [sp, #272]	@ 0x110
 8004a72:	2e6e      	cmp	r6, #110	@ 0x6e
 8004a74:	d902      	bls.n	8004a7c <__ssvfiscanf_r+0x1a4>
 8004a76:	e005      	b.n	8004a84 <__ssvfiscanf_r+0x1ac>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	9344      	str	r3, [sp, #272]	@ 0x110
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e002      	b.n	8004a86 <__ssvfiscanf_r+0x1ae>
 8004a80:	2308      	movs	r3, #8
 8004a82:	9344      	str	r3, [sp, #272]	@ 0x110
 8004a84:	2304      	movs	r3, #4
 8004a86:	9349      	str	r3, [sp, #292]	@ 0x124
 8004a88:	6863      	ldr	r3, [r4, #4]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	dd3e      	ble.n	8004b0c <__ssvfiscanf_r+0x234>
 8004a8e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004a90:	065b      	lsls	r3, r3, #25
 8004a92:	d408      	bmi.n	8004aa6 <__ssvfiscanf_r+0x1ce>
 8004a94:	27c0      	movs	r7, #192	@ 0xc0
 8004a96:	2608      	movs	r6, #8
 8004a98:	007f      	lsls	r7, r7, #1
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	493c      	ldr	r1, [pc, #240]	@ (8004b90 <__ssvfiscanf_r+0x2b8>)
 8004a9e:	781a      	ldrb	r2, [r3, #0]
 8004aa0:	5c8a      	ldrb	r2, [r1, r2]
 8004aa2:	4232      	tst	r2, r6
 8004aa4:	d13c      	bne.n	8004b20 <__ssvfiscanf_r+0x248>
 8004aa6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	dc4c      	bgt.n	8004b46 <__ssvfiscanf_r+0x26e>
 8004aac:	0022      	movs	r2, r4
 8004aae:	9801      	ldr	r0, [sp, #4]
 8004ab0:	ab02      	add	r3, sp, #8
 8004ab2:	a943      	add	r1, sp, #268	@ 0x10c
 8004ab4:	f000 fb34 	bl	8005120 <_scanf_chars>
 8004ab8:	2801      	cmp	r0, #1
 8004aba:	d060      	beq.n	8004b7e <__ssvfiscanf_r+0x2a6>
 8004abc:	2802      	cmp	r0, #2
 8004abe:	d000      	beq.n	8004ac2 <__ssvfiscanf_r+0x1ea>
 8004ac0:	e732      	b.n	8004928 <__ssvfiscanf_r+0x50>
 8004ac2:	e7c4      	b.n	8004a4e <__ssvfiscanf_r+0x176>
 8004ac4:	230a      	movs	r3, #10
 8004ac6:	e7d3      	b.n	8004a70 <__ssvfiscanf_r+0x198>
 8004ac8:	0029      	movs	r1, r5
 8004aca:	a803      	add	r0, sp, #12
 8004acc:	f000 fda5 	bl	800561a <__sccl>
 8004ad0:	2340      	movs	r3, #64	@ 0x40
 8004ad2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004ad4:	0005      	movs	r5, r0
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004ada:	2301      	movs	r3, #1
 8004adc:	e7d3      	b.n	8004a86 <__ssvfiscanf_r+0x1ae>
 8004ade:	2340      	movs	r3, #64	@ 0x40
 8004ae0:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e7cd      	b.n	8004a86 <__ssvfiscanf_r+0x1ae>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e7cb      	b.n	8004a86 <__ssvfiscanf_r+0x1ae>
 8004aee:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004af0:	06d3      	lsls	r3, r2, #27
 8004af2:	d500      	bpl.n	8004af6 <__ssvfiscanf_r+0x21e>
 8004af4:	e718      	b.n	8004928 <__ssvfiscanf_r+0x50>
 8004af6:	9b02      	ldr	r3, [sp, #8]
 8004af8:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8004afa:	1d18      	adds	r0, r3, #4
 8004afc:	9002      	str	r0, [sp, #8]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	07d6      	lsls	r6, r2, #31
 8004b02:	d501      	bpl.n	8004b08 <__ssvfiscanf_r+0x230>
 8004b04:	8019      	strh	r1, [r3, #0]
 8004b06:	e70f      	b.n	8004928 <__ssvfiscanf_r+0x50>
 8004b08:	6019      	str	r1, [r3, #0]
 8004b0a:	e70d      	b.n	8004928 <__ssvfiscanf_r+0x50>
 8004b0c:	23c0      	movs	r3, #192	@ 0xc0
 8004b0e:	aa43      	add	r2, sp, #268	@ 0x10c
 8004b10:	005b      	lsls	r3, r3, #1
 8004b12:	0021      	movs	r1, r4
 8004b14:	58d3      	ldr	r3, [r2, r3]
 8004b16:	9801      	ldr	r0, [sp, #4]
 8004b18:	4798      	blx	r3
 8004b1a:	2800      	cmp	r0, #0
 8004b1c:	d0b7      	beq.n	8004a8e <__ssvfiscanf_r+0x1b6>
 8004b1e:	e796      	b.n	8004a4e <__ssvfiscanf_r+0x176>
 8004b20:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8004b22:	3201      	adds	r2, #1
 8004b24:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004b26:	6862      	ldr	r2, [r4, #4]
 8004b28:	3a01      	subs	r2, #1
 8004b2a:	6062      	str	r2, [r4, #4]
 8004b2c:	2a00      	cmp	r2, #0
 8004b2e:	dd02      	ble.n	8004b36 <__ssvfiscanf_r+0x25e>
 8004b30:	3301      	adds	r3, #1
 8004b32:	6023      	str	r3, [r4, #0]
 8004b34:	e7b1      	b.n	8004a9a <__ssvfiscanf_r+0x1c2>
 8004b36:	ab43      	add	r3, sp, #268	@ 0x10c
 8004b38:	0021      	movs	r1, r4
 8004b3a:	59db      	ldr	r3, [r3, r7]
 8004b3c:	9801      	ldr	r0, [sp, #4]
 8004b3e:	4798      	blx	r3
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d0aa      	beq.n	8004a9a <__ssvfiscanf_r+0x1c2>
 8004b44:	e783      	b.n	8004a4e <__ssvfiscanf_r+0x176>
 8004b46:	2b04      	cmp	r3, #4
 8004b48:	dc06      	bgt.n	8004b58 <__ssvfiscanf_r+0x280>
 8004b4a:	0022      	movs	r2, r4
 8004b4c:	9801      	ldr	r0, [sp, #4]
 8004b4e:	ab02      	add	r3, sp, #8
 8004b50:	a943      	add	r1, sp, #268	@ 0x10c
 8004b52:	f000 fb45 	bl	80051e0 <_scanf_i>
 8004b56:	e7af      	b.n	8004ab8 <__ssvfiscanf_r+0x1e0>
 8004b58:	4b0f      	ldr	r3, [pc, #60]	@ (8004b98 <__ssvfiscanf_r+0x2c0>)
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d100      	bne.n	8004b60 <__ssvfiscanf_r+0x288>
 8004b5e:	e6e3      	b.n	8004928 <__ssvfiscanf_r+0x50>
 8004b60:	0022      	movs	r2, r4
 8004b62:	9801      	ldr	r0, [sp, #4]
 8004b64:	ab02      	add	r3, sp, #8
 8004b66:	a943      	add	r1, sp, #268	@ 0x10c
 8004b68:	e000      	b.n	8004b6c <__ssvfiscanf_r+0x294>
 8004b6a:	bf00      	nop
 8004b6c:	e7a4      	b.n	8004ab8 <__ssvfiscanf_r+0x1e0>
 8004b6e:	89a3      	ldrh	r3, [r4, #12]
 8004b70:	065b      	lsls	r3, r3, #25
 8004b72:	d500      	bpl.n	8004b76 <__ssvfiscanf_r+0x29e>
 8004b74:	e76f      	b.n	8004a56 <__ssvfiscanf_r+0x17e>
 8004b76:	23a5      	movs	r3, #165	@ 0xa5
 8004b78:	009b      	lsls	r3, r3, #2
 8004b7a:	449d      	add	sp, r3
 8004b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b7e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004b80:	e7f9      	b.n	8004b76 <__ssvfiscanf_r+0x29e>
 8004b82:	46c0      	nop			@ (mov r8, r8)
 8004b84:	fffffd6c 	.word	0xfffffd6c
 8004b88:	08004821 	.word	0x08004821
 8004b8c:	08004899 	.word	0x08004899
 8004b90:	08005f37 	.word	0x08005f37
 8004b94:	08005eee 	.word	0x08005eee
 8004b98:	00000000 	.word	0x00000000

08004b9c <__sfputc_r>:
 8004b9c:	6893      	ldr	r3, [r2, #8]
 8004b9e:	b510      	push	{r4, lr}
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	6093      	str	r3, [r2, #8]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	da04      	bge.n	8004bb2 <__sfputc_r+0x16>
 8004ba8:	6994      	ldr	r4, [r2, #24]
 8004baa:	42a3      	cmp	r3, r4
 8004bac:	db07      	blt.n	8004bbe <__sfputc_r+0x22>
 8004bae:	290a      	cmp	r1, #10
 8004bb0:	d005      	beq.n	8004bbe <__sfputc_r+0x22>
 8004bb2:	6813      	ldr	r3, [r2, #0]
 8004bb4:	1c58      	adds	r0, r3, #1
 8004bb6:	6010      	str	r0, [r2, #0]
 8004bb8:	7019      	strb	r1, [r3, #0]
 8004bba:	0008      	movs	r0, r1
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	f7ff fa85 	bl	80040cc <__swbuf_r>
 8004bc2:	0001      	movs	r1, r0
 8004bc4:	e7f9      	b.n	8004bba <__sfputc_r+0x1e>

08004bc6 <__sfputs_r>:
 8004bc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc8:	0006      	movs	r6, r0
 8004bca:	000f      	movs	r7, r1
 8004bcc:	0014      	movs	r4, r2
 8004bce:	18d5      	adds	r5, r2, r3
 8004bd0:	42ac      	cmp	r4, r5
 8004bd2:	d101      	bne.n	8004bd8 <__sfputs_r+0x12>
 8004bd4:	2000      	movs	r0, #0
 8004bd6:	e007      	b.n	8004be8 <__sfputs_r+0x22>
 8004bd8:	7821      	ldrb	r1, [r4, #0]
 8004bda:	003a      	movs	r2, r7
 8004bdc:	0030      	movs	r0, r6
 8004bde:	f7ff ffdd 	bl	8004b9c <__sfputc_r>
 8004be2:	3401      	adds	r4, #1
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d1f3      	bne.n	8004bd0 <__sfputs_r+0xa>
 8004be8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004bec <_vfiprintf_r>:
 8004bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bee:	b0a1      	sub	sp, #132	@ 0x84
 8004bf0:	000f      	movs	r7, r1
 8004bf2:	0015      	movs	r5, r2
 8004bf4:	001e      	movs	r6, r3
 8004bf6:	9003      	str	r0, [sp, #12]
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d004      	beq.n	8004c06 <_vfiprintf_r+0x1a>
 8004bfc:	6a03      	ldr	r3, [r0, #32]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d101      	bne.n	8004c06 <_vfiprintf_r+0x1a>
 8004c02:	f7ff f915 	bl	8003e30 <__sinit>
 8004c06:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c08:	07db      	lsls	r3, r3, #31
 8004c0a:	d405      	bmi.n	8004c18 <_vfiprintf_r+0x2c>
 8004c0c:	89bb      	ldrh	r3, [r7, #12]
 8004c0e:	059b      	lsls	r3, r3, #22
 8004c10:	d402      	bmi.n	8004c18 <_vfiprintf_r+0x2c>
 8004c12:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004c14:	f7ff fb9f 	bl	8004356 <__retarget_lock_acquire_recursive>
 8004c18:	89bb      	ldrh	r3, [r7, #12]
 8004c1a:	071b      	lsls	r3, r3, #28
 8004c1c:	d502      	bpl.n	8004c24 <_vfiprintf_r+0x38>
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d113      	bne.n	8004c4c <_vfiprintf_r+0x60>
 8004c24:	0039      	movs	r1, r7
 8004c26:	9803      	ldr	r0, [sp, #12]
 8004c28:	f7ff fa92 	bl	8004150 <__swsetup_r>
 8004c2c:	2800      	cmp	r0, #0
 8004c2e:	d00d      	beq.n	8004c4c <_vfiprintf_r+0x60>
 8004c30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c32:	07db      	lsls	r3, r3, #31
 8004c34:	d503      	bpl.n	8004c3e <_vfiprintf_r+0x52>
 8004c36:	2001      	movs	r0, #1
 8004c38:	4240      	negs	r0, r0
 8004c3a:	b021      	add	sp, #132	@ 0x84
 8004c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c3e:	89bb      	ldrh	r3, [r7, #12]
 8004c40:	059b      	lsls	r3, r3, #22
 8004c42:	d4f8      	bmi.n	8004c36 <_vfiprintf_r+0x4a>
 8004c44:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004c46:	f7ff fb87 	bl	8004358 <__retarget_lock_release_recursive>
 8004c4a:	e7f4      	b.n	8004c36 <_vfiprintf_r+0x4a>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	ac08      	add	r4, sp, #32
 8004c50:	6163      	str	r3, [r4, #20]
 8004c52:	3320      	adds	r3, #32
 8004c54:	7663      	strb	r3, [r4, #25]
 8004c56:	3310      	adds	r3, #16
 8004c58:	76a3      	strb	r3, [r4, #26]
 8004c5a:	9607      	str	r6, [sp, #28]
 8004c5c:	002e      	movs	r6, r5
 8004c5e:	7833      	ldrb	r3, [r6, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <_vfiprintf_r+0x7c>
 8004c64:	2b25      	cmp	r3, #37	@ 0x25
 8004c66:	d148      	bne.n	8004cfa <_vfiprintf_r+0x10e>
 8004c68:	1b73      	subs	r3, r6, r5
 8004c6a:	9305      	str	r3, [sp, #20]
 8004c6c:	42ae      	cmp	r6, r5
 8004c6e:	d00b      	beq.n	8004c88 <_vfiprintf_r+0x9c>
 8004c70:	002a      	movs	r2, r5
 8004c72:	0039      	movs	r1, r7
 8004c74:	9803      	ldr	r0, [sp, #12]
 8004c76:	f7ff ffa6 	bl	8004bc6 <__sfputs_r>
 8004c7a:	3001      	adds	r0, #1
 8004c7c:	d100      	bne.n	8004c80 <_vfiprintf_r+0x94>
 8004c7e:	e0ae      	b.n	8004dde <_vfiprintf_r+0x1f2>
 8004c80:	6963      	ldr	r3, [r4, #20]
 8004c82:	9a05      	ldr	r2, [sp, #20]
 8004c84:	189b      	adds	r3, r3, r2
 8004c86:	6163      	str	r3, [r4, #20]
 8004c88:	7833      	ldrb	r3, [r6, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d100      	bne.n	8004c90 <_vfiprintf_r+0xa4>
 8004c8e:	e0a6      	b.n	8004dde <_vfiprintf_r+0x1f2>
 8004c90:	2201      	movs	r2, #1
 8004c92:	2300      	movs	r3, #0
 8004c94:	4252      	negs	r2, r2
 8004c96:	6062      	str	r2, [r4, #4]
 8004c98:	a904      	add	r1, sp, #16
 8004c9a:	3254      	adds	r2, #84	@ 0x54
 8004c9c:	1852      	adds	r2, r2, r1
 8004c9e:	1c75      	adds	r5, r6, #1
 8004ca0:	6023      	str	r3, [r4, #0]
 8004ca2:	60e3      	str	r3, [r4, #12]
 8004ca4:	60a3      	str	r3, [r4, #8]
 8004ca6:	7013      	strb	r3, [r2, #0]
 8004ca8:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004caa:	4b59      	ldr	r3, [pc, #356]	@ (8004e10 <_vfiprintf_r+0x224>)
 8004cac:	2205      	movs	r2, #5
 8004cae:	0018      	movs	r0, r3
 8004cb0:	7829      	ldrb	r1, [r5, #0]
 8004cb2:	9305      	str	r3, [sp, #20]
 8004cb4:	f000 fd72 	bl	800579c <memchr>
 8004cb8:	1c6e      	adds	r6, r5, #1
 8004cba:	2800      	cmp	r0, #0
 8004cbc:	d11f      	bne.n	8004cfe <_vfiprintf_r+0x112>
 8004cbe:	6822      	ldr	r2, [r4, #0]
 8004cc0:	06d3      	lsls	r3, r2, #27
 8004cc2:	d504      	bpl.n	8004cce <_vfiprintf_r+0xe2>
 8004cc4:	2353      	movs	r3, #83	@ 0x53
 8004cc6:	a904      	add	r1, sp, #16
 8004cc8:	185b      	adds	r3, r3, r1
 8004cca:	2120      	movs	r1, #32
 8004ccc:	7019      	strb	r1, [r3, #0]
 8004cce:	0713      	lsls	r3, r2, #28
 8004cd0:	d504      	bpl.n	8004cdc <_vfiprintf_r+0xf0>
 8004cd2:	2353      	movs	r3, #83	@ 0x53
 8004cd4:	a904      	add	r1, sp, #16
 8004cd6:	185b      	adds	r3, r3, r1
 8004cd8:	212b      	movs	r1, #43	@ 0x2b
 8004cda:	7019      	strb	r1, [r3, #0]
 8004cdc:	782b      	ldrb	r3, [r5, #0]
 8004cde:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ce0:	d016      	beq.n	8004d10 <_vfiprintf_r+0x124>
 8004ce2:	002e      	movs	r6, r5
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	200a      	movs	r0, #10
 8004ce8:	68e3      	ldr	r3, [r4, #12]
 8004cea:	7832      	ldrb	r2, [r6, #0]
 8004cec:	1c75      	adds	r5, r6, #1
 8004cee:	3a30      	subs	r2, #48	@ 0x30
 8004cf0:	2a09      	cmp	r2, #9
 8004cf2:	d950      	bls.n	8004d96 <_vfiprintf_r+0x1aa>
 8004cf4:	2900      	cmp	r1, #0
 8004cf6:	d111      	bne.n	8004d1c <_vfiprintf_r+0x130>
 8004cf8:	e017      	b.n	8004d2a <_vfiprintf_r+0x13e>
 8004cfa:	3601      	adds	r6, #1
 8004cfc:	e7af      	b.n	8004c5e <_vfiprintf_r+0x72>
 8004cfe:	9b05      	ldr	r3, [sp, #20]
 8004d00:	6822      	ldr	r2, [r4, #0]
 8004d02:	1ac0      	subs	r0, r0, r3
 8004d04:	2301      	movs	r3, #1
 8004d06:	4083      	lsls	r3, r0
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	0035      	movs	r5, r6
 8004d0c:	6023      	str	r3, [r4, #0]
 8004d0e:	e7cc      	b.n	8004caa <_vfiprintf_r+0xbe>
 8004d10:	9b07      	ldr	r3, [sp, #28]
 8004d12:	1d19      	adds	r1, r3, #4
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	9107      	str	r1, [sp, #28]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	db01      	blt.n	8004d20 <_vfiprintf_r+0x134>
 8004d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d1e:	e004      	b.n	8004d2a <_vfiprintf_r+0x13e>
 8004d20:	425b      	negs	r3, r3
 8004d22:	60e3      	str	r3, [r4, #12]
 8004d24:	2302      	movs	r3, #2
 8004d26:	4313      	orrs	r3, r2
 8004d28:	6023      	str	r3, [r4, #0]
 8004d2a:	7833      	ldrb	r3, [r6, #0]
 8004d2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d2e:	d10c      	bne.n	8004d4a <_vfiprintf_r+0x15e>
 8004d30:	7873      	ldrb	r3, [r6, #1]
 8004d32:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d34:	d134      	bne.n	8004da0 <_vfiprintf_r+0x1b4>
 8004d36:	9b07      	ldr	r3, [sp, #28]
 8004d38:	3602      	adds	r6, #2
 8004d3a:	1d1a      	adds	r2, r3, #4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	9207      	str	r2, [sp, #28]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	da01      	bge.n	8004d48 <_vfiprintf_r+0x15c>
 8004d44:	2301      	movs	r3, #1
 8004d46:	425b      	negs	r3, r3
 8004d48:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d4a:	4d32      	ldr	r5, [pc, #200]	@ (8004e14 <_vfiprintf_r+0x228>)
 8004d4c:	2203      	movs	r2, #3
 8004d4e:	0028      	movs	r0, r5
 8004d50:	7831      	ldrb	r1, [r6, #0]
 8004d52:	f000 fd23 	bl	800579c <memchr>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d006      	beq.n	8004d68 <_vfiprintf_r+0x17c>
 8004d5a:	2340      	movs	r3, #64	@ 0x40
 8004d5c:	1b40      	subs	r0, r0, r5
 8004d5e:	4083      	lsls	r3, r0
 8004d60:	6822      	ldr	r2, [r4, #0]
 8004d62:	3601      	adds	r6, #1
 8004d64:	4313      	orrs	r3, r2
 8004d66:	6023      	str	r3, [r4, #0]
 8004d68:	7831      	ldrb	r1, [r6, #0]
 8004d6a:	2206      	movs	r2, #6
 8004d6c:	482a      	ldr	r0, [pc, #168]	@ (8004e18 <_vfiprintf_r+0x22c>)
 8004d6e:	1c75      	adds	r5, r6, #1
 8004d70:	7621      	strb	r1, [r4, #24]
 8004d72:	f000 fd13 	bl	800579c <memchr>
 8004d76:	2800      	cmp	r0, #0
 8004d78:	d040      	beq.n	8004dfc <_vfiprintf_r+0x210>
 8004d7a:	4b28      	ldr	r3, [pc, #160]	@ (8004e1c <_vfiprintf_r+0x230>)
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d122      	bne.n	8004dc6 <_vfiprintf_r+0x1da>
 8004d80:	2207      	movs	r2, #7
 8004d82:	9b07      	ldr	r3, [sp, #28]
 8004d84:	3307      	adds	r3, #7
 8004d86:	4393      	bics	r3, r2
 8004d88:	3308      	adds	r3, #8
 8004d8a:	9307      	str	r3, [sp, #28]
 8004d8c:	6963      	ldr	r3, [r4, #20]
 8004d8e:	9a04      	ldr	r2, [sp, #16]
 8004d90:	189b      	adds	r3, r3, r2
 8004d92:	6163      	str	r3, [r4, #20]
 8004d94:	e762      	b.n	8004c5c <_vfiprintf_r+0x70>
 8004d96:	4343      	muls	r3, r0
 8004d98:	002e      	movs	r6, r5
 8004d9a:	2101      	movs	r1, #1
 8004d9c:	189b      	adds	r3, r3, r2
 8004d9e:	e7a4      	b.n	8004cea <_vfiprintf_r+0xfe>
 8004da0:	2300      	movs	r3, #0
 8004da2:	200a      	movs	r0, #10
 8004da4:	0019      	movs	r1, r3
 8004da6:	3601      	adds	r6, #1
 8004da8:	6063      	str	r3, [r4, #4]
 8004daa:	7832      	ldrb	r2, [r6, #0]
 8004dac:	1c75      	adds	r5, r6, #1
 8004dae:	3a30      	subs	r2, #48	@ 0x30
 8004db0:	2a09      	cmp	r2, #9
 8004db2:	d903      	bls.n	8004dbc <_vfiprintf_r+0x1d0>
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d0c8      	beq.n	8004d4a <_vfiprintf_r+0x15e>
 8004db8:	9109      	str	r1, [sp, #36]	@ 0x24
 8004dba:	e7c6      	b.n	8004d4a <_vfiprintf_r+0x15e>
 8004dbc:	4341      	muls	r1, r0
 8004dbe:	002e      	movs	r6, r5
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	1889      	adds	r1, r1, r2
 8004dc4:	e7f1      	b.n	8004daa <_vfiprintf_r+0x1be>
 8004dc6:	aa07      	add	r2, sp, #28
 8004dc8:	9200      	str	r2, [sp, #0]
 8004dca:	0021      	movs	r1, r4
 8004dcc:	003a      	movs	r2, r7
 8004dce:	4b14      	ldr	r3, [pc, #80]	@ (8004e20 <_vfiprintf_r+0x234>)
 8004dd0:	9803      	ldr	r0, [sp, #12]
 8004dd2:	e000      	b.n	8004dd6 <_vfiprintf_r+0x1ea>
 8004dd4:	bf00      	nop
 8004dd6:	9004      	str	r0, [sp, #16]
 8004dd8:	9b04      	ldr	r3, [sp, #16]
 8004dda:	3301      	adds	r3, #1
 8004ddc:	d1d6      	bne.n	8004d8c <_vfiprintf_r+0x1a0>
 8004dde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004de0:	07db      	lsls	r3, r3, #31
 8004de2:	d405      	bmi.n	8004df0 <_vfiprintf_r+0x204>
 8004de4:	89bb      	ldrh	r3, [r7, #12]
 8004de6:	059b      	lsls	r3, r3, #22
 8004de8:	d402      	bmi.n	8004df0 <_vfiprintf_r+0x204>
 8004dea:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004dec:	f7ff fab4 	bl	8004358 <__retarget_lock_release_recursive>
 8004df0:	89bb      	ldrh	r3, [r7, #12]
 8004df2:	065b      	lsls	r3, r3, #25
 8004df4:	d500      	bpl.n	8004df8 <_vfiprintf_r+0x20c>
 8004df6:	e71e      	b.n	8004c36 <_vfiprintf_r+0x4a>
 8004df8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004dfa:	e71e      	b.n	8004c3a <_vfiprintf_r+0x4e>
 8004dfc:	aa07      	add	r2, sp, #28
 8004dfe:	9200      	str	r2, [sp, #0]
 8004e00:	0021      	movs	r1, r4
 8004e02:	003a      	movs	r2, r7
 8004e04:	4b06      	ldr	r3, [pc, #24]	@ (8004e20 <_vfiprintf_r+0x234>)
 8004e06:	9803      	ldr	r0, [sp, #12]
 8004e08:	f000 f87c 	bl	8004f04 <_printf_i>
 8004e0c:	e7e3      	b.n	8004dd6 <_vfiprintf_r+0x1ea>
 8004e0e:	46c0      	nop			@ (mov r8, r8)
 8004e10:	08005ee8 	.word	0x08005ee8
 8004e14:	08005eee 	.word	0x08005eee
 8004e18:	08005ef2 	.word	0x08005ef2
 8004e1c:	00000000 	.word	0x00000000
 8004e20:	08004bc7 	.word	0x08004bc7

08004e24 <_printf_common>:
 8004e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e26:	0016      	movs	r6, r2
 8004e28:	9301      	str	r3, [sp, #4]
 8004e2a:	688a      	ldr	r2, [r1, #8]
 8004e2c:	690b      	ldr	r3, [r1, #16]
 8004e2e:	000c      	movs	r4, r1
 8004e30:	9000      	str	r0, [sp, #0]
 8004e32:	4293      	cmp	r3, r2
 8004e34:	da00      	bge.n	8004e38 <_printf_common+0x14>
 8004e36:	0013      	movs	r3, r2
 8004e38:	0022      	movs	r2, r4
 8004e3a:	6033      	str	r3, [r6, #0]
 8004e3c:	3243      	adds	r2, #67	@ 0x43
 8004e3e:	7812      	ldrb	r2, [r2, #0]
 8004e40:	2a00      	cmp	r2, #0
 8004e42:	d001      	beq.n	8004e48 <_printf_common+0x24>
 8004e44:	3301      	adds	r3, #1
 8004e46:	6033      	str	r3, [r6, #0]
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	069b      	lsls	r3, r3, #26
 8004e4c:	d502      	bpl.n	8004e54 <_printf_common+0x30>
 8004e4e:	6833      	ldr	r3, [r6, #0]
 8004e50:	3302      	adds	r3, #2
 8004e52:	6033      	str	r3, [r6, #0]
 8004e54:	6822      	ldr	r2, [r4, #0]
 8004e56:	2306      	movs	r3, #6
 8004e58:	0015      	movs	r5, r2
 8004e5a:	401d      	ands	r5, r3
 8004e5c:	421a      	tst	r2, r3
 8004e5e:	d027      	beq.n	8004eb0 <_printf_common+0x8c>
 8004e60:	0023      	movs	r3, r4
 8004e62:	3343      	adds	r3, #67	@ 0x43
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	1e5a      	subs	r2, r3, #1
 8004e68:	4193      	sbcs	r3, r2
 8004e6a:	6822      	ldr	r2, [r4, #0]
 8004e6c:	0692      	lsls	r2, r2, #26
 8004e6e:	d430      	bmi.n	8004ed2 <_printf_common+0xae>
 8004e70:	0022      	movs	r2, r4
 8004e72:	9901      	ldr	r1, [sp, #4]
 8004e74:	9800      	ldr	r0, [sp, #0]
 8004e76:	9d08      	ldr	r5, [sp, #32]
 8004e78:	3243      	adds	r2, #67	@ 0x43
 8004e7a:	47a8      	blx	r5
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	d025      	beq.n	8004ecc <_printf_common+0xa8>
 8004e80:	2206      	movs	r2, #6
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	2500      	movs	r5, #0
 8004e86:	4013      	ands	r3, r2
 8004e88:	2b04      	cmp	r3, #4
 8004e8a:	d105      	bne.n	8004e98 <_printf_common+0x74>
 8004e8c:	6833      	ldr	r3, [r6, #0]
 8004e8e:	68e5      	ldr	r5, [r4, #12]
 8004e90:	1aed      	subs	r5, r5, r3
 8004e92:	43eb      	mvns	r3, r5
 8004e94:	17db      	asrs	r3, r3, #31
 8004e96:	401d      	ands	r5, r3
 8004e98:	68a3      	ldr	r3, [r4, #8]
 8004e9a:	6922      	ldr	r2, [r4, #16]
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	dd01      	ble.n	8004ea4 <_printf_common+0x80>
 8004ea0:	1a9b      	subs	r3, r3, r2
 8004ea2:	18ed      	adds	r5, r5, r3
 8004ea4:	2600      	movs	r6, #0
 8004ea6:	42b5      	cmp	r5, r6
 8004ea8:	d120      	bne.n	8004eec <_printf_common+0xc8>
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e010      	b.n	8004ed0 <_printf_common+0xac>
 8004eae:	3501      	adds	r5, #1
 8004eb0:	68e3      	ldr	r3, [r4, #12]
 8004eb2:	6832      	ldr	r2, [r6, #0]
 8004eb4:	1a9b      	subs	r3, r3, r2
 8004eb6:	42ab      	cmp	r3, r5
 8004eb8:	ddd2      	ble.n	8004e60 <_printf_common+0x3c>
 8004eba:	0022      	movs	r2, r4
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	9901      	ldr	r1, [sp, #4]
 8004ec0:	9800      	ldr	r0, [sp, #0]
 8004ec2:	9f08      	ldr	r7, [sp, #32]
 8004ec4:	3219      	adds	r2, #25
 8004ec6:	47b8      	blx	r7
 8004ec8:	3001      	adds	r0, #1
 8004eca:	d1f0      	bne.n	8004eae <_printf_common+0x8a>
 8004ecc:	2001      	movs	r0, #1
 8004ece:	4240      	negs	r0, r0
 8004ed0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ed2:	2030      	movs	r0, #48	@ 0x30
 8004ed4:	18e1      	adds	r1, r4, r3
 8004ed6:	3143      	adds	r1, #67	@ 0x43
 8004ed8:	7008      	strb	r0, [r1, #0]
 8004eda:	0021      	movs	r1, r4
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	3145      	adds	r1, #69	@ 0x45
 8004ee0:	7809      	ldrb	r1, [r1, #0]
 8004ee2:	18a2      	adds	r2, r4, r2
 8004ee4:	3243      	adds	r2, #67	@ 0x43
 8004ee6:	3302      	adds	r3, #2
 8004ee8:	7011      	strb	r1, [r2, #0]
 8004eea:	e7c1      	b.n	8004e70 <_printf_common+0x4c>
 8004eec:	0022      	movs	r2, r4
 8004eee:	2301      	movs	r3, #1
 8004ef0:	9901      	ldr	r1, [sp, #4]
 8004ef2:	9800      	ldr	r0, [sp, #0]
 8004ef4:	9f08      	ldr	r7, [sp, #32]
 8004ef6:	321a      	adds	r2, #26
 8004ef8:	47b8      	blx	r7
 8004efa:	3001      	adds	r0, #1
 8004efc:	d0e6      	beq.n	8004ecc <_printf_common+0xa8>
 8004efe:	3601      	adds	r6, #1
 8004f00:	e7d1      	b.n	8004ea6 <_printf_common+0x82>
	...

08004f04 <_printf_i>:
 8004f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f06:	b08b      	sub	sp, #44	@ 0x2c
 8004f08:	9206      	str	r2, [sp, #24]
 8004f0a:	000a      	movs	r2, r1
 8004f0c:	3243      	adds	r2, #67	@ 0x43
 8004f0e:	9307      	str	r3, [sp, #28]
 8004f10:	9005      	str	r0, [sp, #20]
 8004f12:	9203      	str	r2, [sp, #12]
 8004f14:	7e0a      	ldrb	r2, [r1, #24]
 8004f16:	000c      	movs	r4, r1
 8004f18:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f1a:	2a78      	cmp	r2, #120	@ 0x78
 8004f1c:	d809      	bhi.n	8004f32 <_printf_i+0x2e>
 8004f1e:	2a62      	cmp	r2, #98	@ 0x62
 8004f20:	d80b      	bhi.n	8004f3a <_printf_i+0x36>
 8004f22:	2a00      	cmp	r2, #0
 8004f24:	d100      	bne.n	8004f28 <_printf_i+0x24>
 8004f26:	e0bc      	b.n	80050a2 <_printf_i+0x19e>
 8004f28:	497b      	ldr	r1, [pc, #492]	@ (8005118 <_printf_i+0x214>)
 8004f2a:	9104      	str	r1, [sp, #16]
 8004f2c:	2a58      	cmp	r2, #88	@ 0x58
 8004f2e:	d100      	bne.n	8004f32 <_printf_i+0x2e>
 8004f30:	e090      	b.n	8005054 <_printf_i+0x150>
 8004f32:	0025      	movs	r5, r4
 8004f34:	3542      	adds	r5, #66	@ 0x42
 8004f36:	702a      	strb	r2, [r5, #0]
 8004f38:	e022      	b.n	8004f80 <_printf_i+0x7c>
 8004f3a:	0010      	movs	r0, r2
 8004f3c:	3863      	subs	r0, #99	@ 0x63
 8004f3e:	2815      	cmp	r0, #21
 8004f40:	d8f7      	bhi.n	8004f32 <_printf_i+0x2e>
 8004f42:	f7fb f8e9 	bl	8000118 <__gnu_thumb1_case_shi>
 8004f46:	0016      	.short	0x0016
 8004f48:	fff6001f 	.word	0xfff6001f
 8004f4c:	fff6fff6 	.word	0xfff6fff6
 8004f50:	001ffff6 	.word	0x001ffff6
 8004f54:	fff6fff6 	.word	0xfff6fff6
 8004f58:	fff6fff6 	.word	0xfff6fff6
 8004f5c:	003600a1 	.word	0x003600a1
 8004f60:	fff60080 	.word	0xfff60080
 8004f64:	00b2fff6 	.word	0x00b2fff6
 8004f68:	0036fff6 	.word	0x0036fff6
 8004f6c:	fff6fff6 	.word	0xfff6fff6
 8004f70:	0084      	.short	0x0084
 8004f72:	0025      	movs	r5, r4
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	3542      	adds	r5, #66	@ 0x42
 8004f78:	1d11      	adds	r1, r2, #4
 8004f7a:	6019      	str	r1, [r3, #0]
 8004f7c:	6813      	ldr	r3, [r2, #0]
 8004f7e:	702b      	strb	r3, [r5, #0]
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0a0      	b.n	80050c6 <_printf_i+0x1c2>
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	6809      	ldr	r1, [r1, #0]
 8004f88:	1d02      	adds	r2, r0, #4
 8004f8a:	060d      	lsls	r5, r1, #24
 8004f8c:	d50b      	bpl.n	8004fa6 <_printf_i+0xa2>
 8004f8e:	6806      	ldr	r6, [r0, #0]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	2e00      	cmp	r6, #0
 8004f94:	da03      	bge.n	8004f9e <_printf_i+0x9a>
 8004f96:	232d      	movs	r3, #45	@ 0x2d
 8004f98:	9a03      	ldr	r2, [sp, #12]
 8004f9a:	4276      	negs	r6, r6
 8004f9c:	7013      	strb	r3, [r2, #0]
 8004f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8005118 <_printf_i+0x214>)
 8004fa0:	270a      	movs	r7, #10
 8004fa2:	9304      	str	r3, [sp, #16]
 8004fa4:	e018      	b.n	8004fd8 <_printf_i+0xd4>
 8004fa6:	6806      	ldr	r6, [r0, #0]
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	0649      	lsls	r1, r1, #25
 8004fac:	d5f1      	bpl.n	8004f92 <_printf_i+0x8e>
 8004fae:	b236      	sxth	r6, r6
 8004fb0:	e7ef      	b.n	8004f92 <_printf_i+0x8e>
 8004fb2:	6808      	ldr	r0, [r1, #0]
 8004fb4:	6819      	ldr	r1, [r3, #0]
 8004fb6:	c940      	ldmia	r1!, {r6}
 8004fb8:	0605      	lsls	r5, r0, #24
 8004fba:	d402      	bmi.n	8004fc2 <_printf_i+0xbe>
 8004fbc:	0640      	lsls	r0, r0, #25
 8004fbe:	d500      	bpl.n	8004fc2 <_printf_i+0xbe>
 8004fc0:	b2b6      	uxth	r6, r6
 8004fc2:	6019      	str	r1, [r3, #0]
 8004fc4:	4b54      	ldr	r3, [pc, #336]	@ (8005118 <_printf_i+0x214>)
 8004fc6:	270a      	movs	r7, #10
 8004fc8:	9304      	str	r3, [sp, #16]
 8004fca:	2a6f      	cmp	r2, #111	@ 0x6f
 8004fcc:	d100      	bne.n	8004fd0 <_printf_i+0xcc>
 8004fce:	3f02      	subs	r7, #2
 8004fd0:	0023      	movs	r3, r4
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	3343      	adds	r3, #67	@ 0x43
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	6863      	ldr	r3, [r4, #4]
 8004fda:	60a3      	str	r3, [r4, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	db03      	blt.n	8004fe8 <_printf_i+0xe4>
 8004fe0:	2104      	movs	r1, #4
 8004fe2:	6822      	ldr	r2, [r4, #0]
 8004fe4:	438a      	bics	r2, r1
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	2e00      	cmp	r6, #0
 8004fea:	d102      	bne.n	8004ff2 <_printf_i+0xee>
 8004fec:	9d03      	ldr	r5, [sp, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00c      	beq.n	800500c <_printf_i+0x108>
 8004ff2:	9d03      	ldr	r5, [sp, #12]
 8004ff4:	0030      	movs	r0, r6
 8004ff6:	0039      	movs	r1, r7
 8004ff8:	f7fb f91e 	bl	8000238 <__aeabi_uidivmod>
 8004ffc:	9b04      	ldr	r3, [sp, #16]
 8004ffe:	3d01      	subs	r5, #1
 8005000:	5c5b      	ldrb	r3, [r3, r1]
 8005002:	702b      	strb	r3, [r5, #0]
 8005004:	0033      	movs	r3, r6
 8005006:	0006      	movs	r6, r0
 8005008:	429f      	cmp	r7, r3
 800500a:	d9f3      	bls.n	8004ff4 <_printf_i+0xf0>
 800500c:	2f08      	cmp	r7, #8
 800500e:	d109      	bne.n	8005024 <_printf_i+0x120>
 8005010:	6823      	ldr	r3, [r4, #0]
 8005012:	07db      	lsls	r3, r3, #31
 8005014:	d506      	bpl.n	8005024 <_printf_i+0x120>
 8005016:	6862      	ldr	r2, [r4, #4]
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	dc02      	bgt.n	8005024 <_printf_i+0x120>
 800501e:	2330      	movs	r3, #48	@ 0x30
 8005020:	3d01      	subs	r5, #1
 8005022:	702b      	strb	r3, [r5, #0]
 8005024:	9b03      	ldr	r3, [sp, #12]
 8005026:	1b5b      	subs	r3, r3, r5
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	9b07      	ldr	r3, [sp, #28]
 800502c:	0021      	movs	r1, r4
 800502e:	9300      	str	r3, [sp, #0]
 8005030:	9805      	ldr	r0, [sp, #20]
 8005032:	9b06      	ldr	r3, [sp, #24]
 8005034:	aa09      	add	r2, sp, #36	@ 0x24
 8005036:	f7ff fef5 	bl	8004e24 <_printf_common>
 800503a:	3001      	adds	r0, #1
 800503c:	d148      	bne.n	80050d0 <_printf_i+0x1cc>
 800503e:	2001      	movs	r0, #1
 8005040:	4240      	negs	r0, r0
 8005042:	b00b      	add	sp, #44	@ 0x2c
 8005044:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005046:	2220      	movs	r2, #32
 8005048:	6809      	ldr	r1, [r1, #0]
 800504a:	430a      	orrs	r2, r1
 800504c:	6022      	str	r2, [r4, #0]
 800504e:	2278      	movs	r2, #120	@ 0x78
 8005050:	4932      	ldr	r1, [pc, #200]	@ (800511c <_printf_i+0x218>)
 8005052:	9104      	str	r1, [sp, #16]
 8005054:	0021      	movs	r1, r4
 8005056:	3145      	adds	r1, #69	@ 0x45
 8005058:	700a      	strb	r2, [r1, #0]
 800505a:	6819      	ldr	r1, [r3, #0]
 800505c:	6822      	ldr	r2, [r4, #0]
 800505e:	c940      	ldmia	r1!, {r6}
 8005060:	0610      	lsls	r0, r2, #24
 8005062:	d402      	bmi.n	800506a <_printf_i+0x166>
 8005064:	0650      	lsls	r0, r2, #25
 8005066:	d500      	bpl.n	800506a <_printf_i+0x166>
 8005068:	b2b6      	uxth	r6, r6
 800506a:	6019      	str	r1, [r3, #0]
 800506c:	07d3      	lsls	r3, r2, #31
 800506e:	d502      	bpl.n	8005076 <_printf_i+0x172>
 8005070:	2320      	movs	r3, #32
 8005072:	4313      	orrs	r3, r2
 8005074:	6023      	str	r3, [r4, #0]
 8005076:	2e00      	cmp	r6, #0
 8005078:	d001      	beq.n	800507e <_printf_i+0x17a>
 800507a:	2710      	movs	r7, #16
 800507c:	e7a8      	b.n	8004fd0 <_printf_i+0xcc>
 800507e:	2220      	movs	r2, #32
 8005080:	6823      	ldr	r3, [r4, #0]
 8005082:	4393      	bics	r3, r2
 8005084:	6023      	str	r3, [r4, #0]
 8005086:	e7f8      	b.n	800507a <_printf_i+0x176>
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	680d      	ldr	r5, [r1, #0]
 800508c:	1d10      	adds	r0, r2, #4
 800508e:	6949      	ldr	r1, [r1, #20]
 8005090:	6018      	str	r0, [r3, #0]
 8005092:	6813      	ldr	r3, [r2, #0]
 8005094:	062e      	lsls	r6, r5, #24
 8005096:	d501      	bpl.n	800509c <_printf_i+0x198>
 8005098:	6019      	str	r1, [r3, #0]
 800509a:	e002      	b.n	80050a2 <_printf_i+0x19e>
 800509c:	066d      	lsls	r5, r5, #25
 800509e:	d5fb      	bpl.n	8005098 <_printf_i+0x194>
 80050a0:	8019      	strh	r1, [r3, #0]
 80050a2:	2300      	movs	r3, #0
 80050a4:	9d03      	ldr	r5, [sp, #12]
 80050a6:	6123      	str	r3, [r4, #16]
 80050a8:	e7bf      	b.n	800502a <_printf_i+0x126>
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	1d11      	adds	r1, r2, #4
 80050ae:	6019      	str	r1, [r3, #0]
 80050b0:	6815      	ldr	r5, [r2, #0]
 80050b2:	2100      	movs	r1, #0
 80050b4:	0028      	movs	r0, r5
 80050b6:	6862      	ldr	r2, [r4, #4]
 80050b8:	f000 fb70 	bl	800579c <memchr>
 80050bc:	2800      	cmp	r0, #0
 80050be:	d001      	beq.n	80050c4 <_printf_i+0x1c0>
 80050c0:	1b40      	subs	r0, r0, r5
 80050c2:	6060      	str	r0, [r4, #4]
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	6123      	str	r3, [r4, #16]
 80050c8:	2300      	movs	r3, #0
 80050ca:	9a03      	ldr	r2, [sp, #12]
 80050cc:	7013      	strb	r3, [r2, #0]
 80050ce:	e7ac      	b.n	800502a <_printf_i+0x126>
 80050d0:	002a      	movs	r2, r5
 80050d2:	6923      	ldr	r3, [r4, #16]
 80050d4:	9906      	ldr	r1, [sp, #24]
 80050d6:	9805      	ldr	r0, [sp, #20]
 80050d8:	9d07      	ldr	r5, [sp, #28]
 80050da:	47a8      	blx	r5
 80050dc:	3001      	adds	r0, #1
 80050de:	d0ae      	beq.n	800503e <_printf_i+0x13a>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	079b      	lsls	r3, r3, #30
 80050e4:	d415      	bmi.n	8005112 <_printf_i+0x20e>
 80050e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80050e8:	68e0      	ldr	r0, [r4, #12]
 80050ea:	4298      	cmp	r0, r3
 80050ec:	daa9      	bge.n	8005042 <_printf_i+0x13e>
 80050ee:	0018      	movs	r0, r3
 80050f0:	e7a7      	b.n	8005042 <_printf_i+0x13e>
 80050f2:	0022      	movs	r2, r4
 80050f4:	2301      	movs	r3, #1
 80050f6:	9906      	ldr	r1, [sp, #24]
 80050f8:	9805      	ldr	r0, [sp, #20]
 80050fa:	9e07      	ldr	r6, [sp, #28]
 80050fc:	3219      	adds	r2, #25
 80050fe:	47b0      	blx	r6
 8005100:	3001      	adds	r0, #1
 8005102:	d09c      	beq.n	800503e <_printf_i+0x13a>
 8005104:	3501      	adds	r5, #1
 8005106:	68e3      	ldr	r3, [r4, #12]
 8005108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800510a:	1a9b      	subs	r3, r3, r2
 800510c:	42ab      	cmp	r3, r5
 800510e:	dcf0      	bgt.n	80050f2 <_printf_i+0x1ee>
 8005110:	e7e9      	b.n	80050e6 <_printf_i+0x1e2>
 8005112:	2500      	movs	r5, #0
 8005114:	e7f7      	b.n	8005106 <_printf_i+0x202>
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	08005ef9 	.word	0x08005ef9
 800511c:	08005f0a 	.word	0x08005f0a

08005120 <_scanf_chars>:
 8005120:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005122:	0015      	movs	r5, r2
 8005124:	688a      	ldr	r2, [r1, #8]
 8005126:	000c      	movs	r4, r1
 8005128:	9001      	str	r0, [sp, #4]
 800512a:	2a00      	cmp	r2, #0
 800512c:	d104      	bne.n	8005138 <_scanf_chars+0x18>
 800512e:	698a      	ldr	r2, [r1, #24]
 8005130:	2a00      	cmp	r2, #0
 8005132:	d117      	bne.n	8005164 <_scanf_chars+0x44>
 8005134:	3201      	adds	r2, #1
 8005136:	60a2      	str	r2, [r4, #8]
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	06d2      	lsls	r2, r2, #27
 800513c:	d403      	bmi.n	8005146 <_scanf_chars+0x26>
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	1d11      	adds	r1, r2, #4
 8005142:	6019      	str	r1, [r3, #0]
 8005144:	6817      	ldr	r7, [r2, #0]
 8005146:	2600      	movs	r6, #0
 8005148:	69a0      	ldr	r0, [r4, #24]
 800514a:	2800      	cmp	r0, #0
 800514c:	d016      	beq.n	800517c <_scanf_chars+0x5c>
 800514e:	2801      	cmp	r0, #1
 8005150:	d10b      	bne.n	800516a <_scanf_chars+0x4a>
 8005152:	682b      	ldr	r3, [r5, #0]
 8005154:	6962      	ldr	r2, [r4, #20]
 8005156:	781b      	ldrb	r3, [r3, #0]
 8005158:	5cd3      	ldrb	r3, [r2, r3]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10e      	bne.n	800517c <_scanf_chars+0x5c>
 800515e:	2e00      	cmp	r6, #0
 8005160:	d03b      	beq.n	80051da <_scanf_chars+0xba>
 8005162:	e029      	b.n	80051b8 <_scanf_chars+0x98>
 8005164:	2201      	movs	r2, #1
 8005166:	4252      	negs	r2, r2
 8005168:	e7e5      	b.n	8005136 <_scanf_chars+0x16>
 800516a:	2802      	cmp	r0, #2
 800516c:	d124      	bne.n	80051b8 <_scanf_chars+0x98>
 800516e:	682b      	ldr	r3, [r5, #0]
 8005170:	4a1a      	ldr	r2, [pc, #104]	@ (80051dc <_scanf_chars+0xbc>)
 8005172:	781b      	ldrb	r3, [r3, #0]
 8005174:	5cd3      	ldrb	r3, [r2, r3]
 8005176:	2208      	movs	r2, #8
 8005178:	4213      	tst	r3, r2
 800517a:	d11d      	bne.n	80051b8 <_scanf_chars+0x98>
 800517c:	2210      	movs	r2, #16
 800517e:	6823      	ldr	r3, [r4, #0]
 8005180:	3601      	adds	r6, #1
 8005182:	4213      	tst	r3, r2
 8005184:	d103      	bne.n	800518e <_scanf_chars+0x6e>
 8005186:	682b      	ldr	r3, [r5, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	703b      	strb	r3, [r7, #0]
 800518c:	3701      	adds	r7, #1
 800518e:	682a      	ldr	r2, [r5, #0]
 8005190:	686b      	ldr	r3, [r5, #4]
 8005192:	3201      	adds	r2, #1
 8005194:	602a      	str	r2, [r5, #0]
 8005196:	68a2      	ldr	r2, [r4, #8]
 8005198:	3b01      	subs	r3, #1
 800519a:	3a01      	subs	r2, #1
 800519c:	606b      	str	r3, [r5, #4]
 800519e:	60a2      	str	r2, [r4, #8]
 80051a0:	2a00      	cmp	r2, #0
 80051a2:	d009      	beq.n	80051b8 <_scanf_chars+0x98>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	dccf      	bgt.n	8005148 <_scanf_chars+0x28>
 80051a8:	23c0      	movs	r3, #192	@ 0xc0
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	0029      	movs	r1, r5
 80051ae:	58e3      	ldr	r3, [r4, r3]
 80051b0:	9801      	ldr	r0, [sp, #4]
 80051b2:	4798      	blx	r3
 80051b4:	2800      	cmp	r0, #0
 80051b6:	d0c7      	beq.n	8005148 <_scanf_chars+0x28>
 80051b8:	6822      	ldr	r2, [r4, #0]
 80051ba:	2310      	movs	r3, #16
 80051bc:	0011      	movs	r1, r2
 80051be:	4019      	ands	r1, r3
 80051c0:	421a      	tst	r2, r3
 80051c2:	d106      	bne.n	80051d2 <_scanf_chars+0xb2>
 80051c4:	68e3      	ldr	r3, [r4, #12]
 80051c6:	3301      	adds	r3, #1
 80051c8:	60e3      	str	r3, [r4, #12]
 80051ca:	69a3      	ldr	r3, [r4, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d000      	beq.n	80051d2 <_scanf_chars+0xb2>
 80051d0:	7039      	strb	r1, [r7, #0]
 80051d2:	2000      	movs	r0, #0
 80051d4:	6923      	ldr	r3, [r4, #16]
 80051d6:	199b      	adds	r3, r3, r6
 80051d8:	6123      	str	r3, [r4, #16]
 80051da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80051dc:	08005f37 	.word	0x08005f37

080051e0 <_scanf_i>:
 80051e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051e2:	b08b      	sub	sp, #44	@ 0x2c
 80051e4:	9301      	str	r3, [sp, #4]
 80051e6:	4b78      	ldr	r3, [pc, #480]	@ (80053c8 <_scanf_i+0x1e8>)
 80051e8:	0016      	movs	r6, r2
 80051ea:	9004      	str	r0, [sp, #16]
 80051ec:	aa07      	add	r2, sp, #28
 80051ee:	cba1      	ldmia	r3!, {r0, r5, r7}
 80051f0:	c2a1      	stmia	r2!, {r0, r5, r7}
 80051f2:	4a76      	ldr	r2, [pc, #472]	@ (80053cc <_scanf_i+0x1ec>)
 80051f4:	698b      	ldr	r3, [r1, #24]
 80051f6:	000c      	movs	r4, r1
 80051f8:	9205      	str	r2, [sp, #20]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d101      	bne.n	8005202 <_scanf_i+0x22>
 80051fe:	4b74      	ldr	r3, [pc, #464]	@ (80053d0 <_scanf_i+0x1f0>)
 8005200:	9305      	str	r3, [sp, #20]
 8005202:	22ae      	movs	r2, #174	@ 0xae
 8005204:	2000      	movs	r0, #0
 8005206:	68a3      	ldr	r3, [r4, #8]
 8005208:	0052      	lsls	r2, r2, #1
 800520a:	1e59      	subs	r1, r3, #1
 800520c:	9003      	str	r0, [sp, #12]
 800520e:	4291      	cmp	r1, r2
 8005210:	d905      	bls.n	800521e <_scanf_i+0x3e>
 8005212:	3b5e      	subs	r3, #94	@ 0x5e
 8005214:	3bff      	subs	r3, #255	@ 0xff
 8005216:	9303      	str	r3, [sp, #12]
 8005218:	235e      	movs	r3, #94	@ 0x5e
 800521a:	33ff      	adds	r3, #255	@ 0xff
 800521c:	60a3      	str	r3, [r4, #8]
 800521e:	0023      	movs	r3, r4
 8005220:	331c      	adds	r3, #28
 8005222:	9300      	str	r3, [sp, #0]
 8005224:	23d0      	movs	r3, #208	@ 0xd0
 8005226:	2700      	movs	r7, #0
 8005228:	6822      	ldr	r2, [r4, #0]
 800522a:	011b      	lsls	r3, r3, #4
 800522c:	4313      	orrs	r3, r2
 800522e:	6023      	str	r3, [r4, #0]
 8005230:	9b00      	ldr	r3, [sp, #0]
 8005232:	9302      	str	r3, [sp, #8]
 8005234:	6833      	ldr	r3, [r6, #0]
 8005236:	a807      	add	r0, sp, #28
 8005238:	7819      	ldrb	r1, [r3, #0]
 800523a:	00bb      	lsls	r3, r7, #2
 800523c:	2202      	movs	r2, #2
 800523e:	5818      	ldr	r0, [r3, r0]
 8005240:	f000 faac 	bl	800579c <memchr>
 8005244:	2800      	cmp	r0, #0
 8005246:	d029      	beq.n	800529c <_scanf_i+0xbc>
 8005248:	2f01      	cmp	r7, #1
 800524a:	d15e      	bne.n	800530a <_scanf_i+0x12a>
 800524c:	6863      	ldr	r3, [r4, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <_scanf_i+0x80>
 8005252:	3308      	adds	r3, #8
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	6063      	str	r3, [r4, #4]
 8005258:	33f9      	adds	r3, #249	@ 0xf9
 800525a:	33ff      	adds	r3, #255	@ 0xff
 800525c:	4313      	orrs	r3, r2
 800525e:	6023      	str	r3, [r4, #0]
 8005260:	6823      	ldr	r3, [r4, #0]
 8005262:	4a5c      	ldr	r2, [pc, #368]	@ (80053d4 <_scanf_i+0x1f4>)
 8005264:	4013      	ands	r3, r2
 8005266:	6023      	str	r3, [r4, #0]
 8005268:	68a3      	ldr	r3, [r4, #8]
 800526a:	1e5a      	subs	r2, r3, #1
 800526c:	60a2      	str	r2, [r4, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d014      	beq.n	800529c <_scanf_i+0xbc>
 8005272:	6833      	ldr	r3, [r6, #0]
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	6032      	str	r2, [r6, #0]
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	9a02      	ldr	r2, [sp, #8]
 800527c:	7013      	strb	r3, [r2, #0]
 800527e:	6873      	ldr	r3, [r6, #4]
 8005280:	1c55      	adds	r5, r2, #1
 8005282:	3b01      	subs	r3, #1
 8005284:	6073      	str	r3, [r6, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	dc07      	bgt.n	800529a <_scanf_i+0xba>
 800528a:	23c0      	movs	r3, #192	@ 0xc0
 800528c:	005b      	lsls	r3, r3, #1
 800528e:	0031      	movs	r1, r6
 8005290:	58e3      	ldr	r3, [r4, r3]
 8005292:	9804      	ldr	r0, [sp, #16]
 8005294:	4798      	blx	r3
 8005296:	2800      	cmp	r0, #0
 8005298:	d17e      	bne.n	8005398 <_scanf_i+0x1b8>
 800529a:	9502      	str	r5, [sp, #8]
 800529c:	3701      	adds	r7, #1
 800529e:	2f03      	cmp	r7, #3
 80052a0:	d1c8      	bne.n	8005234 <_scanf_i+0x54>
 80052a2:	6863      	ldr	r3, [r4, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <_scanf_i+0xcc>
 80052a8:	330a      	adds	r3, #10
 80052aa:	6063      	str	r3, [r4, #4]
 80052ac:	2700      	movs	r7, #0
 80052ae:	6863      	ldr	r3, [r4, #4]
 80052b0:	4949      	ldr	r1, [pc, #292]	@ (80053d8 <_scanf_i+0x1f8>)
 80052b2:	6960      	ldr	r0, [r4, #20]
 80052b4:	1ac9      	subs	r1, r1, r3
 80052b6:	f000 f9b0 	bl	800561a <__sccl>
 80052ba:	9d02      	ldr	r5, [sp, #8]
 80052bc:	68a3      	ldr	r3, [r4, #8]
 80052be:	6820      	ldr	r0, [r4, #0]
 80052c0:	9302      	str	r3, [sp, #8]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d03f      	beq.n	8005346 <_scanf_i+0x166>
 80052c6:	6831      	ldr	r1, [r6, #0]
 80052c8:	6963      	ldr	r3, [r4, #20]
 80052ca:	780a      	ldrb	r2, [r1, #0]
 80052cc:	5c9b      	ldrb	r3, [r3, r2]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d039      	beq.n	8005346 <_scanf_i+0x166>
 80052d2:	2a30      	cmp	r2, #48	@ 0x30
 80052d4:	d128      	bne.n	8005328 <_scanf_i+0x148>
 80052d6:	2380      	movs	r3, #128	@ 0x80
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4218      	tst	r0, r3
 80052dc:	d024      	beq.n	8005328 <_scanf_i+0x148>
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	3701      	adds	r7, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <_scanf_i+0x112>
 80052e6:	001a      	movs	r2, r3
 80052e8:	9b02      	ldr	r3, [sp, #8]
 80052ea:	3a01      	subs	r2, #1
 80052ec:	3301      	adds	r3, #1
 80052ee:	9203      	str	r2, [sp, #12]
 80052f0:	60a3      	str	r3, [r4, #8]
 80052f2:	6873      	ldr	r3, [r6, #4]
 80052f4:	3b01      	subs	r3, #1
 80052f6:	6073      	str	r3, [r6, #4]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	dd1c      	ble.n	8005336 <_scanf_i+0x156>
 80052fc:	6833      	ldr	r3, [r6, #0]
 80052fe:	3301      	adds	r3, #1
 8005300:	6033      	str	r3, [r6, #0]
 8005302:	68a3      	ldr	r3, [r4, #8]
 8005304:	3b01      	subs	r3, #1
 8005306:	60a3      	str	r3, [r4, #8]
 8005308:	e7d8      	b.n	80052bc <_scanf_i+0xdc>
 800530a:	2f02      	cmp	r7, #2
 800530c:	d1ac      	bne.n	8005268 <_scanf_i+0x88>
 800530e:	23c0      	movs	r3, #192	@ 0xc0
 8005310:	2180      	movs	r1, #128	@ 0x80
 8005312:	6822      	ldr	r2, [r4, #0]
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	4013      	ands	r3, r2
 8005318:	0089      	lsls	r1, r1, #2
 800531a:	428b      	cmp	r3, r1
 800531c:	d1c1      	bne.n	80052a2 <_scanf_i+0xc2>
 800531e:	2310      	movs	r3, #16
 8005320:	6063      	str	r3, [r4, #4]
 8005322:	33f0      	adds	r3, #240	@ 0xf0
 8005324:	4313      	orrs	r3, r2
 8005326:	e79e      	b.n	8005266 <_scanf_i+0x86>
 8005328:	4b2c      	ldr	r3, [pc, #176]	@ (80053dc <_scanf_i+0x1fc>)
 800532a:	4003      	ands	r3, r0
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	780b      	ldrb	r3, [r1, #0]
 8005330:	702b      	strb	r3, [r5, #0]
 8005332:	3501      	adds	r5, #1
 8005334:	e7dd      	b.n	80052f2 <_scanf_i+0x112>
 8005336:	23c0      	movs	r3, #192	@ 0xc0
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	0031      	movs	r1, r6
 800533c:	58e3      	ldr	r3, [r4, r3]
 800533e:	9804      	ldr	r0, [sp, #16]
 8005340:	4798      	blx	r3
 8005342:	2800      	cmp	r0, #0
 8005344:	d0dd      	beq.n	8005302 <_scanf_i+0x122>
 8005346:	6823      	ldr	r3, [r4, #0]
 8005348:	05db      	lsls	r3, r3, #23
 800534a:	d50e      	bpl.n	800536a <_scanf_i+0x18a>
 800534c:	9b00      	ldr	r3, [sp, #0]
 800534e:	429d      	cmp	r5, r3
 8005350:	d907      	bls.n	8005362 <_scanf_i+0x182>
 8005352:	23be      	movs	r3, #190	@ 0xbe
 8005354:	3d01      	subs	r5, #1
 8005356:	005b      	lsls	r3, r3, #1
 8005358:	0032      	movs	r2, r6
 800535a:	7829      	ldrb	r1, [r5, #0]
 800535c:	58e3      	ldr	r3, [r4, r3]
 800535e:	9804      	ldr	r0, [sp, #16]
 8005360:	4798      	blx	r3
 8005362:	9b00      	ldr	r3, [sp, #0]
 8005364:	2001      	movs	r0, #1
 8005366:	429d      	cmp	r5, r3
 8005368:	d029      	beq.n	80053be <_scanf_i+0x1de>
 800536a:	6821      	ldr	r1, [r4, #0]
 800536c:	2310      	movs	r3, #16
 800536e:	000a      	movs	r2, r1
 8005370:	401a      	ands	r2, r3
 8005372:	4219      	tst	r1, r3
 8005374:	d11c      	bne.n	80053b0 <_scanf_i+0x1d0>
 8005376:	702a      	strb	r2, [r5, #0]
 8005378:	6863      	ldr	r3, [r4, #4]
 800537a:	9900      	ldr	r1, [sp, #0]
 800537c:	9804      	ldr	r0, [sp, #16]
 800537e:	9e05      	ldr	r6, [sp, #20]
 8005380:	47b0      	blx	r6
 8005382:	9b01      	ldr	r3, [sp, #4]
 8005384:	6822      	ldr	r2, [r4, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	0691      	lsls	r1, r2, #26
 800538a:	d507      	bpl.n	800539c <_scanf_i+0x1bc>
 800538c:	9901      	ldr	r1, [sp, #4]
 800538e:	1d1a      	adds	r2, r3, #4
 8005390:	600a      	str	r2, [r1, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6018      	str	r0, [r3, #0]
 8005396:	e008      	b.n	80053aa <_scanf_i+0x1ca>
 8005398:	2700      	movs	r7, #0
 800539a:	e7d4      	b.n	8005346 <_scanf_i+0x166>
 800539c:	1d19      	adds	r1, r3, #4
 800539e:	07d6      	lsls	r6, r2, #31
 80053a0:	d50f      	bpl.n	80053c2 <_scanf_i+0x1e2>
 80053a2:	9a01      	ldr	r2, [sp, #4]
 80053a4:	6011      	str	r1, [r2, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	8018      	strh	r0, [r3, #0]
 80053aa:	68e3      	ldr	r3, [r4, #12]
 80053ac:	3301      	adds	r3, #1
 80053ae:	60e3      	str	r3, [r4, #12]
 80053b0:	2000      	movs	r0, #0
 80053b2:	9b00      	ldr	r3, [sp, #0]
 80053b4:	1aed      	subs	r5, r5, r3
 80053b6:	6923      	ldr	r3, [r4, #16]
 80053b8:	19ed      	adds	r5, r5, r7
 80053ba:	195b      	adds	r3, r3, r5
 80053bc:	6123      	str	r3, [r4, #16]
 80053be:	b00b      	add	sp, #44	@ 0x2c
 80053c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c2:	9a01      	ldr	r2, [sp, #4]
 80053c4:	6011      	str	r1, [r2, #0]
 80053c6:	e7e4      	b.n	8005392 <_scanf_i+0x1b2>
 80053c8:	08005e64 	.word	0x08005e64
 80053cc:	08005a31 	.word	0x08005a31
 80053d0:	08005925 	.word	0x08005925
 80053d4:	fffffaff 	.word	0xfffffaff
 80053d8:	08005f2b 	.word	0x08005f2b
 80053dc:	fffff6ff 	.word	0xfffff6ff

080053e0 <__sflush_r>:
 80053e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053e2:	220c      	movs	r2, #12
 80053e4:	5e8b      	ldrsh	r3, [r1, r2]
 80053e6:	0005      	movs	r5, r0
 80053e8:	000c      	movs	r4, r1
 80053ea:	071a      	lsls	r2, r3, #28
 80053ec:	d456      	bmi.n	800549c <__sflush_r+0xbc>
 80053ee:	684a      	ldr	r2, [r1, #4]
 80053f0:	2a00      	cmp	r2, #0
 80053f2:	dc02      	bgt.n	80053fa <__sflush_r+0x1a>
 80053f4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 80053f6:	2a00      	cmp	r2, #0
 80053f8:	dd4e      	ble.n	8005498 <__sflush_r+0xb8>
 80053fa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80053fc:	2f00      	cmp	r7, #0
 80053fe:	d04b      	beq.n	8005498 <__sflush_r+0xb8>
 8005400:	2200      	movs	r2, #0
 8005402:	2080      	movs	r0, #128	@ 0x80
 8005404:	682e      	ldr	r6, [r5, #0]
 8005406:	602a      	str	r2, [r5, #0]
 8005408:	001a      	movs	r2, r3
 800540a:	0140      	lsls	r0, r0, #5
 800540c:	6a21      	ldr	r1, [r4, #32]
 800540e:	4002      	ands	r2, r0
 8005410:	4203      	tst	r3, r0
 8005412:	d033      	beq.n	800547c <__sflush_r+0x9c>
 8005414:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	075b      	lsls	r3, r3, #29
 800541a:	d506      	bpl.n	800542a <__sflush_r+0x4a>
 800541c:	6863      	ldr	r3, [r4, #4]
 800541e:	1ad2      	subs	r2, r2, r3
 8005420:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005422:	2b00      	cmp	r3, #0
 8005424:	d001      	beq.n	800542a <__sflush_r+0x4a>
 8005426:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005428:	1ad2      	subs	r2, r2, r3
 800542a:	2300      	movs	r3, #0
 800542c:	0028      	movs	r0, r5
 800542e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005430:	6a21      	ldr	r1, [r4, #32]
 8005432:	47b8      	blx	r7
 8005434:	89a2      	ldrh	r2, [r4, #12]
 8005436:	1c43      	adds	r3, r0, #1
 8005438:	d106      	bne.n	8005448 <__sflush_r+0x68>
 800543a:	6829      	ldr	r1, [r5, #0]
 800543c:	291d      	cmp	r1, #29
 800543e:	d846      	bhi.n	80054ce <__sflush_r+0xee>
 8005440:	4b29      	ldr	r3, [pc, #164]	@ (80054e8 <__sflush_r+0x108>)
 8005442:	410b      	asrs	r3, r1
 8005444:	07db      	lsls	r3, r3, #31
 8005446:	d442      	bmi.n	80054ce <__sflush_r+0xee>
 8005448:	2300      	movs	r3, #0
 800544a:	6063      	str	r3, [r4, #4]
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	6023      	str	r3, [r4, #0]
 8005450:	04d2      	lsls	r2, r2, #19
 8005452:	d505      	bpl.n	8005460 <__sflush_r+0x80>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <__sflush_r+0x7e>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d100      	bne.n	8005460 <__sflush_r+0x80>
 800545e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005460:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005462:	602e      	str	r6, [r5, #0]
 8005464:	2900      	cmp	r1, #0
 8005466:	d017      	beq.n	8005498 <__sflush_r+0xb8>
 8005468:	0023      	movs	r3, r4
 800546a:	3344      	adds	r3, #68	@ 0x44
 800546c:	4299      	cmp	r1, r3
 800546e:	d002      	beq.n	8005476 <__sflush_r+0x96>
 8005470:	0028      	movs	r0, r5
 8005472:	f7fe ff7b 	bl	800436c <_free_r>
 8005476:	2300      	movs	r3, #0
 8005478:	6363      	str	r3, [r4, #52]	@ 0x34
 800547a:	e00d      	b.n	8005498 <__sflush_r+0xb8>
 800547c:	2301      	movs	r3, #1
 800547e:	0028      	movs	r0, r5
 8005480:	47b8      	blx	r7
 8005482:	0002      	movs	r2, r0
 8005484:	1c43      	adds	r3, r0, #1
 8005486:	d1c6      	bne.n	8005416 <__sflush_r+0x36>
 8005488:	682b      	ldr	r3, [r5, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d0c3      	beq.n	8005416 <__sflush_r+0x36>
 800548e:	2b1d      	cmp	r3, #29
 8005490:	d001      	beq.n	8005496 <__sflush_r+0xb6>
 8005492:	2b16      	cmp	r3, #22
 8005494:	d11a      	bne.n	80054cc <__sflush_r+0xec>
 8005496:	602e      	str	r6, [r5, #0]
 8005498:	2000      	movs	r0, #0
 800549a:	e01e      	b.n	80054da <__sflush_r+0xfa>
 800549c:	690e      	ldr	r6, [r1, #16]
 800549e:	2e00      	cmp	r6, #0
 80054a0:	d0fa      	beq.n	8005498 <__sflush_r+0xb8>
 80054a2:	680f      	ldr	r7, [r1, #0]
 80054a4:	600e      	str	r6, [r1, #0]
 80054a6:	1bba      	subs	r2, r7, r6
 80054a8:	9201      	str	r2, [sp, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	079b      	lsls	r3, r3, #30
 80054ae:	d100      	bne.n	80054b2 <__sflush_r+0xd2>
 80054b0:	694a      	ldr	r2, [r1, #20]
 80054b2:	60a2      	str	r2, [r4, #8]
 80054b4:	9b01      	ldr	r3, [sp, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	ddee      	ble.n	8005498 <__sflush_r+0xb8>
 80054ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80054bc:	0032      	movs	r2, r6
 80054be:	001f      	movs	r7, r3
 80054c0:	0028      	movs	r0, r5
 80054c2:	9b01      	ldr	r3, [sp, #4]
 80054c4:	6a21      	ldr	r1, [r4, #32]
 80054c6:	47b8      	blx	r7
 80054c8:	2800      	cmp	r0, #0
 80054ca:	dc07      	bgt.n	80054dc <__sflush_r+0xfc>
 80054cc:	89a2      	ldrh	r2, [r4, #12]
 80054ce:	2340      	movs	r3, #64	@ 0x40
 80054d0:	2001      	movs	r0, #1
 80054d2:	4313      	orrs	r3, r2
 80054d4:	b21b      	sxth	r3, r3
 80054d6:	81a3      	strh	r3, [r4, #12]
 80054d8:	4240      	negs	r0, r0
 80054da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80054dc:	9b01      	ldr	r3, [sp, #4]
 80054de:	1836      	adds	r6, r6, r0
 80054e0:	1a1b      	subs	r3, r3, r0
 80054e2:	9301      	str	r3, [sp, #4]
 80054e4:	e7e6      	b.n	80054b4 <__sflush_r+0xd4>
 80054e6:	46c0      	nop			@ (mov r8, r8)
 80054e8:	dfbffffe 	.word	0xdfbffffe

080054ec <_fflush_r>:
 80054ec:	690b      	ldr	r3, [r1, #16]
 80054ee:	b570      	push	{r4, r5, r6, lr}
 80054f0:	0005      	movs	r5, r0
 80054f2:	000c      	movs	r4, r1
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d102      	bne.n	80054fe <_fflush_r+0x12>
 80054f8:	2500      	movs	r5, #0
 80054fa:	0028      	movs	r0, r5
 80054fc:	bd70      	pop	{r4, r5, r6, pc}
 80054fe:	2800      	cmp	r0, #0
 8005500:	d004      	beq.n	800550c <_fflush_r+0x20>
 8005502:	6a03      	ldr	r3, [r0, #32]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <_fflush_r+0x20>
 8005508:	f7fe fc92 	bl	8003e30 <__sinit>
 800550c:	220c      	movs	r2, #12
 800550e:	5ea3      	ldrsh	r3, [r4, r2]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d0f1      	beq.n	80054f8 <_fflush_r+0xc>
 8005514:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005516:	07d2      	lsls	r2, r2, #31
 8005518:	d404      	bmi.n	8005524 <_fflush_r+0x38>
 800551a:	059b      	lsls	r3, r3, #22
 800551c:	d402      	bmi.n	8005524 <_fflush_r+0x38>
 800551e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005520:	f7fe ff19 	bl	8004356 <__retarget_lock_acquire_recursive>
 8005524:	0028      	movs	r0, r5
 8005526:	0021      	movs	r1, r4
 8005528:	f7ff ff5a 	bl	80053e0 <__sflush_r>
 800552c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800552e:	0005      	movs	r5, r0
 8005530:	07db      	lsls	r3, r3, #31
 8005532:	d4e2      	bmi.n	80054fa <_fflush_r+0xe>
 8005534:	89a3      	ldrh	r3, [r4, #12]
 8005536:	059b      	lsls	r3, r3, #22
 8005538:	d4df      	bmi.n	80054fa <_fflush_r+0xe>
 800553a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800553c:	f7fe ff0c 	bl	8004358 <__retarget_lock_release_recursive>
 8005540:	e7db      	b.n	80054fa <_fflush_r+0xe>
	...

08005544 <__swhatbuf_r>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	000e      	movs	r6, r1
 8005548:	001d      	movs	r5, r3
 800554a:	230e      	movs	r3, #14
 800554c:	5ec9      	ldrsh	r1, [r1, r3]
 800554e:	0014      	movs	r4, r2
 8005550:	b096      	sub	sp, #88	@ 0x58
 8005552:	2900      	cmp	r1, #0
 8005554:	da0c      	bge.n	8005570 <__swhatbuf_r+0x2c>
 8005556:	89b2      	ldrh	r2, [r6, #12]
 8005558:	2380      	movs	r3, #128	@ 0x80
 800555a:	0011      	movs	r1, r2
 800555c:	4019      	ands	r1, r3
 800555e:	421a      	tst	r2, r3
 8005560:	d114      	bne.n	800558c <__swhatbuf_r+0x48>
 8005562:	2380      	movs	r3, #128	@ 0x80
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	2000      	movs	r0, #0
 8005568:	6029      	str	r1, [r5, #0]
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	b016      	add	sp, #88	@ 0x58
 800556e:	bd70      	pop	{r4, r5, r6, pc}
 8005570:	466a      	mov	r2, sp
 8005572:	f000 f8dd 	bl	8005730 <_fstat_r>
 8005576:	2800      	cmp	r0, #0
 8005578:	dbed      	blt.n	8005556 <__swhatbuf_r+0x12>
 800557a:	23f0      	movs	r3, #240	@ 0xf0
 800557c:	9901      	ldr	r1, [sp, #4]
 800557e:	021b      	lsls	r3, r3, #8
 8005580:	4019      	ands	r1, r3
 8005582:	4b04      	ldr	r3, [pc, #16]	@ (8005594 <__swhatbuf_r+0x50>)
 8005584:	18c9      	adds	r1, r1, r3
 8005586:	424b      	negs	r3, r1
 8005588:	4159      	adcs	r1, r3
 800558a:	e7ea      	b.n	8005562 <__swhatbuf_r+0x1e>
 800558c:	2100      	movs	r1, #0
 800558e:	2340      	movs	r3, #64	@ 0x40
 8005590:	e7e9      	b.n	8005566 <__swhatbuf_r+0x22>
 8005592:	46c0      	nop			@ (mov r8, r8)
 8005594:	ffffe000 	.word	0xffffe000

08005598 <__smakebuf_r>:
 8005598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800559a:	2602      	movs	r6, #2
 800559c:	898b      	ldrh	r3, [r1, #12]
 800559e:	0005      	movs	r5, r0
 80055a0:	000c      	movs	r4, r1
 80055a2:	b085      	sub	sp, #20
 80055a4:	4233      	tst	r3, r6
 80055a6:	d007      	beq.n	80055b8 <__smakebuf_r+0x20>
 80055a8:	0023      	movs	r3, r4
 80055aa:	3347      	adds	r3, #71	@ 0x47
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	6123      	str	r3, [r4, #16]
 80055b0:	2301      	movs	r3, #1
 80055b2:	6163      	str	r3, [r4, #20]
 80055b4:	b005      	add	sp, #20
 80055b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055b8:	ab03      	add	r3, sp, #12
 80055ba:	aa02      	add	r2, sp, #8
 80055bc:	f7ff ffc2 	bl	8005544 <__swhatbuf_r>
 80055c0:	9f02      	ldr	r7, [sp, #8]
 80055c2:	9001      	str	r0, [sp, #4]
 80055c4:	0039      	movs	r1, r7
 80055c6:	0028      	movs	r0, r5
 80055c8:	f7fe ff3c 	bl	8004444 <_malloc_r>
 80055cc:	2800      	cmp	r0, #0
 80055ce:	d108      	bne.n	80055e2 <__smakebuf_r+0x4a>
 80055d0:	220c      	movs	r2, #12
 80055d2:	5ea3      	ldrsh	r3, [r4, r2]
 80055d4:	059a      	lsls	r2, r3, #22
 80055d6:	d4ed      	bmi.n	80055b4 <__smakebuf_r+0x1c>
 80055d8:	2203      	movs	r2, #3
 80055da:	4393      	bics	r3, r2
 80055dc:	431e      	orrs	r6, r3
 80055de:	81a6      	strh	r6, [r4, #12]
 80055e0:	e7e2      	b.n	80055a8 <__smakebuf_r+0x10>
 80055e2:	2380      	movs	r3, #128	@ 0x80
 80055e4:	89a2      	ldrh	r2, [r4, #12]
 80055e6:	6020      	str	r0, [r4, #0]
 80055e8:	4313      	orrs	r3, r2
 80055ea:	81a3      	strh	r3, [r4, #12]
 80055ec:	9b03      	ldr	r3, [sp, #12]
 80055ee:	6120      	str	r0, [r4, #16]
 80055f0:	6167      	str	r7, [r4, #20]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <__smakebuf_r+0x78>
 80055f6:	0028      	movs	r0, r5
 80055f8:	230e      	movs	r3, #14
 80055fa:	5ee1      	ldrsh	r1, [r4, r3]
 80055fc:	f000 f8aa 	bl	8005754 <_isatty_r>
 8005600:	2800      	cmp	r0, #0
 8005602:	d005      	beq.n	8005610 <__smakebuf_r+0x78>
 8005604:	2303      	movs	r3, #3
 8005606:	89a2      	ldrh	r2, [r4, #12]
 8005608:	439a      	bics	r2, r3
 800560a:	3b02      	subs	r3, #2
 800560c:	4313      	orrs	r3, r2
 800560e:	81a3      	strh	r3, [r4, #12]
 8005610:	89a3      	ldrh	r3, [r4, #12]
 8005612:	9a01      	ldr	r2, [sp, #4]
 8005614:	4313      	orrs	r3, r2
 8005616:	81a3      	strh	r3, [r4, #12]
 8005618:	e7cc      	b.n	80055b4 <__smakebuf_r+0x1c>

0800561a <__sccl>:
 800561a:	b570      	push	{r4, r5, r6, lr}
 800561c:	780b      	ldrb	r3, [r1, #0]
 800561e:	0004      	movs	r4, r0
 8005620:	2b5e      	cmp	r3, #94	@ 0x5e
 8005622:	d018      	beq.n	8005656 <__sccl+0x3c>
 8005624:	2200      	movs	r2, #0
 8005626:	1c4d      	adds	r5, r1, #1
 8005628:	0021      	movs	r1, r4
 800562a:	1c60      	adds	r0, r4, #1
 800562c:	30ff      	adds	r0, #255	@ 0xff
 800562e:	700a      	strb	r2, [r1, #0]
 8005630:	3101      	adds	r1, #1
 8005632:	4281      	cmp	r1, r0
 8005634:	d1fb      	bne.n	800562e <__sccl+0x14>
 8005636:	1e68      	subs	r0, r5, #1
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <__sccl+0x3a>
 800563c:	2101      	movs	r1, #1
 800563e:	404a      	eors	r2, r1
 8005640:	0028      	movs	r0, r5
 8005642:	54e2      	strb	r2, [r4, r3]
 8005644:	7801      	ldrb	r1, [r0, #0]
 8005646:	1c45      	adds	r5, r0, #1
 8005648:	292d      	cmp	r1, #45	@ 0x2d
 800564a:	d00a      	beq.n	8005662 <__sccl+0x48>
 800564c:	295d      	cmp	r1, #93	@ 0x5d
 800564e:	d01b      	beq.n	8005688 <__sccl+0x6e>
 8005650:	2900      	cmp	r1, #0
 8005652:	d104      	bne.n	800565e <__sccl+0x44>
 8005654:	bd70      	pop	{r4, r5, r6, pc}
 8005656:	2201      	movs	r2, #1
 8005658:	784b      	ldrb	r3, [r1, #1]
 800565a:	1c8d      	adds	r5, r1, #2
 800565c:	e7e4      	b.n	8005628 <__sccl+0xe>
 800565e:	000b      	movs	r3, r1
 8005660:	e7ee      	b.n	8005640 <__sccl+0x26>
 8005662:	7846      	ldrb	r6, [r0, #1]
 8005664:	2e5d      	cmp	r6, #93	@ 0x5d
 8005666:	d0fa      	beq.n	800565e <__sccl+0x44>
 8005668:	42b3      	cmp	r3, r6
 800566a:	dcf8      	bgt.n	800565e <__sccl+0x44>
 800566c:	0019      	movs	r1, r3
 800566e:	3002      	adds	r0, #2
 8005670:	3101      	adds	r1, #1
 8005672:	5462      	strb	r2, [r4, r1]
 8005674:	428e      	cmp	r6, r1
 8005676:	dcfb      	bgt.n	8005670 <__sccl+0x56>
 8005678:	2100      	movs	r1, #0
 800567a:	1c5d      	adds	r5, r3, #1
 800567c:	42b3      	cmp	r3, r6
 800567e:	da01      	bge.n	8005684 <__sccl+0x6a>
 8005680:	1af1      	subs	r1, r6, r3
 8005682:	3901      	subs	r1, #1
 8005684:	186b      	adds	r3, r5, r1
 8005686:	e7dd      	b.n	8005644 <__sccl+0x2a>
 8005688:	0028      	movs	r0, r5
 800568a:	e7e3      	b.n	8005654 <__sccl+0x3a>

0800568c <__submore>:
 800568c:	000b      	movs	r3, r1
 800568e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005690:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8005692:	3344      	adds	r3, #68	@ 0x44
 8005694:	000c      	movs	r4, r1
 8005696:	429d      	cmp	r5, r3
 8005698:	d11c      	bne.n	80056d4 <__submore+0x48>
 800569a:	2680      	movs	r6, #128	@ 0x80
 800569c:	00f6      	lsls	r6, r6, #3
 800569e:	0031      	movs	r1, r6
 80056a0:	f7fe fed0 	bl	8004444 <_malloc_r>
 80056a4:	2800      	cmp	r0, #0
 80056a6:	d102      	bne.n	80056ae <__submore+0x22>
 80056a8:	2001      	movs	r0, #1
 80056aa:	4240      	negs	r0, r0
 80056ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056ae:	0023      	movs	r3, r4
 80056b0:	6360      	str	r0, [r4, #52]	@ 0x34
 80056b2:	63a6      	str	r6, [r4, #56]	@ 0x38
 80056b4:	3346      	adds	r3, #70	@ 0x46
 80056b6:	781a      	ldrb	r2, [r3, #0]
 80056b8:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <__submore+0x70>)
 80056ba:	54c2      	strb	r2, [r0, r3]
 80056bc:	0023      	movs	r3, r4
 80056be:	3345      	adds	r3, #69	@ 0x45
 80056c0:	781a      	ldrb	r2, [r3, #0]
 80056c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005700 <__submore+0x74>)
 80056c4:	54c2      	strb	r2, [r0, r3]
 80056c6:	782a      	ldrb	r2, [r5, #0]
 80056c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005704 <__submore+0x78>)
 80056ca:	54c2      	strb	r2, [r0, r3]
 80056cc:	18c0      	adds	r0, r0, r3
 80056ce:	6020      	str	r0, [r4, #0]
 80056d0:	2000      	movs	r0, #0
 80056d2:	e7eb      	b.n	80056ac <__submore+0x20>
 80056d4:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 80056d6:	0029      	movs	r1, r5
 80056d8:	0073      	lsls	r3, r6, #1
 80056da:	001a      	movs	r2, r3
 80056dc:	9301      	str	r3, [sp, #4]
 80056de:	f000 f868 	bl	80057b2 <_realloc_r>
 80056e2:	1e05      	subs	r5, r0, #0
 80056e4:	d0e0      	beq.n	80056a8 <__submore+0x1c>
 80056e6:	1987      	adds	r7, r0, r6
 80056e8:	0001      	movs	r1, r0
 80056ea:	0032      	movs	r2, r6
 80056ec:	0038      	movs	r0, r7
 80056ee:	f7fe fe34 	bl	800435a <memcpy>
 80056f2:	9b01      	ldr	r3, [sp, #4]
 80056f4:	6027      	str	r7, [r4, #0]
 80056f6:	6365      	str	r5, [r4, #52]	@ 0x34
 80056f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80056fa:	e7e9      	b.n	80056d0 <__submore+0x44>
 80056fc:	000003ff 	.word	0x000003ff
 8005700:	000003fe 	.word	0x000003fe
 8005704:	000003fd 	.word	0x000003fd

08005708 <memmove>:
 8005708:	b510      	push	{r4, lr}
 800570a:	4288      	cmp	r0, r1
 800570c:	d806      	bhi.n	800571c <memmove+0x14>
 800570e:	2300      	movs	r3, #0
 8005710:	429a      	cmp	r2, r3
 8005712:	d008      	beq.n	8005726 <memmove+0x1e>
 8005714:	5ccc      	ldrb	r4, [r1, r3]
 8005716:	54c4      	strb	r4, [r0, r3]
 8005718:	3301      	adds	r3, #1
 800571a:	e7f9      	b.n	8005710 <memmove+0x8>
 800571c:	188b      	adds	r3, r1, r2
 800571e:	4298      	cmp	r0, r3
 8005720:	d2f5      	bcs.n	800570e <memmove+0x6>
 8005722:	3a01      	subs	r2, #1
 8005724:	d200      	bcs.n	8005728 <memmove+0x20>
 8005726:	bd10      	pop	{r4, pc}
 8005728:	5c8b      	ldrb	r3, [r1, r2]
 800572a:	5483      	strb	r3, [r0, r2]
 800572c:	e7f9      	b.n	8005722 <memmove+0x1a>
	...

08005730 <_fstat_r>:
 8005730:	2300      	movs	r3, #0
 8005732:	b570      	push	{r4, r5, r6, lr}
 8005734:	4d06      	ldr	r5, [pc, #24]	@ (8005750 <_fstat_r+0x20>)
 8005736:	0004      	movs	r4, r0
 8005738:	0008      	movs	r0, r1
 800573a:	0011      	movs	r1, r2
 800573c:	602b      	str	r3, [r5, #0]
 800573e:	f7fb fb8c 	bl	8000e5a <_fstat>
 8005742:	1c43      	adds	r3, r0, #1
 8005744:	d103      	bne.n	800574e <_fstat_r+0x1e>
 8005746:	682b      	ldr	r3, [r5, #0]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d000      	beq.n	800574e <_fstat_r+0x1e>
 800574c:	6023      	str	r3, [r4, #0]
 800574e:	bd70      	pop	{r4, r5, r6, pc}
 8005750:	20000384 	.word	0x20000384

08005754 <_isatty_r>:
 8005754:	2300      	movs	r3, #0
 8005756:	b570      	push	{r4, r5, r6, lr}
 8005758:	4d06      	ldr	r5, [pc, #24]	@ (8005774 <_isatty_r+0x20>)
 800575a:	0004      	movs	r4, r0
 800575c:	0008      	movs	r0, r1
 800575e:	602b      	str	r3, [r5, #0]
 8005760:	f7fb fb89 	bl	8000e76 <_isatty>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d103      	bne.n	8005770 <_isatty_r+0x1c>
 8005768:	682b      	ldr	r3, [r5, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d000      	beq.n	8005770 <_isatty_r+0x1c>
 800576e:	6023      	str	r3, [r4, #0]
 8005770:	bd70      	pop	{r4, r5, r6, pc}
 8005772:	46c0      	nop			@ (mov r8, r8)
 8005774:	20000384 	.word	0x20000384

08005778 <_sbrk_r>:
 8005778:	2300      	movs	r3, #0
 800577a:	b570      	push	{r4, r5, r6, lr}
 800577c:	4d06      	ldr	r5, [pc, #24]	@ (8005798 <_sbrk_r+0x20>)
 800577e:	0004      	movs	r4, r0
 8005780:	0008      	movs	r0, r1
 8005782:	602b      	str	r3, [r5, #0]
 8005784:	f7fb fb8c 	bl	8000ea0 <_sbrk>
 8005788:	1c43      	adds	r3, r0, #1
 800578a:	d103      	bne.n	8005794 <_sbrk_r+0x1c>
 800578c:	682b      	ldr	r3, [r5, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d000      	beq.n	8005794 <_sbrk_r+0x1c>
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	bd70      	pop	{r4, r5, r6, pc}
 8005796:	46c0      	nop			@ (mov r8, r8)
 8005798:	20000384 	.word	0x20000384

0800579c <memchr>:
 800579c:	b2c9      	uxtb	r1, r1
 800579e:	1882      	adds	r2, r0, r2
 80057a0:	4290      	cmp	r0, r2
 80057a2:	d101      	bne.n	80057a8 <memchr+0xc>
 80057a4:	2000      	movs	r0, #0
 80057a6:	4770      	bx	lr
 80057a8:	7803      	ldrb	r3, [r0, #0]
 80057aa:	428b      	cmp	r3, r1
 80057ac:	d0fb      	beq.n	80057a6 <memchr+0xa>
 80057ae:	3001      	adds	r0, #1
 80057b0:	e7f6      	b.n	80057a0 <memchr+0x4>

080057b2 <_realloc_r>:
 80057b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80057b4:	0006      	movs	r6, r0
 80057b6:	000c      	movs	r4, r1
 80057b8:	0015      	movs	r5, r2
 80057ba:	2900      	cmp	r1, #0
 80057bc:	d105      	bne.n	80057ca <_realloc_r+0x18>
 80057be:	0011      	movs	r1, r2
 80057c0:	f7fe fe40 	bl	8004444 <_malloc_r>
 80057c4:	0004      	movs	r4, r0
 80057c6:	0020      	movs	r0, r4
 80057c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057ca:	2a00      	cmp	r2, #0
 80057cc:	d103      	bne.n	80057d6 <_realloc_r+0x24>
 80057ce:	f7fe fdcd 	bl	800436c <_free_r>
 80057d2:	2400      	movs	r4, #0
 80057d4:	e7f7      	b.n	80057c6 <_realloc_r+0x14>
 80057d6:	f000 f92f 	bl	8005a38 <_malloc_usable_size_r>
 80057da:	0007      	movs	r7, r0
 80057dc:	4285      	cmp	r5, r0
 80057de:	d802      	bhi.n	80057e6 <_realloc_r+0x34>
 80057e0:	0843      	lsrs	r3, r0, #1
 80057e2:	42ab      	cmp	r3, r5
 80057e4:	d3ef      	bcc.n	80057c6 <_realloc_r+0x14>
 80057e6:	0029      	movs	r1, r5
 80057e8:	0030      	movs	r0, r6
 80057ea:	f7fe fe2b 	bl	8004444 <_malloc_r>
 80057ee:	9001      	str	r0, [sp, #4]
 80057f0:	2800      	cmp	r0, #0
 80057f2:	d0ee      	beq.n	80057d2 <_realloc_r+0x20>
 80057f4:	002a      	movs	r2, r5
 80057f6:	42bd      	cmp	r5, r7
 80057f8:	d900      	bls.n	80057fc <_realloc_r+0x4a>
 80057fa:	003a      	movs	r2, r7
 80057fc:	0021      	movs	r1, r4
 80057fe:	9801      	ldr	r0, [sp, #4]
 8005800:	f7fe fdab 	bl	800435a <memcpy>
 8005804:	0021      	movs	r1, r4
 8005806:	0030      	movs	r0, r6
 8005808:	f7fe fdb0 	bl	800436c <_free_r>
 800580c:	9c01      	ldr	r4, [sp, #4]
 800580e:	e7da      	b.n	80057c6 <_realloc_r+0x14>

08005810 <_strtol_l.constprop.0>:
 8005810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005812:	b085      	sub	sp, #20
 8005814:	0017      	movs	r7, r2
 8005816:	001e      	movs	r6, r3
 8005818:	9003      	str	r0, [sp, #12]
 800581a:	9101      	str	r1, [sp, #4]
 800581c:	2b24      	cmp	r3, #36	@ 0x24
 800581e:	d844      	bhi.n	80058aa <_strtol_l.constprop.0+0x9a>
 8005820:	000c      	movs	r4, r1
 8005822:	2b01      	cmp	r3, #1
 8005824:	d041      	beq.n	80058aa <_strtol_l.constprop.0+0x9a>
 8005826:	4b3d      	ldr	r3, [pc, #244]	@ (800591c <_strtol_l.constprop.0+0x10c>)
 8005828:	2208      	movs	r2, #8
 800582a:	469c      	mov	ip, r3
 800582c:	0023      	movs	r3, r4
 800582e:	4661      	mov	r1, ip
 8005830:	781d      	ldrb	r5, [r3, #0]
 8005832:	3401      	adds	r4, #1
 8005834:	5d48      	ldrb	r0, [r1, r5]
 8005836:	0001      	movs	r1, r0
 8005838:	4011      	ands	r1, r2
 800583a:	4210      	tst	r0, r2
 800583c:	d1f6      	bne.n	800582c <_strtol_l.constprop.0+0x1c>
 800583e:	2d2d      	cmp	r5, #45	@ 0x2d
 8005840:	d13a      	bne.n	80058b8 <_strtol_l.constprop.0+0xa8>
 8005842:	7825      	ldrb	r5, [r4, #0]
 8005844:	1c9c      	adds	r4, r3, #2
 8005846:	2301      	movs	r3, #1
 8005848:	9300      	str	r3, [sp, #0]
 800584a:	2210      	movs	r2, #16
 800584c:	0033      	movs	r3, r6
 800584e:	4393      	bics	r3, r2
 8005850:	d109      	bne.n	8005866 <_strtol_l.constprop.0+0x56>
 8005852:	2d30      	cmp	r5, #48	@ 0x30
 8005854:	d136      	bne.n	80058c4 <_strtol_l.constprop.0+0xb4>
 8005856:	2120      	movs	r1, #32
 8005858:	7823      	ldrb	r3, [r4, #0]
 800585a:	438b      	bics	r3, r1
 800585c:	2b58      	cmp	r3, #88	@ 0x58
 800585e:	d131      	bne.n	80058c4 <_strtol_l.constprop.0+0xb4>
 8005860:	0016      	movs	r6, r2
 8005862:	7865      	ldrb	r5, [r4, #1]
 8005864:	3402      	adds	r4, #2
 8005866:	4a2e      	ldr	r2, [pc, #184]	@ (8005920 <_strtol_l.constprop.0+0x110>)
 8005868:	9b00      	ldr	r3, [sp, #0]
 800586a:	4694      	mov	ip, r2
 800586c:	4463      	add	r3, ip
 800586e:	0031      	movs	r1, r6
 8005870:	0018      	movs	r0, r3
 8005872:	9302      	str	r3, [sp, #8]
 8005874:	f7fa fce0 	bl	8000238 <__aeabi_uidivmod>
 8005878:	2200      	movs	r2, #0
 800587a:	4684      	mov	ip, r0
 800587c:	0010      	movs	r0, r2
 800587e:	002b      	movs	r3, r5
 8005880:	3b30      	subs	r3, #48	@ 0x30
 8005882:	2b09      	cmp	r3, #9
 8005884:	d825      	bhi.n	80058d2 <_strtol_l.constprop.0+0xc2>
 8005886:	001d      	movs	r5, r3
 8005888:	42ae      	cmp	r6, r5
 800588a:	dd31      	ble.n	80058f0 <_strtol_l.constprop.0+0xe0>
 800588c:	1c53      	adds	r3, r2, #1
 800588e:	d009      	beq.n	80058a4 <_strtol_l.constprop.0+0x94>
 8005890:	2201      	movs	r2, #1
 8005892:	4252      	negs	r2, r2
 8005894:	4584      	cmp	ip, r0
 8005896:	d305      	bcc.n	80058a4 <_strtol_l.constprop.0+0x94>
 8005898:	d101      	bne.n	800589e <_strtol_l.constprop.0+0x8e>
 800589a:	42a9      	cmp	r1, r5
 800589c:	db25      	blt.n	80058ea <_strtol_l.constprop.0+0xda>
 800589e:	2201      	movs	r2, #1
 80058a0:	4370      	muls	r0, r6
 80058a2:	1828      	adds	r0, r5, r0
 80058a4:	7825      	ldrb	r5, [r4, #0]
 80058a6:	3401      	adds	r4, #1
 80058a8:	e7e9      	b.n	800587e <_strtol_l.constprop.0+0x6e>
 80058aa:	f7fe fd29 	bl	8004300 <__errno>
 80058ae:	2316      	movs	r3, #22
 80058b0:	6003      	str	r3, [r0, #0]
 80058b2:	2000      	movs	r0, #0
 80058b4:	b005      	add	sp, #20
 80058b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058b8:	9100      	str	r1, [sp, #0]
 80058ba:	2d2b      	cmp	r5, #43	@ 0x2b
 80058bc:	d1c5      	bne.n	800584a <_strtol_l.constprop.0+0x3a>
 80058be:	7825      	ldrb	r5, [r4, #0]
 80058c0:	1c9c      	adds	r4, r3, #2
 80058c2:	e7c2      	b.n	800584a <_strtol_l.constprop.0+0x3a>
 80058c4:	2e00      	cmp	r6, #0
 80058c6:	d1ce      	bne.n	8005866 <_strtol_l.constprop.0+0x56>
 80058c8:	3608      	adds	r6, #8
 80058ca:	2d30      	cmp	r5, #48	@ 0x30
 80058cc:	d0cb      	beq.n	8005866 <_strtol_l.constprop.0+0x56>
 80058ce:	3602      	adds	r6, #2
 80058d0:	e7c9      	b.n	8005866 <_strtol_l.constprop.0+0x56>
 80058d2:	002b      	movs	r3, r5
 80058d4:	3b41      	subs	r3, #65	@ 0x41
 80058d6:	2b19      	cmp	r3, #25
 80058d8:	d801      	bhi.n	80058de <_strtol_l.constprop.0+0xce>
 80058da:	3d37      	subs	r5, #55	@ 0x37
 80058dc:	e7d4      	b.n	8005888 <_strtol_l.constprop.0+0x78>
 80058de:	002b      	movs	r3, r5
 80058e0:	3b61      	subs	r3, #97	@ 0x61
 80058e2:	2b19      	cmp	r3, #25
 80058e4:	d804      	bhi.n	80058f0 <_strtol_l.constprop.0+0xe0>
 80058e6:	3d57      	subs	r5, #87	@ 0x57
 80058e8:	e7ce      	b.n	8005888 <_strtol_l.constprop.0+0x78>
 80058ea:	2201      	movs	r2, #1
 80058ec:	4252      	negs	r2, r2
 80058ee:	e7d9      	b.n	80058a4 <_strtol_l.constprop.0+0x94>
 80058f0:	1c53      	adds	r3, r2, #1
 80058f2:	d108      	bne.n	8005906 <_strtol_l.constprop.0+0xf6>
 80058f4:	2322      	movs	r3, #34	@ 0x22
 80058f6:	9a03      	ldr	r2, [sp, #12]
 80058f8:	9802      	ldr	r0, [sp, #8]
 80058fa:	6013      	str	r3, [r2, #0]
 80058fc:	2f00      	cmp	r7, #0
 80058fe:	d0d9      	beq.n	80058b4 <_strtol_l.constprop.0+0xa4>
 8005900:	1e63      	subs	r3, r4, #1
 8005902:	9301      	str	r3, [sp, #4]
 8005904:	e007      	b.n	8005916 <_strtol_l.constprop.0+0x106>
 8005906:	9b00      	ldr	r3, [sp, #0]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d000      	beq.n	800590e <_strtol_l.constprop.0+0xfe>
 800590c:	4240      	negs	r0, r0
 800590e:	2f00      	cmp	r7, #0
 8005910:	d0d0      	beq.n	80058b4 <_strtol_l.constprop.0+0xa4>
 8005912:	2a00      	cmp	r2, #0
 8005914:	d1f4      	bne.n	8005900 <_strtol_l.constprop.0+0xf0>
 8005916:	9b01      	ldr	r3, [sp, #4]
 8005918:	603b      	str	r3, [r7, #0]
 800591a:	e7cb      	b.n	80058b4 <_strtol_l.constprop.0+0xa4>
 800591c:	08005f37 	.word	0x08005f37
 8005920:	7fffffff 	.word	0x7fffffff

08005924 <_strtol_r>:
 8005924:	b510      	push	{r4, lr}
 8005926:	f7ff ff73 	bl	8005810 <_strtol_l.constprop.0>
 800592a:	bd10      	pop	{r4, pc}

0800592c <_strtoul_l.constprop.0>:
 800592c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800592e:	001e      	movs	r6, r3
 8005930:	4b3e      	ldr	r3, [pc, #248]	@ (8005a2c <_strtoul_l.constprop.0+0x100>)
 8005932:	0017      	movs	r7, r2
 8005934:	000c      	movs	r4, r1
 8005936:	469c      	mov	ip, r3
 8005938:	2208      	movs	r2, #8
 800593a:	b085      	sub	sp, #20
 800593c:	9003      	str	r0, [sp, #12]
 800593e:	9100      	str	r1, [sp, #0]
 8005940:	0023      	movs	r3, r4
 8005942:	4661      	mov	r1, ip
 8005944:	781d      	ldrb	r5, [r3, #0]
 8005946:	3401      	adds	r4, #1
 8005948:	5d48      	ldrb	r0, [r1, r5]
 800594a:	0001      	movs	r1, r0
 800594c:	4011      	ands	r1, r2
 800594e:	4210      	tst	r0, r2
 8005950:	d1f6      	bne.n	8005940 <_strtoul_l.constprop.0+0x14>
 8005952:	2d2d      	cmp	r5, #45	@ 0x2d
 8005954:	d137      	bne.n	80059c6 <_strtoul_l.constprop.0+0x9a>
 8005956:	7825      	ldrb	r5, [r4, #0]
 8005958:	1c9c      	adds	r4, r3, #2
 800595a:	2301      	movs	r3, #1
 800595c:	9302      	str	r3, [sp, #8]
 800595e:	2210      	movs	r2, #16
 8005960:	0033      	movs	r3, r6
 8005962:	4393      	bics	r3, r2
 8005964:	d109      	bne.n	800597a <_strtoul_l.constprop.0+0x4e>
 8005966:	2d30      	cmp	r5, #48	@ 0x30
 8005968:	d133      	bne.n	80059d2 <_strtoul_l.constprop.0+0xa6>
 800596a:	2120      	movs	r1, #32
 800596c:	7823      	ldrb	r3, [r4, #0]
 800596e:	438b      	bics	r3, r1
 8005970:	2b58      	cmp	r3, #88	@ 0x58
 8005972:	d12e      	bne.n	80059d2 <_strtoul_l.constprop.0+0xa6>
 8005974:	0016      	movs	r6, r2
 8005976:	7865      	ldrb	r5, [r4, #1]
 8005978:	3402      	adds	r4, #2
 800597a:	2001      	movs	r0, #1
 800597c:	0031      	movs	r1, r6
 800597e:	4240      	negs	r0, r0
 8005980:	f7fa fbd4 	bl	800012c <__udivsi3>
 8005984:	9001      	str	r0, [sp, #4]
 8005986:	2001      	movs	r0, #1
 8005988:	0031      	movs	r1, r6
 800598a:	4240      	negs	r0, r0
 800598c:	f7fa fc54 	bl	8000238 <__aeabi_uidivmod>
 8005990:	2300      	movs	r3, #0
 8005992:	2201      	movs	r2, #1
 8005994:	0018      	movs	r0, r3
 8005996:	4694      	mov	ip, r2
 8005998:	002a      	movs	r2, r5
 800599a:	3a30      	subs	r2, #48	@ 0x30
 800599c:	2a09      	cmp	r2, #9
 800599e:	d81f      	bhi.n	80059e0 <_strtoul_l.constprop.0+0xb4>
 80059a0:	0015      	movs	r5, r2
 80059a2:	42ae      	cmp	r6, r5
 80059a4:	dd2b      	ble.n	80059fe <_strtoul_l.constprop.0+0xd2>
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	d00a      	beq.n	80059c0 <_strtoul_l.constprop.0+0x94>
 80059aa:	2301      	movs	r3, #1
 80059ac:	9a01      	ldr	r2, [sp, #4]
 80059ae:	425b      	negs	r3, r3
 80059b0:	4282      	cmp	r2, r0
 80059b2:	d305      	bcc.n	80059c0 <_strtoul_l.constprop.0+0x94>
 80059b4:	d101      	bne.n	80059ba <_strtoul_l.constprop.0+0x8e>
 80059b6:	42a9      	cmp	r1, r5
 80059b8:	db1e      	blt.n	80059f8 <_strtoul_l.constprop.0+0xcc>
 80059ba:	4663      	mov	r3, ip
 80059bc:	4370      	muls	r0, r6
 80059be:	1828      	adds	r0, r5, r0
 80059c0:	7825      	ldrb	r5, [r4, #0]
 80059c2:	3401      	adds	r4, #1
 80059c4:	e7e8      	b.n	8005998 <_strtoul_l.constprop.0+0x6c>
 80059c6:	9102      	str	r1, [sp, #8]
 80059c8:	2d2b      	cmp	r5, #43	@ 0x2b
 80059ca:	d1c8      	bne.n	800595e <_strtoul_l.constprop.0+0x32>
 80059cc:	7825      	ldrb	r5, [r4, #0]
 80059ce:	1c9c      	adds	r4, r3, #2
 80059d0:	e7c5      	b.n	800595e <_strtoul_l.constprop.0+0x32>
 80059d2:	2e00      	cmp	r6, #0
 80059d4:	d1d1      	bne.n	800597a <_strtoul_l.constprop.0+0x4e>
 80059d6:	3608      	adds	r6, #8
 80059d8:	2d30      	cmp	r5, #48	@ 0x30
 80059da:	d0ce      	beq.n	800597a <_strtoul_l.constprop.0+0x4e>
 80059dc:	3602      	adds	r6, #2
 80059de:	e7cc      	b.n	800597a <_strtoul_l.constprop.0+0x4e>
 80059e0:	002a      	movs	r2, r5
 80059e2:	3a41      	subs	r2, #65	@ 0x41
 80059e4:	2a19      	cmp	r2, #25
 80059e6:	d801      	bhi.n	80059ec <_strtoul_l.constprop.0+0xc0>
 80059e8:	3d37      	subs	r5, #55	@ 0x37
 80059ea:	e7da      	b.n	80059a2 <_strtoul_l.constprop.0+0x76>
 80059ec:	002a      	movs	r2, r5
 80059ee:	3a61      	subs	r2, #97	@ 0x61
 80059f0:	2a19      	cmp	r2, #25
 80059f2:	d804      	bhi.n	80059fe <_strtoul_l.constprop.0+0xd2>
 80059f4:	3d57      	subs	r5, #87	@ 0x57
 80059f6:	e7d4      	b.n	80059a2 <_strtoul_l.constprop.0+0x76>
 80059f8:	2301      	movs	r3, #1
 80059fa:	425b      	negs	r3, r3
 80059fc:	e7e0      	b.n	80059c0 <_strtoul_l.constprop.0+0x94>
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	d107      	bne.n	8005a12 <_strtoul_l.constprop.0+0xe6>
 8005a02:	2222      	movs	r2, #34	@ 0x22
 8005a04:	9903      	ldr	r1, [sp, #12]
 8005a06:	0018      	movs	r0, r3
 8005a08:	600a      	str	r2, [r1, #0]
 8005a0a:	2f00      	cmp	r7, #0
 8005a0c:	d109      	bne.n	8005a22 <_strtoul_l.constprop.0+0xf6>
 8005a0e:	b005      	add	sp, #20
 8005a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a12:	9a02      	ldr	r2, [sp, #8]
 8005a14:	2a00      	cmp	r2, #0
 8005a16:	d000      	beq.n	8005a1a <_strtoul_l.constprop.0+0xee>
 8005a18:	4240      	negs	r0, r0
 8005a1a:	2f00      	cmp	r7, #0
 8005a1c:	d0f7      	beq.n	8005a0e <_strtoul_l.constprop.0+0xe2>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d001      	beq.n	8005a26 <_strtoul_l.constprop.0+0xfa>
 8005a22:	1e63      	subs	r3, r4, #1
 8005a24:	9300      	str	r3, [sp, #0]
 8005a26:	9b00      	ldr	r3, [sp, #0]
 8005a28:	603b      	str	r3, [r7, #0]
 8005a2a:	e7f0      	b.n	8005a0e <_strtoul_l.constprop.0+0xe2>
 8005a2c:	08005f37 	.word	0x08005f37

08005a30 <_strtoul_r>:
 8005a30:	b510      	push	{r4, lr}
 8005a32:	f7ff ff7b 	bl	800592c <_strtoul_l.constprop.0>
 8005a36:	bd10      	pop	{r4, pc}

08005a38 <_malloc_usable_size_r>:
 8005a38:	1f0b      	subs	r3, r1, #4
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	1f18      	subs	r0, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	da01      	bge.n	8005a46 <_malloc_usable_size_r+0xe>
 8005a42:	580b      	ldr	r3, [r1, r0]
 8005a44:	18c0      	adds	r0, r0, r3
 8005a46:	4770      	bx	lr

08005a48 <_init>:
 8005a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a4e:	bc08      	pop	{r3}
 8005a50:	469e      	mov	lr, r3
 8005a52:	4770      	bx	lr

08005a54 <_fini>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	46c0      	nop			@ (mov r8, r8)
 8005a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a5a:	bc08      	pop	{r3}
 8005a5c:	469e      	mov	lr, r3
 8005a5e:	4770      	bx	lr
