
QuectelBg95Stm32C0Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067e8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  080068a8  080068a8  000078a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ddc  08006ddc  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006ddc  08006ddc  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ddc  08006ddc  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ddc  08006ddc  00007ddc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006de0  08006de0  00007de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006de4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000068  08006e4c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08006e4c  00008398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d452  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e5  00000000  00000000  000154e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  000177c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000827  00000000  00000000  00018270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014472  00000000  00000000  00018a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfd7  00000000  00000000  0002cf09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000795ba  00000000  00000000  0003aee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b449a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003020  00000000  00000000  000b44e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b7500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006890 	.word	0x08006890

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006890 	.word	0x08006890

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f001 f844 	bl	80012d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f835 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f951 	bl	80004f8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000256:	f000 f877 	bl	8000348 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f919 	bl	8000490 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //configurando rtc apos reset
  	__HAL_RCC_PWR_CLK_ENABLE();
 800025e:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <main+0x70>)
 8000260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000262:	4b14      	ldr	r3, [pc, #80]	@ (80002b4 <main+0x70>)
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	0549      	lsls	r1, r1, #21
 8000268:	430a      	orrs	r2, r1
 800026a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800026c:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <main+0x70>)
 800026e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	055b      	lsls	r3, r3, #21
 8000274:	4013      	ands	r3, r2
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  	__HAL_RCC_RTC_ENABLE();
 800027a:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <main+0x70>)
 800027c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800027e:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <main+0x70>)
 8000280:	2180      	movs	r1, #128	@ 0x80
 8000282:	0209      	lsls	r1, r1, #8
 8000284:	430a      	orrs	r2, r1
 8000286:	65da      	str	r2, [r3, #92]	@ 0x5c
  	InitFlags();
 8000288:	f000 fe36 	bl	8000ef8 <InitFlags>
	        		    	RESPONSE_BUFFER_SIZE);
	        }
	        responseReceived = 0;
	*/

		InitialConfigBg95();
 800028c:	f000 f96c 	bl	8000568 <InitialConfigBg95>
		ConfigPdpContext();
 8000290:	f000 fb70 	bl	8000974 <ConfigPdpContext>
		ActivePdp();
 8000294:	f000 fc6e 	bl	8000b74 <ActivePdp>
		ConfigMqttContext();
 8000298:	f000 fbec 	bl	8000a74 <ConfigMqttContext>
		MqttConfigBeforeConnection();
 800029c:	f000 fd2e 	bl	8000cfc <MqttConfigBeforeConnection>
		MqttConnectAndSubscribe();
 80002a0:	f000 fcca 	bl	8000c38 <MqttConnectAndSubscribe>
		HAL_Delay(10000);
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <main+0x74>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 f892 	bl	80013d0 <HAL_Delay>

		EnterSleepMode();
 80002ac:	f000 fda6 	bl	8000dfc <EnterSleepMode>
		InitialConfigBg95();
 80002b0:	46c0      	nop			@ (mov r8, r8)
 80002b2:	e7eb      	b.n	800028c <main+0x48>
 80002b4:	40021000 	.word	0x40021000
 80002b8:	00002710 	.word	0x00002710

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b08d      	sub	sp, #52	@ 0x34
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2414      	movs	r4, #20
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	231c      	movs	r3, #28
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f004 fecd 	bl	800506c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	003b      	movs	r3, r7
 80002d4:	0018      	movs	r0, r3
 80002d6:	2314      	movs	r3, #20
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f004 fec6 	bl	800506c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	220a      	movs	r2, #10
 80002e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2280      	movs	r2, #128	@ 0x80
 80002ea:	0052      	lsls	r2, r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2240      	movs	r2, #64	@ 0x40
 80002f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2201      	movs	r2, #1
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fbfa 	bl	8001afc <HAL_RCC_OscConfig>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800030c:	f000 fe10 	bl	8000f30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	003b      	movs	r3, r7
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	003b      	movs	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	003b      	movs	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000322:	003b      	movs	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032e:	003b      	movs	r3, r7
 8000330:	2101      	movs	r1, #1
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fdc6 	bl	8001ec4 <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800033c:	f000 fdf8 	bl	8000f30 <Error_Handler>
  }
}
 8000340:	46c0      	nop			@ (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b00d      	add	sp, #52	@ 0x34
 8000346:	bd90      	pop	{r4, r7, pc}

08000348 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	@ 0x40
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800034e:	232c      	movs	r3, #44	@ 0x2c
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	0018      	movs	r0, r3
 8000354:	2314      	movs	r3, #20
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f004 fe87 	bl	800506c <memset>
  RTC_DateTypeDef sDate = {0};
 800035e:	2328      	movs	r3, #40	@ 0x28
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	2328      	movs	r3, #40	@ 0x28
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f004 fe7c 	bl	800506c <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000374:	4b44      	ldr	r3, [pc, #272]	@ (8000488 <MX_RTC_Init+0x140>)
 8000376:	4a45      	ldr	r2, [pc, #276]	@ (800048c <MX_RTC_Init+0x144>)
 8000378:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800037a:	4b43      	ldr	r3, [pc, #268]	@ (8000488 <MX_RTC_Init+0x140>)
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000380:	4b41      	ldr	r3, [pc, #260]	@ (8000488 <MX_RTC_Init+0x140>)
 8000382:	227f      	movs	r2, #127	@ 0x7f
 8000384:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000386:	4b40      	ldr	r3, [pc, #256]	@ (8000488 <MX_RTC_Init+0x140>)
 8000388:	22ff      	movs	r2, #255	@ 0xff
 800038a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800038c:	4b3e      	ldr	r3, [pc, #248]	@ (8000488 <MX_RTC_Init+0x140>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000392:	4b3d      	ldr	r3, [pc, #244]	@ (8000488 <MX_RTC_Init+0x140>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000398:	4b3b      	ldr	r3, [pc, #236]	@ (8000488 <MX_RTC_Init+0x140>)
 800039a:	2200      	movs	r2, #0
 800039c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800039e:	4b3a      	ldr	r3, [pc, #232]	@ (8000488 <MX_RTC_Init+0x140>)
 80003a0:	2280      	movs	r2, #128	@ 0x80
 80003a2:	05d2      	lsls	r2, r2, #23
 80003a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003a6:	4b38      	ldr	r3, [pc, #224]	@ (8000488 <MX_RTC_Init+0x140>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ac:	4b36      	ldr	r3, [pc, #216]	@ (8000488 <MX_RTC_Init+0x140>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f002 f804 	bl	80023bc <HAL_RTC_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80003b8:	f000 fdba 	bl	8000f30 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003bc:	212c      	movs	r1, #44	@ 0x2c
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003e2:	1879      	adds	r1, r7, r1
 80003e4:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <MX_RTC_Init+0x140>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	0018      	movs	r0, r3
 80003ea:	f002 f875 	bl	80024d8 <HAL_RTC_SetTime>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80003f2:	f000 fd9d 	bl	8000f30 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003f6:	2128      	movs	r1, #40	@ 0x28
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2201      	movs	r2, #1
 8000402:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2201      	movs	r2, #1
 8000408:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000410:	1879      	adds	r1, r7, r1
 8000412:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <MX_RTC_Init+0x140>)
 8000414:	2201      	movs	r2, #1
 8000416:	0018      	movs	r0, r3
 8000418:	f002 f962 	bl	80026e0 <HAL_RTC_SetDate>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000420:	f000 fd86 	bl	8000f30 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800042a:	003b      	movs	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000430:	003b      	movs	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000436:	003b      	movs	r3, r7
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800043c:	003b      	movs	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000442:	003b      	movs	r3, r7
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000448:	003b      	movs	r3, r7
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800044e:	003b      	movs	r3, r7
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000454:	003b      	movs	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800045a:	003b      	movs	r3, r7
 800045c:	2220      	movs	r2, #32
 800045e:	2101      	movs	r1, #1
 8000460:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000462:	003b      	movs	r3, r7
 8000464:	2280      	movs	r2, #128	@ 0x80
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800046a:	0039      	movs	r1, r7
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_RTC_Init+0x140>)
 800046e:	2201      	movs	r2, #1
 8000470:	0018      	movs	r0, r3
 8000472:	f002 fa15 	bl	80028a0 <HAL_RTC_SetAlarm_IT>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800047a:	f000 fd59 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b010      	add	sp, #64	@ 0x40
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	20000084 	.word	0x20000084
 800048c:	40002800 	.word	0x40002800

08000490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000494:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 8000496:	4a17      	ldr	r2, [pc, #92]	@ (80004f4 <MX_USART2_UART_Init+0x64>)
 8000498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 800049c:	22e1      	movs	r2, #225	@ 0xe1
 800049e:	0252      	lsls	r2, r2, #9
 80004a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fc62 	bl	8002da4 <HAL_UART_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004e4:	f000 fd24 	bl	8000f30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	200000ac 	.word	0x200000ac
 80004f4:	40004400 	.word	0x40004400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000502:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000504:	2104      	movs	r1, #4
 8000506:	430a      	orrs	r2, r1
 8000508:	635a      	str	r2, [r3, #52]	@ 0x34
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <MX_GPIO_Init+0x40>)
 800050c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050e:	2204      	movs	r2, #4
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <MX_GPIO_Init+0x40>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	40021000 	.word	0x40021000

0800053c <sendATCommand>:

/* USER CODE BEGIN 4 */
void sendATCommand(char* command) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff fdde 	bl	8000108 <strlen>
 800054c:	0003      	movs	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	2301      	movs	r3, #1
 8000552:	425b      	negs	r3, r3
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	4803      	ldr	r0, [pc, #12]	@ (8000564 <sendATCommand+0x28>)
 8000558:	f002 fc7a 	bl	8002e50 <HAL_UART_Transmit>
}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000ac 	.word	0x200000ac

08000568 <InitialConfigBg95>:
void receiveResponse(char* buffer, uint16_t bufferSize) {
    HAL_UART_Receive(&huart2, (uint8_t*)buffer, bufferSize, HAL_MAX_DELAY);
}


void InitialConfigBg95() {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b0c5      	sub	sp, #276	@ 0x114
 800056c:	af00      	add	r7, sp, #0
    char response[128];   // Buffer temporário para respostas AT
    char ip[16];          // Buffer para armazenar o endereço IP
    char command[128];    // Buffer para os comandos AT
    sendATCommand("AT+CCID\r\n");
 800056e:	4bdb      	ldr	r3, [pc, #876]	@ (80008dc <InitialConfigBg95+0x374>)
 8000570:	0018      	movs	r0, r3
 8000572:	f7ff ffe3 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000576:	e00d      	b.n	8000594 <InitialConfigBg95+0x2c>
	    sendATCommand("AT+CCID\r\n");
 8000578:	4bd8      	ldr	r3, [pc, #864]	@ (80008dc <InitialConfigBg95+0x374>)
 800057a:	0018      	movs	r0, r3
 800057c:	f7ff ffde 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 8000580:	2064      	movs	r0, #100	@ 0x64
 8000582:	f000 ff25 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000586:	2380      	movs	r3, #128	@ 0x80
 8000588:	005a      	lsls	r2, r3, #1
 800058a:	49d5      	ldr	r1, [pc, #852]	@ (80008e0 <InitialConfigBg95+0x378>)
 800058c:	4bd5      	ldr	r3, [pc, #852]	@ (80008e4 <InitialConfigBg95+0x37c>)
 800058e:	0018      	movs	r0, r3
 8000590:	f002 fd02 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000594:	4bd4      	ldr	r3, [pc, #848]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	b2db      	uxtb	r3, r3
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0ec      	beq.n	8000578 <InitialConfigBg95+0x10>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 800059e:	4bd2      	ldr	r3, [pc, #840]	@ (80008e8 <InitialConfigBg95+0x380>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	701a      	strb	r2, [r3, #0]
    // Comando AT+CIMI
    sendATCommand("AT+CIMI\r\n");
 80005a4:	4bd1      	ldr	r3, [pc, #836]	@ (80008ec <InitialConfigBg95+0x384>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f7ff ffc8 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80005ac:	e00d      	b.n	80005ca <InitialConfigBg95+0x62>
    		sendATCommand("AT+CIMI\r\n");
 80005ae:	4bcf      	ldr	r3, [pc, #828]	@ (80008ec <InitialConfigBg95+0x384>)
 80005b0:	0018      	movs	r0, r3
 80005b2:	f7ff ffc3 	bl	800053c <sendATCommand>
    		HAL_Delay(100);
 80005b6:	2064      	movs	r0, #100	@ 0x64
 80005b8:	f000 ff0a 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80005bc:	2380      	movs	r3, #128	@ 0x80
 80005be:	005a      	lsls	r2, r3, #1
 80005c0:	49c7      	ldr	r1, [pc, #796]	@ (80008e0 <InitialConfigBg95+0x378>)
 80005c2:	4bc8      	ldr	r3, [pc, #800]	@ (80008e4 <InitialConfigBg95+0x37c>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f002 fce7 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80005ca:	4bc7      	ldr	r3, [pc, #796]	@ (80008e8 <InitialConfigBg95+0x380>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d0ec      	beq.n	80005ae <InitialConfigBg95+0x46>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 80005d4:	4bc4      	ldr	r3, [pc, #784]	@ (80008e8 <InitialConfigBg95+0x380>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	701a      	strb	r2, [r3, #0]

    // Comando AT+CFUN=0
    sendATCommand("AT+CFUN=0\r\n");
 80005da:	4bc5      	ldr	r3, [pc, #788]	@ (80008f0 <InitialConfigBg95+0x388>)
 80005dc:	0018      	movs	r0, r3
 80005de:	f7ff ffad 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80005e2:	e00d      	b.n	8000600 <InitialConfigBg95+0x98>
        	sendATCommand("AT+CFUN=0\r\n");
 80005e4:	4bc2      	ldr	r3, [pc, #776]	@ (80008f0 <InitialConfigBg95+0x388>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ffa8 	bl	800053c <sendATCommand>
       		HAL_Delay(100);
 80005ec:	2064      	movs	r0, #100	@ 0x64
 80005ee:	f000 feef 	bl	80013d0 <HAL_Delay>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	005a      	lsls	r2, r3, #1
 80005f6:	49ba      	ldr	r1, [pc, #744]	@ (80008e0 <InitialConfigBg95+0x378>)
 80005f8:	4bba      	ldr	r3, [pc, #744]	@ (80008e4 <InitialConfigBg95+0x37c>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f002 fccc 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000600:	4bb9      	ldr	r3, [pc, #740]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000602:	781b      	ldrb	r3, [r3, #0]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	2b00      	cmp	r3, #0
 8000608:	d0ec      	beq.n	80005e4 <InitialConfigBg95+0x7c>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 800060a:	4bb7      	ldr	r3, [pc, #732]	@ (80008e8 <InitialConfigBg95+0x380>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]

    // Comando AT+QCFG="nwscanmode",0,1
    sendATCommand("AT+QCFG=\"nwscanmode\",0,1\r\n");
 8000610:	4bb8      	ldr	r3, [pc, #736]	@ (80008f4 <InitialConfigBg95+0x38c>)
 8000612:	0018      	movs	r0, r3
 8000614:	f7ff ff92 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000618:	e00d      	b.n	8000636 <InitialConfigBg95+0xce>
	    sendATCommand("AT+QCFG=\"nwscanmode\",0,1\r\n");
 800061a:	4bb6      	ldr	r3, [pc, #728]	@ (80008f4 <InitialConfigBg95+0x38c>)
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff ff8d 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 8000622:	2064      	movs	r0, #100	@ 0x64
 8000624:	f000 fed4 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000628:	2380      	movs	r3, #128	@ 0x80
 800062a:	005a      	lsls	r2, r3, #1
 800062c:	49ac      	ldr	r1, [pc, #688]	@ (80008e0 <InitialConfigBg95+0x378>)
 800062e:	4bad      	ldr	r3, [pc, #692]	@ (80008e4 <InitialConfigBg95+0x37c>)
 8000630:	0018      	movs	r0, r3
 8000632:	f002 fcb1 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000636:	4bac      	ldr	r3, [pc, #688]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	b2db      	uxtb	r3, r3
 800063c:	2b00      	cmp	r3, #0
 800063e:	d0ec      	beq.n	800061a <InitialConfigBg95+0xb2>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000640:	4ba9      	ldr	r3, [pc, #676]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]

    // Comando AT+QCFG="nwscanseq",020103,1
    sendATCommand("AT+QCFG=\"nwscanseq\",020103,1\r\n");
 8000646:	4bac      	ldr	r3, [pc, #688]	@ (80008f8 <InitialConfigBg95+0x390>)
 8000648:	0018      	movs	r0, r3
 800064a:	f7ff ff77 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 800064e:	e00d      	b.n	800066c <InitialConfigBg95+0x104>
	    sendATCommand("AT+QCFG=\"nwscanseq\",020103,1\r\n");
 8000650:	4ba9      	ldr	r3, [pc, #676]	@ (80008f8 <InitialConfigBg95+0x390>)
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff ff72 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 8000658:	2064      	movs	r0, #100	@ 0x64
 800065a:	f000 feb9 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 800065e:	2380      	movs	r3, #128	@ 0x80
 8000660:	005a      	lsls	r2, r3, #1
 8000662:	499f      	ldr	r1, [pc, #636]	@ (80008e0 <InitialConfigBg95+0x378>)
 8000664:	4b9f      	ldr	r3, [pc, #636]	@ (80008e4 <InitialConfigBg95+0x37c>)
 8000666:	0018      	movs	r0, r3
 8000668:	f002 fc96 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 800066c:	4b9e      	ldr	r3, [pc, #632]	@ (80008e8 <InitialConfigBg95+0x380>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d0ec      	beq.n	8000650 <InitialConfigBg95+0xe8>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000676:	4b9c      	ldr	r3, [pc, #624]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]

    // Comando AT+QCFG="band",0,0
    sendATCommand("AT+QCFG=\"band\",0,0\r\n");
 800067c:	4b9f      	ldr	r3, [pc, #636]	@ (80008fc <InitialConfigBg95+0x394>)
 800067e:	0018      	movs	r0, r3
 8000680:	f7ff ff5c 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000684:	e00d      	b.n	80006a2 <InitialConfigBg95+0x13a>
	    sendATCommand("AT+QCFG=\"band\",0,0\r\n");
 8000686:	4b9d      	ldr	r3, [pc, #628]	@ (80008fc <InitialConfigBg95+0x394>)
 8000688:	0018      	movs	r0, r3
 800068a:	f7ff ff57 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 800068e:	2064      	movs	r0, #100	@ 0x64
 8000690:	f000 fe9e 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000694:	2380      	movs	r3, #128	@ 0x80
 8000696:	005a      	lsls	r2, r3, #1
 8000698:	4991      	ldr	r1, [pc, #580]	@ (80008e0 <InitialConfigBg95+0x378>)
 800069a:	4b92      	ldr	r3, [pc, #584]	@ (80008e4 <InitialConfigBg95+0x37c>)
 800069c:	0018      	movs	r0, r3
 800069e:	f002 fc7b 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 80006a2:	4b91      	ldr	r3, [pc, #580]	@ (80008e8 <InitialConfigBg95+0x380>)
 80006a4:	781b      	ldrb	r3, [r3, #0]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d0ec      	beq.n	8000686 <InitialConfigBg95+0x11e>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 80006ac:	4b8e      	ldr	r3, [pc, #568]	@ (80008e8 <InitialConfigBg95+0x380>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	701a      	strb	r2, [r3, #0]


    // Comando AT+COPS=0
    sendATCommand("AT+COPS=0\r\n");
 80006b2:	4b93      	ldr	r3, [pc, #588]	@ (8000900 <InitialConfigBg95+0x398>)
 80006b4:	0018      	movs	r0, r3
 80006b6:	f7ff ff41 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80006ba:	e00d      	b.n	80006d8 <InitialConfigBg95+0x170>
        	sendATCommand("AT+COPS=0\r\n");
 80006bc:	4b90      	ldr	r3, [pc, #576]	@ (8000900 <InitialConfigBg95+0x398>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f7ff ff3c 	bl	800053c <sendATCommand>
    		HAL_Delay(100);
 80006c4:	2064      	movs	r0, #100	@ 0x64
 80006c6:	f000 fe83 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80006ca:	2380      	movs	r3, #128	@ 0x80
 80006cc:	005a      	lsls	r2, r3, #1
 80006ce:	4984      	ldr	r1, [pc, #528]	@ (80008e0 <InitialConfigBg95+0x378>)
 80006d0:	4b84      	ldr	r3, [pc, #528]	@ (80008e4 <InitialConfigBg95+0x37c>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f002 fc60 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80006d8:	4b83      	ldr	r3, [pc, #524]	@ (80008e8 <InitialConfigBg95+0x380>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d0ec      	beq.n	80006bc <InitialConfigBg95+0x154>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 80006e2:	4b81      	ldr	r3, [pc, #516]	@ (80008e8 <InitialConfigBg95+0x380>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	701a      	strb	r2, [r3, #0]

    // Configurar o APN, username e password para a Vivo
    sendATCommand("AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"datatem\",\"datatem\"\r\n");
 80006e8:	4b86      	ldr	r3, [pc, #536]	@ (8000904 <InitialConfigBg95+0x39c>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f7ff ff26 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 80006f0:	e00d      	b.n	800070e <InitialConfigBg95+0x1a6>
	    sendATCommand("AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"datatem\",\"datatem\"\r\n");
 80006f2:	4b84      	ldr	r3, [pc, #528]	@ (8000904 <InitialConfigBg95+0x39c>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff ff21 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 80006fa:	2064      	movs	r0, #100	@ 0x64
 80006fc:	f000 fe68 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	005a      	lsls	r2, r3, #1
 8000704:	4976      	ldr	r1, [pc, #472]	@ (80008e0 <InitialConfigBg95+0x378>)
 8000706:	4b77      	ldr	r3, [pc, #476]	@ (80008e4 <InitialConfigBg95+0x37c>)
 8000708:	0018      	movs	r0, r3
 800070a:	f002 fc45 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 800070e:	4b76      	ldr	r3, [pc, #472]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0ec      	beq.n	80006f2 <InitialConfigBg95+0x18a>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000718:	4b73      	ldr	r3, [pc, #460]	@ (80008e8 <InitialConfigBg95+0x380>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]

    // Comando AT+CFUN=1
    sendATCommand("AT+CFUN=1\r\n");
 800071e:	4b7a      	ldr	r3, [pc, #488]	@ (8000908 <InitialConfigBg95+0x3a0>)
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ff0b 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000726:	e00d      	b.n	8000744 <InitialConfigBg95+0x1dc>
	    sendATCommand("AT+CFUN=1\r\n");
 8000728:	4b77      	ldr	r3, [pc, #476]	@ (8000908 <InitialConfigBg95+0x3a0>)
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff ff06 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 8000730:	2064      	movs	r0, #100	@ 0x64
 8000732:	f000 fe4d 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000736:	2380      	movs	r3, #128	@ 0x80
 8000738:	005a      	lsls	r2, r3, #1
 800073a:	4969      	ldr	r1, [pc, #420]	@ (80008e0 <InitialConfigBg95+0x378>)
 800073c:	4b69      	ldr	r3, [pc, #420]	@ (80008e4 <InitialConfigBg95+0x37c>)
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fc2a 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000744:	4b68      	ldr	r3, [pc, #416]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d0ec      	beq.n	8000728 <InitialConfigBg95+0x1c0>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 800074e:	4b66      	ldr	r3, [pc, #408]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000750:	2200      	movs	r2, #0
 8000752:	701a      	strb	r2, [r3, #0]

    // Comando AT+CREG=1;+CGREG=1;+CEREG=1
    sendATCommand("AT+CREG=1;+CGREG=1;+CEREG=1\r\n");
 8000754:	4b6d      	ldr	r3, [pc, #436]	@ (800090c <InitialConfigBg95+0x3a4>)
 8000756:	0018      	movs	r0, r3
 8000758:	f7ff fef0 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 800075c:	e00d      	b.n	800077a <InitialConfigBg95+0x212>
    		sendATCommand("AT+CREG=1;+CGREG=1;+CEREG=1\r\n");
 800075e:	4b6b      	ldr	r3, [pc, #428]	@ (800090c <InitialConfigBg95+0x3a4>)
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff feeb 	bl	800053c <sendATCommand>
    		HAL_Delay(100);
 8000766:	2064      	movs	r0, #100	@ 0x64
 8000768:	f000 fe32 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 800076c:	2380      	movs	r3, #128	@ 0x80
 800076e:	005a      	lsls	r2, r3, #1
 8000770:	495b      	ldr	r1, [pc, #364]	@ (80008e0 <InitialConfigBg95+0x378>)
 8000772:	4b5c      	ldr	r3, [pc, #368]	@ (80008e4 <InitialConfigBg95+0x37c>)
 8000774:	0018      	movs	r0, r3
 8000776:	f002 fc0f 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 800077a:	4b5b      	ldr	r3, [pc, #364]	@ (80008e8 <InitialConfigBg95+0x380>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d0ec      	beq.n	800075e <InitialConfigBg95+0x1f6>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000784:	4b58      	ldr	r3, [pc, #352]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000786:	2200      	movs	r2, #0
 8000788:	701a      	strb	r2, [r3, #0]

    // Comando AT+COPS?
    sendATCommand("AT+COPS?\r\n");
 800078a:	4b61      	ldr	r3, [pc, #388]	@ (8000910 <InitialConfigBg95+0x3a8>)
 800078c:	0018      	movs	r0, r3
 800078e:	f7ff fed5 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000792:	e00d      	b.n	80007b0 <InitialConfigBg95+0x248>
	    sendATCommand("AT+COPS?\r\n");
 8000794:	4b5e      	ldr	r3, [pc, #376]	@ (8000910 <InitialConfigBg95+0x3a8>)
 8000796:	0018      	movs	r0, r3
 8000798:	f7ff fed0 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 800079c:	2064      	movs	r0, #100	@ 0x64
 800079e:	f000 fe17 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80007a2:	2380      	movs	r3, #128	@ 0x80
 80007a4:	005a      	lsls	r2, r3, #1
 80007a6:	494e      	ldr	r1, [pc, #312]	@ (80008e0 <InitialConfigBg95+0x378>)
 80007a8:	4b4e      	ldr	r3, [pc, #312]	@ (80008e4 <InitialConfigBg95+0x37c>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f002 fbf4 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 80007b0:	4b4d      	ldr	r3, [pc, #308]	@ (80008e8 <InitialConfigBg95+0x380>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d0ec      	beq.n	8000794 <InitialConfigBg95+0x22c>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 80007ba:	4b4b      	ldr	r3, [pc, #300]	@ (80008e8 <InitialConfigBg95+0x380>)
 80007bc:	2200      	movs	r2, #0
 80007be:	701a      	strb	r2, [r3, #0]

    // Comando AT+QCSQ
    sendATCommand("AT+QCSQ\r\n");
 80007c0:	4b54      	ldr	r3, [pc, #336]	@ (8000914 <InitialConfigBg95+0x3ac>)
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff feba 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80007c8:	e00d      	b.n	80007e6 <InitialConfigBg95+0x27e>
        	sendATCommand("AT+QCSQ\r\n");
 80007ca:	4b52      	ldr	r3, [pc, #328]	@ (8000914 <InitialConfigBg95+0x3ac>)
 80007cc:	0018      	movs	r0, r3
 80007ce:	f7ff feb5 	bl	800053c <sendATCommand>
    		HAL_Delay(100);
 80007d2:	2064      	movs	r0, #100	@ 0x64
 80007d4:	f000 fdfc 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80007d8:	2380      	movs	r3, #128	@ 0x80
 80007da:	005a      	lsls	r2, r3, #1
 80007dc:	4940      	ldr	r1, [pc, #256]	@ (80008e0 <InitialConfigBg95+0x378>)
 80007de:	4b41      	ldr	r3, [pc, #260]	@ (80008e4 <InitialConfigBg95+0x37c>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f002 fbd9 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80007e6:	4b40      	ldr	r3, [pc, #256]	@ (80008e8 <InitialConfigBg95+0x380>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d0ec      	beq.n	80007ca <InitialConfigBg95+0x262>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 80007f0:	4b3d      	ldr	r3, [pc, #244]	@ (80008e8 <InitialConfigBg95+0x380>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]

    // Comando AT+CREG?;+CEREG?;+CGREG?
    sendATCommand("AT+CREG?;+CEREG?;+CGREG?\r\n");
 80007f6:	4b48      	ldr	r3, [pc, #288]	@ (8000918 <InitialConfigBg95+0x3b0>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fe9f 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80007fe:	e00d      	b.n	800081c <InitialConfigBg95+0x2b4>
    	 	sendATCommand("AT+CREG?;+CEREG?;+CGREG?\r\n");
 8000800:	4b45      	ldr	r3, [pc, #276]	@ (8000918 <InitialConfigBg95+0x3b0>)
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff fe9a 	bl	800053c <sendATCommand>
       		HAL_Delay(100);
 8000808:	2064      	movs	r0, #100	@ 0x64
 800080a:	f000 fde1 	bl	80013d0 <HAL_Delay>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 800080e:	2380      	movs	r3, #128	@ 0x80
 8000810:	005a      	lsls	r2, r3, #1
 8000812:	4933      	ldr	r1, [pc, #204]	@ (80008e0 <InitialConfigBg95+0x378>)
 8000814:	4b33      	ldr	r3, [pc, #204]	@ (80008e4 <InitialConfigBg95+0x37c>)
 8000816:	0018      	movs	r0, r3
 8000818:	f002 fbbe 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 800081c:	4b32      	ldr	r3, [pc, #200]	@ (80008e8 <InitialConfigBg95+0x380>)
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	b2db      	uxtb	r3, r3
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0ec      	beq.n	8000800 <InitialConfigBg95+0x298>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 8000826:	4b30      	ldr	r3, [pc, #192]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]

    // Comando AT+CGATT=1 (Conectar à rede)
    sendATCommand("AT+CGATT=1\r\n");
 800082c:	4b3b      	ldr	r3, [pc, #236]	@ (800091c <InitialConfigBg95+0x3b4>)
 800082e:	0018      	movs	r0, r3
 8000830:	f7ff fe84 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000834:	e00d      	b.n	8000852 <InitialConfigBg95+0x2ea>
        		sendATCommand("AT+CGATT=1\r\n");
 8000836:	4b39      	ldr	r3, [pc, #228]	@ (800091c <InitialConfigBg95+0x3b4>)
 8000838:	0018      	movs	r0, r3
 800083a:	f7ff fe7f 	bl	800053c <sendATCommand>
           		HAL_Delay(100);
 800083e:	2064      	movs	r0, #100	@ 0x64
 8000840:	f000 fdc6 	bl	80013d0 <HAL_Delay>
           		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000844:	2380      	movs	r3, #128	@ 0x80
 8000846:	005a      	lsls	r2, r3, #1
 8000848:	4925      	ldr	r1, [pc, #148]	@ (80008e0 <InitialConfigBg95+0x378>)
 800084a:	4b26      	ldr	r3, [pc, #152]	@ (80008e4 <InitialConfigBg95+0x37c>)
 800084c:	0018      	movs	r0, r3
 800084e:	f002 fba3 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000852:	4b25      	ldr	r3, [pc, #148]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d0ec      	beq.n	8000836 <InitialConfigBg95+0x2ce>
           		RESPONSE_BUFFER_SIZE);
           	}
           	responseReceived = 0;
 800085c:	4b22      	ldr	r3, [pc, #136]	@ (80008e8 <InitialConfigBg95+0x380>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]

    // Verificar o endereço IP alocado
    sendATCommand("AT+CGPADDR\r\n");
 8000862:	4b2f      	ldr	r3, [pc, #188]	@ (8000920 <InitialConfigBg95+0x3b8>)
 8000864:	0018      	movs	r0, r3
 8000866:	f7ff fe69 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 800086a:	e00d      	b.n	8000888 <InitialConfigBg95+0x320>
		sendATCommand("AT+CGPADDR\r\n");
 800086c:	4b2c      	ldr	r3, [pc, #176]	@ (8000920 <InitialConfigBg95+0x3b8>)
 800086e:	0018      	movs	r0, r3
 8000870:	f7ff fe64 	bl	800053c <sendATCommand>

		HAL_Delay(100);
 8000874:	2064      	movs	r0, #100	@ 0x64
 8000876:	f000 fdab 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 800087a:	2380      	movs	r3, #128	@ 0x80
 800087c:	005a      	lsls	r2, r3, #1
 800087e:	4918      	ldr	r1, [pc, #96]	@ (80008e0 <InitialConfigBg95+0x378>)
 8000880:	4b18      	ldr	r3, [pc, #96]	@ (80008e4 <InitialConfigBg95+0x37c>)
 8000882:	0018      	movs	r0, r3
 8000884:	f002 fb88 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000888:	4b17      	ldr	r3, [pc, #92]	@ (80008e8 <InitialConfigBg95+0x380>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0ec      	beq.n	800086c <InitialConfigBg95+0x304>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000892:	4b15      	ldr	r3, [pc, #84]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000894:	2200      	movs	r2, #0
 8000896:	701a      	strb	r2, [r3, #0]
    // Extrair o endereço IP da resposta
    if (sscanf(responseBuffer, "+CGPADDR: 1,\"%15[^\"]", ip) == 1) {
 8000898:	2480      	movs	r4, #128	@ 0x80
 800089a:	193a      	adds	r2, r7, r4
 800089c:	4921      	ldr	r1, [pc, #132]	@ (8000924 <InitialConfigBg95+0x3bc>)
 800089e:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <InitialConfigBg95+0x378>)
 80008a0:	0018      	movs	r0, r3
 80008a2:	f004 facd 	bl	8004e40 <siscanf>
 80008a6:	0003      	movs	r3, r0
 80008a8:	2b01      	cmp	r3, #1
 80008aa:	d106      	bne.n	80008ba <InitialConfigBg95+0x352>
        printf("Endereço IP alocado: %s\n", ip); // Exibir o IP
 80008ac:	193a      	adds	r2, r7, r4
 80008ae:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <InitialConfigBg95+0x3c0>)
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f004 fa20 	bl	8004cf8 <iprintf>
 80008b8:	e003      	b.n	80008c2 <InitialConfigBg95+0x35a>
    } else {
        printf("Falha ao obter o endereço IP.\n");
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <InitialConfigBg95+0x3c4>)
 80008bc:	0018      	movs	r0, r3
 80008be:	f004 fa81 	bl	8004dc4 <puts>
    }

    // Realizar um teste de ping com o IP obtido
    snprintf(command, sizeof(command), "AT+QPING=1,\"%s\"\r\n", ip);
 80008c2:	2380      	movs	r3, #128	@ 0x80
 80008c4:	18fb      	adds	r3, r7, r3
 80008c6:	4a1a      	ldr	r2, [pc, #104]	@ (8000930 <InitialConfigBg95+0x3c8>)
 80008c8:	0038      	movs	r0, r7
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	f004 fa84 	bl	8004dd8 <sniprintf>
    sendATCommand(command);
 80008d0:	003b      	movs	r3, r7
 80008d2:	0018      	movs	r0, r3
 80008d4:	f7ff fe32 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80008d8:	e03a      	b.n	8000950 <InitialConfigBg95+0x3e8>
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	080068a8 	.word	0x080068a8
 80008e0:	20000140 	.word	0x20000140
 80008e4:	200000ac 	.word	0x200000ac
 80008e8:	20000240 	.word	0x20000240
 80008ec:	080068b4 	.word	0x080068b4
 80008f0:	080068c0 	.word	0x080068c0
 80008f4:	080068cc 	.word	0x080068cc
 80008f8:	080068e8 	.word	0x080068e8
 80008fc:	08006908 	.word	0x08006908
 8000900:	08006920 	.word	0x08006920
 8000904:	0800692c 	.word	0x0800692c
 8000908:	08006968 	.word	0x08006968
 800090c:	08006974 	.word	0x08006974
 8000910:	08006994 	.word	0x08006994
 8000914:	080069a0 	.word	0x080069a0
 8000918:	080069ac 	.word	0x080069ac
 800091c:	080069c8 	.word	0x080069c8
 8000920:	080069d8 	.word	0x080069d8
 8000924:	080069e8 	.word	0x080069e8
 8000928:	08006a00 	.word	0x08006a00
 800092c:	08006a1c 	.word	0x08006a1c
 8000930:	08006a3c 	.word	0x08006a3c
    		sendATCommand(command);
 8000934:	003b      	movs	r3, r7
 8000936:	0018      	movs	r0, r3
 8000938:	f7ff fe00 	bl	800053c <sendATCommand>


    		HAL_Delay(100);
 800093c:	2064      	movs	r0, #100	@ 0x64
 800093e:	f000 fd47 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000942:	2380      	movs	r3, #128	@ 0x80
 8000944:	005a      	lsls	r2, r3, #1
 8000946:	4908      	ldr	r1, [pc, #32]	@ (8000968 <InitialConfigBg95+0x400>)
 8000948:	4b08      	ldr	r3, [pc, #32]	@ (800096c <InitialConfigBg95+0x404>)
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fb24 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000950:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <InitialConfigBg95+0x408>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	2b00      	cmp	r3, #0
 8000958:	d0ec      	beq.n	8000934 <InitialConfigBg95+0x3cc>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 800095a:	4b05      	ldr	r3, [pc, #20]	@ (8000970 <InitialConfigBg95+0x408>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
}
 8000960:	46c0      	nop			@ (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	b045      	add	sp, #276	@ 0x114
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	20000140 	.word	0x20000140
 800096c:	200000ac 	.word	0x200000ac
 8000970:	20000240 	.word	0x20000240

08000974 <ConfigPdpContext>:


void ConfigPdpContext() {
 8000974:	b580      	push	{r7, lr}
 8000976:	b0e0      	sub	sp, #384	@ 0x180
 8000978:	af00      	add	r7, sp, #0
    char command[128];
    char response[256];

    // Configurar APN com o contexto CID 1, com login e senha
    snprintf(command, sizeof(command), "AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"\",0,0\r\n");
 800097a:	4a36      	ldr	r2, [pc, #216]	@ (8000a54 <ConfigPdpContext+0xe0>)
 800097c:	1c7b      	adds	r3, r7, #1
 800097e:	33ff      	adds	r3, #255	@ 0xff
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	0018      	movs	r0, r3
 8000984:	f004 fa28 	bl	8004dd8 <sniprintf>
    sendATCommand(command);
 8000988:	1c7b      	adds	r3, r7, #1
 800098a:	33ff      	adds	r3, #255	@ 0xff
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fdd5 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000992:	e00e      	b.n	80009b2 <ConfigPdpContext+0x3e>
	    sendATCommand(command);
 8000994:	1c7b      	adds	r3, r7, #1
 8000996:	33ff      	adds	r3, #255	@ 0xff
 8000998:	0018      	movs	r0, r3
 800099a:	f7ff fdcf 	bl	800053c <sendATCommand>

		HAL_Delay(100);
 800099e:	2064      	movs	r0, #100	@ 0x64
 80009a0:	f000 fd16 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80009a4:	2380      	movs	r3, #128	@ 0x80
 80009a6:	005a      	lsls	r2, r3, #1
 80009a8:	492b      	ldr	r1, [pc, #172]	@ (8000a58 <ConfigPdpContext+0xe4>)
 80009aa:	4b2c      	ldr	r3, [pc, #176]	@ (8000a5c <ConfigPdpContext+0xe8>)
 80009ac:	0018      	movs	r0, r3
 80009ae:	f002 faf3 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 80009b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a60 <ConfigPdpContext+0xec>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d0eb      	beq.n	8000994 <ConfigPdpContext+0x20>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 80009bc:	4b28      	ldr	r3, [pc, #160]	@ (8000a60 <ConfigPdpContext+0xec>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
    // Ativar o contexto PDP
    sendATCommand("AT+CGACT=1,1\r\n");
 80009c2:	4b28      	ldr	r3, [pc, #160]	@ (8000a64 <ConfigPdpContext+0xf0>)
 80009c4:	0018      	movs	r0, r3
 80009c6:	f7ff fdb9 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80009ca:	e00d      	b.n	80009e8 <ConfigPdpContext+0x74>
        	sendATCommand("AT+CGACT=1,1\r\n");
 80009cc:	4b25      	ldr	r3, [pc, #148]	@ (8000a64 <ConfigPdpContext+0xf0>)
 80009ce:	0018      	movs	r0, r3
 80009d0:	f7ff fdb4 	bl	800053c <sendATCommand>
    		HAL_Delay(100);
 80009d4:	2064      	movs	r0, #100	@ 0x64
 80009d6:	f000 fcfb 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80009da:	2380      	movs	r3, #128	@ 0x80
 80009dc:	005a      	lsls	r2, r3, #1
 80009de:	491e      	ldr	r1, [pc, #120]	@ (8000a58 <ConfigPdpContext+0xe4>)
 80009e0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a5c <ConfigPdpContext+0xe8>)
 80009e2:	0018      	movs	r0, r3
 80009e4:	f002 fad8 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80009e8:	4b1d      	ldr	r3, [pc, #116]	@ (8000a60 <ConfigPdpContext+0xec>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	b2db      	uxtb	r3, r3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0ec      	beq.n	80009cc <ConfigPdpContext+0x58>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 80009f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a60 <ConfigPdpContext+0xec>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	701a      	strb	r2, [r3, #0]
    // Verificar se o contexto PDP está ativo
    sendATCommand("AT+CGPADDR=1\r\n");
 80009f8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a68 <ConfigPdpContext+0xf4>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f7ff fd9e 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000a00:	e00d      	b.n	8000a1e <ConfigPdpContext+0xaa>
        		sendATCommand("AT+CGPADDR=1\r\n");
 8000a02:	4b19      	ldr	r3, [pc, #100]	@ (8000a68 <ConfigPdpContext+0xf4>)
 8000a04:	0018      	movs	r0, r3
 8000a06:	f7ff fd99 	bl	800053c <sendATCommand>
        		HAL_Delay(100);
 8000a0a:	2064      	movs	r0, #100	@ 0x64
 8000a0c:	f000 fce0 	bl	80013d0 <HAL_Delay>
        		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000a10:	2380      	movs	r3, #128	@ 0x80
 8000a12:	005a      	lsls	r2, r3, #1
 8000a14:	4910      	ldr	r1, [pc, #64]	@ (8000a58 <ConfigPdpContext+0xe4>)
 8000a16:	4b11      	ldr	r3, [pc, #68]	@ (8000a5c <ConfigPdpContext+0xe8>)
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f002 fabd 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000a1e:	4b10      	ldr	r3, [pc, #64]	@ (8000a60 <ConfigPdpContext+0xec>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	b2db      	uxtb	r3, r3
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d0ec      	beq.n	8000a02 <ConfigPdpContext+0x8e>
        		RESPONSE_BUFFER_SIZE);
        	}
        	responseReceived = 0;
 8000a28:	4b0d      	ldr	r3, [pc, #52]	@ (8000a60 <ConfigPdpContext+0xec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	701a      	strb	r2, [r3, #0]
    // Receber a resposta e verificar se contém o IP
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    if (strstr(responseBuffer, "0.0.0.0") == NULL) {
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	@ (8000a6c <ConfigPdpContext+0xf8>)
 8000a30:	4b09      	ldr	r3, [pc, #36]	@ (8000a58 <ConfigPdpContext+0xe4>)
 8000a32:	0011      	movs	r1, r2
 8000a34:	0018      	movs	r0, r3
 8000a36:	f004 fb21 	bl	800507c <strstr>
 8000a3a:	1e03      	subs	r3, r0, #0
 8000a3c:	d106      	bne.n	8000a4c <ConfigPdpContext+0xd8>
        // Contexto PDP ativado com sucesso, IP foi alocado corretamente
        snprintf(command, sizeof(command), "PDP context ativado com sucesso. APN: inlog.vivo.com.br, IP: %s\r\n", response);
 8000a3e:	003b      	movs	r3, r7
 8000a40:	4a0b      	ldr	r2, [pc, #44]	@ (8000a70 <ConfigPdpContext+0xfc>)
 8000a42:	1c78      	adds	r0, r7, #1
 8000a44:	30ff      	adds	r0, #255	@ 0xff
 8000a46:	2180      	movs	r1, #128	@ 0x80
 8000a48:	f004 f9c6 	bl	8004dd8 <sniprintf>
       // sendATCommand(command); // Transmitir a mensagem de sucesso pela UART
    } else {
        // Erro ao ativar o contexto PDP
        //sendATCommand("Erro ao ativar o contexto PDP\r\n");
    }
}
 8000a4c:	46c0      	nop			@ (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b060      	add	sp, #384	@ 0x180
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	08006a50 	.word	0x08006a50
 8000a58:	20000140 	.word	0x20000140
 8000a5c:	200000ac 	.word	0x200000ac
 8000a60:	20000240 	.word	0x20000240
 8000a64:	08006a80 	.word	0x08006a80
 8000a68:	08006a90 	.word	0x08006a90
 8000a6c:	08006aa0 	.word	0x08006aa0
 8000a70:	08006aa8 	.word	0x08006aa8

08000a74 <ConfigMqttContext>:


void ConfigMqttContext() {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
    // Configurar a versão MQTT como 3.1.1
    sendATCommand("AT+QMTCFG=\"version\",0,4\r\n");
 8000a78:	4b37      	ldr	r3, [pc, #220]	@ (8000b58 <ConfigMqttContext+0xe4>)
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f7ff fd5e 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000a80:	e00d      	b.n	8000a9e <ConfigMqttContext+0x2a>
	    sendATCommand("AT+QMTCFG=\"version\",0,4\r\n");
 8000a82:	4b35      	ldr	r3, [pc, #212]	@ (8000b58 <ConfigMqttContext+0xe4>)
 8000a84:	0018      	movs	r0, r3
 8000a86:	f7ff fd59 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 8000a8a:	2064      	movs	r0, #100	@ 0x64
 8000a8c:	f000 fca0 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000a90:	2380      	movs	r3, #128	@ 0x80
 8000a92:	005a      	lsls	r2, r3, #1
 8000a94:	4931      	ldr	r1, [pc, #196]	@ (8000b5c <ConfigMqttContext+0xe8>)
 8000a96:	4b32      	ldr	r3, [pc, #200]	@ (8000b60 <ConfigMqttContext+0xec>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 fa7d 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000a9e:	4b31      	ldr	r3, [pc, #196]	@ (8000b64 <ConfigMqttContext+0xf0>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0ec      	beq.n	8000a82 <ConfigMqttContext+0xe>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000aa8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b64 <ConfigMqttContext+0xf0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
    // Associar o contexto PDP ao cliente MQTT
    sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000aae:	4b2e      	ldr	r3, [pc, #184]	@ (8000b68 <ConfigMqttContext+0xf4>)
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff fd43 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000ab6:	e00d      	b.n	8000ad4 <ConfigMqttContext+0x60>
    		sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000ab8:	4b2b      	ldr	r3, [pc, #172]	@ (8000b68 <ConfigMqttContext+0xf4>)
 8000aba:	0018      	movs	r0, r3
 8000abc:	f7ff fd3e 	bl	800053c <sendATCommand>
    		HAL_Delay(100);
 8000ac0:	2064      	movs	r0, #100	@ 0x64
 8000ac2:	f000 fc85 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000ac6:	2380      	movs	r3, #128	@ 0x80
 8000ac8:	005a      	lsls	r2, r3, #1
 8000aca:	4924      	ldr	r1, [pc, #144]	@ (8000b5c <ConfigMqttContext+0xe8>)
 8000acc:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <ConfigMqttContext+0xec>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f002 fa62 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000ad4:	4b23      	ldr	r3, [pc, #140]	@ (8000b64 <ConfigMqttContext+0xf0>)
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d0ec      	beq.n	8000ab8 <ConfigMqttContext+0x44>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000ade:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <ConfigMqttContext+0xf0>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	701a      	strb	r2, [r3, #0]
    // Habilitar SSL para o cliente MQTT
    sendATCommand("AT+QMTCFG=\"ssl\",0,1,0\r\n");
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <ConfigMqttContext+0xf8>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff fd28 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000aec:	e00d      	b.n	8000b0a <ConfigMqttContext+0x96>
    		sendATCommand("AT+QMTCFG=\"ssl\",0,1,0\r\n");
 8000aee:	4b1f      	ldr	r3, [pc, #124]	@ (8000b6c <ConfigMqttContext+0xf8>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fd23 	bl	800053c <sendATCommand>
       		HAL_Delay(100);
 8000af6:	2064      	movs	r0, #100	@ 0x64
 8000af8:	f000 fc6a 	bl	80013d0 <HAL_Delay>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000afc:	2380      	movs	r3, #128	@ 0x80
 8000afe:	005a      	lsls	r2, r3, #1
 8000b00:	4916      	ldr	r1, [pc, #88]	@ (8000b5c <ConfigMqttContext+0xe8>)
 8000b02:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <ConfigMqttContext+0xec>)
 8000b04:	0018      	movs	r0, r3
 8000b06:	f002 fa47 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <ConfigMqttContext+0xf0>)
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d0ec      	beq.n	8000aee <ConfigMqttContext+0x7a>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <ConfigMqttContext+0xf0>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	701a      	strb	r2, [r3, #0]
    // Configurar keepalive para 3600 segundos
    sendATCommand("AT+QMTCFG=\"keepalive\",0,3600\r\n");
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <ConfigMqttContext+0xfc>)
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f7ff fd0d 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000b22:	e00d      	b.n	8000b40 <ConfigMqttContext+0xcc>
	    sendATCommand("AT+QMTCFG=\"keepalive\",0,3600\r\n");
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <ConfigMqttContext+0xfc>)
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff fd08 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 8000b2c:	2064      	movs	r0, #100	@ 0x64
 8000b2e:	f000 fc4f 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	005a      	lsls	r2, r3, #1
 8000b36:	4909      	ldr	r1, [pc, #36]	@ (8000b5c <ConfigMqttContext+0xe8>)
 8000b38:	4b09      	ldr	r3, [pc, #36]	@ (8000b60 <ConfigMqttContext+0xec>)
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f002 fa2c 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000b40:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <ConfigMqttContext+0xf0>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d0ec      	beq.n	8000b24 <ConfigMqttContext+0xb0>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <ConfigMqttContext+0xf0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	701a      	strb	r2, [r3, #0]
    // Configurar o "Will Message" do MQTT
   // sendATCommand("AT+QMTCFG=\"will\",0,1,0,1,\"/test/will\",\"Client disconnected unexpectedly\"\r\n");
}
 8000b50:	46c0      	nop			@ (mov r8, r8)
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	46c0      	nop			@ (mov r8, r8)
 8000b58:	08006aec 	.word	0x08006aec
 8000b5c:	20000140 	.word	0x20000140
 8000b60:	200000ac 	.word	0x200000ac
 8000b64:	20000240 	.word	0x20000240
 8000b68:	08006b08 	.word	0x08006b08
 8000b6c:	08006b24 	.word	0x08006b24
 8000b70:	08006b3c 	.word	0x08006b3c

08000b74 <ActivePdp>:

void ActivePdp() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    // Verificar se o APN está configurado corretamente
    sendATCommand("AT+CGDCONT?\r\n");
 8000b78:	4b29      	ldr	r3, [pc, #164]	@ (8000c20 <ActivePdp+0xac>)
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f7ff fcde 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000b80:	e00d      	b.n	8000b9e <ActivePdp+0x2a>
        	sendATCommand("AT+CGDCONT?\r\n");
 8000b82:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <ActivePdp+0xac>)
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff fcd9 	bl	800053c <sendATCommand>
    		HAL_Delay(100);
 8000b8a:	2064      	movs	r0, #100	@ 0x64
 8000b8c:	f000 fc20 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000b90:	2380      	movs	r3, #128	@ 0x80
 8000b92:	005a      	lsls	r2, r3, #1
 8000b94:	4923      	ldr	r1, [pc, #140]	@ (8000c24 <ActivePdp+0xb0>)
 8000b96:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <ActivePdp+0xb4>)
 8000b98:	0018      	movs	r0, r3
 8000b9a:	f002 f9fd 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000b9e:	4b23      	ldr	r3, [pc, #140]	@ (8000c2c <ActivePdp+0xb8>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d0ec      	beq.n	8000b82 <ActivePdp+0xe>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000ba8:	4b20      	ldr	r3, [pc, #128]	@ (8000c2c <ActivePdp+0xb8>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	701a      	strb	r2, [r3, #0]
    // Ativar o contexto PDP
    sendATCommand("AT+CGACT=1,1\r\n");
 8000bae:	4b20      	ldr	r3, [pc, #128]	@ (8000c30 <ActivePdp+0xbc>)
 8000bb0:	0018      	movs	r0, r3
 8000bb2:	f7ff fcc3 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000bb6:	e00d      	b.n	8000bd4 <ActivePdp+0x60>
    		sendATCommand("AT+CGACT=1,1\r\n");
 8000bb8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c30 <ActivePdp+0xbc>)
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff fcbe 	bl	800053c <sendATCommand>
       		HAL_Delay(100);
 8000bc0:	2064      	movs	r0, #100	@ 0x64
 8000bc2:	f000 fc05 	bl	80013d0 <HAL_Delay>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000bc6:	2380      	movs	r3, #128	@ 0x80
 8000bc8:	005a      	lsls	r2, r3, #1
 8000bca:	4916      	ldr	r1, [pc, #88]	@ (8000c24 <ActivePdp+0xb0>)
 8000bcc:	4b16      	ldr	r3, [pc, #88]	@ (8000c28 <ActivePdp+0xb4>)
 8000bce:	0018      	movs	r0, r3
 8000bd0:	f002 f9e2 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <ActivePdp+0xb8>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d0ec      	beq.n	8000bb8 <ActivePdp+0x44>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 8000bde:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <ActivePdp+0xb8>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
    // Verificar se um endereço IP foi atribuído
    sendATCommand("AT+CGPADDR=1\r\n");
 8000be4:	4b13      	ldr	r3, [pc, #76]	@ (8000c34 <ActivePdp+0xc0>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f7ff fca8 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000bec:	e00d      	b.n	8000c0a <ActivePdp+0x96>
    		sendATCommand("AT+CGPADDR=1\r\n");
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <ActivePdp+0xc0>)
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f7ff fca3 	bl	800053c <sendATCommand>
       		HAL_Delay(100);
 8000bf6:	2064      	movs	r0, #100	@ 0x64
 8000bf8:	f000 fbea 	bl	80013d0 <HAL_Delay>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000bfc:	2380      	movs	r3, #128	@ 0x80
 8000bfe:	005a      	lsls	r2, r3, #1
 8000c00:	4908      	ldr	r1, [pc, #32]	@ (8000c24 <ActivePdp+0xb0>)
 8000c02:	4b09      	ldr	r3, [pc, #36]	@ (8000c28 <ActivePdp+0xb4>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f002 f9c7 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <ActivePdp+0xb8>)
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d0ec      	beq.n	8000bee <ActivePdp+0x7a>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 8000c14:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <ActivePdp+0xb8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]
}
 8000c1a:	46c0      	nop			@ (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	08006b5c 	.word	0x08006b5c
 8000c24:	20000140 	.word	0x20000140
 8000c28:	200000ac 	.word	0x200000ac
 8000c2c:	20000240 	.word	0x20000240
 8000c30:	08006a80 	.word	0x08006a80
 8000c34:	08006a90 	.word	0x08006a90

08000c38 <MqttConnectAndSubscribe>:
void MqttConnectAndSubscribe() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
    // Conectar ao broker MQTT
    sendATCommand("AT+QMTOPEN=0,1883\r\n");
 8000c3c:	4b29      	ldr	r3, [pc, #164]	@ (8000ce4 <MqttConnectAndSubscribe+0xac>)
 8000c3e:	0018      	movs	r0, r3
 8000c40:	f7ff fc7c 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000c44:	e00d      	b.n	8000c62 <MqttConnectAndSubscribe+0x2a>
		sendATCommand("AT+QMTOPEN=0,1883\r\n");
 8000c46:	4b27      	ldr	r3, [pc, #156]	@ (8000ce4 <MqttConnectAndSubscribe+0xac>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f7ff fc77 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 8000c4e:	2064      	movs	r0, #100	@ 0x64
 8000c50:	f000 fbbe 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000c54:	2380      	movs	r3, #128	@ 0x80
 8000c56:	005a      	lsls	r2, r3, #1
 8000c58:	4923      	ldr	r1, [pc, #140]	@ (8000ce8 <MqttConnectAndSubscribe+0xb0>)
 8000c5a:	4b24      	ldr	r3, [pc, #144]	@ (8000cec <MqttConnectAndSubscribe+0xb4>)
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	f002 f99b 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000c62:	4b23      	ldr	r3, [pc, #140]	@ (8000cf0 <MqttConnectAndSubscribe+0xb8>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b2db      	uxtb	r3, r3
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d0ec      	beq.n	8000c46 <MqttConnectAndSubscribe+0xe>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000c6c:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <MqttConnectAndSubscribe+0xb8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	701a      	strb	r2, [r3, #0]
    // Conectar ao broker MQTT com ID e credenciais
    sendATCommand("AT+QMTCONN=0,\"1\",\"pixtest\",\"pixtest\"\r\n");
 8000c72:	4b20      	ldr	r3, [pc, #128]	@ (8000cf4 <MqttConnectAndSubscribe+0xbc>)
 8000c74:	0018      	movs	r0, r3
 8000c76:	f7ff fc61 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000c7a:	e00d      	b.n	8000c98 <MqttConnectAndSubscribe+0x60>
    		sendATCommand("AT+QMTCONN=0,\"1\",\"pixtest\",\"pixtest\"\r\n");
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf4 <MqttConnectAndSubscribe+0xbc>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fc5c 	bl	800053c <sendATCommand>
    		HAL_Delay(100);
 8000c84:	2064      	movs	r0, #100	@ 0x64
 8000c86:	f000 fba3 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000c8a:	2380      	movs	r3, #128	@ 0x80
 8000c8c:	005a      	lsls	r2, r3, #1
 8000c8e:	4916      	ldr	r1, [pc, #88]	@ (8000ce8 <MqttConnectAndSubscribe+0xb0>)
 8000c90:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MqttConnectAndSubscribe+0xb4>)
 8000c92:	0018      	movs	r0, r3
 8000c94:	f002 f980 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000c98:	4b15      	ldr	r3, [pc, #84]	@ (8000cf0 <MqttConnectAndSubscribe+0xb8>)
 8000c9a:	781b      	ldrb	r3, [r3, #0]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0ec      	beq.n	8000c7c <MqttConnectAndSubscribe+0x44>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <MqttConnectAndSubscribe+0xb8>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	701a      	strb	r2, [r3, #0]
    // Inscrever-se no tópico desejado
    sendATCommand("AT+QMTSUB=0,\"pixtest\",1\r\n");
 8000ca8:	4b13      	ldr	r3, [pc, #76]	@ (8000cf8 <MqttConnectAndSubscribe+0xc0>)
 8000caa:	0018      	movs	r0, r3
 8000cac:	f7ff fc46 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000cb0:	e00d      	b.n	8000cce <MqttConnectAndSubscribe+0x96>
    		sendATCommand("AT+QMTSUB=0,\"pixtest\",1\r\n");
 8000cb2:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <MqttConnectAndSubscribe+0xc0>)
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	f7ff fc41 	bl	800053c <sendATCommand>
      		HAL_Delay(100);
 8000cba:	2064      	movs	r0, #100	@ 0x64
 8000cbc:	f000 fb88 	bl	80013d0 <HAL_Delay>
      		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000cc0:	2380      	movs	r3, #128	@ 0x80
 8000cc2:	005a      	lsls	r2, r3, #1
 8000cc4:	4908      	ldr	r1, [pc, #32]	@ (8000ce8 <MqttConnectAndSubscribe+0xb0>)
 8000cc6:	4b09      	ldr	r3, [pc, #36]	@ (8000cec <MqttConnectAndSubscribe+0xb4>)
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f002 f965 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000cce:	4b08      	ldr	r3, [pc, #32]	@ (8000cf0 <MqttConnectAndSubscribe+0xb8>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b2db      	uxtb	r3, r3
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d0ec      	beq.n	8000cb2 <MqttConnectAndSubscribe+0x7a>
      		RESPONSE_BUFFER_SIZE);
      	}
      	responseReceived = 0;
 8000cd8:	4b05      	ldr	r3, [pc, #20]	@ (8000cf0 <MqttConnectAndSubscribe+0xb8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
}
 8000cde:	46c0      	nop			@ (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	08006b6c 	.word	0x08006b6c
 8000ce8:	20000140 	.word	0x20000140
 8000cec:	200000ac 	.word	0x200000ac
 8000cf0:	20000240 	.word	0x20000240
 8000cf4:	08006b80 	.word	0x08006b80
 8000cf8:	08006ba8 	.word	0x08006ba8

08000cfc <MqttConfigBeforeConnection>:

void MqttConfigBeforeConnection() {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0

    // Verificar se o dispositivo está registrado na rede
    sendATCommand("AT+CREG?\r\n");
 8000d00:	4b37      	ldr	r3, [pc, #220]	@ (8000de0 <MqttConfigBeforeConnection+0xe4>)
 8000d02:	0018      	movs	r0, r3
 8000d04:	f7ff fc1a 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000d08:	e00d      	b.n	8000d26 <MqttConfigBeforeConnection+0x2a>
	    sendATCommand("AT+CREG?\r\n");
 8000d0a:	4b35      	ldr	r3, [pc, #212]	@ (8000de0 <MqttConfigBeforeConnection+0xe4>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fc15 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 8000d12:	2064      	movs	r0, #100	@ 0x64
 8000d14:	f000 fb5c 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000d18:	2380      	movs	r3, #128	@ 0x80
 8000d1a:	005a      	lsls	r2, r3, #1
 8000d1c:	4931      	ldr	r1, [pc, #196]	@ (8000de4 <MqttConfigBeforeConnection+0xe8>)
 8000d1e:	4b32      	ldr	r3, [pc, #200]	@ (8000de8 <MqttConfigBeforeConnection+0xec>)
 8000d20:	0018      	movs	r0, r3
 8000d22:	f002 f939 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000d26:	4b31      	ldr	r3, [pc, #196]	@ (8000dec <MqttConfigBeforeConnection+0xf0>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d0ec      	beq.n	8000d0a <MqttConfigBeforeConnection+0xe>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000d30:	4b2e      	ldr	r3, [pc, #184]	@ (8000dec <MqttConfigBeforeConnection+0xf0>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	701a      	strb	r2, [r3, #0]
    // Verificar o status do contexto PDP
    sendATCommand("AT+CGACT?\r\n");
 8000d36:	4b2e      	ldr	r3, [pc, #184]	@ (8000df0 <MqttConfigBeforeConnection+0xf4>)
 8000d38:	0018      	movs	r0, r3
 8000d3a:	f7ff fbff 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000d3e:	e00d      	b.n	8000d5c <MqttConfigBeforeConnection+0x60>
    		sendATCommand("AT+CGACT?\r\n");
 8000d40:	4b2b      	ldr	r3, [pc, #172]	@ (8000df0 <MqttConfigBeforeConnection+0xf4>)
 8000d42:	0018      	movs	r0, r3
 8000d44:	f7ff fbfa 	bl	800053c <sendATCommand>
    		HAL_Delay(100);
 8000d48:	2064      	movs	r0, #100	@ 0x64
 8000d4a:	f000 fb41 	bl	80013d0 <HAL_Delay>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000d4e:	2380      	movs	r3, #128	@ 0x80
 8000d50:	005a      	lsls	r2, r3, #1
 8000d52:	4924      	ldr	r1, [pc, #144]	@ (8000de4 <MqttConfigBeforeConnection+0xe8>)
 8000d54:	4b24      	ldr	r3, [pc, #144]	@ (8000de8 <MqttConfigBeforeConnection+0xec>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f002 f91e 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000d5c:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <MqttConfigBeforeConnection+0xf0>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d0ec      	beq.n	8000d40 <MqttConfigBeforeConnection+0x44>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000d66:	4b21      	ldr	r3, [pc, #132]	@ (8000dec <MqttConfigBeforeConnection+0xf0>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	701a      	strb	r2, [r3, #0]
    // Verificar a qualidade do sinal
    sendATCommand("AT+CSQ\r\n");
 8000d6c:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MqttConfigBeforeConnection+0xf8>)
 8000d6e:	0018      	movs	r0, r3
 8000d70:	f7ff fbe4 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000d74:	e00d      	b.n	8000d92 <MqttConfigBeforeConnection+0x96>
    		sendATCommand("AT+CSQ\r\n");
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <MqttConfigBeforeConnection+0xf8>)
 8000d78:	0018      	movs	r0, r3
 8000d7a:	f7ff fbdf 	bl	800053c <sendATCommand>
       		HAL_Delay(100);
 8000d7e:	2064      	movs	r0, #100	@ 0x64
 8000d80:	f000 fb26 	bl	80013d0 <HAL_Delay>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000d84:	2380      	movs	r3, #128	@ 0x80
 8000d86:	005a      	lsls	r2, r3, #1
 8000d88:	4916      	ldr	r1, [pc, #88]	@ (8000de4 <MqttConfigBeforeConnection+0xe8>)
 8000d8a:	4b17      	ldr	r3, [pc, #92]	@ (8000de8 <MqttConfigBeforeConnection+0xec>)
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	f002 f903 	bl	8002f98 <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000d92:	4b16      	ldr	r3, [pc, #88]	@ (8000dec <MqttConfigBeforeConnection+0xf0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d0ec      	beq.n	8000d76 <MqttConfigBeforeConnection+0x7a>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 8000d9c:	4b13      	ldr	r3, [pc, #76]	@ (8000dec <MqttConfigBeforeConnection+0xf0>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	701a      	strb	r2, [r3, #0]
    // Configurar o cntexto PDP para o canal MQTT
    sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000da2:	4b15      	ldr	r3, [pc, #84]	@ (8000df8 <MqttConfigBeforeConnection+0xfc>)
 8000da4:	0018      	movs	r0, r3
 8000da6:	f7ff fbc9 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000daa:	e00d      	b.n	8000dc8 <MqttConfigBeforeConnection+0xcc>
		sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MqttConfigBeforeConnection+0xfc>)
 8000dae:	0018      	movs	r0, r3
 8000db0:	f7ff fbc4 	bl	800053c <sendATCommand>
		HAL_Delay(100);
 8000db4:	2064      	movs	r0, #100	@ 0x64
 8000db6:	f000 fb0b 	bl	80013d0 <HAL_Delay>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000dba:	2380      	movs	r3, #128	@ 0x80
 8000dbc:	005a      	lsls	r2, r3, #1
 8000dbe:	4909      	ldr	r1, [pc, #36]	@ (8000de4 <MqttConfigBeforeConnection+0xe8>)
 8000dc0:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <MqttConfigBeforeConnection+0xec>)
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	f002 f8e8 	bl	8002f98 <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000dc8:	4b08      	ldr	r3, [pc, #32]	@ (8000dec <MqttConfigBeforeConnection+0xf0>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d0ec      	beq.n	8000dac <MqttConfigBeforeConnection+0xb0>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	@ (8000dec <MqttConfigBeforeConnection+0xf0>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	701a      	strb	r2, [r3, #0]
}
 8000dd8:	46c0      	nop			@ (mov r8, r8)
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	46c0      	nop			@ (mov r8, r8)
 8000de0:	08006bc4 	.word	0x08006bc4
 8000de4:	20000140 	.word	0x20000140
 8000de8:	200000ac 	.word	0x200000ac
 8000dec:	20000240 	.word	0x20000240
 8000df0:	08006bd0 	.word	0x08006bd0
 8000df4:	08006bdc 	.word	0x08006bdc
 8000df8:	08006b08 	.word	0x08006b08

08000dfc <EnterSleepMode>:


void EnterSleepMode() {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
	SetNextAlarm();
 8000e00:	f000 f808 	bl	8000e14 <SetNextAlarm>
	 HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f000 fe2b 	bl	8001a60 <HAL_PWR_EnableWakeUpPin>
	HAL_PWREx_EnterSHUTDOWNMode();
 8000e0a:	f000 fe5d 	bl	8001ac8 <HAL_PWREx_EnterSHUTDOWNMode>

}
 8000e0e:	46c0      	nop			@ (mov r8, r8)
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <SetNextAlarm>:

void SetNextAlarm() {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b094      	sub	sp, #80	@ 0x50
 8000e18:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	RTC_AlarmTypeDef sAlarm;

// Obter o tempo e data atuais
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000e1a:	232c      	movs	r3, #44	@ 0x2c
 8000e1c:	18f9      	adds	r1, r7, r3
 8000e1e:	4b34      	ldr	r3, [pc, #208]	@ (8000ef0 <SetNextAlarm+0xdc>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f001 fc00 	bl	8002628 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000e28:	2328      	movs	r3, #40	@ 0x28
 8000e2a:	18f9      	adds	r1, r7, r3
 8000e2c:	4b30      	ldr	r3, [pc, #192]	@ (8000ef0 <SetNextAlarm+0xdc>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	0018      	movs	r0, r3
 8000e32:	f001 fce7 	bl	8002804 <HAL_RTC_GetDate>

// Configurar o tempo para o próximo alarme
	uint32_t totalSeconds = ALARM_PERIOD_IN_SECONDS; // Definir o período em segundos
 8000e36:	2378      	movs	r3, #120	@ 0x78
 8000e38:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t hours = totalSeconds / 3600;
 8000e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e3c:	22e1      	movs	r2, #225	@ 0xe1
 8000e3e:	0111      	lsls	r1, r2, #4
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff f973 	bl	800012c <__udivsi3>
 8000e46:	0003      	movs	r3, r0
 8000e48:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t minutes = (totalSeconds % 3600) / 60;
 8000e4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e4c:	22e1      	movs	r2, #225	@ 0xe1
 8000e4e:	0111      	lsls	r1, r2, #4
 8000e50:	0018      	movs	r0, r3
 8000e52:	f7ff f9f1 	bl	8000238 <__aeabi_uidivmod>
 8000e56:	000b      	movs	r3, r1
 8000e58:	213c      	movs	r1, #60	@ 0x3c
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff f966 	bl	800012c <__udivsi3>
 8000e60:	0003      	movs	r3, r0
 8000e62:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t seconds = totalSeconds % 60;
 8000e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e66:	213c      	movs	r1, #60	@ 0x3c
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f7ff f9e5 	bl	8000238 <__aeabi_uidivmod>
 8000e6e:	000b      	movs	r3, r1
 8000e70:	643b      	str	r3, [r7, #64]	@ 0x40

// Configurar os valores no alarme
	sAlarm.Alarm = RTC_ALARM_A;
 8000e72:	003b      	movs	r3, r7
 8000e74:	2280      	movs	r2, #128	@ 0x80
 8000e76:	0052      	lsls	r2, r2, #1
 8000e78:	625a      	str	r2, [r3, #36]	@ 0x24
	sAlarm.AlarmTime.Hours = hours;
 8000e7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	003b      	movs	r3, r7
 8000e80:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8000e82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	003b      	movs	r3, r7
 8000e88:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = seconds;
 8000e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e8c:	b2da      	uxtb	r2, r3
 8000e8e:	003b      	movs	r3, r7
 8000e90:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000e92:	003b      	movs	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000e98:	003b      	movs	r3, r7
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	611a      	str	r2, [r3, #16]

	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY; // Ignorar a data, repetir alarme diariamente
 8000e9e:	003b      	movs	r3, r7
 8000ea0:	2280      	movs	r2, #128	@ 0x80
 8000ea2:	0612      	lsls	r2, r2, #24
 8000ea4:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000ea6:	003b      	movs	r3, r7
 8000ea8:	22f0      	movs	r2, #240	@ 0xf0
 8000eaa:	0512      	lsls	r2, r2, #20
 8000eac:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000eae:	003b      	movs	r3, r7
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 1;  // Não utilizado devido à máscara
 8000eb4:	003b      	movs	r3, r7
 8000eb6:	2220      	movs	r2, #32
 8000eb8:	2101      	movs	r1, #1
 8000eba:	5499      	strb	r1, [r3, r2]

// Desativar alarme anterior antes de configurar o novo
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	005a      	lsls	r2, r3, #1
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef0 <SetNextAlarm+0xdc>)
 8000ec2:	0011      	movs	r1, r2
 8000ec4:	0018      	movs	r0, r3
 8000ec6:	f001 fdd7 	bl	8002a78 <HAL_RTC_DeactivateAlarm>

// Configurar novo alarme com interrupção
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8000eca:	0039      	movs	r1, r7
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <SetNextAlarm+0xdc>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f001 fce5 	bl	80028a0 <HAL_RTC_SetAlarm_IT>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d005      	beq.n	8000ee6 <SetNextAlarm+0xd2>
		printf("Erro ao configurar o alarme RTC\n");
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <SetNextAlarm+0xe0>)
 8000edc:	0018      	movs	r0, r3
 8000ede:	f003 ff71 	bl	8004dc4 <puts>
		while (1)
 8000ee2:	46c0      	nop			@ (mov r8, r8)
 8000ee4:	e7fd      	b.n	8000ee2 <SetNextAlarm+0xce>
			; // Travar em caso de erro crítico
	}


}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b014      	add	sp, #80	@ 0x50
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	20000084 	.word	0x20000084
 8000ef4:	08006be8 	.word	0x08006be8

08000ef8 <InitFlags>:

void InitFlags() {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8000efc:	4b0a      	ldr	r3, [pc, #40]	@ (8000f28 <InitFlags+0x30>)
 8000efe:	691a      	ldr	r2, [r3, #16]
 8000f00:	2380      	movs	r3, #128	@ 0x80
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	401a      	ands	r2, r3
 8000f06:	2380      	movs	r3, #128	@ 0x80
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d106      	bne.n	8000f1c <InitFlags+0x24>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8000f0e:	4b06      	ldr	r3, [pc, #24]	@ (8000f28 <InitFlags+0x30>)
 8000f10:	4a06      	ldr	r2, [pc, #24]	@ (8000f2c <InitFlags+0x34>)
 8000f12:	619a      	str	r2, [r3, #24]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 fdc3 	bl	8001aa0 <HAL_PWR_DisableWakeUpPin>
	} else {
		MX_RTC_Init();
	}

}
 8000f1a:	e001      	b.n	8000f20 <InitFlags+0x28>
		MX_RTC_Init();
 8000f1c:	f7ff fa14 	bl	8000348 <MX_RTC_Init>
}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	46c0      	nop			@ (mov r8, r8)
 8000f28:	40007000 	.word	0x40007000
 8000f2c:	00010100 	.word	0x00010100

08000f30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f34:	b672      	cpsid	i
}
 8000f36:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	e7fd      	b.n	8000f38 <Error_Handler+0x8>

08000f3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f42:	4b13      	ldr	r3, [pc, #76]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f44:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f46:	4b12      	ldr	r3, [pc, #72]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	430a      	orrs	r2, r1
 8000f4c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f4e:	4b10      	ldr	r3, [pc, #64]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f52:	2201      	movs	r2, #1
 8000f54:	4013      	ands	r3, r2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f60:	2180      	movs	r1, #128	@ 0x80
 8000f62:	0549      	lsls	r1, r1, #21
 8000f64:	430a      	orrs	r2, r1
 8000f66:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f68:	4b09      	ldr	r3, [pc, #36]	@ (8000f90 <HAL_MspInit+0x54>)
 8000f6a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f6c:	2380      	movs	r3, #128	@ 0x80
 8000f6e:	055b      	lsls	r3, r3, #21
 8000f70:	4013      	ands	r3, r2
 8000f72:	603b      	str	r3, [r7, #0]
 8000f74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2100      	movs	r1, #0
 8000f7a:	2004      	movs	r0, #4
 8000f7c:	f000 faf8 	bl	8001570 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f80:	2004      	movs	r0, #4
 8000f82:	f000 fb0a 	bl	800159a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f86:	46c0      	nop			@ (mov r8, r8)
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	b002      	add	sp, #8
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	46c0      	nop			@ (mov r8, r8)
 8000f90:	40021000 	.word	0x40021000

08000f94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f94:	b590      	push	{r4, r7, lr}
 8000f96:	b08b      	sub	sp, #44	@ 0x2c
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f9c:	240c      	movs	r4, #12
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	231c      	movs	r3, #28
 8000fa4:	001a      	movs	r2, r3
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	f004 f860 	bl	800506c <memset>
  if(hrtc->Instance==RTC)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a19      	ldr	r2, [pc, #100]	@ (8001018 <HAL_RTC_MspInit+0x84>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d12b      	bne.n	800100e <HAL_RTC_MspInit+0x7a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	2240      	movs	r2, #64	@ 0x40
 8000fba:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000fbc:	193b      	adds	r3, r7, r4
 8000fbe:	2280      	movs	r2, #128	@ 0x80
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc4:	193b      	adds	r3, r7, r4
 8000fc6:	0018      	movs	r0, r3
 8000fc8:	f001 f90c 	bl	80021e4 <HAL_RCCEx_PeriphCLKConfig>
 8000fcc:	1e03      	subs	r3, r0, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000fd0:	f7ff ffae 	bl	8000f30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_RTC_MspInit+0x88>)
 8000fd6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000fd8:	4b10      	ldr	r3, [pc, #64]	@ (800101c <HAL_RTC_MspInit+0x88>)
 8000fda:	2180      	movs	r1, #128	@ 0x80
 8000fdc:	0209      	lsls	r1, r1, #8
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <HAL_RTC_MspInit+0x88>)
 8000fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800101c <HAL_RTC_MspInit+0x88>)
 8000fe8:	2180      	movs	r1, #128	@ 0x80
 8000fea:	00c9      	lsls	r1, r1, #3
 8000fec:	430a      	orrs	r2, r1
 8000fee:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800101c <HAL_RTC_MspInit+0x88>)
 8000ff2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ff4:	2380      	movs	r3, #128	@ 0x80
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000ffe:	2200      	movs	r2, #0
 8001000:	2100      	movs	r1, #0
 8001002:	2002      	movs	r0, #2
 8001004:	f000 fab4 	bl	8001570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8001008:	2002      	movs	r0, #2
 800100a:	f000 fac6 	bl	800159a <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	46bd      	mov	sp, r7
 8001012:	b00b      	add	sp, #44	@ 0x2c
 8001014:	bd90      	pop	{r4, r7, pc}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	40002800 	.word	0x40002800
 800101c:	40021000 	.word	0x40021000

08001020 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001020:	b590      	push	{r4, r7, lr}
 8001022:	b08b      	sub	sp, #44	@ 0x2c
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	2414      	movs	r4, #20
 800102a:	193b      	adds	r3, r7, r4
 800102c:	0018      	movs	r0, r3
 800102e:	2314      	movs	r3, #20
 8001030:	001a      	movs	r2, r3
 8001032:	2100      	movs	r1, #0
 8001034:	f004 f81a 	bl	800506c <memset>
  if(huart->Instance==USART2)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1f      	ldr	r2, [pc, #124]	@ (80010bc <HAL_UART_MspInit+0x9c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d138      	bne.n	80010b4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001042:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <HAL_UART_MspInit+0xa0>)
 8001044:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001046:	4b1e      	ldr	r3, [pc, #120]	@ (80010c0 <HAL_UART_MspInit+0xa0>)
 8001048:	2180      	movs	r1, #128	@ 0x80
 800104a:	0289      	lsls	r1, r1, #10
 800104c:	430a      	orrs	r2, r1
 800104e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001050:	4b1b      	ldr	r3, [pc, #108]	@ (80010c0 <HAL_UART_MspInit+0xa0>)
 8001052:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001054:	2380      	movs	r3, #128	@ 0x80
 8001056:	029b      	lsls	r3, r3, #10
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]
 800105c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105e:	4b18      	ldr	r3, [pc, #96]	@ (80010c0 <HAL_UART_MspInit+0xa0>)
 8001060:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001062:	4b17      	ldr	r3, [pc, #92]	@ (80010c0 <HAL_UART_MspInit+0xa0>)
 8001064:	2101      	movs	r1, #1
 8001066:	430a      	orrs	r2, r1
 8001068:	635a      	str	r2, [r3, #52]	@ 0x34
 800106a:	4b15      	ldr	r3, [pc, #84]	@ (80010c0 <HAL_UART_MspInit+0xa0>)
 800106c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106e:	2201      	movs	r2, #1
 8001070:	4013      	ands	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001076:	0021      	movs	r1, r4
 8001078:	187b      	adds	r3, r7, r1
 800107a:	220c      	movs	r2, #12
 800107c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	187b      	adds	r3, r7, r1
 8001080:	2202      	movs	r2, #2
 8001082:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	187b      	adds	r3, r7, r1
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800108a:	187b      	adds	r3, r7, r1
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001090:	187b      	adds	r3, r7, r1
 8001092:	2201      	movs	r2, #1
 8001094:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	187a      	adds	r2, r7, r1
 8001098:	23a0      	movs	r3, #160	@ 0xa0
 800109a:	05db      	lsls	r3, r3, #23
 800109c:	0011      	movs	r1, r2
 800109e:	0018      	movs	r0, r3
 80010a0:	f000 fb74 	bl	800178c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80010a4:	2200      	movs	r2, #0
 80010a6:	2100      	movs	r1, #0
 80010a8:	201c      	movs	r0, #28
 80010aa:	f000 fa61 	bl	8001570 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ae:	201c      	movs	r0, #28
 80010b0:	f000 fa73 	bl	800159a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	b00b      	add	sp, #44	@ 0x2c
 80010ba:	bd90      	pop	{r4, r7, pc}
 80010bc:	40004400 	.word	0x40004400
 80010c0:	40021000 	.word	0x40021000

080010c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010c8:	46c0      	nop			@ (mov r8, r8)
 80010ca:	e7fd      	b.n	80010c8 <NMI_Handler+0x4>

080010cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d0:	46c0      	nop			@ (mov r8, r8)
 80010d2:	e7fd      	b.n	80010d0 <HardFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80010d8:	46c0      	nop			@ (mov r8, r8)
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010e2:	46c0      	nop			@ (mov r8, r8)
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ec:	f000 f954 	bl	8001398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010f0:	46c0      	nop			@ (mov r8, r8)
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupts through EXTI lines 19 and 21.
  */
void RTC_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80010fc:	4b03      	ldr	r3, [pc, #12]	@ (800110c <RTC_IRQHandler+0x14>)
 80010fe:	0018      	movs	r0, r3
 8001100:	f001 fd22 	bl	8002b48 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001104:	46c0      	nop			@ (mov r8, r8)
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	46c0      	nop			@ (mov r8, r8)
 800110c:	20000084 	.word	0x20000084

08001110 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001114:	46c0      	nop			@ (mov r8, r8)
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
	...

0800111c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001120:	4b03      	ldr	r3, [pc, #12]	@ (8001130 <USART2_IRQHandler+0x14>)
 8001122:	0018      	movs	r0, r3
 8001124:	f001 ff90 	bl	8003048 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001128:	46c0      	nop			@ (mov r8, r8)
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			@ (mov r8, r8)
 8001130:	200000ac 	.word	0x200000ac

08001134 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
 8001144:	e00a      	b.n	800115c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001146:	e000      	b.n	800114a <_read+0x16>
 8001148:	bf00      	nop
 800114a:	0001      	movs	r1, r0
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	60ba      	str	r2, [r7, #8]
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	3301      	adds	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
 800115c:	697a      	ldr	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	429a      	cmp	r2, r3
 8001162:	dbf0      	blt.n	8001146 <_read+0x12>
  }

  return len;
 8001164:	687b      	ldr	r3, [r7, #4]
}
 8001166:	0018      	movs	r0, r3
 8001168:	46bd      	mov	sp, r7
 800116a:	b006      	add	sp, #24
 800116c:	bd80      	pop	{r7, pc}

0800116e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	60f8      	str	r0, [r7, #12]
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]
 800117e:	e009      	b.n	8001194 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	1c5a      	adds	r2, r3, #1
 8001184:	60ba      	str	r2, [r7, #8]
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	0018      	movs	r0, r3
 800118a:	e000      	b.n	800118e <_write+0x20>
 800118c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	3301      	adds	r3, #1
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	dbf1      	blt.n	8001180 <_write+0x12>
  }
  return len;
 800119c:	687b      	ldr	r3, [r7, #4]
}
 800119e:	0018      	movs	r0, r3
 80011a0:	46bd      	mov	sp, r7
 80011a2:	b006      	add	sp, #24
 80011a4:	bd80      	pop	{r7, pc}

080011a6 <_close>:

int _close(int file)
{
 80011a6:	b580      	push	{r7, lr}
 80011a8:	b082      	sub	sp, #8
 80011aa:	af00      	add	r7, sp, #0
 80011ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011ae:	2301      	movs	r3, #1
 80011b0:	425b      	negs	r3, r3
}
 80011b2:	0018      	movs	r0, r3
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b002      	add	sp, #8
 80011b8:	bd80      	pop	{r7, pc}

080011ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	2280      	movs	r2, #128	@ 0x80
 80011c8:	0192      	lsls	r2, r2, #6
 80011ca:	605a      	str	r2, [r3, #4]
  return 0;
 80011cc:	2300      	movs	r3, #0
}
 80011ce:	0018      	movs	r0, r3
 80011d0:	46bd      	mov	sp, r7
 80011d2:	b002      	add	sp, #8
 80011d4:	bd80      	pop	{r7, pc}

080011d6 <_isatty>:

int _isatty(int file)
{
 80011d6:	b580      	push	{r7, lr}
 80011d8:	b082      	sub	sp, #8
 80011da:	af00      	add	r7, sp, #0
 80011dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011de:	2301      	movs	r3, #1
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b002      	add	sp, #8
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	60b9      	str	r1, [r7, #8]
 80011f2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	0018      	movs	r0, r3
 80011f8:	46bd      	mov	sp, r7
 80011fa:	b004      	add	sp, #16
 80011fc:	bd80      	pop	{r7, pc}
	...

08001200 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b086      	sub	sp, #24
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001208:	4a14      	ldr	r2, [pc, #80]	@ (800125c <_sbrk+0x5c>)
 800120a:	4b15      	ldr	r3, [pc, #84]	@ (8001260 <_sbrk+0x60>)
 800120c:	1ad3      	subs	r3, r2, r3
 800120e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001214:	4b13      	ldr	r3, [pc, #76]	@ (8001264 <_sbrk+0x64>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d102      	bne.n	8001222 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800121c:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <_sbrk+0x64>)
 800121e:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <_sbrk+0x68>)
 8001220:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001222:	4b10      	ldr	r3, [pc, #64]	@ (8001264 <_sbrk+0x64>)
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	18d3      	adds	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	429a      	cmp	r2, r3
 800122e:	d207      	bcs.n	8001240 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001230:	f003 ff88 	bl	8005144 <__errno>
 8001234:	0003      	movs	r3, r0
 8001236:	220c      	movs	r2, #12
 8001238:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800123a:	2301      	movs	r3, #1
 800123c:	425b      	negs	r3, r3
 800123e:	e009      	b.n	8001254 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001240:	4b08      	ldr	r3, [pc, #32]	@ (8001264 <_sbrk+0x64>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001246:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	18d2      	adds	r2, r2, r3
 800124e:	4b05      	ldr	r3, [pc, #20]	@ (8001264 <_sbrk+0x64>)
 8001250:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001252:	68fb      	ldr	r3, [r7, #12]
}
 8001254:	0018      	movs	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	b006      	add	sp, #24
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20001800 	.word	0x20001800
 8001260:	00000400 	.word	0x00000400
 8001264:	20000244 	.word	0x20000244
 8001268:	20000398 	.word	0x20000398

0800126c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001270:	4b03      	ldr	r3, [pc, #12]	@ (8001280 <SystemInit+0x14>)
 8001272:	2280      	movs	r2, #128	@ 0x80
 8001274:	0512      	lsls	r2, r2, #20
 8001276:	609a      	str	r2, [r3, #8]
#endif
}
 8001278:	46c0      	nop			@ (mov r8, r8)
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001284:	480d      	ldr	r0, [pc, #52]	@ (80012bc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001286:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001288:	f7ff fff0 	bl	800126c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800128c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800128e:	e003      	b.n	8001298 <LoopCopyDataInit>

08001290 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001290:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001292:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001294:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001296:	3104      	adds	r1, #4

08001298 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001298:	480a      	ldr	r0, [pc, #40]	@ (80012c4 <LoopForever+0xa>)
  ldr r3, =_edata
 800129a:	4b0b      	ldr	r3, [pc, #44]	@ (80012c8 <LoopForever+0xe>)
  adds r2, r0, r1
 800129c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800129e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80012a0:	d3f6      	bcc.n	8001290 <CopyDataInit>
  ldr r2, =_sbss
 80012a2:	4a0a      	ldr	r2, [pc, #40]	@ (80012cc <LoopForever+0x12>)
  b LoopFillZerobss
 80012a4:	e002      	b.n	80012ac <LoopFillZerobss>

080012a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  str  r3, [r2]
 80012a8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012aa:	3204      	adds	r2, #4

080012ac <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <LoopForever+0x16>)
  cmp r2, r3
 80012ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80012b0:	d3f9      	bcc.n	80012a6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80012b2:	f003 ff4d 	bl	8005150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012b6:	f7fe ffc5 	bl	8000244 <main>

080012ba <LoopForever>:

LoopForever:
    b LoopForever
 80012ba:	e7fe      	b.n	80012ba <LoopForever>
  ldr   r0, =_estack
 80012bc:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80012c0:	08006de4 	.word	0x08006de4
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80012c8:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 80012cc:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 80012d0:	20000398 	.word	0x20000398

080012d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012d4:	e7fe      	b.n	80012d4 <ADC1_IRQHandler>

080012d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012dc:	1dfb      	adds	r3, r7, #7
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e2:	2003      	movs	r0, #3
 80012e4:	f000 f80e 	bl	8001304 <HAL_InitTick>
 80012e8:	1e03      	subs	r3, r0, #0
 80012ea:	d003      	beq.n	80012f4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80012ec:	1dfb      	adds	r3, r7, #7
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e001      	b.n	80012f8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012f4:	f7ff fe22 	bl	8000f3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	781b      	ldrb	r3, [r3, #0]
}
 80012fc:	0018      	movs	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	b002      	add	sp, #8
 8001302:	bd80      	pop	{r7, pc}

08001304 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001304:	b590      	push	{r4, r7, lr}
 8001306:	b085      	sub	sp, #20
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800130c:	230f      	movs	r3, #15
 800130e:	18fb      	adds	r3, r7, r3
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001314:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <HAL_InitTick+0x88>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d02b      	beq.n	8001374 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800131c:	4b1c      	ldr	r3, [pc, #112]	@ (8001390 <HAL_InitTick+0x8c>)
 800131e:	681c      	ldr	r4, [r3, #0]
 8001320:	4b1a      	ldr	r3, [pc, #104]	@ (800138c <HAL_InitTick+0x88>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	0019      	movs	r1, r3
 8001326:	23fa      	movs	r3, #250	@ 0xfa
 8001328:	0098      	lsls	r0, r3, #2
 800132a:	f7fe feff 	bl	800012c <__udivsi3>
 800132e:	0003      	movs	r3, r0
 8001330:	0019      	movs	r1, r3
 8001332:	0020      	movs	r0, r4
 8001334:	f7fe fefa 	bl	800012c <__udivsi3>
 8001338:	0003      	movs	r3, r0
 800133a:	0018      	movs	r0, r3
 800133c:	f000 f93d 	bl	80015ba <HAL_SYSTICK_Config>
 8001340:	1e03      	subs	r3, r0, #0
 8001342:	d112      	bne.n	800136a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2b03      	cmp	r3, #3
 8001348:	d80a      	bhi.n	8001360 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	2301      	movs	r3, #1
 800134e:	425b      	negs	r3, r3
 8001350:	2200      	movs	r2, #0
 8001352:	0018      	movs	r0, r3
 8001354:	f000 f90c 	bl	8001570 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001358:	4b0e      	ldr	r3, [pc, #56]	@ (8001394 <HAL_InitTick+0x90>)
 800135a:	687a      	ldr	r2, [r7, #4]
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	e00d      	b.n	800137c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001360:	230f      	movs	r3, #15
 8001362:	18fb      	adds	r3, r7, r3
 8001364:	2201      	movs	r2, #1
 8001366:	701a      	strb	r2, [r3, #0]
 8001368:	e008      	b.n	800137c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800136a:	230f      	movs	r3, #15
 800136c:	18fb      	adds	r3, r7, r3
 800136e:	2201      	movs	r2, #1
 8001370:	701a      	strb	r2, [r3, #0]
 8001372:	e003      	b.n	800137c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001374:	230f      	movs	r3, #15
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	2201      	movs	r2, #1
 800137a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 800137c:	230f      	movs	r3, #15
 800137e:	18fb      	adds	r3, r7, r3
 8001380:	781b      	ldrb	r3, [r3, #0]
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b005      	add	sp, #20
 8001388:	bd90      	pop	{r4, r7, pc}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	20000008 	.word	0x20000008
 8001390:	20000000 	.word	0x20000000
 8001394:	20000004 	.word	0x20000004

08001398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800139c:	4b05      	ldr	r3, [pc, #20]	@ (80013b4 <HAL_IncTick+0x1c>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	001a      	movs	r2, r3
 80013a2:	4b05      	ldr	r3, [pc, #20]	@ (80013b8 <HAL_IncTick+0x20>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	18d2      	adds	r2, r2, r3
 80013a8:	4b03      	ldr	r3, [pc, #12]	@ (80013b8 <HAL_IncTick+0x20>)
 80013aa:	601a      	str	r2, [r3, #0]
}
 80013ac:	46c0      	nop			@ (mov r8, r8)
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	46c0      	nop			@ (mov r8, r8)
 80013b4:	20000008 	.word	0x20000008
 80013b8:	20000248 	.word	0x20000248

080013bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  return uwTick;
 80013c0:	4b02      	ldr	r3, [pc, #8]	@ (80013cc <HAL_GetTick+0x10>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	0018      	movs	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			@ (mov r8, r8)
 80013cc:	20000248 	.word	0x20000248

080013d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013d8:	f7ff fff0 	bl	80013bc <HAL_GetTick>
 80013dc:	0003      	movs	r3, r0
 80013de:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	3301      	adds	r3, #1
 80013e8:	d005      	beq.n	80013f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001414 <HAL_Delay+0x44>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	001a      	movs	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	189b      	adds	r3, r3, r2
 80013f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013f6:	46c0      	nop			@ (mov r8, r8)
 80013f8:	f7ff ffe0 	bl	80013bc <HAL_GetTick>
 80013fc:	0002      	movs	r2, r0
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f7      	bhi.n	80013f8 <HAL_Delay+0x28>
  {
  }
}
 8001408:	46c0      	nop			@ (mov r8, r8)
 800140a:	46c0      	nop			@ (mov r8, r8)
 800140c:	46bd      	mov	sp, r7
 800140e:	b004      	add	sp, #16
 8001410:	bd80      	pop	{r7, pc}
 8001412:	46c0      	nop			@ (mov r8, r8)
 8001414:	20000008 	.word	0x20000008

08001418 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	0002      	movs	r2, r0
 8001420:	1dfb      	adds	r3, r7, #7
 8001422:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001424:	1dfb      	adds	r3, r7, #7
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b7f      	cmp	r3, #127	@ 0x7f
 800142a:	d809      	bhi.n	8001440 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142c:	1dfb      	adds	r3, r7, #7
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	001a      	movs	r2, r3
 8001432:	231f      	movs	r3, #31
 8001434:	401a      	ands	r2, r3
 8001436:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <__NVIC_EnableIRQ+0x30>)
 8001438:	2101      	movs	r1, #1
 800143a:	4091      	lsls	r1, r2
 800143c:	000a      	movs	r2, r1
 800143e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001440:	46c0      	nop			@ (mov r8, r8)
 8001442:	46bd      	mov	sp, r7
 8001444:	b002      	add	sp, #8
 8001446:	bd80      	pop	{r7, pc}
 8001448:	e000e100 	.word	0xe000e100

0800144c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	0002      	movs	r2, r0
 8001454:	6039      	str	r1, [r7, #0]
 8001456:	1dfb      	adds	r3, r7, #7
 8001458:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800145a:	1dfb      	adds	r3, r7, #7
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001460:	d828      	bhi.n	80014b4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001462:	4a2f      	ldr	r2, [pc, #188]	@ (8001520 <__NVIC_SetPriority+0xd4>)
 8001464:	1dfb      	adds	r3, r7, #7
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	b25b      	sxtb	r3, r3
 800146a:	089b      	lsrs	r3, r3, #2
 800146c:	33c0      	adds	r3, #192	@ 0xc0
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	589b      	ldr	r3, [r3, r2]
 8001472:	1dfa      	adds	r2, r7, #7
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	0011      	movs	r1, r2
 8001478:	2203      	movs	r2, #3
 800147a:	400a      	ands	r2, r1
 800147c:	00d2      	lsls	r2, r2, #3
 800147e:	21ff      	movs	r1, #255	@ 0xff
 8001480:	4091      	lsls	r1, r2
 8001482:	000a      	movs	r2, r1
 8001484:	43d2      	mvns	r2, r2
 8001486:	401a      	ands	r2, r3
 8001488:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	019b      	lsls	r3, r3, #6
 800148e:	22ff      	movs	r2, #255	@ 0xff
 8001490:	401a      	ands	r2, r3
 8001492:	1dfb      	adds	r3, r7, #7
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	0018      	movs	r0, r3
 8001498:	2303      	movs	r3, #3
 800149a:	4003      	ands	r3, r0
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014a0:	481f      	ldr	r0, [pc, #124]	@ (8001520 <__NVIC_SetPriority+0xd4>)
 80014a2:	1dfb      	adds	r3, r7, #7
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	b25b      	sxtb	r3, r3
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	430a      	orrs	r2, r1
 80014ac:	33c0      	adds	r3, #192	@ 0xc0
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014b2:	e031      	b.n	8001518 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001524 <__NVIC_SetPriority+0xd8>)
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	0019      	movs	r1, r3
 80014bc:	230f      	movs	r3, #15
 80014be:	400b      	ands	r3, r1
 80014c0:	3b08      	subs	r3, #8
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3306      	adds	r3, #6
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	18d3      	adds	r3, r2, r3
 80014ca:	3304      	adds	r3, #4
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	1dfa      	adds	r2, r7, #7
 80014d0:	7812      	ldrb	r2, [r2, #0]
 80014d2:	0011      	movs	r1, r2
 80014d4:	2203      	movs	r2, #3
 80014d6:	400a      	ands	r2, r1
 80014d8:	00d2      	lsls	r2, r2, #3
 80014da:	21ff      	movs	r1, #255	@ 0xff
 80014dc:	4091      	lsls	r1, r2
 80014de:	000a      	movs	r2, r1
 80014e0:	43d2      	mvns	r2, r2
 80014e2:	401a      	ands	r2, r3
 80014e4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	22ff      	movs	r2, #255	@ 0xff
 80014ec:	401a      	ands	r2, r3
 80014ee:	1dfb      	adds	r3, r7, #7
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	0018      	movs	r0, r3
 80014f4:	2303      	movs	r3, #3
 80014f6:	4003      	ands	r3, r0
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fc:	4809      	ldr	r0, [pc, #36]	@ (8001524 <__NVIC_SetPriority+0xd8>)
 80014fe:	1dfb      	adds	r3, r7, #7
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	001c      	movs	r4, r3
 8001504:	230f      	movs	r3, #15
 8001506:	4023      	ands	r3, r4
 8001508:	3b08      	subs	r3, #8
 800150a:	089b      	lsrs	r3, r3, #2
 800150c:	430a      	orrs	r2, r1
 800150e:	3306      	adds	r3, #6
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	18c3      	adds	r3, r0, r3
 8001514:	3304      	adds	r3, #4
 8001516:	601a      	str	r2, [r3, #0]
}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	b003      	add	sp, #12
 800151e:	bd90      	pop	{r4, r7, pc}
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	1e5a      	subs	r2, r3, #1
 8001534:	2380      	movs	r3, #128	@ 0x80
 8001536:	045b      	lsls	r3, r3, #17
 8001538:	429a      	cmp	r2, r3
 800153a:	d301      	bcc.n	8001540 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153c:	2301      	movs	r3, #1
 800153e:	e010      	b.n	8001562 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001540:	4b0a      	ldr	r3, [pc, #40]	@ (800156c <SysTick_Config+0x44>)
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	3a01      	subs	r2, #1
 8001546:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001548:	2301      	movs	r3, #1
 800154a:	425b      	negs	r3, r3
 800154c:	2103      	movs	r1, #3
 800154e:	0018      	movs	r0, r3
 8001550:	f7ff ff7c 	bl	800144c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <SysTick_Config+0x44>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800155a:	4b04      	ldr	r3, [pc, #16]	@ (800156c <SysTick_Config+0x44>)
 800155c:	2207      	movs	r2, #7
 800155e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001560:	2300      	movs	r3, #0
}
 8001562:	0018      	movs	r0, r3
 8001564:	46bd      	mov	sp, r7
 8001566:	b002      	add	sp, #8
 8001568:	bd80      	pop	{r7, pc}
 800156a:	46c0      	nop			@ (mov r8, r8)
 800156c:	e000e010 	.word	0xe000e010

08001570 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	210f      	movs	r1, #15
 800157c:	187b      	adds	r3, r7, r1
 800157e:	1c02      	adds	r2, r0, #0
 8001580:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001582:	68ba      	ldr	r2, [r7, #8]
 8001584:	187b      	adds	r3, r7, r1
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b25b      	sxtb	r3, r3
 800158a:	0011      	movs	r1, r2
 800158c:	0018      	movs	r0, r3
 800158e:	f7ff ff5d 	bl	800144c <__NVIC_SetPriority>
}
 8001592:	46c0      	nop			@ (mov r8, r8)
 8001594:	46bd      	mov	sp, r7
 8001596:	b004      	add	sp, #16
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b082      	sub	sp, #8
 800159e:	af00      	add	r7, sp, #0
 80015a0:	0002      	movs	r2, r0
 80015a2:	1dfb      	adds	r3, r7, #7
 80015a4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff ff33 	bl	8001418 <__NVIC_EnableIRQ>
}
 80015b2:	46c0      	nop			@ (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b002      	add	sp, #8
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	0018      	movs	r0, r3
 80015c6:	f7ff ffaf 	bl	8001528 <SysTick_Config>
 80015ca:	0003      	movs	r3, r0
}
 80015cc:	0018      	movs	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	b002      	add	sp, #8
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e050      	b.n	8001688 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2225      	movs	r2, #37	@ 0x25
 80015ea:	5c9b      	ldrb	r3, [r3, r2]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d008      	beq.n	8001604 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2204      	movs	r2, #4
 80015f6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2224      	movs	r2, #36	@ 0x24
 80015fc:	2100      	movs	r1, #0
 80015fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e041      	b.n	8001688 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	210e      	movs	r1, #14
 8001610:	438a      	bics	r2, r1
 8001612:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800161e:	491c      	ldr	r1, [pc, #112]	@ (8001690 <HAL_DMA_Abort+0xbc>)
 8001620:	400a      	ands	r2, r1
 8001622:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2101      	movs	r1, #1
 8001630:	438a      	bics	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001634:	4b17      	ldr	r3, [pc, #92]	@ (8001694 <HAL_DMA_Abort+0xc0>)
 8001636:	6859      	ldr	r1, [r3, #4]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163c:	221c      	movs	r2, #28
 800163e:	4013      	ands	r3, r2
 8001640:	2201      	movs	r2, #1
 8001642:	409a      	lsls	r2, r3
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <HAL_DMA_Abort+0xc0>)
 8001646:	430a      	orrs	r2, r1
 8001648:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800164e:	687a      	ldr	r2, [r7, #4]
 8001650:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001652:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001658:	2b00      	cmp	r3, #0
 800165a:	d00c      	beq.n	8001676 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001666:	490a      	ldr	r1, [pc, #40]	@ (8001690 <HAL_DMA_Abort+0xbc>)
 8001668:	400a      	ands	r2, r1
 800166a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001674:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2225      	movs	r2, #37	@ 0x25
 800167a:	2101      	movs	r1, #1
 800167c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2224      	movs	r2, #36	@ 0x24
 8001682:	2100      	movs	r1, #0
 8001684:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001686:	2300      	movs	r3, #0
}
 8001688:	0018      	movs	r0, r3
 800168a:	46bd      	mov	sp, r7
 800168c:	b002      	add	sp, #8
 800168e:	bd80      	pop	{r7, pc}
 8001690:	fffffeff 	.word	0xfffffeff
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016a0:	230f      	movs	r3, #15
 80016a2:	18fb      	adds	r3, r7, r3
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2224      	movs	r2, #36	@ 0x24
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2224      	movs	r2, #36	@ 0x24
 80016b4:	5c9b      	ldrb	r3, [r3, r2]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d101      	bne.n	80016be <HAL_DMA_Abort_IT+0x26>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e05e      	b.n	800177c <HAL_DMA_Abort_IT+0xe4>
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2224      	movs	r2, #36	@ 0x24
 80016c2:	2101      	movs	r1, #1
 80016c4:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2225      	movs	r2, #37	@ 0x25
 80016ca:	5c9b      	ldrb	r3, [r3, r2]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d007      	beq.n	80016e2 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2204      	movs	r2, #4
 80016d6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80016d8:	230f      	movs	r3, #15
 80016da:	18fb      	adds	r3, r7, r3
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e049      	b.n	8001776 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	210e      	movs	r1, #14
 80016ee:	438a      	bics	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	438a      	bics	r2, r1
 8001700:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800170c:	491d      	ldr	r1, [pc, #116]	@ (8001784 <HAL_DMA_Abort_IT+0xec>)
 800170e:	400a      	ands	r2, r1
 8001710:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001712:	4b1d      	ldr	r3, [pc, #116]	@ (8001788 <HAL_DMA_Abort_IT+0xf0>)
 8001714:	6859      	ldr	r1, [r3, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800171a:	221c      	movs	r2, #28
 800171c:	4013      	ands	r3, r2
 800171e:	2201      	movs	r2, #1
 8001720:	409a      	lsls	r2, r3
 8001722:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <HAL_DMA_Abort_IT+0xf0>)
 8001724:	430a      	orrs	r2, r1
 8001726:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001730:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00c      	beq.n	8001754 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001744:	490f      	ldr	r1, [pc, #60]	@ (8001784 <HAL_DMA_Abort_IT+0xec>)
 8001746:	400a      	ands	r2, r1
 8001748:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800174e:	687a      	ldr	r2, [r7, #4]
 8001750:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001752:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2225      	movs	r2, #37	@ 0x25
 8001758:	2101      	movs	r1, #1
 800175a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2224      	movs	r2, #36	@ 0x24
 8001760:	2100      	movs	r1, #0
 8001762:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001768:	2b00      	cmp	r3, #0
 800176a:	d004      	beq.n	8001776 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001770:	687a      	ldr	r2, [r7, #4]
 8001772:	0010      	movs	r0, r2
 8001774:	4798      	blx	r3
    }
  }
  return status;
 8001776:	230f      	movs	r3, #15
 8001778:	18fb      	adds	r3, r7, r3
 800177a:	781b      	ldrb	r3, [r3, #0]
}
 800177c:	0018      	movs	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	b004      	add	sp, #16
 8001782:	bd80      	pop	{r7, pc}
 8001784:	fffffeff 	.word	0xfffffeff
 8001788:	40020000 	.word	0x40020000

0800178c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800179a:	e14d      	b.n	8001a38 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2101      	movs	r1, #1
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4091      	lsls	r1, r2
 80017a6:	000a      	movs	r2, r1
 80017a8:	4013      	ands	r3, r2
 80017aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d100      	bne.n	80017b4 <HAL_GPIO_Init+0x28>
 80017b2:	e13e      	b.n	8001a32 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d003      	beq.n	80017c4 <HAL_GPIO_Init+0x38>
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b12      	cmp	r3, #18
 80017c2:	d125      	bne.n	8001810 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	08da      	lsrs	r2, r3, #3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	3208      	adds	r2, #8
 80017cc:	0092      	lsls	r2, r2, #2
 80017ce:	58d3      	ldr	r3, [r2, r3]
 80017d0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	2207      	movs	r2, #7
 80017d6:	4013      	ands	r3, r2
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	220f      	movs	r2, #15
 80017dc:	409a      	lsls	r2, r3
 80017de:	0013      	movs	r3, r2
 80017e0:	43da      	mvns	r2, r3
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	4013      	ands	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	220f      	movs	r2, #15
 80017ee:	401a      	ands	r2, r3
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	2107      	movs	r1, #7
 80017f4:	400b      	ands	r3, r1
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	409a      	lsls	r2, r3
 80017fa:	0013      	movs	r3, r2
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	4313      	orrs	r3, r2
 8001800:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	08da      	lsrs	r2, r3, #3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	3208      	adds	r2, #8
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	6979      	ldr	r1, [r7, #20]
 800180e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	2203      	movs	r2, #3
 800181c:	409a      	lsls	r2, r3
 800181e:	0013      	movs	r3, r2
 8001820:	43da      	mvns	r2, r3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	4013      	ands	r3, r2
 8001826:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2203      	movs	r2, #3
 800182e:	401a      	ands	r2, r3
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	409a      	lsls	r2, r3
 8001836:	0013      	movs	r3, r2
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	4313      	orrs	r3, r2
 800183c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	697a      	ldr	r2, [r7, #20]
 8001842:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d00b      	beq.n	8001864 <HAL_GPIO_Init+0xd8>
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	2b02      	cmp	r3, #2
 8001852:	d007      	beq.n	8001864 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001858:	2b11      	cmp	r3, #17
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b12      	cmp	r3, #18
 8001862:	d130      	bne.n	80018c6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800186a:	693b      	ldr	r3, [r7, #16]
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	2203      	movs	r2, #3
 8001870:	409a      	lsls	r2, r3
 8001872:	0013      	movs	r3, r2
 8001874:	43da      	mvns	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	4013      	ands	r3, r2
 800187a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	005b      	lsls	r3, r3, #1
 8001884:	409a      	lsls	r2, r3
 8001886:	0013      	movs	r3, r2
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	4313      	orrs	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	697a      	ldr	r2, [r7, #20]
 8001892:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800189a:	2201      	movs	r2, #1
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	409a      	lsls	r2, r3
 80018a0:	0013      	movs	r3, r2
 80018a2:	43da      	mvns	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	4013      	ands	r3, r2
 80018a8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	091b      	lsrs	r3, r3, #4
 80018b0:	2201      	movs	r2, #1
 80018b2:	401a      	ands	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	409a      	lsls	r2, r3
 80018b8:	0013      	movs	r3, r2
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4313      	orrs	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d017      	beq.n	80018fe <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	409a      	lsls	r2, r3
 80018dc:	0013      	movs	r3, r2
 80018de:	43da      	mvns	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	4013      	ands	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	689a      	ldr	r2, [r3, #8]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	409a      	lsls	r2, r3
 80018f0:	0013      	movs	r3, r2
 80018f2:	697a      	ldr	r2, [r7, #20]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685a      	ldr	r2, [r3, #4]
 8001902:	2380      	movs	r3, #128	@ 0x80
 8001904:	055b      	lsls	r3, r3, #21
 8001906:	4013      	ands	r3, r2
 8001908:	d100      	bne.n	800190c <HAL_GPIO_Init+0x180>
 800190a:	e092      	b.n	8001a32 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800190c:	4a50      	ldr	r2, [pc, #320]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3318      	adds	r3, #24
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	589b      	ldr	r3, [r3, r2]
 8001918:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	2203      	movs	r2, #3
 800191e:	4013      	ands	r3, r2
 8001920:	00db      	lsls	r3, r3, #3
 8001922:	220f      	movs	r2, #15
 8001924:	409a      	lsls	r2, r3
 8001926:	0013      	movs	r3, r2
 8001928:	43da      	mvns	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	4013      	ands	r3, r2
 800192e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	23a0      	movs	r3, #160	@ 0xa0
 8001934:	05db      	lsls	r3, r3, #23
 8001936:	429a      	cmp	r2, r3
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x1d6>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a45      	ldr	r2, [pc, #276]	@ (8001a54 <HAL_GPIO_Init+0x2c8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x1d2>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a44      	ldr	r2, [pc, #272]	@ (8001a58 <HAL_GPIO_Init+0x2cc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x1ce>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a43      	ldr	r2, [pc, #268]	@ (8001a5c <HAL_GPIO_Init+0x2d0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x1ca>
 8001952:	2305      	movs	r3, #5
 8001954:	e006      	b.n	8001964 <HAL_GPIO_Init+0x1d8>
 8001956:	2306      	movs	r3, #6
 8001958:	e004      	b.n	8001964 <HAL_GPIO_Init+0x1d8>
 800195a:	2302      	movs	r3, #2
 800195c:	e002      	b.n	8001964 <HAL_GPIO_Init+0x1d8>
 800195e:	2301      	movs	r3, #1
 8001960:	e000      	b.n	8001964 <HAL_GPIO_Init+0x1d8>
 8001962:	2300      	movs	r3, #0
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	2103      	movs	r1, #3
 8001968:	400a      	ands	r2, r1
 800196a:	00d2      	lsls	r2, r2, #3
 800196c:	4093      	lsls	r3, r2
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001974:	4936      	ldr	r1, [pc, #216]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	089b      	lsrs	r3, r3, #2
 800197a:	3318      	adds	r3, #24
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	697a      	ldr	r2, [r7, #20]
 8001980:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001982:	4a33      	ldr	r2, [pc, #204]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 8001984:	2380      	movs	r3, #128	@ 0x80
 8001986:	58d3      	ldr	r3, [r2, r3]
 8001988:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	43da      	mvns	r2, r3
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4013      	ands	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685a      	ldr	r2, [r3, #4]
 8001998:	2380      	movs	r3, #128	@ 0x80
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	4013      	ands	r3, r2
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80019a8:	4929      	ldr	r1, [pc, #164]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 80019aa:	2280      	movs	r2, #128	@ 0x80
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80019b0:	4a27      	ldr	r2, [pc, #156]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 80019b2:	2384      	movs	r3, #132	@ 0x84
 80019b4:	58d3      	ldr	r3, [r2, r3]
 80019b6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	43da      	mvns	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	4013      	ands	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685a      	ldr	r2, [r3, #4]
 80019c6:	2380      	movs	r3, #128	@ 0x80
 80019c8:	029b      	lsls	r3, r3, #10
 80019ca:	4013      	ands	r3, r2
 80019cc:	d003      	beq.n	80019d6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80019ce:	697a      	ldr	r2, [r7, #20]
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	4313      	orrs	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80019d6:	491e      	ldr	r1, [pc, #120]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 80019d8:	2284      	movs	r2, #132	@ 0x84
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80019de:	4b1c      	ldr	r3, [pc, #112]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43da      	mvns	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	4013      	ands	r3, r2
 80019ec:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	2380      	movs	r3, #128	@ 0x80
 80019f4:	035b      	lsls	r3, r3, #13
 80019f6:	4013      	ands	r3, r2
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001a02:	4b13      	ldr	r3, [pc, #76]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 8001a04:	697a      	ldr	r2, [r7, #20]
 8001a06:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001a08:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43da      	mvns	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4013      	ands	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	2380      	movs	r3, #128	@ 0x80
 8001a1e:	039b      	lsls	r3, r3, #14
 8001a20:	4013      	ands	r3, r2
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001a24:	697a      	ldr	r2, [r7, #20]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001a2c:	4b08      	ldr	r3, [pc, #32]	@ (8001a50 <HAL_GPIO_Init+0x2c4>)
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	3301      	adds	r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	40da      	lsrs	r2, r3
 8001a40:	1e13      	subs	r3, r2, #0
 8001a42:	d000      	beq.n	8001a46 <HAL_GPIO_Init+0x2ba>
 8001a44:	e6aa      	b.n	800179c <HAL_GPIO_Init+0x10>
  }
}
 8001a46:	46c0      	nop			@ (mov r8, r8)
 8001a48:	46c0      	nop			@ (mov r8, r8)
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	b006      	add	sp, #24
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	40021800 	.word	0x40021800
 8001a54:	50000400 	.word	0x50000400
 8001a58:	50000800 	.word	0x50000800
 8001a5c:	50001400 	.word	0x50001400

08001a60 <HAL_PWR_EnableWakeUpPin>:
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @note  (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 8001a68:	4b0c      	ldr	r3, [pc, #48]	@ (8001a9c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	212f      	movs	r1, #47	@ 0x2f
 8001a70:	400a      	ands	r2, r1
 8001a72:	43d2      	mvns	r2, r2
 8001a74:	401a      	ands	r2, r3
 8001a76:	0011      	movs	r1, r2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	0a1a      	lsrs	r2, r3, #8
 8001a7c:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	60da      	str	r2, [r3, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 8001a82:	4b06      	ldr	r3, [pc, #24]	@ (8001a9c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001a84:	6899      	ldr	r1, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	222f      	movs	r2, #47	@ 0x2f
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	4b03      	ldr	r3, [pc, #12]	@ (8001a9c <HAL_PWR_EnableWakeUpPin+0x3c>)
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	609a      	str	r2, [r3, #8]
}
 8001a92:	46c0      	nop			@ (mov r8, r8)
 8001a94:	46bd      	mov	sp, r7
 8001a96:	b002      	add	sp, #8
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	46c0      	nop			@ (mov r8, r8)
 8001a9c:	40007000 	.word	0x40007000

08001aa0 <HAL_PWR_DisableWakeUpPin>:
  *                PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5 (*), PWR_WAKEUP_PIN6
  * @note   (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	212f      	movs	r1, #47	@ 0x2f
 8001ab0:	400b      	ands	r3, r1
 8001ab2:	43d9      	mvns	r1, r3
 8001ab4:	4b03      	ldr	r3, [pc, #12]	@ (8001ac4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	609a      	str	r2, [r3, #8]
}
 8001aba:	46c0      	nop			@ (mov r8, r8)
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			@ (mov r8, r8)
 8001ac4:	40007000 	.word	0x40007000

08001ac8 <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8001acc:	4b09      	ldr	r3, [pc, #36]	@ (8001af4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2207      	movs	r2, #7
 8001ad2:	4393      	bics	r3, r2
 8001ad4:	001a      	movs	r2, r3
 8001ad6:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001ad8:	2104      	movs	r1, #4
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001ade:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001ae0:	691a      	ldr	r2, [r3, #16]
 8001ae2:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001ae4:	2104      	movs	r1, #4
 8001ae6:	430a      	orrs	r2, r1
 8001ae8:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8001aea:	bf30      	wfi
}
 8001aec:	46c0      	nop			@ (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			@ (mov r8, r8)
 8001af4:	40007000 	.word	0x40007000
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e1d0      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2201      	movs	r2, #1
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_RCC_OscConfig+0x1e>
 8001b18:	e069      	b.n	8001bee <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b1a:	4bc8      	ldr	r3, [pc, #800]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	2238      	movs	r2, #56	@ 0x38
 8001b20:	4013      	ands	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2b08      	cmp	r3, #8
 8001b28:	d105      	bne.n	8001b36 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d15d      	bne.n	8001bee <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e1bc      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	2380      	movs	r3, #128	@ 0x80
 8001b3c:	025b      	lsls	r3, r3, #9
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_OscConfig+0x56>
 8001b42:	4bbe      	ldr	r3, [pc, #760]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	4bbd      	ldr	r3, [pc, #756]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b48:	2180      	movs	r1, #128	@ 0x80
 8001b4a:	0249      	lsls	r1, r1, #9
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	e020      	b.n	8001b94 <HAL_RCC_OscConfig+0x98>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	23a0      	movs	r3, #160	@ 0xa0
 8001b58:	02db      	lsls	r3, r3, #11
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d10e      	bne.n	8001b7c <HAL_RCC_OscConfig+0x80>
 8001b5e:	4bb7      	ldr	r3, [pc, #732]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	4bb6      	ldr	r3, [pc, #728]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b64:	2180      	movs	r1, #128	@ 0x80
 8001b66:	02c9      	lsls	r1, r1, #11
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	4bb3      	ldr	r3, [pc, #716]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4bb2      	ldr	r3, [pc, #712]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b72:	2180      	movs	r1, #128	@ 0x80
 8001b74:	0249      	lsls	r1, r1, #9
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0x98>
 8001b7c:	4baf      	ldr	r3, [pc, #700]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	4bae      	ldr	r3, [pc, #696]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b82:	49af      	ldr	r1, [pc, #700]	@ (8001e40 <HAL_RCC_OscConfig+0x344>)
 8001b84:	400a      	ands	r2, r1
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4bac      	ldr	r3, [pc, #688]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	4bab      	ldr	r3, [pc, #684]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001b8e:	49ad      	ldr	r1, [pc, #692]	@ (8001e44 <HAL_RCC_OscConfig+0x348>)
 8001b90:	400a      	ands	r2, r1
 8001b92:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d014      	beq.n	8001bc6 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b9c:	f7ff fc0e 	bl	80013bc <HAL_GetTick>
 8001ba0:	0003      	movs	r3, r0
 8001ba2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ba4:	e008      	b.n	8001bb8 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ba6:	f7ff fc09 	bl	80013bc <HAL_GetTick>
 8001baa:	0002      	movs	r2, r0
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	1ad3      	subs	r3, r2, r3
 8001bb0:	2b64      	cmp	r3, #100	@ 0x64
 8001bb2:	d901      	bls.n	8001bb8 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001bb4:	2303      	movs	r3, #3
 8001bb6:	e17b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bb8:	4ba0      	ldr	r3, [pc, #640]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	2380      	movs	r3, #128	@ 0x80
 8001bbe:	029b      	lsls	r3, r3, #10
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	d0f0      	beq.n	8001ba6 <HAL_RCC_OscConfig+0xaa>
 8001bc4:	e013      	b.n	8001bee <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc6:	f7ff fbf9 	bl	80013bc <HAL_GetTick>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001bd0:	f7ff fbf4 	bl	80013bc <HAL_GetTick>
 8001bd4:	0002      	movs	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b64      	cmp	r3, #100	@ 0x64
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e166      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001be2:	4b96      	ldr	r3, [pc, #600]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	2380      	movs	r3, #128	@ 0x80
 8001be8:	029b      	lsls	r3, r3, #10
 8001bea:	4013      	ands	r3, r2
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	d100      	bne.n	8001bfa <HAL_RCC_OscConfig+0xfe>
 8001bf8:	e086      	b.n	8001d08 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bfa:	4b90      	ldr	r3, [pc, #576]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2238      	movs	r2, #56	@ 0x38
 8001c00:	4013      	ands	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d12f      	bne.n	8001c6a <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e14c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c16:	4b89      	ldr	r3, [pc, #548]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	4a8b      	ldr	r2, [pc, #556]	@ (8001e48 <HAL_RCC_OscConfig+0x34c>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	021a      	lsls	r2, r3, #8
 8001c26:	4b85      	ldr	r3, [pc, #532]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d112      	bne.n	8001c58 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c32:	4b82      	ldr	r3, [pc, #520]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a85      	ldr	r2, [pc, #532]	@ (8001e4c <HAL_RCC_OscConfig+0x350>)
 8001c38:	4013      	ands	r3, r2
 8001c3a:	0019      	movs	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691a      	ldr	r2, [r3, #16]
 8001c40:	4b7e      	ldr	r3, [pc, #504]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c42:	430a      	orrs	r2, r1
 8001c44:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001c46:	4b7d      	ldr	r3, [pc, #500]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	0adb      	lsrs	r3, r3, #11
 8001c4c:	2207      	movs	r2, #7
 8001c4e:	4013      	ands	r3, r2
 8001c50:	4a7f      	ldr	r2, [pc, #508]	@ (8001e50 <HAL_RCC_OscConfig+0x354>)
 8001c52:	40da      	lsrs	r2, r3
 8001c54:	4b7f      	ldr	r3, [pc, #508]	@ (8001e54 <HAL_RCC_OscConfig+0x358>)
 8001c56:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c58:	4b7f      	ldr	r3, [pc, #508]	@ (8001e58 <HAL_RCC_OscConfig+0x35c>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	f7ff fb51 	bl	8001304 <HAL_InitTick>
 8001c62:	1e03      	subs	r3, r0, #0
 8001c64:	d050      	beq.n	8001d08 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e122      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d030      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c72:	4b72      	ldr	r3, [pc, #456]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a75      	ldr	r2, [pc, #468]	@ (8001e4c <HAL_RCC_OscConfig+0x350>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691a      	ldr	r2, [r3, #16]
 8001c80:	4b6e      	ldr	r3, [pc, #440]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c82:	430a      	orrs	r2, r1
 8001c84:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001c86:	4b6d      	ldr	r3, [pc, #436]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	4b6c      	ldr	r3, [pc, #432]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001c8c:	2180      	movs	r1, #128	@ 0x80
 8001c8e:	0049      	lsls	r1, r1, #1
 8001c90:	430a      	orrs	r2, r1
 8001c92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c94:	f7ff fb92 	bl	80013bc <HAL_GetTick>
 8001c98:	0003      	movs	r3, r0
 8001c9a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fb8d 	bl	80013bc <HAL_GetTick>
 8001ca2:	0002      	movs	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e0ff      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cb0:	4b62      	ldr	r3, [pc, #392]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	2380      	movs	r3, #128	@ 0x80
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4013      	ands	r3, r2
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b5f      	ldr	r3, [pc, #380]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	4a61      	ldr	r2, [pc, #388]	@ (8001e48 <HAL_RCC_OscConfig+0x34c>)
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	0019      	movs	r1, r3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	695b      	ldr	r3, [r3, #20]
 8001cca:	021a      	lsls	r2, r3, #8
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	e019      	b.n	8001d08 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001cd4:	4b59      	ldr	r3, [pc, #356]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4b58      	ldr	r3, [pc, #352]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001cda:	4960      	ldr	r1, [pc, #384]	@ (8001e5c <HAL_RCC_OscConfig+0x360>)
 8001cdc:	400a      	ands	r2, r1
 8001cde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce0:	f7ff fb6c 	bl	80013bc <HAL_GetTick>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001cea:	f7ff fb67 	bl	80013bc <HAL_GetTick>
 8001cee:	0002      	movs	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e0d9      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	2380      	movs	r3, #128	@ 0x80
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4013      	ands	r3, r2
 8001d06:	d1f0      	bne.n	8001cea <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	4013      	ands	r3, r2
 8001d10:	d042      	beq.n	8001d98 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001d12:	4b4a      	ldr	r3, [pc, #296]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	2238      	movs	r2, #56	@ 0x38
 8001d18:	4013      	ands	r3, r2
 8001d1a:	2b18      	cmp	r3, #24
 8001d1c:	d105      	bne.n	8001d2a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	699b      	ldr	r3, [r3, #24]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d138      	bne.n	8001d98 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e0c2      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d019      	beq.n	8001d66 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001d32:	4b42      	ldr	r3, [pc, #264]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001d34:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d36:	4b41      	ldr	r3, [pc, #260]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	430a      	orrs	r2, r1
 8001d3c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3e:	f7ff fb3d 	bl	80013bc <HAL_GetTick>
 8001d42:	0003      	movs	r3, r0
 8001d44:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001d48:	f7ff fb38 	bl	80013bc <HAL_GetTick>
 8001d4c:	0002      	movs	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e0aa      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001d5a:	4b38      	ldr	r3, [pc, #224]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001d5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d5e:	2202      	movs	r2, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d0f1      	beq.n	8001d48 <HAL_RCC_OscConfig+0x24c>
 8001d64:	e018      	b.n	8001d98 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d66:	4b35      	ldr	r3, [pc, #212]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001d68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d6a:	4b34      	ldr	r3, [pc, #208]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	438a      	bics	r2, r1
 8001d70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff fb23 	bl	80013bc <HAL_GetTick>
 8001d76:	0003      	movs	r3, r0
 8001d78:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001d7c:	f7ff fb1e 	bl	80013bc <HAL_GetTick>
 8001d80:	0002      	movs	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e090      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001d8e:	4b2b      	ldr	r3, [pc, #172]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d92:	2202      	movs	r2, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	d1f1      	bne.n	8001d7c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d100      	bne.n	8001da4 <HAL_RCC_OscConfig+0x2a8>
 8001da2:	e084      	b.n	8001eae <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001da4:	230f      	movs	r3, #15
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001dac:	4b23      	ldr	r3, [pc, #140]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2238      	movs	r2, #56	@ 0x38
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b20      	cmp	r3, #32
 8001db6:	d106      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d000      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x2c6>
 8001dc0:	e075      	b.n	8001eae <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e074      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d106      	bne.n	8001ddc <HAL_RCC_OscConfig+0x2e0>
 8001dce:	4b1b      	ldr	r3, [pc, #108]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001dd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001dd4:	2101      	movs	r1, #1
 8001dd6:	430a      	orrs	r2, r1
 8001dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dda:	e01c      	b.n	8001e16 <HAL_RCC_OscConfig+0x31a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b05      	cmp	r3, #5
 8001de2:	d10c      	bne.n	8001dfe <HAL_RCC_OscConfig+0x302>
 8001de4:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001de6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001de8:	4b14      	ldr	r3, [pc, #80]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001dea:	2104      	movs	r1, #4
 8001dec:	430a      	orrs	r2, r1
 8001dee:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001df0:	4b12      	ldr	r3, [pc, #72]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001df2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001df4:	4b11      	ldr	r3, [pc, #68]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001df6:	2101      	movs	r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001dfc:	e00b      	b.n	8001e16 <HAL_RCC_OscConfig+0x31a>
 8001dfe:	4b0f      	ldr	r3, [pc, #60]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001e00:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e02:	4b0e      	ldr	r3, [pc, #56]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001e04:	2101      	movs	r1, #1
 8001e06:	438a      	bics	r2, r1
 8001e08:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001e0c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001e3c <HAL_RCC_OscConfig+0x340>)
 8001e10:	2104      	movs	r1, #4
 8001e12:	438a      	bics	r2, r1
 8001e14:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d028      	beq.n	8001e70 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e1e:	f7ff facd 	bl	80013bc <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e26:	e01d      	b.n	8001e64 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff fac8 	bl	80013bc <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	4a0b      	ldr	r2, [pc, #44]	@ (8001e60 <HAL_RCC_OscConfig+0x364>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d915      	bls.n	8001e64 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e039      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	fffeffff 	.word	0xfffeffff
 8001e44:	fffbffff 	.word	0xfffbffff
 8001e48:	ffff80ff 	.word	0xffff80ff
 8001e4c:	ffffc7ff 	.word	0xffffc7ff
 8001e50:	02dc6c00 	.word	0x02dc6c00
 8001e54:	20000000 	.word	0x20000000
 8001e58:	20000004 	.word	0x20000004
 8001e5c:	fffffeff 	.word	0xfffffeff
 8001e60:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001e64:	4b14      	ldr	r3, [pc, #80]	@ (8001eb8 <HAL_RCC_OscConfig+0x3bc>)
 8001e66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	d0dc      	beq.n	8001e28 <HAL_RCC_OscConfig+0x32c>
 8001e6e:	e013      	b.n	8001e98 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff faa4 	bl	80013bc <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001e78:	e009      	b.n	8001e8e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7ff fa9f 	bl	80013bc <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	4a0d      	ldr	r2, [pc, #52]	@ (8001ebc <HAL_RCC_OscConfig+0x3c0>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e010      	b.n	8001eb0 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_RCC_OscConfig+0x3bc>)
 8001e90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e92:	2202      	movs	r2, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	d1f0      	bne.n	8001e7a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001e98:	230f      	movs	r3, #15
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d105      	bne.n	8001eae <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCC_OscConfig+0x3bc>)
 8001ea4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ea6:	4b04      	ldr	r3, [pc, #16]	@ (8001eb8 <HAL_RCC_OscConfig+0x3bc>)
 8001ea8:	4905      	ldr	r1, [pc, #20]	@ (8001ec0 <HAL_RCC_OscConfig+0x3c4>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	0018      	movs	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	b006      	add	sp, #24
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	00001388 	.word	0x00001388
 8001ec0:	efffffff 	.word	0xefffffff

08001ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e0e9      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed8:	4b76      	ldr	r3, [pc, #472]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2207      	movs	r2, #7
 8001ede:	4013      	ands	r3, r2
 8001ee0:	683a      	ldr	r2, [r7, #0]
 8001ee2:	429a      	cmp	r2, r3
 8001ee4:	d91e      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee6:	4b73      	ldr	r3, [pc, #460]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2207      	movs	r2, #7
 8001eec:	4393      	bics	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	4b70      	ldr	r3, [pc, #448]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001ef8:	f7ff fa60 	bl	80013bc <HAL_GetTick>
 8001efc:	0003      	movs	r3, r0
 8001efe:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f00:	e009      	b.n	8001f16 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f02:	f7ff fa5b 	bl	80013bc <HAL_GetTick>
 8001f06:	0002      	movs	r2, r0
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	1ad3      	subs	r3, r2, r3
 8001f0c:	4a6a      	ldr	r2, [pc, #424]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f4>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0ca      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f16:	4b67      	ldr	r3, [pc, #412]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2207      	movs	r2, #7
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d1ee      	bne.n	8001f02 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	2202      	movs	r2, #2
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d017      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2204      	movs	r2, #4
 8001f34:	4013      	ands	r3, r2
 8001f36:	d008      	beq.n	8001f4a <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001f38:	4b60      	ldr	r3, [pc, #384]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	4a60      	ldr	r2, [pc, #384]	@ (80020c0 <HAL_RCC_ClockConfig+0x1fc>)
 8001f3e:	401a      	ands	r2, r3
 8001f40:	4b5e      	ldr	r3, [pc, #376]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001f42:	21b0      	movs	r1, #176	@ 0xb0
 8001f44:	0109      	lsls	r1, r1, #4
 8001f46:	430a      	orrs	r2, r1
 8001f48:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	4a5d      	ldr	r2, [pc, #372]	@ (80020c4 <HAL_RCC_ClockConfig+0x200>)
 8001f50:	4013      	ands	r3, r2
 8001f52:	0019      	movs	r1, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4b58      	ldr	r3, [pc, #352]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2201      	movs	r2, #1
 8001f64:	4013      	ands	r3, r2
 8001f66:	d055      	beq.n	8002014 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001f68:	4b54      	ldr	r3, [pc, #336]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	221c      	movs	r2, #28
 8001f6e:	4393      	bics	r3, r2
 8001f70:	0019      	movs	r1, r3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	4b51      	ldr	r3, [pc, #324]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f84:	4b4d      	ldr	r3, [pc, #308]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	2380      	movs	r3, #128	@ 0x80
 8001f8a:	029b      	lsls	r3, r3, #10
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d11f      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e08b      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9c:	4b47      	ldr	r3, [pc, #284]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	2380      	movs	r3, #128	@ 0x80
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	d113      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e07f      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	2b03      	cmp	r3, #3
 8001fb2:	d106      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001fb4:	4b41      	ldr	r3, [pc, #260]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001fb6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001fb8:	2202      	movs	r2, #2
 8001fba:	4013      	ands	r3, r2
 8001fbc:	d108      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e074      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001fc2:	4b3e      	ldr	r3, [pc, #248]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001fc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fc6:	2202      	movs	r2, #2
 8001fc8:	4013      	ands	r3, r2
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e06d      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fd0:	4b3a      	ldr	r3, [pc, #232]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2207      	movs	r2, #7
 8001fd6:	4393      	bics	r3, r2
 8001fd8:	0019      	movs	r1, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	685a      	ldr	r2, [r3, #4]
 8001fde:	4b37      	ldr	r3, [pc, #220]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fe4:	f7ff f9ea 	bl	80013bc <HAL_GetTick>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fec:	e009      	b.n	8002002 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001fee:	f7ff f9e5 	bl	80013bc <HAL_GetTick>
 8001ff2:	0002      	movs	r2, r0
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f4>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e054      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002002:	4b2e      	ldr	r3, [pc, #184]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	2238      	movs	r2, #56	@ 0x38
 8002008:	401a      	ands	r2, r3
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	00db      	lsls	r3, r3, #3
 8002010:	429a      	cmp	r2, r3
 8002012:	d1ec      	bne.n	8001fee <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002014:	4b27      	ldr	r3, [pc, #156]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2207      	movs	r2, #7
 800201a:	4013      	ands	r3, r2
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d21e      	bcs.n	8002060 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b24      	ldr	r3, [pc, #144]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	2207      	movs	r2, #7
 8002028:	4393      	bics	r3, r2
 800202a:	0019      	movs	r1, r3
 800202c:	4b21      	ldr	r3, [pc, #132]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	430a      	orrs	r2, r1
 8002032:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002034:	f7ff f9c2 	bl	80013bc <HAL_GetTick>
 8002038:	0003      	movs	r3, r0
 800203a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800203c:	e009      	b.n	8002052 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800203e:	f7ff f9bd 	bl	80013bc <HAL_GetTick>
 8002042:	0002      	movs	r2, r0
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	4a1b      	ldr	r2, [pc, #108]	@ (80020b8 <HAL_RCC_ClockConfig+0x1f4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e02c      	b.n	80020ac <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002052:	4b18      	ldr	r3, [pc, #96]	@ (80020b4 <HAL_RCC_ClockConfig+0x1f0>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2207      	movs	r2, #7
 8002058:	4013      	ands	r3, r2
 800205a:	683a      	ldr	r2, [r7, #0]
 800205c:	429a      	cmp	r2, r3
 800205e:	d1ee      	bne.n	800203e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	2204      	movs	r2, #4
 8002066:	4013      	ands	r3, r2
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800206a:	4b14      	ldr	r3, [pc, #80]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	4a16      	ldr	r2, [pc, #88]	@ (80020c8 <HAL_RCC_ClockConfig+0x204>)
 8002070:	4013      	ands	r3, r2
 8002072:	0019      	movs	r1, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	4b10      	ldr	r3, [pc, #64]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 800207a:	430a      	orrs	r2, r1
 800207c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800207e:	f000 f82b 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002082:	0001      	movs	r1, r0
 8002084:	4b0d      	ldr	r3, [pc, #52]	@ (80020bc <HAL_RCC_ClockConfig+0x1f8>)
 8002086:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	220f      	movs	r2, #15
 800208c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800208e:	4b0f      	ldr	r3, [pc, #60]	@ (80020cc <HAL_RCC_ClockConfig+0x208>)
 8002090:	0092      	lsls	r2, r2, #2
 8002092:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002094:	221f      	movs	r2, #31
 8002096:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002098:	000a      	movs	r2, r1
 800209a:	40da      	lsrs	r2, r3
 800209c:	4b0c      	ldr	r3, [pc, #48]	@ (80020d0 <HAL_RCC_ClockConfig+0x20c>)
 800209e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <HAL_RCC_ClockConfig+0x210>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0018      	movs	r0, r3
 80020a6:	f7ff f92d 	bl	8001304 <HAL_InitTick>
 80020aa:	0003      	movs	r3, r0
}
 80020ac:	0018      	movs	r0, r3
 80020ae:	46bd      	mov	sp, r7
 80020b0:	b004      	add	sp, #16
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	40022000 	.word	0x40022000
 80020b8:	00001388 	.word	0x00001388
 80020bc:	40021000 	.word	0x40021000
 80020c0:	ffff84ff 	.word	0xffff84ff
 80020c4:	fffff0ff 	.word	0xfffff0ff
 80020c8:	ffff8fff 	.word	0xffff8fff
 80020cc:	08006c14 	.word	0x08006c14
 80020d0:	20000000 	.word	0x20000000
 80020d4:	20000004 	.word	0x20000004

080020d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80020de:	4b23      	ldr	r3, [pc, #140]	@ (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	089b      	lsrs	r3, r3, #2
 80020e4:	2207      	movs	r2, #7
 80020e6:	4013      	ands	r3, r2
 80020e8:	3301      	adds	r3, #1
 80020ea:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020ec:	4b1f      	ldr	r3, [pc, #124]	@ (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 80020ee:	689b      	ldr	r3, [r3, #8]
 80020f0:	2238      	movs	r2, #56	@ 0x38
 80020f2:	4013      	ands	r3, r2
 80020f4:	d10f      	bne.n	8002116 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80020f6:	4b1d      	ldr	r3, [pc, #116]	@ (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	0adb      	lsrs	r3, r3, #11
 80020fc:	2207      	movs	r2, #7
 80020fe:	4013      	ands	r3, r2
 8002100:	2201      	movs	r2, #1
 8002102:	409a      	lsls	r2, r3
 8002104:	0013      	movs	r3, r2
 8002106:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4819      	ldr	r0, [pc, #100]	@ (8002170 <HAL_RCC_GetSysClockFreq+0x98>)
 800210c:	f7fe f80e 	bl	800012c <__udivsi3>
 8002110:	0003      	movs	r3, r0
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e01e      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002116:	4b15      	ldr	r3, [pc, #84]	@ (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	2238      	movs	r2, #56	@ 0x38
 800211c:	4013      	ands	r3, r2
 800211e:	2b08      	cmp	r3, #8
 8002120:	d102      	bne.n	8002128 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002122:	4b14      	ldr	r3, [pc, #80]	@ (8002174 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	e015      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002128:	4b10      	ldr	r3, [pc, #64]	@ (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2238      	movs	r2, #56	@ 0x38
 800212e:	4013      	ands	r3, r2
 8002130:	2b20      	cmp	r3, #32
 8002132:	d103      	bne.n	800213c <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002134:	2380      	movs	r3, #128	@ 0x80
 8002136:	021b      	lsls	r3, r3, #8
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e00b      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800213c:	4b0b      	ldr	r3, [pc, #44]	@ (800216c <HAL_RCC_GetSysClockFreq+0x94>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	2238      	movs	r2, #56	@ 0x38
 8002142:	4013      	ands	r3, r2
 8002144:	2b18      	cmp	r3, #24
 8002146:	d103      	bne.n	8002150 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002148:	23fa      	movs	r3, #250	@ 0xfa
 800214a:	01db      	lsls	r3, r3, #7
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	e001      	b.n	8002154 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002154:	68b9      	ldr	r1, [r7, #8]
 8002156:	68f8      	ldr	r0, [r7, #12]
 8002158:	f7fd ffe8 	bl	800012c <__udivsi3>
 800215c:	0003      	movs	r3, r0
 800215e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002160:	68fb      	ldr	r3, [r7, #12]
}
 8002162:	0018      	movs	r0, r3
 8002164:	46bd      	mov	sp, r7
 8002166:	b004      	add	sp, #16
 8002168:	bd80      	pop	{r7, pc}
 800216a:	46c0      	nop			@ (mov r8, r8)
 800216c:	40021000 	.word	0x40021000
 8002170:	02dc6c00 	.word	0x02dc6c00
 8002174:	007a1200 	.word	0x007a1200

08002178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800217c:	f7ff ffac 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8002180:	0001      	movs	r1, r0
 8002182:	4b09      	ldr	r3, [pc, #36]	@ (80021a8 <HAL_RCC_GetHCLKFreq+0x30>)
 8002184:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	220f      	movs	r2, #15
 800218a:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800218c:	4b07      	ldr	r3, [pc, #28]	@ (80021ac <HAL_RCC_GetHCLKFreq+0x34>)
 800218e:	0092      	lsls	r2, r2, #2
 8002190:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002192:	221f      	movs	r2, #31
 8002194:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002196:	000a      	movs	r2, r1
 8002198:	40da      	lsrs	r2, r3
 800219a:	4b05      	ldr	r3, [pc, #20]	@ (80021b0 <HAL_RCC_GetHCLKFreq+0x38>)
 800219c:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800219e:	4b04      	ldr	r3, [pc, #16]	@ (80021b0 <HAL_RCC_GetHCLKFreq+0x38>)
 80021a0:	681b      	ldr	r3, [r3, #0]
}
 80021a2:	0018      	movs	r0, r3
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08006c14 	.word	0x08006c14
 80021b0:	20000000 	.word	0x20000000

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80021b8:	f7ff ffde 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 80021bc:	0001      	movs	r1, r0
 80021be:	4b07      	ldr	r3, [pc, #28]	@ (80021dc <HAL_RCC_GetPCLK1Freq+0x28>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	0b1b      	lsrs	r3, r3, #12
 80021c4:	2207      	movs	r2, #7
 80021c6:	401a      	ands	r2, r3
 80021c8:	4b05      	ldr	r3, [pc, #20]	@ (80021e0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80021ca:	0092      	lsls	r2, r2, #2
 80021cc:	58d3      	ldr	r3, [r2, r3]
 80021ce:	221f      	movs	r2, #31
 80021d0:	4013      	ands	r3, r2
 80021d2:	40d9      	lsrs	r1, r3
 80021d4:	000b      	movs	r3, r1
}
 80021d6:	0018      	movs	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40021000 	.word	0x40021000
 80021e0:	08006c54 	.word	0x08006c54

080021e4 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b086      	sub	sp, #24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80021ec:	2313      	movs	r3, #19
 80021ee:	18fb      	adds	r3, r7, r3
 80021f0:	2200      	movs	r2, #0
 80021f2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021f4:	2312      	movs	r3, #18
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2200      	movs	r2, #0
 80021fa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	2240      	movs	r2, #64	@ 0x40
 8002202:	4013      	ands	r3, r2
 8002204:	d100      	bne.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002206:	e079      	b.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002208:	2011      	movs	r0, #17
 800220a:	183b      	adds	r3, r7, r0
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002210:	4b63      	ldr	r3, [pc, #396]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002214:	2380      	movs	r3, #128	@ 0x80
 8002216:	055b      	lsls	r3, r3, #21
 8002218:	4013      	ands	r3, r2
 800221a:	d110      	bne.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800221c:	4b60      	ldr	r3, [pc, #384]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800221e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002220:	4b5f      	ldr	r3, [pc, #380]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002222:	2180      	movs	r1, #128	@ 0x80
 8002224:	0549      	lsls	r1, r1, #21
 8002226:	430a      	orrs	r2, r1
 8002228:	63da      	str	r2, [r3, #60]	@ 0x3c
 800222a:	4b5d      	ldr	r3, [pc, #372]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800222c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800222e:	2380      	movs	r3, #128	@ 0x80
 8002230:	055b      	lsls	r3, r3, #21
 8002232:	4013      	ands	r3, r2
 8002234:	60bb      	str	r3, [r7, #8]
 8002236:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002238:	183b      	adds	r3, r7, r0
 800223a:	2201      	movs	r2, #1
 800223c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800223e:	4b58      	ldr	r3, [pc, #352]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002240:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002242:	23c0      	movs	r3, #192	@ 0xc0
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4013      	ands	r3, r2
 8002248:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d019      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	429a      	cmp	r2, r3
 8002258:	d014      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800225a:	4b51      	ldr	r3, [pc, #324]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800225c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800225e:	4a51      	ldr	r2, [pc, #324]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002260:	4013      	ands	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002264:	4b4e      	ldr	r3, [pc, #312]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002266:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002268:	4b4d      	ldr	r3, [pc, #308]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800226a:	2180      	movs	r1, #128	@ 0x80
 800226c:	0249      	lsls	r1, r1, #9
 800226e:	430a      	orrs	r2, r1
 8002270:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002272:	4b4b      	ldr	r3, [pc, #300]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002274:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002276:	4b4a      	ldr	r3, [pc, #296]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002278:	494b      	ldr	r1, [pc, #300]	@ (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800227a:	400a      	ands	r2, r1
 800227c:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800227e:	4b48      	ldr	r3, [pc, #288]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	2201      	movs	r2, #1
 8002288:	4013      	ands	r3, r2
 800228a:	d016      	beq.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228c:	f7ff f896 	bl	80013bc <HAL_GetTick>
 8002290:	0003      	movs	r3, r0
 8002292:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002294:	e00c      	b.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7ff f891 	bl	80013bc <HAL_GetTick>
 800229a:	0002      	movs	r2, r0
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	4a42      	ldr	r2, [pc, #264]	@ (80023ac <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d904      	bls.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80022a6:	2313      	movs	r3, #19
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	2203      	movs	r2, #3
 80022ac:	701a      	strb	r2, [r3, #0]
          break;
 80022ae:	e004      	b.n	80022ba <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80022b0:	4b3b      	ldr	r3, [pc, #236]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022b4:	2202      	movs	r2, #2
 80022b6:	4013      	ands	r3, r2
 80022b8:	d0ed      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80022ba:	2313      	movs	r3, #19
 80022bc:	18fb      	adds	r3, r7, r3
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10a      	bne.n	80022da <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022c4:	4b36      	ldr	r3, [pc, #216]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	4a36      	ldr	r2, [pc, #216]	@ (80023a4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	0019      	movs	r1, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699a      	ldr	r2, [r3, #24]
 80022d2:	4b33      	ldr	r3, [pc, #204]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022d4:	430a      	orrs	r2, r1
 80022d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80022d8:	e005      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022da:	2312      	movs	r3, #18
 80022dc:	18fb      	adds	r3, r7, r3
 80022de:	2213      	movs	r2, #19
 80022e0:	18ba      	adds	r2, r7, r2
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022e6:	2311      	movs	r3, #17
 80022e8:	18fb      	adds	r3, r7, r3
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022f0:	4b2b      	ldr	r3, [pc, #172]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80022f4:	4b2a      	ldr	r3, [pc, #168]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022f6:	492e      	ldr	r1, [pc, #184]	@ (80023b0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80022f8:	400a      	ands	r2, r1
 80022fa:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	2201      	movs	r2, #1
 8002302:	4013      	ands	r3, r2
 8002304:	d009      	beq.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002306:	4b26      	ldr	r3, [pc, #152]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002308:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800230a:	2203      	movs	r2, #3
 800230c:	4393      	bics	r3, r2
 800230e:	0019      	movs	r1, r3
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	4b22      	ldr	r3, [pc, #136]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002316:	430a      	orrs	r2, r1
 8002318:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2202      	movs	r2, #2
 8002320:	4013      	ands	r3, r2
 8002322:	d009      	beq.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002324:	4b1e      	ldr	r3, [pc, #120]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002328:	4a22      	ldr	r2, [pc, #136]	@ (80023b4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232a:	4013      	ands	r3, r2
 800232c:	0019      	movs	r1, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	4b1b      	ldr	r3, [pc, #108]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002334:	430a      	orrs	r2, r1
 8002336:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2220      	movs	r2, #32
 800233e:	4013      	ands	r3, r2
 8002340:	d008      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	0899      	lsrs	r1, r3, #2
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695a      	ldr	r2, [r3, #20]
 800234e:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002350:	430a      	orrs	r2, r1
 8002352:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2204      	movs	r2, #4
 800235a:	4013      	ands	r3, r2
 800235c:	d009      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800235e:	4b10      	ldr	r3, [pc, #64]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002360:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002362:	4a15      	ldr	r2, [pc, #84]	@ (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	4b0c      	ldr	r3, [pc, #48]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800236e:	430a      	orrs	r2, r1
 8002370:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2280      	movs	r2, #128	@ 0x80
 8002378:	4013      	ands	r3, r2
 800237a:	d009      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	22e0      	movs	r2, #224	@ 0xe0
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685a      	ldr	r2, [r3, #4]
 800238a:	4b05      	ldr	r3, [pc, #20]	@ (80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002390:	2312      	movs	r3, #18
 8002392:	18fb      	adds	r3, r7, r3
 8002394:	781b      	ldrb	r3, [r3, #0]
}
 8002396:	0018      	movs	r0, r3
 8002398:	46bd      	mov	sp, r7
 800239a:	b006      	add	sp, #24
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			@ (mov r8, r8)
 80023a0:	40021000 	.word	0x40021000
 80023a4:	fffffcff 	.word	0xfffffcff
 80023a8:	fffeffff 	.word	0xfffeffff
 80023ac:	00001388 	.word	0x00001388
 80023b0:	efffffff 	.word	0xefffffff
 80023b4:	ffffcfff 	.word	0xffffcfff
 80023b8:	ffff3fff 	.word	0xffff3fff

080023bc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80023bc:	b5b0      	push	{r4, r5, r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80023c4:	230f      	movs	r3, #15
 80023c6:	18fb      	adds	r3, r7, r3
 80023c8:	2201      	movs	r2, #1
 80023ca:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d100      	bne.n	80023d4 <HAL_RTC_Init+0x18>
 80023d2:	e075      	b.n	80024c0 <HAL_RTC_Init+0x104>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2225      	movs	r2, #37	@ 0x25
 80023d8:	5c9b      	ldrb	r3, [r3, r2]
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d107      	bne.n	80023f0 <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2224      	movs	r2, #36	@ 0x24
 80023e4:	2100      	movs	r1, #0
 80023e6:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f7fe fdd2 	bl	8000f94 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2225      	movs	r2, #37	@ 0x25
 80023f4:	2102      	movs	r1, #2
 80023f6:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2210      	movs	r2, #16
 8002400:	4013      	ands	r3, r2
 8002402:	2b10      	cmp	r3, #16
 8002404:	d04f      	beq.n	80024a6 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	22ca      	movs	r2, #202	@ 0xca
 800240c:	625a      	str	r2, [r3, #36]	@ 0x24
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2253      	movs	r2, #83	@ 0x53
 8002414:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002416:	250f      	movs	r5, #15
 8002418:	197c      	adds	r4, r7, r5
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	0018      	movs	r0, r3
 800241e:	f000 fbef 	bl	8002c00 <RTC_EnterInitMode>
 8002422:	0003      	movs	r3, r0
 8002424:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8002426:	0028      	movs	r0, r5
 8002428:	183b      	adds	r3, r7, r0
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d121      	bne.n	8002474 <HAL_RTC_Init+0xb8>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL));
 8002430:	4b27      	ldr	r3, [pc, #156]	@ (80024d0 <HAL_RTC_Init+0x114>)
 8002432:	699a      	ldr	r2, [r3, #24]
 8002434:	4b26      	ldr	r3, [pc, #152]	@ (80024d0 <HAL_RTC_Init+0x114>)
 8002436:	4927      	ldr	r1, [pc, #156]	@ (80024d4 <HAL_RTC_Init+0x118>)
 8002438:	400a      	ands	r2, r1
 800243a:	619a      	str	r2, [r3, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800243c:	4b24      	ldr	r3, [pc, #144]	@ (80024d0 <HAL_RTC_Init+0x114>)
 800243e:	6999      	ldr	r1, [r3, #24]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	431a      	orrs	r2, r3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	431a      	orrs	r2, r3
 8002450:	4b1f      	ldr	r3, [pc, #124]	@ (80024d0 <HAL_RTC_Init+0x114>)
 8002452:	430a      	orrs	r2, r1
 8002454:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	68d9      	ldr	r1, [r3, #12]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	041a      	lsls	r2, r3, #16
 8002460:	4b1b      	ldr	r3, [pc, #108]	@ (80024d0 <HAL_RTC_Init+0x114>)
 8002462:	430a      	orrs	r2, r1
 8002464:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002466:	183c      	adds	r4, r7, r0
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	0018      	movs	r0, r3
 800246c:	f000 fc10 	bl	8002c90 <RTC_ExitInitMode>
 8002470:	0003      	movs	r3, r0
 8002472:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002474:	230f      	movs	r3, #15
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10e      	bne.n	800249c <HAL_RTC_Init+0xe0>
      {
        MODIFY_REG(RTC->CR, \
 800247e:	4b14      	ldr	r3, [pc, #80]	@ (80024d0 <HAL_RTC_Init+0x114>)
 8002480:	699b      	ldr	r3, [r3, #24]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	08d9      	lsrs	r1, r3, #3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6a1a      	ldr	r2, [r3, #32]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	695b      	ldr	r3, [r3, #20]
 8002494:	431a      	orrs	r2, r3
 8002496:	4b0e      	ldr	r3, [pc, #56]	@ (80024d0 <HAL_RTC_Init+0x114>)
 8002498:	430a      	orrs	r2, r1
 800249a:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	22ff      	movs	r2, #255	@ 0xff
 80024a2:	625a      	str	r2, [r3, #36]	@ 0x24
 80024a4:	e003      	b.n	80024ae <HAL_RTC_Init+0xf2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80024a6:	230f      	movs	r3, #15
 80024a8:	18fb      	adds	r3, r7, r3
 80024aa:	2200      	movs	r2, #0
 80024ac:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80024ae:	230f      	movs	r3, #15
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d103      	bne.n	80024c0 <HAL_RTC_Init+0x104>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2225      	movs	r2, #37	@ 0x25
 80024bc:	2101      	movs	r1, #1
 80024be:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80024c0:	230f      	movs	r3, #15
 80024c2:	18fb      	adds	r3, r7, r3
 80024c4:	781b      	ldrb	r3, [r3, #0]
}
 80024c6:	0018      	movs	r0, r3
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b004      	add	sp, #16
 80024cc:	bdb0      	pop	{r4, r5, r7, pc}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	40002800 	.word	0x40002800
 80024d4:	ff8fffbf 	.word	0xff8fffbf

080024d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80024d8:	b5b0      	push	{r4, r5, r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2224      	movs	r2, #36	@ 0x24
 80024e8:	5c9b      	ldrb	r3, [r3, r2]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d101      	bne.n	80024f2 <HAL_RTC_SetTime+0x1a>
 80024ee:	2302      	movs	r3, #2
 80024f0:	e092      	b.n	8002618 <HAL_RTC_SetTime+0x140>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2224      	movs	r2, #36	@ 0x24
 80024f6:	2101      	movs	r1, #1
 80024f8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2225      	movs	r2, #37	@ 0x25
 80024fe:	2102      	movs	r1, #2
 8002500:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	22ca      	movs	r2, #202	@ 0xca
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2253      	movs	r2, #83	@ 0x53
 8002510:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002512:	2513      	movs	r5, #19
 8002514:	197c      	adds	r4, r7, r5
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 fb71 	bl	8002c00 <RTC_EnterInitMode>
 800251e:	0003      	movs	r3, r0
 8002520:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002522:	197b      	adds	r3, r7, r5
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d162      	bne.n	80025f0 <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d125      	bne.n	800257c <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2240      	movs	r2, #64	@ 0x40
 8002538:	4013      	ands	r3, r2
 800253a:	d102      	bne.n	8002542 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	2200      	movs	r2, #0
 8002540:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	0018      	movs	r0, r3
 8002548:	f000 fbe6 	bl	8002d18 <RTC_ByteToBcd2>
 800254c:	0003      	movs	r3, r0
 800254e:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	0018      	movs	r0, r3
 8002556:	f000 fbdf 	bl	8002d18 <RTC_ByteToBcd2>
 800255a:	0003      	movs	r3, r0
 800255c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800255e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	789b      	ldrb	r3, [r3, #2]
 8002564:	0018      	movs	r0, r3
 8002566:	f000 fbd7 	bl	8002d18 <RTC_ByteToBcd2>
 800256a:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800256c:	0022      	movs	r2, r4
 800256e:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	78db      	ldrb	r3, [r3, #3]
 8002574:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002576:	4313      	orrs	r3, r2
 8002578:	617b      	str	r3, [r7, #20]
 800257a:	e017      	b.n	80025ac <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	2240      	movs	r2, #64	@ 0x40
 8002584:	4013      	ands	r3, r2
 8002586:	d102      	bne.n	800258e <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	2200      	movs	r2, #0
 800258c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	785b      	ldrb	r3, [r3, #1]
 8002598:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800259a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80025a0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	78db      	ldrb	r3, [r3, #3]
 80025a6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80025a8:	4313      	orrs	r3, r2
 80025aa:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	491b      	ldr	r1, [pc, #108]	@ (8002620 <HAL_RTC_SetTime+0x148>)
 80025b4:	400a      	ands	r2, r1
 80025b6:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699a      	ldr	r2, [r3, #24]
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4918      	ldr	r1, [pc, #96]	@ (8002624 <HAL_RTC_SetTime+0x14c>)
 80025c4:	400a      	ands	r2, r1
 80025c6:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6999      	ldr	r1, [r3, #24]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	431a      	orrs	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	430a      	orrs	r2, r1
 80025de:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80025e0:	2313      	movs	r3, #19
 80025e2:	18fc      	adds	r4, r7, r3
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 fb52 	bl	8002c90 <RTC_ExitInitMode>
 80025ec:	0003      	movs	r3, r0
 80025ee:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	22ff      	movs	r2, #255	@ 0xff
 80025f6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80025f8:	2313      	movs	r3, #19
 80025fa:	18fb      	adds	r3, r7, r3
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d103      	bne.n	800260a <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2225      	movs	r2, #37	@ 0x25
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2224      	movs	r2, #36	@ 0x24
 800260e:	2100      	movs	r1, #0
 8002610:	5499      	strb	r1, [r3, r2]

  return status;
 8002612:	2313      	movs	r3, #19
 8002614:	18fb      	adds	r3, r7, r3
 8002616:	781b      	ldrb	r3, [r3, #0]
}
 8002618:	0018      	movs	r0, r3
 800261a:	46bd      	mov	sp, r7
 800261c:	b006      	add	sp, #24
 800261e:	bdb0      	pop	{r4, r5, r7, pc}
 8002620:	007f7f7f 	.word	0x007f7f7f
 8002624:	fffbffff 	.word	0xfffbffff

08002628 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	689a      	ldr	r2, [r3, #8]
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	045b      	lsls	r3, r3, #17
 8002646:	0c5a      	lsrs	r2, r3, #17
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a22      	ldr	r2, [pc, #136]	@ (80026dc <HAL_RTC_GetTime+0xb4>)
 8002654:	4013      	ands	r3, r2
 8002656:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	0c1b      	lsrs	r3, r3, #16
 800265c:	b2db      	uxtb	r3, r3
 800265e:	223f      	movs	r2, #63	@ 0x3f
 8002660:	4013      	ands	r3, r2
 8002662:	b2da      	uxtb	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	0a1b      	lsrs	r3, r3, #8
 800266c:	b2db      	uxtb	r3, r3
 800266e:	227f      	movs	r2, #127	@ 0x7f
 8002670:	4013      	ands	r3, r2
 8002672:	b2da      	uxtb	r2, r3
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	b2db      	uxtb	r3, r3
 800267c:	227f      	movs	r2, #127	@ 0x7f
 800267e:	4013      	ands	r3, r2
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	0d9b      	lsrs	r3, r3, #22
 800268a:	b2db      	uxtb	r3, r3
 800268c:	2201      	movs	r2, #1
 800268e:	4013      	ands	r3, r2
 8002690:	b2da      	uxtb	r2, r3
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d11a      	bne.n	80026d2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	0018      	movs	r0, r3
 80026a2:	f000 fb61 	bl	8002d68 <RTC_Bcd2ToByte>
 80026a6:	0003      	movs	r3, r0
 80026a8:	001a      	movs	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	785b      	ldrb	r3, [r3, #1]
 80026b2:	0018      	movs	r0, r3
 80026b4:	f000 fb58 	bl	8002d68 <RTC_Bcd2ToByte>
 80026b8:	0003      	movs	r3, r0
 80026ba:	001a      	movs	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	789b      	ldrb	r3, [r3, #2]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 fb4f 	bl	8002d68 <RTC_Bcd2ToByte>
 80026ca:	0003      	movs	r3, r0
 80026cc:	001a      	movs	r2, r3
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	0018      	movs	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	b006      	add	sp, #24
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	007f7f7f 	.word	0x007f7f7f

080026e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80026e0:	b5b0      	push	{r4, r5, r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2224      	movs	r2, #36	@ 0x24
 80026f0:	5c9b      	ldrb	r3, [r3, r2]
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d101      	bne.n	80026fa <HAL_RTC_SetDate+0x1a>
 80026f6:	2302      	movs	r3, #2
 80026f8:	e07e      	b.n	80027f8 <HAL_RTC_SetDate+0x118>
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2224      	movs	r2, #36	@ 0x24
 80026fe:	2101      	movs	r1, #1
 8002700:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2225      	movs	r2, #37	@ 0x25
 8002706:	2102      	movs	r1, #2
 8002708:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d10e      	bne.n	800272e <HAL_RTC_SetDate+0x4e>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	001a      	movs	r2, r3
 8002716:	2310      	movs	r3, #16
 8002718:	4013      	ands	r3, r2
 800271a:	d008      	beq.n	800272e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	785b      	ldrb	r3, [r3, #1]
 8002720:	2210      	movs	r2, #16
 8002722:	4393      	bics	r3, r2
 8002724:	b2db      	uxtb	r3, r3
 8002726:	330a      	adds	r3, #10
 8002728:	b2da      	uxtb	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d11c      	bne.n	800276e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	78db      	ldrb	r3, [r3, #3]
 8002738:	0018      	movs	r0, r3
 800273a:	f000 faed 	bl	8002d18 <RTC_ByteToBcd2>
 800273e:	0003      	movs	r3, r0
 8002740:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	785b      	ldrb	r3, [r3, #1]
 8002746:	0018      	movs	r0, r3
 8002748:	f000 fae6 	bl	8002d18 <RTC_ByteToBcd2>
 800274c:	0003      	movs	r3, r0
 800274e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002750:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	789b      	ldrb	r3, [r3, #2]
 8002756:	0018      	movs	r0, r3
 8002758:	f000 fade 	bl	8002d18 <RTC_ByteToBcd2>
 800275c:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800275e:	0022      	movs	r2, r4
 8002760:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	e00e      	b.n	800278c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	78db      	ldrb	r3, [r3, #3]
 8002772:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	785b      	ldrb	r3, [r3, #1]
 8002778:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800277a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800277c:	68ba      	ldr	r2, [r7, #8]
 800277e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002780:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	22ca      	movs	r2, #202	@ 0xca
 8002792:	625a      	str	r2, [r3, #36]	@ 0x24
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	2253      	movs	r2, #83	@ 0x53
 800279a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800279c:	2513      	movs	r5, #19
 800279e:	197c      	adds	r4, r7, r5
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 fa2c 	bl	8002c00 <RTC_EnterInitMode>
 80027a8:	0003      	movs	r3, r0
 80027aa:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80027ac:	0028      	movs	r0, r5
 80027ae:	183b      	adds	r3, r7, r0
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d10c      	bne.n	80027d0 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4910      	ldr	r1, [pc, #64]	@ (8002800 <HAL_RTC_SetDate+0x120>)
 80027be:	400a      	ands	r2, r1
 80027c0:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80027c2:	183c      	adds	r4, r7, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	0018      	movs	r0, r3
 80027c8:	f000 fa62 	bl	8002c90 <RTC_ExitInitMode>
 80027cc:	0003      	movs	r3, r0
 80027ce:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	22ff      	movs	r2, #255	@ 0xff
 80027d6:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80027d8:	2313      	movs	r3, #19
 80027da:	18fb      	adds	r3, r7, r3
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d103      	bne.n	80027ea <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2225      	movs	r2, #37	@ 0x25
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2224      	movs	r2, #36	@ 0x24
 80027ee:	2100      	movs	r1, #0
 80027f0:	5499      	strb	r1, [r3, r2]

  return status;
 80027f2:	2313      	movs	r3, #19
 80027f4:	18fb      	adds	r3, r7, r3
 80027f6:	781b      	ldrb	r3, [r3, #0]
}
 80027f8:	0018      	movs	r0, r3
 80027fa:	46bd      	mov	sp, r7
 80027fc:	b006      	add	sp, #24
 80027fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002800:	00ffff3f 	.word	0x00ffff3f

08002804 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b086      	sub	sp, #24
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a21      	ldr	r2, [pc, #132]	@ (800289c <HAL_RTC_GetDate+0x98>)
 8002818:	4013      	ands	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	0c1b      	lsrs	r3, r3, #16
 8002820:	b2da      	uxtb	r2, r3
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	0a1b      	lsrs	r3, r3, #8
 800282a:	b2db      	uxtb	r3, r3
 800282c:	221f      	movs	r2, #31
 800282e:	4013      	ands	r3, r2
 8002830:	b2da      	uxtb	r2, r3
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	b2db      	uxtb	r3, r3
 800283a:	223f      	movs	r2, #63	@ 0x3f
 800283c:	4013      	ands	r3, r2
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	0b5b      	lsrs	r3, r3, #13
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2207      	movs	r2, #7
 800284c:	4013      	ands	r3, r2
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d11a      	bne.n	8002890 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	78db      	ldrb	r3, [r3, #3]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 fa82 	bl	8002d68 <RTC_Bcd2ToByte>
 8002864:	0003      	movs	r3, r0
 8002866:	001a      	movs	r2, r3
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	785b      	ldrb	r3, [r3, #1]
 8002870:	0018      	movs	r0, r3
 8002872:	f000 fa79 	bl	8002d68 <RTC_Bcd2ToByte>
 8002876:	0003      	movs	r3, r0
 8002878:	001a      	movs	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	789b      	ldrb	r3, [r3, #2]
 8002882:	0018      	movs	r0, r3
 8002884:	f000 fa70 	bl	8002d68 <RTC_Bcd2ToByte>
 8002888:	0003      	movs	r3, r0
 800288a:	001a      	movs	r2, r3
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002890:	2300      	movs	r3, #0
}
 8002892:	0018      	movs	r0, r3
 8002894:	46bd      	mov	sp, r7
 8002896:	b006      	add	sp, #24
 8002898:	bd80      	pop	{r7, pc}
 800289a:	46c0      	nop			@ (mov r8, r8)
 800289c:	00ffff3f 	.word	0x00ffff3f

080028a0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80028a0:	b590      	push	{r4, r7, lr}
 80028a2:	b089      	sub	sp, #36	@ 0x24
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2224      	movs	r2, #36	@ 0x24
 80028b0:	5c9b      	ldrb	r3, [r3, r2]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d101      	bne.n	80028ba <HAL_RTC_SetAlarm_IT+0x1a>
 80028b6:	2302      	movs	r3, #2
 80028b8:	e0d6      	b.n	8002a68 <HAL_RTC_SetAlarm_IT+0x1c8>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2224      	movs	r2, #36	@ 0x24
 80028be:	2101      	movs	r1, #1
 80028c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	2225      	movs	r2, #37	@ 0x25
 80028c6:	2102      	movs	r1, #2
 80028c8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d136      	bne.n	800293e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2240      	movs	r2, #64	@ 0x40
 80028d8:	4013      	ands	r3, r2
 80028da:	d102      	bne.n	80028e2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	2200      	movs	r2, #0
 80028e0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	0018      	movs	r0, r3
 80028e8:	f000 fa16 	bl	8002d18 <RTC_ByteToBcd2>
 80028ec:	0003      	movs	r3, r0
 80028ee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	785b      	ldrb	r3, [r3, #1]
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fa0f 	bl	8002d18 <RTC_ByteToBcd2>
 80028fa:	0003      	movs	r3, r0
 80028fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80028fe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	789b      	ldrb	r3, [r3, #2]
 8002904:	0018      	movs	r0, r3
 8002906:	f000 fa07 	bl	8002d18 <RTC_ByteToBcd2>
 800290a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800290c:	0022      	movs	r2, r4
 800290e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	78db      	ldrb	r3, [r3, #3]
 8002914:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002916:	431a      	orrs	r2, r3
 8002918:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	2220      	movs	r2, #32
 800291e:	5c9b      	ldrb	r3, [r3, r2]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 f9f9 	bl	8002d18 <RTC_ByteToBcd2>
 8002926:	0003      	movs	r3, r0
 8002928:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800292a:	0022      	movs	r2, r4
 800292c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800292e:	68bb      	ldr	r3, [r7, #8]
 8002930:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002932:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002938:	4313      	orrs	r3, r2
 800293a:	61fb      	str	r3, [r7, #28]
 800293c:	e022      	b.n	8002984 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2240      	movs	r2, #64	@ 0x40
 8002946:	4013      	ands	r3, r2
 8002948:	d102      	bne.n	8002950 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	785b      	ldrb	r3, [r3, #1]
 800295a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800295c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002962:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	78db      	ldrb	r3, [r3, #3]
 8002968:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800296a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2120      	movs	r1, #32
 8002970:	5c5b      	ldrb	r3, [r3, r1]
 8002972:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002974:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800297a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002980:	4313      	orrs	r3, r2
 8002982:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	22ca      	movs	r2, #202	@ 0xca
 8002996:	625a      	str	r2, [r3, #36]	@ 0x24
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2253      	movs	r2, #83	@ 0x53
 800299e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029a4:	2380      	movs	r3, #128	@ 0x80
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d147      	bne.n	8002a3c <HAL_RTC_SetAlarm_IT+0x19c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	699a      	ldr	r2, [r3, #24]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	492e      	ldr	r1, [pc, #184]	@ (8002a70 <HAL_RTC_SetAlarm_IT+0x1d0>)
 80029b8:	400a      	ands	r2, r1
 80029ba:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2201      	movs	r2, #1
 80029c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80029c4:	f7fe fcfa 	bl	80013bc <HAL_GetTick>
 80029c8:	0003      	movs	r3, r0
 80029ca:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80029cc:	e016      	b.n	80029fc <HAL_RTC_SetAlarm_IT+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80029ce:	f7fe fcf5 	bl	80013bc <HAL_GetTick>
 80029d2:	0002      	movs	r2, r0
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	1ad2      	subs	r2, r2, r3
 80029d8:	23fa      	movs	r3, #250	@ 0xfa
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	429a      	cmp	r2, r3
 80029de:	d90d      	bls.n	80029fc <HAL_RTC_SetAlarm_IT+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	22ff      	movs	r2, #255	@ 0xff
 80029e6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2225      	movs	r2, #37	@ 0x25
 80029ec:	2103      	movs	r1, #3
 80029ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2224      	movs	r2, #36	@ 0x24
 80029f4:	2100      	movs	r1, #0
 80029f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80029f8:	2303      	movs	r3, #3
 80029fa:	e035      	b.n	8002a68 <HAL_RTC_SetAlarm_IT+0x1c8>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	4013      	ands	r3, r2
 8002a06:	d0e2      	beq.n	80029ce <HAL_RTC_SetAlarm_IT+0x12e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	69fa      	ldr	r2, [r7, #28]
 8002a0e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699a      	ldr	r2, [r3, #24]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2180      	movs	r1, #128	@ 0x80
 8002a24:	0049      	lsls	r1, r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	699a      	ldr	r2, [r3, #24]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	2180      	movs	r1, #128	@ 0x80
 8002a36:	0149      	lsls	r1, r1, #5
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a74 <HAL_RTC_SetAlarm_IT+0x1d4>)
 8002a3e:	2380      	movs	r3, #128	@ 0x80
 8002a40:	58d3      	ldr	r3, [r2, r3]
 8002a42:	490c      	ldr	r1, [pc, #48]	@ (8002a74 <HAL_RTC_SetAlarm_IT+0x1d4>)
 8002a44:	2280      	movs	r2, #128	@ 0x80
 8002a46:	0312      	lsls	r2, r2, #12
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	2280      	movs	r2, #128	@ 0x80
 8002a4c:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	22ff      	movs	r2, #255	@ 0xff
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2225      	movs	r2, #37	@ 0x25
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2224      	movs	r2, #36	@ 0x24
 8002a62:	2100      	movs	r1, #0
 8002a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
}
 8002a68:	0018      	movs	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	b009      	add	sp, #36	@ 0x24
 8002a6e:	bd90      	pop	{r4, r7, pc}
 8002a70:	fffffeff 	.word	0xfffffeff
 8002a74:	40021800 	.word	0x40021800

08002a78 <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2224      	movs	r2, #36	@ 0x24
 8002a86:	5c9b      	ldrb	r3, [r3, r2]
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_RTC_DeactivateAlarm+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e053      	b.n	8002b38 <HAL_RTC_DeactivateAlarm+0xc0>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2224      	movs	r2, #36	@ 0x24
 8002a94:	2101      	movs	r1, #1
 8002a96:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2225      	movs	r2, #37	@ 0x25
 8002a9c:	2102      	movs	r1, #2
 8002a9e:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	22ca      	movs	r2, #202	@ 0xca
 8002aa6:	625a      	str	r2, [r3, #36]	@ 0x24
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2253      	movs	r2, #83	@ 0x53
 8002aae:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 8002ab0:	683a      	ldr	r2, [r7, #0]
 8002ab2:	2380      	movs	r3, #128	@ 0x80
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d131      	bne.n	8002b1e <HAL_RTC_DeactivateAlarm+0xa6>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	699a      	ldr	r2, [r3, #24]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	491e      	ldr	r1, [pc, #120]	@ (8002b40 <HAL_RTC_DeactivateAlarm+0xc8>)
 8002ac6:	400a      	ands	r2, r1
 8002ac8:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	699a      	ldr	r2, [r3, #24]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	491b      	ldr	r1, [pc, #108]	@ (8002b44 <HAL_RTC_DeactivateAlarm+0xcc>)
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8002ada:	f7fe fc6f 	bl	80013bc <HAL_GetTick>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002ae2:	e016      	b.n	8002b12 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002ae4:	f7fe fc6a 	bl	80013bc <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad2      	subs	r2, r2, r3
 8002aee:	23fa      	movs	r3, #250	@ 0xfa
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d90d      	bls.n	8002b12 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	22ff      	movs	r2, #255	@ 0xff
 8002afc:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2225      	movs	r2, #37	@ 0x25
 8002b02:	2103      	movs	r1, #3
 8002b04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2224      	movs	r2, #36	@ 0x24
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	e012      	b.n	8002b38 <HAL_RTC_DeactivateAlarm+0xc0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	2201      	movs	r2, #1
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	d0e2      	beq.n	8002ae4 <HAL_RTC_DeactivateAlarm+0x6c>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	22ff      	movs	r2, #255	@ 0xff
 8002b24:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2225      	movs	r2, #37	@ 0x25
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2224      	movs	r2, #36	@ 0x24
 8002b32:	2100      	movs	r1, #0
 8002b34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	0018      	movs	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b004      	add	sp, #16
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	fffffeff 	.word	0xfffffeff
 8002b44:	ffffefff 	.word	0xffffefff

08002b48 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699a      	ldr	r2, [r3, #24]
 8002b56:	2380      	movs	r3, #128	@ 0x80
 8002b58:	015b      	lsls	r3, r3, #5
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	d00d      	beq.n	8002b7a <HAL_RTC_AlarmIRQHandler+0x32>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b64:	2201      	movs	r2, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	d007      	beq.n	8002b7a <HAL_RTC_AlarmIRQHandler+0x32>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	0018      	movs	r0, r3
 8002b76:	f000 f808 	bl	8002b8a <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2225      	movs	r2, #37	@ 0x25
 8002b7e:	2101      	movs	r1, #1
 8002b80:	5499      	strb	r1, [r3, r2]
}
 8002b82:	46c0      	nop			@ (mov r8, r8)
 8002b84:	46bd      	mov	sp, r7
 8002b86:	b002      	add	sp, #8
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b082      	sub	sp, #8
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002b92:	46c0      	nop			@ (mov r8, r8)
 8002b94:	46bd      	mov	sp, r7
 8002b96:	b002      	add	sp, #8
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002ba4:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <HAL_RTC_WaitForSynchro+0x60>)
 8002ba6:	68da      	ldr	r2, [r3, #12]
 8002ba8:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <HAL_RTC_WaitForSynchro+0x60>)
 8002baa:	2120      	movs	r1, #32
 8002bac:	438a      	bics	r2, r1
 8002bae:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002bb0:	f7fe fc04 	bl	80013bc <HAL_GetTick>
 8002bb4:	0003      	movs	r3, r0
 8002bb6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002bb8:	e013      	b.n	8002be2 <HAL_RTC_WaitForSynchro+0x46>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bba:	f7fe fbff 	bl	80013bc <HAL_GetTick>
 8002bbe:	0002      	movs	r2, r0
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	1ad2      	subs	r2, r2, r3
 8002bc4:	23fa      	movs	r3, #250	@ 0xfa
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d90a      	bls.n	8002be2 <HAL_RTC_WaitForSynchro+0x46>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002bfc <HAL_RTC_WaitForSynchro+0x60>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d10b      	bne.n	8002bee <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2225      	movs	r2, #37	@ 0x25
 8002bda:	2103      	movs	r1, #3
 8002bdc:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e007      	b.n	8002bf2 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_RTC_WaitForSynchro+0x60>)
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	2220      	movs	r2, #32
 8002be8:	4013      	ands	r3, r2
 8002bea:	d0e6      	beq.n	8002bba <HAL_RTC_WaitForSynchro+0x1e>
 8002bec:	e000      	b.n	8002bf0 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8002bee:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	b004      	add	sp, #16
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	46c0      	nop			@ (mov r8, r8)
 8002bfc:	40002800 	.word	0x40002800

08002c00 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b084      	sub	sp, #16
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c08:	230f      	movs	r3, #15
 8002c0a:	18fb      	adds	r3, r7, r3
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002c10:	4b1e      	ldr	r3, [pc, #120]	@ (8002c8c <RTC_EnterInitMode+0x8c>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	2240      	movs	r2, #64	@ 0x40
 8002c16:	4013      	ands	r3, r2
 8002c18:	d130      	bne.n	8002c7c <RTC_EnterInitMode+0x7c>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	@ (8002c8c <RTC_EnterInitMode+0x8c>)
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	4b1b      	ldr	r3, [pc, #108]	@ (8002c8c <RTC_EnterInitMode+0x8c>)
 8002c20:	2180      	movs	r1, #128	@ 0x80
 8002c22:	430a      	orrs	r2, r1
 8002c24:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c26:	f7fe fbc9 	bl	80013bc <HAL_GetTick>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c2e:	e019      	b.n	8002c64 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002c30:	f7fe fbc4 	bl	80013bc <HAL_GetTick>
 8002c34:	0002      	movs	r2, r0
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	1ad2      	subs	r2, r2, r3
 8002c3a:	200f      	movs	r0, #15
 8002c3c:	183b      	adds	r3, r7, r0
 8002c3e:	1839      	adds	r1, r7, r0
 8002c40:	7809      	ldrb	r1, [r1, #0]
 8002c42:	7019      	strb	r1, [r3, #0]
 8002c44:	23fa      	movs	r3, #250	@ 0xfa
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d90b      	bls.n	8002c64 <RTC_EnterInitMode+0x64>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8002c8c <RTC_EnterInitMode+0x8c>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2240      	movs	r2, #64	@ 0x40
 8002c52:	4013      	ands	r3, r2
 8002c54:	d111      	bne.n	8002c7a <RTC_EnterInitMode+0x7a>
        {
          status = HAL_TIMEOUT;
 8002c56:	183b      	adds	r3, r7, r0
 8002c58:	2203      	movs	r2, #3
 8002c5a:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2225      	movs	r2, #37	@ 0x25
 8002c60:	2103      	movs	r1, #3
 8002c62:	5499      	strb	r1, [r3, r2]
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c64:	4b09      	ldr	r3, [pc, #36]	@ (8002c8c <RTC_EnterInitMode+0x8c>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	2240      	movs	r2, #64	@ 0x40
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d106      	bne.n	8002c7c <RTC_EnterInitMode+0x7c>
 8002c6e:	230f      	movs	r3, #15
 8002c70:	18fb      	adds	r3, r7, r3
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b03      	cmp	r3, #3
 8002c76:	d1db      	bne.n	8002c30 <RTC_EnterInitMode+0x30>
 8002c78:	e000      	b.n	8002c7c <RTC_EnterInitMode+0x7c>
        }
        else
        {
          break;
 8002c7a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return status;
 8002c7c:	230f      	movs	r3, #15
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	781b      	ldrb	r3, [r3, #0]
}
 8002c82:	0018      	movs	r0, r3
 8002c84:	46bd      	mov	sp, r7
 8002c86:	b004      	add	sp, #16
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	40002800 	.word	0x40002800

08002c90 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c90:	b590      	push	{r4, r7, lr}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c98:	240f      	movs	r4, #15
 8002c9a:	193b      	adds	r3, r7, r4
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8002d14 <RTC_ExitInitMode+0x84>)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <RTC_ExitInitMode+0x84>)
 8002ca6:	2180      	movs	r1, #128	@ 0x80
 8002ca8:	438a      	bics	r2, r1
 8002caa:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002cac:	4b19      	ldr	r3, [pc, #100]	@ (8002d14 <RTC_ExitInitMode+0x84>)
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	2220      	movs	r2, #32
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d10d      	bne.n	8002cd2 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	0018      	movs	r0, r3
 8002cba:	f7ff ff6f 	bl	8002b9c <HAL_RTC_WaitForSynchro>
 8002cbe:	1e03      	subs	r3, r0, #0
 8002cc0:	d021      	beq.n	8002d06 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2225      	movs	r2, #37	@ 0x25
 8002cc6:	2103      	movs	r1, #3
 8002cc8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002cca:	193b      	adds	r3, r7, r4
 8002ccc:	2203      	movs	r2, #3
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e019      	b.n	8002d06 <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002cd2:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <RTC_ExitInitMode+0x84>)
 8002cd4:	699a      	ldr	r2, [r3, #24]
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <RTC_ExitInitMode+0x84>)
 8002cd8:	2120      	movs	r1, #32
 8002cda:	438a      	bics	r2, r1
 8002cdc:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f7ff ff5b 	bl	8002b9c <HAL_RTC_WaitForSynchro>
 8002ce6:	1e03      	subs	r3, r0, #0
 8002ce8:	d007      	beq.n	8002cfa <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2225      	movs	r2, #37	@ 0x25
 8002cee:	2103      	movs	r1, #3
 8002cf0:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002cf2:	230f      	movs	r3, #15
 8002cf4:	18fb      	adds	r3, r7, r3
 8002cf6:	2203      	movs	r2, #3
 8002cf8:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002cfa:	4b06      	ldr	r3, [pc, #24]	@ (8002d14 <RTC_ExitInitMode+0x84>)
 8002cfc:	699a      	ldr	r2, [r3, #24]
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <RTC_ExitInitMode+0x84>)
 8002d00:	2120      	movs	r1, #32
 8002d02:	430a      	orrs	r2, r1
 8002d04:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002d06:	230f      	movs	r3, #15
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	781b      	ldrb	r3, [r3, #0]
}
 8002d0c:	0018      	movs	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	b005      	add	sp, #20
 8002d12:	bd90      	pop	{r4, r7, pc}
 8002d14:	40002800 	.word	0x40002800

08002d18 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	0002      	movs	r2, r0
 8002d20:	1dfb      	adds	r3, r7, #7
 8002d22:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002d24:	2300      	movs	r3, #0
 8002d26:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002d28:	230b      	movs	r3, #11
 8002d2a:	18fb      	adds	r3, r7, r3
 8002d2c:	1dfa      	adds	r2, r7, #7
 8002d2e:	7812      	ldrb	r2, [r2, #0]
 8002d30:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002d32:	e008      	b.n	8002d46 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3301      	adds	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002d3a:	220b      	movs	r2, #11
 8002d3c:	18bb      	adds	r3, r7, r2
 8002d3e:	18ba      	adds	r2, r7, r2
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	3a0a      	subs	r2, #10
 8002d44:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002d46:	210b      	movs	r1, #11
 8002d48:	187b      	adds	r3, r7, r1
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b09      	cmp	r3, #9
 8002d4e:	d8f1      	bhi.n	8002d34 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	187b      	adds	r3, r7, r1
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	b2db      	uxtb	r3, r3
}
 8002d60:	0018      	movs	r0, r3
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b004      	add	sp, #16
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	0002      	movs	r2, r0
 8002d70:	1dfb      	adds	r3, r7, #7
 8002d72:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002d74:	1dfb      	adds	r3, r7, #7
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	001a      	movs	r2, r3
 8002d7e:	0013      	movs	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	189b      	adds	r3, r3, r2
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	1dfb      	adds	r3, r7, #7
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	210f      	movs	r1, #15
 8002d92:	400b      	ands	r3, r1
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	18d3      	adds	r3, r2, r3
 8002d98:	b2db      	uxtb	r3, r3
}
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	b004      	add	sp, #16
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e046      	b.n	8002e44 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2288      	movs	r2, #136	@ 0x88
 8002dba:	589b      	ldr	r3, [r3, r2]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d107      	bne.n	8002dd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2284      	movs	r2, #132	@ 0x84
 8002dc4:	2100      	movs	r1, #0
 8002dc6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	0018      	movs	r0, r3
 8002dcc:	f7fe f928 	bl	8001020 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2288      	movs	r2, #136	@ 0x88
 8002dd4:	2124      	movs	r1, #36	@ 0x24
 8002dd6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2101      	movs	r1, #1
 8002de4:	438a      	bics	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 fe10 	bl	8003a18 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 fc8e 	bl	800371c <UART_SetConfig>
 8002e00:	0003      	movs	r3, r0
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d101      	bne.n	8002e0a <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e01c      	b.n	8002e44 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	490d      	ldr	r1, [pc, #52]	@ (8002e4c <HAL_UART_Init+0xa8>)
 8002e16:	400a      	ands	r2, r1
 8002e18:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	212a      	movs	r1, #42	@ 0x2a
 8002e26:	438a      	bics	r2, r1
 8002e28:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2101      	movs	r1, #1
 8002e36:	430a      	orrs	r2, r1
 8002e38:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	f000 fe9f 	bl	8003b80 <UART_CheckIdleState>
 8002e42:	0003      	movs	r3, r0
}
 8002e44:	0018      	movs	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	ffffb7ff 	.word	0xffffb7ff

08002e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	@ 0x28
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	1dbb      	adds	r3, r7, #6
 8002e5e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2288      	movs	r2, #136	@ 0x88
 8002e64:	589b      	ldr	r3, [r3, r2]
 8002e66:	2b20      	cmp	r3, #32
 8002e68:	d000      	beq.n	8002e6c <HAL_UART_Transmit+0x1c>
 8002e6a:	e090      	b.n	8002f8e <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d003      	beq.n	8002e7a <HAL_UART_Transmit+0x2a>
 8002e72:	1dbb      	adds	r3, r7, #6
 8002e74:	881b      	ldrh	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e088      	b.n	8002f90 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	689a      	ldr	r2, [r3, #8]
 8002e82:	2380      	movs	r3, #128	@ 0x80
 8002e84:	015b      	lsls	r3, r3, #5
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d109      	bne.n	8002e9e <HAL_UART_Transmit+0x4e>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	691b      	ldr	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d105      	bne.n	8002e9e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2201      	movs	r2, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	d001      	beq.n	8002e9e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e078      	b.n	8002f90 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2290      	movs	r2, #144	@ 0x90
 8002ea2:	2100      	movs	r1, #0
 8002ea4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2288      	movs	r2, #136	@ 0x88
 8002eaa:	2121      	movs	r1, #33	@ 0x21
 8002eac:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eae:	f7fe fa85 	bl	80013bc <HAL_GetTick>
 8002eb2:	0003      	movs	r3, r0
 8002eb4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	1dba      	adds	r2, r7, #6
 8002eba:	2154      	movs	r1, #84	@ 0x54
 8002ebc:	8812      	ldrh	r2, [r2, #0]
 8002ebe:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	1dba      	adds	r2, r7, #6
 8002ec4:	2156      	movs	r1, #86	@ 0x56
 8002ec6:	8812      	ldrh	r2, [r2, #0]
 8002ec8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	2380      	movs	r3, #128	@ 0x80
 8002ed0:	015b      	lsls	r3, r3, #5
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d108      	bne.n	8002ee8 <HAL_UART_Transmit+0x98>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d104      	bne.n	8002ee8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	61bb      	str	r3, [r7, #24]
 8002ee6:	e003      	b.n	8002ef0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002eec:	2300      	movs	r3, #0
 8002eee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef0:	e030      	b.n	8002f54 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	9300      	str	r3, [sp, #0]
 8002efa:	0013      	movs	r3, r2
 8002efc:	2200      	movs	r2, #0
 8002efe:	2180      	movs	r1, #128	@ 0x80
 8002f00:	f000 fee8 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 8002f04:	1e03      	subs	r3, r0, #0
 8002f06:	d005      	beq.n	8002f14 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2288      	movs	r2, #136	@ 0x88
 8002f0c:	2120      	movs	r1, #32
 8002f0e:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e03d      	b.n	8002f90 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d10b      	bne.n	8002f32 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	881b      	ldrh	r3, [r3, #0]
 8002f1e:	001a      	movs	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	05d2      	lsls	r2, r2, #23
 8002f26:	0dd2      	lsrs	r2, r2, #23
 8002f28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	3302      	adds	r3, #2
 8002f2e:	61bb      	str	r3, [r7, #24]
 8002f30:	e007      	b.n	8002f42 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	781a      	ldrb	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2256      	movs	r2, #86	@ 0x56
 8002f46:	5a9b      	ldrh	r3, [r3, r2]
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b299      	uxth	r1, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2256      	movs	r2, #86	@ 0x56
 8002f52:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2256      	movs	r2, #86	@ 0x56
 8002f58:	5a9b      	ldrh	r3, [r3, r2]
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1c8      	bne.n	8002ef2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f60:	697a      	ldr	r2, [r7, #20]
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	0013      	movs	r3, r2
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2140      	movs	r1, #64	@ 0x40
 8002f6e:	f000 feb1 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 8002f72:	1e03      	subs	r3, r0, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2288      	movs	r2, #136	@ 0x88
 8002f7a:	2120      	movs	r1, #32
 8002f7c:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e006      	b.n	8002f90 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2288      	movs	r2, #136	@ 0x88
 8002f86:	2120      	movs	r1, #32
 8002f88:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	e000      	b.n	8002f90 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002f8e:	2302      	movs	r3, #2
  }
}
 8002f90:	0018      	movs	r0, r3
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b008      	add	sp, #32
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b088      	sub	sp, #32
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	60f8      	str	r0, [r7, #12]
 8002fa0:	60b9      	str	r1, [r7, #8]
 8002fa2:	1dbb      	adds	r3, r7, #6
 8002fa4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	228c      	movs	r2, #140	@ 0x8c
 8002faa:	589b      	ldr	r3, [r3, r2]
 8002fac:	2b20      	cmp	r3, #32
 8002fae:	d145      	bne.n	800303c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_UART_Receive_IT+0x26>
 8002fb6:	1dbb      	adds	r3, r7, #6
 8002fb8:	881b      	ldrh	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e03d      	b.n	800303e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689a      	ldr	r2, [r3, #8]
 8002fc6:	2380      	movs	r3, #128	@ 0x80
 8002fc8:	015b      	lsls	r3, r3, #5
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d109      	bne.n	8002fe2 <HAL_UART_Receive_IT+0x4a>
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	691b      	ldr	r3, [r3, #16]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d105      	bne.n	8002fe2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d001      	beq.n	8002fe2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	e02d      	b.n	800303e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	2380      	movs	r3, #128	@ 0x80
 8002ff0:	041b      	lsls	r3, r3, #16
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d019      	beq.n	800302a <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ff6:	f3ef 8310 	mrs	r3, PRIMASK
 8002ffa:	613b      	str	r3, [r7, #16]
  return(result);
 8002ffc:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ffe:	61fb      	str	r3, [r7, #28]
 8003000:	2301      	movs	r3, #1
 8003002:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f383 8810 	msr	PRIMASK, r3
}
 800300a:	46c0      	nop			@ (mov r8, r8)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2180      	movs	r1, #128	@ 0x80
 8003018:	04c9      	lsls	r1, r1, #19
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	f383 8810 	msr	PRIMASK, r3
}
 8003028:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800302a:	1dbb      	adds	r3, r7, #6
 800302c:	881a      	ldrh	r2, [r3, #0]
 800302e:	68b9      	ldr	r1, [r7, #8]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	0018      	movs	r0, r3
 8003034:	f000 febe 	bl	8003db4 <UART_Start_Receive_IT>
 8003038:	0003      	movs	r3, r0
 800303a:	e000      	b.n	800303e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800303c:	2302      	movs	r3, #2
  }
}
 800303e:	0018      	movs	r0, r3
 8003040:	46bd      	mov	sp, r7
 8003042:	b008      	add	sp, #32
 8003044:	bd80      	pop	{r7, pc}
	...

08003048 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	b0aa      	sub	sp, #168	@ 0xa8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	69db      	ldr	r3, [r3, #28]
 8003056:	22a4      	movs	r2, #164	@ 0xa4
 8003058:	18b9      	adds	r1, r7, r2
 800305a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	20a0      	movs	r0, #160	@ 0xa0
 8003064:	1839      	adds	r1, r7, r0
 8003066:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	249c      	movs	r4, #156	@ 0x9c
 8003070:	1939      	adds	r1, r7, r4
 8003072:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003074:	0011      	movs	r1, r2
 8003076:	18bb      	adds	r3, r7, r2
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4aa2      	ldr	r2, [pc, #648]	@ (8003304 <HAL_UART_IRQHandler+0x2bc>)
 800307c:	4013      	ands	r3, r2
 800307e:	2298      	movs	r2, #152	@ 0x98
 8003080:	18bd      	adds	r5, r7, r2
 8003082:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003084:	18bb      	adds	r3, r7, r2
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11a      	bne.n	80030c2 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800308c:	187b      	adds	r3, r7, r1
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2220      	movs	r2, #32
 8003092:	4013      	ands	r3, r2
 8003094:	d015      	beq.n	80030c2 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003096:	183b      	adds	r3, r7, r0
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2220      	movs	r2, #32
 800309c:	4013      	ands	r3, r2
 800309e:	d105      	bne.n	80030ac <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80030a0:	193b      	adds	r3, r7, r4
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	2380      	movs	r3, #128	@ 0x80
 80030a6:	055b      	lsls	r3, r3, #21
 80030a8:	4013      	ands	r3, r2
 80030aa:	d00a      	beq.n	80030c2 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d100      	bne.n	80030b6 <HAL_UART_IRQHandler+0x6e>
 80030b4:	e2fb      	b.n	80036ae <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	0010      	movs	r0, r2
 80030be:	4798      	blx	r3
      }
      return;
 80030c0:	e2f5      	b.n	80036ae <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80030c2:	2398      	movs	r3, #152	@ 0x98
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d100      	bne.n	80030ce <HAL_UART_IRQHandler+0x86>
 80030cc:	e122      	b.n	8003314 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80030ce:	239c      	movs	r3, #156	@ 0x9c
 80030d0:	18fb      	adds	r3, r7, r3
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a8c      	ldr	r2, [pc, #560]	@ (8003308 <HAL_UART_IRQHandler+0x2c0>)
 80030d6:	4013      	ands	r3, r2
 80030d8:	d106      	bne.n	80030e8 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80030da:	23a0      	movs	r3, #160	@ 0xa0
 80030dc:	18fb      	adds	r3, r7, r3
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a8a      	ldr	r2, [pc, #552]	@ (800330c <HAL_UART_IRQHandler+0x2c4>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	d100      	bne.n	80030e8 <HAL_UART_IRQHandler+0xa0>
 80030e6:	e115      	b.n	8003314 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80030e8:	23a4      	movs	r3, #164	@ 0xa4
 80030ea:	18fb      	adds	r3, r7, r3
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4013      	ands	r3, r2
 80030f2:	d012      	beq.n	800311a <HAL_UART_IRQHandler+0xd2>
 80030f4:	23a0      	movs	r3, #160	@ 0xa0
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	@ 0x80
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4013      	ands	r3, r2
 8003100:	d00b      	beq.n	800311a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2201      	movs	r2, #1
 8003108:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2290      	movs	r2, #144	@ 0x90
 800310e:	589b      	ldr	r3, [r3, r2]
 8003110:	2201      	movs	r2, #1
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2190      	movs	r1, #144	@ 0x90
 8003118:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800311a:	23a4      	movs	r3, #164	@ 0xa4
 800311c:	18fb      	adds	r3, r7, r3
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2202      	movs	r2, #2
 8003122:	4013      	ands	r3, r2
 8003124:	d011      	beq.n	800314a <HAL_UART_IRQHandler+0x102>
 8003126:	239c      	movs	r3, #156	@ 0x9c
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2201      	movs	r2, #1
 800312e:	4013      	ands	r3, r2
 8003130:	d00b      	beq.n	800314a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2202      	movs	r2, #2
 8003138:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2290      	movs	r2, #144	@ 0x90
 800313e:	589b      	ldr	r3, [r3, r2]
 8003140:	2204      	movs	r2, #4
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2190      	movs	r1, #144	@ 0x90
 8003148:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800314a:	23a4      	movs	r3, #164	@ 0xa4
 800314c:	18fb      	adds	r3, r7, r3
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2204      	movs	r2, #4
 8003152:	4013      	ands	r3, r2
 8003154:	d011      	beq.n	800317a <HAL_UART_IRQHandler+0x132>
 8003156:	239c      	movs	r3, #156	@ 0x9c
 8003158:	18fb      	adds	r3, r7, r3
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2201      	movs	r2, #1
 800315e:	4013      	ands	r3, r2
 8003160:	d00b      	beq.n	800317a <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2204      	movs	r2, #4
 8003168:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2290      	movs	r2, #144	@ 0x90
 800316e:	589b      	ldr	r3, [r3, r2]
 8003170:	2202      	movs	r2, #2
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2190      	movs	r1, #144	@ 0x90
 8003178:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800317a:	23a4      	movs	r3, #164	@ 0xa4
 800317c:	18fb      	adds	r3, r7, r3
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2208      	movs	r2, #8
 8003182:	4013      	ands	r3, r2
 8003184:	d017      	beq.n	80031b6 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003186:	23a0      	movs	r3, #160	@ 0xa0
 8003188:	18fb      	adds	r3, r7, r3
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2220      	movs	r2, #32
 800318e:	4013      	ands	r3, r2
 8003190:	d105      	bne.n	800319e <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003192:	239c      	movs	r3, #156	@ 0x9c
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a5b      	ldr	r2, [pc, #364]	@ (8003308 <HAL_UART_IRQHandler+0x2c0>)
 800319a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800319c:	d00b      	beq.n	80031b6 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2208      	movs	r2, #8
 80031a4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2290      	movs	r2, #144	@ 0x90
 80031aa:	589b      	ldr	r3, [r3, r2]
 80031ac:	2208      	movs	r2, #8
 80031ae:	431a      	orrs	r2, r3
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2190      	movs	r1, #144	@ 0x90
 80031b4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80031b6:	23a4      	movs	r3, #164	@ 0xa4
 80031b8:	18fb      	adds	r3, r7, r3
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	2380      	movs	r3, #128	@ 0x80
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	4013      	ands	r3, r2
 80031c2:	d013      	beq.n	80031ec <HAL_UART_IRQHandler+0x1a4>
 80031c4:	23a0      	movs	r3, #160	@ 0xa0
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	2380      	movs	r3, #128	@ 0x80
 80031cc:	04db      	lsls	r3, r3, #19
 80031ce:	4013      	ands	r3, r2
 80031d0:	d00c      	beq.n	80031ec <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2280      	movs	r2, #128	@ 0x80
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2290      	movs	r2, #144	@ 0x90
 80031e0:	589b      	ldr	r3, [r3, r2]
 80031e2:	2220      	movs	r2, #32
 80031e4:	431a      	orrs	r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2190      	movs	r1, #144	@ 0x90
 80031ea:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2290      	movs	r2, #144	@ 0x90
 80031f0:	589b      	ldr	r3, [r3, r2]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d100      	bne.n	80031f8 <HAL_UART_IRQHandler+0x1b0>
 80031f6:	e25c      	b.n	80036b2 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80031f8:	23a4      	movs	r3, #164	@ 0xa4
 80031fa:	18fb      	adds	r3, r7, r3
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2220      	movs	r2, #32
 8003200:	4013      	ands	r3, r2
 8003202:	d015      	beq.n	8003230 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003204:	23a0      	movs	r3, #160	@ 0xa0
 8003206:	18fb      	adds	r3, r7, r3
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2220      	movs	r2, #32
 800320c:	4013      	ands	r3, r2
 800320e:	d106      	bne.n	800321e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003210:	239c      	movs	r3, #156	@ 0x9c
 8003212:	18fb      	adds	r3, r7, r3
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	2380      	movs	r3, #128	@ 0x80
 8003218:	055b      	lsls	r3, r3, #21
 800321a:	4013      	ands	r3, r2
 800321c:	d008      	beq.n	8003230 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003222:	2b00      	cmp	r3, #0
 8003224:	d004      	beq.n	8003230 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	0010      	movs	r0, r2
 800322e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2290      	movs	r2, #144	@ 0x90
 8003234:	589b      	ldr	r3, [r3, r2]
 8003236:	2194      	movs	r1, #148	@ 0x94
 8003238:	187a      	adds	r2, r7, r1
 800323a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	2240      	movs	r2, #64	@ 0x40
 8003244:	4013      	ands	r3, r2
 8003246:	2b40      	cmp	r3, #64	@ 0x40
 8003248:	d004      	beq.n	8003254 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800324a:	187b      	adds	r3, r7, r1
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2228      	movs	r2, #40	@ 0x28
 8003250:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003252:	d04c      	beq.n	80032ee <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	0018      	movs	r0, r3
 8003258:	f000 fed0 	bl	8003ffc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	2240      	movs	r2, #64	@ 0x40
 8003264:	4013      	ands	r3, r2
 8003266:	2b40      	cmp	r3, #64	@ 0x40
 8003268:	d13c      	bne.n	80032e4 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800326a:	f3ef 8310 	mrs	r3, PRIMASK
 800326e:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003270:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003272:	2090      	movs	r0, #144	@ 0x90
 8003274:	183a      	adds	r2, r7, r0
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	2301      	movs	r3, #1
 800327a:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800327e:	f383 8810 	msr	PRIMASK, r3
}
 8003282:	46c0      	nop			@ (mov r8, r8)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2140      	movs	r1, #64	@ 0x40
 8003290:	438a      	bics	r2, r1
 8003292:	609a      	str	r2, [r3, #8]
 8003294:	183b      	adds	r3, r7, r0
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2280      	movs	r2, #128	@ 0x80
 80032a6:	589b      	ldr	r3, [r3, r2]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d016      	beq.n	80032da <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2280      	movs	r2, #128	@ 0x80
 80032b0:	589b      	ldr	r3, [r3, r2]
 80032b2:	4a17      	ldr	r2, [pc, #92]	@ (8003310 <HAL_UART_IRQHandler+0x2c8>)
 80032b4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2280      	movs	r2, #128	@ 0x80
 80032ba:	589b      	ldr	r3, [r3, r2]
 80032bc:	0018      	movs	r0, r3
 80032be:	f7fe f9eb 	bl	8001698 <HAL_DMA_Abort_IT>
 80032c2:	1e03      	subs	r3, r0, #0
 80032c4:	d01c      	beq.n	8003300 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2280      	movs	r2, #128	@ 0x80
 80032ca:	589b      	ldr	r3, [r3, r2]
 80032cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	2180      	movs	r1, #128	@ 0x80
 80032d2:	5852      	ldr	r2, [r2, r1]
 80032d4:	0010      	movs	r0, r2
 80032d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e012      	b.n	8003300 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 fa09 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e2:	e00d      	b.n	8003300 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	0018      	movs	r0, r3
 80032e8:	f000 fa04 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032ec:	e008      	b.n	8003300 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	0018      	movs	r0, r3
 80032f2:	f000 f9ff 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2290      	movs	r2, #144	@ 0x90
 80032fa:	2100      	movs	r1, #0
 80032fc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80032fe:	e1d8      	b.n	80036b2 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003300:	46c0      	nop			@ (mov r8, r8)
    return;
 8003302:	e1d6      	b.n	80036b2 <HAL_UART_IRQHandler+0x66a>
 8003304:	0000080f 	.word	0x0000080f
 8003308:	10000001 	.word	0x10000001
 800330c:	04000120 	.word	0x04000120
 8003310:	080040c9 	.word	0x080040c9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003318:	2b01      	cmp	r3, #1
 800331a:	d000      	beq.n	800331e <HAL_UART_IRQHandler+0x2d6>
 800331c:	e15d      	b.n	80035da <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800331e:	23a4      	movs	r3, #164	@ 0xa4
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2210      	movs	r2, #16
 8003326:	4013      	ands	r3, r2
 8003328:	d100      	bne.n	800332c <HAL_UART_IRQHandler+0x2e4>
 800332a:	e156      	b.n	80035da <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800332c:	23a0      	movs	r3, #160	@ 0xa0
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2210      	movs	r2, #16
 8003334:	4013      	ands	r3, r2
 8003336:	d100      	bne.n	800333a <HAL_UART_IRQHandler+0x2f2>
 8003338:	e14f      	b.n	80035da <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2210      	movs	r2, #16
 8003340:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	2240      	movs	r2, #64	@ 0x40
 800334a:	4013      	ands	r3, r2
 800334c:	2b40      	cmp	r3, #64	@ 0x40
 800334e:	d000      	beq.n	8003352 <HAL_UART_IRQHandler+0x30a>
 8003350:	e0c3      	b.n	80034da <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2280      	movs	r2, #128	@ 0x80
 8003356:	589b      	ldr	r3, [r3, r2]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685a      	ldr	r2, [r3, #4]
 800335c:	217e      	movs	r1, #126	@ 0x7e
 800335e:	187b      	adds	r3, r7, r1
 8003360:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003362:	187b      	adds	r3, r7, r1
 8003364:	881b      	ldrh	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d100      	bne.n	800336c <HAL_UART_IRQHandler+0x324>
 800336a:	e097      	b.n	800349c <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	225c      	movs	r2, #92	@ 0x5c
 8003370:	5a9b      	ldrh	r3, [r3, r2]
 8003372:	187a      	adds	r2, r7, r1
 8003374:	8812      	ldrh	r2, [r2, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d300      	bcc.n	800337c <HAL_UART_IRQHandler+0x334>
 800337a:	e08f      	b.n	800349c <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	187a      	adds	r2, r7, r1
 8003380:	215e      	movs	r1, #94	@ 0x5e
 8003382:	8812      	ldrh	r2, [r2, #0]
 8003384:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2280      	movs	r2, #128	@ 0x80
 800338a:	589b      	ldr	r3, [r3, r2]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2220      	movs	r2, #32
 8003392:	4013      	ands	r3, r2
 8003394:	d170      	bne.n	8003478 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003396:	f3ef 8310 	mrs	r3, PRIMASK
 800339a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800339c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800339e:	67bb      	str	r3, [r7, #120]	@ 0x78
 80033a0:	2301      	movs	r3, #1
 80033a2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033a6:	f383 8810 	msr	PRIMASK, r3
}
 80033aa:	46c0      	nop			@ (mov r8, r8)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	49c4      	ldr	r1, [pc, #784]	@ (80036c8 <HAL_UART_IRQHandler+0x680>)
 80033b8:	400a      	ands	r2, r1
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80033be:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033c2:	f383 8810 	msr	PRIMASK, r3
}
 80033c6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033c8:	f3ef 8310 	mrs	r3, PRIMASK
 80033cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80033ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d0:	677b      	str	r3, [r7, #116]	@ 0x74
 80033d2:	2301      	movs	r3, #1
 80033d4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033d8:	f383 8810 	msr	PRIMASK, r3
}
 80033dc:	46c0      	nop			@ (mov r8, r8)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689a      	ldr	r2, [r3, #8]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	438a      	bics	r2, r1
 80033ec:	609a      	str	r2, [r3, #8]
 80033ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80033f0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033f4:	f383 8810 	msr	PRIMASK, r3
}
 80033f8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033fa:	f3ef 8310 	mrs	r3, PRIMASK
 80033fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003400:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003402:	673b      	str	r3, [r7, #112]	@ 0x70
 8003404:	2301      	movs	r3, #1
 8003406:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003408:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800340a:	f383 8810 	msr	PRIMASK, r3
}
 800340e:	46c0      	nop			@ (mov r8, r8)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	2140      	movs	r1, #64	@ 0x40
 800341c:	438a      	bics	r2, r1
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003422:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003424:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003426:	f383 8810 	msr	PRIMASK, r3
}
 800342a:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	228c      	movs	r2, #140	@ 0x8c
 8003430:	2120      	movs	r1, #32
 8003432:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800343a:	f3ef 8310 	mrs	r3, PRIMASK
 800343e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003440:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003442:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003444:	2301      	movs	r3, #1
 8003446:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003448:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800344a:	f383 8810 	msr	PRIMASK, r3
}
 800344e:	46c0      	nop			@ (mov r8, r8)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2110      	movs	r1, #16
 800345c:	438a      	bics	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003462:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003464:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003466:	f383 8810 	msr	PRIMASK, r3
}
 800346a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2280      	movs	r2, #128	@ 0x80
 8003470:	589b      	ldr	r3, [r3, r2]
 8003472:	0018      	movs	r0, r3
 8003474:	f7fe f8ae 	bl	80015d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2202      	movs	r2, #2
 800347c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	225c      	movs	r2, #92	@ 0x5c
 8003482:	5a9a      	ldrh	r2, [r3, r2]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	215e      	movs	r1, #94	@ 0x5e
 8003488:	5a5b      	ldrh	r3, [r3, r1]
 800348a:	b29b      	uxth	r3, r3
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	b29a      	uxth	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0011      	movs	r1, r2
 8003494:	0018      	movs	r0, r3
 8003496:	f000 f935 	bl	8003704 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800349a:	e10c      	b.n	80036b6 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	225c      	movs	r2, #92	@ 0x5c
 80034a0:	5a9b      	ldrh	r3, [r3, r2]
 80034a2:	227e      	movs	r2, #126	@ 0x7e
 80034a4:	18ba      	adds	r2, r7, r2
 80034a6:	8812      	ldrh	r2, [r2, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d000      	beq.n	80034ae <HAL_UART_IRQHandler+0x466>
 80034ac:	e103      	b.n	80036b6 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2280      	movs	r2, #128	@ 0x80
 80034b2:	589b      	ldr	r3, [r3, r2]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2220      	movs	r2, #32
 80034ba:	4013      	ands	r3, r2
 80034bc:	2b20      	cmp	r3, #32
 80034be:	d000      	beq.n	80034c2 <HAL_UART_IRQHandler+0x47a>
 80034c0:	e0f9      	b.n	80036b6 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	225c      	movs	r2, #92	@ 0x5c
 80034cc:	5a9a      	ldrh	r2, [r3, r2]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	0011      	movs	r1, r2
 80034d2:	0018      	movs	r0, r3
 80034d4:	f000 f916 	bl	8003704 <HAL_UARTEx_RxEventCallback>
      return;
 80034d8:	e0ed      	b.n	80036b6 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	225c      	movs	r2, #92	@ 0x5c
 80034de:	5a99      	ldrh	r1, [r3, r2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	225e      	movs	r2, #94	@ 0x5e
 80034e4:	5a9b      	ldrh	r3, [r3, r2]
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	208e      	movs	r0, #142	@ 0x8e
 80034ea:	183b      	adds	r3, r7, r0
 80034ec:	1a8a      	subs	r2, r1, r2
 80034ee:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	225e      	movs	r2, #94	@ 0x5e
 80034f4:	5a9b      	ldrh	r3, [r3, r2]
 80034f6:	b29b      	uxth	r3, r3
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d100      	bne.n	80034fe <HAL_UART_IRQHandler+0x4b6>
 80034fc:	e0dd      	b.n	80036ba <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80034fe:	183b      	adds	r3, r7, r0
 8003500:	881b      	ldrh	r3, [r3, #0]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d100      	bne.n	8003508 <HAL_UART_IRQHandler+0x4c0>
 8003506:	e0d8      	b.n	80036ba <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003508:	f3ef 8310 	mrs	r3, PRIMASK
 800350c:	60fb      	str	r3, [r7, #12]
  return(result);
 800350e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003510:	2488      	movs	r4, #136	@ 0x88
 8003512:	193a      	adds	r2, r7, r4
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	2301      	movs	r3, #1
 8003518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f383 8810 	msr	PRIMASK, r3
}
 8003520:	46c0      	nop			@ (mov r8, r8)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4967      	ldr	r1, [pc, #412]	@ (80036cc <HAL_UART_IRQHandler+0x684>)
 800352e:	400a      	ands	r2, r1
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	193b      	adds	r3, r7, r4
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f383 8810 	msr	PRIMASK, r3
}
 800353e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003540:	f3ef 8310 	mrs	r3, PRIMASK
 8003544:	61bb      	str	r3, [r7, #24]
  return(result);
 8003546:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003548:	2484      	movs	r4, #132	@ 0x84
 800354a:	193a      	adds	r2, r7, r4
 800354c:	6013      	str	r3, [r2, #0]
 800354e:	2301      	movs	r3, #1
 8003550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	f383 8810 	msr	PRIMASK, r3
}
 8003558:	46c0      	nop			@ (mov r8, r8)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	495a      	ldr	r1, [pc, #360]	@ (80036d0 <HAL_UART_IRQHandler+0x688>)
 8003566:	400a      	ands	r2, r1
 8003568:	609a      	str	r2, [r3, #8]
 800356a:	193b      	adds	r3, r7, r4
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f383 8810 	msr	PRIMASK, r3
}
 8003576:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	228c      	movs	r2, #140	@ 0x8c
 800357c:	2120      	movs	r1, #32
 800357e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800358c:	f3ef 8310 	mrs	r3, PRIMASK
 8003590:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003594:	2480      	movs	r4, #128	@ 0x80
 8003596:	193a      	adds	r2, r7, r4
 8003598:	6013      	str	r3, [r2, #0]
 800359a:	2301      	movs	r3, #1
 800359c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035a0:	f383 8810 	msr	PRIMASK, r3
}
 80035a4:	46c0      	nop			@ (mov r8, r8)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2110      	movs	r1, #16
 80035b2:	438a      	bics	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	193b      	adds	r3, r7, r4
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035be:	f383 8810 	msr	PRIMASK, r3
}
 80035c2:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035ca:	183b      	adds	r3, r7, r0
 80035cc:	881a      	ldrh	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	0011      	movs	r1, r2
 80035d2:	0018      	movs	r0, r3
 80035d4:	f000 f896 	bl	8003704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035d8:	e06f      	b.n	80036ba <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035da:	23a4      	movs	r3, #164	@ 0xa4
 80035dc:	18fb      	adds	r3, r7, r3
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	2380      	movs	r3, #128	@ 0x80
 80035e2:	035b      	lsls	r3, r3, #13
 80035e4:	4013      	ands	r3, r2
 80035e6:	d010      	beq.n	800360a <HAL_UART_IRQHandler+0x5c2>
 80035e8:	239c      	movs	r3, #156	@ 0x9c
 80035ea:	18fb      	adds	r3, r7, r3
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	03db      	lsls	r3, r3, #15
 80035f2:	4013      	ands	r3, r2
 80035f4:	d009      	beq.n	800360a <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2280      	movs	r2, #128	@ 0x80
 80035fc:	0352      	lsls	r2, r2, #13
 80035fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	0018      	movs	r0, r3
 8003604:	f001 fa9c 	bl	8004b40 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003608:	e05a      	b.n	80036c0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800360a:	23a4      	movs	r3, #164	@ 0xa4
 800360c:	18fb      	adds	r3, r7, r3
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2280      	movs	r2, #128	@ 0x80
 8003612:	4013      	ands	r3, r2
 8003614:	d016      	beq.n	8003644 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003616:	23a0      	movs	r3, #160	@ 0xa0
 8003618:	18fb      	adds	r3, r7, r3
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2280      	movs	r2, #128	@ 0x80
 800361e:	4013      	ands	r3, r2
 8003620:	d106      	bne.n	8003630 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003622:	239c      	movs	r3, #156	@ 0x9c
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	2380      	movs	r3, #128	@ 0x80
 800362a:	041b      	lsls	r3, r3, #16
 800362c:	4013      	ands	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003634:	2b00      	cmp	r3, #0
 8003636:	d042      	beq.n	80036be <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	0010      	movs	r0, r2
 8003640:	4798      	blx	r3
    }
    return;
 8003642:	e03c      	b.n	80036be <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003644:	23a4      	movs	r3, #164	@ 0xa4
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2240      	movs	r2, #64	@ 0x40
 800364c:	4013      	ands	r3, r2
 800364e:	d00a      	beq.n	8003666 <HAL_UART_IRQHandler+0x61e>
 8003650:	23a0      	movs	r3, #160	@ 0xa0
 8003652:	18fb      	adds	r3, r7, r3
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2240      	movs	r2, #64	@ 0x40
 8003658:	4013      	ands	r3, r2
 800365a:	d004      	beq.n	8003666 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	0018      	movs	r0, r3
 8003660:	f000 fd49 	bl	80040f6 <UART_EndTransmit_IT>
    return;
 8003664:	e02c      	b.n	80036c0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003666:	23a4      	movs	r3, #164	@ 0xa4
 8003668:	18fb      	adds	r3, r7, r3
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	2380      	movs	r3, #128	@ 0x80
 800366e:	041b      	lsls	r3, r3, #16
 8003670:	4013      	ands	r3, r2
 8003672:	d00b      	beq.n	800368c <HAL_UART_IRQHandler+0x644>
 8003674:	23a0      	movs	r3, #160	@ 0xa0
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	2380      	movs	r3, #128	@ 0x80
 800367c:	05db      	lsls	r3, r3, #23
 800367e:	4013      	ands	r3, r2
 8003680:	d004      	beq.n	800368c <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	0018      	movs	r0, r3
 8003686:	f001 fa6b 	bl	8004b60 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800368a:	e019      	b.n	80036c0 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800368c:	23a4      	movs	r3, #164	@ 0xa4
 800368e:	18fb      	adds	r3, r7, r3
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	2380      	movs	r3, #128	@ 0x80
 8003694:	045b      	lsls	r3, r3, #17
 8003696:	4013      	ands	r3, r2
 8003698:	d012      	beq.n	80036c0 <HAL_UART_IRQHandler+0x678>
 800369a:	23a0      	movs	r3, #160	@ 0xa0
 800369c:	18fb      	adds	r3, r7, r3
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	da0d      	bge.n	80036c0 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	0018      	movs	r0, r3
 80036a8:	f001 fa52 	bl	8004b50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036ac:	e008      	b.n	80036c0 <HAL_UART_IRQHandler+0x678>
      return;
 80036ae:	46c0      	nop			@ (mov r8, r8)
 80036b0:	e006      	b.n	80036c0 <HAL_UART_IRQHandler+0x678>
    return;
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	e004      	b.n	80036c0 <HAL_UART_IRQHandler+0x678>
      return;
 80036b6:	46c0      	nop			@ (mov r8, r8)
 80036b8:	e002      	b.n	80036c0 <HAL_UART_IRQHandler+0x678>
      return;
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	e000      	b.n	80036c0 <HAL_UART_IRQHandler+0x678>
    return;
 80036be:	46c0      	nop			@ (mov r8, r8)
  }
}
 80036c0:	46bd      	mov	sp, r7
 80036c2:	b02a      	add	sp, #168	@ 0xa8
 80036c4:	bdb0      	pop	{r4, r5, r7, pc}
 80036c6:	46c0      	nop			@ (mov r8, r8)
 80036c8:	fffffeff 	.word	0xfffffeff
 80036cc:	fffffedf 	.word	0xfffffedf
 80036d0:	effffffe 	.word	0xeffffffe

080036d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036dc:	46c0      	nop			@ (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	000a      	movs	r2, r1
 800370e:	1cbb      	adds	r3, r7, #2
 8003710:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003712:	46c0      	nop			@ (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003724:	231e      	movs	r3, #30
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4aab      	ldr	r2, [pc, #684]	@ (80039f8 <UART_SetConfig+0x2dc>)
 800374c:	4013      	ands	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	430a      	orrs	r2, r1
 8003758:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4aa6      	ldr	r2, [pc, #664]	@ (80039fc <UART_SetConfig+0x2e0>)
 8003762:	4013      	ands	r3, r2
 8003764:	0019      	movs	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4a9d      	ldr	r2, [pc, #628]	@ (8003a00 <UART_SetConfig+0x2e4>)
 800378a:	4013      	ands	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800379e:	220f      	movs	r2, #15
 80037a0:	4393      	bics	r3, r2
 80037a2:	0019      	movs	r1, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a93      	ldr	r2, [pc, #588]	@ (8003a04 <UART_SetConfig+0x2e8>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d127      	bne.n	800380a <UART_SetConfig+0xee>
 80037ba:	4b93      	ldr	r3, [pc, #588]	@ (8003a08 <UART_SetConfig+0x2ec>)
 80037bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037be:	2203      	movs	r2, #3
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b03      	cmp	r3, #3
 80037c4:	d017      	beq.n	80037f6 <UART_SetConfig+0xda>
 80037c6:	d81b      	bhi.n	8003800 <UART_SetConfig+0xe4>
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d00a      	beq.n	80037e2 <UART_SetConfig+0xc6>
 80037cc:	d818      	bhi.n	8003800 <UART_SetConfig+0xe4>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <UART_SetConfig+0xbc>
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d00a      	beq.n	80037ec <UART_SetConfig+0xd0>
 80037d6:	e013      	b.n	8003800 <UART_SetConfig+0xe4>
 80037d8:	231f      	movs	r3, #31
 80037da:	18fb      	adds	r3, r7, r3
 80037dc:	2200      	movs	r2, #0
 80037de:	701a      	strb	r2, [r3, #0]
 80037e0:	e021      	b.n	8003826 <UART_SetConfig+0x10a>
 80037e2:	231f      	movs	r3, #31
 80037e4:	18fb      	adds	r3, r7, r3
 80037e6:	2202      	movs	r2, #2
 80037e8:	701a      	strb	r2, [r3, #0]
 80037ea:	e01c      	b.n	8003826 <UART_SetConfig+0x10a>
 80037ec:	231f      	movs	r3, #31
 80037ee:	18fb      	adds	r3, r7, r3
 80037f0:	2204      	movs	r2, #4
 80037f2:	701a      	strb	r2, [r3, #0]
 80037f4:	e017      	b.n	8003826 <UART_SetConfig+0x10a>
 80037f6:	231f      	movs	r3, #31
 80037f8:	18fb      	adds	r3, r7, r3
 80037fa:	2208      	movs	r2, #8
 80037fc:	701a      	strb	r2, [r3, #0]
 80037fe:	e012      	b.n	8003826 <UART_SetConfig+0x10a>
 8003800:	231f      	movs	r3, #31
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	2210      	movs	r2, #16
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	e00d      	b.n	8003826 <UART_SetConfig+0x10a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a7f      	ldr	r2, [pc, #508]	@ (8003a0c <UART_SetConfig+0x2f0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d104      	bne.n	800381e <UART_SetConfig+0x102>
 8003814:	231f      	movs	r3, #31
 8003816:	18fb      	adds	r3, r7, r3
 8003818:	2200      	movs	r2, #0
 800381a:	701a      	strb	r2, [r3, #0]
 800381c:	e003      	b.n	8003826 <UART_SetConfig+0x10a>
 800381e:	231f      	movs	r3, #31
 8003820:	18fb      	adds	r3, r7, r3
 8003822:	2210      	movs	r2, #16
 8003824:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	69da      	ldr	r2, [r3, #28]
 800382a:	2380      	movs	r3, #128	@ 0x80
 800382c:	021b      	lsls	r3, r3, #8
 800382e:	429a      	cmp	r2, r3
 8003830:	d000      	beq.n	8003834 <UART_SetConfig+0x118>
 8003832:	e06f      	b.n	8003914 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003834:	231f      	movs	r3, #31
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	781b      	ldrb	r3, [r3, #0]
 800383a:	2b08      	cmp	r3, #8
 800383c:	d01f      	beq.n	800387e <UART_SetConfig+0x162>
 800383e:	dc22      	bgt.n	8003886 <UART_SetConfig+0x16a>
 8003840:	2b04      	cmp	r3, #4
 8003842:	d017      	beq.n	8003874 <UART_SetConfig+0x158>
 8003844:	dc1f      	bgt.n	8003886 <UART_SetConfig+0x16a>
 8003846:	2b00      	cmp	r3, #0
 8003848:	d002      	beq.n	8003850 <UART_SetConfig+0x134>
 800384a:	2b02      	cmp	r3, #2
 800384c:	d005      	beq.n	800385a <UART_SetConfig+0x13e>
 800384e:	e01a      	b.n	8003886 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003850:	f7fe fcb0 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003854:	0003      	movs	r3, r0
 8003856:	61bb      	str	r3, [r7, #24]
        break;
 8003858:	e01c      	b.n	8003894 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800385a:	4b6b      	ldr	r3, [pc, #428]	@ (8003a08 <UART_SetConfig+0x2ec>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	095b      	lsrs	r3, r3, #5
 8003860:	2207      	movs	r2, #7
 8003862:	4013      	ands	r3, r2
 8003864:	3301      	adds	r3, #1
 8003866:	0019      	movs	r1, r3
 8003868:	4869      	ldr	r0, [pc, #420]	@ (8003a10 <UART_SetConfig+0x2f4>)
 800386a:	f7fc fc5f 	bl	800012c <__udivsi3>
 800386e:	0003      	movs	r3, r0
 8003870:	61bb      	str	r3, [r7, #24]
        break;
 8003872:	e00f      	b.n	8003894 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003874:	f7fe fc30 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003878:	0003      	movs	r3, r0
 800387a:	61bb      	str	r3, [r7, #24]
        break;
 800387c:	e00a      	b.n	8003894 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800387e:	2380      	movs	r3, #128	@ 0x80
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	61bb      	str	r3, [r7, #24]
        break;
 8003884:	e006      	b.n	8003894 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003886:	2300      	movs	r3, #0
 8003888:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800388a:	231e      	movs	r3, #30
 800388c:	18fb      	adds	r3, r7, r3
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]
        break;
 8003892:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d100      	bne.n	800389c <UART_SetConfig+0x180>
 800389a:	e097      	b.n	80039cc <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038a0:	4b5c      	ldr	r3, [pc, #368]	@ (8003a14 <UART_SetConfig+0x2f8>)
 80038a2:	0052      	lsls	r2, r2, #1
 80038a4:	5ad3      	ldrh	r3, [r2, r3]
 80038a6:	0019      	movs	r1, r3
 80038a8:	69b8      	ldr	r0, [r7, #24]
 80038aa:	f7fc fc3f 	bl	800012c <__udivsi3>
 80038ae:	0003      	movs	r3, r0
 80038b0:	005a      	lsls	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	18d2      	adds	r2, r2, r3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	0019      	movs	r1, r3
 80038c0:	0010      	movs	r0, r2
 80038c2:	f7fc fc33 	bl	800012c <__udivsi3>
 80038c6:	0003      	movs	r3, r0
 80038c8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	2b0f      	cmp	r3, #15
 80038ce:	d91c      	bls.n	800390a <UART_SetConfig+0x1ee>
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	2380      	movs	r3, #128	@ 0x80
 80038d4:	025b      	lsls	r3, r3, #9
 80038d6:	429a      	cmp	r2, r3
 80038d8:	d217      	bcs.n	800390a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	b29a      	uxth	r2, r3
 80038de:	200e      	movs	r0, #14
 80038e0:	183b      	adds	r3, r7, r0
 80038e2:	210f      	movs	r1, #15
 80038e4:	438a      	bics	r2, r1
 80038e6:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	085b      	lsrs	r3, r3, #1
 80038ec:	b29b      	uxth	r3, r3
 80038ee:	2207      	movs	r2, #7
 80038f0:	4013      	ands	r3, r2
 80038f2:	b299      	uxth	r1, r3
 80038f4:	183b      	adds	r3, r7, r0
 80038f6:	183a      	adds	r2, r7, r0
 80038f8:	8812      	ldrh	r2, [r2, #0]
 80038fa:	430a      	orrs	r2, r1
 80038fc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	183a      	adds	r2, r7, r0
 8003904:	8812      	ldrh	r2, [r2, #0]
 8003906:	60da      	str	r2, [r3, #12]
 8003908:	e060      	b.n	80039cc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800390a:	231e      	movs	r3, #30
 800390c:	18fb      	adds	r3, r7, r3
 800390e:	2201      	movs	r2, #1
 8003910:	701a      	strb	r2, [r3, #0]
 8003912:	e05b      	b.n	80039cc <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003914:	231f      	movs	r3, #31
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b08      	cmp	r3, #8
 800391c:	d01f      	beq.n	800395e <UART_SetConfig+0x242>
 800391e:	dc22      	bgt.n	8003966 <UART_SetConfig+0x24a>
 8003920:	2b04      	cmp	r3, #4
 8003922:	d017      	beq.n	8003954 <UART_SetConfig+0x238>
 8003924:	dc1f      	bgt.n	8003966 <UART_SetConfig+0x24a>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <UART_SetConfig+0x214>
 800392a:	2b02      	cmp	r3, #2
 800392c:	d005      	beq.n	800393a <UART_SetConfig+0x21e>
 800392e:	e01a      	b.n	8003966 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003930:	f7fe fc40 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 8003934:	0003      	movs	r3, r0
 8003936:	61bb      	str	r3, [r7, #24]
        break;
 8003938:	e01c      	b.n	8003974 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800393a:	4b33      	ldr	r3, [pc, #204]	@ (8003a08 <UART_SetConfig+0x2ec>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2207      	movs	r2, #7
 8003942:	4013      	ands	r3, r2
 8003944:	3301      	adds	r3, #1
 8003946:	0019      	movs	r1, r3
 8003948:	4831      	ldr	r0, [pc, #196]	@ (8003a10 <UART_SetConfig+0x2f4>)
 800394a:	f7fc fbef 	bl	800012c <__udivsi3>
 800394e:	0003      	movs	r3, r0
 8003950:	61bb      	str	r3, [r7, #24]
        break;
 8003952:	e00f      	b.n	8003974 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003954:	f7fe fbc0 	bl	80020d8 <HAL_RCC_GetSysClockFreq>
 8003958:	0003      	movs	r3, r0
 800395a:	61bb      	str	r3, [r7, #24]
        break;
 800395c:	e00a      	b.n	8003974 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800395e:	2380      	movs	r3, #128	@ 0x80
 8003960:	021b      	lsls	r3, r3, #8
 8003962:	61bb      	str	r3, [r7, #24]
        break;
 8003964:	e006      	b.n	8003974 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8003966:	2300      	movs	r3, #0
 8003968:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800396a:	231e      	movs	r3, #30
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
        break;
 8003972:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d028      	beq.n	80039cc <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800397e:	4b25      	ldr	r3, [pc, #148]	@ (8003a14 <UART_SetConfig+0x2f8>)
 8003980:	0052      	lsls	r2, r2, #1
 8003982:	5ad3      	ldrh	r3, [r2, r3]
 8003984:	0019      	movs	r1, r3
 8003986:	69b8      	ldr	r0, [r7, #24]
 8003988:	f7fc fbd0 	bl	800012c <__udivsi3>
 800398c:	0003      	movs	r3, r0
 800398e:	001a      	movs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	18d2      	adds	r2, r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	0019      	movs	r1, r3
 800399e:	0010      	movs	r0, r2
 80039a0:	f7fc fbc4 	bl	800012c <__udivsi3>
 80039a4:	0003      	movs	r3, r0
 80039a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	2b0f      	cmp	r3, #15
 80039ac:	d90a      	bls.n	80039c4 <UART_SetConfig+0x2a8>
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	2380      	movs	r3, #128	@ 0x80
 80039b2:	025b      	lsls	r3, r3, #9
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d205      	bcs.n	80039c4 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	e003      	b.n	80039cc <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80039c4:	231e      	movs	r3, #30
 80039c6:	18fb      	adds	r3, r7, r3
 80039c8:	2201      	movs	r2, #1
 80039ca:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	226a      	movs	r2, #106	@ 0x6a
 80039d0:	2101      	movs	r1, #1
 80039d2:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2268      	movs	r2, #104	@ 0x68
 80039d8:	2101      	movs	r1, #1
 80039da:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80039e8:	231e      	movs	r3, #30
 80039ea:	18fb      	adds	r3, r7, r3
 80039ec:	781b      	ldrb	r3, [r3, #0]
}
 80039ee:	0018      	movs	r0, r3
 80039f0:	46bd      	mov	sp, r7
 80039f2:	b008      	add	sp, #32
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	cfff69f3 	.word	0xcfff69f3
 80039fc:	ffffcfff 	.word	0xffffcfff
 8003a00:	11fff4ff 	.word	0x11fff4ff
 8003a04:	40013800 	.word	0x40013800
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	40004400 	.word	0x40004400
 8003a10:	02dc6c00 	.word	0x02dc6c00
 8003a14:	08006c74 	.word	0x08006c74

08003a18 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	2208      	movs	r2, #8
 8003a26:	4013      	ands	r3, r2
 8003a28:	d00b      	beq.n	8003a42 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a4a      	ldr	r2, [pc, #296]	@ (8003b5c <UART_AdvFeatureConfig+0x144>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a46:	2201      	movs	r2, #1
 8003a48:	4013      	ands	r3, r2
 8003a4a:	d00b      	beq.n	8003a64 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	4a43      	ldr	r2, [pc, #268]	@ (8003b60 <UART_AdvFeatureConfig+0x148>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	0019      	movs	r1, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a68:	2202      	movs	r2, #2
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	d00b      	beq.n	8003a86 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	4a3b      	ldr	r2, [pc, #236]	@ (8003b64 <UART_AdvFeatureConfig+0x14c>)
 8003a76:	4013      	ands	r3, r2
 8003a78:	0019      	movs	r1, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	430a      	orrs	r2, r1
 8003a84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8a:	2204      	movs	r2, #4
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	4a34      	ldr	r2, [pc, #208]	@ (8003b68 <UART_AdvFeatureConfig+0x150>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	0019      	movs	r1, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	430a      	orrs	r2, r1
 8003aa6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aac:	2210      	movs	r2, #16
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d00b      	beq.n	8003aca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	4a2c      	ldr	r2, [pc, #176]	@ (8003b6c <UART_AdvFeatureConfig+0x154>)
 8003aba:	4013      	ands	r3, r2
 8003abc:	0019      	movs	r1, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	2220      	movs	r2, #32
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	d00b      	beq.n	8003aec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4a25      	ldr	r2, [pc, #148]	@ (8003b70 <UART_AdvFeatureConfig+0x158>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	0019      	movs	r1, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af0:	2240      	movs	r2, #64	@ 0x40
 8003af2:	4013      	ands	r3, r2
 8003af4:	d01d      	beq.n	8003b32 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	4a1d      	ldr	r2, [pc, #116]	@ (8003b74 <UART_AdvFeatureConfig+0x15c>)
 8003afe:	4013      	ands	r3, r2
 8003b00:	0019      	movs	r1, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b12:	2380      	movs	r3, #128	@ 0x80
 8003b14:	035b      	lsls	r3, r3, #13
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d10b      	bne.n	8003b32 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	4a15      	ldr	r2, [pc, #84]	@ (8003b78 <UART_AdvFeatureConfig+0x160>)
 8003b22:	4013      	ands	r3, r2
 8003b24:	0019      	movs	r1, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b36:	2280      	movs	r2, #128	@ 0x80
 8003b38:	4013      	ands	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	4a0e      	ldr	r2, [pc, #56]	@ (8003b7c <UART_AdvFeatureConfig+0x164>)
 8003b44:	4013      	ands	r3, r2
 8003b46:	0019      	movs	r1, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }
}
 8003b54:	46c0      	nop			@ (mov r8, r8)
 8003b56:	46bd      	mov	sp, r7
 8003b58:	b002      	add	sp, #8
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	ffff7fff 	.word	0xffff7fff
 8003b60:	fffdffff 	.word	0xfffdffff
 8003b64:	fffeffff 	.word	0xfffeffff
 8003b68:	fffbffff 	.word	0xfffbffff
 8003b6c:	ffffefff 	.word	0xffffefff
 8003b70:	ffffdfff 	.word	0xffffdfff
 8003b74:	ffefffff 	.word	0xffefffff
 8003b78:	ff9fffff 	.word	0xff9fffff
 8003b7c:	fff7ffff 	.word	0xfff7ffff

08003b80 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b092      	sub	sp, #72	@ 0x48
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2290      	movs	r2, #144	@ 0x90
 8003b8c:	2100      	movs	r1, #0
 8003b8e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b90:	f7fd fc14 	bl	80013bc <HAL_GetTick>
 8003b94:	0003      	movs	r3, r0
 8003b96:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2208      	movs	r2, #8
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d12d      	bne.n	8003c02 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ba8:	2280      	movs	r2, #128	@ 0x80
 8003baa:	0391      	lsls	r1, r2, #14
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4a47      	ldr	r2, [pc, #284]	@ (8003ccc <UART_CheckIdleState+0x14c>)
 8003bb0:	9200      	str	r2, [sp, #0]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f000 f88e 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 8003bb8:	1e03      	subs	r3, r0, #0
 8003bba:	d022      	beq.n	8003c02 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8003bc0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bcc:	f383 8810 	msr	PRIMASK, r3
}
 8003bd0:	46c0      	nop			@ (mov r8, r8)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2180      	movs	r1, #128	@ 0x80
 8003bde:	438a      	bics	r2, r1
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003be8:	f383 8810 	msr	PRIMASK, r3
}
 8003bec:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2288      	movs	r2, #136	@ 0x88
 8003bf2:	2120      	movs	r1, #32
 8003bf4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2284      	movs	r2, #132	@ 0x84
 8003bfa:	2100      	movs	r1, #0
 8003bfc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e060      	b.n	8003cc4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2204      	movs	r2, #4
 8003c0a:	4013      	ands	r3, r2
 8003c0c:	2b04      	cmp	r3, #4
 8003c0e:	d146      	bne.n	8003c9e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c12:	2280      	movs	r2, #128	@ 0x80
 8003c14:	03d1      	lsls	r1, r2, #15
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	4a2c      	ldr	r2, [pc, #176]	@ (8003ccc <UART_CheckIdleState+0x14c>)
 8003c1a:	9200      	str	r2, [sp, #0]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f000 f859 	bl	8003cd4 <UART_WaitOnFlagUntilTimeout>
 8003c22:	1e03      	subs	r3, r0, #0
 8003c24:	d03b      	beq.n	8003c9e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c26:	f3ef 8310 	mrs	r3, PRIMASK
 8003c2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c30:	2301      	movs	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	f383 8810 	msr	PRIMASK, r3
}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4922      	ldr	r1, [pc, #136]	@ (8003cd0 <UART_CheckIdleState+0x150>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	f383 8810 	msr	PRIMASK, r3
}
 8003c56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c58:	f3ef 8310 	mrs	r3, PRIMASK
 8003c5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c5e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c60:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c62:	2301      	movs	r3, #1
 8003c64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	f383 8810 	msr	PRIMASK, r3
}
 8003c6c:	46c0      	nop			@ (mov r8, r8)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2101      	movs	r1, #1
 8003c7a:	438a      	bics	r2, r1
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c80:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c82:	6a3b      	ldr	r3, [r7, #32]
 8003c84:	f383 8810 	msr	PRIMASK, r3
}
 8003c88:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	228c      	movs	r2, #140	@ 0x8c
 8003c8e:	2120      	movs	r1, #32
 8003c90:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2284      	movs	r2, #132	@ 0x84
 8003c96:	2100      	movs	r1, #0
 8003c98:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c9a:	2303      	movs	r3, #3
 8003c9c:	e012      	b.n	8003cc4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2288      	movs	r2, #136	@ 0x88
 8003ca2:	2120      	movs	r1, #32
 8003ca4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	228c      	movs	r2, #140	@ 0x8c
 8003caa:	2120      	movs	r1, #32
 8003cac:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2284      	movs	r2, #132	@ 0x84
 8003cbe:	2100      	movs	r1, #0
 8003cc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cc2:	2300      	movs	r3, #0
}
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	b010      	add	sp, #64	@ 0x40
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	01ffffff 	.word	0x01ffffff
 8003cd0:	fffffedf 	.word	0xfffffedf

08003cd4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	1dfb      	adds	r3, r7, #7
 8003ce2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ce4:	e051      	b.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	d04e      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cec:	f7fd fb66 	bl	80013bc <HAL_GetTick>
 8003cf0:	0002      	movs	r2, r0
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	1ad3      	subs	r3, r2, r3
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d302      	bcc.n	8003d02 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e051      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	4013      	ands	r3, r2
 8003d10:	d03b      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	2b80      	cmp	r3, #128	@ 0x80
 8003d16:	d038      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b40      	cmp	r3, #64	@ 0x40
 8003d1c:	d035      	beq.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2208      	movs	r2, #8
 8003d26:	4013      	ands	r3, r2
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d111      	bne.n	8003d50 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2208      	movs	r2, #8
 8003d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	0018      	movs	r0, r3
 8003d38:	f000 f960 	bl	8003ffc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2290      	movs	r2, #144	@ 0x90
 8003d40:	2108      	movs	r1, #8
 8003d42:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	2284      	movs	r2, #132	@ 0x84
 8003d48:	2100      	movs	r1, #0
 8003d4a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e02c      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69da      	ldr	r2, [r3, #28]
 8003d56:	2380      	movs	r3, #128	@ 0x80
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	401a      	ands	r2, r3
 8003d5c:	2380      	movs	r3, #128	@ 0x80
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d112      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	2280      	movs	r2, #128	@ 0x80
 8003d6a:	0112      	lsls	r2, r2, #4
 8003d6c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f000 f943 	bl	8003ffc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2290      	movs	r2, #144	@ 0x90
 8003d7a:	2120      	movs	r1, #32
 8003d7c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2284      	movs	r2, #132	@ 0x84
 8003d82:	2100      	movs	r1, #0
 8003d84:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e00f      	b.n	8003daa <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	425a      	negs	r2, r3
 8003d9a:	4153      	adcs	r3, r2
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	001a      	movs	r2, r3
 8003da0:	1dfb      	adds	r3, r7, #7
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d09e      	beq.n	8003ce6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	0018      	movs	r0, r3
 8003dac:	46bd      	mov	sp, r7
 8003dae:	b004      	add	sp, #16
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b098      	sub	sp, #96	@ 0x60
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	60b9      	str	r1, [r7, #8]
 8003dbe:	1dbb      	adds	r3, r7, #6
 8003dc0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	68ba      	ldr	r2, [r7, #8]
 8003dc6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	1dba      	adds	r2, r7, #6
 8003dcc:	215c      	movs	r1, #92	@ 0x5c
 8003dce:	8812      	ldrh	r2, [r2, #0]
 8003dd0:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1dba      	adds	r2, r7, #6
 8003dd6:	215e      	movs	r1, #94	@ 0x5e
 8003dd8:	8812      	ldrh	r2, [r2, #0]
 8003dda:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	689a      	ldr	r2, [r3, #8]
 8003de6:	2380      	movs	r3, #128	@ 0x80
 8003de8:	015b      	lsls	r3, r3, #5
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d10d      	bne.n	8003e0a <UART_Start_Receive_IT+0x56>
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d104      	bne.n	8003e00 <UART_Start_Receive_IT+0x4c>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2260      	movs	r2, #96	@ 0x60
 8003dfa:	497b      	ldr	r1, [pc, #492]	@ (8003fe8 <UART_Start_Receive_IT+0x234>)
 8003dfc:	5299      	strh	r1, [r3, r2]
 8003dfe:	e02e      	b.n	8003e5e <UART_Start_Receive_IT+0xaa>
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2260      	movs	r2, #96	@ 0x60
 8003e04:	21ff      	movs	r1, #255	@ 0xff
 8003e06:	5299      	strh	r1, [r3, r2]
 8003e08:	e029      	b.n	8003e5e <UART_Start_Receive_IT+0xaa>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10d      	bne.n	8003e2e <UART_Start_Receive_IT+0x7a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	691b      	ldr	r3, [r3, #16]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d104      	bne.n	8003e24 <UART_Start_Receive_IT+0x70>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2260      	movs	r2, #96	@ 0x60
 8003e1e:	21ff      	movs	r1, #255	@ 0xff
 8003e20:	5299      	strh	r1, [r3, r2]
 8003e22:	e01c      	b.n	8003e5e <UART_Start_Receive_IT+0xaa>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2260      	movs	r2, #96	@ 0x60
 8003e28:	217f      	movs	r1, #127	@ 0x7f
 8003e2a:	5299      	strh	r1, [r3, r2]
 8003e2c:	e017      	b.n	8003e5e <UART_Start_Receive_IT+0xaa>
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	689a      	ldr	r2, [r3, #8]
 8003e32:	2380      	movs	r3, #128	@ 0x80
 8003e34:	055b      	lsls	r3, r3, #21
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d10d      	bne.n	8003e56 <UART_Start_Receive_IT+0xa2>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d104      	bne.n	8003e4c <UART_Start_Receive_IT+0x98>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2260      	movs	r2, #96	@ 0x60
 8003e46:	217f      	movs	r1, #127	@ 0x7f
 8003e48:	5299      	strh	r1, [r3, r2]
 8003e4a:	e008      	b.n	8003e5e <UART_Start_Receive_IT+0xaa>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2260      	movs	r2, #96	@ 0x60
 8003e50:	213f      	movs	r1, #63	@ 0x3f
 8003e52:	5299      	strh	r1, [r3, r2]
 8003e54:	e003      	b.n	8003e5e <UART_Start_Receive_IT+0xaa>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2260      	movs	r2, #96	@ 0x60
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2290      	movs	r2, #144	@ 0x90
 8003e62:	2100      	movs	r1, #0
 8003e64:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	228c      	movs	r2, #140	@ 0x8c
 8003e6a:	2122      	movs	r1, #34	@ 0x22
 8003e6c:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e72:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003e74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e78:	2301      	movs	r3, #1
 8003e7a:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e7e:	f383 8810 	msr	PRIMASK, r3
}
 8003e82:	46c0      	nop			@ (mov r8, r8)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	2101      	movs	r1, #1
 8003e90:	430a      	orrs	r2, r1
 8003e92:	609a      	str	r2, [r3, #8]
 8003e94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e96:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e9a:	f383 8810 	msr	PRIMASK, r3
}
 8003e9e:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003ea4:	2380      	movs	r3, #128	@ 0x80
 8003ea6:	059b      	lsls	r3, r3, #22
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d150      	bne.n	8003f4e <UART_Start_Receive_IT+0x19a>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2268      	movs	r2, #104	@ 0x68
 8003eb0:	5a9b      	ldrh	r3, [r3, r2]
 8003eb2:	1dba      	adds	r2, r7, #6
 8003eb4:	8812      	ldrh	r2, [r2, #0]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d349      	bcc.n	8003f4e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	2380      	movs	r3, #128	@ 0x80
 8003ec0:	015b      	lsls	r3, r3, #5
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d107      	bne.n	8003ed6 <UART_Start_Receive_IT+0x122>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d103      	bne.n	8003ed6 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a46      	ldr	r2, [pc, #280]	@ (8003fec <UART_Start_Receive_IT+0x238>)
 8003ed2:	675a      	str	r2, [r3, #116]	@ 0x74
 8003ed4:	e002      	b.n	8003edc <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	4a45      	ldr	r2, [pc, #276]	@ (8003ff0 <UART_Start_Receive_IT+0x23c>)
 8003eda:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d019      	beq.n	8003f18 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ee4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee8:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8003eea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003eec:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003eee:	2301      	movs	r3, #1
 8003ef0:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ef4:	f383 8810 	msr	PRIMASK, r3
}
 8003ef8:	46c0      	nop			@ (mov r8, r8)
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	681a      	ldr	r2, [r3, #0]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2180      	movs	r1, #128	@ 0x80
 8003f06:	0049      	lsls	r1, r1, #1
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003f0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f12:	f383 8810 	msr	PRIMASK, r3
}
 8003f16:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f18:	f3ef 8310 	mrs	r3, PRIMASK
 8003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003f20:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f22:	2301      	movs	r3, #1
 8003f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f28:	f383 8810 	msr	PRIMASK, r3
}
 8003f2c:	46c0      	nop			@ (mov r8, r8)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2180      	movs	r1, #128	@ 0x80
 8003f3a:	0549      	lsls	r1, r1, #21
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	609a      	str	r2, [r3, #8]
 8003f40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f42:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	f383 8810 	msr	PRIMASK, r3
}
 8003f4a:	46c0      	nop			@ (mov r8, r8)
 8003f4c:	e047      	b.n	8003fde <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	015b      	lsls	r3, r3, #5
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d107      	bne.n	8003f6a <UART_Start_Receive_IT+0x1b6>
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d103      	bne.n	8003f6a <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	4a23      	ldr	r2, [pc, #140]	@ (8003ff4 <UART_Start_Receive_IT+0x240>)
 8003f66:	675a      	str	r2, [r3, #116]	@ 0x74
 8003f68:	e002      	b.n	8003f70 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4a22      	ldr	r2, [pc, #136]	@ (8003ff8 <UART_Start_Receive_IT+0x244>)
 8003f6e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	691b      	ldr	r3, [r3, #16]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d019      	beq.n	8003fac <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f78:	f3ef 8310 	mrs	r3, PRIMASK
 8003f7c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f7e:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f82:	2301      	movs	r3, #1
 8003f84:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f86:	6a3b      	ldr	r3, [r7, #32]
 8003f88:	f383 8810 	msr	PRIMASK, r3
}
 8003f8c:	46c0      	nop			@ (mov r8, r8)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2190      	movs	r1, #144	@ 0x90
 8003f9a:	0049      	lsls	r1, r1, #1
 8003f9c:	430a      	orrs	r2, r1
 8003f9e:	601a      	str	r2, [r3, #0]
 8003fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fa2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa6:	f383 8810 	msr	PRIMASK, r3
}
 8003faa:	e018      	b.n	8003fde <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fac:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb0:	613b      	str	r3, [r7, #16]
  return(result);
 8003fb2:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003fb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f383 8810 	msr	PRIMASK, r3
}
 8003fc0:	46c0      	nop			@ (mov r8, r8)
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2120      	movs	r1, #32
 8003fce:	430a      	orrs	r2, r1
 8003fd0:	601a      	str	r2, [r3, #0]
 8003fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003fd4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	f383 8810 	msr	PRIMASK, r3
}
 8003fdc:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	0018      	movs	r0, r3
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b018      	add	sp, #96	@ 0x60
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	000001ff 	.word	0x000001ff
 8003fec:	080047f5 	.word	0x080047f5
 8003ff0:	080044c1 	.word	0x080044c1
 8003ff4:	08004309 	.word	0x08004309
 8003ff8:	08004151 	.word	0x08004151

08003ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b08e      	sub	sp, #56	@ 0x38
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004004:	f3ef 8310 	mrs	r3, PRIMASK
 8004008:	617b      	str	r3, [r7, #20]
  return(result);
 800400a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800400c:	637b      	str	r3, [r7, #52]	@ 0x34
 800400e:	2301      	movs	r3, #1
 8004010:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	f383 8810 	msr	PRIMASK, r3
}
 8004018:	46c0      	nop			@ (mov r8, r8)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4926      	ldr	r1, [pc, #152]	@ (80040c0 <UART_EndRxTransfer+0xc4>)
 8004026:	400a      	ands	r2, r1
 8004028:	601a      	str	r2, [r3, #0]
 800402a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800402c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f383 8810 	msr	PRIMASK, r3
}
 8004034:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004036:	f3ef 8310 	mrs	r3, PRIMASK
 800403a:	623b      	str	r3, [r7, #32]
  return(result);
 800403c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800403e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004040:	2301      	movs	r3, #1
 8004042:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004046:	f383 8810 	msr	PRIMASK, r3
}
 800404a:	46c0      	nop			@ (mov r8, r8)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	491b      	ldr	r1, [pc, #108]	@ (80040c4 <UART_EndRxTransfer+0xc8>)
 8004058:	400a      	ands	r2, r1
 800405a:	609a      	str	r2, [r3, #8]
 800405c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004062:	f383 8810 	msr	PRIMASK, r3
}
 8004066:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800406c:	2b01      	cmp	r3, #1
 800406e:	d118      	bne.n	80040a2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004070:	f3ef 8310 	mrs	r3, PRIMASK
 8004074:	60bb      	str	r3, [r7, #8]
  return(result);
 8004076:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004078:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800407a:	2301      	movs	r3, #1
 800407c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f383 8810 	msr	PRIMASK, r3
}
 8004084:	46c0      	nop			@ (mov r8, r8)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2110      	movs	r1, #16
 8004092:	438a      	bics	r2, r1
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f383 8810 	msr	PRIMASK, r3
}
 80040a0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	228c      	movs	r2, #140	@ 0x8c
 80040a6:	2120      	movs	r1, #32
 80040a8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2200      	movs	r2, #0
 80040ae:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80040b6:	46c0      	nop			@ (mov r8, r8)
 80040b8:	46bd      	mov	sp, r7
 80040ba:	b00e      	add	sp, #56	@ 0x38
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	fffffedf 	.word	0xfffffedf
 80040c4:	effffffe 	.word	0xeffffffe

080040c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	225e      	movs	r2, #94	@ 0x5e
 80040da:	2100      	movs	r1, #0
 80040dc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2256      	movs	r2, #86	@ 0x56
 80040e2:	2100      	movs	r1, #0
 80040e4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	0018      	movs	r0, r3
 80040ea:	f7ff fb03 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040ee:	46c0      	nop			@ (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b004      	add	sp, #16
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b086      	sub	sp, #24
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004102:	60bb      	str	r3, [r7, #8]
  return(result);
 8004104:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	2301      	movs	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f383 8810 	msr	PRIMASK, r3
}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2140      	movs	r1, #64	@ 0x40
 8004120:	438a      	bics	r2, r1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f383 8810 	msr	PRIMASK, r3
}
 800412e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2288      	movs	r2, #136	@ 0x88
 8004134:	2120      	movs	r1, #32
 8004136:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	0018      	movs	r0, r3
 8004142:	f7ff fac7 	bl	80036d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004146:	46c0      	nop			@ (mov r8, r8)
 8004148:	46bd      	mov	sp, r7
 800414a:	b006      	add	sp, #24
 800414c:	bd80      	pop	{r7, pc}
	...

08004150 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b094      	sub	sp, #80	@ 0x50
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004158:	204e      	movs	r0, #78	@ 0x4e
 800415a:	183b      	adds	r3, r7, r0
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	2160      	movs	r1, #96	@ 0x60
 8004160:	5a52      	ldrh	r2, [r2, r1]
 8004162:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	228c      	movs	r2, #140	@ 0x8c
 8004168:	589b      	ldr	r3, [r3, r2]
 800416a:	2b22      	cmp	r3, #34	@ 0x22
 800416c:	d000      	beq.n	8004170 <UART_RxISR_8BIT+0x20>
 800416e:	e0ba      	b.n	80042e6 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004176:	214c      	movs	r1, #76	@ 0x4c
 8004178:	187b      	adds	r3, r7, r1
 800417a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800417c:	187b      	adds	r3, r7, r1
 800417e:	881b      	ldrh	r3, [r3, #0]
 8004180:	b2da      	uxtb	r2, r3
 8004182:	183b      	adds	r3, r7, r0
 8004184:	881b      	ldrh	r3, [r3, #0]
 8004186:	b2d9      	uxtb	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	400a      	ands	r2, r1
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	225e      	movs	r2, #94	@ 0x5e
 80041a0:	5a9b      	ldrh	r3, [r3, r2]
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b299      	uxth	r1, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	225e      	movs	r2, #94	@ 0x5e
 80041ac:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	225e      	movs	r2, #94	@ 0x5e
 80041b2:	5a9b      	ldrh	r3, [r3, r2]
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d000      	beq.n	80041bc <UART_RxISR_8BIT+0x6c>
 80041ba:	e09c      	b.n	80042f6 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041bc:	f3ef 8310 	mrs	r3, PRIMASK
 80041c0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80041c6:	2301      	movs	r3, #1
 80041c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041cc:	f383 8810 	msr	PRIMASK, r3
}
 80041d0:	46c0      	nop			@ (mov r8, r8)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4948      	ldr	r1, [pc, #288]	@ (8004300 <UART_RxISR_8BIT+0x1b0>)
 80041de:	400a      	ands	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e8:	f383 8810 	msr	PRIMASK, r3
}
 80041ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041ee:	f3ef 8310 	mrs	r3, PRIMASK
 80041f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80041f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80041f8:	2301      	movs	r3, #1
 80041fa:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041fe:	f383 8810 	msr	PRIMASK, r3
}
 8004202:	46c0      	nop			@ (mov r8, r8)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	689a      	ldr	r2, [r3, #8]
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2101      	movs	r1, #1
 8004210:	438a      	bics	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004216:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800421a:	f383 8810 	msr	PRIMASK, r3
}
 800421e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	228c      	movs	r2, #140	@ 0x8c
 8004224:	2120      	movs	r1, #32
 8004226:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2200      	movs	r2, #0
 800422c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	2380      	movs	r3, #128	@ 0x80
 800423c:	041b      	lsls	r3, r3, #16
 800423e:	4013      	ands	r3, r2
 8004240:	d018      	beq.n	8004274 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004242:	f3ef 8310 	mrs	r3, PRIMASK
 8004246:	61bb      	str	r3, [r7, #24]
  return(result);
 8004248:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800424a:	643b      	str	r3, [r7, #64]	@ 0x40
 800424c:	2301      	movs	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f383 8810 	msr	PRIMASK, r3
}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4928      	ldr	r1, [pc, #160]	@ (8004304 <UART_RxISR_8BIT+0x1b4>)
 8004264:	400a      	ands	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800426a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004278:	2b01      	cmp	r3, #1
 800427a:	d12f      	bne.n	80042dc <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004282:	f3ef 8310 	mrs	r3, PRIMASK
 8004286:	60fb      	str	r3, [r7, #12]
  return(result);
 8004288:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800428a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800428c:	2301      	movs	r3, #1
 800428e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	f383 8810 	msr	PRIMASK, r3
}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2110      	movs	r1, #16
 80042a4:	438a      	bics	r2, r1
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	f383 8810 	msr	PRIMASK, r3
}
 80042b2:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69db      	ldr	r3, [r3, #28]
 80042ba:	2210      	movs	r2, #16
 80042bc:	4013      	ands	r3, r2
 80042be:	2b10      	cmp	r3, #16
 80042c0:	d103      	bne.n	80042ca <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2210      	movs	r2, #16
 80042c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	225c      	movs	r2, #92	@ 0x5c
 80042ce:	5a9a      	ldrh	r2, [r3, r2]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	0011      	movs	r1, r2
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff fa15 	bl	8003704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80042da:	e00c      	b.n	80042f6 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	0018      	movs	r0, r3
 80042e0:	f7ff fa00 	bl	80036e4 <HAL_UART_RxCpltCallback>
}
 80042e4:	e007      	b.n	80042f6 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	699a      	ldr	r2, [r3, #24]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2108      	movs	r1, #8
 80042f2:	430a      	orrs	r2, r1
 80042f4:	619a      	str	r2, [r3, #24]
}
 80042f6:	46c0      	nop			@ (mov r8, r8)
 80042f8:	46bd      	mov	sp, r7
 80042fa:	b014      	add	sp, #80	@ 0x50
 80042fc:	bd80      	pop	{r7, pc}
 80042fe:	46c0      	nop			@ (mov r8, r8)
 8004300:	fffffedf 	.word	0xfffffedf
 8004304:	fbffffff 	.word	0xfbffffff

08004308 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b094      	sub	sp, #80	@ 0x50
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004310:	204e      	movs	r0, #78	@ 0x4e
 8004312:	183b      	adds	r3, r7, r0
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	2160      	movs	r1, #96	@ 0x60
 8004318:	5a52      	ldrh	r2, [r2, r1]
 800431a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	228c      	movs	r2, #140	@ 0x8c
 8004320:	589b      	ldr	r3, [r3, r2]
 8004322:	2b22      	cmp	r3, #34	@ 0x22
 8004324:	d000      	beq.n	8004328 <UART_RxISR_16BIT+0x20>
 8004326:	e0ba      	b.n	800449e <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800432e:	214c      	movs	r1, #76	@ 0x4c
 8004330:	187b      	adds	r3, r7, r1
 8004332:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004338:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800433a:	187b      	adds	r3, r7, r1
 800433c:	183a      	adds	r2, r7, r0
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	8812      	ldrh	r2, [r2, #0]
 8004342:	4013      	ands	r3, r2
 8004344:	b29a      	uxth	r2, r3
 8004346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004348:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800434e:	1c9a      	adds	r2, r3, #2
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	225e      	movs	r2, #94	@ 0x5e
 8004358:	5a9b      	ldrh	r3, [r3, r2]
 800435a:	b29b      	uxth	r3, r3
 800435c:	3b01      	subs	r3, #1
 800435e:	b299      	uxth	r1, r3
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	225e      	movs	r2, #94	@ 0x5e
 8004364:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	225e      	movs	r2, #94	@ 0x5e
 800436a:	5a9b      	ldrh	r3, [r3, r2]
 800436c:	b29b      	uxth	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d000      	beq.n	8004374 <UART_RxISR_16BIT+0x6c>
 8004372:	e09c      	b.n	80044ae <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004374:	f3ef 8310 	mrs	r3, PRIMASK
 8004378:	623b      	str	r3, [r7, #32]
  return(result);
 800437a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800437c:	647b      	str	r3, [r7, #68]	@ 0x44
 800437e:	2301      	movs	r3, #1
 8004380:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004384:	f383 8810 	msr	PRIMASK, r3
}
 8004388:	46c0      	nop			@ (mov r8, r8)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4948      	ldr	r1, [pc, #288]	@ (80044b8 <UART_RxISR_16BIT+0x1b0>)
 8004396:	400a      	ands	r2, r1
 8004398:	601a      	str	r2, [r3, #0]
 800439a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800439c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043a6:	f3ef 8310 	mrs	r3, PRIMASK
 80043aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80043ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80043b0:	2301      	movs	r3, #1
 80043b2:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043b6:	f383 8810 	msr	PRIMASK, r3
}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	689a      	ldr	r2, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2101      	movs	r1, #1
 80043c8:	438a      	bics	r2, r1
 80043ca:	609a      	str	r2, [r3, #8]
 80043cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80043ce:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	228c      	movs	r2, #140	@ 0x8c
 80043dc:	2120      	movs	r1, #32
 80043de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	2380      	movs	r3, #128	@ 0x80
 80043f4:	041b      	lsls	r3, r3, #16
 80043f6:	4013      	ands	r3, r2
 80043f8:	d018      	beq.n	800442c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043fa:	f3ef 8310 	mrs	r3, PRIMASK
 80043fe:	617b      	str	r3, [r7, #20]
  return(result);
 8004400:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004402:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004404:	2301      	movs	r3, #1
 8004406:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	f383 8810 	msr	PRIMASK, r3
}
 800440e:	46c0      	nop			@ (mov r8, r8)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4928      	ldr	r1, [pc, #160]	@ (80044bc <UART_RxISR_16BIT+0x1b4>)
 800441c:	400a      	ands	r2, r1
 800441e:	601a      	str	r2, [r3, #0]
 8004420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004422:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f383 8810 	msr	PRIMASK, r3
}
 800442a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004430:	2b01      	cmp	r3, #1
 8004432:	d12f      	bne.n	8004494 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800443a:	f3ef 8310 	mrs	r3, PRIMASK
 800443e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004440:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004442:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004444:	2301      	movs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f383 8810 	msr	PRIMASK, r3
}
 800444e:	46c0      	nop			@ (mov r8, r8)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2110      	movs	r1, #16
 800445c:	438a      	bics	r2, r1
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f383 8810 	msr	PRIMASK, r3
}
 800446a:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	2210      	movs	r2, #16
 8004474:	4013      	ands	r3, r2
 8004476:	2b10      	cmp	r3, #16
 8004478:	d103      	bne.n	8004482 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2210      	movs	r2, #16
 8004480:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	225c      	movs	r2, #92	@ 0x5c
 8004486:	5a9a      	ldrh	r2, [r3, r2]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	0011      	movs	r1, r2
 800448c:	0018      	movs	r0, r3
 800448e:	f7ff f939 	bl	8003704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004492:	e00c      	b.n	80044ae <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	0018      	movs	r0, r3
 8004498:	f7ff f924 	bl	80036e4 <HAL_UART_RxCpltCallback>
}
 800449c:	e007      	b.n	80044ae <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699a      	ldr	r2, [r3, #24]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2108      	movs	r1, #8
 80044aa:	430a      	orrs	r2, r1
 80044ac:	619a      	str	r2, [r3, #24]
}
 80044ae:	46c0      	nop			@ (mov r8, r8)
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b014      	add	sp, #80	@ 0x50
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	fffffedf 	.word	0xfffffedf
 80044bc:	fbffffff 	.word	0xfbffffff

080044c0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b0a0      	sub	sp, #128	@ 0x80
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80044c8:	237a      	movs	r3, #122	@ 0x7a
 80044ca:	18fb      	adds	r3, r7, r3
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	2160      	movs	r1, #96	@ 0x60
 80044d0:	5a52      	ldrh	r2, [r2, r1]
 80044d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	228c      	movs	r2, #140	@ 0x8c
 80044f0:	589b      	ldr	r3, [r3, r2]
 80044f2:	2b22      	cmp	r3, #34	@ 0x22
 80044f4:	d000      	beq.n	80044f8 <UART_RxISR_8BIT_FIFOEN+0x38>
 80044f6:	e166      	b.n	80047c6 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80044f8:	236e      	movs	r3, #110	@ 0x6e
 80044fa:	18fb      	adds	r3, r7, r3
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	2168      	movs	r1, #104	@ 0x68
 8004500:	5a52      	ldrh	r2, [r2, r1]
 8004502:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004504:	e10d      	b.n	8004722 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800450c:	216c      	movs	r1, #108	@ 0x6c
 800450e:	187b      	adds	r3, r7, r1
 8004510:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004512:	187b      	adds	r3, r7, r1
 8004514:	881b      	ldrh	r3, [r3, #0]
 8004516:	b2da      	uxtb	r2, r3
 8004518:	237a      	movs	r3, #122	@ 0x7a
 800451a:	18fb      	adds	r3, r7, r3
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b2d9      	uxtb	r1, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004524:	400a      	ands	r2, r1
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	225e      	movs	r2, #94	@ 0x5e
 8004538:	5a9b      	ldrh	r3, [r3, r2]
 800453a:	b29b      	uxth	r3, r3
 800453c:	3b01      	subs	r3, #1
 800453e:	b299      	uxth	r1, r3
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	225e      	movs	r2, #94	@ 0x5e
 8004544:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800454e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004550:	2207      	movs	r2, #7
 8004552:	4013      	ands	r3, r2
 8004554:	d049      	beq.n	80045ea <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004556:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004558:	2201      	movs	r2, #1
 800455a:	4013      	ands	r3, r2
 800455c:	d010      	beq.n	8004580 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800455e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004560:	2380      	movs	r3, #128	@ 0x80
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	4013      	ands	r3, r2
 8004566:	d00b      	beq.n	8004580 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2201      	movs	r2, #1
 800456e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2290      	movs	r2, #144	@ 0x90
 8004574:	589b      	ldr	r3, [r3, r2]
 8004576:	2201      	movs	r2, #1
 8004578:	431a      	orrs	r2, r3
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2190      	movs	r1, #144	@ 0x90
 800457e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004580:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004582:	2202      	movs	r2, #2
 8004584:	4013      	ands	r3, r2
 8004586:	d00f      	beq.n	80045a8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004588:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800458a:	2201      	movs	r2, #1
 800458c:	4013      	ands	r3, r2
 800458e:	d00b      	beq.n	80045a8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2202      	movs	r2, #2
 8004596:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2290      	movs	r2, #144	@ 0x90
 800459c:	589b      	ldr	r3, [r3, r2]
 800459e:	2204      	movs	r2, #4
 80045a0:	431a      	orrs	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2190      	movs	r1, #144	@ 0x90
 80045a6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80045aa:	2204      	movs	r2, #4
 80045ac:	4013      	ands	r3, r2
 80045ae:	d00f      	beq.n	80045d0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80045b0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80045b2:	2201      	movs	r2, #1
 80045b4:	4013      	ands	r3, r2
 80045b6:	d00b      	beq.n	80045d0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	2204      	movs	r2, #4
 80045be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2290      	movs	r2, #144	@ 0x90
 80045c4:	589b      	ldr	r3, [r3, r2]
 80045c6:	2202      	movs	r2, #2
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2190      	movs	r1, #144	@ 0x90
 80045ce:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2290      	movs	r2, #144	@ 0x90
 80045d4:	589b      	ldr	r3, [r3, r2]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	0018      	movs	r0, r3
 80045de:	f7ff f889 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2290      	movs	r2, #144	@ 0x90
 80045e6:	2100      	movs	r1, #0
 80045e8:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	225e      	movs	r2, #94	@ 0x5e
 80045ee:	5a9b      	ldrh	r3, [r3, r2]
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d000      	beq.n	80045f8 <UART_RxISR_8BIT_FIFOEN+0x138>
 80045f6:	e094      	b.n	8004722 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045f8:	f3ef 8310 	mrs	r3, PRIMASK
 80045fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 80045fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004600:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004602:	2301      	movs	r3, #1
 8004604:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004608:	f383 8810 	msr	PRIMASK, r3
}
 800460c:	46c0      	nop			@ (mov r8, r8)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4971      	ldr	r1, [pc, #452]	@ (80047e0 <UART_RxISR_8BIT_FIFOEN+0x320>)
 800461a:	400a      	ands	r2, r1
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004620:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004622:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004624:	f383 8810 	msr	PRIMASK, r3
}
 8004628:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800462a:	f3ef 8310 	mrs	r3, PRIMASK
 800462e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004632:	667b      	str	r3, [r7, #100]	@ 0x64
 8004634:	2301      	movs	r3, #1
 8004636:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004638:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800463a:	f383 8810 	msr	PRIMASK, r3
}
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4966      	ldr	r1, [pc, #408]	@ (80047e4 <UART_RxISR_8BIT_FIFOEN+0x324>)
 800464c:	400a      	ands	r2, r1
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004654:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004656:	f383 8810 	msr	PRIMASK, r3
}
 800465a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	228c      	movs	r2, #140	@ 0x8c
 8004660:	2120      	movs	r1, #32
 8004662:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	2380      	movs	r3, #128	@ 0x80
 8004678:	041b      	lsls	r3, r3, #16
 800467a:	4013      	ands	r3, r2
 800467c:	d018      	beq.n	80046b0 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800467e:	f3ef 8310 	mrs	r3, PRIMASK
 8004682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8004684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004686:	663b      	str	r3, [r7, #96]	@ 0x60
 8004688:	2301      	movs	r3, #1
 800468a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800468c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468e:	f383 8810 	msr	PRIMASK, r3
}
 8004692:	46c0      	nop			@ (mov r8, r8)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4952      	ldr	r1, [pc, #328]	@ (80047e8 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80046a0:	400a      	ands	r2, r1
 80046a2:	601a      	str	r2, [r3, #0]
 80046a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80046a6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80046aa:	f383 8810 	msr	PRIMASK, r3
}
 80046ae:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d12f      	bne.n	8004718 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046be:	f3ef 8310 	mrs	r3, PRIMASK
 80046c2:	623b      	str	r3, [r7, #32]
  return(result);
 80046c4:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046c6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80046c8:	2301      	movs	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ce:	f383 8810 	msr	PRIMASK, r3
}
 80046d2:	46c0      	nop			@ (mov r8, r8)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2110      	movs	r1, #16
 80046e0:	438a      	bics	r2, r1
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80046e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ea:	f383 8810 	msr	PRIMASK, r3
}
 80046ee:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	2210      	movs	r2, #16
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d103      	bne.n	8004706 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2210      	movs	r2, #16
 8004704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	225c      	movs	r2, #92	@ 0x5c
 800470a:	5a9a      	ldrh	r2, [r3, r2]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	0011      	movs	r1, r2
 8004710:	0018      	movs	r0, r3
 8004712:	f7fe fff7 	bl	8003704 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004716:	e00e      	b.n	8004736 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	0018      	movs	r0, r3
 800471c:	f7fe ffe2 	bl	80036e4 <HAL_UART_RxCpltCallback>
        break;
 8004720:	e009      	b.n	8004736 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004722:	236e      	movs	r3, #110	@ 0x6e
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	881b      	ldrh	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d004      	beq.n	8004736 <UART_RxISR_8BIT_FIFOEN+0x276>
 800472c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800472e:	2220      	movs	r2, #32
 8004730:	4013      	ands	r3, r2
 8004732:	d000      	beq.n	8004736 <UART_RxISR_8BIT_FIFOEN+0x276>
 8004734:	e6e7      	b.n	8004506 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004736:	205a      	movs	r0, #90	@ 0x5a
 8004738:	183b      	adds	r3, r7, r0
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	215e      	movs	r1, #94	@ 0x5e
 800473e:	5a52      	ldrh	r2, [r2, r1]
 8004740:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004742:	0001      	movs	r1, r0
 8004744:	187b      	adds	r3, r7, r1
 8004746:	881b      	ldrh	r3, [r3, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d044      	beq.n	80047d6 <UART_RxISR_8BIT_FIFOEN+0x316>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2268      	movs	r2, #104	@ 0x68
 8004750:	5a9b      	ldrh	r3, [r3, r2]
 8004752:	187a      	adds	r2, r7, r1
 8004754:	8812      	ldrh	r2, [r2, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d23d      	bcs.n	80047d6 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800475a:	f3ef 8310 	mrs	r3, PRIMASK
 800475e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004760:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004762:	657b      	str	r3, [r7, #84]	@ 0x54
 8004764:	2301      	movs	r3, #1
 8004766:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f383 8810 	msr	PRIMASK, r3
}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	491c      	ldr	r1, [pc, #112]	@ (80047ec <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800477c:	400a      	ands	r2, r1
 800477e:	609a      	str	r2, [r3, #8]
 8004780:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004782:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	f383 8810 	msr	PRIMASK, r3
}
 800478a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	4a18      	ldr	r2, [pc, #96]	@ (80047f0 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8004790:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004792:	f3ef 8310 	mrs	r3, PRIMASK
 8004796:	617b      	str	r3, [r7, #20]
  return(result);
 8004798:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800479a:	653b      	str	r3, [r7, #80]	@ 0x50
 800479c:	2301      	movs	r3, #1
 800479e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	69bb      	ldr	r3, [r7, #24]
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	46c0      	nop			@ (mov r8, r8)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2120      	movs	r1, #32
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80047c4:	e007      	b.n	80047d6 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	699a      	ldr	r2, [r3, #24]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	2108      	movs	r1, #8
 80047d2:	430a      	orrs	r2, r1
 80047d4:	619a      	str	r2, [r3, #24]
}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	46bd      	mov	sp, r7
 80047da:	b020      	add	sp, #128	@ 0x80
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			@ (mov r8, r8)
 80047e0:	fffffeff 	.word	0xfffffeff
 80047e4:	effffffe 	.word	0xeffffffe
 80047e8:	fbffffff 	.word	0xfbffffff
 80047ec:	efffffff 	.word	0xefffffff
 80047f0:	08004151 	.word	0x08004151

080047f4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b0a2      	sub	sp, #136	@ 0x88
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80047fc:	2382      	movs	r3, #130	@ 0x82
 80047fe:	18fb      	adds	r3, r7, r3
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	2160      	movs	r1, #96	@ 0x60
 8004804:	5a52      	ldrh	r2, [r2, r1]
 8004806:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	2284      	movs	r2, #132	@ 0x84
 8004810:	18ba      	adds	r2, r7, r2
 8004812:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	228c      	movs	r2, #140	@ 0x8c
 8004828:	589b      	ldr	r3, [r3, r2]
 800482a:	2b22      	cmp	r3, #34	@ 0x22
 800482c:	d000      	beq.n	8004830 <UART_RxISR_16BIT_FIFOEN+0x3c>
 800482e:	e170      	b.n	8004b12 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004830:	2376      	movs	r3, #118	@ 0x76
 8004832:	18fb      	adds	r3, r7, r3
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	2168      	movs	r1, #104	@ 0x68
 8004838:	5a52      	ldrh	r2, [r2, r1]
 800483a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800483c:	e115      	b.n	8004a6a <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004844:	2174      	movs	r1, #116	@ 0x74
 8004846:	187b      	adds	r3, r7, r1
 8004848:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800484e:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8004850:	187b      	adds	r3, r7, r1
 8004852:	2282      	movs	r2, #130	@ 0x82
 8004854:	18ba      	adds	r2, r7, r2
 8004856:	881b      	ldrh	r3, [r3, #0]
 8004858:	8812      	ldrh	r2, [r2, #0]
 800485a:	4013      	ands	r3, r2
 800485c:	b29a      	uxth	r2, r3
 800485e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004860:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004866:	1c9a      	adds	r2, r3, #2
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	225e      	movs	r2, #94	@ 0x5e
 8004870:	5a9b      	ldrh	r3, [r3, r2]
 8004872:	b29b      	uxth	r3, r3
 8004874:	3b01      	subs	r3, #1
 8004876:	b299      	uxth	r1, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	225e      	movs	r2, #94	@ 0x5e
 800487c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	69db      	ldr	r3, [r3, #28]
 8004884:	2184      	movs	r1, #132	@ 0x84
 8004886:	187a      	adds	r2, r7, r1
 8004888:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800488a:	187b      	adds	r3, r7, r1
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2207      	movs	r2, #7
 8004890:	4013      	ands	r3, r2
 8004892:	d04e      	beq.n	8004932 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004894:	187b      	adds	r3, r7, r1
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2201      	movs	r2, #1
 800489a:	4013      	ands	r3, r2
 800489c:	d010      	beq.n	80048c0 <UART_RxISR_16BIT_FIFOEN+0xcc>
 800489e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	005b      	lsls	r3, r3, #1
 80048a4:	4013      	ands	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2201      	movs	r2, #1
 80048ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2290      	movs	r2, #144	@ 0x90
 80048b4:	589b      	ldr	r3, [r3, r2]
 80048b6:	2201      	movs	r2, #1
 80048b8:	431a      	orrs	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2190      	movs	r1, #144	@ 0x90
 80048be:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048c0:	2384      	movs	r3, #132	@ 0x84
 80048c2:	18fb      	adds	r3, r7, r3
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	2202      	movs	r2, #2
 80048c8:	4013      	ands	r3, r2
 80048ca:	d00f      	beq.n	80048ec <UART_RxISR_16BIT_FIFOEN+0xf8>
 80048cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048ce:	2201      	movs	r2, #1
 80048d0:	4013      	ands	r3, r2
 80048d2:	d00b      	beq.n	80048ec <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2202      	movs	r2, #2
 80048da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2290      	movs	r2, #144	@ 0x90
 80048e0:	589b      	ldr	r3, [r3, r2]
 80048e2:	2204      	movs	r2, #4
 80048e4:	431a      	orrs	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2190      	movs	r1, #144	@ 0x90
 80048ea:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80048ec:	2384      	movs	r3, #132	@ 0x84
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2204      	movs	r2, #4
 80048f4:	4013      	ands	r3, r2
 80048f6:	d00f      	beq.n	8004918 <UART_RxISR_16BIT_FIFOEN+0x124>
 80048f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048fa:	2201      	movs	r2, #1
 80048fc:	4013      	ands	r3, r2
 80048fe:	d00b      	beq.n	8004918 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2204      	movs	r2, #4
 8004906:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2290      	movs	r2, #144	@ 0x90
 800490c:	589b      	ldr	r3, [r3, r2]
 800490e:	2202      	movs	r2, #2
 8004910:	431a      	orrs	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2190      	movs	r1, #144	@ 0x90
 8004916:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2290      	movs	r2, #144	@ 0x90
 800491c:	589b      	ldr	r3, [r3, r2]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d007      	beq.n	8004932 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f7fe fee5 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2290      	movs	r2, #144	@ 0x90
 800492e:	2100      	movs	r1, #0
 8004930:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	225e      	movs	r2, #94	@ 0x5e
 8004936:	5a9b      	ldrh	r3, [r3, r2]
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d000      	beq.n	8004940 <UART_RxISR_16BIT_FIFOEN+0x14c>
 800493e:	e094      	b.n	8004a6a <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004940:	f3ef 8310 	mrs	r3, PRIMASK
 8004944:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004946:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004948:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800494a:	2301      	movs	r3, #1
 800494c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800494e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004950:	f383 8810 	msr	PRIMASK, r3
}
 8004954:	46c0      	nop			@ (mov r8, r8)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4972      	ldr	r1, [pc, #456]	@ (8004b2c <UART_RxISR_16BIT_FIFOEN+0x338>)
 8004962:	400a      	ands	r2, r1
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004968:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800496a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800496c:	f383 8810 	msr	PRIMASK, r3
}
 8004970:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004972:	f3ef 8310 	mrs	r3, PRIMASK
 8004976:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004978:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800497a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800497c:	2301      	movs	r3, #1
 800497e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004980:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004982:	f383 8810 	msr	PRIMASK, r3
}
 8004986:	46c0      	nop			@ (mov r8, r8)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689a      	ldr	r2, [r3, #8]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4967      	ldr	r1, [pc, #412]	@ (8004b30 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8004994:	400a      	ands	r2, r1
 8004996:	609a      	str	r2, [r3, #8]
 8004998:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800499a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800499c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800499e:	f383 8810 	msr	PRIMASK, r3
}
 80049a2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	228c      	movs	r2, #140	@ 0x8c
 80049a8:	2120      	movs	r1, #32
 80049aa:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685a      	ldr	r2, [r3, #4]
 80049be:	2380      	movs	r3, #128	@ 0x80
 80049c0:	041b      	lsls	r3, r3, #16
 80049c2:	4013      	ands	r3, r2
 80049c4:	d018      	beq.n	80049f8 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80049c6:	f3ef 8310 	mrs	r3, PRIMASK
 80049ca:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80049cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80049ce:	667b      	str	r3, [r7, #100]	@ 0x64
 80049d0:	2301      	movs	r3, #1
 80049d2:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049d6:	f383 8810 	msr	PRIMASK, r3
}
 80049da:	46c0      	nop			@ (mov r8, r8)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4953      	ldr	r1, [pc, #332]	@ (8004b34 <UART_RxISR_16BIT_FIFOEN+0x340>)
 80049e8:	400a      	ands	r2, r1
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80049ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049f2:	f383 8810 	msr	PRIMASK, r3
}
 80049f6:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d12f      	bne.n	8004a60 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2200      	movs	r2, #0
 8004a04:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a06:	f3ef 8310 	mrs	r3, PRIMASK
 8004a0a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a0e:	663b      	str	r3, [r7, #96]	@ 0x60
 8004a10:	2301      	movs	r3, #1
 8004a12:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a16:	f383 8810 	msr	PRIMASK, r3
}
 8004a1a:	46c0      	nop			@ (mov r8, r8)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	2110      	movs	r1, #16
 8004a28:	438a      	bics	r2, r1
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a32:	f383 8810 	msr	PRIMASK, r3
}
 8004a36:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	2210      	movs	r2, #16
 8004a40:	4013      	ands	r3, r2
 8004a42:	2b10      	cmp	r3, #16
 8004a44:	d103      	bne.n	8004a4e <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	2210      	movs	r2, #16
 8004a4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	225c      	movs	r2, #92	@ 0x5c
 8004a52:	5a9a      	ldrh	r2, [r3, r2]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	0011      	movs	r1, r2
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f7fe fe53 	bl	8003704 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004a5e:	e010      	b.n	8004a82 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7fe fe3e 	bl	80036e4 <HAL_UART_RxCpltCallback>
        break;
 8004a68:	e00b      	b.n	8004a82 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004a6a:	2376      	movs	r3, #118	@ 0x76
 8004a6c:	18fb      	adds	r3, r7, r3
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d006      	beq.n	8004a82 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8004a74:	2384      	movs	r3, #132	@ 0x84
 8004a76:	18fb      	adds	r3, r7, r3
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	d000      	beq.n	8004a82 <UART_RxISR_16BIT_FIFOEN+0x28e>
 8004a80:	e6dd      	b.n	800483e <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8004a82:	205e      	movs	r0, #94	@ 0x5e
 8004a84:	183b      	adds	r3, r7, r0
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	215e      	movs	r1, #94	@ 0x5e
 8004a8a:	5a52      	ldrh	r2, [r2, r1]
 8004a8c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004a8e:	0001      	movs	r1, r0
 8004a90:	187b      	adds	r3, r7, r1
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d044      	beq.n	8004b22 <UART_RxISR_16BIT_FIFOEN+0x32e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2268      	movs	r2, #104	@ 0x68
 8004a9c:	5a9b      	ldrh	r3, [r3, r2]
 8004a9e:	187a      	adds	r2, r7, r1
 8004aa0:	8812      	ldrh	r2, [r2, #0]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d23d      	bcs.n	8004b22 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004aa6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aaa:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004aae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	f383 8810 	msr	PRIMASK, r3
}
 8004aba:	46c0      	nop			@ (mov r8, r8)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689a      	ldr	r2, [r3, #8]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	491c      	ldr	r1, [pc, #112]	@ (8004b38 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8004ac8:	400a      	ands	r2, r1
 8004aca:	609a      	str	r2, [r3, #8]
 8004acc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004ace:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	f383 8810 	msr	PRIMASK, r3
}
 8004ad6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	4a18      	ldr	r2, [pc, #96]	@ (8004b3c <UART_RxISR_16BIT_FIFOEN+0x348>)
 8004adc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ade:	f3ef 8310 	mrs	r3, PRIMASK
 8004ae2:	61bb      	str	r3, [r7, #24]
  return(result);
 8004ae4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ae6:	657b      	str	r3, [r7, #84]	@ 0x54
 8004ae8:	2301      	movs	r3, #1
 8004aea:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	f383 8810 	msr	PRIMASK, r3
}
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2120      	movs	r1, #32
 8004b00:	430a      	orrs	r2, r1
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004b06:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b08:	6a3b      	ldr	r3, [r7, #32]
 8004b0a:	f383 8810 	msr	PRIMASK, r3
}
 8004b0e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004b10:	e007      	b.n	8004b22 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	2108      	movs	r1, #8
 8004b1e:	430a      	orrs	r2, r1
 8004b20:	619a      	str	r2, [r3, #24]
}
 8004b22:	46c0      	nop			@ (mov r8, r8)
 8004b24:	46bd      	mov	sp, r7
 8004b26:	b022      	add	sp, #136	@ 0x88
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	fffffeff 	.word	0xfffffeff
 8004b30:	effffffe 	.word	0xeffffffe
 8004b34:	fbffffff 	.word	0xfbffffff
 8004b38:	efffffff 	.word	0xefffffff
 8004b3c:	08004309 	.word	0x08004309

08004b40 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b082      	sub	sp, #8
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004b48:	46c0      	nop			@ (mov r8, r8)
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004b58:	46c0      	nop			@ (mov r8, r8)
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b002      	add	sp, #8
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b082      	sub	sp, #8
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004b68:	46c0      	nop			@ (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b002      	add	sp, #8
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <std>:
 8004b70:	2300      	movs	r3, #0
 8004b72:	b510      	push	{r4, lr}
 8004b74:	0004      	movs	r4, r0
 8004b76:	6003      	str	r3, [r0, #0]
 8004b78:	6043      	str	r3, [r0, #4]
 8004b7a:	6083      	str	r3, [r0, #8]
 8004b7c:	8181      	strh	r1, [r0, #12]
 8004b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004b80:	81c2      	strh	r2, [r0, #14]
 8004b82:	6103      	str	r3, [r0, #16]
 8004b84:	6143      	str	r3, [r0, #20]
 8004b86:	6183      	str	r3, [r0, #24]
 8004b88:	0019      	movs	r1, r3
 8004b8a:	2208      	movs	r2, #8
 8004b8c:	305c      	adds	r0, #92	@ 0x5c
 8004b8e:	f000 fa6d 	bl	800506c <memset>
 8004b92:	4b0b      	ldr	r3, [pc, #44]	@ (8004bc0 <std+0x50>)
 8004b94:	6224      	str	r4, [r4, #32]
 8004b96:	6263      	str	r3, [r4, #36]	@ 0x24
 8004b98:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc4 <std+0x54>)
 8004b9a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004b9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004bc8 <std+0x58>)
 8004b9e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ba0:	4b0a      	ldr	r3, [pc, #40]	@ (8004bcc <std+0x5c>)
 8004ba2:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd0 <std+0x60>)
 8004ba6:	429c      	cmp	r4, r3
 8004ba8:	d005      	beq.n	8004bb6 <std+0x46>
 8004baa:	4b0a      	ldr	r3, [pc, #40]	@ (8004bd4 <std+0x64>)
 8004bac:	429c      	cmp	r4, r3
 8004bae:	d002      	beq.n	8004bb6 <std+0x46>
 8004bb0:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <std+0x68>)
 8004bb2:	429c      	cmp	r4, r3
 8004bb4:	d103      	bne.n	8004bbe <std+0x4e>
 8004bb6:	0020      	movs	r0, r4
 8004bb8:	3058      	adds	r0, #88	@ 0x58
 8004bba:	f000 faed 	bl	8005198 <__retarget_lock_init_recursive>
 8004bbe:	bd10      	pop	{r4, pc}
 8004bc0:	08004e91 	.word	0x08004e91
 8004bc4:	08004ebd 	.word	0x08004ebd
 8004bc8:	08004ef5 	.word	0x08004ef5
 8004bcc:	08004f21 	.word	0x08004f21
 8004bd0:	2000024c 	.word	0x2000024c
 8004bd4:	200002b4 	.word	0x200002b4
 8004bd8:	2000031c 	.word	0x2000031c

08004bdc <stdio_exit_handler>:
 8004bdc:	b510      	push	{r4, lr}
 8004bde:	4a03      	ldr	r2, [pc, #12]	@ (8004bec <stdio_exit_handler+0x10>)
 8004be0:	4903      	ldr	r1, [pc, #12]	@ (8004bf0 <stdio_exit_handler+0x14>)
 8004be2:	4804      	ldr	r0, [pc, #16]	@ (8004bf4 <stdio_exit_handler+0x18>)
 8004be4:	f000 f86c 	bl	8004cc0 <_fwalk_sglue>
 8004be8:	bd10      	pop	{r4, pc}
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	2000000c 	.word	0x2000000c
 8004bf0:	08006321 	.word	0x08006321
 8004bf4:	2000001c 	.word	0x2000001c

08004bf8 <cleanup_stdio>:
 8004bf8:	6841      	ldr	r1, [r0, #4]
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	@ (8004c28 <cleanup_stdio+0x30>)
 8004bfc:	b510      	push	{r4, lr}
 8004bfe:	0004      	movs	r4, r0
 8004c00:	4299      	cmp	r1, r3
 8004c02:	d001      	beq.n	8004c08 <cleanup_stdio+0x10>
 8004c04:	f001 fb8c 	bl	8006320 <_fflush_r>
 8004c08:	68a1      	ldr	r1, [r4, #8]
 8004c0a:	4b08      	ldr	r3, [pc, #32]	@ (8004c2c <cleanup_stdio+0x34>)
 8004c0c:	4299      	cmp	r1, r3
 8004c0e:	d002      	beq.n	8004c16 <cleanup_stdio+0x1e>
 8004c10:	0020      	movs	r0, r4
 8004c12:	f001 fb85 	bl	8006320 <_fflush_r>
 8004c16:	68e1      	ldr	r1, [r4, #12]
 8004c18:	4b05      	ldr	r3, [pc, #20]	@ (8004c30 <cleanup_stdio+0x38>)
 8004c1a:	4299      	cmp	r1, r3
 8004c1c:	d002      	beq.n	8004c24 <cleanup_stdio+0x2c>
 8004c1e:	0020      	movs	r0, r4
 8004c20:	f001 fb7e 	bl	8006320 <_fflush_r>
 8004c24:	bd10      	pop	{r4, pc}
 8004c26:	46c0      	nop			@ (mov r8, r8)
 8004c28:	2000024c 	.word	0x2000024c
 8004c2c:	200002b4 	.word	0x200002b4
 8004c30:	2000031c 	.word	0x2000031c

08004c34 <global_stdio_init.part.0>:
 8004c34:	b510      	push	{r4, lr}
 8004c36:	4b09      	ldr	r3, [pc, #36]	@ (8004c5c <global_stdio_init.part.0+0x28>)
 8004c38:	4a09      	ldr	r2, [pc, #36]	@ (8004c60 <global_stdio_init.part.0+0x2c>)
 8004c3a:	2104      	movs	r1, #4
 8004c3c:	601a      	str	r2, [r3, #0]
 8004c3e:	4809      	ldr	r0, [pc, #36]	@ (8004c64 <global_stdio_init.part.0+0x30>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	f7ff ff95 	bl	8004b70 <std>
 8004c46:	2201      	movs	r2, #1
 8004c48:	2109      	movs	r1, #9
 8004c4a:	4807      	ldr	r0, [pc, #28]	@ (8004c68 <global_stdio_init.part.0+0x34>)
 8004c4c:	f7ff ff90 	bl	8004b70 <std>
 8004c50:	2202      	movs	r2, #2
 8004c52:	2112      	movs	r1, #18
 8004c54:	4805      	ldr	r0, [pc, #20]	@ (8004c6c <global_stdio_init.part.0+0x38>)
 8004c56:	f7ff ff8b 	bl	8004b70 <std>
 8004c5a:	bd10      	pop	{r4, pc}
 8004c5c:	20000384 	.word	0x20000384
 8004c60:	08004bdd 	.word	0x08004bdd
 8004c64:	2000024c 	.word	0x2000024c
 8004c68:	200002b4 	.word	0x200002b4
 8004c6c:	2000031c 	.word	0x2000031c

08004c70 <__sfp_lock_acquire>:
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4802      	ldr	r0, [pc, #8]	@ (8004c7c <__sfp_lock_acquire+0xc>)
 8004c74:	f000 fa91 	bl	800519a <__retarget_lock_acquire_recursive>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	46c0      	nop			@ (mov r8, r8)
 8004c7c:	2000038d 	.word	0x2000038d

08004c80 <__sfp_lock_release>:
 8004c80:	b510      	push	{r4, lr}
 8004c82:	4802      	ldr	r0, [pc, #8]	@ (8004c8c <__sfp_lock_release+0xc>)
 8004c84:	f000 fa8a 	bl	800519c <__retarget_lock_release_recursive>
 8004c88:	bd10      	pop	{r4, pc}
 8004c8a:	46c0      	nop			@ (mov r8, r8)
 8004c8c:	2000038d 	.word	0x2000038d

08004c90 <__sinit>:
 8004c90:	b510      	push	{r4, lr}
 8004c92:	0004      	movs	r4, r0
 8004c94:	f7ff ffec 	bl	8004c70 <__sfp_lock_acquire>
 8004c98:	6a23      	ldr	r3, [r4, #32]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d002      	beq.n	8004ca4 <__sinit+0x14>
 8004c9e:	f7ff ffef 	bl	8004c80 <__sfp_lock_release>
 8004ca2:	bd10      	pop	{r4, pc}
 8004ca4:	4b04      	ldr	r3, [pc, #16]	@ (8004cb8 <__sinit+0x28>)
 8004ca6:	6223      	str	r3, [r4, #32]
 8004ca8:	4b04      	ldr	r3, [pc, #16]	@ (8004cbc <__sinit+0x2c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d1f6      	bne.n	8004c9e <__sinit+0xe>
 8004cb0:	f7ff ffc0 	bl	8004c34 <global_stdio_init.part.0>
 8004cb4:	e7f3      	b.n	8004c9e <__sinit+0xe>
 8004cb6:	46c0      	nop			@ (mov r8, r8)
 8004cb8:	08004bf9 	.word	0x08004bf9
 8004cbc:	20000384 	.word	0x20000384

08004cc0 <_fwalk_sglue>:
 8004cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cc2:	0014      	movs	r4, r2
 8004cc4:	2600      	movs	r6, #0
 8004cc6:	9000      	str	r0, [sp, #0]
 8004cc8:	9101      	str	r1, [sp, #4]
 8004cca:	68a5      	ldr	r5, [r4, #8]
 8004ccc:	6867      	ldr	r7, [r4, #4]
 8004cce:	3f01      	subs	r7, #1
 8004cd0:	d504      	bpl.n	8004cdc <_fwalk_sglue+0x1c>
 8004cd2:	6824      	ldr	r4, [r4, #0]
 8004cd4:	2c00      	cmp	r4, #0
 8004cd6:	d1f8      	bne.n	8004cca <_fwalk_sglue+0xa>
 8004cd8:	0030      	movs	r0, r6
 8004cda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004cdc:	89ab      	ldrh	r3, [r5, #12]
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d908      	bls.n	8004cf4 <_fwalk_sglue+0x34>
 8004ce2:	220e      	movs	r2, #14
 8004ce4:	5eab      	ldrsh	r3, [r5, r2]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	d004      	beq.n	8004cf4 <_fwalk_sglue+0x34>
 8004cea:	0029      	movs	r1, r5
 8004cec:	9800      	ldr	r0, [sp, #0]
 8004cee:	9b01      	ldr	r3, [sp, #4]
 8004cf0:	4798      	blx	r3
 8004cf2:	4306      	orrs	r6, r0
 8004cf4:	3568      	adds	r5, #104	@ 0x68
 8004cf6:	e7ea      	b.n	8004cce <_fwalk_sglue+0xe>

08004cf8 <iprintf>:
 8004cf8:	b40f      	push	{r0, r1, r2, r3}
 8004cfa:	b507      	push	{r0, r1, r2, lr}
 8004cfc:	4905      	ldr	r1, [pc, #20]	@ (8004d14 <iprintf+0x1c>)
 8004cfe:	ab04      	add	r3, sp, #16
 8004d00:	6808      	ldr	r0, [r1, #0]
 8004d02:	cb04      	ldmia	r3!, {r2}
 8004d04:	6881      	ldr	r1, [r0, #8]
 8004d06:	9301      	str	r3, [sp, #4]
 8004d08:	f000 fe8a 	bl	8005a20 <_vfiprintf_r>
 8004d0c:	b003      	add	sp, #12
 8004d0e:	bc08      	pop	{r3}
 8004d10:	b004      	add	sp, #16
 8004d12:	4718      	bx	r3
 8004d14:	20000018 	.word	0x20000018

08004d18 <_puts_r>:
 8004d18:	6a03      	ldr	r3, [r0, #32]
 8004d1a:	b570      	push	{r4, r5, r6, lr}
 8004d1c:	0005      	movs	r5, r0
 8004d1e:	000e      	movs	r6, r1
 8004d20:	6884      	ldr	r4, [r0, #8]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d101      	bne.n	8004d2a <_puts_r+0x12>
 8004d26:	f7ff ffb3 	bl	8004c90 <__sinit>
 8004d2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d2c:	07db      	lsls	r3, r3, #31
 8004d2e:	d405      	bmi.n	8004d3c <_puts_r+0x24>
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	059b      	lsls	r3, r3, #22
 8004d34:	d402      	bmi.n	8004d3c <_puts_r+0x24>
 8004d36:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d38:	f000 fa2f 	bl	800519a <__retarget_lock_acquire_recursive>
 8004d3c:	89a3      	ldrh	r3, [r4, #12]
 8004d3e:	071b      	lsls	r3, r3, #28
 8004d40:	d502      	bpl.n	8004d48 <_puts_r+0x30>
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d11f      	bne.n	8004d88 <_puts_r+0x70>
 8004d48:	0021      	movs	r1, r4
 8004d4a:	0028      	movs	r0, r5
 8004d4c:	f000 f930 	bl	8004fb0 <__swsetup_r>
 8004d50:	2800      	cmp	r0, #0
 8004d52:	d019      	beq.n	8004d88 <_puts_r+0x70>
 8004d54:	2501      	movs	r5, #1
 8004d56:	426d      	negs	r5, r5
 8004d58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d5a:	07db      	lsls	r3, r3, #31
 8004d5c:	d405      	bmi.n	8004d6a <_puts_r+0x52>
 8004d5e:	89a3      	ldrh	r3, [r4, #12]
 8004d60:	059b      	lsls	r3, r3, #22
 8004d62:	d402      	bmi.n	8004d6a <_puts_r+0x52>
 8004d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d66:	f000 fa19 	bl	800519c <__retarget_lock_release_recursive>
 8004d6a:	0028      	movs	r0, r5
 8004d6c:	bd70      	pop	{r4, r5, r6, pc}
 8004d6e:	3601      	adds	r6, #1
 8004d70:	60a3      	str	r3, [r4, #8]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da04      	bge.n	8004d80 <_puts_r+0x68>
 8004d76:	69a2      	ldr	r2, [r4, #24]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	dc16      	bgt.n	8004daa <_puts_r+0x92>
 8004d7c:	290a      	cmp	r1, #10
 8004d7e:	d014      	beq.n	8004daa <_puts_r+0x92>
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	6022      	str	r2, [r4, #0]
 8004d86:	7019      	strb	r1, [r3, #0]
 8004d88:	68a3      	ldr	r3, [r4, #8]
 8004d8a:	7831      	ldrb	r1, [r6, #0]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	2900      	cmp	r1, #0
 8004d90:	d1ed      	bne.n	8004d6e <_puts_r+0x56>
 8004d92:	60a3      	str	r3, [r4, #8]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	da0f      	bge.n	8004db8 <_puts_r+0xa0>
 8004d98:	0022      	movs	r2, r4
 8004d9a:	0028      	movs	r0, r5
 8004d9c:	310a      	adds	r1, #10
 8004d9e:	f000 f8c5 	bl	8004f2c <__swbuf_r>
 8004da2:	3001      	adds	r0, #1
 8004da4:	d0d6      	beq.n	8004d54 <_puts_r+0x3c>
 8004da6:	250a      	movs	r5, #10
 8004da8:	e7d6      	b.n	8004d58 <_puts_r+0x40>
 8004daa:	0022      	movs	r2, r4
 8004dac:	0028      	movs	r0, r5
 8004dae:	f000 f8bd 	bl	8004f2c <__swbuf_r>
 8004db2:	3001      	adds	r0, #1
 8004db4:	d1e8      	bne.n	8004d88 <_puts_r+0x70>
 8004db6:	e7cd      	b.n	8004d54 <_puts_r+0x3c>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	6022      	str	r2, [r4, #0]
 8004dbe:	220a      	movs	r2, #10
 8004dc0:	701a      	strb	r2, [r3, #0]
 8004dc2:	e7f0      	b.n	8004da6 <_puts_r+0x8e>

08004dc4 <puts>:
 8004dc4:	b510      	push	{r4, lr}
 8004dc6:	4b03      	ldr	r3, [pc, #12]	@ (8004dd4 <puts+0x10>)
 8004dc8:	0001      	movs	r1, r0
 8004dca:	6818      	ldr	r0, [r3, #0]
 8004dcc:	f7ff ffa4 	bl	8004d18 <_puts_r>
 8004dd0:	bd10      	pop	{r4, pc}
 8004dd2:	46c0      	nop			@ (mov r8, r8)
 8004dd4:	20000018 	.word	0x20000018

08004dd8 <sniprintf>:
 8004dd8:	b40c      	push	{r2, r3}
 8004dda:	b530      	push	{r4, r5, lr}
 8004ddc:	4b17      	ldr	r3, [pc, #92]	@ (8004e3c <sniprintf+0x64>)
 8004dde:	000c      	movs	r4, r1
 8004de0:	681d      	ldr	r5, [r3, #0]
 8004de2:	b09d      	sub	sp, #116	@ 0x74
 8004de4:	2900      	cmp	r1, #0
 8004de6:	da08      	bge.n	8004dfa <sniprintf+0x22>
 8004de8:	238b      	movs	r3, #139	@ 0x8b
 8004dea:	2001      	movs	r0, #1
 8004dec:	602b      	str	r3, [r5, #0]
 8004dee:	4240      	negs	r0, r0
 8004df0:	b01d      	add	sp, #116	@ 0x74
 8004df2:	bc30      	pop	{r4, r5}
 8004df4:	bc08      	pop	{r3}
 8004df6:	b002      	add	sp, #8
 8004df8:	4718      	bx	r3
 8004dfa:	2382      	movs	r3, #130	@ 0x82
 8004dfc:	466a      	mov	r2, sp
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	8293      	strh	r3, [r2, #20]
 8004e02:	2300      	movs	r3, #0
 8004e04:	9002      	str	r0, [sp, #8]
 8004e06:	9006      	str	r0, [sp, #24]
 8004e08:	4299      	cmp	r1, r3
 8004e0a:	d000      	beq.n	8004e0e <sniprintf+0x36>
 8004e0c:	1e4b      	subs	r3, r1, #1
 8004e0e:	9304      	str	r3, [sp, #16]
 8004e10:	9307      	str	r3, [sp, #28]
 8004e12:	2301      	movs	r3, #1
 8004e14:	466a      	mov	r2, sp
 8004e16:	425b      	negs	r3, r3
 8004e18:	82d3      	strh	r3, [r2, #22]
 8004e1a:	0028      	movs	r0, r5
 8004e1c:	ab21      	add	r3, sp, #132	@ 0x84
 8004e1e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004e20:	a902      	add	r1, sp, #8
 8004e22:	9301      	str	r3, [sp, #4]
 8004e24:	f000 fb18 	bl	8005458 <_svfiprintf_r>
 8004e28:	1c43      	adds	r3, r0, #1
 8004e2a:	da01      	bge.n	8004e30 <sniprintf+0x58>
 8004e2c:	238b      	movs	r3, #139	@ 0x8b
 8004e2e:	602b      	str	r3, [r5, #0]
 8004e30:	2c00      	cmp	r4, #0
 8004e32:	d0dd      	beq.n	8004df0 <sniprintf+0x18>
 8004e34:	2200      	movs	r2, #0
 8004e36:	9b02      	ldr	r3, [sp, #8]
 8004e38:	701a      	strb	r2, [r3, #0]
 8004e3a:	e7d9      	b.n	8004df0 <sniprintf+0x18>
 8004e3c:	20000018 	.word	0x20000018

08004e40 <siscanf>:
 8004e40:	b40e      	push	{r1, r2, r3}
 8004e42:	b530      	push	{r4, r5, lr}
 8004e44:	2381      	movs	r3, #129	@ 0x81
 8004e46:	b09c      	sub	sp, #112	@ 0x70
 8004e48:	466a      	mov	r2, sp
 8004e4a:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	cc20      	ldmia	r4!, {r5}
 8004e50:	8293      	strh	r3, [r2, #20]
 8004e52:	9002      	str	r0, [sp, #8]
 8004e54:	9006      	str	r0, [sp, #24]
 8004e56:	f7fb f957 	bl	8000108 <strlen>
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8004e88 <siscanf+0x48>)
 8004e5c:	466a      	mov	r2, sp
 8004e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004e60:	2300      	movs	r3, #0
 8004e62:	9003      	str	r0, [sp, #12]
 8004e64:	9007      	str	r0, [sp, #28]
 8004e66:	4809      	ldr	r0, [pc, #36]	@ (8004e8c <siscanf+0x4c>)
 8004e68:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004e6a:	9314      	str	r3, [sp, #80]	@ 0x50
 8004e6c:	3b01      	subs	r3, #1
 8004e6e:	82d3      	strh	r3, [r2, #22]
 8004e70:	a902      	add	r1, sp, #8
 8004e72:	0023      	movs	r3, r4
 8004e74:	002a      	movs	r2, r5
 8004e76:	6800      	ldr	r0, [r0, #0]
 8004e78:	9401      	str	r4, [sp, #4]
 8004e7a:	f000 fc47 	bl	800570c <__ssvfiscanf_r>
 8004e7e:	b01c      	add	sp, #112	@ 0x70
 8004e80:	bc30      	pop	{r4, r5}
 8004e82:	bc08      	pop	{r3}
 8004e84:	b003      	add	sp, #12
 8004e86:	4718      	bx	r3
 8004e88:	08004eb9 	.word	0x08004eb9
 8004e8c:	20000018 	.word	0x20000018

08004e90 <__sread>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	000c      	movs	r4, r1
 8004e94:	250e      	movs	r5, #14
 8004e96:	5f49      	ldrsh	r1, [r1, r5]
 8004e98:	f000 f92c 	bl	80050f4 <_read_r>
 8004e9c:	2800      	cmp	r0, #0
 8004e9e:	db03      	blt.n	8004ea8 <__sread+0x18>
 8004ea0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004ea2:	181b      	adds	r3, r3, r0
 8004ea4:	6563      	str	r3, [r4, #84]	@ 0x54
 8004ea6:	bd70      	pop	{r4, r5, r6, pc}
 8004ea8:	89a3      	ldrh	r3, [r4, #12]
 8004eaa:	4a02      	ldr	r2, [pc, #8]	@ (8004eb4 <__sread+0x24>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	81a3      	strh	r3, [r4, #12]
 8004eb0:	e7f9      	b.n	8004ea6 <__sread+0x16>
 8004eb2:	46c0      	nop			@ (mov r8, r8)
 8004eb4:	ffffefff 	.word	0xffffefff

08004eb8 <__seofread>:
 8004eb8:	2000      	movs	r0, #0
 8004eba:	4770      	bx	lr

08004ebc <__swrite>:
 8004ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ebe:	001f      	movs	r7, r3
 8004ec0:	898b      	ldrh	r3, [r1, #12]
 8004ec2:	0005      	movs	r5, r0
 8004ec4:	000c      	movs	r4, r1
 8004ec6:	0016      	movs	r6, r2
 8004ec8:	05db      	lsls	r3, r3, #23
 8004eca:	d505      	bpl.n	8004ed8 <__swrite+0x1c>
 8004ecc:	230e      	movs	r3, #14
 8004ece:	5ec9      	ldrsh	r1, [r1, r3]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	2302      	movs	r3, #2
 8004ed4:	f000 f8fa 	bl	80050cc <_lseek_r>
 8004ed8:	89a3      	ldrh	r3, [r4, #12]
 8004eda:	4a05      	ldr	r2, [pc, #20]	@ (8004ef0 <__swrite+0x34>)
 8004edc:	0028      	movs	r0, r5
 8004ede:	4013      	ands	r3, r2
 8004ee0:	81a3      	strh	r3, [r4, #12]
 8004ee2:	0032      	movs	r2, r6
 8004ee4:	230e      	movs	r3, #14
 8004ee6:	5ee1      	ldrsh	r1, [r4, r3]
 8004ee8:	003b      	movs	r3, r7
 8004eea:	f000 f917 	bl	800511c <_write_r>
 8004eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef0:	ffffefff 	.word	0xffffefff

08004ef4 <__sseek>:
 8004ef4:	b570      	push	{r4, r5, r6, lr}
 8004ef6:	000c      	movs	r4, r1
 8004ef8:	250e      	movs	r5, #14
 8004efa:	5f49      	ldrsh	r1, [r1, r5]
 8004efc:	f000 f8e6 	bl	80050cc <_lseek_r>
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	1c42      	adds	r2, r0, #1
 8004f04:	d103      	bne.n	8004f0e <__sseek+0x1a>
 8004f06:	4a05      	ldr	r2, [pc, #20]	@ (8004f1c <__sseek+0x28>)
 8004f08:	4013      	ands	r3, r2
 8004f0a:	81a3      	strh	r3, [r4, #12]
 8004f0c:	bd70      	pop	{r4, r5, r6, pc}
 8004f0e:	2280      	movs	r2, #128	@ 0x80
 8004f10:	0152      	lsls	r2, r2, #5
 8004f12:	4313      	orrs	r3, r2
 8004f14:	81a3      	strh	r3, [r4, #12]
 8004f16:	6560      	str	r0, [r4, #84]	@ 0x54
 8004f18:	e7f8      	b.n	8004f0c <__sseek+0x18>
 8004f1a:	46c0      	nop			@ (mov r8, r8)
 8004f1c:	ffffefff 	.word	0xffffefff

08004f20 <__sclose>:
 8004f20:	b510      	push	{r4, lr}
 8004f22:	230e      	movs	r3, #14
 8004f24:	5ec9      	ldrsh	r1, [r1, r3]
 8004f26:	f000 f8bf 	bl	80050a8 <_close_r>
 8004f2a:	bd10      	pop	{r4, pc}

08004f2c <__swbuf_r>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	0006      	movs	r6, r0
 8004f30:	000d      	movs	r5, r1
 8004f32:	0014      	movs	r4, r2
 8004f34:	2800      	cmp	r0, #0
 8004f36:	d004      	beq.n	8004f42 <__swbuf_r+0x16>
 8004f38:	6a03      	ldr	r3, [r0, #32]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <__swbuf_r+0x16>
 8004f3e:	f7ff fea7 	bl	8004c90 <__sinit>
 8004f42:	69a3      	ldr	r3, [r4, #24]
 8004f44:	60a3      	str	r3, [r4, #8]
 8004f46:	89a3      	ldrh	r3, [r4, #12]
 8004f48:	071b      	lsls	r3, r3, #28
 8004f4a:	d502      	bpl.n	8004f52 <__swbuf_r+0x26>
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d109      	bne.n	8004f66 <__swbuf_r+0x3a>
 8004f52:	0021      	movs	r1, r4
 8004f54:	0030      	movs	r0, r6
 8004f56:	f000 f82b 	bl	8004fb0 <__swsetup_r>
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d003      	beq.n	8004f66 <__swbuf_r+0x3a>
 8004f5e:	2501      	movs	r5, #1
 8004f60:	426d      	negs	r5, r5
 8004f62:	0028      	movs	r0, r5
 8004f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f66:	6923      	ldr	r3, [r4, #16]
 8004f68:	6820      	ldr	r0, [r4, #0]
 8004f6a:	b2ef      	uxtb	r7, r5
 8004f6c:	1ac0      	subs	r0, r0, r3
 8004f6e:	6963      	ldr	r3, [r4, #20]
 8004f70:	b2ed      	uxtb	r5, r5
 8004f72:	4283      	cmp	r3, r0
 8004f74:	dc05      	bgt.n	8004f82 <__swbuf_r+0x56>
 8004f76:	0021      	movs	r1, r4
 8004f78:	0030      	movs	r0, r6
 8004f7a:	f001 f9d1 	bl	8006320 <_fflush_r>
 8004f7e:	2800      	cmp	r0, #0
 8004f80:	d1ed      	bne.n	8004f5e <__swbuf_r+0x32>
 8004f82:	68a3      	ldr	r3, [r4, #8]
 8004f84:	3001      	adds	r0, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	60a3      	str	r3, [r4, #8]
 8004f8a:	6823      	ldr	r3, [r4, #0]
 8004f8c:	1c5a      	adds	r2, r3, #1
 8004f8e:	6022      	str	r2, [r4, #0]
 8004f90:	701f      	strb	r7, [r3, #0]
 8004f92:	6963      	ldr	r3, [r4, #20]
 8004f94:	4283      	cmp	r3, r0
 8004f96:	d004      	beq.n	8004fa2 <__swbuf_r+0x76>
 8004f98:	89a3      	ldrh	r3, [r4, #12]
 8004f9a:	07db      	lsls	r3, r3, #31
 8004f9c:	d5e1      	bpl.n	8004f62 <__swbuf_r+0x36>
 8004f9e:	2d0a      	cmp	r5, #10
 8004fa0:	d1df      	bne.n	8004f62 <__swbuf_r+0x36>
 8004fa2:	0021      	movs	r1, r4
 8004fa4:	0030      	movs	r0, r6
 8004fa6:	f001 f9bb 	bl	8006320 <_fflush_r>
 8004faa:	2800      	cmp	r0, #0
 8004fac:	d0d9      	beq.n	8004f62 <__swbuf_r+0x36>
 8004fae:	e7d6      	b.n	8004f5e <__swbuf_r+0x32>

08004fb0 <__swsetup_r>:
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8005068 <__swsetup_r+0xb8>)
 8004fb2:	b570      	push	{r4, r5, r6, lr}
 8004fb4:	0005      	movs	r5, r0
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	000c      	movs	r4, r1
 8004fba:	2800      	cmp	r0, #0
 8004fbc:	d004      	beq.n	8004fc8 <__swsetup_r+0x18>
 8004fbe:	6a03      	ldr	r3, [r0, #32]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <__swsetup_r+0x18>
 8004fc4:	f7ff fe64 	bl	8004c90 <__sinit>
 8004fc8:	230c      	movs	r3, #12
 8004fca:	5ee2      	ldrsh	r2, [r4, r3]
 8004fcc:	0713      	lsls	r3, r2, #28
 8004fce:	d423      	bmi.n	8005018 <__swsetup_r+0x68>
 8004fd0:	06d3      	lsls	r3, r2, #27
 8004fd2:	d407      	bmi.n	8004fe4 <__swsetup_r+0x34>
 8004fd4:	2309      	movs	r3, #9
 8004fd6:	602b      	str	r3, [r5, #0]
 8004fd8:	2340      	movs	r3, #64	@ 0x40
 8004fda:	2001      	movs	r0, #1
 8004fdc:	4313      	orrs	r3, r2
 8004fde:	81a3      	strh	r3, [r4, #12]
 8004fe0:	4240      	negs	r0, r0
 8004fe2:	e03a      	b.n	800505a <__swsetup_r+0xaa>
 8004fe4:	0752      	lsls	r2, r2, #29
 8004fe6:	d513      	bpl.n	8005010 <__swsetup_r+0x60>
 8004fe8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004fea:	2900      	cmp	r1, #0
 8004fec:	d008      	beq.n	8005000 <__swsetup_r+0x50>
 8004fee:	0023      	movs	r3, r4
 8004ff0:	3344      	adds	r3, #68	@ 0x44
 8004ff2:	4299      	cmp	r1, r3
 8004ff4:	d002      	beq.n	8004ffc <__swsetup_r+0x4c>
 8004ff6:	0028      	movs	r0, r5
 8004ff8:	f000 f8d2 	bl	80051a0 <_free_r>
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005000:	2224      	movs	r2, #36	@ 0x24
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	4393      	bics	r3, r2
 8005006:	81a3      	strh	r3, [r4, #12]
 8005008:	2300      	movs	r3, #0
 800500a:	6063      	str	r3, [r4, #4]
 800500c:	6923      	ldr	r3, [r4, #16]
 800500e:	6023      	str	r3, [r4, #0]
 8005010:	2308      	movs	r3, #8
 8005012:	89a2      	ldrh	r2, [r4, #12]
 8005014:	4313      	orrs	r3, r2
 8005016:	81a3      	strh	r3, [r4, #12]
 8005018:	6923      	ldr	r3, [r4, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10b      	bne.n	8005036 <__swsetup_r+0x86>
 800501e:	21a0      	movs	r1, #160	@ 0xa0
 8005020:	2280      	movs	r2, #128	@ 0x80
 8005022:	89a3      	ldrh	r3, [r4, #12]
 8005024:	0089      	lsls	r1, r1, #2
 8005026:	0092      	lsls	r2, r2, #2
 8005028:	400b      	ands	r3, r1
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <__swsetup_r+0x86>
 800502e:	0021      	movs	r1, r4
 8005030:	0028      	movs	r0, r5
 8005032:	f001 f9cb 	bl	80063cc <__smakebuf_r>
 8005036:	230c      	movs	r3, #12
 8005038:	5ee2      	ldrsh	r2, [r4, r3]
 800503a:	2101      	movs	r1, #1
 800503c:	0013      	movs	r3, r2
 800503e:	400b      	ands	r3, r1
 8005040:	420a      	tst	r2, r1
 8005042:	d00b      	beq.n	800505c <__swsetup_r+0xac>
 8005044:	2300      	movs	r3, #0
 8005046:	60a3      	str	r3, [r4, #8]
 8005048:	6963      	ldr	r3, [r4, #20]
 800504a:	425b      	negs	r3, r3
 800504c:	61a3      	str	r3, [r4, #24]
 800504e:	2000      	movs	r0, #0
 8005050:	6923      	ldr	r3, [r4, #16]
 8005052:	4283      	cmp	r3, r0
 8005054:	d101      	bne.n	800505a <__swsetup_r+0xaa>
 8005056:	0613      	lsls	r3, r2, #24
 8005058:	d4be      	bmi.n	8004fd8 <__swsetup_r+0x28>
 800505a:	bd70      	pop	{r4, r5, r6, pc}
 800505c:	0791      	lsls	r1, r2, #30
 800505e:	d400      	bmi.n	8005062 <__swsetup_r+0xb2>
 8005060:	6963      	ldr	r3, [r4, #20]
 8005062:	60a3      	str	r3, [r4, #8]
 8005064:	e7f3      	b.n	800504e <__swsetup_r+0x9e>
 8005066:	46c0      	nop			@ (mov r8, r8)
 8005068:	20000018 	.word	0x20000018

0800506c <memset>:
 800506c:	0003      	movs	r3, r0
 800506e:	1882      	adds	r2, r0, r2
 8005070:	4293      	cmp	r3, r2
 8005072:	d100      	bne.n	8005076 <memset+0xa>
 8005074:	4770      	bx	lr
 8005076:	7019      	strb	r1, [r3, #0]
 8005078:	3301      	adds	r3, #1
 800507a:	e7f9      	b.n	8005070 <memset+0x4>

0800507c <strstr>:
 800507c:	780a      	ldrb	r2, [r1, #0]
 800507e:	b530      	push	{r4, r5, lr}
 8005080:	2a00      	cmp	r2, #0
 8005082:	d10c      	bne.n	800509e <strstr+0x22>
 8005084:	bd30      	pop	{r4, r5, pc}
 8005086:	429a      	cmp	r2, r3
 8005088:	d108      	bne.n	800509c <strstr+0x20>
 800508a:	2301      	movs	r3, #1
 800508c:	5ccc      	ldrb	r4, [r1, r3]
 800508e:	2c00      	cmp	r4, #0
 8005090:	d0f8      	beq.n	8005084 <strstr+0x8>
 8005092:	5cc5      	ldrb	r5, [r0, r3]
 8005094:	42a5      	cmp	r5, r4
 8005096:	d101      	bne.n	800509c <strstr+0x20>
 8005098:	3301      	adds	r3, #1
 800509a:	e7f7      	b.n	800508c <strstr+0x10>
 800509c:	3001      	adds	r0, #1
 800509e:	7803      	ldrb	r3, [r0, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <strstr+0xa>
 80050a4:	0018      	movs	r0, r3
 80050a6:	e7ed      	b.n	8005084 <strstr+0x8>

080050a8 <_close_r>:
 80050a8:	2300      	movs	r3, #0
 80050aa:	b570      	push	{r4, r5, r6, lr}
 80050ac:	4d06      	ldr	r5, [pc, #24]	@ (80050c8 <_close_r+0x20>)
 80050ae:	0004      	movs	r4, r0
 80050b0:	0008      	movs	r0, r1
 80050b2:	602b      	str	r3, [r5, #0]
 80050b4:	f7fc f877 	bl	80011a6 <_close>
 80050b8:	1c43      	adds	r3, r0, #1
 80050ba:	d103      	bne.n	80050c4 <_close_r+0x1c>
 80050bc:	682b      	ldr	r3, [r5, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d000      	beq.n	80050c4 <_close_r+0x1c>
 80050c2:	6023      	str	r3, [r4, #0]
 80050c4:	bd70      	pop	{r4, r5, r6, pc}
 80050c6:	46c0      	nop			@ (mov r8, r8)
 80050c8:	20000388 	.word	0x20000388

080050cc <_lseek_r>:
 80050cc:	b570      	push	{r4, r5, r6, lr}
 80050ce:	0004      	movs	r4, r0
 80050d0:	0008      	movs	r0, r1
 80050d2:	0011      	movs	r1, r2
 80050d4:	001a      	movs	r2, r3
 80050d6:	2300      	movs	r3, #0
 80050d8:	4d05      	ldr	r5, [pc, #20]	@ (80050f0 <_lseek_r+0x24>)
 80050da:	602b      	str	r3, [r5, #0]
 80050dc:	f7fc f884 	bl	80011e8 <_lseek>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	d103      	bne.n	80050ec <_lseek_r+0x20>
 80050e4:	682b      	ldr	r3, [r5, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d000      	beq.n	80050ec <_lseek_r+0x20>
 80050ea:	6023      	str	r3, [r4, #0]
 80050ec:	bd70      	pop	{r4, r5, r6, pc}
 80050ee:	46c0      	nop			@ (mov r8, r8)
 80050f0:	20000388 	.word	0x20000388

080050f4 <_read_r>:
 80050f4:	b570      	push	{r4, r5, r6, lr}
 80050f6:	0004      	movs	r4, r0
 80050f8:	0008      	movs	r0, r1
 80050fa:	0011      	movs	r1, r2
 80050fc:	001a      	movs	r2, r3
 80050fe:	2300      	movs	r3, #0
 8005100:	4d05      	ldr	r5, [pc, #20]	@ (8005118 <_read_r+0x24>)
 8005102:	602b      	str	r3, [r5, #0]
 8005104:	f7fc f816 	bl	8001134 <_read>
 8005108:	1c43      	adds	r3, r0, #1
 800510a:	d103      	bne.n	8005114 <_read_r+0x20>
 800510c:	682b      	ldr	r3, [r5, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d000      	beq.n	8005114 <_read_r+0x20>
 8005112:	6023      	str	r3, [r4, #0]
 8005114:	bd70      	pop	{r4, r5, r6, pc}
 8005116:	46c0      	nop			@ (mov r8, r8)
 8005118:	20000388 	.word	0x20000388

0800511c <_write_r>:
 800511c:	b570      	push	{r4, r5, r6, lr}
 800511e:	0004      	movs	r4, r0
 8005120:	0008      	movs	r0, r1
 8005122:	0011      	movs	r1, r2
 8005124:	001a      	movs	r2, r3
 8005126:	2300      	movs	r3, #0
 8005128:	4d05      	ldr	r5, [pc, #20]	@ (8005140 <_write_r+0x24>)
 800512a:	602b      	str	r3, [r5, #0]
 800512c:	f7fc f81f 	bl	800116e <_write>
 8005130:	1c43      	adds	r3, r0, #1
 8005132:	d103      	bne.n	800513c <_write_r+0x20>
 8005134:	682b      	ldr	r3, [r5, #0]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d000      	beq.n	800513c <_write_r+0x20>
 800513a:	6023      	str	r3, [r4, #0]
 800513c:	bd70      	pop	{r4, r5, r6, pc}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	20000388 	.word	0x20000388

08005144 <__errno>:
 8005144:	4b01      	ldr	r3, [pc, #4]	@ (800514c <__errno+0x8>)
 8005146:	6818      	ldr	r0, [r3, #0]
 8005148:	4770      	bx	lr
 800514a:	46c0      	nop			@ (mov r8, r8)
 800514c:	20000018 	.word	0x20000018

08005150 <__libc_init_array>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	2600      	movs	r6, #0
 8005154:	4c0c      	ldr	r4, [pc, #48]	@ (8005188 <__libc_init_array+0x38>)
 8005156:	4d0d      	ldr	r5, [pc, #52]	@ (800518c <__libc_init_array+0x3c>)
 8005158:	1b64      	subs	r4, r4, r5
 800515a:	10a4      	asrs	r4, r4, #2
 800515c:	42a6      	cmp	r6, r4
 800515e:	d109      	bne.n	8005174 <__libc_init_array+0x24>
 8005160:	2600      	movs	r6, #0
 8005162:	f001 fb95 	bl	8006890 <_init>
 8005166:	4c0a      	ldr	r4, [pc, #40]	@ (8005190 <__libc_init_array+0x40>)
 8005168:	4d0a      	ldr	r5, [pc, #40]	@ (8005194 <__libc_init_array+0x44>)
 800516a:	1b64      	subs	r4, r4, r5
 800516c:	10a4      	asrs	r4, r4, #2
 800516e:	42a6      	cmp	r6, r4
 8005170:	d105      	bne.n	800517e <__libc_init_array+0x2e>
 8005172:	bd70      	pop	{r4, r5, r6, pc}
 8005174:	00b3      	lsls	r3, r6, #2
 8005176:	58eb      	ldr	r3, [r5, r3]
 8005178:	4798      	blx	r3
 800517a:	3601      	adds	r6, #1
 800517c:	e7ee      	b.n	800515c <__libc_init_array+0xc>
 800517e:	00b3      	lsls	r3, r6, #2
 8005180:	58eb      	ldr	r3, [r5, r3]
 8005182:	4798      	blx	r3
 8005184:	3601      	adds	r6, #1
 8005186:	e7f2      	b.n	800516e <__libc_init_array+0x1e>
 8005188:	08006ddc 	.word	0x08006ddc
 800518c:	08006ddc 	.word	0x08006ddc
 8005190:	08006de0 	.word	0x08006de0
 8005194:	08006ddc 	.word	0x08006ddc

08005198 <__retarget_lock_init_recursive>:
 8005198:	4770      	bx	lr

0800519a <__retarget_lock_acquire_recursive>:
 800519a:	4770      	bx	lr

0800519c <__retarget_lock_release_recursive>:
 800519c:	4770      	bx	lr
	...

080051a0 <_free_r>:
 80051a0:	b570      	push	{r4, r5, r6, lr}
 80051a2:	0005      	movs	r5, r0
 80051a4:	1e0c      	subs	r4, r1, #0
 80051a6:	d010      	beq.n	80051ca <_free_r+0x2a>
 80051a8:	3c04      	subs	r4, #4
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	da00      	bge.n	80051b2 <_free_r+0x12>
 80051b0:	18e4      	adds	r4, r4, r3
 80051b2:	0028      	movs	r0, r5
 80051b4:	f000 f8e0 	bl	8005378 <__malloc_lock>
 80051b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005230 <_free_r+0x90>)
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <_free_r+0x2c>
 80051c0:	6063      	str	r3, [r4, #4]
 80051c2:	6014      	str	r4, [r2, #0]
 80051c4:	0028      	movs	r0, r5
 80051c6:	f000 f8df 	bl	8005388 <__malloc_unlock>
 80051ca:	bd70      	pop	{r4, r5, r6, pc}
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d908      	bls.n	80051e2 <_free_r+0x42>
 80051d0:	6820      	ldr	r0, [r4, #0]
 80051d2:	1821      	adds	r1, r4, r0
 80051d4:	428b      	cmp	r3, r1
 80051d6:	d1f3      	bne.n	80051c0 <_free_r+0x20>
 80051d8:	6819      	ldr	r1, [r3, #0]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	1809      	adds	r1, r1, r0
 80051de:	6021      	str	r1, [r4, #0]
 80051e0:	e7ee      	b.n	80051c0 <_free_r+0x20>
 80051e2:	001a      	movs	r2, r3
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <_free_r+0x4e>
 80051ea:	42a3      	cmp	r3, r4
 80051ec:	d9f9      	bls.n	80051e2 <_free_r+0x42>
 80051ee:	6811      	ldr	r1, [r2, #0]
 80051f0:	1850      	adds	r0, r2, r1
 80051f2:	42a0      	cmp	r0, r4
 80051f4:	d10b      	bne.n	800520e <_free_r+0x6e>
 80051f6:	6820      	ldr	r0, [r4, #0]
 80051f8:	1809      	adds	r1, r1, r0
 80051fa:	1850      	adds	r0, r2, r1
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	4283      	cmp	r3, r0
 8005200:	d1e0      	bne.n	80051c4 <_free_r+0x24>
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	1841      	adds	r1, r0, r1
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	6053      	str	r3, [r2, #4]
 800520c:	e7da      	b.n	80051c4 <_free_r+0x24>
 800520e:	42a0      	cmp	r0, r4
 8005210:	d902      	bls.n	8005218 <_free_r+0x78>
 8005212:	230c      	movs	r3, #12
 8005214:	602b      	str	r3, [r5, #0]
 8005216:	e7d5      	b.n	80051c4 <_free_r+0x24>
 8005218:	6820      	ldr	r0, [r4, #0]
 800521a:	1821      	adds	r1, r4, r0
 800521c:	428b      	cmp	r3, r1
 800521e:	d103      	bne.n	8005228 <_free_r+0x88>
 8005220:	6819      	ldr	r1, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	1809      	adds	r1, r1, r0
 8005226:	6021      	str	r1, [r4, #0]
 8005228:	6063      	str	r3, [r4, #4]
 800522a:	6054      	str	r4, [r2, #4]
 800522c:	e7ca      	b.n	80051c4 <_free_r+0x24>
 800522e:	46c0      	nop			@ (mov r8, r8)
 8005230:	20000394 	.word	0x20000394

08005234 <sbrk_aligned>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	4e0f      	ldr	r6, [pc, #60]	@ (8005274 <sbrk_aligned+0x40>)
 8005238:	000d      	movs	r5, r1
 800523a:	6831      	ldr	r1, [r6, #0]
 800523c:	0004      	movs	r4, r0
 800523e:	2900      	cmp	r1, #0
 8005240:	d102      	bne.n	8005248 <sbrk_aligned+0x14>
 8005242:	f001 f9b3 	bl	80065ac <_sbrk_r>
 8005246:	6030      	str	r0, [r6, #0]
 8005248:	0029      	movs	r1, r5
 800524a:	0020      	movs	r0, r4
 800524c:	f001 f9ae 	bl	80065ac <_sbrk_r>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d103      	bne.n	800525c <sbrk_aligned+0x28>
 8005254:	2501      	movs	r5, #1
 8005256:	426d      	negs	r5, r5
 8005258:	0028      	movs	r0, r5
 800525a:	bd70      	pop	{r4, r5, r6, pc}
 800525c:	2303      	movs	r3, #3
 800525e:	1cc5      	adds	r5, r0, #3
 8005260:	439d      	bics	r5, r3
 8005262:	42a8      	cmp	r0, r5
 8005264:	d0f8      	beq.n	8005258 <sbrk_aligned+0x24>
 8005266:	1a29      	subs	r1, r5, r0
 8005268:	0020      	movs	r0, r4
 800526a:	f001 f99f 	bl	80065ac <_sbrk_r>
 800526e:	3001      	adds	r0, #1
 8005270:	d1f2      	bne.n	8005258 <sbrk_aligned+0x24>
 8005272:	e7ef      	b.n	8005254 <sbrk_aligned+0x20>
 8005274:	20000390 	.word	0x20000390

08005278 <_malloc_r>:
 8005278:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800527a:	2203      	movs	r2, #3
 800527c:	1ccb      	adds	r3, r1, #3
 800527e:	4393      	bics	r3, r2
 8005280:	3308      	adds	r3, #8
 8005282:	0005      	movs	r5, r0
 8005284:	001f      	movs	r7, r3
 8005286:	2b0c      	cmp	r3, #12
 8005288:	d234      	bcs.n	80052f4 <_malloc_r+0x7c>
 800528a:	270c      	movs	r7, #12
 800528c:	42b9      	cmp	r1, r7
 800528e:	d833      	bhi.n	80052f8 <_malloc_r+0x80>
 8005290:	0028      	movs	r0, r5
 8005292:	f000 f871 	bl	8005378 <__malloc_lock>
 8005296:	4e37      	ldr	r6, [pc, #220]	@ (8005374 <_malloc_r+0xfc>)
 8005298:	6833      	ldr	r3, [r6, #0]
 800529a:	001c      	movs	r4, r3
 800529c:	2c00      	cmp	r4, #0
 800529e:	d12f      	bne.n	8005300 <_malloc_r+0x88>
 80052a0:	0039      	movs	r1, r7
 80052a2:	0028      	movs	r0, r5
 80052a4:	f7ff ffc6 	bl	8005234 <sbrk_aligned>
 80052a8:	0004      	movs	r4, r0
 80052aa:	1c43      	adds	r3, r0, #1
 80052ac:	d15f      	bne.n	800536e <_malloc_r+0xf6>
 80052ae:	6834      	ldr	r4, [r6, #0]
 80052b0:	9400      	str	r4, [sp, #0]
 80052b2:	9b00      	ldr	r3, [sp, #0]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d14a      	bne.n	800534e <_malloc_r+0xd6>
 80052b8:	2c00      	cmp	r4, #0
 80052ba:	d052      	beq.n	8005362 <_malloc_r+0xea>
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	0028      	movs	r0, r5
 80052c0:	18e3      	adds	r3, r4, r3
 80052c2:	9900      	ldr	r1, [sp, #0]
 80052c4:	9301      	str	r3, [sp, #4]
 80052c6:	f001 f971 	bl	80065ac <_sbrk_r>
 80052ca:	9b01      	ldr	r3, [sp, #4]
 80052cc:	4283      	cmp	r3, r0
 80052ce:	d148      	bne.n	8005362 <_malloc_r+0xea>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	0028      	movs	r0, r5
 80052d4:	1aff      	subs	r7, r7, r3
 80052d6:	0039      	movs	r1, r7
 80052d8:	f7ff ffac 	bl	8005234 <sbrk_aligned>
 80052dc:	3001      	adds	r0, #1
 80052de:	d040      	beq.n	8005362 <_malloc_r+0xea>
 80052e0:	6823      	ldr	r3, [r4, #0]
 80052e2:	19db      	adds	r3, r3, r7
 80052e4:	6023      	str	r3, [r4, #0]
 80052e6:	6833      	ldr	r3, [r6, #0]
 80052e8:	685a      	ldr	r2, [r3, #4]
 80052ea:	2a00      	cmp	r2, #0
 80052ec:	d133      	bne.n	8005356 <_malloc_r+0xde>
 80052ee:	9b00      	ldr	r3, [sp, #0]
 80052f0:	6033      	str	r3, [r6, #0]
 80052f2:	e019      	b.n	8005328 <_malloc_r+0xb0>
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	dac9      	bge.n	800528c <_malloc_r+0x14>
 80052f8:	230c      	movs	r3, #12
 80052fa:	602b      	str	r3, [r5, #0]
 80052fc:	2000      	movs	r0, #0
 80052fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005300:	6821      	ldr	r1, [r4, #0]
 8005302:	1bc9      	subs	r1, r1, r7
 8005304:	d420      	bmi.n	8005348 <_malloc_r+0xd0>
 8005306:	290b      	cmp	r1, #11
 8005308:	d90a      	bls.n	8005320 <_malloc_r+0xa8>
 800530a:	19e2      	adds	r2, r4, r7
 800530c:	6027      	str	r7, [r4, #0]
 800530e:	42a3      	cmp	r3, r4
 8005310:	d104      	bne.n	800531c <_malloc_r+0xa4>
 8005312:	6032      	str	r2, [r6, #0]
 8005314:	6863      	ldr	r3, [r4, #4]
 8005316:	6011      	str	r1, [r2, #0]
 8005318:	6053      	str	r3, [r2, #4]
 800531a:	e005      	b.n	8005328 <_malloc_r+0xb0>
 800531c:	605a      	str	r2, [r3, #4]
 800531e:	e7f9      	b.n	8005314 <_malloc_r+0x9c>
 8005320:	6862      	ldr	r2, [r4, #4]
 8005322:	42a3      	cmp	r3, r4
 8005324:	d10e      	bne.n	8005344 <_malloc_r+0xcc>
 8005326:	6032      	str	r2, [r6, #0]
 8005328:	0028      	movs	r0, r5
 800532a:	f000 f82d 	bl	8005388 <__malloc_unlock>
 800532e:	0020      	movs	r0, r4
 8005330:	2207      	movs	r2, #7
 8005332:	300b      	adds	r0, #11
 8005334:	1d23      	adds	r3, r4, #4
 8005336:	4390      	bics	r0, r2
 8005338:	1ac2      	subs	r2, r0, r3
 800533a:	4298      	cmp	r0, r3
 800533c:	d0df      	beq.n	80052fe <_malloc_r+0x86>
 800533e:	1a1b      	subs	r3, r3, r0
 8005340:	50a3      	str	r3, [r4, r2]
 8005342:	e7dc      	b.n	80052fe <_malloc_r+0x86>
 8005344:	605a      	str	r2, [r3, #4]
 8005346:	e7ef      	b.n	8005328 <_malloc_r+0xb0>
 8005348:	0023      	movs	r3, r4
 800534a:	6864      	ldr	r4, [r4, #4]
 800534c:	e7a6      	b.n	800529c <_malloc_r+0x24>
 800534e:	9c00      	ldr	r4, [sp, #0]
 8005350:	6863      	ldr	r3, [r4, #4]
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	e7ad      	b.n	80052b2 <_malloc_r+0x3a>
 8005356:	001a      	movs	r2, r3
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	42a3      	cmp	r3, r4
 800535c:	d1fb      	bne.n	8005356 <_malloc_r+0xde>
 800535e:	2300      	movs	r3, #0
 8005360:	e7da      	b.n	8005318 <_malloc_r+0xa0>
 8005362:	230c      	movs	r3, #12
 8005364:	0028      	movs	r0, r5
 8005366:	602b      	str	r3, [r5, #0]
 8005368:	f000 f80e 	bl	8005388 <__malloc_unlock>
 800536c:	e7c6      	b.n	80052fc <_malloc_r+0x84>
 800536e:	6007      	str	r7, [r0, #0]
 8005370:	e7da      	b.n	8005328 <_malloc_r+0xb0>
 8005372:	46c0      	nop			@ (mov r8, r8)
 8005374:	20000394 	.word	0x20000394

08005378 <__malloc_lock>:
 8005378:	b510      	push	{r4, lr}
 800537a:	4802      	ldr	r0, [pc, #8]	@ (8005384 <__malloc_lock+0xc>)
 800537c:	f7ff ff0d 	bl	800519a <__retarget_lock_acquire_recursive>
 8005380:	bd10      	pop	{r4, pc}
 8005382:	46c0      	nop			@ (mov r8, r8)
 8005384:	2000038c 	.word	0x2000038c

08005388 <__malloc_unlock>:
 8005388:	b510      	push	{r4, lr}
 800538a:	4802      	ldr	r0, [pc, #8]	@ (8005394 <__malloc_unlock+0xc>)
 800538c:	f7ff ff06 	bl	800519c <__retarget_lock_release_recursive>
 8005390:	bd10      	pop	{r4, pc}
 8005392:	46c0      	nop			@ (mov r8, r8)
 8005394:	2000038c 	.word	0x2000038c

08005398 <__ssputs_r>:
 8005398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800539a:	688e      	ldr	r6, [r1, #8]
 800539c:	b085      	sub	sp, #20
 800539e:	001f      	movs	r7, r3
 80053a0:	000c      	movs	r4, r1
 80053a2:	680b      	ldr	r3, [r1, #0]
 80053a4:	9002      	str	r0, [sp, #8]
 80053a6:	9203      	str	r2, [sp, #12]
 80053a8:	42be      	cmp	r6, r7
 80053aa:	d830      	bhi.n	800540e <__ssputs_r+0x76>
 80053ac:	210c      	movs	r1, #12
 80053ae:	5e62      	ldrsh	r2, [r4, r1]
 80053b0:	2190      	movs	r1, #144	@ 0x90
 80053b2:	00c9      	lsls	r1, r1, #3
 80053b4:	420a      	tst	r2, r1
 80053b6:	d028      	beq.n	800540a <__ssputs_r+0x72>
 80053b8:	2003      	movs	r0, #3
 80053ba:	6921      	ldr	r1, [r4, #16]
 80053bc:	1a5b      	subs	r3, r3, r1
 80053be:	9301      	str	r3, [sp, #4]
 80053c0:	6963      	ldr	r3, [r4, #20]
 80053c2:	4343      	muls	r3, r0
 80053c4:	9801      	ldr	r0, [sp, #4]
 80053c6:	0fdd      	lsrs	r5, r3, #31
 80053c8:	18ed      	adds	r5, r5, r3
 80053ca:	1c7b      	adds	r3, r7, #1
 80053cc:	181b      	adds	r3, r3, r0
 80053ce:	106d      	asrs	r5, r5, #1
 80053d0:	42ab      	cmp	r3, r5
 80053d2:	d900      	bls.n	80053d6 <__ssputs_r+0x3e>
 80053d4:	001d      	movs	r5, r3
 80053d6:	0552      	lsls	r2, r2, #21
 80053d8:	d528      	bpl.n	800542c <__ssputs_r+0x94>
 80053da:	0029      	movs	r1, r5
 80053dc:	9802      	ldr	r0, [sp, #8]
 80053de:	f7ff ff4b 	bl	8005278 <_malloc_r>
 80053e2:	1e06      	subs	r6, r0, #0
 80053e4:	d02c      	beq.n	8005440 <__ssputs_r+0xa8>
 80053e6:	9a01      	ldr	r2, [sp, #4]
 80053e8:	6921      	ldr	r1, [r4, #16]
 80053ea:	f001 f8fc 	bl	80065e6 <memcpy>
 80053ee:	89a2      	ldrh	r2, [r4, #12]
 80053f0:	4b18      	ldr	r3, [pc, #96]	@ (8005454 <__ssputs_r+0xbc>)
 80053f2:	401a      	ands	r2, r3
 80053f4:	2380      	movs	r3, #128	@ 0x80
 80053f6:	4313      	orrs	r3, r2
 80053f8:	81a3      	strh	r3, [r4, #12]
 80053fa:	9b01      	ldr	r3, [sp, #4]
 80053fc:	6126      	str	r6, [r4, #16]
 80053fe:	18f6      	adds	r6, r6, r3
 8005400:	6026      	str	r6, [r4, #0]
 8005402:	003e      	movs	r6, r7
 8005404:	6165      	str	r5, [r4, #20]
 8005406:	1aed      	subs	r5, r5, r3
 8005408:	60a5      	str	r5, [r4, #8]
 800540a:	42be      	cmp	r6, r7
 800540c:	d900      	bls.n	8005410 <__ssputs_r+0x78>
 800540e:	003e      	movs	r6, r7
 8005410:	0032      	movs	r2, r6
 8005412:	9903      	ldr	r1, [sp, #12]
 8005414:	6820      	ldr	r0, [r4, #0]
 8005416:	f001 f891 	bl	800653c <memmove>
 800541a:	2000      	movs	r0, #0
 800541c:	68a3      	ldr	r3, [r4, #8]
 800541e:	1b9b      	subs	r3, r3, r6
 8005420:	60a3      	str	r3, [r4, #8]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	199b      	adds	r3, r3, r6
 8005426:	6023      	str	r3, [r4, #0]
 8005428:	b005      	add	sp, #20
 800542a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800542c:	002a      	movs	r2, r5
 800542e:	9802      	ldr	r0, [sp, #8]
 8005430:	f001 f8e2 	bl	80065f8 <_realloc_r>
 8005434:	1e06      	subs	r6, r0, #0
 8005436:	d1e0      	bne.n	80053fa <__ssputs_r+0x62>
 8005438:	6921      	ldr	r1, [r4, #16]
 800543a:	9802      	ldr	r0, [sp, #8]
 800543c:	f7ff feb0 	bl	80051a0 <_free_r>
 8005440:	230c      	movs	r3, #12
 8005442:	2001      	movs	r0, #1
 8005444:	9a02      	ldr	r2, [sp, #8]
 8005446:	4240      	negs	r0, r0
 8005448:	6013      	str	r3, [r2, #0]
 800544a:	89a2      	ldrh	r2, [r4, #12]
 800544c:	3334      	adds	r3, #52	@ 0x34
 800544e:	4313      	orrs	r3, r2
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	e7e9      	b.n	8005428 <__ssputs_r+0x90>
 8005454:	fffffb7f 	.word	0xfffffb7f

08005458 <_svfiprintf_r>:
 8005458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800545a:	b0a1      	sub	sp, #132	@ 0x84
 800545c:	9003      	str	r0, [sp, #12]
 800545e:	001d      	movs	r5, r3
 8005460:	898b      	ldrh	r3, [r1, #12]
 8005462:	000f      	movs	r7, r1
 8005464:	0016      	movs	r6, r2
 8005466:	061b      	lsls	r3, r3, #24
 8005468:	d511      	bpl.n	800548e <_svfiprintf_r+0x36>
 800546a:	690b      	ldr	r3, [r1, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d10e      	bne.n	800548e <_svfiprintf_r+0x36>
 8005470:	2140      	movs	r1, #64	@ 0x40
 8005472:	f7ff ff01 	bl	8005278 <_malloc_r>
 8005476:	6038      	str	r0, [r7, #0]
 8005478:	6138      	str	r0, [r7, #16]
 800547a:	2800      	cmp	r0, #0
 800547c:	d105      	bne.n	800548a <_svfiprintf_r+0x32>
 800547e:	230c      	movs	r3, #12
 8005480:	9a03      	ldr	r2, [sp, #12]
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	2001      	movs	r0, #1
 8005486:	4240      	negs	r0, r0
 8005488:	e0cf      	b.n	800562a <_svfiprintf_r+0x1d2>
 800548a:	2340      	movs	r3, #64	@ 0x40
 800548c:	617b      	str	r3, [r7, #20]
 800548e:	2300      	movs	r3, #0
 8005490:	ac08      	add	r4, sp, #32
 8005492:	6163      	str	r3, [r4, #20]
 8005494:	3320      	adds	r3, #32
 8005496:	7663      	strb	r3, [r4, #25]
 8005498:	3310      	adds	r3, #16
 800549a:	76a3      	strb	r3, [r4, #26]
 800549c:	9507      	str	r5, [sp, #28]
 800549e:	0035      	movs	r5, r6
 80054a0:	782b      	ldrb	r3, [r5, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d001      	beq.n	80054aa <_svfiprintf_r+0x52>
 80054a6:	2b25      	cmp	r3, #37	@ 0x25
 80054a8:	d148      	bne.n	800553c <_svfiprintf_r+0xe4>
 80054aa:	1bab      	subs	r3, r5, r6
 80054ac:	9305      	str	r3, [sp, #20]
 80054ae:	42b5      	cmp	r5, r6
 80054b0:	d00b      	beq.n	80054ca <_svfiprintf_r+0x72>
 80054b2:	0032      	movs	r2, r6
 80054b4:	0039      	movs	r1, r7
 80054b6:	9803      	ldr	r0, [sp, #12]
 80054b8:	f7ff ff6e 	bl	8005398 <__ssputs_r>
 80054bc:	3001      	adds	r0, #1
 80054be:	d100      	bne.n	80054c2 <_svfiprintf_r+0x6a>
 80054c0:	e0ae      	b.n	8005620 <_svfiprintf_r+0x1c8>
 80054c2:	6963      	ldr	r3, [r4, #20]
 80054c4:	9a05      	ldr	r2, [sp, #20]
 80054c6:	189b      	adds	r3, r3, r2
 80054c8:	6163      	str	r3, [r4, #20]
 80054ca:	782b      	ldrb	r3, [r5, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d100      	bne.n	80054d2 <_svfiprintf_r+0x7a>
 80054d0:	e0a6      	b.n	8005620 <_svfiprintf_r+0x1c8>
 80054d2:	2201      	movs	r2, #1
 80054d4:	2300      	movs	r3, #0
 80054d6:	4252      	negs	r2, r2
 80054d8:	6062      	str	r2, [r4, #4]
 80054da:	a904      	add	r1, sp, #16
 80054dc:	3254      	adds	r2, #84	@ 0x54
 80054de:	1852      	adds	r2, r2, r1
 80054e0:	1c6e      	adds	r6, r5, #1
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	60e3      	str	r3, [r4, #12]
 80054e6:	60a3      	str	r3, [r4, #8]
 80054e8:	7013      	strb	r3, [r2, #0]
 80054ea:	65a3      	str	r3, [r4, #88]	@ 0x58
 80054ec:	4b54      	ldr	r3, [pc, #336]	@ (8005640 <_svfiprintf_r+0x1e8>)
 80054ee:	2205      	movs	r2, #5
 80054f0:	0018      	movs	r0, r3
 80054f2:	7831      	ldrb	r1, [r6, #0]
 80054f4:	9305      	str	r3, [sp, #20]
 80054f6:	f001 f86b 	bl	80065d0 <memchr>
 80054fa:	1c75      	adds	r5, r6, #1
 80054fc:	2800      	cmp	r0, #0
 80054fe:	d11f      	bne.n	8005540 <_svfiprintf_r+0xe8>
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	06d3      	lsls	r3, r2, #27
 8005504:	d504      	bpl.n	8005510 <_svfiprintf_r+0xb8>
 8005506:	2353      	movs	r3, #83	@ 0x53
 8005508:	a904      	add	r1, sp, #16
 800550a:	185b      	adds	r3, r3, r1
 800550c:	2120      	movs	r1, #32
 800550e:	7019      	strb	r1, [r3, #0]
 8005510:	0713      	lsls	r3, r2, #28
 8005512:	d504      	bpl.n	800551e <_svfiprintf_r+0xc6>
 8005514:	2353      	movs	r3, #83	@ 0x53
 8005516:	a904      	add	r1, sp, #16
 8005518:	185b      	adds	r3, r3, r1
 800551a:	212b      	movs	r1, #43	@ 0x2b
 800551c:	7019      	strb	r1, [r3, #0]
 800551e:	7833      	ldrb	r3, [r6, #0]
 8005520:	2b2a      	cmp	r3, #42	@ 0x2a
 8005522:	d016      	beq.n	8005552 <_svfiprintf_r+0xfa>
 8005524:	0035      	movs	r5, r6
 8005526:	2100      	movs	r1, #0
 8005528:	200a      	movs	r0, #10
 800552a:	68e3      	ldr	r3, [r4, #12]
 800552c:	782a      	ldrb	r2, [r5, #0]
 800552e:	1c6e      	adds	r6, r5, #1
 8005530:	3a30      	subs	r2, #48	@ 0x30
 8005532:	2a09      	cmp	r2, #9
 8005534:	d950      	bls.n	80055d8 <_svfiprintf_r+0x180>
 8005536:	2900      	cmp	r1, #0
 8005538:	d111      	bne.n	800555e <_svfiprintf_r+0x106>
 800553a:	e017      	b.n	800556c <_svfiprintf_r+0x114>
 800553c:	3501      	adds	r5, #1
 800553e:	e7af      	b.n	80054a0 <_svfiprintf_r+0x48>
 8005540:	9b05      	ldr	r3, [sp, #20]
 8005542:	6822      	ldr	r2, [r4, #0]
 8005544:	1ac0      	subs	r0, r0, r3
 8005546:	2301      	movs	r3, #1
 8005548:	4083      	lsls	r3, r0
 800554a:	4313      	orrs	r3, r2
 800554c:	002e      	movs	r6, r5
 800554e:	6023      	str	r3, [r4, #0]
 8005550:	e7cc      	b.n	80054ec <_svfiprintf_r+0x94>
 8005552:	9b07      	ldr	r3, [sp, #28]
 8005554:	1d19      	adds	r1, r3, #4
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	9107      	str	r1, [sp, #28]
 800555a:	2b00      	cmp	r3, #0
 800555c:	db01      	blt.n	8005562 <_svfiprintf_r+0x10a>
 800555e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005560:	e004      	b.n	800556c <_svfiprintf_r+0x114>
 8005562:	425b      	negs	r3, r3
 8005564:	60e3      	str	r3, [r4, #12]
 8005566:	2302      	movs	r3, #2
 8005568:	4313      	orrs	r3, r2
 800556a:	6023      	str	r3, [r4, #0]
 800556c:	782b      	ldrb	r3, [r5, #0]
 800556e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005570:	d10c      	bne.n	800558c <_svfiprintf_r+0x134>
 8005572:	786b      	ldrb	r3, [r5, #1]
 8005574:	2b2a      	cmp	r3, #42	@ 0x2a
 8005576:	d134      	bne.n	80055e2 <_svfiprintf_r+0x18a>
 8005578:	9b07      	ldr	r3, [sp, #28]
 800557a:	3502      	adds	r5, #2
 800557c:	1d1a      	adds	r2, r3, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	9207      	str	r2, [sp, #28]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da01      	bge.n	800558a <_svfiprintf_r+0x132>
 8005586:	2301      	movs	r3, #1
 8005588:	425b      	negs	r3, r3
 800558a:	9309      	str	r3, [sp, #36]	@ 0x24
 800558c:	4e2d      	ldr	r6, [pc, #180]	@ (8005644 <_svfiprintf_r+0x1ec>)
 800558e:	2203      	movs	r2, #3
 8005590:	0030      	movs	r0, r6
 8005592:	7829      	ldrb	r1, [r5, #0]
 8005594:	f001 f81c 	bl	80065d0 <memchr>
 8005598:	2800      	cmp	r0, #0
 800559a:	d006      	beq.n	80055aa <_svfiprintf_r+0x152>
 800559c:	2340      	movs	r3, #64	@ 0x40
 800559e:	1b80      	subs	r0, r0, r6
 80055a0:	4083      	lsls	r3, r0
 80055a2:	6822      	ldr	r2, [r4, #0]
 80055a4:	3501      	adds	r5, #1
 80055a6:	4313      	orrs	r3, r2
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	7829      	ldrb	r1, [r5, #0]
 80055ac:	2206      	movs	r2, #6
 80055ae:	4826      	ldr	r0, [pc, #152]	@ (8005648 <_svfiprintf_r+0x1f0>)
 80055b0:	1c6e      	adds	r6, r5, #1
 80055b2:	7621      	strb	r1, [r4, #24]
 80055b4:	f001 f80c 	bl	80065d0 <memchr>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d038      	beq.n	800562e <_svfiprintf_r+0x1d6>
 80055bc:	4b23      	ldr	r3, [pc, #140]	@ (800564c <_svfiprintf_r+0x1f4>)
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d122      	bne.n	8005608 <_svfiprintf_r+0x1b0>
 80055c2:	2207      	movs	r2, #7
 80055c4:	9b07      	ldr	r3, [sp, #28]
 80055c6:	3307      	adds	r3, #7
 80055c8:	4393      	bics	r3, r2
 80055ca:	3308      	adds	r3, #8
 80055cc:	9307      	str	r3, [sp, #28]
 80055ce:	6963      	ldr	r3, [r4, #20]
 80055d0:	9a04      	ldr	r2, [sp, #16]
 80055d2:	189b      	adds	r3, r3, r2
 80055d4:	6163      	str	r3, [r4, #20]
 80055d6:	e762      	b.n	800549e <_svfiprintf_r+0x46>
 80055d8:	4343      	muls	r3, r0
 80055da:	0035      	movs	r5, r6
 80055dc:	2101      	movs	r1, #1
 80055de:	189b      	adds	r3, r3, r2
 80055e0:	e7a4      	b.n	800552c <_svfiprintf_r+0xd4>
 80055e2:	2300      	movs	r3, #0
 80055e4:	200a      	movs	r0, #10
 80055e6:	0019      	movs	r1, r3
 80055e8:	3501      	adds	r5, #1
 80055ea:	6063      	str	r3, [r4, #4]
 80055ec:	782a      	ldrb	r2, [r5, #0]
 80055ee:	1c6e      	adds	r6, r5, #1
 80055f0:	3a30      	subs	r2, #48	@ 0x30
 80055f2:	2a09      	cmp	r2, #9
 80055f4:	d903      	bls.n	80055fe <_svfiprintf_r+0x1a6>
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d0c8      	beq.n	800558c <_svfiprintf_r+0x134>
 80055fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80055fc:	e7c6      	b.n	800558c <_svfiprintf_r+0x134>
 80055fe:	4341      	muls	r1, r0
 8005600:	0035      	movs	r5, r6
 8005602:	2301      	movs	r3, #1
 8005604:	1889      	adds	r1, r1, r2
 8005606:	e7f1      	b.n	80055ec <_svfiprintf_r+0x194>
 8005608:	aa07      	add	r2, sp, #28
 800560a:	9200      	str	r2, [sp, #0]
 800560c:	0021      	movs	r1, r4
 800560e:	003a      	movs	r2, r7
 8005610:	4b0f      	ldr	r3, [pc, #60]	@ (8005650 <_svfiprintf_r+0x1f8>)
 8005612:	9803      	ldr	r0, [sp, #12]
 8005614:	e000      	b.n	8005618 <_svfiprintf_r+0x1c0>
 8005616:	bf00      	nop
 8005618:	9004      	str	r0, [sp, #16]
 800561a:	9b04      	ldr	r3, [sp, #16]
 800561c:	3301      	adds	r3, #1
 800561e:	d1d6      	bne.n	80055ce <_svfiprintf_r+0x176>
 8005620:	89bb      	ldrh	r3, [r7, #12]
 8005622:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005624:	065b      	lsls	r3, r3, #25
 8005626:	d500      	bpl.n	800562a <_svfiprintf_r+0x1d2>
 8005628:	e72c      	b.n	8005484 <_svfiprintf_r+0x2c>
 800562a:	b021      	add	sp, #132	@ 0x84
 800562c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800562e:	aa07      	add	r2, sp, #28
 8005630:	9200      	str	r2, [sp, #0]
 8005632:	0021      	movs	r1, r4
 8005634:	003a      	movs	r2, r7
 8005636:	4b06      	ldr	r3, [pc, #24]	@ (8005650 <_svfiprintf_r+0x1f8>)
 8005638:	9803      	ldr	r0, [sp, #12]
 800563a:	f000 fb7d 	bl	8005d38 <_printf_i>
 800563e:	e7eb      	b.n	8005618 <_svfiprintf_r+0x1c0>
 8005640:	08006c8c 	.word	0x08006c8c
 8005644:	08006c92 	.word	0x08006c92
 8005648:	08006c96 	.word	0x08006c96
 800564c:	00000000 	.word	0x00000000
 8005650:	08005399 	.word	0x08005399

08005654 <_sungetc_r>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	0014      	movs	r4, r2
 8005658:	1c4b      	adds	r3, r1, #1
 800565a:	d103      	bne.n	8005664 <_sungetc_r+0x10>
 800565c:	2501      	movs	r5, #1
 800565e:	426d      	negs	r5, r5
 8005660:	0028      	movs	r0, r5
 8005662:	bd70      	pop	{r4, r5, r6, pc}
 8005664:	8993      	ldrh	r3, [r2, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	4393      	bics	r3, r2
 800566a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800566c:	81a3      	strh	r3, [r4, #12]
 800566e:	b2ce      	uxtb	r6, r1
 8005670:	6863      	ldr	r3, [r4, #4]
 8005672:	b2cd      	uxtb	r5, r1
 8005674:	2a00      	cmp	r2, #0
 8005676:	d010      	beq.n	800569a <_sungetc_r+0x46>
 8005678:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800567a:	429a      	cmp	r2, r3
 800567c:	dd07      	ble.n	800568e <_sungetc_r+0x3a>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	3b01      	subs	r3, #1
 8005682:	6023      	str	r3, [r4, #0]
 8005684:	701e      	strb	r6, [r3, #0]
 8005686:	6863      	ldr	r3, [r4, #4]
 8005688:	3301      	adds	r3, #1
 800568a:	6063      	str	r3, [r4, #4]
 800568c:	e7e8      	b.n	8005660 <_sungetc_r+0xc>
 800568e:	0021      	movs	r1, r4
 8005690:	f000 ff16 	bl	80064c0 <__submore>
 8005694:	2800      	cmp	r0, #0
 8005696:	d0f2      	beq.n	800567e <_sungetc_r+0x2a>
 8005698:	e7e0      	b.n	800565c <_sungetc_r+0x8>
 800569a:	6921      	ldr	r1, [r4, #16]
 800569c:	6822      	ldr	r2, [r4, #0]
 800569e:	2900      	cmp	r1, #0
 80056a0:	d007      	beq.n	80056b2 <_sungetc_r+0x5e>
 80056a2:	4291      	cmp	r1, r2
 80056a4:	d205      	bcs.n	80056b2 <_sungetc_r+0x5e>
 80056a6:	1e51      	subs	r1, r2, #1
 80056a8:	7808      	ldrb	r0, [r1, #0]
 80056aa:	42a8      	cmp	r0, r5
 80056ac:	d101      	bne.n	80056b2 <_sungetc_r+0x5e>
 80056ae:	6021      	str	r1, [r4, #0]
 80056b0:	e7ea      	b.n	8005688 <_sungetc_r+0x34>
 80056b2:	6423      	str	r3, [r4, #64]	@ 0x40
 80056b4:	0023      	movs	r3, r4
 80056b6:	3344      	adds	r3, #68	@ 0x44
 80056b8:	6363      	str	r3, [r4, #52]	@ 0x34
 80056ba:	2303      	movs	r3, #3
 80056bc:	63a3      	str	r3, [r4, #56]	@ 0x38
 80056be:	0023      	movs	r3, r4
 80056c0:	3346      	adds	r3, #70	@ 0x46
 80056c2:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80056c4:	701e      	strb	r6, [r3, #0]
 80056c6:	6023      	str	r3, [r4, #0]
 80056c8:	2301      	movs	r3, #1
 80056ca:	e7de      	b.n	800568a <_sungetc_r+0x36>

080056cc <__ssrefill_r>:
 80056cc:	b510      	push	{r4, lr}
 80056ce:	000c      	movs	r4, r1
 80056d0:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d00e      	beq.n	80056f4 <__ssrefill_r+0x28>
 80056d6:	0023      	movs	r3, r4
 80056d8:	3344      	adds	r3, #68	@ 0x44
 80056da:	4299      	cmp	r1, r3
 80056dc:	d001      	beq.n	80056e2 <__ssrefill_r+0x16>
 80056de:	f7ff fd5f 	bl	80051a0 <_free_r>
 80056e2:	2000      	movs	r0, #0
 80056e4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80056e6:	6360      	str	r0, [r4, #52]	@ 0x34
 80056e8:	6063      	str	r3, [r4, #4]
 80056ea:	4283      	cmp	r3, r0
 80056ec:	d002      	beq.n	80056f4 <__ssrefill_r+0x28>
 80056ee:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80056f0:	6023      	str	r3, [r4, #0]
 80056f2:	bd10      	pop	{r4, pc}
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	2001      	movs	r0, #1
 80056f8:	6023      	str	r3, [r4, #0]
 80056fa:	2300      	movs	r3, #0
 80056fc:	89a2      	ldrh	r2, [r4, #12]
 80056fe:	6063      	str	r3, [r4, #4]
 8005700:	3320      	adds	r3, #32
 8005702:	4313      	orrs	r3, r2
 8005704:	81a3      	strh	r3, [r4, #12]
 8005706:	4240      	negs	r0, r0
 8005708:	e7f3      	b.n	80056f2 <__ssrefill_r+0x26>
	...

0800570c <__ssvfiscanf_r>:
 800570c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800570e:	4caa      	ldr	r4, [pc, #680]	@ (80059b8 <__ssvfiscanf_r+0x2ac>)
 8005710:	44a5      	add	sp, r4
 8005712:	000c      	movs	r4, r1
 8005714:	2100      	movs	r1, #0
 8005716:	9001      	str	r0, [sp, #4]
 8005718:	20be      	movs	r0, #190	@ 0xbe
 800571a:	9146      	str	r1, [sp, #280]	@ 0x118
 800571c:	9147      	str	r1, [sp, #284]	@ 0x11c
 800571e:	a903      	add	r1, sp, #12
 8005720:	9148      	str	r1, [sp, #288]	@ 0x120
 8005722:	49a6      	ldr	r1, [pc, #664]	@ (80059bc <__ssvfiscanf_r+0x2b0>)
 8005724:	0040      	lsls	r0, r0, #1
 8005726:	ad43      	add	r5, sp, #268	@ 0x10c
 8005728:	5029      	str	r1, [r5, r0]
 800572a:	49a5      	ldr	r1, [pc, #660]	@ (80059c0 <__ssvfiscanf_r+0x2b4>)
 800572c:	3004      	adds	r0, #4
 800572e:	ad43      	add	r5, sp, #268	@ 0x10c
 8005730:	5029      	str	r1, [r5, r0]
 8005732:	9302      	str	r3, [sp, #8]
 8005734:	7813      	ldrb	r3, [r2, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d100      	bne.n	800573c <__ssvfiscanf_r+0x30>
 800573a:	e13a      	b.n	80059b2 <__ssvfiscanf_r+0x2a6>
 800573c:	2108      	movs	r1, #8
 800573e:	2708      	movs	r7, #8
 8005740:	4ea0      	ldr	r6, [pc, #640]	@ (80059c4 <__ssvfiscanf_r+0x2b8>)
 8005742:	1c55      	adds	r5, r2, #1
 8005744:	5cf0      	ldrb	r0, [r6, r3]
 8005746:	4001      	ands	r1, r0
 8005748:	4238      	tst	r0, r7
 800574a:	d01c      	beq.n	8005786 <__ssvfiscanf_r+0x7a>
 800574c:	6863      	ldr	r3, [r4, #4]
 800574e:	2b00      	cmp	r3, #0
 8005750:	dd0f      	ble.n	8005772 <__ssvfiscanf_r+0x66>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	781a      	ldrb	r2, [r3, #0]
 8005756:	5cb2      	ldrb	r2, [r6, r2]
 8005758:	423a      	tst	r2, r7
 800575a:	d101      	bne.n	8005760 <__ssvfiscanf_r+0x54>
 800575c:	002a      	movs	r2, r5
 800575e:	e7e9      	b.n	8005734 <__ssvfiscanf_r+0x28>
 8005760:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005762:	3301      	adds	r3, #1
 8005764:	3201      	adds	r2, #1
 8005766:	9247      	str	r2, [sp, #284]	@ 0x11c
 8005768:	6862      	ldr	r2, [r4, #4]
 800576a:	6023      	str	r3, [r4, #0]
 800576c:	3a01      	subs	r2, #1
 800576e:	6062      	str	r2, [r4, #4]
 8005770:	e7ec      	b.n	800574c <__ssvfiscanf_r+0x40>
 8005772:	22c0      	movs	r2, #192	@ 0xc0
 8005774:	ab43      	add	r3, sp, #268	@ 0x10c
 8005776:	0052      	lsls	r2, r2, #1
 8005778:	0021      	movs	r1, r4
 800577a:	589b      	ldr	r3, [r3, r2]
 800577c:	9801      	ldr	r0, [sp, #4]
 800577e:	4798      	blx	r3
 8005780:	2800      	cmp	r0, #0
 8005782:	d0e6      	beq.n	8005752 <__ssvfiscanf_r+0x46>
 8005784:	e7ea      	b.n	800575c <__ssvfiscanf_r+0x50>
 8005786:	001e      	movs	r6, r3
 8005788:	2b25      	cmp	r3, #37	@ 0x25
 800578a:	d160      	bne.n	800584e <__ssvfiscanf_r+0x142>
 800578c:	9145      	str	r1, [sp, #276]	@ 0x114
 800578e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005790:	7853      	ldrb	r3, [r2, #1]
 8005792:	2b2a      	cmp	r3, #42	@ 0x2a
 8005794:	d102      	bne.n	800579c <__ssvfiscanf_r+0x90>
 8005796:	3b1a      	subs	r3, #26
 8005798:	9343      	str	r3, [sp, #268]	@ 0x10c
 800579a:	1c95      	adds	r5, r2, #2
 800579c:	002e      	movs	r6, r5
 800579e:	220a      	movs	r2, #10
 80057a0:	7831      	ldrb	r1, [r6, #0]
 80057a2:	1c75      	adds	r5, r6, #1
 80057a4:	000b      	movs	r3, r1
 80057a6:	3b30      	subs	r3, #48	@ 0x30
 80057a8:	2b09      	cmp	r3, #9
 80057aa:	d91d      	bls.n	80057e8 <__ssvfiscanf_r+0xdc>
 80057ac:	4f86      	ldr	r7, [pc, #536]	@ (80059c8 <__ssvfiscanf_r+0x2bc>)
 80057ae:	2203      	movs	r2, #3
 80057b0:	0038      	movs	r0, r7
 80057b2:	f000 ff0d 	bl	80065d0 <memchr>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d006      	beq.n	80057c8 <__ssvfiscanf_r+0xbc>
 80057ba:	2301      	movs	r3, #1
 80057bc:	1bc0      	subs	r0, r0, r7
 80057be:	4083      	lsls	r3, r0
 80057c0:	002e      	movs	r6, r5
 80057c2:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80057c4:	4313      	orrs	r3, r2
 80057c6:	9343      	str	r3, [sp, #268]	@ 0x10c
 80057c8:	1c75      	adds	r5, r6, #1
 80057ca:	7836      	ldrb	r6, [r6, #0]
 80057cc:	2e78      	cmp	r6, #120	@ 0x78
 80057ce:	d806      	bhi.n	80057de <__ssvfiscanf_r+0xd2>
 80057d0:	2e57      	cmp	r6, #87	@ 0x57
 80057d2:	d810      	bhi.n	80057f6 <__ssvfiscanf_r+0xea>
 80057d4:	2e25      	cmp	r6, #37	@ 0x25
 80057d6:	d03a      	beq.n	800584e <__ssvfiscanf_r+0x142>
 80057d8:	d834      	bhi.n	8005844 <__ssvfiscanf_r+0x138>
 80057da:	2e00      	cmp	r6, #0
 80057dc:	d055      	beq.n	800588a <__ssvfiscanf_r+0x17e>
 80057de:	2303      	movs	r3, #3
 80057e0:	9349      	str	r3, [sp, #292]	@ 0x124
 80057e2:	3307      	adds	r3, #7
 80057e4:	9344      	str	r3, [sp, #272]	@ 0x110
 80057e6:	e069      	b.n	80058bc <__ssvfiscanf_r+0x1b0>
 80057e8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80057ea:	002e      	movs	r6, r5
 80057ec:	4353      	muls	r3, r2
 80057ee:	3b30      	subs	r3, #48	@ 0x30
 80057f0:	185b      	adds	r3, r3, r1
 80057f2:	9345      	str	r3, [sp, #276]	@ 0x114
 80057f4:	e7d4      	b.n	80057a0 <__ssvfiscanf_r+0x94>
 80057f6:	0030      	movs	r0, r6
 80057f8:	3858      	subs	r0, #88	@ 0x58
 80057fa:	2820      	cmp	r0, #32
 80057fc:	d8ef      	bhi.n	80057de <__ssvfiscanf_r+0xd2>
 80057fe:	f7fa fc8b 	bl	8000118 <__gnu_thumb1_case_shi>
 8005802:	004b      	.short	0x004b
 8005804:	ffeeffee 	.word	0xffeeffee
 8005808:	ffee007d 	.word	0xffee007d
 800580c:	ffeeffee 	.word	0xffeeffee
 8005810:	ffeeffee 	.word	0xffeeffee
 8005814:	ffeeffee 	.word	0xffeeffee
 8005818:	007b0088 	.word	0x007b0088
 800581c:	00240024 	.word	0x00240024
 8005820:	ffee0024 	.word	0xffee0024
 8005824:	ffee0055 	.word	0xffee0055
 8005828:	ffeeffee 	.word	0xffeeffee
 800582c:	0090ffee 	.word	0x0090ffee
 8005830:	00470059 	.word	0x00470059
 8005834:	ffeeffee 	.word	0xffeeffee
 8005838:	ffee008e 	.word	0xffee008e
 800583c:	ffee007b 	.word	0xffee007b
 8005840:	004bffee 	.word	0x004bffee
 8005844:	3e45      	subs	r6, #69	@ 0x45
 8005846:	2e02      	cmp	r6, #2
 8005848:	d8c9      	bhi.n	80057de <__ssvfiscanf_r+0xd2>
 800584a:	2305      	movs	r3, #5
 800584c:	e035      	b.n	80058ba <__ssvfiscanf_r+0x1ae>
 800584e:	6863      	ldr	r3, [r4, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	dd0d      	ble.n	8005870 <__ssvfiscanf_r+0x164>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	781a      	ldrb	r2, [r3, #0]
 8005858:	42b2      	cmp	r2, r6
 800585a:	d000      	beq.n	800585e <__ssvfiscanf_r+0x152>
 800585c:	e0a9      	b.n	80059b2 <__ssvfiscanf_r+0x2a6>
 800585e:	3301      	adds	r3, #1
 8005860:	6862      	ldr	r2, [r4, #4]
 8005862:	6023      	str	r3, [r4, #0]
 8005864:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005866:	3a01      	subs	r2, #1
 8005868:	3301      	adds	r3, #1
 800586a:	6062      	str	r2, [r4, #4]
 800586c:	9347      	str	r3, [sp, #284]	@ 0x11c
 800586e:	e775      	b.n	800575c <__ssvfiscanf_r+0x50>
 8005870:	23c0      	movs	r3, #192	@ 0xc0
 8005872:	aa43      	add	r2, sp, #268	@ 0x10c
 8005874:	005b      	lsls	r3, r3, #1
 8005876:	0021      	movs	r1, r4
 8005878:	58d3      	ldr	r3, [r2, r3]
 800587a:	9801      	ldr	r0, [sp, #4]
 800587c:	4798      	blx	r3
 800587e:	2800      	cmp	r0, #0
 8005880:	d0e8      	beq.n	8005854 <__ssvfiscanf_r+0x148>
 8005882:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8005884:	2800      	cmp	r0, #0
 8005886:	d000      	beq.n	800588a <__ssvfiscanf_r+0x17e>
 8005888:	e08b      	b.n	80059a2 <__ssvfiscanf_r+0x296>
 800588a:	2001      	movs	r0, #1
 800588c:	4240      	negs	r0, r0
 800588e:	e08c      	b.n	80059aa <__ssvfiscanf_r+0x29e>
 8005890:	2320      	movs	r3, #32
 8005892:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005894:	4313      	orrs	r3, r2
 8005896:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005898:	2380      	movs	r3, #128	@ 0x80
 800589a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4313      	orrs	r3, r2
 80058a0:	9343      	str	r3, [sp, #268]	@ 0x10c
 80058a2:	2310      	movs	r3, #16
 80058a4:	9344      	str	r3, [sp, #272]	@ 0x110
 80058a6:	2e6e      	cmp	r6, #110	@ 0x6e
 80058a8:	d902      	bls.n	80058b0 <__ssvfiscanf_r+0x1a4>
 80058aa:	e005      	b.n	80058b8 <__ssvfiscanf_r+0x1ac>
 80058ac:	2300      	movs	r3, #0
 80058ae:	9344      	str	r3, [sp, #272]	@ 0x110
 80058b0:	2303      	movs	r3, #3
 80058b2:	e002      	b.n	80058ba <__ssvfiscanf_r+0x1ae>
 80058b4:	2308      	movs	r3, #8
 80058b6:	9344      	str	r3, [sp, #272]	@ 0x110
 80058b8:	2304      	movs	r3, #4
 80058ba:	9349      	str	r3, [sp, #292]	@ 0x124
 80058bc:	6863      	ldr	r3, [r4, #4]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	dd3e      	ble.n	8005940 <__ssvfiscanf_r+0x234>
 80058c2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80058c4:	065b      	lsls	r3, r3, #25
 80058c6:	d408      	bmi.n	80058da <__ssvfiscanf_r+0x1ce>
 80058c8:	27c0      	movs	r7, #192	@ 0xc0
 80058ca:	2608      	movs	r6, #8
 80058cc:	007f      	lsls	r7, r7, #1
 80058ce:	6823      	ldr	r3, [r4, #0]
 80058d0:	493c      	ldr	r1, [pc, #240]	@ (80059c4 <__ssvfiscanf_r+0x2b8>)
 80058d2:	781a      	ldrb	r2, [r3, #0]
 80058d4:	5c8a      	ldrb	r2, [r1, r2]
 80058d6:	4232      	tst	r2, r6
 80058d8:	d13c      	bne.n	8005954 <__ssvfiscanf_r+0x248>
 80058da:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 80058dc:	2b02      	cmp	r3, #2
 80058de:	dc4c      	bgt.n	800597a <__ssvfiscanf_r+0x26e>
 80058e0:	0022      	movs	r2, r4
 80058e2:	9801      	ldr	r0, [sp, #4]
 80058e4:	ab02      	add	r3, sp, #8
 80058e6:	a943      	add	r1, sp, #268	@ 0x10c
 80058e8:	f000 fb34 	bl	8005f54 <_scanf_chars>
 80058ec:	2801      	cmp	r0, #1
 80058ee:	d060      	beq.n	80059b2 <__ssvfiscanf_r+0x2a6>
 80058f0:	2802      	cmp	r0, #2
 80058f2:	d000      	beq.n	80058f6 <__ssvfiscanf_r+0x1ea>
 80058f4:	e732      	b.n	800575c <__ssvfiscanf_r+0x50>
 80058f6:	e7c4      	b.n	8005882 <__ssvfiscanf_r+0x176>
 80058f8:	230a      	movs	r3, #10
 80058fa:	e7d3      	b.n	80058a4 <__ssvfiscanf_r+0x198>
 80058fc:	0029      	movs	r1, r5
 80058fe:	a803      	add	r0, sp, #12
 8005900:	f000 fda5 	bl	800644e <__sccl>
 8005904:	2340      	movs	r3, #64	@ 0x40
 8005906:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005908:	0005      	movs	r5, r0
 800590a:	4313      	orrs	r3, r2
 800590c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800590e:	2301      	movs	r3, #1
 8005910:	e7d3      	b.n	80058ba <__ssvfiscanf_r+0x1ae>
 8005912:	2340      	movs	r3, #64	@ 0x40
 8005914:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005916:	4313      	orrs	r3, r2
 8005918:	9343      	str	r3, [sp, #268]	@ 0x10c
 800591a:	2300      	movs	r3, #0
 800591c:	e7cd      	b.n	80058ba <__ssvfiscanf_r+0x1ae>
 800591e:	2302      	movs	r3, #2
 8005920:	e7cb      	b.n	80058ba <__ssvfiscanf_r+0x1ae>
 8005922:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005924:	06d3      	lsls	r3, r2, #27
 8005926:	d500      	bpl.n	800592a <__ssvfiscanf_r+0x21e>
 8005928:	e718      	b.n	800575c <__ssvfiscanf_r+0x50>
 800592a:	9b02      	ldr	r3, [sp, #8]
 800592c:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800592e:	1d18      	adds	r0, r3, #4
 8005930:	9002      	str	r0, [sp, #8]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	07d6      	lsls	r6, r2, #31
 8005936:	d501      	bpl.n	800593c <__ssvfiscanf_r+0x230>
 8005938:	8019      	strh	r1, [r3, #0]
 800593a:	e70f      	b.n	800575c <__ssvfiscanf_r+0x50>
 800593c:	6019      	str	r1, [r3, #0]
 800593e:	e70d      	b.n	800575c <__ssvfiscanf_r+0x50>
 8005940:	23c0      	movs	r3, #192	@ 0xc0
 8005942:	aa43      	add	r2, sp, #268	@ 0x10c
 8005944:	005b      	lsls	r3, r3, #1
 8005946:	0021      	movs	r1, r4
 8005948:	58d3      	ldr	r3, [r2, r3]
 800594a:	9801      	ldr	r0, [sp, #4]
 800594c:	4798      	blx	r3
 800594e:	2800      	cmp	r0, #0
 8005950:	d0b7      	beq.n	80058c2 <__ssvfiscanf_r+0x1b6>
 8005952:	e796      	b.n	8005882 <__ssvfiscanf_r+0x176>
 8005954:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005956:	3201      	adds	r2, #1
 8005958:	9247      	str	r2, [sp, #284]	@ 0x11c
 800595a:	6862      	ldr	r2, [r4, #4]
 800595c:	3a01      	subs	r2, #1
 800595e:	6062      	str	r2, [r4, #4]
 8005960:	2a00      	cmp	r2, #0
 8005962:	dd02      	ble.n	800596a <__ssvfiscanf_r+0x25e>
 8005964:	3301      	adds	r3, #1
 8005966:	6023      	str	r3, [r4, #0]
 8005968:	e7b1      	b.n	80058ce <__ssvfiscanf_r+0x1c2>
 800596a:	ab43      	add	r3, sp, #268	@ 0x10c
 800596c:	0021      	movs	r1, r4
 800596e:	59db      	ldr	r3, [r3, r7]
 8005970:	9801      	ldr	r0, [sp, #4]
 8005972:	4798      	blx	r3
 8005974:	2800      	cmp	r0, #0
 8005976:	d0aa      	beq.n	80058ce <__ssvfiscanf_r+0x1c2>
 8005978:	e783      	b.n	8005882 <__ssvfiscanf_r+0x176>
 800597a:	2b04      	cmp	r3, #4
 800597c:	dc06      	bgt.n	800598c <__ssvfiscanf_r+0x280>
 800597e:	0022      	movs	r2, r4
 8005980:	9801      	ldr	r0, [sp, #4]
 8005982:	ab02      	add	r3, sp, #8
 8005984:	a943      	add	r1, sp, #268	@ 0x10c
 8005986:	f000 fb45 	bl	8006014 <_scanf_i>
 800598a:	e7af      	b.n	80058ec <__ssvfiscanf_r+0x1e0>
 800598c:	4b0f      	ldr	r3, [pc, #60]	@ (80059cc <__ssvfiscanf_r+0x2c0>)
 800598e:	2b00      	cmp	r3, #0
 8005990:	d100      	bne.n	8005994 <__ssvfiscanf_r+0x288>
 8005992:	e6e3      	b.n	800575c <__ssvfiscanf_r+0x50>
 8005994:	0022      	movs	r2, r4
 8005996:	9801      	ldr	r0, [sp, #4]
 8005998:	ab02      	add	r3, sp, #8
 800599a:	a943      	add	r1, sp, #268	@ 0x10c
 800599c:	e000      	b.n	80059a0 <__ssvfiscanf_r+0x294>
 800599e:	bf00      	nop
 80059a0:	e7a4      	b.n	80058ec <__ssvfiscanf_r+0x1e0>
 80059a2:	89a3      	ldrh	r3, [r4, #12]
 80059a4:	065b      	lsls	r3, r3, #25
 80059a6:	d500      	bpl.n	80059aa <__ssvfiscanf_r+0x29e>
 80059a8:	e76f      	b.n	800588a <__ssvfiscanf_r+0x17e>
 80059aa:	23a5      	movs	r3, #165	@ 0xa5
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	449d      	add	sp, r3
 80059b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059b2:	9846      	ldr	r0, [sp, #280]	@ 0x118
 80059b4:	e7f9      	b.n	80059aa <__ssvfiscanf_r+0x29e>
 80059b6:	46c0      	nop			@ (mov r8, r8)
 80059b8:	fffffd6c 	.word	0xfffffd6c
 80059bc:	08005655 	.word	0x08005655
 80059c0:	080056cd 	.word	0x080056cd
 80059c4:	08006cdb 	.word	0x08006cdb
 80059c8:	08006c92 	.word	0x08006c92
 80059cc:	00000000 	.word	0x00000000

080059d0 <__sfputc_r>:
 80059d0:	6893      	ldr	r3, [r2, #8]
 80059d2:	b510      	push	{r4, lr}
 80059d4:	3b01      	subs	r3, #1
 80059d6:	6093      	str	r3, [r2, #8]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	da04      	bge.n	80059e6 <__sfputc_r+0x16>
 80059dc:	6994      	ldr	r4, [r2, #24]
 80059de:	42a3      	cmp	r3, r4
 80059e0:	db07      	blt.n	80059f2 <__sfputc_r+0x22>
 80059e2:	290a      	cmp	r1, #10
 80059e4:	d005      	beq.n	80059f2 <__sfputc_r+0x22>
 80059e6:	6813      	ldr	r3, [r2, #0]
 80059e8:	1c58      	adds	r0, r3, #1
 80059ea:	6010      	str	r0, [r2, #0]
 80059ec:	7019      	strb	r1, [r3, #0]
 80059ee:	0008      	movs	r0, r1
 80059f0:	bd10      	pop	{r4, pc}
 80059f2:	f7ff fa9b 	bl	8004f2c <__swbuf_r>
 80059f6:	0001      	movs	r1, r0
 80059f8:	e7f9      	b.n	80059ee <__sfputc_r+0x1e>

080059fa <__sfputs_r>:
 80059fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fc:	0006      	movs	r6, r0
 80059fe:	000f      	movs	r7, r1
 8005a00:	0014      	movs	r4, r2
 8005a02:	18d5      	adds	r5, r2, r3
 8005a04:	42ac      	cmp	r4, r5
 8005a06:	d101      	bne.n	8005a0c <__sfputs_r+0x12>
 8005a08:	2000      	movs	r0, #0
 8005a0a:	e007      	b.n	8005a1c <__sfputs_r+0x22>
 8005a0c:	7821      	ldrb	r1, [r4, #0]
 8005a0e:	003a      	movs	r2, r7
 8005a10:	0030      	movs	r0, r6
 8005a12:	f7ff ffdd 	bl	80059d0 <__sfputc_r>
 8005a16:	3401      	adds	r4, #1
 8005a18:	1c43      	adds	r3, r0, #1
 8005a1a:	d1f3      	bne.n	8005a04 <__sfputs_r+0xa>
 8005a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a20 <_vfiprintf_r>:
 8005a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a22:	b0a1      	sub	sp, #132	@ 0x84
 8005a24:	000f      	movs	r7, r1
 8005a26:	0015      	movs	r5, r2
 8005a28:	001e      	movs	r6, r3
 8005a2a:	9003      	str	r0, [sp, #12]
 8005a2c:	2800      	cmp	r0, #0
 8005a2e:	d004      	beq.n	8005a3a <_vfiprintf_r+0x1a>
 8005a30:	6a03      	ldr	r3, [r0, #32]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <_vfiprintf_r+0x1a>
 8005a36:	f7ff f92b 	bl	8004c90 <__sinit>
 8005a3a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a3c:	07db      	lsls	r3, r3, #31
 8005a3e:	d405      	bmi.n	8005a4c <_vfiprintf_r+0x2c>
 8005a40:	89bb      	ldrh	r3, [r7, #12]
 8005a42:	059b      	lsls	r3, r3, #22
 8005a44:	d402      	bmi.n	8005a4c <_vfiprintf_r+0x2c>
 8005a46:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005a48:	f7ff fba7 	bl	800519a <__retarget_lock_acquire_recursive>
 8005a4c:	89bb      	ldrh	r3, [r7, #12]
 8005a4e:	071b      	lsls	r3, r3, #28
 8005a50:	d502      	bpl.n	8005a58 <_vfiprintf_r+0x38>
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d113      	bne.n	8005a80 <_vfiprintf_r+0x60>
 8005a58:	0039      	movs	r1, r7
 8005a5a:	9803      	ldr	r0, [sp, #12]
 8005a5c:	f7ff faa8 	bl	8004fb0 <__swsetup_r>
 8005a60:	2800      	cmp	r0, #0
 8005a62:	d00d      	beq.n	8005a80 <_vfiprintf_r+0x60>
 8005a64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a66:	07db      	lsls	r3, r3, #31
 8005a68:	d503      	bpl.n	8005a72 <_vfiprintf_r+0x52>
 8005a6a:	2001      	movs	r0, #1
 8005a6c:	4240      	negs	r0, r0
 8005a6e:	b021      	add	sp, #132	@ 0x84
 8005a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a72:	89bb      	ldrh	r3, [r7, #12]
 8005a74:	059b      	lsls	r3, r3, #22
 8005a76:	d4f8      	bmi.n	8005a6a <_vfiprintf_r+0x4a>
 8005a78:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005a7a:	f7ff fb8f 	bl	800519c <__retarget_lock_release_recursive>
 8005a7e:	e7f4      	b.n	8005a6a <_vfiprintf_r+0x4a>
 8005a80:	2300      	movs	r3, #0
 8005a82:	ac08      	add	r4, sp, #32
 8005a84:	6163      	str	r3, [r4, #20]
 8005a86:	3320      	adds	r3, #32
 8005a88:	7663      	strb	r3, [r4, #25]
 8005a8a:	3310      	adds	r3, #16
 8005a8c:	76a3      	strb	r3, [r4, #26]
 8005a8e:	9607      	str	r6, [sp, #28]
 8005a90:	002e      	movs	r6, r5
 8005a92:	7833      	ldrb	r3, [r6, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d001      	beq.n	8005a9c <_vfiprintf_r+0x7c>
 8005a98:	2b25      	cmp	r3, #37	@ 0x25
 8005a9a:	d148      	bne.n	8005b2e <_vfiprintf_r+0x10e>
 8005a9c:	1b73      	subs	r3, r6, r5
 8005a9e:	9305      	str	r3, [sp, #20]
 8005aa0:	42ae      	cmp	r6, r5
 8005aa2:	d00b      	beq.n	8005abc <_vfiprintf_r+0x9c>
 8005aa4:	002a      	movs	r2, r5
 8005aa6:	0039      	movs	r1, r7
 8005aa8:	9803      	ldr	r0, [sp, #12]
 8005aaa:	f7ff ffa6 	bl	80059fa <__sfputs_r>
 8005aae:	3001      	adds	r0, #1
 8005ab0:	d100      	bne.n	8005ab4 <_vfiprintf_r+0x94>
 8005ab2:	e0ae      	b.n	8005c12 <_vfiprintf_r+0x1f2>
 8005ab4:	6963      	ldr	r3, [r4, #20]
 8005ab6:	9a05      	ldr	r2, [sp, #20]
 8005ab8:	189b      	adds	r3, r3, r2
 8005aba:	6163      	str	r3, [r4, #20]
 8005abc:	7833      	ldrb	r3, [r6, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d100      	bne.n	8005ac4 <_vfiprintf_r+0xa4>
 8005ac2:	e0a6      	b.n	8005c12 <_vfiprintf_r+0x1f2>
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	4252      	negs	r2, r2
 8005aca:	6062      	str	r2, [r4, #4]
 8005acc:	a904      	add	r1, sp, #16
 8005ace:	3254      	adds	r2, #84	@ 0x54
 8005ad0:	1852      	adds	r2, r2, r1
 8005ad2:	1c75      	adds	r5, r6, #1
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	60e3      	str	r3, [r4, #12]
 8005ad8:	60a3      	str	r3, [r4, #8]
 8005ada:	7013      	strb	r3, [r2, #0]
 8005adc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005ade:	4b59      	ldr	r3, [pc, #356]	@ (8005c44 <_vfiprintf_r+0x224>)
 8005ae0:	2205      	movs	r2, #5
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	7829      	ldrb	r1, [r5, #0]
 8005ae6:	9305      	str	r3, [sp, #20]
 8005ae8:	f000 fd72 	bl	80065d0 <memchr>
 8005aec:	1c6e      	adds	r6, r5, #1
 8005aee:	2800      	cmp	r0, #0
 8005af0:	d11f      	bne.n	8005b32 <_vfiprintf_r+0x112>
 8005af2:	6822      	ldr	r2, [r4, #0]
 8005af4:	06d3      	lsls	r3, r2, #27
 8005af6:	d504      	bpl.n	8005b02 <_vfiprintf_r+0xe2>
 8005af8:	2353      	movs	r3, #83	@ 0x53
 8005afa:	a904      	add	r1, sp, #16
 8005afc:	185b      	adds	r3, r3, r1
 8005afe:	2120      	movs	r1, #32
 8005b00:	7019      	strb	r1, [r3, #0]
 8005b02:	0713      	lsls	r3, r2, #28
 8005b04:	d504      	bpl.n	8005b10 <_vfiprintf_r+0xf0>
 8005b06:	2353      	movs	r3, #83	@ 0x53
 8005b08:	a904      	add	r1, sp, #16
 8005b0a:	185b      	adds	r3, r3, r1
 8005b0c:	212b      	movs	r1, #43	@ 0x2b
 8005b0e:	7019      	strb	r1, [r3, #0]
 8005b10:	782b      	ldrb	r3, [r5, #0]
 8005b12:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b14:	d016      	beq.n	8005b44 <_vfiprintf_r+0x124>
 8005b16:	002e      	movs	r6, r5
 8005b18:	2100      	movs	r1, #0
 8005b1a:	200a      	movs	r0, #10
 8005b1c:	68e3      	ldr	r3, [r4, #12]
 8005b1e:	7832      	ldrb	r2, [r6, #0]
 8005b20:	1c75      	adds	r5, r6, #1
 8005b22:	3a30      	subs	r2, #48	@ 0x30
 8005b24:	2a09      	cmp	r2, #9
 8005b26:	d950      	bls.n	8005bca <_vfiprintf_r+0x1aa>
 8005b28:	2900      	cmp	r1, #0
 8005b2a:	d111      	bne.n	8005b50 <_vfiprintf_r+0x130>
 8005b2c:	e017      	b.n	8005b5e <_vfiprintf_r+0x13e>
 8005b2e:	3601      	adds	r6, #1
 8005b30:	e7af      	b.n	8005a92 <_vfiprintf_r+0x72>
 8005b32:	9b05      	ldr	r3, [sp, #20]
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	1ac0      	subs	r0, r0, r3
 8005b38:	2301      	movs	r3, #1
 8005b3a:	4083      	lsls	r3, r0
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	0035      	movs	r5, r6
 8005b40:	6023      	str	r3, [r4, #0]
 8005b42:	e7cc      	b.n	8005ade <_vfiprintf_r+0xbe>
 8005b44:	9b07      	ldr	r3, [sp, #28]
 8005b46:	1d19      	adds	r1, r3, #4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	9107      	str	r1, [sp, #28]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	db01      	blt.n	8005b54 <_vfiprintf_r+0x134>
 8005b50:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005b52:	e004      	b.n	8005b5e <_vfiprintf_r+0x13e>
 8005b54:	425b      	negs	r3, r3
 8005b56:	60e3      	str	r3, [r4, #12]
 8005b58:	2302      	movs	r3, #2
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	7833      	ldrb	r3, [r6, #0]
 8005b60:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b62:	d10c      	bne.n	8005b7e <_vfiprintf_r+0x15e>
 8005b64:	7873      	ldrb	r3, [r6, #1]
 8005b66:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b68:	d134      	bne.n	8005bd4 <_vfiprintf_r+0x1b4>
 8005b6a:	9b07      	ldr	r3, [sp, #28]
 8005b6c:	3602      	adds	r6, #2
 8005b6e:	1d1a      	adds	r2, r3, #4
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	9207      	str	r2, [sp, #28]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	da01      	bge.n	8005b7c <_vfiprintf_r+0x15c>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	425b      	negs	r3, r3
 8005b7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b7e:	4d32      	ldr	r5, [pc, #200]	@ (8005c48 <_vfiprintf_r+0x228>)
 8005b80:	2203      	movs	r2, #3
 8005b82:	0028      	movs	r0, r5
 8005b84:	7831      	ldrb	r1, [r6, #0]
 8005b86:	f000 fd23 	bl	80065d0 <memchr>
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d006      	beq.n	8005b9c <_vfiprintf_r+0x17c>
 8005b8e:	2340      	movs	r3, #64	@ 0x40
 8005b90:	1b40      	subs	r0, r0, r5
 8005b92:	4083      	lsls	r3, r0
 8005b94:	6822      	ldr	r2, [r4, #0]
 8005b96:	3601      	adds	r6, #1
 8005b98:	4313      	orrs	r3, r2
 8005b9a:	6023      	str	r3, [r4, #0]
 8005b9c:	7831      	ldrb	r1, [r6, #0]
 8005b9e:	2206      	movs	r2, #6
 8005ba0:	482a      	ldr	r0, [pc, #168]	@ (8005c4c <_vfiprintf_r+0x22c>)
 8005ba2:	1c75      	adds	r5, r6, #1
 8005ba4:	7621      	strb	r1, [r4, #24]
 8005ba6:	f000 fd13 	bl	80065d0 <memchr>
 8005baa:	2800      	cmp	r0, #0
 8005bac:	d040      	beq.n	8005c30 <_vfiprintf_r+0x210>
 8005bae:	4b28      	ldr	r3, [pc, #160]	@ (8005c50 <_vfiprintf_r+0x230>)
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d122      	bne.n	8005bfa <_vfiprintf_r+0x1da>
 8005bb4:	2207      	movs	r2, #7
 8005bb6:	9b07      	ldr	r3, [sp, #28]
 8005bb8:	3307      	adds	r3, #7
 8005bba:	4393      	bics	r3, r2
 8005bbc:	3308      	adds	r3, #8
 8005bbe:	9307      	str	r3, [sp, #28]
 8005bc0:	6963      	ldr	r3, [r4, #20]
 8005bc2:	9a04      	ldr	r2, [sp, #16]
 8005bc4:	189b      	adds	r3, r3, r2
 8005bc6:	6163      	str	r3, [r4, #20]
 8005bc8:	e762      	b.n	8005a90 <_vfiprintf_r+0x70>
 8005bca:	4343      	muls	r3, r0
 8005bcc:	002e      	movs	r6, r5
 8005bce:	2101      	movs	r1, #1
 8005bd0:	189b      	adds	r3, r3, r2
 8005bd2:	e7a4      	b.n	8005b1e <_vfiprintf_r+0xfe>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	200a      	movs	r0, #10
 8005bd8:	0019      	movs	r1, r3
 8005bda:	3601      	adds	r6, #1
 8005bdc:	6063      	str	r3, [r4, #4]
 8005bde:	7832      	ldrb	r2, [r6, #0]
 8005be0:	1c75      	adds	r5, r6, #1
 8005be2:	3a30      	subs	r2, #48	@ 0x30
 8005be4:	2a09      	cmp	r2, #9
 8005be6:	d903      	bls.n	8005bf0 <_vfiprintf_r+0x1d0>
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d0c8      	beq.n	8005b7e <_vfiprintf_r+0x15e>
 8005bec:	9109      	str	r1, [sp, #36]	@ 0x24
 8005bee:	e7c6      	b.n	8005b7e <_vfiprintf_r+0x15e>
 8005bf0:	4341      	muls	r1, r0
 8005bf2:	002e      	movs	r6, r5
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	1889      	adds	r1, r1, r2
 8005bf8:	e7f1      	b.n	8005bde <_vfiprintf_r+0x1be>
 8005bfa:	aa07      	add	r2, sp, #28
 8005bfc:	9200      	str	r2, [sp, #0]
 8005bfe:	0021      	movs	r1, r4
 8005c00:	003a      	movs	r2, r7
 8005c02:	4b14      	ldr	r3, [pc, #80]	@ (8005c54 <_vfiprintf_r+0x234>)
 8005c04:	9803      	ldr	r0, [sp, #12]
 8005c06:	e000      	b.n	8005c0a <_vfiprintf_r+0x1ea>
 8005c08:	bf00      	nop
 8005c0a:	9004      	str	r0, [sp, #16]
 8005c0c:	9b04      	ldr	r3, [sp, #16]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	d1d6      	bne.n	8005bc0 <_vfiprintf_r+0x1a0>
 8005c12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c14:	07db      	lsls	r3, r3, #31
 8005c16:	d405      	bmi.n	8005c24 <_vfiprintf_r+0x204>
 8005c18:	89bb      	ldrh	r3, [r7, #12]
 8005c1a:	059b      	lsls	r3, r3, #22
 8005c1c:	d402      	bmi.n	8005c24 <_vfiprintf_r+0x204>
 8005c1e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005c20:	f7ff fabc 	bl	800519c <__retarget_lock_release_recursive>
 8005c24:	89bb      	ldrh	r3, [r7, #12]
 8005c26:	065b      	lsls	r3, r3, #25
 8005c28:	d500      	bpl.n	8005c2c <_vfiprintf_r+0x20c>
 8005c2a:	e71e      	b.n	8005a6a <_vfiprintf_r+0x4a>
 8005c2c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005c2e:	e71e      	b.n	8005a6e <_vfiprintf_r+0x4e>
 8005c30:	aa07      	add	r2, sp, #28
 8005c32:	9200      	str	r2, [sp, #0]
 8005c34:	0021      	movs	r1, r4
 8005c36:	003a      	movs	r2, r7
 8005c38:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <_vfiprintf_r+0x234>)
 8005c3a:	9803      	ldr	r0, [sp, #12]
 8005c3c:	f000 f87c 	bl	8005d38 <_printf_i>
 8005c40:	e7e3      	b.n	8005c0a <_vfiprintf_r+0x1ea>
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	08006c8c 	.word	0x08006c8c
 8005c48:	08006c92 	.word	0x08006c92
 8005c4c:	08006c96 	.word	0x08006c96
 8005c50:	00000000 	.word	0x00000000
 8005c54:	080059fb 	.word	0x080059fb

08005c58 <_printf_common>:
 8005c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005c5a:	0016      	movs	r6, r2
 8005c5c:	9301      	str	r3, [sp, #4]
 8005c5e:	688a      	ldr	r2, [r1, #8]
 8005c60:	690b      	ldr	r3, [r1, #16]
 8005c62:	000c      	movs	r4, r1
 8005c64:	9000      	str	r0, [sp, #0]
 8005c66:	4293      	cmp	r3, r2
 8005c68:	da00      	bge.n	8005c6c <_printf_common+0x14>
 8005c6a:	0013      	movs	r3, r2
 8005c6c:	0022      	movs	r2, r4
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	3243      	adds	r2, #67	@ 0x43
 8005c72:	7812      	ldrb	r2, [r2, #0]
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	d001      	beq.n	8005c7c <_printf_common+0x24>
 8005c78:	3301      	adds	r3, #1
 8005c7a:	6033      	str	r3, [r6, #0]
 8005c7c:	6823      	ldr	r3, [r4, #0]
 8005c7e:	069b      	lsls	r3, r3, #26
 8005c80:	d502      	bpl.n	8005c88 <_printf_common+0x30>
 8005c82:	6833      	ldr	r3, [r6, #0]
 8005c84:	3302      	adds	r3, #2
 8005c86:	6033      	str	r3, [r6, #0]
 8005c88:	6822      	ldr	r2, [r4, #0]
 8005c8a:	2306      	movs	r3, #6
 8005c8c:	0015      	movs	r5, r2
 8005c8e:	401d      	ands	r5, r3
 8005c90:	421a      	tst	r2, r3
 8005c92:	d027      	beq.n	8005ce4 <_printf_common+0x8c>
 8005c94:	0023      	movs	r3, r4
 8005c96:	3343      	adds	r3, #67	@ 0x43
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	1e5a      	subs	r2, r3, #1
 8005c9c:	4193      	sbcs	r3, r2
 8005c9e:	6822      	ldr	r2, [r4, #0]
 8005ca0:	0692      	lsls	r2, r2, #26
 8005ca2:	d430      	bmi.n	8005d06 <_printf_common+0xae>
 8005ca4:	0022      	movs	r2, r4
 8005ca6:	9901      	ldr	r1, [sp, #4]
 8005ca8:	9800      	ldr	r0, [sp, #0]
 8005caa:	9d08      	ldr	r5, [sp, #32]
 8005cac:	3243      	adds	r2, #67	@ 0x43
 8005cae:	47a8      	blx	r5
 8005cb0:	3001      	adds	r0, #1
 8005cb2:	d025      	beq.n	8005d00 <_printf_common+0xa8>
 8005cb4:	2206      	movs	r2, #6
 8005cb6:	6823      	ldr	r3, [r4, #0]
 8005cb8:	2500      	movs	r5, #0
 8005cba:	4013      	ands	r3, r2
 8005cbc:	2b04      	cmp	r3, #4
 8005cbe:	d105      	bne.n	8005ccc <_printf_common+0x74>
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	68e5      	ldr	r5, [r4, #12]
 8005cc4:	1aed      	subs	r5, r5, r3
 8005cc6:	43eb      	mvns	r3, r5
 8005cc8:	17db      	asrs	r3, r3, #31
 8005cca:	401d      	ands	r5, r3
 8005ccc:	68a3      	ldr	r3, [r4, #8]
 8005cce:	6922      	ldr	r2, [r4, #16]
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	dd01      	ble.n	8005cd8 <_printf_common+0x80>
 8005cd4:	1a9b      	subs	r3, r3, r2
 8005cd6:	18ed      	adds	r5, r5, r3
 8005cd8:	2600      	movs	r6, #0
 8005cda:	42b5      	cmp	r5, r6
 8005cdc:	d120      	bne.n	8005d20 <_printf_common+0xc8>
 8005cde:	2000      	movs	r0, #0
 8005ce0:	e010      	b.n	8005d04 <_printf_common+0xac>
 8005ce2:	3501      	adds	r5, #1
 8005ce4:	68e3      	ldr	r3, [r4, #12]
 8005ce6:	6832      	ldr	r2, [r6, #0]
 8005ce8:	1a9b      	subs	r3, r3, r2
 8005cea:	42ab      	cmp	r3, r5
 8005cec:	ddd2      	ble.n	8005c94 <_printf_common+0x3c>
 8005cee:	0022      	movs	r2, r4
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	9901      	ldr	r1, [sp, #4]
 8005cf4:	9800      	ldr	r0, [sp, #0]
 8005cf6:	9f08      	ldr	r7, [sp, #32]
 8005cf8:	3219      	adds	r2, #25
 8005cfa:	47b8      	blx	r7
 8005cfc:	3001      	adds	r0, #1
 8005cfe:	d1f0      	bne.n	8005ce2 <_printf_common+0x8a>
 8005d00:	2001      	movs	r0, #1
 8005d02:	4240      	negs	r0, r0
 8005d04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d06:	2030      	movs	r0, #48	@ 0x30
 8005d08:	18e1      	adds	r1, r4, r3
 8005d0a:	3143      	adds	r1, #67	@ 0x43
 8005d0c:	7008      	strb	r0, [r1, #0]
 8005d0e:	0021      	movs	r1, r4
 8005d10:	1c5a      	adds	r2, r3, #1
 8005d12:	3145      	adds	r1, #69	@ 0x45
 8005d14:	7809      	ldrb	r1, [r1, #0]
 8005d16:	18a2      	adds	r2, r4, r2
 8005d18:	3243      	adds	r2, #67	@ 0x43
 8005d1a:	3302      	adds	r3, #2
 8005d1c:	7011      	strb	r1, [r2, #0]
 8005d1e:	e7c1      	b.n	8005ca4 <_printf_common+0x4c>
 8005d20:	0022      	movs	r2, r4
 8005d22:	2301      	movs	r3, #1
 8005d24:	9901      	ldr	r1, [sp, #4]
 8005d26:	9800      	ldr	r0, [sp, #0]
 8005d28:	9f08      	ldr	r7, [sp, #32]
 8005d2a:	321a      	adds	r2, #26
 8005d2c:	47b8      	blx	r7
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d0e6      	beq.n	8005d00 <_printf_common+0xa8>
 8005d32:	3601      	adds	r6, #1
 8005d34:	e7d1      	b.n	8005cda <_printf_common+0x82>
	...

08005d38 <_printf_i>:
 8005d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d3a:	b08b      	sub	sp, #44	@ 0x2c
 8005d3c:	9206      	str	r2, [sp, #24]
 8005d3e:	000a      	movs	r2, r1
 8005d40:	3243      	adds	r2, #67	@ 0x43
 8005d42:	9307      	str	r3, [sp, #28]
 8005d44:	9005      	str	r0, [sp, #20]
 8005d46:	9203      	str	r2, [sp, #12]
 8005d48:	7e0a      	ldrb	r2, [r1, #24]
 8005d4a:	000c      	movs	r4, r1
 8005d4c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d4e:	2a78      	cmp	r2, #120	@ 0x78
 8005d50:	d809      	bhi.n	8005d66 <_printf_i+0x2e>
 8005d52:	2a62      	cmp	r2, #98	@ 0x62
 8005d54:	d80b      	bhi.n	8005d6e <_printf_i+0x36>
 8005d56:	2a00      	cmp	r2, #0
 8005d58:	d100      	bne.n	8005d5c <_printf_i+0x24>
 8005d5a:	e0bc      	b.n	8005ed6 <_printf_i+0x19e>
 8005d5c:	497b      	ldr	r1, [pc, #492]	@ (8005f4c <_printf_i+0x214>)
 8005d5e:	9104      	str	r1, [sp, #16]
 8005d60:	2a58      	cmp	r2, #88	@ 0x58
 8005d62:	d100      	bne.n	8005d66 <_printf_i+0x2e>
 8005d64:	e090      	b.n	8005e88 <_printf_i+0x150>
 8005d66:	0025      	movs	r5, r4
 8005d68:	3542      	adds	r5, #66	@ 0x42
 8005d6a:	702a      	strb	r2, [r5, #0]
 8005d6c:	e022      	b.n	8005db4 <_printf_i+0x7c>
 8005d6e:	0010      	movs	r0, r2
 8005d70:	3863      	subs	r0, #99	@ 0x63
 8005d72:	2815      	cmp	r0, #21
 8005d74:	d8f7      	bhi.n	8005d66 <_printf_i+0x2e>
 8005d76:	f7fa f9cf 	bl	8000118 <__gnu_thumb1_case_shi>
 8005d7a:	0016      	.short	0x0016
 8005d7c:	fff6001f 	.word	0xfff6001f
 8005d80:	fff6fff6 	.word	0xfff6fff6
 8005d84:	001ffff6 	.word	0x001ffff6
 8005d88:	fff6fff6 	.word	0xfff6fff6
 8005d8c:	fff6fff6 	.word	0xfff6fff6
 8005d90:	003600a1 	.word	0x003600a1
 8005d94:	fff60080 	.word	0xfff60080
 8005d98:	00b2fff6 	.word	0x00b2fff6
 8005d9c:	0036fff6 	.word	0x0036fff6
 8005da0:	fff6fff6 	.word	0xfff6fff6
 8005da4:	0084      	.short	0x0084
 8005da6:	0025      	movs	r5, r4
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	3542      	adds	r5, #66	@ 0x42
 8005dac:	1d11      	adds	r1, r2, #4
 8005dae:	6019      	str	r1, [r3, #0]
 8005db0:	6813      	ldr	r3, [r2, #0]
 8005db2:	702b      	strb	r3, [r5, #0]
 8005db4:	2301      	movs	r3, #1
 8005db6:	e0a0      	b.n	8005efa <_printf_i+0x1c2>
 8005db8:	6818      	ldr	r0, [r3, #0]
 8005dba:	6809      	ldr	r1, [r1, #0]
 8005dbc:	1d02      	adds	r2, r0, #4
 8005dbe:	060d      	lsls	r5, r1, #24
 8005dc0:	d50b      	bpl.n	8005dda <_printf_i+0xa2>
 8005dc2:	6806      	ldr	r6, [r0, #0]
 8005dc4:	601a      	str	r2, [r3, #0]
 8005dc6:	2e00      	cmp	r6, #0
 8005dc8:	da03      	bge.n	8005dd2 <_printf_i+0x9a>
 8005dca:	232d      	movs	r3, #45	@ 0x2d
 8005dcc:	9a03      	ldr	r2, [sp, #12]
 8005dce:	4276      	negs	r6, r6
 8005dd0:	7013      	strb	r3, [r2, #0]
 8005dd2:	4b5e      	ldr	r3, [pc, #376]	@ (8005f4c <_printf_i+0x214>)
 8005dd4:	270a      	movs	r7, #10
 8005dd6:	9304      	str	r3, [sp, #16]
 8005dd8:	e018      	b.n	8005e0c <_printf_i+0xd4>
 8005dda:	6806      	ldr	r6, [r0, #0]
 8005ddc:	601a      	str	r2, [r3, #0]
 8005dde:	0649      	lsls	r1, r1, #25
 8005de0:	d5f1      	bpl.n	8005dc6 <_printf_i+0x8e>
 8005de2:	b236      	sxth	r6, r6
 8005de4:	e7ef      	b.n	8005dc6 <_printf_i+0x8e>
 8005de6:	6808      	ldr	r0, [r1, #0]
 8005de8:	6819      	ldr	r1, [r3, #0]
 8005dea:	c940      	ldmia	r1!, {r6}
 8005dec:	0605      	lsls	r5, r0, #24
 8005dee:	d402      	bmi.n	8005df6 <_printf_i+0xbe>
 8005df0:	0640      	lsls	r0, r0, #25
 8005df2:	d500      	bpl.n	8005df6 <_printf_i+0xbe>
 8005df4:	b2b6      	uxth	r6, r6
 8005df6:	6019      	str	r1, [r3, #0]
 8005df8:	4b54      	ldr	r3, [pc, #336]	@ (8005f4c <_printf_i+0x214>)
 8005dfa:	270a      	movs	r7, #10
 8005dfc:	9304      	str	r3, [sp, #16]
 8005dfe:	2a6f      	cmp	r2, #111	@ 0x6f
 8005e00:	d100      	bne.n	8005e04 <_printf_i+0xcc>
 8005e02:	3f02      	subs	r7, #2
 8005e04:	0023      	movs	r3, r4
 8005e06:	2200      	movs	r2, #0
 8005e08:	3343      	adds	r3, #67	@ 0x43
 8005e0a:	701a      	strb	r2, [r3, #0]
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	60a3      	str	r3, [r4, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	db03      	blt.n	8005e1c <_printf_i+0xe4>
 8005e14:	2104      	movs	r1, #4
 8005e16:	6822      	ldr	r2, [r4, #0]
 8005e18:	438a      	bics	r2, r1
 8005e1a:	6022      	str	r2, [r4, #0]
 8005e1c:	2e00      	cmp	r6, #0
 8005e1e:	d102      	bne.n	8005e26 <_printf_i+0xee>
 8005e20:	9d03      	ldr	r5, [sp, #12]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d00c      	beq.n	8005e40 <_printf_i+0x108>
 8005e26:	9d03      	ldr	r5, [sp, #12]
 8005e28:	0030      	movs	r0, r6
 8005e2a:	0039      	movs	r1, r7
 8005e2c:	f7fa fa04 	bl	8000238 <__aeabi_uidivmod>
 8005e30:	9b04      	ldr	r3, [sp, #16]
 8005e32:	3d01      	subs	r5, #1
 8005e34:	5c5b      	ldrb	r3, [r3, r1]
 8005e36:	702b      	strb	r3, [r5, #0]
 8005e38:	0033      	movs	r3, r6
 8005e3a:	0006      	movs	r6, r0
 8005e3c:	429f      	cmp	r7, r3
 8005e3e:	d9f3      	bls.n	8005e28 <_printf_i+0xf0>
 8005e40:	2f08      	cmp	r7, #8
 8005e42:	d109      	bne.n	8005e58 <_printf_i+0x120>
 8005e44:	6823      	ldr	r3, [r4, #0]
 8005e46:	07db      	lsls	r3, r3, #31
 8005e48:	d506      	bpl.n	8005e58 <_printf_i+0x120>
 8005e4a:	6862      	ldr	r2, [r4, #4]
 8005e4c:	6923      	ldr	r3, [r4, #16]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	dc02      	bgt.n	8005e58 <_printf_i+0x120>
 8005e52:	2330      	movs	r3, #48	@ 0x30
 8005e54:	3d01      	subs	r5, #1
 8005e56:	702b      	strb	r3, [r5, #0]
 8005e58:	9b03      	ldr	r3, [sp, #12]
 8005e5a:	1b5b      	subs	r3, r3, r5
 8005e5c:	6123      	str	r3, [r4, #16]
 8005e5e:	9b07      	ldr	r3, [sp, #28]
 8005e60:	0021      	movs	r1, r4
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	9805      	ldr	r0, [sp, #20]
 8005e66:	9b06      	ldr	r3, [sp, #24]
 8005e68:	aa09      	add	r2, sp, #36	@ 0x24
 8005e6a:	f7ff fef5 	bl	8005c58 <_printf_common>
 8005e6e:	3001      	adds	r0, #1
 8005e70:	d148      	bne.n	8005f04 <_printf_i+0x1cc>
 8005e72:	2001      	movs	r0, #1
 8005e74:	4240      	negs	r0, r0
 8005e76:	b00b      	add	sp, #44	@ 0x2c
 8005e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e7a:	2220      	movs	r2, #32
 8005e7c:	6809      	ldr	r1, [r1, #0]
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	6022      	str	r2, [r4, #0]
 8005e82:	2278      	movs	r2, #120	@ 0x78
 8005e84:	4932      	ldr	r1, [pc, #200]	@ (8005f50 <_printf_i+0x218>)
 8005e86:	9104      	str	r1, [sp, #16]
 8005e88:	0021      	movs	r1, r4
 8005e8a:	3145      	adds	r1, #69	@ 0x45
 8005e8c:	700a      	strb	r2, [r1, #0]
 8005e8e:	6819      	ldr	r1, [r3, #0]
 8005e90:	6822      	ldr	r2, [r4, #0]
 8005e92:	c940      	ldmia	r1!, {r6}
 8005e94:	0610      	lsls	r0, r2, #24
 8005e96:	d402      	bmi.n	8005e9e <_printf_i+0x166>
 8005e98:	0650      	lsls	r0, r2, #25
 8005e9a:	d500      	bpl.n	8005e9e <_printf_i+0x166>
 8005e9c:	b2b6      	uxth	r6, r6
 8005e9e:	6019      	str	r1, [r3, #0]
 8005ea0:	07d3      	lsls	r3, r2, #31
 8005ea2:	d502      	bpl.n	8005eaa <_printf_i+0x172>
 8005ea4:	2320      	movs	r3, #32
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	6023      	str	r3, [r4, #0]
 8005eaa:	2e00      	cmp	r6, #0
 8005eac:	d001      	beq.n	8005eb2 <_printf_i+0x17a>
 8005eae:	2710      	movs	r7, #16
 8005eb0:	e7a8      	b.n	8005e04 <_printf_i+0xcc>
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	6823      	ldr	r3, [r4, #0]
 8005eb6:	4393      	bics	r3, r2
 8005eb8:	6023      	str	r3, [r4, #0]
 8005eba:	e7f8      	b.n	8005eae <_printf_i+0x176>
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	680d      	ldr	r5, [r1, #0]
 8005ec0:	1d10      	adds	r0, r2, #4
 8005ec2:	6949      	ldr	r1, [r1, #20]
 8005ec4:	6018      	str	r0, [r3, #0]
 8005ec6:	6813      	ldr	r3, [r2, #0]
 8005ec8:	062e      	lsls	r6, r5, #24
 8005eca:	d501      	bpl.n	8005ed0 <_printf_i+0x198>
 8005ecc:	6019      	str	r1, [r3, #0]
 8005ece:	e002      	b.n	8005ed6 <_printf_i+0x19e>
 8005ed0:	066d      	lsls	r5, r5, #25
 8005ed2:	d5fb      	bpl.n	8005ecc <_printf_i+0x194>
 8005ed4:	8019      	strh	r1, [r3, #0]
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	9d03      	ldr	r5, [sp, #12]
 8005eda:	6123      	str	r3, [r4, #16]
 8005edc:	e7bf      	b.n	8005e5e <_printf_i+0x126>
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	1d11      	adds	r1, r2, #4
 8005ee2:	6019      	str	r1, [r3, #0]
 8005ee4:	6815      	ldr	r5, [r2, #0]
 8005ee6:	2100      	movs	r1, #0
 8005ee8:	0028      	movs	r0, r5
 8005eea:	6862      	ldr	r2, [r4, #4]
 8005eec:	f000 fb70 	bl	80065d0 <memchr>
 8005ef0:	2800      	cmp	r0, #0
 8005ef2:	d001      	beq.n	8005ef8 <_printf_i+0x1c0>
 8005ef4:	1b40      	subs	r0, r0, r5
 8005ef6:	6060      	str	r0, [r4, #4]
 8005ef8:	6863      	ldr	r3, [r4, #4]
 8005efa:	6123      	str	r3, [r4, #16]
 8005efc:	2300      	movs	r3, #0
 8005efe:	9a03      	ldr	r2, [sp, #12]
 8005f00:	7013      	strb	r3, [r2, #0]
 8005f02:	e7ac      	b.n	8005e5e <_printf_i+0x126>
 8005f04:	002a      	movs	r2, r5
 8005f06:	6923      	ldr	r3, [r4, #16]
 8005f08:	9906      	ldr	r1, [sp, #24]
 8005f0a:	9805      	ldr	r0, [sp, #20]
 8005f0c:	9d07      	ldr	r5, [sp, #28]
 8005f0e:	47a8      	blx	r5
 8005f10:	3001      	adds	r0, #1
 8005f12:	d0ae      	beq.n	8005e72 <_printf_i+0x13a>
 8005f14:	6823      	ldr	r3, [r4, #0]
 8005f16:	079b      	lsls	r3, r3, #30
 8005f18:	d415      	bmi.n	8005f46 <_printf_i+0x20e>
 8005f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f1c:	68e0      	ldr	r0, [r4, #12]
 8005f1e:	4298      	cmp	r0, r3
 8005f20:	daa9      	bge.n	8005e76 <_printf_i+0x13e>
 8005f22:	0018      	movs	r0, r3
 8005f24:	e7a7      	b.n	8005e76 <_printf_i+0x13e>
 8005f26:	0022      	movs	r2, r4
 8005f28:	2301      	movs	r3, #1
 8005f2a:	9906      	ldr	r1, [sp, #24]
 8005f2c:	9805      	ldr	r0, [sp, #20]
 8005f2e:	9e07      	ldr	r6, [sp, #28]
 8005f30:	3219      	adds	r2, #25
 8005f32:	47b0      	blx	r6
 8005f34:	3001      	adds	r0, #1
 8005f36:	d09c      	beq.n	8005e72 <_printf_i+0x13a>
 8005f38:	3501      	adds	r5, #1
 8005f3a:	68e3      	ldr	r3, [r4, #12]
 8005f3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f3e:	1a9b      	subs	r3, r3, r2
 8005f40:	42ab      	cmp	r3, r5
 8005f42:	dcf0      	bgt.n	8005f26 <_printf_i+0x1ee>
 8005f44:	e7e9      	b.n	8005f1a <_printf_i+0x1e2>
 8005f46:	2500      	movs	r5, #0
 8005f48:	e7f7      	b.n	8005f3a <_printf_i+0x202>
 8005f4a:	46c0      	nop			@ (mov r8, r8)
 8005f4c:	08006c9d 	.word	0x08006c9d
 8005f50:	08006cae 	.word	0x08006cae

08005f54 <_scanf_chars>:
 8005f54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f56:	0015      	movs	r5, r2
 8005f58:	688a      	ldr	r2, [r1, #8]
 8005f5a:	000c      	movs	r4, r1
 8005f5c:	9001      	str	r0, [sp, #4]
 8005f5e:	2a00      	cmp	r2, #0
 8005f60:	d104      	bne.n	8005f6c <_scanf_chars+0x18>
 8005f62:	698a      	ldr	r2, [r1, #24]
 8005f64:	2a00      	cmp	r2, #0
 8005f66:	d117      	bne.n	8005f98 <_scanf_chars+0x44>
 8005f68:	3201      	adds	r2, #1
 8005f6a:	60a2      	str	r2, [r4, #8]
 8005f6c:	6822      	ldr	r2, [r4, #0]
 8005f6e:	06d2      	lsls	r2, r2, #27
 8005f70:	d403      	bmi.n	8005f7a <_scanf_chars+0x26>
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	1d11      	adds	r1, r2, #4
 8005f76:	6019      	str	r1, [r3, #0]
 8005f78:	6817      	ldr	r7, [r2, #0]
 8005f7a:	2600      	movs	r6, #0
 8005f7c:	69a0      	ldr	r0, [r4, #24]
 8005f7e:	2800      	cmp	r0, #0
 8005f80:	d016      	beq.n	8005fb0 <_scanf_chars+0x5c>
 8005f82:	2801      	cmp	r0, #1
 8005f84:	d10b      	bne.n	8005f9e <_scanf_chars+0x4a>
 8005f86:	682b      	ldr	r3, [r5, #0]
 8005f88:	6962      	ldr	r2, [r4, #20]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	5cd3      	ldrb	r3, [r2, r3]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10e      	bne.n	8005fb0 <_scanf_chars+0x5c>
 8005f92:	2e00      	cmp	r6, #0
 8005f94:	d03b      	beq.n	800600e <_scanf_chars+0xba>
 8005f96:	e029      	b.n	8005fec <_scanf_chars+0x98>
 8005f98:	2201      	movs	r2, #1
 8005f9a:	4252      	negs	r2, r2
 8005f9c:	e7e5      	b.n	8005f6a <_scanf_chars+0x16>
 8005f9e:	2802      	cmp	r0, #2
 8005fa0:	d124      	bne.n	8005fec <_scanf_chars+0x98>
 8005fa2:	682b      	ldr	r3, [r5, #0]
 8005fa4:	4a1a      	ldr	r2, [pc, #104]	@ (8006010 <_scanf_chars+0xbc>)
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	5cd3      	ldrb	r3, [r2, r3]
 8005faa:	2208      	movs	r2, #8
 8005fac:	4213      	tst	r3, r2
 8005fae:	d11d      	bne.n	8005fec <_scanf_chars+0x98>
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	3601      	adds	r6, #1
 8005fb6:	4213      	tst	r3, r2
 8005fb8:	d103      	bne.n	8005fc2 <_scanf_chars+0x6e>
 8005fba:	682b      	ldr	r3, [r5, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	703b      	strb	r3, [r7, #0]
 8005fc0:	3701      	adds	r7, #1
 8005fc2:	682a      	ldr	r2, [r5, #0]
 8005fc4:	686b      	ldr	r3, [r5, #4]
 8005fc6:	3201      	adds	r2, #1
 8005fc8:	602a      	str	r2, [r5, #0]
 8005fca:	68a2      	ldr	r2, [r4, #8]
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	3a01      	subs	r2, #1
 8005fd0:	606b      	str	r3, [r5, #4]
 8005fd2:	60a2      	str	r2, [r4, #8]
 8005fd4:	2a00      	cmp	r2, #0
 8005fd6:	d009      	beq.n	8005fec <_scanf_chars+0x98>
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	dccf      	bgt.n	8005f7c <_scanf_chars+0x28>
 8005fdc:	23c0      	movs	r3, #192	@ 0xc0
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	0029      	movs	r1, r5
 8005fe2:	58e3      	ldr	r3, [r4, r3]
 8005fe4:	9801      	ldr	r0, [sp, #4]
 8005fe6:	4798      	blx	r3
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d0c7      	beq.n	8005f7c <_scanf_chars+0x28>
 8005fec:	6822      	ldr	r2, [r4, #0]
 8005fee:	2310      	movs	r3, #16
 8005ff0:	0011      	movs	r1, r2
 8005ff2:	4019      	ands	r1, r3
 8005ff4:	421a      	tst	r2, r3
 8005ff6:	d106      	bne.n	8006006 <_scanf_chars+0xb2>
 8005ff8:	68e3      	ldr	r3, [r4, #12]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	60e3      	str	r3, [r4, #12]
 8005ffe:	69a3      	ldr	r3, [r4, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d000      	beq.n	8006006 <_scanf_chars+0xb2>
 8006004:	7039      	strb	r1, [r7, #0]
 8006006:	2000      	movs	r0, #0
 8006008:	6923      	ldr	r3, [r4, #16]
 800600a:	199b      	adds	r3, r3, r6
 800600c:	6123      	str	r3, [r4, #16]
 800600e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006010:	08006cdb 	.word	0x08006cdb

08006014 <_scanf_i>:
 8006014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006016:	b08b      	sub	sp, #44	@ 0x2c
 8006018:	9301      	str	r3, [sp, #4]
 800601a:	4b78      	ldr	r3, [pc, #480]	@ (80061fc <_scanf_i+0x1e8>)
 800601c:	0016      	movs	r6, r2
 800601e:	9004      	str	r0, [sp, #16]
 8006020:	aa07      	add	r2, sp, #28
 8006022:	cba1      	ldmia	r3!, {r0, r5, r7}
 8006024:	c2a1      	stmia	r2!, {r0, r5, r7}
 8006026:	4a76      	ldr	r2, [pc, #472]	@ (8006200 <_scanf_i+0x1ec>)
 8006028:	698b      	ldr	r3, [r1, #24]
 800602a:	000c      	movs	r4, r1
 800602c:	9205      	str	r2, [sp, #20]
 800602e:	2b03      	cmp	r3, #3
 8006030:	d101      	bne.n	8006036 <_scanf_i+0x22>
 8006032:	4b74      	ldr	r3, [pc, #464]	@ (8006204 <_scanf_i+0x1f0>)
 8006034:	9305      	str	r3, [sp, #20]
 8006036:	22ae      	movs	r2, #174	@ 0xae
 8006038:	2000      	movs	r0, #0
 800603a:	68a3      	ldr	r3, [r4, #8]
 800603c:	0052      	lsls	r2, r2, #1
 800603e:	1e59      	subs	r1, r3, #1
 8006040:	9003      	str	r0, [sp, #12]
 8006042:	4291      	cmp	r1, r2
 8006044:	d905      	bls.n	8006052 <_scanf_i+0x3e>
 8006046:	3b5e      	subs	r3, #94	@ 0x5e
 8006048:	3bff      	subs	r3, #255	@ 0xff
 800604a:	9303      	str	r3, [sp, #12]
 800604c:	235e      	movs	r3, #94	@ 0x5e
 800604e:	33ff      	adds	r3, #255	@ 0xff
 8006050:	60a3      	str	r3, [r4, #8]
 8006052:	0023      	movs	r3, r4
 8006054:	331c      	adds	r3, #28
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	23d0      	movs	r3, #208	@ 0xd0
 800605a:	2700      	movs	r7, #0
 800605c:	6822      	ldr	r2, [r4, #0]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	4313      	orrs	r3, r2
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	9b00      	ldr	r3, [sp, #0]
 8006066:	9302      	str	r3, [sp, #8]
 8006068:	6833      	ldr	r3, [r6, #0]
 800606a:	a807      	add	r0, sp, #28
 800606c:	7819      	ldrb	r1, [r3, #0]
 800606e:	00bb      	lsls	r3, r7, #2
 8006070:	2202      	movs	r2, #2
 8006072:	5818      	ldr	r0, [r3, r0]
 8006074:	f000 faac 	bl	80065d0 <memchr>
 8006078:	2800      	cmp	r0, #0
 800607a:	d029      	beq.n	80060d0 <_scanf_i+0xbc>
 800607c:	2f01      	cmp	r7, #1
 800607e:	d15e      	bne.n	800613e <_scanf_i+0x12a>
 8006080:	6863      	ldr	r3, [r4, #4]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d106      	bne.n	8006094 <_scanf_i+0x80>
 8006086:	3308      	adds	r3, #8
 8006088:	6822      	ldr	r2, [r4, #0]
 800608a:	6063      	str	r3, [r4, #4]
 800608c:	33f9      	adds	r3, #249	@ 0xf9
 800608e:	33ff      	adds	r3, #255	@ 0xff
 8006090:	4313      	orrs	r3, r2
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	6823      	ldr	r3, [r4, #0]
 8006096:	4a5c      	ldr	r2, [pc, #368]	@ (8006208 <_scanf_i+0x1f4>)
 8006098:	4013      	ands	r3, r2
 800609a:	6023      	str	r3, [r4, #0]
 800609c:	68a3      	ldr	r3, [r4, #8]
 800609e:	1e5a      	subs	r2, r3, #1
 80060a0:	60a2      	str	r2, [r4, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d014      	beq.n	80060d0 <_scanf_i+0xbc>
 80060a6:	6833      	ldr	r3, [r6, #0]
 80060a8:	1c5a      	adds	r2, r3, #1
 80060aa:	6032      	str	r2, [r6, #0]
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	9a02      	ldr	r2, [sp, #8]
 80060b0:	7013      	strb	r3, [r2, #0]
 80060b2:	6873      	ldr	r3, [r6, #4]
 80060b4:	1c55      	adds	r5, r2, #1
 80060b6:	3b01      	subs	r3, #1
 80060b8:	6073      	str	r3, [r6, #4]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	dc07      	bgt.n	80060ce <_scanf_i+0xba>
 80060be:	23c0      	movs	r3, #192	@ 0xc0
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	0031      	movs	r1, r6
 80060c4:	58e3      	ldr	r3, [r4, r3]
 80060c6:	9804      	ldr	r0, [sp, #16]
 80060c8:	4798      	blx	r3
 80060ca:	2800      	cmp	r0, #0
 80060cc:	d17e      	bne.n	80061cc <_scanf_i+0x1b8>
 80060ce:	9502      	str	r5, [sp, #8]
 80060d0:	3701      	adds	r7, #1
 80060d2:	2f03      	cmp	r7, #3
 80060d4:	d1c8      	bne.n	8006068 <_scanf_i+0x54>
 80060d6:	6863      	ldr	r3, [r4, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d101      	bne.n	80060e0 <_scanf_i+0xcc>
 80060dc:	330a      	adds	r3, #10
 80060de:	6063      	str	r3, [r4, #4]
 80060e0:	2700      	movs	r7, #0
 80060e2:	6863      	ldr	r3, [r4, #4]
 80060e4:	4949      	ldr	r1, [pc, #292]	@ (800620c <_scanf_i+0x1f8>)
 80060e6:	6960      	ldr	r0, [r4, #20]
 80060e8:	1ac9      	subs	r1, r1, r3
 80060ea:	f000 f9b0 	bl	800644e <__sccl>
 80060ee:	9d02      	ldr	r5, [sp, #8]
 80060f0:	68a3      	ldr	r3, [r4, #8]
 80060f2:	6820      	ldr	r0, [r4, #0]
 80060f4:	9302      	str	r3, [sp, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d03f      	beq.n	800617a <_scanf_i+0x166>
 80060fa:	6831      	ldr	r1, [r6, #0]
 80060fc:	6963      	ldr	r3, [r4, #20]
 80060fe:	780a      	ldrb	r2, [r1, #0]
 8006100:	5c9b      	ldrb	r3, [r3, r2]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d039      	beq.n	800617a <_scanf_i+0x166>
 8006106:	2a30      	cmp	r2, #48	@ 0x30
 8006108:	d128      	bne.n	800615c <_scanf_i+0x148>
 800610a:	2380      	movs	r3, #128	@ 0x80
 800610c:	011b      	lsls	r3, r3, #4
 800610e:	4218      	tst	r0, r3
 8006110:	d024      	beq.n	800615c <_scanf_i+0x148>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	3701      	adds	r7, #1
 8006116:	2b00      	cmp	r3, #0
 8006118:	d005      	beq.n	8006126 <_scanf_i+0x112>
 800611a:	001a      	movs	r2, r3
 800611c:	9b02      	ldr	r3, [sp, #8]
 800611e:	3a01      	subs	r2, #1
 8006120:	3301      	adds	r3, #1
 8006122:	9203      	str	r2, [sp, #12]
 8006124:	60a3      	str	r3, [r4, #8]
 8006126:	6873      	ldr	r3, [r6, #4]
 8006128:	3b01      	subs	r3, #1
 800612a:	6073      	str	r3, [r6, #4]
 800612c:	2b00      	cmp	r3, #0
 800612e:	dd1c      	ble.n	800616a <_scanf_i+0x156>
 8006130:	6833      	ldr	r3, [r6, #0]
 8006132:	3301      	adds	r3, #1
 8006134:	6033      	str	r3, [r6, #0]
 8006136:	68a3      	ldr	r3, [r4, #8]
 8006138:	3b01      	subs	r3, #1
 800613a:	60a3      	str	r3, [r4, #8]
 800613c:	e7d8      	b.n	80060f0 <_scanf_i+0xdc>
 800613e:	2f02      	cmp	r7, #2
 8006140:	d1ac      	bne.n	800609c <_scanf_i+0x88>
 8006142:	23c0      	movs	r3, #192	@ 0xc0
 8006144:	2180      	movs	r1, #128	@ 0x80
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4013      	ands	r3, r2
 800614c:	0089      	lsls	r1, r1, #2
 800614e:	428b      	cmp	r3, r1
 8006150:	d1c1      	bne.n	80060d6 <_scanf_i+0xc2>
 8006152:	2310      	movs	r3, #16
 8006154:	6063      	str	r3, [r4, #4]
 8006156:	33f0      	adds	r3, #240	@ 0xf0
 8006158:	4313      	orrs	r3, r2
 800615a:	e79e      	b.n	800609a <_scanf_i+0x86>
 800615c:	4b2c      	ldr	r3, [pc, #176]	@ (8006210 <_scanf_i+0x1fc>)
 800615e:	4003      	ands	r3, r0
 8006160:	6023      	str	r3, [r4, #0]
 8006162:	780b      	ldrb	r3, [r1, #0]
 8006164:	702b      	strb	r3, [r5, #0]
 8006166:	3501      	adds	r5, #1
 8006168:	e7dd      	b.n	8006126 <_scanf_i+0x112>
 800616a:	23c0      	movs	r3, #192	@ 0xc0
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	0031      	movs	r1, r6
 8006170:	58e3      	ldr	r3, [r4, r3]
 8006172:	9804      	ldr	r0, [sp, #16]
 8006174:	4798      	blx	r3
 8006176:	2800      	cmp	r0, #0
 8006178:	d0dd      	beq.n	8006136 <_scanf_i+0x122>
 800617a:	6823      	ldr	r3, [r4, #0]
 800617c:	05db      	lsls	r3, r3, #23
 800617e:	d50e      	bpl.n	800619e <_scanf_i+0x18a>
 8006180:	9b00      	ldr	r3, [sp, #0]
 8006182:	429d      	cmp	r5, r3
 8006184:	d907      	bls.n	8006196 <_scanf_i+0x182>
 8006186:	23be      	movs	r3, #190	@ 0xbe
 8006188:	3d01      	subs	r5, #1
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	0032      	movs	r2, r6
 800618e:	7829      	ldrb	r1, [r5, #0]
 8006190:	58e3      	ldr	r3, [r4, r3]
 8006192:	9804      	ldr	r0, [sp, #16]
 8006194:	4798      	blx	r3
 8006196:	9b00      	ldr	r3, [sp, #0]
 8006198:	2001      	movs	r0, #1
 800619a:	429d      	cmp	r5, r3
 800619c:	d029      	beq.n	80061f2 <_scanf_i+0x1de>
 800619e:	6821      	ldr	r1, [r4, #0]
 80061a0:	2310      	movs	r3, #16
 80061a2:	000a      	movs	r2, r1
 80061a4:	401a      	ands	r2, r3
 80061a6:	4219      	tst	r1, r3
 80061a8:	d11c      	bne.n	80061e4 <_scanf_i+0x1d0>
 80061aa:	702a      	strb	r2, [r5, #0]
 80061ac:	6863      	ldr	r3, [r4, #4]
 80061ae:	9900      	ldr	r1, [sp, #0]
 80061b0:	9804      	ldr	r0, [sp, #16]
 80061b2:	9e05      	ldr	r6, [sp, #20]
 80061b4:	47b0      	blx	r6
 80061b6:	9b01      	ldr	r3, [sp, #4]
 80061b8:	6822      	ldr	r2, [r4, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	0691      	lsls	r1, r2, #26
 80061be:	d507      	bpl.n	80061d0 <_scanf_i+0x1bc>
 80061c0:	9901      	ldr	r1, [sp, #4]
 80061c2:	1d1a      	adds	r2, r3, #4
 80061c4:	600a      	str	r2, [r1, #0]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	6018      	str	r0, [r3, #0]
 80061ca:	e008      	b.n	80061de <_scanf_i+0x1ca>
 80061cc:	2700      	movs	r7, #0
 80061ce:	e7d4      	b.n	800617a <_scanf_i+0x166>
 80061d0:	1d19      	adds	r1, r3, #4
 80061d2:	07d6      	lsls	r6, r2, #31
 80061d4:	d50f      	bpl.n	80061f6 <_scanf_i+0x1e2>
 80061d6:	9a01      	ldr	r2, [sp, #4]
 80061d8:	6011      	str	r1, [r2, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	8018      	strh	r0, [r3, #0]
 80061de:	68e3      	ldr	r3, [r4, #12]
 80061e0:	3301      	adds	r3, #1
 80061e2:	60e3      	str	r3, [r4, #12]
 80061e4:	2000      	movs	r0, #0
 80061e6:	9b00      	ldr	r3, [sp, #0]
 80061e8:	1aed      	subs	r5, r5, r3
 80061ea:	6923      	ldr	r3, [r4, #16]
 80061ec:	19ed      	adds	r5, r5, r7
 80061ee:	195b      	adds	r3, r3, r5
 80061f0:	6123      	str	r3, [r4, #16]
 80061f2:	b00b      	add	sp, #44	@ 0x2c
 80061f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80061f6:	9a01      	ldr	r2, [sp, #4]
 80061f8:	6011      	str	r1, [r2, #0]
 80061fa:	e7e4      	b.n	80061c6 <_scanf_i+0x1b2>
 80061fc:	08006c08 	.word	0x08006c08
 8006200:	08006879 	.word	0x08006879
 8006204:	0800676d 	.word	0x0800676d
 8006208:	fffffaff 	.word	0xfffffaff
 800620c:	08006ccf 	.word	0x08006ccf
 8006210:	fffff6ff 	.word	0xfffff6ff

08006214 <__sflush_r>:
 8006214:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006216:	220c      	movs	r2, #12
 8006218:	5e8b      	ldrsh	r3, [r1, r2]
 800621a:	0005      	movs	r5, r0
 800621c:	000c      	movs	r4, r1
 800621e:	071a      	lsls	r2, r3, #28
 8006220:	d456      	bmi.n	80062d0 <__sflush_r+0xbc>
 8006222:	684a      	ldr	r2, [r1, #4]
 8006224:	2a00      	cmp	r2, #0
 8006226:	dc02      	bgt.n	800622e <__sflush_r+0x1a>
 8006228:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800622a:	2a00      	cmp	r2, #0
 800622c:	dd4e      	ble.n	80062cc <__sflush_r+0xb8>
 800622e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006230:	2f00      	cmp	r7, #0
 8006232:	d04b      	beq.n	80062cc <__sflush_r+0xb8>
 8006234:	2200      	movs	r2, #0
 8006236:	2080      	movs	r0, #128	@ 0x80
 8006238:	682e      	ldr	r6, [r5, #0]
 800623a:	602a      	str	r2, [r5, #0]
 800623c:	001a      	movs	r2, r3
 800623e:	0140      	lsls	r0, r0, #5
 8006240:	6a21      	ldr	r1, [r4, #32]
 8006242:	4002      	ands	r2, r0
 8006244:	4203      	tst	r3, r0
 8006246:	d033      	beq.n	80062b0 <__sflush_r+0x9c>
 8006248:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	075b      	lsls	r3, r3, #29
 800624e:	d506      	bpl.n	800625e <__sflush_r+0x4a>
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006256:	2b00      	cmp	r3, #0
 8006258:	d001      	beq.n	800625e <__sflush_r+0x4a>
 800625a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800625c:	1ad2      	subs	r2, r2, r3
 800625e:	2300      	movs	r3, #0
 8006260:	0028      	movs	r0, r5
 8006262:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006264:	6a21      	ldr	r1, [r4, #32]
 8006266:	47b8      	blx	r7
 8006268:	89a2      	ldrh	r2, [r4, #12]
 800626a:	1c43      	adds	r3, r0, #1
 800626c:	d106      	bne.n	800627c <__sflush_r+0x68>
 800626e:	6829      	ldr	r1, [r5, #0]
 8006270:	291d      	cmp	r1, #29
 8006272:	d846      	bhi.n	8006302 <__sflush_r+0xee>
 8006274:	4b29      	ldr	r3, [pc, #164]	@ (800631c <__sflush_r+0x108>)
 8006276:	410b      	asrs	r3, r1
 8006278:	07db      	lsls	r3, r3, #31
 800627a:	d442      	bmi.n	8006302 <__sflush_r+0xee>
 800627c:	2300      	movs	r3, #0
 800627e:	6063      	str	r3, [r4, #4]
 8006280:	6923      	ldr	r3, [r4, #16]
 8006282:	6023      	str	r3, [r4, #0]
 8006284:	04d2      	lsls	r2, r2, #19
 8006286:	d505      	bpl.n	8006294 <__sflush_r+0x80>
 8006288:	1c43      	adds	r3, r0, #1
 800628a:	d102      	bne.n	8006292 <__sflush_r+0x7e>
 800628c:	682b      	ldr	r3, [r5, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d100      	bne.n	8006294 <__sflush_r+0x80>
 8006292:	6560      	str	r0, [r4, #84]	@ 0x54
 8006294:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006296:	602e      	str	r6, [r5, #0]
 8006298:	2900      	cmp	r1, #0
 800629a:	d017      	beq.n	80062cc <__sflush_r+0xb8>
 800629c:	0023      	movs	r3, r4
 800629e:	3344      	adds	r3, #68	@ 0x44
 80062a0:	4299      	cmp	r1, r3
 80062a2:	d002      	beq.n	80062aa <__sflush_r+0x96>
 80062a4:	0028      	movs	r0, r5
 80062a6:	f7fe ff7b 	bl	80051a0 <_free_r>
 80062aa:	2300      	movs	r3, #0
 80062ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80062ae:	e00d      	b.n	80062cc <__sflush_r+0xb8>
 80062b0:	2301      	movs	r3, #1
 80062b2:	0028      	movs	r0, r5
 80062b4:	47b8      	blx	r7
 80062b6:	0002      	movs	r2, r0
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d1c6      	bne.n	800624a <__sflush_r+0x36>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d0c3      	beq.n	800624a <__sflush_r+0x36>
 80062c2:	2b1d      	cmp	r3, #29
 80062c4:	d001      	beq.n	80062ca <__sflush_r+0xb6>
 80062c6:	2b16      	cmp	r3, #22
 80062c8:	d11a      	bne.n	8006300 <__sflush_r+0xec>
 80062ca:	602e      	str	r6, [r5, #0]
 80062cc:	2000      	movs	r0, #0
 80062ce:	e01e      	b.n	800630e <__sflush_r+0xfa>
 80062d0:	690e      	ldr	r6, [r1, #16]
 80062d2:	2e00      	cmp	r6, #0
 80062d4:	d0fa      	beq.n	80062cc <__sflush_r+0xb8>
 80062d6:	680f      	ldr	r7, [r1, #0]
 80062d8:	600e      	str	r6, [r1, #0]
 80062da:	1bba      	subs	r2, r7, r6
 80062dc:	9201      	str	r2, [sp, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	079b      	lsls	r3, r3, #30
 80062e2:	d100      	bne.n	80062e6 <__sflush_r+0xd2>
 80062e4:	694a      	ldr	r2, [r1, #20]
 80062e6:	60a2      	str	r2, [r4, #8]
 80062e8:	9b01      	ldr	r3, [sp, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	ddee      	ble.n	80062cc <__sflush_r+0xb8>
 80062ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80062f0:	0032      	movs	r2, r6
 80062f2:	001f      	movs	r7, r3
 80062f4:	0028      	movs	r0, r5
 80062f6:	9b01      	ldr	r3, [sp, #4]
 80062f8:	6a21      	ldr	r1, [r4, #32]
 80062fa:	47b8      	blx	r7
 80062fc:	2800      	cmp	r0, #0
 80062fe:	dc07      	bgt.n	8006310 <__sflush_r+0xfc>
 8006300:	89a2      	ldrh	r2, [r4, #12]
 8006302:	2340      	movs	r3, #64	@ 0x40
 8006304:	2001      	movs	r0, #1
 8006306:	4313      	orrs	r3, r2
 8006308:	b21b      	sxth	r3, r3
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	4240      	negs	r0, r0
 800630e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006310:	9b01      	ldr	r3, [sp, #4]
 8006312:	1836      	adds	r6, r6, r0
 8006314:	1a1b      	subs	r3, r3, r0
 8006316:	9301      	str	r3, [sp, #4]
 8006318:	e7e6      	b.n	80062e8 <__sflush_r+0xd4>
 800631a:	46c0      	nop			@ (mov r8, r8)
 800631c:	dfbffffe 	.word	0xdfbffffe

08006320 <_fflush_r>:
 8006320:	690b      	ldr	r3, [r1, #16]
 8006322:	b570      	push	{r4, r5, r6, lr}
 8006324:	0005      	movs	r5, r0
 8006326:	000c      	movs	r4, r1
 8006328:	2b00      	cmp	r3, #0
 800632a:	d102      	bne.n	8006332 <_fflush_r+0x12>
 800632c:	2500      	movs	r5, #0
 800632e:	0028      	movs	r0, r5
 8006330:	bd70      	pop	{r4, r5, r6, pc}
 8006332:	2800      	cmp	r0, #0
 8006334:	d004      	beq.n	8006340 <_fflush_r+0x20>
 8006336:	6a03      	ldr	r3, [r0, #32]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d101      	bne.n	8006340 <_fflush_r+0x20>
 800633c:	f7fe fca8 	bl	8004c90 <__sinit>
 8006340:	220c      	movs	r2, #12
 8006342:	5ea3      	ldrsh	r3, [r4, r2]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d0f1      	beq.n	800632c <_fflush_r+0xc>
 8006348:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800634a:	07d2      	lsls	r2, r2, #31
 800634c:	d404      	bmi.n	8006358 <_fflush_r+0x38>
 800634e:	059b      	lsls	r3, r3, #22
 8006350:	d402      	bmi.n	8006358 <_fflush_r+0x38>
 8006352:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006354:	f7fe ff21 	bl	800519a <__retarget_lock_acquire_recursive>
 8006358:	0028      	movs	r0, r5
 800635a:	0021      	movs	r1, r4
 800635c:	f7ff ff5a 	bl	8006214 <__sflush_r>
 8006360:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006362:	0005      	movs	r5, r0
 8006364:	07db      	lsls	r3, r3, #31
 8006366:	d4e2      	bmi.n	800632e <_fflush_r+0xe>
 8006368:	89a3      	ldrh	r3, [r4, #12]
 800636a:	059b      	lsls	r3, r3, #22
 800636c:	d4df      	bmi.n	800632e <_fflush_r+0xe>
 800636e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006370:	f7fe ff14 	bl	800519c <__retarget_lock_release_recursive>
 8006374:	e7db      	b.n	800632e <_fflush_r+0xe>
	...

08006378 <__swhatbuf_r>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	000e      	movs	r6, r1
 800637c:	001d      	movs	r5, r3
 800637e:	230e      	movs	r3, #14
 8006380:	5ec9      	ldrsh	r1, [r1, r3]
 8006382:	0014      	movs	r4, r2
 8006384:	b096      	sub	sp, #88	@ 0x58
 8006386:	2900      	cmp	r1, #0
 8006388:	da0c      	bge.n	80063a4 <__swhatbuf_r+0x2c>
 800638a:	89b2      	ldrh	r2, [r6, #12]
 800638c:	2380      	movs	r3, #128	@ 0x80
 800638e:	0011      	movs	r1, r2
 8006390:	4019      	ands	r1, r3
 8006392:	421a      	tst	r2, r3
 8006394:	d114      	bne.n	80063c0 <__swhatbuf_r+0x48>
 8006396:	2380      	movs	r3, #128	@ 0x80
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	2000      	movs	r0, #0
 800639c:	6029      	str	r1, [r5, #0]
 800639e:	6023      	str	r3, [r4, #0]
 80063a0:	b016      	add	sp, #88	@ 0x58
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	466a      	mov	r2, sp
 80063a6:	f000 f8dd 	bl	8006564 <_fstat_r>
 80063aa:	2800      	cmp	r0, #0
 80063ac:	dbed      	blt.n	800638a <__swhatbuf_r+0x12>
 80063ae:	23f0      	movs	r3, #240	@ 0xf0
 80063b0:	9901      	ldr	r1, [sp, #4]
 80063b2:	021b      	lsls	r3, r3, #8
 80063b4:	4019      	ands	r1, r3
 80063b6:	4b04      	ldr	r3, [pc, #16]	@ (80063c8 <__swhatbuf_r+0x50>)
 80063b8:	18c9      	adds	r1, r1, r3
 80063ba:	424b      	negs	r3, r1
 80063bc:	4159      	adcs	r1, r3
 80063be:	e7ea      	b.n	8006396 <__swhatbuf_r+0x1e>
 80063c0:	2100      	movs	r1, #0
 80063c2:	2340      	movs	r3, #64	@ 0x40
 80063c4:	e7e9      	b.n	800639a <__swhatbuf_r+0x22>
 80063c6:	46c0      	nop			@ (mov r8, r8)
 80063c8:	ffffe000 	.word	0xffffe000

080063cc <__smakebuf_r>:
 80063cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80063ce:	2602      	movs	r6, #2
 80063d0:	898b      	ldrh	r3, [r1, #12]
 80063d2:	0005      	movs	r5, r0
 80063d4:	000c      	movs	r4, r1
 80063d6:	b085      	sub	sp, #20
 80063d8:	4233      	tst	r3, r6
 80063da:	d007      	beq.n	80063ec <__smakebuf_r+0x20>
 80063dc:	0023      	movs	r3, r4
 80063de:	3347      	adds	r3, #71	@ 0x47
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	6123      	str	r3, [r4, #16]
 80063e4:	2301      	movs	r3, #1
 80063e6:	6163      	str	r3, [r4, #20]
 80063e8:	b005      	add	sp, #20
 80063ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ec:	ab03      	add	r3, sp, #12
 80063ee:	aa02      	add	r2, sp, #8
 80063f0:	f7ff ffc2 	bl	8006378 <__swhatbuf_r>
 80063f4:	9f02      	ldr	r7, [sp, #8]
 80063f6:	9001      	str	r0, [sp, #4]
 80063f8:	0039      	movs	r1, r7
 80063fa:	0028      	movs	r0, r5
 80063fc:	f7fe ff3c 	bl	8005278 <_malloc_r>
 8006400:	2800      	cmp	r0, #0
 8006402:	d108      	bne.n	8006416 <__smakebuf_r+0x4a>
 8006404:	220c      	movs	r2, #12
 8006406:	5ea3      	ldrsh	r3, [r4, r2]
 8006408:	059a      	lsls	r2, r3, #22
 800640a:	d4ed      	bmi.n	80063e8 <__smakebuf_r+0x1c>
 800640c:	2203      	movs	r2, #3
 800640e:	4393      	bics	r3, r2
 8006410:	431e      	orrs	r6, r3
 8006412:	81a6      	strh	r6, [r4, #12]
 8006414:	e7e2      	b.n	80063dc <__smakebuf_r+0x10>
 8006416:	2380      	movs	r3, #128	@ 0x80
 8006418:	89a2      	ldrh	r2, [r4, #12]
 800641a:	6020      	str	r0, [r4, #0]
 800641c:	4313      	orrs	r3, r2
 800641e:	81a3      	strh	r3, [r4, #12]
 8006420:	9b03      	ldr	r3, [sp, #12]
 8006422:	6120      	str	r0, [r4, #16]
 8006424:	6167      	str	r7, [r4, #20]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00c      	beq.n	8006444 <__smakebuf_r+0x78>
 800642a:	0028      	movs	r0, r5
 800642c:	230e      	movs	r3, #14
 800642e:	5ee1      	ldrsh	r1, [r4, r3]
 8006430:	f000 f8aa 	bl	8006588 <_isatty_r>
 8006434:	2800      	cmp	r0, #0
 8006436:	d005      	beq.n	8006444 <__smakebuf_r+0x78>
 8006438:	2303      	movs	r3, #3
 800643a:	89a2      	ldrh	r2, [r4, #12]
 800643c:	439a      	bics	r2, r3
 800643e:	3b02      	subs	r3, #2
 8006440:	4313      	orrs	r3, r2
 8006442:	81a3      	strh	r3, [r4, #12]
 8006444:	89a3      	ldrh	r3, [r4, #12]
 8006446:	9a01      	ldr	r2, [sp, #4]
 8006448:	4313      	orrs	r3, r2
 800644a:	81a3      	strh	r3, [r4, #12]
 800644c:	e7cc      	b.n	80063e8 <__smakebuf_r+0x1c>

0800644e <__sccl>:
 800644e:	b570      	push	{r4, r5, r6, lr}
 8006450:	780b      	ldrb	r3, [r1, #0]
 8006452:	0004      	movs	r4, r0
 8006454:	2b5e      	cmp	r3, #94	@ 0x5e
 8006456:	d018      	beq.n	800648a <__sccl+0x3c>
 8006458:	2200      	movs	r2, #0
 800645a:	1c4d      	adds	r5, r1, #1
 800645c:	0021      	movs	r1, r4
 800645e:	1c60      	adds	r0, r4, #1
 8006460:	30ff      	adds	r0, #255	@ 0xff
 8006462:	700a      	strb	r2, [r1, #0]
 8006464:	3101      	adds	r1, #1
 8006466:	4281      	cmp	r1, r0
 8006468:	d1fb      	bne.n	8006462 <__sccl+0x14>
 800646a:	1e68      	subs	r0, r5, #1
 800646c:	2b00      	cmp	r3, #0
 800646e:	d00b      	beq.n	8006488 <__sccl+0x3a>
 8006470:	2101      	movs	r1, #1
 8006472:	404a      	eors	r2, r1
 8006474:	0028      	movs	r0, r5
 8006476:	54e2      	strb	r2, [r4, r3]
 8006478:	7801      	ldrb	r1, [r0, #0]
 800647a:	1c45      	adds	r5, r0, #1
 800647c:	292d      	cmp	r1, #45	@ 0x2d
 800647e:	d00a      	beq.n	8006496 <__sccl+0x48>
 8006480:	295d      	cmp	r1, #93	@ 0x5d
 8006482:	d01b      	beq.n	80064bc <__sccl+0x6e>
 8006484:	2900      	cmp	r1, #0
 8006486:	d104      	bne.n	8006492 <__sccl+0x44>
 8006488:	bd70      	pop	{r4, r5, r6, pc}
 800648a:	2201      	movs	r2, #1
 800648c:	784b      	ldrb	r3, [r1, #1]
 800648e:	1c8d      	adds	r5, r1, #2
 8006490:	e7e4      	b.n	800645c <__sccl+0xe>
 8006492:	000b      	movs	r3, r1
 8006494:	e7ee      	b.n	8006474 <__sccl+0x26>
 8006496:	7846      	ldrb	r6, [r0, #1]
 8006498:	2e5d      	cmp	r6, #93	@ 0x5d
 800649a:	d0fa      	beq.n	8006492 <__sccl+0x44>
 800649c:	42b3      	cmp	r3, r6
 800649e:	dcf8      	bgt.n	8006492 <__sccl+0x44>
 80064a0:	0019      	movs	r1, r3
 80064a2:	3002      	adds	r0, #2
 80064a4:	3101      	adds	r1, #1
 80064a6:	5462      	strb	r2, [r4, r1]
 80064a8:	428e      	cmp	r6, r1
 80064aa:	dcfb      	bgt.n	80064a4 <__sccl+0x56>
 80064ac:	2100      	movs	r1, #0
 80064ae:	1c5d      	adds	r5, r3, #1
 80064b0:	42b3      	cmp	r3, r6
 80064b2:	da01      	bge.n	80064b8 <__sccl+0x6a>
 80064b4:	1af1      	subs	r1, r6, r3
 80064b6:	3901      	subs	r1, #1
 80064b8:	186b      	adds	r3, r5, r1
 80064ba:	e7dd      	b.n	8006478 <__sccl+0x2a>
 80064bc:	0028      	movs	r0, r5
 80064be:	e7e3      	b.n	8006488 <__sccl+0x3a>

080064c0 <__submore>:
 80064c0:	000b      	movs	r3, r1
 80064c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064c4:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 80064c6:	3344      	adds	r3, #68	@ 0x44
 80064c8:	000c      	movs	r4, r1
 80064ca:	429d      	cmp	r5, r3
 80064cc:	d11c      	bne.n	8006508 <__submore+0x48>
 80064ce:	2680      	movs	r6, #128	@ 0x80
 80064d0:	00f6      	lsls	r6, r6, #3
 80064d2:	0031      	movs	r1, r6
 80064d4:	f7fe fed0 	bl	8005278 <_malloc_r>
 80064d8:	2800      	cmp	r0, #0
 80064da:	d102      	bne.n	80064e2 <__submore+0x22>
 80064dc:	2001      	movs	r0, #1
 80064de:	4240      	negs	r0, r0
 80064e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064e2:	0023      	movs	r3, r4
 80064e4:	6360      	str	r0, [r4, #52]	@ 0x34
 80064e6:	63a6      	str	r6, [r4, #56]	@ 0x38
 80064e8:	3346      	adds	r3, #70	@ 0x46
 80064ea:	781a      	ldrb	r2, [r3, #0]
 80064ec:	4b10      	ldr	r3, [pc, #64]	@ (8006530 <__submore+0x70>)
 80064ee:	54c2      	strb	r2, [r0, r3]
 80064f0:	0023      	movs	r3, r4
 80064f2:	3345      	adds	r3, #69	@ 0x45
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006534 <__submore+0x74>)
 80064f8:	54c2      	strb	r2, [r0, r3]
 80064fa:	782a      	ldrb	r2, [r5, #0]
 80064fc:	4b0e      	ldr	r3, [pc, #56]	@ (8006538 <__submore+0x78>)
 80064fe:	54c2      	strb	r2, [r0, r3]
 8006500:	18c0      	adds	r0, r0, r3
 8006502:	6020      	str	r0, [r4, #0]
 8006504:	2000      	movs	r0, #0
 8006506:	e7eb      	b.n	80064e0 <__submore+0x20>
 8006508:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800650a:	0029      	movs	r1, r5
 800650c:	0073      	lsls	r3, r6, #1
 800650e:	001a      	movs	r2, r3
 8006510:	9301      	str	r3, [sp, #4]
 8006512:	f000 f871 	bl	80065f8 <_realloc_r>
 8006516:	1e05      	subs	r5, r0, #0
 8006518:	d0e0      	beq.n	80064dc <__submore+0x1c>
 800651a:	1987      	adds	r7, r0, r6
 800651c:	0001      	movs	r1, r0
 800651e:	0032      	movs	r2, r6
 8006520:	0038      	movs	r0, r7
 8006522:	f000 f860 	bl	80065e6 <memcpy>
 8006526:	9b01      	ldr	r3, [sp, #4]
 8006528:	6027      	str	r7, [r4, #0]
 800652a:	6365      	str	r5, [r4, #52]	@ 0x34
 800652c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800652e:	e7e9      	b.n	8006504 <__submore+0x44>
 8006530:	000003ff 	.word	0x000003ff
 8006534:	000003fe 	.word	0x000003fe
 8006538:	000003fd 	.word	0x000003fd

0800653c <memmove>:
 800653c:	b510      	push	{r4, lr}
 800653e:	4288      	cmp	r0, r1
 8006540:	d806      	bhi.n	8006550 <memmove+0x14>
 8006542:	2300      	movs	r3, #0
 8006544:	429a      	cmp	r2, r3
 8006546:	d008      	beq.n	800655a <memmove+0x1e>
 8006548:	5ccc      	ldrb	r4, [r1, r3]
 800654a:	54c4      	strb	r4, [r0, r3]
 800654c:	3301      	adds	r3, #1
 800654e:	e7f9      	b.n	8006544 <memmove+0x8>
 8006550:	188b      	adds	r3, r1, r2
 8006552:	4298      	cmp	r0, r3
 8006554:	d2f5      	bcs.n	8006542 <memmove+0x6>
 8006556:	3a01      	subs	r2, #1
 8006558:	d200      	bcs.n	800655c <memmove+0x20>
 800655a:	bd10      	pop	{r4, pc}
 800655c:	5c8b      	ldrb	r3, [r1, r2]
 800655e:	5483      	strb	r3, [r0, r2]
 8006560:	e7f9      	b.n	8006556 <memmove+0x1a>
	...

08006564 <_fstat_r>:
 8006564:	2300      	movs	r3, #0
 8006566:	b570      	push	{r4, r5, r6, lr}
 8006568:	4d06      	ldr	r5, [pc, #24]	@ (8006584 <_fstat_r+0x20>)
 800656a:	0004      	movs	r4, r0
 800656c:	0008      	movs	r0, r1
 800656e:	0011      	movs	r1, r2
 8006570:	602b      	str	r3, [r5, #0]
 8006572:	f7fa fe22 	bl	80011ba <_fstat>
 8006576:	1c43      	adds	r3, r0, #1
 8006578:	d103      	bne.n	8006582 <_fstat_r+0x1e>
 800657a:	682b      	ldr	r3, [r5, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d000      	beq.n	8006582 <_fstat_r+0x1e>
 8006580:	6023      	str	r3, [r4, #0]
 8006582:	bd70      	pop	{r4, r5, r6, pc}
 8006584:	20000388 	.word	0x20000388

08006588 <_isatty_r>:
 8006588:	2300      	movs	r3, #0
 800658a:	b570      	push	{r4, r5, r6, lr}
 800658c:	4d06      	ldr	r5, [pc, #24]	@ (80065a8 <_isatty_r+0x20>)
 800658e:	0004      	movs	r4, r0
 8006590:	0008      	movs	r0, r1
 8006592:	602b      	str	r3, [r5, #0]
 8006594:	f7fa fe1f 	bl	80011d6 <_isatty>
 8006598:	1c43      	adds	r3, r0, #1
 800659a:	d103      	bne.n	80065a4 <_isatty_r+0x1c>
 800659c:	682b      	ldr	r3, [r5, #0]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d000      	beq.n	80065a4 <_isatty_r+0x1c>
 80065a2:	6023      	str	r3, [r4, #0]
 80065a4:	bd70      	pop	{r4, r5, r6, pc}
 80065a6:	46c0      	nop			@ (mov r8, r8)
 80065a8:	20000388 	.word	0x20000388

080065ac <_sbrk_r>:
 80065ac:	2300      	movs	r3, #0
 80065ae:	b570      	push	{r4, r5, r6, lr}
 80065b0:	4d06      	ldr	r5, [pc, #24]	@ (80065cc <_sbrk_r+0x20>)
 80065b2:	0004      	movs	r4, r0
 80065b4:	0008      	movs	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fa fe22 	bl	8001200 <_sbrk>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d103      	bne.n	80065c8 <_sbrk_r+0x1c>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d000      	beq.n	80065c8 <_sbrk_r+0x1c>
 80065c6:	6023      	str	r3, [r4, #0]
 80065c8:	bd70      	pop	{r4, r5, r6, pc}
 80065ca:	46c0      	nop			@ (mov r8, r8)
 80065cc:	20000388 	.word	0x20000388

080065d0 <memchr>:
 80065d0:	b2c9      	uxtb	r1, r1
 80065d2:	1882      	adds	r2, r0, r2
 80065d4:	4290      	cmp	r0, r2
 80065d6:	d101      	bne.n	80065dc <memchr+0xc>
 80065d8:	2000      	movs	r0, #0
 80065da:	4770      	bx	lr
 80065dc:	7803      	ldrb	r3, [r0, #0]
 80065de:	428b      	cmp	r3, r1
 80065e0:	d0fb      	beq.n	80065da <memchr+0xa>
 80065e2:	3001      	adds	r0, #1
 80065e4:	e7f6      	b.n	80065d4 <memchr+0x4>

080065e6 <memcpy>:
 80065e6:	2300      	movs	r3, #0
 80065e8:	b510      	push	{r4, lr}
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d100      	bne.n	80065f0 <memcpy+0xa>
 80065ee:	bd10      	pop	{r4, pc}
 80065f0:	5ccc      	ldrb	r4, [r1, r3]
 80065f2:	54c4      	strb	r4, [r0, r3]
 80065f4:	3301      	adds	r3, #1
 80065f6:	e7f8      	b.n	80065ea <memcpy+0x4>

080065f8 <_realloc_r>:
 80065f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065fa:	0006      	movs	r6, r0
 80065fc:	000c      	movs	r4, r1
 80065fe:	0015      	movs	r5, r2
 8006600:	2900      	cmp	r1, #0
 8006602:	d105      	bne.n	8006610 <_realloc_r+0x18>
 8006604:	0011      	movs	r1, r2
 8006606:	f7fe fe37 	bl	8005278 <_malloc_r>
 800660a:	0004      	movs	r4, r0
 800660c:	0020      	movs	r0, r4
 800660e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006610:	2a00      	cmp	r2, #0
 8006612:	d103      	bne.n	800661c <_realloc_r+0x24>
 8006614:	f7fe fdc4 	bl	80051a0 <_free_r>
 8006618:	2400      	movs	r4, #0
 800661a:	e7f7      	b.n	800660c <_realloc_r+0x14>
 800661c:	f000 f930 	bl	8006880 <_malloc_usable_size_r>
 8006620:	0007      	movs	r7, r0
 8006622:	4285      	cmp	r5, r0
 8006624:	d802      	bhi.n	800662c <_realloc_r+0x34>
 8006626:	0843      	lsrs	r3, r0, #1
 8006628:	42ab      	cmp	r3, r5
 800662a:	d3ef      	bcc.n	800660c <_realloc_r+0x14>
 800662c:	0029      	movs	r1, r5
 800662e:	0030      	movs	r0, r6
 8006630:	f7fe fe22 	bl	8005278 <_malloc_r>
 8006634:	9001      	str	r0, [sp, #4]
 8006636:	2800      	cmp	r0, #0
 8006638:	d0ee      	beq.n	8006618 <_realloc_r+0x20>
 800663a:	002a      	movs	r2, r5
 800663c:	42bd      	cmp	r5, r7
 800663e:	d900      	bls.n	8006642 <_realloc_r+0x4a>
 8006640:	003a      	movs	r2, r7
 8006642:	0021      	movs	r1, r4
 8006644:	9801      	ldr	r0, [sp, #4]
 8006646:	f7ff ffce 	bl	80065e6 <memcpy>
 800664a:	0021      	movs	r1, r4
 800664c:	0030      	movs	r0, r6
 800664e:	f7fe fda7 	bl	80051a0 <_free_r>
 8006652:	9c01      	ldr	r4, [sp, #4]
 8006654:	e7da      	b.n	800660c <_realloc_r+0x14>
	...

08006658 <_strtol_l.constprop.0>:
 8006658:	b5f0      	push	{r4, r5, r6, r7, lr}
 800665a:	b085      	sub	sp, #20
 800665c:	0017      	movs	r7, r2
 800665e:	001e      	movs	r6, r3
 8006660:	9003      	str	r0, [sp, #12]
 8006662:	9101      	str	r1, [sp, #4]
 8006664:	2b24      	cmp	r3, #36	@ 0x24
 8006666:	d844      	bhi.n	80066f2 <_strtol_l.constprop.0+0x9a>
 8006668:	000c      	movs	r4, r1
 800666a:	2b01      	cmp	r3, #1
 800666c:	d041      	beq.n	80066f2 <_strtol_l.constprop.0+0x9a>
 800666e:	4b3d      	ldr	r3, [pc, #244]	@ (8006764 <_strtol_l.constprop.0+0x10c>)
 8006670:	2208      	movs	r2, #8
 8006672:	469c      	mov	ip, r3
 8006674:	0023      	movs	r3, r4
 8006676:	4661      	mov	r1, ip
 8006678:	781d      	ldrb	r5, [r3, #0]
 800667a:	3401      	adds	r4, #1
 800667c:	5d48      	ldrb	r0, [r1, r5]
 800667e:	0001      	movs	r1, r0
 8006680:	4011      	ands	r1, r2
 8006682:	4210      	tst	r0, r2
 8006684:	d1f6      	bne.n	8006674 <_strtol_l.constprop.0+0x1c>
 8006686:	2d2d      	cmp	r5, #45	@ 0x2d
 8006688:	d13a      	bne.n	8006700 <_strtol_l.constprop.0+0xa8>
 800668a:	7825      	ldrb	r5, [r4, #0]
 800668c:	1c9c      	adds	r4, r3, #2
 800668e:	2301      	movs	r3, #1
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	2210      	movs	r2, #16
 8006694:	0033      	movs	r3, r6
 8006696:	4393      	bics	r3, r2
 8006698:	d109      	bne.n	80066ae <_strtol_l.constprop.0+0x56>
 800669a:	2d30      	cmp	r5, #48	@ 0x30
 800669c:	d136      	bne.n	800670c <_strtol_l.constprop.0+0xb4>
 800669e:	2120      	movs	r1, #32
 80066a0:	7823      	ldrb	r3, [r4, #0]
 80066a2:	438b      	bics	r3, r1
 80066a4:	2b58      	cmp	r3, #88	@ 0x58
 80066a6:	d131      	bne.n	800670c <_strtol_l.constprop.0+0xb4>
 80066a8:	0016      	movs	r6, r2
 80066aa:	7865      	ldrb	r5, [r4, #1]
 80066ac:	3402      	adds	r4, #2
 80066ae:	4a2e      	ldr	r2, [pc, #184]	@ (8006768 <_strtol_l.constprop.0+0x110>)
 80066b0:	9b00      	ldr	r3, [sp, #0]
 80066b2:	4694      	mov	ip, r2
 80066b4:	4463      	add	r3, ip
 80066b6:	0031      	movs	r1, r6
 80066b8:	0018      	movs	r0, r3
 80066ba:	9302      	str	r3, [sp, #8]
 80066bc:	f7f9 fdbc 	bl	8000238 <__aeabi_uidivmod>
 80066c0:	2200      	movs	r2, #0
 80066c2:	4684      	mov	ip, r0
 80066c4:	0010      	movs	r0, r2
 80066c6:	002b      	movs	r3, r5
 80066c8:	3b30      	subs	r3, #48	@ 0x30
 80066ca:	2b09      	cmp	r3, #9
 80066cc:	d825      	bhi.n	800671a <_strtol_l.constprop.0+0xc2>
 80066ce:	001d      	movs	r5, r3
 80066d0:	42ae      	cmp	r6, r5
 80066d2:	dd31      	ble.n	8006738 <_strtol_l.constprop.0+0xe0>
 80066d4:	1c53      	adds	r3, r2, #1
 80066d6:	d009      	beq.n	80066ec <_strtol_l.constprop.0+0x94>
 80066d8:	2201      	movs	r2, #1
 80066da:	4252      	negs	r2, r2
 80066dc:	4584      	cmp	ip, r0
 80066de:	d305      	bcc.n	80066ec <_strtol_l.constprop.0+0x94>
 80066e0:	d101      	bne.n	80066e6 <_strtol_l.constprop.0+0x8e>
 80066e2:	42a9      	cmp	r1, r5
 80066e4:	db25      	blt.n	8006732 <_strtol_l.constprop.0+0xda>
 80066e6:	2201      	movs	r2, #1
 80066e8:	4370      	muls	r0, r6
 80066ea:	1828      	adds	r0, r5, r0
 80066ec:	7825      	ldrb	r5, [r4, #0]
 80066ee:	3401      	adds	r4, #1
 80066f0:	e7e9      	b.n	80066c6 <_strtol_l.constprop.0+0x6e>
 80066f2:	f7fe fd27 	bl	8005144 <__errno>
 80066f6:	2316      	movs	r3, #22
 80066f8:	6003      	str	r3, [r0, #0]
 80066fa:	2000      	movs	r0, #0
 80066fc:	b005      	add	sp, #20
 80066fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006700:	9100      	str	r1, [sp, #0]
 8006702:	2d2b      	cmp	r5, #43	@ 0x2b
 8006704:	d1c5      	bne.n	8006692 <_strtol_l.constprop.0+0x3a>
 8006706:	7825      	ldrb	r5, [r4, #0]
 8006708:	1c9c      	adds	r4, r3, #2
 800670a:	e7c2      	b.n	8006692 <_strtol_l.constprop.0+0x3a>
 800670c:	2e00      	cmp	r6, #0
 800670e:	d1ce      	bne.n	80066ae <_strtol_l.constprop.0+0x56>
 8006710:	3608      	adds	r6, #8
 8006712:	2d30      	cmp	r5, #48	@ 0x30
 8006714:	d0cb      	beq.n	80066ae <_strtol_l.constprop.0+0x56>
 8006716:	3602      	adds	r6, #2
 8006718:	e7c9      	b.n	80066ae <_strtol_l.constprop.0+0x56>
 800671a:	002b      	movs	r3, r5
 800671c:	3b41      	subs	r3, #65	@ 0x41
 800671e:	2b19      	cmp	r3, #25
 8006720:	d801      	bhi.n	8006726 <_strtol_l.constprop.0+0xce>
 8006722:	3d37      	subs	r5, #55	@ 0x37
 8006724:	e7d4      	b.n	80066d0 <_strtol_l.constprop.0+0x78>
 8006726:	002b      	movs	r3, r5
 8006728:	3b61      	subs	r3, #97	@ 0x61
 800672a:	2b19      	cmp	r3, #25
 800672c:	d804      	bhi.n	8006738 <_strtol_l.constprop.0+0xe0>
 800672e:	3d57      	subs	r5, #87	@ 0x57
 8006730:	e7ce      	b.n	80066d0 <_strtol_l.constprop.0+0x78>
 8006732:	2201      	movs	r2, #1
 8006734:	4252      	negs	r2, r2
 8006736:	e7d9      	b.n	80066ec <_strtol_l.constprop.0+0x94>
 8006738:	1c53      	adds	r3, r2, #1
 800673a:	d108      	bne.n	800674e <_strtol_l.constprop.0+0xf6>
 800673c:	2322      	movs	r3, #34	@ 0x22
 800673e:	9a03      	ldr	r2, [sp, #12]
 8006740:	9802      	ldr	r0, [sp, #8]
 8006742:	6013      	str	r3, [r2, #0]
 8006744:	2f00      	cmp	r7, #0
 8006746:	d0d9      	beq.n	80066fc <_strtol_l.constprop.0+0xa4>
 8006748:	1e63      	subs	r3, r4, #1
 800674a:	9301      	str	r3, [sp, #4]
 800674c:	e007      	b.n	800675e <_strtol_l.constprop.0+0x106>
 800674e:	9b00      	ldr	r3, [sp, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d000      	beq.n	8006756 <_strtol_l.constprop.0+0xfe>
 8006754:	4240      	negs	r0, r0
 8006756:	2f00      	cmp	r7, #0
 8006758:	d0d0      	beq.n	80066fc <_strtol_l.constprop.0+0xa4>
 800675a:	2a00      	cmp	r2, #0
 800675c:	d1f4      	bne.n	8006748 <_strtol_l.constprop.0+0xf0>
 800675e:	9b01      	ldr	r3, [sp, #4]
 8006760:	603b      	str	r3, [r7, #0]
 8006762:	e7cb      	b.n	80066fc <_strtol_l.constprop.0+0xa4>
 8006764:	08006cdb 	.word	0x08006cdb
 8006768:	7fffffff 	.word	0x7fffffff

0800676c <_strtol_r>:
 800676c:	b510      	push	{r4, lr}
 800676e:	f7ff ff73 	bl	8006658 <_strtol_l.constprop.0>
 8006772:	bd10      	pop	{r4, pc}

08006774 <_strtoul_l.constprop.0>:
 8006774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006776:	001e      	movs	r6, r3
 8006778:	4b3e      	ldr	r3, [pc, #248]	@ (8006874 <_strtoul_l.constprop.0+0x100>)
 800677a:	0017      	movs	r7, r2
 800677c:	000c      	movs	r4, r1
 800677e:	469c      	mov	ip, r3
 8006780:	2208      	movs	r2, #8
 8006782:	b085      	sub	sp, #20
 8006784:	9003      	str	r0, [sp, #12]
 8006786:	9100      	str	r1, [sp, #0]
 8006788:	0023      	movs	r3, r4
 800678a:	4661      	mov	r1, ip
 800678c:	781d      	ldrb	r5, [r3, #0]
 800678e:	3401      	adds	r4, #1
 8006790:	5d48      	ldrb	r0, [r1, r5]
 8006792:	0001      	movs	r1, r0
 8006794:	4011      	ands	r1, r2
 8006796:	4210      	tst	r0, r2
 8006798:	d1f6      	bne.n	8006788 <_strtoul_l.constprop.0+0x14>
 800679a:	2d2d      	cmp	r5, #45	@ 0x2d
 800679c:	d137      	bne.n	800680e <_strtoul_l.constprop.0+0x9a>
 800679e:	7825      	ldrb	r5, [r4, #0]
 80067a0:	1c9c      	adds	r4, r3, #2
 80067a2:	2301      	movs	r3, #1
 80067a4:	9302      	str	r3, [sp, #8]
 80067a6:	2210      	movs	r2, #16
 80067a8:	0033      	movs	r3, r6
 80067aa:	4393      	bics	r3, r2
 80067ac:	d109      	bne.n	80067c2 <_strtoul_l.constprop.0+0x4e>
 80067ae:	2d30      	cmp	r5, #48	@ 0x30
 80067b0:	d133      	bne.n	800681a <_strtoul_l.constprop.0+0xa6>
 80067b2:	2120      	movs	r1, #32
 80067b4:	7823      	ldrb	r3, [r4, #0]
 80067b6:	438b      	bics	r3, r1
 80067b8:	2b58      	cmp	r3, #88	@ 0x58
 80067ba:	d12e      	bne.n	800681a <_strtoul_l.constprop.0+0xa6>
 80067bc:	0016      	movs	r6, r2
 80067be:	7865      	ldrb	r5, [r4, #1]
 80067c0:	3402      	adds	r4, #2
 80067c2:	2001      	movs	r0, #1
 80067c4:	0031      	movs	r1, r6
 80067c6:	4240      	negs	r0, r0
 80067c8:	f7f9 fcb0 	bl	800012c <__udivsi3>
 80067cc:	9001      	str	r0, [sp, #4]
 80067ce:	2001      	movs	r0, #1
 80067d0:	0031      	movs	r1, r6
 80067d2:	4240      	negs	r0, r0
 80067d4:	f7f9 fd30 	bl	8000238 <__aeabi_uidivmod>
 80067d8:	2300      	movs	r3, #0
 80067da:	2201      	movs	r2, #1
 80067dc:	0018      	movs	r0, r3
 80067de:	4694      	mov	ip, r2
 80067e0:	002a      	movs	r2, r5
 80067e2:	3a30      	subs	r2, #48	@ 0x30
 80067e4:	2a09      	cmp	r2, #9
 80067e6:	d81f      	bhi.n	8006828 <_strtoul_l.constprop.0+0xb4>
 80067e8:	0015      	movs	r5, r2
 80067ea:	42ae      	cmp	r6, r5
 80067ec:	dd2b      	ble.n	8006846 <_strtoul_l.constprop.0+0xd2>
 80067ee:	1c5a      	adds	r2, r3, #1
 80067f0:	d00a      	beq.n	8006808 <_strtoul_l.constprop.0+0x94>
 80067f2:	2301      	movs	r3, #1
 80067f4:	9a01      	ldr	r2, [sp, #4]
 80067f6:	425b      	negs	r3, r3
 80067f8:	4282      	cmp	r2, r0
 80067fa:	d305      	bcc.n	8006808 <_strtoul_l.constprop.0+0x94>
 80067fc:	d101      	bne.n	8006802 <_strtoul_l.constprop.0+0x8e>
 80067fe:	42a9      	cmp	r1, r5
 8006800:	db1e      	blt.n	8006840 <_strtoul_l.constprop.0+0xcc>
 8006802:	4663      	mov	r3, ip
 8006804:	4370      	muls	r0, r6
 8006806:	1828      	adds	r0, r5, r0
 8006808:	7825      	ldrb	r5, [r4, #0]
 800680a:	3401      	adds	r4, #1
 800680c:	e7e8      	b.n	80067e0 <_strtoul_l.constprop.0+0x6c>
 800680e:	9102      	str	r1, [sp, #8]
 8006810:	2d2b      	cmp	r5, #43	@ 0x2b
 8006812:	d1c8      	bne.n	80067a6 <_strtoul_l.constprop.0+0x32>
 8006814:	7825      	ldrb	r5, [r4, #0]
 8006816:	1c9c      	adds	r4, r3, #2
 8006818:	e7c5      	b.n	80067a6 <_strtoul_l.constprop.0+0x32>
 800681a:	2e00      	cmp	r6, #0
 800681c:	d1d1      	bne.n	80067c2 <_strtoul_l.constprop.0+0x4e>
 800681e:	3608      	adds	r6, #8
 8006820:	2d30      	cmp	r5, #48	@ 0x30
 8006822:	d0ce      	beq.n	80067c2 <_strtoul_l.constprop.0+0x4e>
 8006824:	3602      	adds	r6, #2
 8006826:	e7cc      	b.n	80067c2 <_strtoul_l.constprop.0+0x4e>
 8006828:	002a      	movs	r2, r5
 800682a:	3a41      	subs	r2, #65	@ 0x41
 800682c:	2a19      	cmp	r2, #25
 800682e:	d801      	bhi.n	8006834 <_strtoul_l.constprop.0+0xc0>
 8006830:	3d37      	subs	r5, #55	@ 0x37
 8006832:	e7da      	b.n	80067ea <_strtoul_l.constprop.0+0x76>
 8006834:	002a      	movs	r2, r5
 8006836:	3a61      	subs	r2, #97	@ 0x61
 8006838:	2a19      	cmp	r2, #25
 800683a:	d804      	bhi.n	8006846 <_strtoul_l.constprop.0+0xd2>
 800683c:	3d57      	subs	r5, #87	@ 0x57
 800683e:	e7d4      	b.n	80067ea <_strtoul_l.constprop.0+0x76>
 8006840:	2301      	movs	r3, #1
 8006842:	425b      	negs	r3, r3
 8006844:	e7e0      	b.n	8006808 <_strtoul_l.constprop.0+0x94>
 8006846:	1c5a      	adds	r2, r3, #1
 8006848:	d107      	bne.n	800685a <_strtoul_l.constprop.0+0xe6>
 800684a:	2222      	movs	r2, #34	@ 0x22
 800684c:	9903      	ldr	r1, [sp, #12]
 800684e:	0018      	movs	r0, r3
 8006850:	600a      	str	r2, [r1, #0]
 8006852:	2f00      	cmp	r7, #0
 8006854:	d109      	bne.n	800686a <_strtoul_l.constprop.0+0xf6>
 8006856:	b005      	add	sp, #20
 8006858:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800685a:	9a02      	ldr	r2, [sp, #8]
 800685c:	2a00      	cmp	r2, #0
 800685e:	d000      	beq.n	8006862 <_strtoul_l.constprop.0+0xee>
 8006860:	4240      	negs	r0, r0
 8006862:	2f00      	cmp	r7, #0
 8006864:	d0f7      	beq.n	8006856 <_strtoul_l.constprop.0+0xe2>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <_strtoul_l.constprop.0+0xfa>
 800686a:	1e63      	subs	r3, r4, #1
 800686c:	9300      	str	r3, [sp, #0]
 800686e:	9b00      	ldr	r3, [sp, #0]
 8006870:	603b      	str	r3, [r7, #0]
 8006872:	e7f0      	b.n	8006856 <_strtoul_l.constprop.0+0xe2>
 8006874:	08006cdb 	.word	0x08006cdb

08006878 <_strtoul_r>:
 8006878:	b510      	push	{r4, lr}
 800687a:	f7ff ff7b 	bl	8006774 <_strtoul_l.constprop.0>
 800687e:	bd10      	pop	{r4, pc}

08006880 <_malloc_usable_size_r>:
 8006880:	1f0b      	subs	r3, r1, #4
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	1f18      	subs	r0, r3, #4
 8006886:	2b00      	cmp	r3, #0
 8006888:	da01      	bge.n	800688e <_malloc_usable_size_r+0xe>
 800688a:	580b      	ldr	r3, [r1, r0]
 800688c:	18c0      	adds	r0, r0, r3
 800688e:	4770      	bx	lr

08006890 <_init>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	46c0      	nop			@ (mov r8, r8)
 8006894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006896:	bc08      	pop	{r3}
 8006898:	469e      	mov	lr, r3
 800689a:	4770      	bx	lr

0800689c <_fini>:
 800689c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689e:	46c0      	nop			@ (mov r8, r8)
 80068a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068a2:	bc08      	pop	{r3}
 80068a4:	469e      	mov	lr, r3
 80068a6:	4770      	bx	lr
