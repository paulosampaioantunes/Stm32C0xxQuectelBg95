
QuectelBg95Stm32C0Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a44  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007fc  08005b04  08005b04  00006b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006300  08006300  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006300  08006300  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006300  08006300  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006300  08006300  00007300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006304  08006304  00007304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006308  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000068  08006370  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08006370  00008294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d592  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021c9  00000000  00000000  00015622  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a80  00000000  00000000  000177f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000814  00000000  00000000  00018270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014291  00000000  00000000  00018a84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d850  00000000  00000000  0002cd15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000794cd  00000000  00000000  0003a565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3a32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003078  00000000  00000000  000b3a78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b6af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005aec 	.word	0x08005aec

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08005aec 	.word	0x08005aec

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f001 f80a 	bl	8001262 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f833 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f94f 	bl	80004f4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000256:	f000 f875 	bl	8000344 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f917 	bl	800048c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //configurando rtc apos reset
  	__HAL_RCC_PWR_CLK_ENABLE();
 800025e:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <main+0x6c>)
 8000260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000262:	4b13      	ldr	r3, [pc, #76]	@ (80002b0 <main+0x6c>)
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	0549      	lsls	r1, r1, #21
 8000268:	430a      	orrs	r2, r1
 800026a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800026c:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <main+0x6c>)
 800026e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	055b      	lsls	r3, r3, #21
 8000274:	4013      	ands	r3, r2
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  	__HAL_RCC_RTC_ENABLE();
 800027a:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <main+0x6c>)
 800027c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800027e:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <main+0x6c>)
 8000280:	2180      	movs	r1, #128	@ 0x80
 8000282:	0209      	lsls	r1, r1, #8
 8000284:	430a      	orrs	r2, r1
 8000286:	65da      	str	r2, [r3, #92]	@ 0x5c
  	InitFlags();
 8000288:	f000 fdfc 	bl	8000e84 <InitFlags>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		InitialConfigBg95();
 800028c:	f000 f9ac 	bl	80005e8 <InitialConfigBg95>
		ConfigPdpContext();
 8000290:	f000 fb08 	bl	80008a4 <ConfigPdpContext>
		ActivePdp();
 8000294:	f000 fc66 	bl	8000b64 <ActivePdp>
		ConfigMqttContext();
 8000298:	f000 fbc6 	bl	8000a28 <ConfigMqttContext>
		MqttConfigBeforeConnection();
 800029c:	f000 fd7e 	bl	8000d9c <MqttConfigBeforeConnection>
		MqttConnectAndSubscribe();
 80002a0:	f000 fcee 	bl	8000c80 <MqttConnectAndSubscribe>
		HAL_Delay(10000);
 80002a4:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <main+0x70>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 f858 	bl	800135c <HAL_Delay>
		InitialConfigBg95();
 80002ac:	46c0      	nop			@ (mov r8, r8)
 80002ae:	e7ed      	b.n	800028c <main+0x48>
 80002b0:	40021000 	.word	0x40021000
 80002b4:	00002710 	.word	0x00002710

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08d      	sub	sp, #52	@ 0x34
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2414      	movs	r4, #20
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	231c      	movs	r3, #28
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f003 ff95 	bl	80041f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	2314      	movs	r3, #20
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f003 ff8e 	bl	80041f8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	220a      	movs	r2, #10
 80002e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0052      	lsls	r2, r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2240      	movs	r2, #64	@ 0x40
 80002f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	2201      	movs	r2, #1
 80002fa:	619a      	str	r2, [r3, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 fb88 	bl	8001a14 <HAL_RCC_OscConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000308:	f000 fdd8 	bl	8000ebc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	003b      	movs	r3, r7
 800030e:	2207      	movs	r2, #7
 8000310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	003b      	movs	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800031e:	003b      	movs	r3, r7
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000324:	003b      	movs	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032a:	003b      	movs	r3, r7
 800032c:	2101      	movs	r1, #1
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fd54 	bl	8001ddc <HAL_RCC_ClockConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000338:	f000 fdc0 	bl	8000ebc <Error_Handler>
  }
}
 800033c:	46c0      	nop			@ (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b00d      	add	sp, #52	@ 0x34
 8000342:	bd90      	pop	{r4, r7, pc}

08000344 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	@ 0x40
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800034a:	232c      	movs	r3, #44	@ 0x2c
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	0018      	movs	r0, r3
 8000350:	2314      	movs	r3, #20
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f003 ff4f 	bl	80041f8 <memset>
  RTC_DateTypeDef sDate = {0};
 800035a:	2328      	movs	r3, #40	@ 0x28
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	2328      	movs	r3, #40	@ 0x28
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f003 ff44 	bl	80041f8 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000370:	4b44      	ldr	r3, [pc, #272]	@ (8000484 <MX_RTC_Init+0x140>)
 8000372:	4a45      	ldr	r2, [pc, #276]	@ (8000488 <MX_RTC_Init+0x144>)
 8000374:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000376:	4b43      	ldr	r3, [pc, #268]	@ (8000484 <MX_RTC_Init+0x140>)
 8000378:	2200      	movs	r2, #0
 800037a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800037c:	4b41      	ldr	r3, [pc, #260]	@ (8000484 <MX_RTC_Init+0x140>)
 800037e:	227f      	movs	r2, #127	@ 0x7f
 8000380:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000382:	4b40      	ldr	r3, [pc, #256]	@ (8000484 <MX_RTC_Init+0x140>)
 8000384:	22ff      	movs	r2, #255	@ 0xff
 8000386:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000388:	4b3e      	ldr	r3, [pc, #248]	@ (8000484 <MX_RTC_Init+0x140>)
 800038a:	2200      	movs	r2, #0
 800038c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800038e:	4b3d      	ldr	r3, [pc, #244]	@ (8000484 <MX_RTC_Init+0x140>)
 8000390:	2200      	movs	r2, #0
 8000392:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000394:	4b3b      	ldr	r3, [pc, #236]	@ (8000484 <MX_RTC_Init+0x140>)
 8000396:	2200      	movs	r2, #0
 8000398:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800039a:	4b3a      	ldr	r3, [pc, #232]	@ (8000484 <MX_RTC_Init+0x140>)
 800039c:	2280      	movs	r2, #128	@ 0x80
 800039e:	05d2      	lsls	r2, r2, #23
 80003a0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003a2:	4b38      	ldr	r3, [pc, #224]	@ (8000484 <MX_RTC_Init+0x140>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003a8:	4b36      	ldr	r3, [pc, #216]	@ (8000484 <MX_RTC_Init+0x140>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 ff92 	bl	80022d4 <HAL_RTC_Init>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80003b4:	f000 fd82 	bl	8000ebc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003b8:	212c      	movs	r1, #44	@ 0x2c
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2200      	movs	r2, #0
 80003ca:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2200      	movs	r2, #0
 80003d0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003de:	1879      	adds	r1, r7, r1
 80003e0:	4b28      	ldr	r3, [pc, #160]	@ (8000484 <MX_RTC_Init+0x140>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	0018      	movs	r0, r3
 80003e6:	f002 f803 	bl	80023f0 <HAL_RTC_SetTime>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80003ee:	f000 fd65 	bl	8000ebc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003f2:	2128      	movs	r1, #40	@ 0x28
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2201      	movs	r2, #1
 80003fe:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2201      	movs	r2, #1
 8000404:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800040c:	1879      	adds	r1, r7, r1
 800040e:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <MX_RTC_Init+0x140>)
 8000410:	2201      	movs	r2, #1
 8000412:	0018      	movs	r0, r3
 8000414:	f002 f894 	bl	8002540 <HAL_RTC_SetDate>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800041c:	f000 fd4e 	bl	8000ebc <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000420:	003b      	movs	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000426:	003b      	movs	r3, r7
 8000428:	2200      	movs	r2, #0
 800042a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800042c:	003b      	movs	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000432:	003b      	movs	r3, r7
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000438:	003b      	movs	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800043e:	003b      	movs	r3, r7
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000444:	003b      	movs	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800044a:	003b      	movs	r3, r7
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000450:	003b      	movs	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000456:	003b      	movs	r3, r7
 8000458:	2220      	movs	r2, #32
 800045a:	2101      	movs	r1, #1
 800045c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800045e:	003b      	movs	r3, r7
 8000460:	2280      	movs	r2, #128	@ 0x80
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000466:	0039      	movs	r1, r7
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_RTC_Init+0x140>)
 800046a:	2201      	movs	r2, #1
 800046c:	0018      	movs	r0, r3
 800046e:	f002 f8f9 	bl	8002664 <HAL_RTC_SetAlarm_IT>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8000476:	f000 fd21 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b010      	add	sp, #64	@ 0x40
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	20000084 	.word	0x20000084
 8000488:	40002800 	.word	0x40002800

0800048c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 8000492:	4a17      	ldr	r2, [pc, #92]	@ (80004f0 <MX_USART2_UART_Init+0x64>)
 8000494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000496:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 8000498:	22e1      	movs	r2, #225	@ 0xe1
 800049a:	0252      	lsls	r2, r2, #9
 800049c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c2:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d4:	4b05      	ldr	r3, [pc, #20]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 fac0 	bl	8002a5c <HAL_UART_Init>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004e0:	f000 fcec 	bl	8000ebc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	200000ac 	.word	0x200000ac
 80004f0:	40004400 	.word	0x40004400

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <MX_GPIO_Init+0x40>)
 80004fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000500:	2104      	movs	r1, #4
 8000502:	430a      	orrs	r2, r1
 8000504:	635a      	str	r2, [r3, #52]	@ 0x34
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050a:	2204      	movs	r2, #4
 800050c:	4013      	ands	r3, r2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000516:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	635a      	str	r2, [r3, #52]	@ 0x34
 800051e:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <sendATCommand>:

/* USER CODE BEGIN 4 */
void sendATCommand(char* command) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	0018      	movs	r0, r3
 8000544:	f7ff fde0 	bl	8000108 <strlen>
 8000548:	0003      	movs	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	2301      	movs	r3, #1
 800054e:	425b      	negs	r3, r3
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	4803      	ldr	r0, [pc, #12]	@ (8000560 <sendATCommand+0x28>)
 8000554:	f002 fad8 	bl	8002b08 <HAL_UART_Transmit>
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b002      	add	sp, #8
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200000ac 	.word	0x200000ac

08000564 <sendAndWaitForResponse.0>:
    char ip[16];          // Buffer para armazenar o endereço IP
    char command[128];    // Buffer para os comandos AT
    uint8_t retries;      // Contador de tentativas

    // Função para enviar o comando e esperar a resposta correta
    int sendAndWaitForResponse(char* atCommand) {
 8000564:	b590      	push	{r4, r7, lr}
 8000566:	b083      	sub	sp, #12
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
 800056c:	4664      	mov	r4, ip
 800056e:	4663      	mov	r3, ip
 8000570:	603b      	str	r3, [r7, #0]
        retries = 0;  // Reinicia o contador de tentativas
 8000572:	2200      	movs	r2, #0
 8000574:	2380      	movs	r3, #128	@ 0x80
 8000576:	54e2      	strb	r2, [r4, r3]
        while (retries < 10) {
 8000578:	e027      	b.n	80005ca <sendAndWaitForResponse.0+0x66>
            sendATCommand(atCommand);  // Enviar o comando AT
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	0018      	movs	r0, r3
 800057e:	f7ff ffdb 	bl	8000538 <sendATCommand>
            HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
 8000582:	0021      	movs	r1, r4
 8000584:	2301      	movs	r3, #1
 8000586:	425b      	negs	r3, r3
 8000588:	4814      	ldr	r0, [pc, #80]	@ (80005dc <sendAndWaitForResponse.0+0x78>)
 800058a:	2280      	movs	r2, #128	@ 0x80
 800058c:	f002 fb60 	bl	8002c50 <HAL_UART_Receive>
            printf("Resposta: %s\n", response);
 8000590:	0022      	movs	r2, r4
 8000592:	4b13      	ldr	r3, [pc, #76]	@ (80005e0 <sendAndWaitForResponse.0+0x7c>)
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f003 fc74 	bl	8003e84 <iprintf>

            // Verifica se a resposta contém "+" ou "OK" (case-insensitive)
            if (strstr(response, "+") || strcasestr(response, "OK")) {
 800059c:	0023      	movs	r3, r4
 800059e:	212b      	movs	r1, #43	@ 0x2b
 80005a0:	0018      	movs	r0, r3
 80005a2:	f003 fe31 	bl	8004208 <strchr>
 80005a6:	1e03      	subs	r3, r0, #0
 80005a8:	d107      	bne.n	80005ba <sendAndWaitForResponse.0+0x56>
 80005aa:	0022      	movs	r2, r4
 80005ac:	4b0d      	ldr	r3, [pc, #52]	@ (80005e4 <sendAndWaitForResponse.0+0x80>)
 80005ae:	0019      	movs	r1, r3
 80005b0:	0010      	movs	r0, r2
 80005b2:	f003 fe4d 	bl	8004250 <strcasestr>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <sendAndWaitForResponse.0+0x5a>
                return 1; // Sucesso
 80005ba:	2301      	movs	r3, #1
 80005bc:	e00a      	b.n	80005d4 <sendAndWaitForResponse.0+0x70>
            }
            retries++;  // Incrementa o contador de tentativas
 80005be:	2380      	movs	r3, #128	@ 0x80
 80005c0:	5ce3      	ldrb	r3, [r4, r3]
 80005c2:	3301      	adds	r3, #1
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	2380      	movs	r3, #128	@ 0x80
 80005c8:	54e2      	strb	r2, [r4, r3]
        while (retries < 10) {
 80005ca:	2380      	movs	r3, #128	@ 0x80
 80005cc:	5ce3      	ldrb	r3, [r4, r3]
 80005ce:	2b09      	cmp	r3, #9
 80005d0:	d9d3      	bls.n	800057a <sendAndWaitForResponse.0+0x16>
        }
        return 0;  // Falha após 5 tentativas
 80005d2:	2300      	movs	r3, #0
    }
 80005d4:	0018      	movs	r0, r3
 80005d6:	46bd      	mov	sp, r7
 80005d8:	b003      	add	sp, #12
 80005da:	bd90      	pop	{r4, r7, pc}
 80005dc:	200000ac 	.word	0x200000ac
 80005e0:	08005b04 	.word	0x08005b04
 80005e4:	08005b14 	.word	0x08005b14

080005e8 <InitialConfigBg95>:
void InitialConfigBg95() {
 80005e8:	b590      	push	{r4, r7, lr}
 80005ea:	b0c7      	sub	sp, #284	@ 0x11c
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	2390      	movs	r3, #144	@ 0x90
 80005f0:	005b      	lsls	r3, r3, #1
 80005f2:	2208      	movs	r2, #8
 80005f4:	189b      	adds	r3, r3, r2
 80005f6:	19db      	adds	r3, r3, r7
 80005f8:	4a75      	ldr	r2, [pc, #468]	@ (80007d0 <InitialConfigBg95+0x1e8>)
 80005fa:	218c      	movs	r1, #140	@ 0x8c
 80005fc:	0049      	lsls	r1, r1, #1
 80005fe:	1852      	adds	r2, r2, r1
 8000600:	19d2      	adds	r2, r2, r7
 8000602:	2184      	movs	r1, #132	@ 0x84
 8000604:	5053      	str	r3, [r2, r1]

    // Envia os comandos AT e espera a resposta correta
    if (!sendAndWaitForResponse("AT+CCID\r\n")) printf("Falha no comando AT+CCID\n");
 8000606:	4a73      	ldr	r2, [pc, #460]	@ (80007d4 <InitialConfigBg95+0x1ec>)
 8000608:	003b      	movs	r3, r7
 800060a:	469c      	mov	ip, r3
 800060c:	0010      	movs	r0, r2
 800060e:	f7ff ffa9 	bl	8000564 <sendAndWaitForResponse.0>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d103      	bne.n	800061e <InitialConfigBg95+0x36>
 8000616:	4b70      	ldr	r3, [pc, #448]	@ (80007d8 <InitialConfigBg95+0x1f0>)
 8000618:	0018      	movs	r0, r3
 800061a:	f003 fc99 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+CIMI\r\n")) printf("Falha no comando AT+CIMI\n");
 800061e:	4a6f      	ldr	r2, [pc, #444]	@ (80007dc <InitialConfigBg95+0x1f4>)
 8000620:	003b      	movs	r3, r7
 8000622:	469c      	mov	ip, r3
 8000624:	0010      	movs	r0, r2
 8000626:	f7ff ff9d 	bl	8000564 <sendAndWaitForResponse.0>
 800062a:	1e03      	subs	r3, r0, #0
 800062c:	d103      	bne.n	8000636 <InitialConfigBg95+0x4e>
 800062e:	4b6c      	ldr	r3, [pc, #432]	@ (80007e0 <InitialConfigBg95+0x1f8>)
 8000630:	0018      	movs	r0, r3
 8000632:	f003 fc8d 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+CFUN=0\r\n")) printf("Falha no comando AT+CFUN=0\n");
 8000636:	4a6b      	ldr	r2, [pc, #428]	@ (80007e4 <InitialConfigBg95+0x1fc>)
 8000638:	003b      	movs	r3, r7
 800063a:	469c      	mov	ip, r3
 800063c:	0010      	movs	r0, r2
 800063e:	f7ff ff91 	bl	8000564 <sendAndWaitForResponse.0>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d103      	bne.n	800064e <InitialConfigBg95+0x66>
 8000646:	4b68      	ldr	r3, [pc, #416]	@ (80007e8 <InitialConfigBg95+0x200>)
 8000648:	0018      	movs	r0, r3
 800064a:	f003 fc81 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+QCFG=\"nwscanmode\",0,1\r\n")) printf("Falha no comando AT+QCFG=\"nwscanmode\"\n");
 800064e:	4a67      	ldr	r2, [pc, #412]	@ (80007ec <InitialConfigBg95+0x204>)
 8000650:	003b      	movs	r3, r7
 8000652:	469c      	mov	ip, r3
 8000654:	0010      	movs	r0, r2
 8000656:	f7ff ff85 	bl	8000564 <sendAndWaitForResponse.0>
 800065a:	1e03      	subs	r3, r0, #0
 800065c:	d103      	bne.n	8000666 <InitialConfigBg95+0x7e>
 800065e:	4b64      	ldr	r3, [pc, #400]	@ (80007f0 <InitialConfigBg95+0x208>)
 8000660:	0018      	movs	r0, r3
 8000662:	f003 fc75 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+QCFG=\"nwscanseq\",020103,1\r\n")) printf("Falha no comando AT+QCFG=\"nwscanseq\"\n");
 8000666:	4a63      	ldr	r2, [pc, #396]	@ (80007f4 <InitialConfigBg95+0x20c>)
 8000668:	003b      	movs	r3, r7
 800066a:	469c      	mov	ip, r3
 800066c:	0010      	movs	r0, r2
 800066e:	f7ff ff79 	bl	8000564 <sendAndWaitForResponse.0>
 8000672:	1e03      	subs	r3, r0, #0
 8000674:	d103      	bne.n	800067e <InitialConfigBg95+0x96>
 8000676:	4b60      	ldr	r3, [pc, #384]	@ (80007f8 <InitialConfigBg95+0x210>)
 8000678:	0018      	movs	r0, r3
 800067a:	f003 fc69 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+QCFG=\"band\",0,0\r\n")) printf("Falha no comando AT+QCFG=\"band\"\n");
 800067e:	4a5f      	ldr	r2, [pc, #380]	@ (80007fc <InitialConfigBg95+0x214>)
 8000680:	003b      	movs	r3, r7
 8000682:	469c      	mov	ip, r3
 8000684:	0010      	movs	r0, r2
 8000686:	f7ff ff6d 	bl	8000564 <sendAndWaitForResponse.0>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d103      	bne.n	8000696 <InitialConfigBg95+0xae>
 800068e:	4b5c      	ldr	r3, [pc, #368]	@ (8000800 <InitialConfigBg95+0x218>)
 8000690:	0018      	movs	r0, r3
 8000692:	f003 fc5d 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+COPS=0\r\n")) printf("Falha no comando AT+COPS=0\n");
 8000696:	4a5b      	ldr	r2, [pc, #364]	@ (8000804 <InitialConfigBg95+0x21c>)
 8000698:	003b      	movs	r3, r7
 800069a:	469c      	mov	ip, r3
 800069c:	0010      	movs	r0, r2
 800069e:	f7ff ff61 	bl	8000564 <sendAndWaitForResponse.0>
 80006a2:	1e03      	subs	r3, r0, #0
 80006a4:	d103      	bne.n	80006ae <InitialConfigBg95+0xc6>
 80006a6:	4b58      	ldr	r3, [pc, #352]	@ (8000808 <InitialConfigBg95+0x220>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f003 fc51 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"datatem\",\"datatem\"\r\n")) printf("Falha no comando AT+CGDCONT\n");
 80006ae:	4a57      	ldr	r2, [pc, #348]	@ (800080c <InitialConfigBg95+0x224>)
 80006b0:	003b      	movs	r3, r7
 80006b2:	469c      	mov	ip, r3
 80006b4:	0010      	movs	r0, r2
 80006b6:	f7ff ff55 	bl	8000564 <sendAndWaitForResponse.0>
 80006ba:	1e03      	subs	r3, r0, #0
 80006bc:	d103      	bne.n	80006c6 <InitialConfigBg95+0xde>
 80006be:	4b54      	ldr	r3, [pc, #336]	@ (8000810 <InitialConfigBg95+0x228>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f003 fc45 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+CFUN=1\r\n")) printf("Falha no comando AT+CFUN=1\n");
 80006c6:	4a53      	ldr	r2, [pc, #332]	@ (8000814 <InitialConfigBg95+0x22c>)
 80006c8:	003b      	movs	r3, r7
 80006ca:	469c      	mov	ip, r3
 80006cc:	0010      	movs	r0, r2
 80006ce:	f7ff ff49 	bl	8000564 <sendAndWaitForResponse.0>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d103      	bne.n	80006de <InitialConfigBg95+0xf6>
 80006d6:	4b50      	ldr	r3, [pc, #320]	@ (8000818 <InitialConfigBg95+0x230>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f003 fc39 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+CREG=1;+CGREG=1;+CEREG=1\r\n")) printf("Falha no comando AT+CREG=1;+CGREG=1;+CEREG=1\n");
 80006de:	4a4f      	ldr	r2, [pc, #316]	@ (800081c <InitialConfigBg95+0x234>)
 80006e0:	003b      	movs	r3, r7
 80006e2:	469c      	mov	ip, r3
 80006e4:	0010      	movs	r0, r2
 80006e6:	f7ff ff3d 	bl	8000564 <sendAndWaitForResponse.0>
 80006ea:	1e03      	subs	r3, r0, #0
 80006ec:	d103      	bne.n	80006f6 <InitialConfigBg95+0x10e>
 80006ee:	4b4c      	ldr	r3, [pc, #304]	@ (8000820 <InitialConfigBg95+0x238>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f003 fc2d 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+COPS?\r\n")) printf("Falha no comando AT+COPS?\n");
 80006f6:	4a4b      	ldr	r2, [pc, #300]	@ (8000824 <InitialConfigBg95+0x23c>)
 80006f8:	003b      	movs	r3, r7
 80006fa:	469c      	mov	ip, r3
 80006fc:	0010      	movs	r0, r2
 80006fe:	f7ff ff31 	bl	8000564 <sendAndWaitForResponse.0>
 8000702:	1e03      	subs	r3, r0, #0
 8000704:	d103      	bne.n	800070e <InitialConfigBg95+0x126>
 8000706:	4b48      	ldr	r3, [pc, #288]	@ (8000828 <InitialConfigBg95+0x240>)
 8000708:	0018      	movs	r0, r3
 800070a:	f003 fc21 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+QCSQ\r\n")) printf("Falha no comando AT+QCSQ\n");
 800070e:	4a47      	ldr	r2, [pc, #284]	@ (800082c <InitialConfigBg95+0x244>)
 8000710:	003b      	movs	r3, r7
 8000712:	469c      	mov	ip, r3
 8000714:	0010      	movs	r0, r2
 8000716:	f7ff ff25 	bl	8000564 <sendAndWaitForResponse.0>
 800071a:	1e03      	subs	r3, r0, #0
 800071c:	d103      	bne.n	8000726 <InitialConfigBg95+0x13e>
 800071e:	4b44      	ldr	r3, [pc, #272]	@ (8000830 <InitialConfigBg95+0x248>)
 8000720:	0018      	movs	r0, r3
 8000722:	f003 fc15 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+CREG?;+CEREG?;+CGREG?\r\n")) printf("Falha no comando AT+CREG?;+CEREG?;+CGREG?\n");
 8000726:	4a43      	ldr	r2, [pc, #268]	@ (8000834 <InitialConfigBg95+0x24c>)
 8000728:	003b      	movs	r3, r7
 800072a:	469c      	mov	ip, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f7ff ff19 	bl	8000564 <sendAndWaitForResponse.0>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d103      	bne.n	800073e <InitialConfigBg95+0x156>
 8000736:	4b40      	ldr	r3, [pc, #256]	@ (8000838 <InitialConfigBg95+0x250>)
 8000738:	0018      	movs	r0, r3
 800073a:	f003 fc09 	bl	8003f50 <puts>
    if (!sendAndWaitForResponse("AT+CGATT=1\r\n")) printf("Falha no comando AT+CGATT=1\n");
 800073e:	4a3f      	ldr	r2, [pc, #252]	@ (800083c <InitialConfigBg95+0x254>)
 8000740:	003b      	movs	r3, r7
 8000742:	469c      	mov	ip, r3
 8000744:	0010      	movs	r0, r2
 8000746:	f7ff ff0d 	bl	8000564 <sendAndWaitForResponse.0>
 800074a:	1e03      	subs	r3, r0, #0
 800074c:	d103      	bne.n	8000756 <InitialConfigBg95+0x16e>
 800074e:	4b3c      	ldr	r3, [pc, #240]	@ (8000840 <InitialConfigBg95+0x258>)
 8000750:	0018      	movs	r0, r3
 8000752:	f003 fbfd 	bl	8003f50 <puts>

    // Verificar o endereço IP alocado
    if (sendAndWaitForResponse("AT+CGPADDR\r\n")) {
 8000756:	4a3b      	ldr	r2, [pc, #236]	@ (8000844 <InitialConfigBg95+0x25c>)
 8000758:	003b      	movs	r3, r7
 800075a:	469c      	mov	ip, r3
 800075c:	0010      	movs	r0, r2
 800075e:	f7ff ff01 	bl	8000564 <sendAndWaitForResponse.0>
 8000762:	1e03      	subs	r3, r0, #0
 8000764:	d02b      	beq.n	80007be <InitialConfigBg95+0x1d6>
        // Extrair o endereço IP da resposta
        if (sscanf(response, "+CGPADDR: 1,\"%15[^\"]", ip) == 1) {
 8000766:	2484      	movs	r4, #132	@ 0x84
 8000768:	0064      	lsls	r4, r4, #1
 800076a:	193a      	adds	r2, r7, r4
 800076c:	4936      	ldr	r1, [pc, #216]	@ (8000848 <InitialConfigBg95+0x260>)
 800076e:	003b      	movs	r3, r7
 8000770:	0018      	movs	r0, r3
 8000772:	f003 fc2b 	bl	8003fcc <siscanf>
 8000776:	0003      	movs	r3, r0
 8000778:	2b01      	cmp	r3, #1
 800077a:	d106      	bne.n	800078a <InitialConfigBg95+0x1a2>
            printf("Endereço IP alocado: %s\n", ip); // Exibir o IP
 800077c:	193a      	adds	r2, r7, r4
 800077e:	4b33      	ldr	r3, [pc, #204]	@ (800084c <InitialConfigBg95+0x264>)
 8000780:	0011      	movs	r1, r2
 8000782:	0018      	movs	r0, r3
 8000784:	f003 fb7e 	bl	8003e84 <iprintf>
 8000788:	e003      	b.n	8000792 <InitialConfigBg95+0x1aa>
        } else {
            printf("Falha ao obter o endereço IP.\n");
 800078a:	4b31      	ldr	r3, [pc, #196]	@ (8000850 <InitialConfigBg95+0x268>)
 800078c:	0018      	movs	r0, r3
 800078e:	f003 fbdf 	bl	8003f50 <puts>
        }

        // Realizar um teste de ping com o IP obtido
        snprintf(command, sizeof(command), "AT+QPING=1,\"%s\"\r\n", ip);
 8000792:	2384      	movs	r3, #132	@ 0x84
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	4a2e      	ldr	r2, [pc, #184]	@ (8000854 <InitialConfigBg95+0x26c>)
 800079a:	2488      	movs	r4, #136	@ 0x88
 800079c:	1938      	adds	r0, r7, r4
 800079e:	2180      	movs	r1, #128	@ 0x80
 80007a0:	f003 fbe0 	bl	8003f64 <sniprintf>
        if (!sendAndWaitForResponse(command)) printf("Falha no comando AT+QPING\n");
 80007a4:	193a      	adds	r2, r7, r4
 80007a6:	003b      	movs	r3, r7
 80007a8:	469c      	mov	ip, r3
 80007aa:	0010      	movs	r0, r2
 80007ac:	f7ff feda 	bl	8000564 <sendAndWaitForResponse.0>
 80007b0:	1e03      	subs	r3, r0, #0
 80007b2:	d108      	bne.n	80007c6 <InitialConfigBg95+0x1de>
 80007b4:	4b28      	ldr	r3, [pc, #160]	@ (8000858 <InitialConfigBg95+0x270>)
 80007b6:	0018      	movs	r0, r3
 80007b8:	f003 fbca 	bl	8003f50 <puts>
    } else {
        printf("Falha no comando AT+CGPADDR\n");
    }
}
 80007bc:	e003      	b.n	80007c6 <InitialConfigBg95+0x1de>
        printf("Falha no comando AT+CGPADDR\n");
 80007be:	4b27      	ldr	r3, [pc, #156]	@ (800085c <InitialConfigBg95+0x274>)
 80007c0:	0018      	movs	r0, r3
 80007c2:	f003 fbc5 	bl	8003f50 <puts>
}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	46bd      	mov	sp, r7
 80007ca:	b047      	add	sp, #284	@ 0x11c
 80007cc:	bd90      	pop	{r4, r7, pc}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	fffffee8 	.word	0xfffffee8
 80007d4:	08005b18 	.word	0x08005b18
 80007d8:	08005b24 	.word	0x08005b24
 80007dc:	08005b40 	.word	0x08005b40
 80007e0:	08005b4c 	.word	0x08005b4c
 80007e4:	08005b68 	.word	0x08005b68
 80007e8:	08005b74 	.word	0x08005b74
 80007ec:	08005b90 	.word	0x08005b90
 80007f0:	08005bac 	.word	0x08005bac
 80007f4:	08005bd4 	.word	0x08005bd4
 80007f8:	08005bf4 	.word	0x08005bf4
 80007fc:	08005c1c 	.word	0x08005c1c
 8000800:	08005c34 	.word	0x08005c34
 8000804:	08005c54 	.word	0x08005c54
 8000808:	08005c60 	.word	0x08005c60
 800080c:	08005c7c 	.word	0x08005c7c
 8000810:	08005cb8 	.word	0x08005cb8
 8000814:	08005cd4 	.word	0x08005cd4
 8000818:	08005ce0 	.word	0x08005ce0
 800081c:	08005cfc 	.word	0x08005cfc
 8000820:	08005d1c 	.word	0x08005d1c
 8000824:	08005d4c 	.word	0x08005d4c
 8000828:	08005d58 	.word	0x08005d58
 800082c:	08005d74 	.word	0x08005d74
 8000830:	08005d80 	.word	0x08005d80
 8000834:	08005d9c 	.word	0x08005d9c
 8000838:	08005db8 	.word	0x08005db8
 800083c:	08005de4 	.word	0x08005de4
 8000840:	08005df4 	.word	0x08005df4
 8000844:	08005e10 	.word	0x08005e10
 8000848:	08005e20 	.word	0x08005e20
 800084c:	08005e38 	.word	0x08005e38
 8000850:	08005e54 	.word	0x08005e54
 8000854:	08005e74 	.word	0x08005e74
 8000858:	08005e88 	.word	0x08005e88
 800085c:	08005ea4 	.word	0x08005ea4

08000860 <checkResponse.2>:
    char command[128];
    char response[256];
    int retries = 10; // Número máximo de tentativas

    // Função auxiliar para verificar a resposta
    int checkResponse(const char *response) {
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	4663      	mov	r3, ip
 800086a:	603b      	str	r3, [r7, #0]
        // Verifica se a resposta contém "+" ou "OK" (case-insensitive)
        return (strcasestr(response, "+") != NULL || strcasestr(response, "OK") != NULL);
 800086c:	4a0b      	ldr	r2, [pc, #44]	@ (800089c <checkResponse.2+0x3c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	0011      	movs	r1, r2
 8000872:	0018      	movs	r0, r3
 8000874:	f003 fcec 	bl	8004250 <strcasestr>
 8000878:	1e03      	subs	r3, r0, #0
 800087a:	d107      	bne.n	800088c <checkResponse.2+0x2c>
 800087c:	4a08      	ldr	r2, [pc, #32]	@ (80008a0 <checkResponse.2+0x40>)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f003 fce4 	bl	8004250 <strcasestr>
 8000888:	1e03      	subs	r3, r0, #0
 800088a:	d001      	beq.n	8000890 <checkResponse.2+0x30>
 800088c:	2301      	movs	r3, #1
 800088e:	e000      	b.n	8000892 <checkResponse.2+0x32>
 8000890:	2300      	movs	r3, #0
    }
 8000892:	0018      	movs	r0, r3
 8000894:	46bd      	mov	sp, r7
 8000896:	b002      	add	sp, #8
 8000898:	bd80      	pop	{r7, pc}
 800089a:	46c0      	nop			@ (mov r8, r8)
 800089c:	08005ec0 	.word	0x08005ec0
 80008a0:	08005b14 	.word	0x08005b14

080008a4 <ConfigPdpContext>:
void ConfigPdpContext() {
 80008a4:	b590      	push	{r4, r7, lr}
 80008a6:	b0e3      	sub	sp, #396	@ 0x18c
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	23c8      	movs	r3, #200	@ 0xc8
 80008ac:	005b      	lsls	r3, r3, #1
 80008ae:	2208      	movs	r2, #8
 80008b0:	189b      	adds	r3, r3, r2
 80008b2:	19db      	adds	r3, r3, r7
 80008b4:	4a27      	ldr	r2, [pc, #156]	@ (8000954 <ConfigPdpContext+0xb0>)
 80008b6:	20c4      	movs	r0, #196	@ 0xc4
 80008b8:	0040      	lsls	r0, r0, #1
 80008ba:	1812      	adds	r2, r2, r0
 80008bc:	19d1      	adds	r1, r2, r7
 80008be:	2282      	movs	r2, #130	@ 0x82
 80008c0:	0052      	lsls	r2, r2, #1
 80008c2:	508b      	str	r3, [r1, r2]
    int retries = 10; // Número máximo de tentativas
 80008c4:	220a      	movs	r2, #10
 80008c6:	4b23      	ldr	r3, [pc, #140]	@ (8000954 <ConfigPdpContext+0xb0>)
 80008c8:	181b      	adds	r3, r3, r0
 80008ca:	19db      	adds	r3, r3, r7
 80008cc:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Configurar APN com o contexto CID 1, com login e senha
    snprintf(command, sizeof(command), "AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"\",0,0\r\n");
 80008ce:	4a22      	ldr	r2, [pc, #136]	@ (8000958 <ConfigPdpContext+0xb4>)
 80008d0:	2484      	movs	r4, #132	@ 0x84
 80008d2:	0064      	lsls	r4, r4, #1
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	2180      	movs	r1, #128	@ 0x80
 80008d8:	0018      	movs	r0, r3
 80008da:	f003 fb43 	bl	8003f64 <sniprintf>
    sendCommandAndWait(command);
 80008de:	193a      	adds	r2, r7, r4
 80008e0:	003b      	movs	r3, r7
 80008e2:	469c      	mov	ip, r3
 80008e4:	0010      	movs	r0, r2
 80008e6:	f000 f843 	bl	8000970 <sendCommandAndWait.1>

    // Ativar o contexto PDP
    snprintf(command, sizeof(command), "AT+CGACT=1,1\r\n");
 80008ea:	4a1c      	ldr	r2, [pc, #112]	@ (800095c <ConfigPdpContext+0xb8>)
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2180      	movs	r1, #128	@ 0x80
 80008f0:	0018      	movs	r0, r3
 80008f2:	f003 fb37 	bl	8003f64 <sniprintf>
    sendCommandAndWait(command);
 80008f6:	193a      	adds	r2, r7, r4
 80008f8:	003b      	movs	r3, r7
 80008fa:	469c      	mov	ip, r3
 80008fc:	0010      	movs	r0, r2
 80008fe:	f000 f837 	bl	8000970 <sendCommandAndWait.1>

    // Verificar se o contexto PDP está ativo
    snprintf(command, sizeof(command), "AT+CGPADDR=1\r\n");
 8000902:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <ConfigPdpContext+0xbc>)
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2180      	movs	r1, #128	@ 0x80
 8000908:	0018      	movs	r0, r3
 800090a:	f003 fb2b 	bl	8003f64 <sniprintf>
    sendCommandAndWait(command);
 800090e:	193a      	adds	r2, r7, r4
 8000910:	003b      	movs	r3, r7
 8000912:	469c      	mov	ip, r3
 8000914:	0010      	movs	r0, r2
 8000916:	f000 f82b 	bl	8000970 <sendCommandAndWait.1>

    // Receber a resposta e verificar se contém o IP
    if (strstr(response, "0.0.0.0") == NULL) {
 800091a:	4a12      	ldr	r2, [pc, #72]	@ (8000964 <ConfigPdpContext+0xc0>)
 800091c:	003b      	movs	r3, r7
 800091e:	3304      	adds	r3, #4
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f003 fc7e 	bl	8004224 <strstr>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d10b      	bne.n	8000944 <ConfigPdpContext+0xa0>
        // Contexto PDP ativado com sucesso, IP foi alocado corretamente
        snprintf(command, sizeof(command), "PDP context ativado com sucesso. APN: inlog.vivo.com.br, IP: %s\r\n", response);
 800092c:	003b      	movs	r3, r7
 800092e:	3304      	adds	r3, #4
 8000930:	4a0d      	ldr	r2, [pc, #52]	@ (8000968 <ConfigPdpContext+0xc4>)
 8000932:	1938      	adds	r0, r7, r4
 8000934:	2180      	movs	r1, #128	@ 0x80
 8000936:	f003 fb15 	bl	8003f64 <sniprintf>
        sendATCommand(command); // Transmitir a mensagem de sucesso pela UART
 800093a:	193b      	adds	r3, r7, r4
 800093c:	0018      	movs	r0, r3
 800093e:	f7ff fdfb 	bl	8000538 <sendATCommand>
    } else {
        // Erro ao ativar o contexto PDP
        sendATCommand("Erro ao ativar o contexto PDP\r\n");
    }
}
 8000942:	e003      	b.n	800094c <ConfigPdpContext+0xa8>
        sendATCommand("Erro ao ativar o contexto PDP\r\n");
 8000944:	4b09      	ldr	r3, [pc, #36]	@ (800096c <ConfigPdpContext+0xc8>)
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff fdf6 	bl	8000538 <sendATCommand>
}
 800094c:	46c0      	nop			@ (mov r8, r8)
 800094e:	46bd      	mov	sp, r7
 8000950:	b063      	add	sp, #396	@ 0x18c
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	fffffe78 	.word	0xfffffe78
 8000958:	08005ec4 	.word	0x08005ec4
 800095c:	08005ef4 	.word	0x08005ef4
 8000960:	08005f04 	.word	0x08005f04
 8000964:	08005f14 	.word	0x08005f14
 8000968:	08005f1c 	.word	0x08005f1c
 800096c:	08005f60 	.word	0x08005f60

08000970 <sendCommandAndWait.1>:
    void sendCommandAndWait(char *command) {
 8000970:	b590      	push	{r4, r7, lr}
 8000972:	b085      	sub	sp, #20
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	4664      	mov	r4, ip
 800097a:	4663      	mov	r3, ip
 800097c:	603b      	str	r3, [r7, #0]
        for (int attempt = 0; attempt < retries; attempt++) {
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
 8000982:	e020      	b.n	80009c6 <sendCommandAndWait.1+0x56>
            sendATCommand(command);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	0018      	movs	r0, r3
 8000988:	f7ff fdd6 	bl	8000538 <sendATCommand>
            HAL_UART_Receive(&huart2, (uint8_t *)response, sizeof(response), HAL_MAX_DELAY);
 800098c:	1d21      	adds	r1, r4, #4
 800098e:	2301      	movs	r3, #1
 8000990:	425b      	negs	r3, r3
 8000992:	2280      	movs	r2, #128	@ 0x80
 8000994:	0052      	lsls	r2, r2, #1
 8000996:	4810      	ldr	r0, [pc, #64]	@ (80009d8 <sendCommandAndWait.1+0x68>)
 8000998:	f002 f95a 	bl	8002c50 <HAL_UART_Receive>
            if (checkResponse(response)) {
 800099c:	1d23      	adds	r3, r4, #4
 800099e:	46a4      	mov	ip, r4
 80009a0:	0018      	movs	r0, r3
 80009a2:	f7ff ff5d 	bl	8000860 <checkResponse.2>
 80009a6:	1e03      	subs	r3, r0, #0
 80009a8:	d006      	beq.n	80009b8 <sendCommandAndWait.1+0x48>
                printf("Resposta recebida: %s\n", response);
 80009aa:	1d22      	adds	r2, r4, #4
 80009ac:	4b0b      	ldr	r3, [pc, #44]	@ (80009dc <sendCommandAndWait.1+0x6c>)
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f003 fa67 	bl	8003e84 <iprintf>
                break; // Saímos do loop se a resposta for válida
 80009b6:	e00b      	b.n	80009d0 <sendCommandAndWait.1+0x60>
                printf("Resposta inválida, reenviando comando...\n");
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <sendCommandAndWait.1+0x70>)
 80009ba:	0018      	movs	r0, r3
 80009bc:	f003 fac8 	bl	8003f50 <puts>
        for (int attempt = 0; attempt < retries; attempt++) {
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	68fa      	ldr	r2, [r7, #12]
 80009ca:	429a      	cmp	r2, r3
 80009cc:	dbda      	blt.n	8000984 <sendCommandAndWait.1+0x14>
    }
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	46c0      	nop			@ (mov r8, r8)
 80009d2:	46bd      	mov	sp, r7
 80009d4:	b005      	add	sp, #20
 80009d6:	bd90      	pop	{r4, r7, pc}
 80009d8:	200000ac 	.word	0x200000ac
 80009dc:	08005f80 	.word	0x08005f80
 80009e0:	08005f98 	.word	0x08005f98

080009e4 <checkResponse.4>:
void ConfigMqttContext() {
    char response[256];
    int retries = 10; // Número máximo de tentativas

    // Função auxiliar para verificar a resposta
    int checkResponse(const char *response) {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	4663      	mov	r3, ip
 80009ee:	603b      	str	r3, [r7, #0]
        // Verifica se a resposta contém "+" ou "OK" (case-insensitive)
        return (strcasestr(response, "+") != NULL || strcasestr(response, "OK") != NULL);
 80009f0:	4a0b      	ldr	r2, [pc, #44]	@ (8000a20 <checkResponse.4+0x3c>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	0011      	movs	r1, r2
 80009f6:	0018      	movs	r0, r3
 80009f8:	f003 fc2a 	bl	8004250 <strcasestr>
 80009fc:	1e03      	subs	r3, r0, #0
 80009fe:	d107      	bne.n	8000a10 <checkResponse.4+0x2c>
 8000a00:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <checkResponse.4+0x40>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	0011      	movs	r1, r2
 8000a06:	0018      	movs	r0, r3
 8000a08:	f003 fc22 	bl	8004250 <strcasestr>
 8000a0c:	1e03      	subs	r3, r0, #0
 8000a0e:	d001      	beq.n	8000a14 <checkResponse.4+0x30>
 8000a10:	2301      	movs	r3, #1
 8000a12:	e000      	b.n	8000a16 <checkResponse.4+0x32>
 8000a14:	2300      	movs	r3, #0
    }
 8000a16:	0018      	movs	r0, r3
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	b002      	add	sp, #8
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	08005ec0 	.word	0x08005ec0
 8000a24:	08005b14 	.word	0x08005b14

08000a28 <ConfigMqttContext>:
void ConfigMqttContext() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b0c2      	sub	sp, #264	@ 0x108
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	2388      	movs	r3, #136	@ 0x88
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	18fb      	adds	r3, r7, r3
 8000a34:	4a17      	ldr	r2, [pc, #92]	@ (8000a94 <ConfigMqttContext+0x6c>)
 8000a36:	2084      	movs	r0, #132	@ 0x84
 8000a38:	0040      	lsls	r0, r0, #1
 8000a3a:	1812      	adds	r2, r2, r0
 8000a3c:	19d1      	adds	r1, r2, r7
 8000a3e:	2282      	movs	r2, #130	@ 0x82
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	508b      	str	r3, [r1, r2]
    int retries = 10; // Número máximo de tentativas
 8000a44:	220a      	movs	r2, #10
 8000a46:	4b13      	ldr	r3, [pc, #76]	@ (8000a94 <ConfigMqttContext+0x6c>)
 8000a48:	181b      	adds	r3, r3, r0
 8000a4a:	19db      	adds	r3, r3, r7
 8000a4c:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Configurar a versão MQTT como 3.1.1
    sendCommandAndWait("AT+QMTCFG=\"version\",0,4\r\n");
 8000a4e:	4a12      	ldr	r2, [pc, #72]	@ (8000a98 <ConfigMqttContext+0x70>)
 8000a50:	003b      	movs	r3, r7
 8000a52:	469c      	mov	ip, r3
 8000a54:	0010      	movs	r0, r2
 8000a56:	f000 f829 	bl	8000aac <sendCommandAndWait.3>

    // Associar o contexto PDP ao cliente MQTT
    sendCommandAndWait("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000a5a:	4a10      	ldr	r2, [pc, #64]	@ (8000a9c <ConfigMqttContext+0x74>)
 8000a5c:	003b      	movs	r3, r7
 8000a5e:	469c      	mov	ip, r3
 8000a60:	0010      	movs	r0, r2
 8000a62:	f000 f823 	bl	8000aac <sendCommandAndWait.3>

    // Habilitar SSL para o cliente MQTT
    sendCommandAndWait("AT+QMTCFG=\"ssl\",0,1,0\r\n");
 8000a66:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa0 <ConfigMqttContext+0x78>)
 8000a68:	003b      	movs	r3, r7
 8000a6a:	469c      	mov	ip, r3
 8000a6c:	0010      	movs	r0, r2
 8000a6e:	f000 f81d 	bl	8000aac <sendCommandAndWait.3>

    // Configurar keepalive para 3600 segundos
    sendCommandAndWait("AT+QMTCFG=\"keepalive\",0,3600\r\n");
 8000a72:	4a0c      	ldr	r2, [pc, #48]	@ (8000aa4 <ConfigMqttContext+0x7c>)
 8000a74:	003b      	movs	r3, r7
 8000a76:	469c      	mov	ip, r3
 8000a78:	0010      	movs	r0, r2
 8000a7a:	f000 f817 	bl	8000aac <sendCommandAndWait.3>

    // Configurar o "Will Message" do MQTT
    sendCommandAndWait("AT+QMTCFG=\"will\",0,1,0,1,\"/test/will\",\"Client disconnected unexpectedly\"\r\n");
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <ConfigMqttContext+0x80>)
 8000a80:	003b      	movs	r3, r7
 8000a82:	469c      	mov	ip, r3
 8000a84:	0010      	movs	r0, r2
 8000a86:	f000 f811 	bl	8000aac <sendCommandAndWait.3>
}
 8000a8a:	46c0      	nop			@ (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b042      	add	sp, #264	@ 0x108
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	46c0      	nop			@ (mov r8, r8)
 8000a94:	fffffef8 	.word	0xfffffef8
 8000a98:	08005fc4 	.word	0x08005fc4
 8000a9c:	08005fe0 	.word	0x08005fe0
 8000aa0:	08005ffc 	.word	0x08005ffc
 8000aa4:	08006014 	.word	0x08006014
 8000aa8:	08006034 	.word	0x08006034

08000aac <sendCommandAndWait.3>:
    void sendCommandAndWait(char *command) {
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	4664      	mov	r4, ip
 8000ab6:	4663      	mov	r3, ip
 8000ab8:	603b      	str	r3, [r7, #0]
        for (int attempt = 0; attempt < retries; attempt++) {
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	e020      	b.n	8000b02 <sendCommandAndWait.3+0x56>
            sendATCommand(command);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	0018      	movs	r0, r3
 8000ac4:	f7ff fd38 	bl	8000538 <sendATCommand>
            HAL_UART_Receive(&huart2, (uint8_t *)response, sizeof(response), HAL_MAX_DELAY);
 8000ac8:	1d21      	adds	r1, r4, #4
 8000aca:	2301      	movs	r3, #1
 8000acc:	425b      	negs	r3, r3
 8000ace:	2280      	movs	r2, #128	@ 0x80
 8000ad0:	0052      	lsls	r2, r2, #1
 8000ad2:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <sendCommandAndWait.3+0x68>)
 8000ad4:	f002 f8bc 	bl	8002c50 <HAL_UART_Receive>
            if (checkResponse(response)) {
 8000ad8:	1d23      	adds	r3, r4, #4
 8000ada:	46a4      	mov	ip, r4
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ff81 	bl	80009e4 <checkResponse.4>
 8000ae2:	1e03      	subs	r3, r0, #0
 8000ae4:	d006      	beq.n	8000af4 <sendCommandAndWait.3+0x48>
                printf("Resposta recebida: %s\n", response);
 8000ae6:	1d22      	adds	r2, r4, #4
 8000ae8:	4b0b      	ldr	r3, [pc, #44]	@ (8000b18 <sendCommandAndWait.3+0x6c>)
 8000aea:	0011      	movs	r1, r2
 8000aec:	0018      	movs	r0, r3
 8000aee:	f003 f9c9 	bl	8003e84 <iprintf>
                break; // Saímos do loop se a resposta for válida
 8000af2:	e00b      	b.n	8000b0c <sendCommandAndWait.3+0x60>
                printf("Resposta inválida, reenviando comando...\n");
 8000af4:	4b09      	ldr	r3, [pc, #36]	@ (8000b1c <sendCommandAndWait.3+0x70>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f003 fa2a 	bl	8003f50 <puts>
        for (int attempt = 0; attempt < retries; attempt++) {
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3301      	adds	r3, #1
 8000b00:	60fb      	str	r3, [r7, #12]
 8000b02:	6823      	ldr	r3, [r4, #0]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbda      	blt.n	8000ac0 <sendCommandAndWait.3+0x14>
    }
 8000b0a:	46c0      	nop			@ (mov r8, r8)
 8000b0c:	46c0      	nop			@ (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	b005      	add	sp, #20
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	200000ac 	.word	0x200000ac
 8000b18:	08005f80 	.word	0x08005f80
 8000b1c:	08005f98 	.word	0x08005f98

08000b20 <checkResponse.6>:
void ActivePdp() {
    char response[256];
    int retries = 5; // Número máximo de tentativas

    // Função auxiliar para verificar a resposta
    int checkResponse(const char *response) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
 8000b28:	4663      	mov	r3, ip
 8000b2a:	603b      	str	r3, [r7, #0]
        // Verifica se a resposta contém "+" ou "OK" (case-insensitive)
        return (strcasestr(response, "+") != NULL || strcasestr(response, "OK") != NULL);
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000b5c <checkResponse.6+0x3c>)
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	0011      	movs	r1, r2
 8000b32:	0018      	movs	r0, r3
 8000b34:	f003 fb8c 	bl	8004250 <strcasestr>
 8000b38:	1e03      	subs	r3, r0, #0
 8000b3a:	d107      	bne.n	8000b4c <checkResponse.6+0x2c>
 8000b3c:	4a08      	ldr	r2, [pc, #32]	@ (8000b60 <checkResponse.6+0x40>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	0011      	movs	r1, r2
 8000b42:	0018      	movs	r0, r3
 8000b44:	f003 fb84 	bl	8004250 <strcasestr>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <checkResponse.6+0x30>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <checkResponse.6+0x32>
 8000b50:	2300      	movs	r3, #0
    }
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b002      	add	sp, #8
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	08005ec0 	.word	0x08005ec0
 8000b60:	08005b14 	.word	0x08005b14

08000b64 <ActivePdp>:
void ActivePdp() {
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0c2      	sub	sp, #264	@ 0x108
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	2388      	movs	r3, #136	@ 0x88
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	18fb      	adds	r3, r7, r3
 8000b70:	4a11      	ldr	r2, [pc, #68]	@ (8000bb8 <ActivePdp+0x54>)
 8000b72:	2084      	movs	r0, #132	@ 0x84
 8000b74:	0040      	lsls	r0, r0, #1
 8000b76:	1812      	adds	r2, r2, r0
 8000b78:	19d1      	adds	r1, r2, r7
 8000b7a:	2282      	movs	r2, #130	@ 0x82
 8000b7c:	0052      	lsls	r2, r2, #1
 8000b7e:	508b      	str	r3, [r1, r2]
    int retries = 5; // Número máximo de tentativas
 8000b80:	2205      	movs	r2, #5
 8000b82:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb8 <ActivePdp+0x54>)
 8000b84:	181b      	adds	r3, r3, r0
 8000b86:	19db      	adds	r3, r3, r7
 8000b88:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Verificar se o APN está configurado corretamente
    sendCommandAndWait("AT+CGDCONT?\r\n");
 8000b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8000bbc <ActivePdp+0x58>)
 8000b8c:	003b      	movs	r3, r7
 8000b8e:	469c      	mov	ip, r3
 8000b90:	0010      	movs	r0, r2
 8000b92:	f000 f819 	bl	8000bc8 <sendCommandAndWait.5>

    // Ativar o contexto PDP
    sendCommandAndWait("AT+CGACT=1,1\r\n");
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <ActivePdp+0x5c>)
 8000b98:	003b      	movs	r3, r7
 8000b9a:	469c      	mov	ip, r3
 8000b9c:	0010      	movs	r0, r2
 8000b9e:	f000 f813 	bl	8000bc8 <sendCommandAndWait.5>

    // Verificar se um endereço IP foi atribuído
    sendCommandAndWait("AT+CGPADDR=1\r\n");
 8000ba2:	4a08      	ldr	r2, [pc, #32]	@ (8000bc4 <ActivePdp+0x60>)
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	469c      	mov	ip, r3
 8000ba8:	0010      	movs	r0, r2
 8000baa:	f000 f80d 	bl	8000bc8 <sendCommandAndWait.5>
}
 8000bae:	46c0      	nop			@ (mov r8, r8)
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	b042      	add	sp, #264	@ 0x108
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	46c0      	nop			@ (mov r8, r8)
 8000bb8:	fffffef8 	.word	0xfffffef8
 8000bbc:	08006080 	.word	0x08006080
 8000bc0:	08005ef4 	.word	0x08005ef4
 8000bc4:	08005f04 	.word	0x08005f04

08000bc8 <sendCommandAndWait.5>:
    void sendCommandAndWait(char *command) {
 8000bc8:	b590      	push	{r4, r7, lr}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
 8000bd0:	4664      	mov	r4, ip
 8000bd2:	4663      	mov	r3, ip
 8000bd4:	603b      	str	r3, [r7, #0]
        for (int attempt = 0; attempt < retries; attempt++) {
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	e020      	b.n	8000c1e <sendCommandAndWait.5+0x56>
            sendATCommand(command);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	0018      	movs	r0, r3
 8000be0:	f7ff fcaa 	bl	8000538 <sendATCommand>
            HAL_UART_Receive(&huart2, (uint8_t *)response, sizeof(response), HAL_MAX_DELAY);
 8000be4:	1d21      	adds	r1, r4, #4
 8000be6:	2301      	movs	r3, #1
 8000be8:	425b      	negs	r3, r3
 8000bea:	2280      	movs	r2, #128	@ 0x80
 8000bec:	0052      	lsls	r2, r2, #1
 8000bee:	4810      	ldr	r0, [pc, #64]	@ (8000c30 <sendCommandAndWait.5+0x68>)
 8000bf0:	f002 f82e 	bl	8002c50 <HAL_UART_Receive>
            if (checkResponse(response)) {
 8000bf4:	1d23      	adds	r3, r4, #4
 8000bf6:	46a4      	mov	ip, r4
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f7ff ff91 	bl	8000b20 <checkResponse.6>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d006      	beq.n	8000c10 <sendCommandAndWait.5+0x48>
                printf("Resposta recebida: %s\n", response);
 8000c02:	1d22      	adds	r2, r4, #4
 8000c04:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <sendCommandAndWait.5+0x6c>)
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f003 f93b 	bl	8003e84 <iprintf>
                break; // Saímos do loop se a resposta for válida
 8000c0e:	e00b      	b.n	8000c28 <sendCommandAndWait.5+0x60>
                printf("Resposta inválida, reenviando comando...\n");
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <sendCommandAndWait.5+0x70>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f003 f99c 	bl	8003f50 <puts>
        for (int attempt = 0; attempt < retries; attempt++) {
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	429a      	cmp	r2, r3
 8000c24:	dbda      	blt.n	8000bdc <sendCommandAndWait.5+0x14>
    }
 8000c26:	46c0      	nop			@ (mov r8, r8)
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	b005      	add	sp, #20
 8000c2e:	bd90      	pop	{r4, r7, pc}
 8000c30:	200000ac 	.word	0x200000ac
 8000c34:	08005f80 	.word	0x08005f80
 8000c38:	08005f98 	.word	0x08005f98

08000c3c <checkResponse.8>:
void MqttConnectAndSubscribe() {
    char response[256];
    int retries = 5; // Número máximo de tentativas

    // Função auxiliar para verificar a resposta
    int checkResponse(const char *response) {
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
 8000c44:	4663      	mov	r3, ip
 8000c46:	603b      	str	r3, [r7, #0]
        // Verifica se a resposta contém "+" ou "OK" (case-insensitive)
        return (strcasestr(response, "+") != NULL || strcasestr(response, "OK") != NULL);
 8000c48:	4a0b      	ldr	r2, [pc, #44]	@ (8000c78 <checkResponse.8+0x3c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	0011      	movs	r1, r2
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f003 fafe 	bl	8004250 <strcasestr>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d107      	bne.n	8000c68 <checkResponse.8+0x2c>
 8000c58:	4a08      	ldr	r2, [pc, #32]	@ (8000c7c <checkResponse.8+0x40>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f003 faf6 	bl	8004250 <strcasestr>
 8000c64:	1e03      	subs	r3, r0, #0
 8000c66:	d001      	beq.n	8000c6c <checkResponse.8+0x30>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e000      	b.n	8000c6e <checkResponse.8+0x32>
 8000c6c:	2300      	movs	r3, #0
    }
 8000c6e:	0018      	movs	r0, r3
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	08005ec0 	.word	0x08005ec0
 8000c7c:	08005b14 	.word	0x08005b14

08000c80 <MqttConnectAndSubscribe>:
void MqttConnectAndSubscribe() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0c2      	sub	sp, #264	@ 0x108
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	2388      	movs	r3, #136	@ 0x88
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	18fb      	adds	r3, r7, r3
 8000c8c:	4a11      	ldr	r2, [pc, #68]	@ (8000cd4 <MqttConnectAndSubscribe+0x54>)
 8000c8e:	2084      	movs	r0, #132	@ 0x84
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	1812      	adds	r2, r2, r0
 8000c94:	19d1      	adds	r1, r2, r7
 8000c96:	2282      	movs	r2, #130	@ 0x82
 8000c98:	0052      	lsls	r2, r2, #1
 8000c9a:	508b      	str	r3, [r1, r2]
    int retries = 5; // Número máximo de tentativas
 8000c9c:	2205      	movs	r2, #5
 8000c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000cd4 <MqttConnectAndSubscribe+0x54>)
 8000ca0:	181b      	adds	r3, r3, r0
 8000ca2:	19db      	adds	r3, r3, r7
 8000ca4:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Conectar ao broker MQTT
    sendCommandAndWait("AT+QMTOPEN=0,1883\r\n");
 8000ca6:	4a0c      	ldr	r2, [pc, #48]	@ (8000cd8 <MqttConnectAndSubscribe+0x58>)
 8000ca8:	003b      	movs	r3, r7
 8000caa:	469c      	mov	ip, r3
 8000cac:	0010      	movs	r0, r2
 8000cae:	f000 f819 	bl	8000ce4 <sendCommandAndWait.7>

    // Conectar ao broker MQTT com ID e credenciais
    sendCommandAndWait("AT+QMTCONN=0,\"1\",\"pixtest\",\"pixtest\"\r\n");
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	@ (8000cdc <MqttConnectAndSubscribe+0x5c>)
 8000cb4:	003b      	movs	r3, r7
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	0010      	movs	r0, r2
 8000cba:	f000 f813 	bl	8000ce4 <sendCommandAndWait.7>

    // Inscrever-se no tópico desejado
    sendCommandAndWait("AT+QMTSUB=0,\"pixtest\",1\r\n");
 8000cbe:	4a08      	ldr	r2, [pc, #32]	@ (8000ce0 <MqttConnectAndSubscribe+0x60>)
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	469c      	mov	ip, r3
 8000cc4:	0010      	movs	r0, r2
 8000cc6:	f000 f80d 	bl	8000ce4 <sendCommandAndWait.7>
}
 8000cca:	46c0      	nop			@ (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b042      	add	sp, #264	@ 0x108
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			@ (mov r8, r8)
 8000cd4:	fffffef8 	.word	0xfffffef8
 8000cd8:	08006090 	.word	0x08006090
 8000cdc:	080060a4 	.word	0x080060a4
 8000ce0:	080060cc 	.word	0x080060cc

08000ce4 <sendCommandAndWait.7>:
    void sendCommandAndWait(char *command) {
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	4664      	mov	r4, ip
 8000cee:	4663      	mov	r3, ip
 8000cf0:	603b      	str	r3, [r7, #0]
        for (int attempt = 0; attempt < retries; attempt++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	e020      	b.n	8000d3a <sendCommandAndWait.7+0x56>
            sendATCommand(command);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	0018      	movs	r0, r3
 8000cfc:	f7ff fc1c 	bl	8000538 <sendATCommand>
            HAL_UART_Receive(&huart2, (uint8_t *)response, sizeof(response), HAL_MAX_DELAY);
 8000d00:	1d21      	adds	r1, r4, #4
 8000d02:	2301      	movs	r3, #1
 8000d04:	425b      	negs	r3, r3
 8000d06:	2280      	movs	r2, #128	@ 0x80
 8000d08:	0052      	lsls	r2, r2, #1
 8000d0a:	4810      	ldr	r0, [pc, #64]	@ (8000d4c <sendCommandAndWait.7+0x68>)
 8000d0c:	f001 ffa0 	bl	8002c50 <HAL_UART_Receive>
            if (checkResponse(response)) {
 8000d10:	1d23      	adds	r3, r4, #4
 8000d12:	46a4      	mov	ip, r4
 8000d14:	0018      	movs	r0, r3
 8000d16:	f7ff ff91 	bl	8000c3c <checkResponse.8>
 8000d1a:	1e03      	subs	r3, r0, #0
 8000d1c:	d006      	beq.n	8000d2c <sendCommandAndWait.7+0x48>
                printf("Resposta recebida: %s\n", response);
 8000d1e:	1d22      	adds	r2, r4, #4
 8000d20:	4b0b      	ldr	r3, [pc, #44]	@ (8000d50 <sendCommandAndWait.7+0x6c>)
 8000d22:	0011      	movs	r1, r2
 8000d24:	0018      	movs	r0, r3
 8000d26:	f003 f8ad 	bl	8003e84 <iprintf>
                break; // Saímos do loop se a resposta for válida
 8000d2a:	e00b      	b.n	8000d44 <sendCommandAndWait.7+0x60>
                printf("Resposta inválida, reenviando comando...\n");
 8000d2c:	4b09      	ldr	r3, [pc, #36]	@ (8000d54 <sendCommandAndWait.7+0x70>)
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f003 f90e 	bl	8003f50 <puts>
        for (int attempt = 0; attempt < retries; attempt++) {
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3301      	adds	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	6823      	ldr	r3, [r4, #0]
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	dbda      	blt.n	8000cf8 <sendCommandAndWait.7+0x14>
    }
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46c0      	nop			@ (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b005      	add	sp, #20
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	200000ac 	.word	0x200000ac
 8000d50:	08005f80 	.word	0x08005f80
 8000d54:	08005f98 	.word	0x08005f98

08000d58 <checkResponse.10>:
void MqttConfigBeforeConnection() {
    char response[256];
    int retries = 5; // Número máximo de tentativas

    // Função auxiliar para verificar a resposta
    int checkResponse(const char *response) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
 8000d60:	4663      	mov	r3, ip
 8000d62:	603b      	str	r3, [r7, #0]
        // Verifica se a resposta contém "+" ou "OK" (case-insensitive)
        return (strcasestr(response, "+") != NULL || strcasestr(response, "OK") != NULL);
 8000d64:	4a0b      	ldr	r2, [pc, #44]	@ (8000d94 <checkResponse.10+0x3c>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	0011      	movs	r1, r2
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	f003 fa70 	bl	8004250 <strcasestr>
 8000d70:	1e03      	subs	r3, r0, #0
 8000d72:	d107      	bne.n	8000d84 <checkResponse.10+0x2c>
 8000d74:	4a08      	ldr	r2, [pc, #32]	@ (8000d98 <checkResponse.10+0x40>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	0011      	movs	r1, r2
 8000d7a:	0018      	movs	r0, r3
 8000d7c:	f003 fa68 	bl	8004250 <strcasestr>
 8000d80:	1e03      	subs	r3, r0, #0
 8000d82:	d001      	beq.n	8000d88 <checkResponse.10+0x30>
 8000d84:	2301      	movs	r3, #1
 8000d86:	e000      	b.n	8000d8a <checkResponse.10+0x32>
 8000d88:	2300      	movs	r3, #0
    }
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	b002      	add	sp, #8
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	08005ec0 	.word	0x08005ec0
 8000d98:	08005b14 	.word	0x08005b14

08000d9c <MqttConfigBeforeConnection>:
void MqttConfigBeforeConnection() {
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b0c2      	sub	sp, #264	@ 0x108
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	2388      	movs	r3, #136	@ 0x88
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	18fb      	adds	r3, r7, r3
 8000da8:	4a14      	ldr	r2, [pc, #80]	@ (8000dfc <MqttConfigBeforeConnection+0x60>)
 8000daa:	2084      	movs	r0, #132	@ 0x84
 8000dac:	0040      	lsls	r0, r0, #1
 8000dae:	1812      	adds	r2, r2, r0
 8000db0:	19d1      	adds	r1, r2, r7
 8000db2:	2282      	movs	r2, #130	@ 0x82
 8000db4:	0052      	lsls	r2, r2, #1
 8000db6:	508b      	str	r3, [r1, r2]
    int retries = 5; // Número máximo de tentativas
 8000db8:	2205      	movs	r2, #5
 8000dba:	4b10      	ldr	r3, [pc, #64]	@ (8000dfc <MqttConfigBeforeConnection+0x60>)
 8000dbc:	181b      	adds	r3, r3, r0
 8000dbe:	19db      	adds	r3, r3, r7
 8000dc0:	601a      	str	r2, [r3, #0]
            }
        }
    }

    // Verificar se o dispositivo está registrado na rede
    sendCommandAndWait("AT+CREG?\r\n");
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	@ (8000e00 <MqttConfigBeforeConnection+0x64>)
 8000dc4:	003b      	movs	r3, r7
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	0010      	movs	r0, r2
 8000dca:	f000 f821 	bl	8000e10 <sendCommandAndWait.9>

    // Verificar o status do contexto PDP
    sendCommandAndWait("AT+CGACT?\r\n");
 8000dce:	4a0d      	ldr	r2, [pc, #52]	@ (8000e04 <MqttConfigBeforeConnection+0x68>)
 8000dd0:	003b      	movs	r3, r7
 8000dd2:	469c      	mov	ip, r3
 8000dd4:	0010      	movs	r0, r2
 8000dd6:	f000 f81b 	bl	8000e10 <sendCommandAndWait.9>

    // Verificar a qualidade do sinal
    sendCommandAndWait("AT+CSQ\r\n");
 8000dda:	4a0b      	ldr	r2, [pc, #44]	@ (8000e08 <MqttConfigBeforeConnection+0x6c>)
 8000ddc:	003b      	movs	r3, r7
 8000dde:	469c      	mov	ip, r3
 8000de0:	0010      	movs	r0, r2
 8000de2:	f000 f815 	bl	8000e10 <sendCommandAndWait.9>

    // Configurar o contexto PDP para o canal MQTT
    sendCommandAndWait("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000de6:	4a09      	ldr	r2, [pc, #36]	@ (8000e0c <MqttConfigBeforeConnection+0x70>)
 8000de8:	003b      	movs	r3, r7
 8000dea:	469c      	mov	ip, r3
 8000dec:	0010      	movs	r0, r2
 8000dee:	f000 f80f 	bl	8000e10 <sendCommandAndWait.9>
}
 8000df2:	46c0      	nop			@ (mov r8, r8)
 8000df4:	46bd      	mov	sp, r7
 8000df6:	b042      	add	sp, #264	@ 0x108
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	fffffef8 	.word	0xfffffef8
 8000e00:	080060e8 	.word	0x080060e8
 8000e04:	080060f4 	.word	0x080060f4
 8000e08:	08006100 	.word	0x08006100
 8000e0c:	08005fe0 	.word	0x08005fe0

08000e10 <sendCommandAndWait.9>:
    void sendCommandAndWait(char *command) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
 8000e18:	4664      	mov	r4, ip
 8000e1a:	4663      	mov	r3, ip
 8000e1c:	603b      	str	r3, [r7, #0]
        for (int attempt = 0; attempt < retries; attempt++) {
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	e020      	b.n	8000e66 <sendCommandAndWait.9+0x56>
            sendATCommand(command);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	0018      	movs	r0, r3
 8000e28:	f7ff fb86 	bl	8000538 <sendATCommand>
            HAL_UART_Receive(&huart2, (uint8_t *)response, sizeof(response), HAL_MAX_DELAY);
 8000e2c:	1d21      	adds	r1, r4, #4
 8000e2e:	2301      	movs	r3, #1
 8000e30:	425b      	negs	r3, r3
 8000e32:	2280      	movs	r2, #128	@ 0x80
 8000e34:	0052      	lsls	r2, r2, #1
 8000e36:	4810      	ldr	r0, [pc, #64]	@ (8000e78 <sendCommandAndWait.9+0x68>)
 8000e38:	f001 ff0a 	bl	8002c50 <HAL_UART_Receive>
            if (checkResponse(response)) {
 8000e3c:	1d23      	adds	r3, r4, #4
 8000e3e:	46a4      	mov	ip, r4
 8000e40:	0018      	movs	r0, r3
 8000e42:	f7ff ff89 	bl	8000d58 <checkResponse.10>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d006      	beq.n	8000e58 <sendCommandAndWait.9+0x48>
                printf("Resposta recebida: %s\n", response);
 8000e4a:	1d22      	adds	r2, r4, #4
 8000e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e7c <sendCommandAndWait.9+0x6c>)
 8000e4e:	0011      	movs	r1, r2
 8000e50:	0018      	movs	r0, r3
 8000e52:	f003 f817 	bl	8003e84 <iprintf>
                break; // Saímos do loop se a resposta for válida
 8000e56:	e00b      	b.n	8000e70 <sendCommandAndWait.9+0x60>
                printf("Resposta inválida, reenviando comando...\n");
 8000e58:	4b09      	ldr	r3, [pc, #36]	@ (8000e80 <sendCommandAndWait.9+0x70>)
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f003 f878 	bl	8003f50 <puts>
        for (int attempt = 0; attempt < retries; attempt++) {
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	68fa      	ldr	r2, [r7, #12]
 8000e6a:	429a      	cmp	r2, r3
 8000e6c:	dbda      	blt.n	8000e24 <sendCommandAndWait.9+0x14>
    }
 8000e6e:	46c0      	nop			@ (mov r8, r8)
 8000e70:	46c0      	nop			@ (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	b005      	add	sp, #20
 8000e76:	bd90      	pop	{r4, r7, pc}
 8000e78:	200000ac 	.word	0x200000ac
 8000e7c:	08005f80 	.word	0x08005f80
 8000e80:	08005f98 	.word	0x08005f98

08000e84 <InitFlags>:
	}


}

void InitFlags() {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <InitFlags+0x30>)
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	2380      	movs	r3, #128	@ 0x80
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	401a      	ands	r2, r3
 8000e92:	2380      	movs	r3, #128	@ 0x80
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d106      	bne.n	8000ea8 <InitFlags+0x24>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8000e9a:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <InitFlags+0x30>)
 8000e9c:	4a06      	ldr	r2, [pc, #24]	@ (8000eb8 <InitFlags+0x34>)
 8000e9e:	619a      	str	r2, [r3, #24]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f000 fda3 	bl	80019ec <HAL_PWR_DisableWakeUpPin>
	} else {
		MX_RTC_Init();
	}

}
 8000ea6:	e001      	b.n	8000eac <InitFlags+0x28>
		MX_RTC_Init();
 8000ea8:	f7ff fa4c 	bl	8000344 <MX_RTC_Init>
}
 8000eac:	46c0      	nop			@ (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	46c0      	nop			@ (mov r8, r8)
 8000eb4:	40007000 	.word	0x40007000
 8000eb8:	00010100 	.word	0x00010100

08000ebc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec0:	b672      	cpsid	i
}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec4:	46c0      	nop			@ (mov r8, r8)
 8000ec6:	e7fd      	b.n	8000ec4 <Error_Handler+0x8>

08000ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4b13      	ldr	r3, [pc, #76]	@ (8000f1c <HAL_MspInit+0x54>)
 8000ed0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ed2:	4b12      	ldr	r3, [pc, #72]	@ (8000f1c <HAL_MspInit+0x54>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	641a      	str	r2, [r3, #64]	@ 0x40
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <HAL_MspInit+0x54>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ede:	2201      	movs	r2, #1
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f1c <HAL_MspInit+0x54>)
 8000ee8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000eea:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <HAL_MspInit+0x54>)
 8000eec:	2180      	movs	r1, #128	@ 0x80
 8000eee:	0549      	lsls	r1, r1, #21
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <HAL_MspInit+0x54>)
 8000ef6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ef8:	2380      	movs	r3, #128	@ 0x80
 8000efa:	055b      	lsls	r3, r3, #21
 8000efc:	4013      	ands	r3, r2
 8000efe:	603b      	str	r3, [r7, #0]
 8000f00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2004      	movs	r0, #4
 8000f08:	f000 faf8 	bl	80014fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000f0c:	2004      	movs	r0, #4
 8000f0e:	f000 fb0a 	bl	8001526 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f12:	46c0      	nop			@ (mov r8, r8)
 8000f14:	46bd      	mov	sp, r7
 8000f16:	b002      	add	sp, #8
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	46c0      	nop			@ (mov r8, r8)
 8000f1c:	40021000 	.word	0x40021000

08000f20 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000f20:	b590      	push	{r4, r7, lr}
 8000f22:	b08b      	sub	sp, #44	@ 0x2c
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	240c      	movs	r4, #12
 8000f2a:	193b      	adds	r3, r7, r4
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	231c      	movs	r3, #28
 8000f30:	001a      	movs	r2, r3
 8000f32:	2100      	movs	r1, #0
 8000f34:	f003 f960 	bl	80041f8 <memset>
  if(hrtc->Instance==RTC)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a19      	ldr	r2, [pc, #100]	@ (8000fa4 <HAL_RTC_MspInit+0x84>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d12b      	bne.n	8000f9a <HAL_RTC_MspInit+0x7a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	2240      	movs	r2, #64	@ 0x40
 8000f46:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	2280      	movs	r2, #128	@ 0x80
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	193b      	adds	r3, r7, r4
 8000f52:	0018      	movs	r0, r3
 8000f54:	f001 f8d2 	bl	80020fc <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	1e03      	subs	r3, r0, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f5c:	f7ff ffae 	bl	8000ebc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <HAL_RTC_MspInit+0x88>)
 8000f62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f64:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_RTC_MspInit+0x88>)
 8000f66:	2180      	movs	r1, #128	@ 0x80
 8000f68:	0209      	lsls	r1, r1, #8
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <HAL_RTC_MspInit+0x88>)
 8000f70:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f72:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa8 <HAL_RTC_MspInit+0x88>)
 8000f74:	2180      	movs	r1, #128	@ 0x80
 8000f76:	00c9      	lsls	r1, r1, #3
 8000f78:	430a      	orrs	r2, r1
 8000f7a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000fa8 <HAL_RTC_MspInit+0x88>)
 8000f7e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f80:	2380      	movs	r3, #128	@ 0x80
 8000f82:	00db      	lsls	r3, r3, #3
 8000f84:	4013      	ands	r3, r2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	2002      	movs	r0, #2
 8000f90:	f000 fab4 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000f94:	2002      	movs	r0, #2
 8000f96:	f000 fac6 	bl	8001526 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	b00b      	add	sp, #44	@ 0x2c
 8000fa0:	bd90      	pop	{r4, r7, pc}
 8000fa2:	46c0      	nop			@ (mov r8, r8)
 8000fa4:	40002800 	.word	0x40002800
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fac:	b590      	push	{r4, r7, lr}
 8000fae:	b08b      	sub	sp, #44	@ 0x2c
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	2414      	movs	r4, #20
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	0018      	movs	r0, r3
 8000fba:	2314      	movs	r3, #20
 8000fbc:	001a      	movs	r2, r3
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	f003 f91a 	bl	80041f8 <memset>
  if(huart->Instance==USART2)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4a1f      	ldr	r2, [pc, #124]	@ (8001048 <HAL_UART_MspInit+0x9c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d138      	bne.n	8001040 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fce:	4b1f      	ldr	r3, [pc, #124]	@ (800104c <HAL_UART_MspInit+0xa0>)
 8000fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800104c <HAL_UART_MspInit+0xa0>)
 8000fd4:	2180      	movs	r1, #128	@ 0x80
 8000fd6:	0289      	lsls	r1, r1, #10
 8000fd8:	430a      	orrs	r2, r1
 8000fda:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000fdc:	4b1b      	ldr	r3, [pc, #108]	@ (800104c <HAL_UART_MspInit+0xa0>)
 8000fde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000fe0:	2380      	movs	r3, #128	@ 0x80
 8000fe2:	029b      	lsls	r3, r3, #10
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fea:	4b18      	ldr	r3, [pc, #96]	@ (800104c <HAL_UART_MspInit+0xa0>)
 8000fec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000fee:	4b17      	ldr	r3, [pc, #92]	@ (800104c <HAL_UART_MspInit+0xa0>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	635a      	str	r2, [r3, #52]	@ 0x34
 8000ff6:	4b15      	ldr	r3, [pc, #84]	@ (800104c <HAL_UART_MspInit+0xa0>)
 8000ff8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001002:	0021      	movs	r1, r4
 8001004:	187b      	adds	r3, r7, r1
 8001006:	220c      	movs	r2, #12
 8001008:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100a:	187b      	adds	r3, r7, r1
 800100c:	2202      	movs	r2, #2
 800100e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	187b      	adds	r3, r7, r1
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001016:	187b      	adds	r3, r7, r1
 8001018:	2200      	movs	r2, #0
 800101a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800101c:	187b      	adds	r3, r7, r1
 800101e:	2201      	movs	r2, #1
 8001020:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	187a      	adds	r2, r7, r1
 8001024:	23a0      	movs	r3, #160	@ 0xa0
 8001026:	05db      	lsls	r3, r3, #23
 8001028:	0011      	movs	r1, r2
 800102a:	0018      	movs	r0, r3
 800102c:	f000 fb74 	bl	8001718 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001030:	2200      	movs	r2, #0
 8001032:	2100      	movs	r1, #0
 8001034:	201c      	movs	r0, #28
 8001036:	f000 fa61 	bl	80014fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800103a:	201c      	movs	r0, #28
 800103c:	f000 fa73 	bl	8001526 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b00b      	add	sp, #44	@ 0x2c
 8001046:	bd90      	pop	{r4, r7, pc}
 8001048:	40004400 	.word	0x40004400
 800104c:	40021000 	.word	0x40021000

08001050 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	e7fd      	b.n	8001054 <NMI_Handler+0x4>

08001058 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	e7fd      	b.n	800105c <HardFault_Handler+0x4>

08001060 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001064:	46c0      	nop			@ (mov r8, r8)
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	46c0      	nop			@ (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001078:	f000 f954 	bl	8001324 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107c:	46c0      	nop			@ (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupts through EXTI lines 19 and 21.
  */
void RTC_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001088:	4b03      	ldr	r3, [pc, #12]	@ (8001098 <RTC_IRQHandler+0x14>)
 800108a:	0018      	movs	r0, r3
 800108c:	f001 fbd6 	bl	800283c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001090:	46c0      	nop			@ (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	46c0      	nop			@ (mov r8, r8)
 8001098:	20000084 	.word	0x20000084

0800109c <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80010a0:	46c0      	nop			@ (mov r8, r8)
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80010ac:	4b03      	ldr	r3, [pc, #12]	@ (80010bc <USART2_IRQHandler+0x14>)
 80010ae:	0018      	movs	r0, r3
 80010b0:	f001 feb4 	bl	8002e1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010b4:	46c0      	nop			@ (mov r8, r8)
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	46c0      	nop			@ (mov r8, r8)
 80010bc:	200000ac 	.word	0x200000ac

080010c0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
 80010d0:	e00a      	b.n	80010e8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010d2:	e000      	b.n	80010d6 <_read+0x16>
 80010d4:	bf00      	nop
 80010d6:	0001      	movs	r1, r0
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	1c5a      	adds	r2, r3, #1
 80010dc:	60ba      	str	r2, [r7, #8]
 80010de:	b2ca      	uxtb	r2, r1
 80010e0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	3301      	adds	r3, #1
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	dbf0      	blt.n	80010d2 <_read+0x12>
  }

  return len;
 80010f0:	687b      	ldr	r3, [r7, #4]
}
 80010f2:	0018      	movs	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	b006      	add	sp, #24
 80010f8:	bd80      	pop	{r7, pc}

080010fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	60f8      	str	r0, [r7, #12]
 8001102:	60b9      	str	r1, [r7, #8]
 8001104:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
 800110a:	e009      	b.n	8001120 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	1c5a      	adds	r2, r3, #1
 8001110:	60ba      	str	r2, [r7, #8]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	0018      	movs	r0, r3
 8001116:	e000      	b.n	800111a <_write+0x20>
 8001118:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3301      	adds	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697a      	ldr	r2, [r7, #20]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	429a      	cmp	r2, r3
 8001126:	dbf1      	blt.n	800110c <_write+0x12>
  }
  return len;
 8001128:	687b      	ldr	r3, [r7, #4]
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b006      	add	sp, #24
 8001130:	bd80      	pop	{r7, pc}

08001132 <_close>:

int _close(int file)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800113a:	2301      	movs	r3, #1
 800113c:	425b      	negs	r3, r3
}
 800113e:	0018      	movs	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	b002      	add	sp, #8
 8001144:	bd80      	pop	{r7, pc}

08001146 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
 800114e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2280      	movs	r2, #128	@ 0x80
 8001154:	0192      	lsls	r2, r2, #6
 8001156:	605a      	str	r2, [r3, #4]
  return 0;
 8001158:	2300      	movs	r3, #0
}
 800115a:	0018      	movs	r0, r3
 800115c:	46bd      	mov	sp, r7
 800115e:	b002      	add	sp, #8
 8001160:	bd80      	pop	{r7, pc}

08001162 <_isatty>:

int _isatty(int file)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	0018      	movs	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	b002      	add	sp, #8
 8001172:	bd80      	pop	{r7, pc}

08001174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001180:	2300      	movs	r3, #0
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001194:	4a14      	ldr	r2, [pc, #80]	@ (80011e8 <_sbrk+0x5c>)
 8001196:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <_sbrk+0x60>)
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a0:	4b13      	ldr	r3, [pc, #76]	@ (80011f0 <_sbrk+0x64>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d102      	bne.n	80011ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011a8:	4b11      	ldr	r3, [pc, #68]	@ (80011f0 <_sbrk+0x64>)
 80011aa:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <_sbrk+0x68>)
 80011ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <_sbrk+0x64>)
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	18d3      	adds	r3, r2, r3
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d207      	bcs.n	80011cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011bc:	f003 f8cc 	bl	8004358 <__errno>
 80011c0:	0003      	movs	r3, r0
 80011c2:	220c      	movs	r2, #12
 80011c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011c6:	2301      	movs	r3, #1
 80011c8:	425b      	negs	r3, r3
 80011ca:	e009      	b.n	80011e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011cc:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <_sbrk+0x64>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	18d2      	adds	r2, r2, r3
 80011da:	4b05      	ldr	r3, [pc, #20]	@ (80011f0 <_sbrk+0x64>)
 80011dc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	0018      	movs	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	b006      	add	sp, #24
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20001800 	.word	0x20001800
 80011ec:	00000400 	.word	0x00000400
 80011f0:	20000140 	.word	0x20000140
 80011f4:	20000298 	.word	0x20000298

080011f8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011fc:	4b03      	ldr	r3, [pc, #12]	@ (800120c <SystemInit+0x14>)
 80011fe:	2280      	movs	r2, #128	@ 0x80
 8001200:	0512      	lsls	r2, r2, #20
 8001202:	609a      	str	r2, [r3, #8]
#endif
}
 8001204:	46c0      	nop			@ (mov r8, r8)
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			@ (mov r8, r8)
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001210:	480d      	ldr	r0, [pc, #52]	@ (8001248 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001212:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001214:	f7ff fff0 	bl	80011f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001218:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800121a:	e003      	b.n	8001224 <LoopCopyDataInit>

0800121c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800121c:	4b0b      	ldr	r3, [pc, #44]	@ (800124c <LoopForever+0x6>)
  ldr r3, [r3, r1]
 800121e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001220:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001222:	3104      	adds	r1, #4

08001224 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001224:	480a      	ldr	r0, [pc, #40]	@ (8001250 <LoopForever+0xa>)
  ldr r3, =_edata
 8001226:	4b0b      	ldr	r3, [pc, #44]	@ (8001254 <LoopForever+0xe>)
  adds r2, r0, r1
 8001228:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800122a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800122c:	d3f6      	bcc.n	800121c <CopyDataInit>
  ldr r2, =_sbss
 800122e:	4a0a      	ldr	r2, [pc, #40]	@ (8001258 <LoopForever+0x12>)
  b LoopFillZerobss
 8001230:	e002      	b.n	8001238 <LoopFillZerobss>

08001232 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  str  r3, [r2]
 8001234:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001236:	3204      	adds	r2, #4

08001238 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001238:	4b08      	ldr	r3, [pc, #32]	@ (800125c <LoopForever+0x16>)
  cmp r2, r3
 800123a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800123c:	d3f9      	bcc.n	8001232 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800123e:	f003 f891 	bl	8004364 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001242:	f7fe ffff 	bl	8000244 <main>

08001246 <LoopForever>:

LoopForever:
    b LoopForever
 8001246:	e7fe      	b.n	8001246 <LoopForever>
  ldr   r0, =_estack
 8001248:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 800124c:	08006308 	.word	0x08006308
  ldr r0, =_sdata
 8001250:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001254:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8001258:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 800125c:	20000294 	.word	0x20000294

08001260 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001260:	e7fe      	b.n	8001260 <ADC1_IRQHandler>

08001262 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	b082      	sub	sp, #8
 8001266:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001268:	1dfb      	adds	r3, r7, #7
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126e:	2003      	movs	r0, #3
 8001270:	f000 f80e 	bl	8001290 <HAL_InitTick>
 8001274:	1e03      	subs	r3, r0, #0
 8001276:	d003      	beq.n	8001280 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001278:	1dfb      	adds	r3, r7, #7
 800127a:	2201      	movs	r2, #1
 800127c:	701a      	strb	r2, [r3, #0]
 800127e:	e001      	b.n	8001284 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001280:	f7ff fe22 	bl	8000ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001284:	1dfb      	adds	r3, r7, #7
 8001286:	781b      	ldrb	r3, [r3, #0]
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b002      	add	sp, #8
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b590      	push	{r4, r7, lr}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001298:	230f      	movs	r3, #15
 800129a:	18fb      	adds	r3, r7, r3
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80012a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001318 <HAL_InitTick+0x88>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d02b      	beq.n	8001300 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80012a8:	4b1c      	ldr	r3, [pc, #112]	@ (800131c <HAL_InitTick+0x8c>)
 80012aa:	681c      	ldr	r4, [r3, #0]
 80012ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <HAL_InitTick+0x88>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	0019      	movs	r1, r3
 80012b2:	23fa      	movs	r3, #250	@ 0xfa
 80012b4:	0098      	lsls	r0, r3, #2
 80012b6:	f7fe ff39 	bl	800012c <__udivsi3>
 80012ba:	0003      	movs	r3, r0
 80012bc:	0019      	movs	r1, r3
 80012be:	0020      	movs	r0, r4
 80012c0:	f7fe ff34 	bl	800012c <__udivsi3>
 80012c4:	0003      	movs	r3, r0
 80012c6:	0018      	movs	r0, r3
 80012c8:	f000 f93d 	bl	8001546 <HAL_SYSTICK_Config>
 80012cc:	1e03      	subs	r3, r0, #0
 80012ce:	d112      	bne.n	80012f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b03      	cmp	r3, #3
 80012d4:	d80a      	bhi.n	80012ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d6:	6879      	ldr	r1, [r7, #4]
 80012d8:	2301      	movs	r3, #1
 80012da:	425b      	negs	r3, r3
 80012dc:	2200      	movs	r2, #0
 80012de:	0018      	movs	r0, r3
 80012e0:	f000 f90c 	bl	80014fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e4:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_InitTick+0x90>)
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	e00d      	b.n	8001308 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80012ec:	230f      	movs	r3, #15
 80012ee:	18fb      	adds	r3, r7, r3
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
 80012f4:	e008      	b.n	8001308 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012f6:	230f      	movs	r3, #15
 80012f8:	18fb      	adds	r3, r7, r3
 80012fa:	2201      	movs	r2, #1
 80012fc:	701a      	strb	r2, [r3, #0]
 80012fe:	e003      	b.n	8001308 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001300:	230f      	movs	r3, #15
 8001302:	18fb      	adds	r3, r7, r3
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001308:	230f      	movs	r3, #15
 800130a:	18fb      	adds	r3, r7, r3
 800130c:	781b      	ldrb	r3, [r3, #0]
}
 800130e:	0018      	movs	r0, r3
 8001310:	46bd      	mov	sp, r7
 8001312:	b005      	add	sp, #20
 8001314:	bd90      	pop	{r4, r7, pc}
 8001316:	46c0      	nop			@ (mov r8, r8)
 8001318:	20000008 	.word	0x20000008
 800131c:	20000000 	.word	0x20000000
 8001320:	20000004 	.word	0x20000004

08001324 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_IncTick+0x1c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	001a      	movs	r2, r3
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <HAL_IncTick+0x20>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	18d2      	adds	r2, r2, r3
 8001334:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <HAL_IncTick+0x20>)
 8001336:	601a      	str	r2, [r3, #0]
}
 8001338:	46c0      	nop			@ (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	20000008 	.word	0x20000008
 8001344:	20000144 	.word	0x20000144

08001348 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  return uwTick;
 800134c:	4b02      	ldr	r3, [pc, #8]	@ (8001358 <HAL_GetTick+0x10>)
 800134e:	681b      	ldr	r3, [r3, #0]
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			@ (mov r8, r8)
 8001358:	20000144 	.word	0x20000144

0800135c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b084      	sub	sp, #16
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff fff0 	bl	8001348 <HAL_GetTick>
 8001368:	0003      	movs	r3, r0
 800136a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	3301      	adds	r3, #1
 8001374:	d005      	beq.n	8001382 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001376:	4b0a      	ldr	r3, [pc, #40]	@ (80013a0 <HAL_Delay+0x44>)
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	001a      	movs	r2, r3
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	189b      	adds	r3, r3, r2
 8001380:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001382:	46c0      	nop			@ (mov r8, r8)
 8001384:	f7ff ffe0 	bl	8001348 <HAL_GetTick>
 8001388:	0002      	movs	r2, r0
 800138a:	68bb      	ldr	r3, [r7, #8]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	68fa      	ldr	r2, [r7, #12]
 8001390:	429a      	cmp	r2, r3
 8001392:	d8f7      	bhi.n	8001384 <HAL_Delay+0x28>
  {
  }
}
 8001394:	46c0      	nop			@ (mov r8, r8)
 8001396:	46c0      	nop			@ (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b004      	add	sp, #16
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			@ (mov r8, r8)
 80013a0:	20000008 	.word	0x20000008

080013a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	0002      	movs	r2, r0
 80013ac:	1dfb      	adds	r3, r7, #7
 80013ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80013b6:	d809      	bhi.n	80013cc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	001a      	movs	r2, r3
 80013be:	231f      	movs	r3, #31
 80013c0:	401a      	ands	r2, r3
 80013c2:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <__NVIC_EnableIRQ+0x30>)
 80013c4:	2101      	movs	r1, #1
 80013c6:	4091      	lsls	r1, r2
 80013c8:	000a      	movs	r2, r1
 80013ca:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80013cc:	46c0      	nop			@ (mov r8, r8)
 80013ce:	46bd      	mov	sp, r7
 80013d0:	b002      	add	sp, #8
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b590      	push	{r4, r7, lr}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	0002      	movs	r2, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80013ec:	d828      	bhi.n	8001440 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013ee:	4a2f      	ldr	r2, [pc, #188]	@ (80014ac <__NVIC_SetPriority+0xd4>)
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	b25b      	sxtb	r3, r3
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	33c0      	adds	r3, #192	@ 0xc0
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	589b      	ldr	r3, [r3, r2]
 80013fe:	1dfa      	adds	r2, r7, #7
 8001400:	7812      	ldrb	r2, [r2, #0]
 8001402:	0011      	movs	r1, r2
 8001404:	2203      	movs	r2, #3
 8001406:	400a      	ands	r2, r1
 8001408:	00d2      	lsls	r2, r2, #3
 800140a:	21ff      	movs	r1, #255	@ 0xff
 800140c:	4091      	lsls	r1, r2
 800140e:	000a      	movs	r2, r1
 8001410:	43d2      	mvns	r2, r2
 8001412:	401a      	ands	r2, r3
 8001414:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	019b      	lsls	r3, r3, #6
 800141a:	22ff      	movs	r2, #255	@ 0xff
 800141c:	401a      	ands	r2, r3
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	0018      	movs	r0, r3
 8001424:	2303      	movs	r3, #3
 8001426:	4003      	ands	r3, r0
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800142c:	481f      	ldr	r0, [pc, #124]	@ (80014ac <__NVIC_SetPriority+0xd4>)
 800142e:	1dfb      	adds	r3, r7, #7
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	b25b      	sxtb	r3, r3
 8001434:	089b      	lsrs	r3, r3, #2
 8001436:	430a      	orrs	r2, r1
 8001438:	33c0      	adds	r3, #192	@ 0xc0
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800143e:	e031      	b.n	80014a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001440:	4a1b      	ldr	r2, [pc, #108]	@ (80014b0 <__NVIC_SetPriority+0xd8>)
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	0019      	movs	r1, r3
 8001448:	230f      	movs	r3, #15
 800144a:	400b      	ands	r3, r1
 800144c:	3b08      	subs	r3, #8
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	3306      	adds	r3, #6
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	18d3      	adds	r3, r2, r3
 8001456:	3304      	adds	r3, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	1dfa      	adds	r2, r7, #7
 800145c:	7812      	ldrb	r2, [r2, #0]
 800145e:	0011      	movs	r1, r2
 8001460:	2203      	movs	r2, #3
 8001462:	400a      	ands	r2, r1
 8001464:	00d2      	lsls	r2, r2, #3
 8001466:	21ff      	movs	r1, #255	@ 0xff
 8001468:	4091      	lsls	r1, r2
 800146a:	000a      	movs	r2, r1
 800146c:	43d2      	mvns	r2, r2
 800146e:	401a      	ands	r2, r3
 8001470:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	019b      	lsls	r3, r3, #6
 8001476:	22ff      	movs	r2, #255	@ 0xff
 8001478:	401a      	ands	r2, r3
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	0018      	movs	r0, r3
 8001480:	2303      	movs	r3, #3
 8001482:	4003      	ands	r3, r0
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001488:	4809      	ldr	r0, [pc, #36]	@ (80014b0 <__NVIC_SetPriority+0xd8>)
 800148a:	1dfb      	adds	r3, r7, #7
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	001c      	movs	r4, r3
 8001490:	230f      	movs	r3, #15
 8001492:	4023      	ands	r3, r4
 8001494:	3b08      	subs	r3, #8
 8001496:	089b      	lsrs	r3, r3, #2
 8001498:	430a      	orrs	r2, r1
 800149a:	3306      	adds	r3, #6
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	18c3      	adds	r3, r0, r3
 80014a0:	3304      	adds	r3, #4
 80014a2:	601a      	str	r2, [r3, #0]
}
 80014a4:	46c0      	nop			@ (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b003      	add	sp, #12
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	e000e100 	.word	0xe000e100
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	1e5a      	subs	r2, r3, #1
 80014c0:	2380      	movs	r3, #128	@ 0x80
 80014c2:	045b      	lsls	r3, r3, #17
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d301      	bcc.n	80014cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c8:	2301      	movs	r3, #1
 80014ca:	e010      	b.n	80014ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014cc:	4b0a      	ldr	r3, [pc, #40]	@ (80014f8 <SysTick_Config+0x44>)
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	3a01      	subs	r2, #1
 80014d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d4:	2301      	movs	r3, #1
 80014d6:	425b      	negs	r3, r3
 80014d8:	2103      	movs	r1, #3
 80014da:	0018      	movs	r0, r3
 80014dc:	f7ff ff7c 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e0:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <SysTick_Config+0x44>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e6:	4b04      	ldr	r3, [pc, #16]	@ (80014f8 <SysTick_Config+0x44>)
 80014e8:	2207      	movs	r2, #7
 80014ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014ec:	2300      	movs	r3, #0
}
 80014ee:	0018      	movs	r0, r3
 80014f0:	46bd      	mov	sp, r7
 80014f2:	b002      	add	sp, #8
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	46c0      	nop			@ (mov r8, r8)
 80014f8:	e000e010 	.word	0xe000e010

080014fc <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	210f      	movs	r1, #15
 8001508:	187b      	adds	r3, r7, r1
 800150a:	1c02      	adds	r2, r0, #0
 800150c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	187b      	adds	r3, r7, r1
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	b25b      	sxtb	r3, r3
 8001516:	0011      	movs	r1, r2
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff ff5d 	bl	80013d8 <__NVIC_SetPriority>
}
 800151e:	46c0      	nop			@ (mov r8, r8)
 8001520:	46bd      	mov	sp, r7
 8001522:	b004      	add	sp, #16
 8001524:	bd80      	pop	{r7, pc}

08001526 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001526:	b580      	push	{r7, lr}
 8001528:	b082      	sub	sp, #8
 800152a:	af00      	add	r7, sp, #0
 800152c:	0002      	movs	r2, r0
 800152e:	1dfb      	adds	r3, r7, #7
 8001530:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001532:	1dfb      	adds	r3, r7, #7
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b25b      	sxtb	r3, r3
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff ff33 	bl	80013a4 <__NVIC_EnableIRQ>
}
 800153e:	46c0      	nop			@ (mov r8, r8)
 8001540:	46bd      	mov	sp, r7
 8001542:	b002      	add	sp, #8
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0018      	movs	r0, r3
 8001552:	f7ff ffaf 	bl	80014b4 <SysTick_Config>
 8001556:	0003      	movs	r3, r0
}
 8001558:	0018      	movs	r0, r3
 800155a:	46bd      	mov	sp, r7
 800155c:	b002      	add	sp, #8
 800155e:	bd80      	pop	{r7, pc}

08001560 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2b00      	cmp	r3, #0
 800156c:	d101      	bne.n	8001572 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	e050      	b.n	8001614 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2225      	movs	r2, #37	@ 0x25
 8001576:	5c9b      	ldrb	r3, [r3, r2]
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b02      	cmp	r3, #2
 800157c:	d008      	beq.n	8001590 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2204      	movs	r2, #4
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2224      	movs	r2, #36	@ 0x24
 8001588:	2100      	movs	r1, #0
 800158a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e041      	b.n	8001614 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	210e      	movs	r1, #14
 800159c:	438a      	bics	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015aa:	491c      	ldr	r1, [pc, #112]	@ (800161c <HAL_DMA_Abort+0xbc>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	438a      	bics	r2, r1
 80015be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80015c0:	4b17      	ldr	r3, [pc, #92]	@ (8001620 <HAL_DMA_Abort+0xc0>)
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c8:	221c      	movs	r2, #28
 80015ca:	4013      	ands	r3, r2
 80015cc:	2201      	movs	r2, #1
 80015ce:	409a      	lsls	r2, r3
 80015d0:	4b13      	ldr	r3, [pc, #76]	@ (8001620 <HAL_DMA_Abort+0xc0>)
 80015d2:	430a      	orrs	r2, r1
 80015d4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015da:	687a      	ldr	r2, [r7, #4]
 80015dc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80015de:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d00c      	beq.n	8001602 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	490a      	ldr	r1, [pc, #40]	@ (800161c <HAL_DMA_Abort+0xbc>)
 80015f4:	400a      	ands	r2, r1
 80015f6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001600:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2225      	movs	r2, #37	@ 0x25
 8001606:	2101      	movs	r1, #1
 8001608:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2224      	movs	r2, #36	@ 0x24
 800160e:	2100      	movs	r1, #0
 8001610:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001612:	2300      	movs	r3, #0
}
 8001614:	0018      	movs	r0, r3
 8001616:	46bd      	mov	sp, r7
 8001618:	b002      	add	sp, #8
 800161a:	bd80      	pop	{r7, pc}
 800161c:	fffffeff 	.word	0xfffffeff
 8001620:	40020000 	.word	0x40020000

08001624 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162c:	230f      	movs	r3, #15
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2224      	movs	r2, #36	@ 0x24
 8001638:	2100      	movs	r1, #0
 800163a:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2224      	movs	r2, #36	@ 0x24
 8001640:	5c9b      	ldrb	r3, [r3, r2]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <HAL_DMA_Abort_IT+0x26>
 8001646:	2302      	movs	r3, #2
 8001648:	e05e      	b.n	8001708 <HAL_DMA_Abort_IT+0xe4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2224      	movs	r2, #36	@ 0x24
 800164e:	2101      	movs	r1, #1
 8001650:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2225      	movs	r2, #37	@ 0x25
 8001656:	5c9b      	ldrb	r3, [r3, r2]
 8001658:	b2db      	uxtb	r3, r3
 800165a:	2b02      	cmp	r3, #2
 800165c:	d007      	beq.n	800166e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2204      	movs	r2, #4
 8001662:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001664:	230f      	movs	r3, #15
 8001666:	18fb      	adds	r3, r7, r3
 8001668:	2201      	movs	r2, #1
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e049      	b.n	8001702 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	210e      	movs	r1, #14
 800167a:	438a      	bics	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	438a      	bics	r2, r1
 800168c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001698:	491d      	ldr	r1, [pc, #116]	@ (8001710 <HAL_DMA_Abort_IT+0xec>)
 800169a:	400a      	ands	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800169e:	4b1d      	ldr	r3, [pc, #116]	@ (8001714 <HAL_DMA_Abort_IT+0xf0>)
 80016a0:	6859      	ldr	r1, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a6:	221c      	movs	r2, #28
 80016a8:	4013      	ands	r3, r2
 80016aa:	2201      	movs	r2, #1
 80016ac:	409a      	lsls	r2, r3
 80016ae:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_DMA_Abort_IT+0xf0>)
 80016b0:	430a      	orrs	r2, r1
 80016b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80016bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d00c      	beq.n	80016e0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80016d0:	490f      	ldr	r1, [pc, #60]	@ (8001710 <HAL_DMA_Abort_IT+0xec>)
 80016d2:	400a      	ands	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80016de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2225      	movs	r2, #37	@ 0x25
 80016e4:	2101      	movs	r1, #1
 80016e6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2224      	movs	r2, #36	@ 0x24
 80016ec:	2100      	movs	r1, #0
 80016ee:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d004      	beq.n	8001702 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	0010      	movs	r0, r2
 8001700:	4798      	blx	r3
    }
  }
  return status;
 8001702:	230f      	movs	r3, #15
 8001704:	18fb      	adds	r3, r7, r3
 8001706:	781b      	ldrb	r3, [r3, #0]
}
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b004      	add	sp, #16
 800170e:	bd80      	pop	{r7, pc}
 8001710:	fffffeff 	.word	0xfffffeff
 8001714:	40020000 	.word	0x40020000

08001718 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001726:	e14d      	b.n	80019c4 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2101      	movs	r1, #1
 800172e:	693a      	ldr	r2, [r7, #16]
 8001730:	4091      	lsls	r1, r2
 8001732:	000a      	movs	r2, r1
 8001734:	4013      	ands	r3, r2
 8001736:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d100      	bne.n	8001740 <HAL_GPIO_Init+0x28>
 800173e:	e13e      	b.n	80019be <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d003      	beq.n	8001750 <HAL_GPIO_Init+0x38>
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b12      	cmp	r3, #18
 800174e:	d125      	bne.n	800179c <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	08da      	lsrs	r2, r3, #3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	3208      	adds	r2, #8
 8001758:	0092      	lsls	r2, r2, #2
 800175a:	58d3      	ldr	r3, [r2, r3]
 800175c:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	2207      	movs	r2, #7
 8001762:	4013      	ands	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	220f      	movs	r2, #15
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	43da      	mvns	r2, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4013      	ands	r3, r2
 8001772:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	691b      	ldr	r3, [r3, #16]
 8001778:	220f      	movs	r2, #15
 800177a:	401a      	ands	r2, r3
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2107      	movs	r1, #7
 8001780:	400b      	ands	r3, r1
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	409a      	lsls	r2, r3
 8001786:	0013      	movs	r3, r2
 8001788:	697a      	ldr	r2, [r7, #20]
 800178a:	4313      	orrs	r3, r2
 800178c:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	0092      	lsls	r2, r2, #2
 8001798:	6979      	ldr	r1, [r7, #20]
 800179a:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	409a      	lsls	r2, r3
 80017aa:	0013      	movs	r3, r2
 80017ac:	43da      	mvns	r2, r3
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	4013      	ands	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2203      	movs	r2, #3
 80017ba:	401a      	ands	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	409a      	lsls	r2, r3
 80017c2:	0013      	movs	r3, r2
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d00b      	beq.n	80017f0 <HAL_GPIO_Init+0xd8>
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d007      	beq.n	80017f0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017e4:	2b11      	cmp	r3, #17
 80017e6:	d003      	beq.n	80017f0 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b12      	cmp	r3, #18
 80017ee:	d130      	bne.n	8001852 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	2203      	movs	r2, #3
 80017fc:	409a      	lsls	r2, r3
 80017fe:	0013      	movs	r3, r2
 8001800:	43da      	mvns	r2, r3
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	4013      	ands	r3, r2
 8001806:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	68da      	ldr	r2, [r3, #12]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	409a      	lsls	r2, r3
 8001812:	0013      	movs	r3, r2
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	4313      	orrs	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001826:	2201      	movs	r2, #1
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	409a      	lsls	r2, r3
 800182c:	0013      	movs	r3, r2
 800182e:	43da      	mvns	r2, r3
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	4013      	ands	r3, r2
 8001834:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	091b      	lsrs	r3, r3, #4
 800183c:	2201      	movs	r2, #1
 800183e:	401a      	ands	r2, r3
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	409a      	lsls	r2, r3
 8001844:	0013      	movs	r3, r2
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4313      	orrs	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	697a      	ldr	r2, [r7, #20]
 8001850:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d017      	beq.n	800188a <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	2203      	movs	r2, #3
 8001866:	409a      	lsls	r2, r3
 8001868:	0013      	movs	r3, r2
 800186a:	43da      	mvns	r2, r3
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	4013      	ands	r3, r2
 8001870:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	689a      	ldr	r2, [r3, #8]
 8001876:	693b      	ldr	r3, [r7, #16]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	697a      	ldr	r2, [r7, #20]
 8001880:	4313      	orrs	r3, r2
 8001882:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	697a      	ldr	r2, [r7, #20]
 8001888:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	2380      	movs	r3, #128	@ 0x80
 8001890:	055b      	lsls	r3, r3, #21
 8001892:	4013      	ands	r3, r2
 8001894:	d100      	bne.n	8001898 <HAL_GPIO_Init+0x180>
 8001896:	e092      	b.n	80019be <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001898:	4a50      	ldr	r2, [pc, #320]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	3318      	adds	r3, #24
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	589b      	ldr	r3, [r3, r2]
 80018a4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	2203      	movs	r2, #3
 80018aa:	4013      	ands	r3, r2
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	220f      	movs	r2, #15
 80018b0:	409a      	lsls	r2, r3
 80018b2:	0013      	movs	r3, r2
 80018b4:	43da      	mvns	r2, r3
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	4013      	ands	r3, r2
 80018ba:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	23a0      	movs	r3, #160	@ 0xa0
 80018c0:	05db      	lsls	r3, r3, #23
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0x1d6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a45      	ldr	r2, [pc, #276]	@ (80019e0 <HAL_GPIO_Init+0x2c8>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00d      	beq.n	80018ea <HAL_GPIO_Init+0x1d2>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a44      	ldr	r2, [pc, #272]	@ (80019e4 <HAL_GPIO_Init+0x2cc>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x1ce>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a43      	ldr	r2, [pc, #268]	@ (80019e8 <HAL_GPIO_Init+0x2d0>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_GPIO_Init+0x1ca>
 80018de:	2305      	movs	r3, #5
 80018e0:	e006      	b.n	80018f0 <HAL_GPIO_Init+0x1d8>
 80018e2:	2306      	movs	r3, #6
 80018e4:	e004      	b.n	80018f0 <HAL_GPIO_Init+0x1d8>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e002      	b.n	80018f0 <HAL_GPIO_Init+0x1d8>
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_GPIO_Init+0x1d8>
 80018ee:	2300      	movs	r3, #0
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	2103      	movs	r1, #3
 80018f4:	400a      	ands	r2, r1
 80018f6:	00d2      	lsls	r2, r2, #3
 80018f8:	4093      	lsls	r3, r2
 80018fa:	697a      	ldr	r2, [r7, #20]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001900:	4936      	ldr	r1, [pc, #216]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	089b      	lsrs	r3, r3, #2
 8001906:	3318      	adds	r3, #24
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	697a      	ldr	r2, [r7, #20]
 800190c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800190e:	4a33      	ldr	r2, [pc, #204]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 8001910:	2380      	movs	r3, #128	@ 0x80
 8001912:	58d3      	ldr	r3, [r2, r3]
 8001914:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	43da      	mvns	r2, r3
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	4013      	ands	r3, r2
 800191e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	2380      	movs	r3, #128	@ 0x80
 8001926:	025b      	lsls	r3, r3, #9
 8001928:	4013      	ands	r3, r2
 800192a:	d003      	beq.n	8001934 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 800192c:	697a      	ldr	r2, [r7, #20]
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	4313      	orrs	r3, r2
 8001932:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001934:	4929      	ldr	r1, [pc, #164]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 8001936:	2280      	movs	r2, #128	@ 0x80
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 800193c:	4a27      	ldr	r2, [pc, #156]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 800193e:	2384      	movs	r3, #132	@ 0x84
 8001940:	58d3      	ldr	r3, [r2, r3]
 8001942:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43da      	mvns	r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4013      	ands	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	2380      	movs	r3, #128	@ 0x80
 8001954:	029b      	lsls	r3, r3, #10
 8001956:	4013      	ands	r3, r2
 8001958:	d003      	beq.n	8001962 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800195a:	697a      	ldr	r2, [r7, #20]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001962:	491e      	ldr	r1, [pc, #120]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 8001964:	2284      	movs	r2, #132	@ 0x84
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800196a:	4b1c      	ldr	r3, [pc, #112]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	43da      	mvns	r2, r3
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	4013      	ands	r3, r2
 8001978:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	2380      	movs	r3, #128	@ 0x80
 8001980:	035b      	lsls	r3, r3, #13
 8001982:	4013      	ands	r3, r2
 8001984:	d003      	beq.n	800198e <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4313      	orrs	r3, r2
 800198c:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800198e:	4b13      	ldr	r3, [pc, #76]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001994:	4b11      	ldr	r3, [pc, #68]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	43da      	mvns	r2, r3
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	4013      	ands	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	2380      	movs	r3, #128	@ 0x80
 80019aa:	039b      	lsls	r3, r3, #14
 80019ac:	4013      	ands	r3, r2
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4313      	orrs	r3, r2
 80019b6:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80019b8:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <HAL_GPIO_Init+0x2c4>)
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	3301      	adds	r3, #1
 80019c2:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	40da      	lsrs	r2, r3
 80019cc:	1e13      	subs	r3, r2, #0
 80019ce:	d000      	beq.n	80019d2 <HAL_GPIO_Init+0x2ba>
 80019d0:	e6aa      	b.n	8001728 <HAL_GPIO_Init+0x10>
  }
}
 80019d2:	46c0      	nop			@ (mov r8, r8)
 80019d4:	46c0      	nop			@ (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b006      	add	sp, #24
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40021800 	.word	0x40021800
 80019e0:	50000400 	.word	0x50000400
 80019e4:	50000800 	.word	0x50000800
 80019e8:	50001400 	.word	0x50001400

080019ec <HAL_PWR_DisableWakeUpPin>:
  *                PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5 (*), PWR_WAKEUP_PIN6
  * @note   (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <HAL_PWR_DisableWakeUpPin+0x24>)
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	212f      	movs	r1, #47	@ 0x2f
 80019fc:	400b      	ands	r3, r1
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_PWR_DisableWakeUpPin+0x24>)
 8001a02:	400a      	ands	r2, r1
 8001a04:	609a      	str	r2, [r3, #8]
}
 8001a06:	46c0      	nop			@ (mov r8, r8)
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	b002      	add	sp, #8
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	46c0      	nop			@ (mov r8, r8)
 8001a10:	40007000 	.word	0x40007000

08001a14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b086      	sub	sp, #24
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e1d0      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <HAL_RCC_OscConfig+0x1e>
 8001a30:	e069      	b.n	8001b06 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a32:	4bc8      	ldr	r3, [pc, #800]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2238      	movs	r2, #56	@ 0x38
 8001a38:	4013      	ands	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d105      	bne.n	8001a4e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d15d      	bne.n	8001b06 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e1bc      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	2380      	movs	r3, #128	@ 0x80
 8001a54:	025b      	lsls	r3, r3, #9
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d107      	bne.n	8001a6a <HAL_RCC_OscConfig+0x56>
 8001a5a:	4bbe      	ldr	r3, [pc, #760]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	4bbd      	ldr	r3, [pc, #756]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001a60:	2180      	movs	r1, #128	@ 0x80
 8001a62:	0249      	lsls	r1, r1, #9
 8001a64:	430a      	orrs	r2, r1
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	e020      	b.n	8001aac <HAL_RCC_OscConfig+0x98>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	23a0      	movs	r3, #160	@ 0xa0
 8001a70:	02db      	lsls	r3, r3, #11
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d10e      	bne.n	8001a94 <HAL_RCC_OscConfig+0x80>
 8001a76:	4bb7      	ldr	r3, [pc, #732]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4bb6      	ldr	r3, [pc, #728]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001a7c:	2180      	movs	r1, #128	@ 0x80
 8001a7e:	02c9      	lsls	r1, r1, #11
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	4bb3      	ldr	r3, [pc, #716]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4bb2      	ldr	r3, [pc, #712]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001a8a:	2180      	movs	r1, #128	@ 0x80
 8001a8c:	0249      	lsls	r1, r1, #9
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	e00b      	b.n	8001aac <HAL_RCC_OscConfig+0x98>
 8001a94:	4baf      	ldr	r3, [pc, #700]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	4bae      	ldr	r3, [pc, #696]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001a9a:	49af      	ldr	r1, [pc, #700]	@ (8001d58 <HAL_RCC_OscConfig+0x344>)
 8001a9c:	400a      	ands	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	4bac      	ldr	r3, [pc, #688]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4bab      	ldr	r3, [pc, #684]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001aa6:	49ad      	ldr	r1, [pc, #692]	@ (8001d5c <HAL_RCC_OscConfig+0x348>)
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d014      	beq.n	8001ade <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab4:	f7ff fc48 	bl	8001348 <HAL_GetTick>
 8001ab8:	0003      	movs	r3, r0
 8001aba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001abc:	e008      	b.n	8001ad0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001abe:	f7ff fc43 	bl	8001348 <HAL_GetTick>
 8001ac2:	0002      	movs	r2, r0
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	2b64      	cmp	r3, #100	@ 0x64
 8001aca:	d901      	bls.n	8001ad0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e17b      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad0:	4ba0      	ldr	r3, [pc, #640]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	@ 0x80
 8001ad6:	029b      	lsls	r3, r3, #10
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d0f0      	beq.n	8001abe <HAL_RCC_OscConfig+0xaa>
 8001adc:	e013      	b.n	8001b06 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff fc33 	bl	8001348 <HAL_GetTick>
 8001ae2:	0003      	movs	r3, r0
 8001ae4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ae8:	f7ff fc2e 	bl	8001348 <HAL_GetTick>
 8001aec:	0002      	movs	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b64      	cmp	r3, #100	@ 0x64
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e166      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001afa:	4b96      	ldr	r3, [pc, #600]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	@ 0x80
 8001b00:	029b      	lsls	r3, r3, #10
 8001b02:	4013      	ands	r3, r2
 8001b04:	d1f0      	bne.n	8001ae8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2202      	movs	r2, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	d100      	bne.n	8001b12 <HAL_RCC_OscConfig+0xfe>
 8001b10:	e086      	b.n	8001c20 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b12:	4b90      	ldr	r3, [pc, #576]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2238      	movs	r2, #56	@ 0x38
 8001b18:	4013      	ands	r3, r2
 8001b1a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d12f      	bne.n	8001b82 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d101      	bne.n	8001b2e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e14c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b2e:	4b89      	ldr	r3, [pc, #548]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a8b      	ldr	r2, [pc, #556]	@ (8001d60 <HAL_RCC_OscConfig+0x34c>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	0019      	movs	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	021a      	lsls	r2, r3, #8
 8001b3e:	4b85      	ldr	r3, [pc, #532]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001b40:	430a      	orrs	r2, r1
 8001b42:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d112      	bne.n	8001b70 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b4a:	4b82      	ldr	r3, [pc, #520]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a85      	ldr	r2, [pc, #532]	@ (8001d64 <HAL_RCC_OscConfig+0x350>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	691a      	ldr	r2, [r3, #16]
 8001b58:	4b7e      	ldr	r3, [pc, #504]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b5e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	0adb      	lsrs	r3, r3, #11
 8001b64:	2207      	movs	r2, #7
 8001b66:	4013      	ands	r3, r2
 8001b68:	4a7f      	ldr	r2, [pc, #508]	@ (8001d68 <HAL_RCC_OscConfig+0x354>)
 8001b6a:	40da      	lsrs	r2, r3
 8001b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d6c <HAL_RCC_OscConfig+0x358>)
 8001b6e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b70:	4b7f      	ldr	r3, [pc, #508]	@ (8001d70 <HAL_RCC_OscConfig+0x35c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	0018      	movs	r0, r3
 8001b76:	f7ff fb8b 	bl	8001290 <HAL_InitTick>
 8001b7a:	1e03      	subs	r3, r0, #0
 8001b7c:	d050      	beq.n	8001c20 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e122      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d030      	beq.n	8001bec <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b8a:	4b72      	ldr	r3, [pc, #456]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a75      	ldr	r2, [pc, #468]	@ (8001d64 <HAL_RCC_OscConfig+0x350>)
 8001b90:	4013      	ands	r3, r2
 8001b92:	0019      	movs	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	691a      	ldr	r2, [r3, #16]
 8001b98:	4b6e      	ldr	r3, [pc, #440]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001ba4:	2180      	movs	r1, #128	@ 0x80
 8001ba6:	0049      	lsls	r1, r1, #1
 8001ba8:	430a      	orrs	r2, r1
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff fbcc 	bl	8001348 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bb6:	f7ff fbc7 	bl	8001348 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e0ff      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bc8:	4b62      	ldr	r3, [pc, #392]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001bca:	681a      	ldr	r2, [r3, #0]
 8001bcc:	2380      	movs	r3, #128	@ 0x80
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd4:	4b5f      	ldr	r3, [pc, #380]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	4a61      	ldr	r2, [pc, #388]	@ (8001d60 <HAL_RCC_OscConfig+0x34c>)
 8001bda:	4013      	ands	r3, r2
 8001bdc:	0019      	movs	r1, r3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	021a      	lsls	r2, r3, #8
 8001be4:	4b5b      	ldr	r3, [pc, #364]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001be6:	430a      	orrs	r2, r1
 8001be8:	605a      	str	r2, [r3, #4]
 8001bea:	e019      	b.n	8001c20 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001bec:	4b59      	ldr	r3, [pc, #356]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	4b58      	ldr	r3, [pc, #352]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001bf2:	4960      	ldr	r1, [pc, #384]	@ (8001d74 <HAL_RCC_OscConfig+0x360>)
 8001bf4:	400a      	ands	r2, r1
 8001bf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7ff fba6 	bl	8001348 <HAL_GetTick>
 8001bfc:	0003      	movs	r3, r0
 8001bfe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c00:	e008      	b.n	8001c14 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c02:	f7ff fba1 	bl	8001348 <HAL_GetTick>
 8001c06:	0002      	movs	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0d9      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c14:	4b4f      	ldr	r3, [pc, #316]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	2380      	movs	r3, #128	@ 0x80
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	d1f0      	bne.n	8001c02 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2208      	movs	r2, #8
 8001c26:	4013      	ands	r3, r2
 8001c28:	d042      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	2238      	movs	r2, #56	@ 0x38
 8001c30:	4013      	ands	r3, r2
 8001c32:	2b18      	cmp	r3, #24
 8001c34:	d105      	bne.n	8001c42 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d138      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0c2      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	699b      	ldr	r3, [r3, #24]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d019      	beq.n	8001c7e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c4a:	4b42      	ldr	r3, [pc, #264]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001c4c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c4e:	4b41      	ldr	r3, [pc, #260]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001c50:	2101      	movs	r1, #1
 8001c52:	430a      	orrs	r2, r1
 8001c54:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff fb77 	bl	8001348 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c60:	f7ff fb72 	bl	8001348 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b02      	cmp	r3, #2
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e0aa      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c72:	4b38      	ldr	r3, [pc, #224]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001c74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c76:	2202      	movs	r2, #2
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d0f1      	beq.n	8001c60 <HAL_RCC_OscConfig+0x24c>
 8001c7c:	e018      	b.n	8001cb0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c7e:	4b35      	ldr	r3, [pc, #212]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001c80:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c82:	4b34      	ldr	r3, [pc, #208]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001c84:	2101      	movs	r1, #1
 8001c86:	438a      	bics	r2, r1
 8001c88:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8a:	f7ff fb5d 	bl	8001348 <HAL_GetTick>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c94:	f7ff fb58 	bl	8001348 <HAL_GetTick>
 8001c98:	0002      	movs	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e090      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001ca6:	4b2b      	ldr	r3, [pc, #172]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001ca8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001caa:	2202      	movs	r2, #2
 8001cac:	4013      	ands	r3, r2
 8001cae:	d1f1      	bne.n	8001c94 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2204      	movs	r2, #4
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	d100      	bne.n	8001cbc <HAL_RCC_OscConfig+0x2a8>
 8001cba:	e084      	b.n	8001dc6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cbc:	230f      	movs	r3, #15
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001cc4:	4b23      	ldr	r3, [pc, #140]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2238      	movs	r2, #56	@ 0x38
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	d106      	bne.n	8001cde <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d000      	beq.n	8001cda <HAL_RCC_OscConfig+0x2c6>
 8001cd8:	e075      	b.n	8001dc6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e074      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d106      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2e0>
 8001ce6:	4b1b      	ldr	r3, [pc, #108]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001ce8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001cea:	4b1a      	ldr	r3, [pc, #104]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001cec:	2101      	movs	r1, #1
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001cf2:	e01c      	b.n	8001d2e <HAL_RCC_OscConfig+0x31a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b05      	cmp	r3, #5
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x302>
 8001cfc:	4b15      	ldr	r3, [pc, #84]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001cfe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d00:	4b14      	ldr	r3, [pc, #80]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001d02:	2104      	movs	r1, #4
 8001d04:	430a      	orrs	r2, r1
 8001d06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d08:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001d0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d0c:	4b11      	ldr	r3, [pc, #68]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001d0e:	2101      	movs	r1, #1
 8001d10:	430a      	orrs	r2, r1
 8001d12:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d14:	e00b      	b.n	8001d2e <HAL_RCC_OscConfig+0x31a>
 8001d16:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001d18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d1a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	438a      	bics	r2, r1
 8001d20:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d22:	4b0c      	ldr	r3, [pc, #48]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001d24:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d26:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <HAL_RCC_OscConfig+0x340>)
 8001d28:	2104      	movs	r1, #4
 8001d2a:	438a      	bics	r2, r1
 8001d2c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d028      	beq.n	8001d88 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d36:	f7ff fb07 	bl	8001348 <HAL_GetTick>
 8001d3a:	0003      	movs	r3, r0
 8001d3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d3e:	e01d      	b.n	8001d7c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f7ff fb02 	bl	8001348 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a0b      	ldr	r2, [pc, #44]	@ (8001d78 <HAL_RCC_OscConfig+0x364>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d915      	bls.n	8001d7c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e039      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
 8001d54:	40021000 	.word	0x40021000
 8001d58:	fffeffff 	.word	0xfffeffff
 8001d5c:	fffbffff 	.word	0xfffbffff
 8001d60:	ffff80ff 	.word	0xffff80ff
 8001d64:	ffffc7ff 	.word	0xffffc7ff
 8001d68:	02dc6c00 	.word	0x02dc6c00
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	20000004 	.word	0x20000004
 8001d74:	fffffeff 	.word	0xfffffeff
 8001d78:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d7c:	4b14      	ldr	r3, [pc, #80]	@ (8001dd0 <HAL_RCC_OscConfig+0x3bc>)
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d80:	2202      	movs	r2, #2
 8001d82:	4013      	ands	r3, r2
 8001d84:	d0dc      	beq.n	8001d40 <HAL_RCC_OscConfig+0x32c>
 8001d86:	e013      	b.n	8001db0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d88:	f7ff fade 	bl	8001348 <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001d90:	e009      	b.n	8001da6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7ff fad9 	bl	8001348 <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <HAL_RCC_OscConfig+0x3c0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e010      	b.n	8001dc8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001da6:	4b0a      	ldr	r3, [pc, #40]	@ (8001dd0 <HAL_RCC_OscConfig+0x3bc>)
 8001da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d1f0      	bne.n	8001d92 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001db0:	230f      	movs	r3, #15
 8001db2:	18fb      	adds	r3, r7, r3
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d105      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001dba:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_RCC_OscConfig+0x3bc>)
 8001dbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dbe:	4b04      	ldr	r3, [pc, #16]	@ (8001dd0 <HAL_RCC_OscConfig+0x3bc>)
 8001dc0:	4905      	ldr	r1, [pc, #20]	@ (8001dd8 <HAL_RCC_OscConfig+0x3c4>)
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001dc6:	2300      	movs	r3, #0
}
 8001dc8:	0018      	movs	r0, r3
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b006      	add	sp, #24
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	00001388 	.word	0x00001388
 8001dd8:	efffffff 	.word	0xefffffff

08001ddc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b084      	sub	sp, #16
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d101      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0e9      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001df0:	4b76      	ldr	r3, [pc, #472]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2207      	movs	r2, #7
 8001df6:	4013      	ands	r3, r2
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d91e      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dfe:	4b73      	ldr	r3, [pc, #460]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2207      	movs	r2, #7
 8001e04:	4393      	bics	r3, r2
 8001e06:	0019      	movs	r1, r3
 8001e08:	4b70      	ldr	r3, [pc, #448]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e10:	f7ff fa9a 	bl	8001348 <HAL_GetTick>
 8001e14:	0003      	movs	r3, r0
 8001e16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e18:	e009      	b.n	8001e2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e1a:	f7ff fa95 	bl	8001348 <HAL_GetTick>
 8001e1e:	0002      	movs	r2, r0
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	4a6a      	ldr	r2, [pc, #424]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e0ca      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e2e:	4b67      	ldr	r3, [pc, #412]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2207      	movs	r2, #7
 8001e34:	4013      	ands	r3, r2
 8001e36:	683a      	ldr	r2, [r7, #0]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d1ee      	bne.n	8001e1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2202      	movs	r2, #2
 8001e42:	4013      	ands	r3, r2
 8001e44:	d017      	beq.n	8001e76 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2204      	movs	r2, #4
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d008      	beq.n	8001e62 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e50:	4b60      	ldr	r3, [pc, #384]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a60      	ldr	r2, [pc, #384]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1fc>)
 8001e56:	401a      	ands	r2, r3
 8001e58:	4b5e      	ldr	r3, [pc, #376]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5a:	21b0      	movs	r1, #176	@ 0xb0
 8001e5c:	0109      	lsls	r1, r1, #4
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e62:	4b5c      	ldr	r3, [pc, #368]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	4a5d      	ldr	r2, [pc, #372]	@ (8001fdc <HAL_RCC_ClockConfig+0x200>)
 8001e68:	4013      	ands	r3, r2
 8001e6a:	0019      	movs	r1, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	4b58      	ldr	r3, [pc, #352]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e72:	430a      	orrs	r2, r1
 8001e74:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d055      	beq.n	8001f2c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001e80:	4b54      	ldr	r3, [pc, #336]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	221c      	movs	r2, #28
 8001e86:	4393      	bics	r3, r2
 8001e88:	0019      	movs	r1, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	4b51      	ldr	r3, [pc, #324]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e90:	430a      	orrs	r2, r1
 8001e92:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d107      	bne.n	8001eac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	@ 0x80
 8001ea2:	029b      	lsls	r3, r3, #10
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d11f      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e08b      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d107      	bne.n	8001ec4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eb4:	4b47      	ldr	r3, [pc, #284]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	2380      	movs	r3, #128	@ 0x80
 8001eba:	00db      	lsls	r3, r3, #3
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d113      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e07f      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d106      	bne.n	8001eda <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001ecc:	4b41      	ldr	r3, [pc, #260]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ece:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d108      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e074      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001eda:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001edc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ede:	2202      	movs	r2, #2
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e06d      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ee8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2207      	movs	r2, #7
 8001eee:	4393      	bics	r3, r2
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	4b37      	ldr	r3, [pc, #220]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001efc:	f7ff fa24 	bl	8001348 <HAL_GetTick>
 8001f00:	0003      	movs	r3, r0
 8001f02:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f04:	e009      	b.n	8001f1a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f06:	f7ff fa1f 	bl	8001348 <HAL_GetTick>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	4a2f      	ldr	r2, [pc, #188]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e054      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f1c:	689b      	ldr	r3, [r3, #8]
 8001f1e:	2238      	movs	r2, #56	@ 0x38
 8001f20:	401a      	ands	r2, r3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d1ec      	bne.n	8001f06 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f2c:	4b27      	ldr	r3, [pc, #156]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2207      	movs	r2, #7
 8001f32:	4013      	ands	r3, r2
 8001f34:	683a      	ldr	r2, [r7, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d21e      	bcs.n	8001f78 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3a:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2207      	movs	r2, #7
 8001f40:	4393      	bics	r3, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	4b21      	ldr	r3, [pc, #132]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f4c:	f7ff f9fc 	bl	8001348 <HAL_GetTick>
 8001f50:	0003      	movs	r3, r0
 8001f52:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f54:	e009      	b.n	8001f6a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f56:	f7ff f9f7 	bl	8001348 <HAL_GetTick>
 8001f5a:	0002      	movs	r2, r0
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1f4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e02c      	b.n	8001fc4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f6a:	4b18      	ldr	r3, [pc, #96]	@ (8001fcc <HAL_RCC_ClockConfig+0x1f0>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2207      	movs	r2, #7
 8001f70:	4013      	ands	r3, r2
 8001f72:	683a      	ldr	r2, [r7, #0]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1ee      	bne.n	8001f56 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2204      	movs	r2, #4
 8001f7e:	4013      	ands	r3, r2
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f82:	4b14      	ldr	r3, [pc, #80]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	4a16      	ldr	r2, [pc, #88]	@ (8001fe0 <HAL_RCC_ClockConfig+0x204>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	0019      	movs	r1, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	691a      	ldr	r2, [r3, #16]
 8001f90:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f92:	430a      	orrs	r2, r1
 8001f94:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001f96:	f000 f82b 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8001f9a:	0001      	movs	r1, r0
 8001f9c:	4b0d      	ldr	r3, [pc, #52]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1f8>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fa0:	0a1b      	lsrs	r3, r3, #8
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe4 <HAL_RCC_ClockConfig+0x208>)
 8001fa8:	0092      	lsls	r2, r2, #2
 8001faa:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fac:	221f      	movs	r2, #31
 8001fae:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fb0:	000a      	movs	r2, r1
 8001fb2:	40da      	lsrs	r2, r3
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <HAL_RCC_ClockConfig+0x20c>)
 8001fb6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <HAL_RCC_ClockConfig+0x210>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	0018      	movs	r0, r3
 8001fbe:	f7ff f967 	bl	8001290 <HAL_InitTick>
 8001fc2:	0003      	movs	r3, r0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b004      	add	sp, #16
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40022000 	.word	0x40022000
 8001fd0:	00001388 	.word	0x00001388
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	ffff84ff 	.word	0xffff84ff
 8001fdc:	fffff0ff 	.word	0xfffff0ff
 8001fe0:	ffff8fff 	.word	0xffff8fff
 8001fe4:	08006138 	.word	0x08006138
 8001fe8:	20000000 	.word	0x20000000
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001ff6:	4b23      	ldr	r3, [pc, #140]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	089b      	lsrs	r3, r3, #2
 8001ffc:	2207      	movs	r2, #7
 8001ffe:	4013      	ands	r3, r2
 8002000:	3301      	adds	r3, #1
 8002002:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002004:	4b1f      	ldr	r3, [pc, #124]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	2238      	movs	r2, #56	@ 0x38
 800200a:	4013      	ands	r3, r2
 800200c:	d10f      	bne.n	800202e <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	0adb      	lsrs	r3, r3, #11
 8002014:	2207      	movs	r2, #7
 8002016:	4013      	ands	r3, r2
 8002018:	2201      	movs	r2, #1
 800201a:	409a      	lsls	r2, r3
 800201c:	0013      	movs	r3, r2
 800201e:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4819      	ldr	r0, [pc, #100]	@ (8002088 <HAL_RCC_GetSysClockFreq+0x98>)
 8002024:	f7fe f882 	bl	800012c <__udivsi3>
 8002028:	0003      	movs	r3, r0
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	e01e      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800202e:	4b15      	ldr	r3, [pc, #84]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	2238      	movs	r2, #56	@ 0x38
 8002034:	4013      	ands	r3, r2
 8002036:	2b08      	cmp	r3, #8
 8002038:	d102      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800203a:	4b14      	ldr	r3, [pc, #80]	@ (800208c <HAL_RCC_GetSysClockFreq+0x9c>)
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	e015      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002040:	4b10      	ldr	r3, [pc, #64]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2238      	movs	r2, #56	@ 0x38
 8002046:	4013      	ands	r3, r2
 8002048:	2b20      	cmp	r3, #32
 800204a:	d103      	bne.n	8002054 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800204c:	2380      	movs	r3, #128	@ 0x80
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	e00b      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002054:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_RCC_GetSysClockFreq+0x94>)
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	2238      	movs	r2, #56	@ 0x38
 800205a:	4013      	ands	r3, r2
 800205c:	2b18      	cmp	r3, #24
 800205e:	d103      	bne.n	8002068 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002060:	23fa      	movs	r3, #250	@ 0xfa
 8002062:	01db      	lsls	r3, r3, #7
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	e001      	b.n	800206c <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 800206c:	68b9      	ldr	r1, [r7, #8]
 800206e:	68f8      	ldr	r0, [r7, #12]
 8002070:	f7fe f85c 	bl	800012c <__udivsi3>
 8002074:	0003      	movs	r3, r0
 8002076:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002078:	68fb      	ldr	r3, [r7, #12]
}
 800207a:	0018      	movs	r0, r3
 800207c:	46bd      	mov	sp, r7
 800207e:	b004      	add	sp, #16
 8002080:	bd80      	pop	{r7, pc}
 8002082:	46c0      	nop			@ (mov r8, r8)
 8002084:	40021000 	.word	0x40021000
 8002088:	02dc6c00 	.word	0x02dc6c00
 800208c:	007a1200 	.word	0x007a1200

08002090 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002094:	f7ff ffac 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 8002098:	0001      	movs	r1, r0
 800209a:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <HAL_RCC_GetHCLKFreq+0x30>)
 800209c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800209e:	0a1b      	lsrs	r3, r3, #8
 80020a0:	220f      	movs	r2, #15
 80020a2:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80020a4:	4b07      	ldr	r3, [pc, #28]	@ (80020c4 <HAL_RCC_GetHCLKFreq+0x34>)
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020aa:	221f      	movs	r2, #31
 80020ac:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80020ae:	000a      	movs	r2, r1
 80020b0:	40da      	lsrs	r2, r3
 80020b2:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_RCC_GetHCLKFreq+0x38>)
 80020b4:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80020b6:	4b04      	ldr	r3, [pc, #16]	@ (80020c8 <HAL_RCC_GetHCLKFreq+0x38>)
 80020b8:	681b      	ldr	r3, [r3, #0]
}
 80020ba:	0018      	movs	r0, r3
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40021000 	.word	0x40021000
 80020c4:	08006138 	.word	0x08006138
 80020c8:	20000000 	.word	0x20000000

080020cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80020d0:	f7ff ffde 	bl	8002090 <HAL_RCC_GetHCLKFreq>
 80020d4:	0001      	movs	r1, r0
 80020d6:	4b07      	ldr	r3, [pc, #28]	@ (80020f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0b1b      	lsrs	r3, r3, #12
 80020dc:	2207      	movs	r2, #7
 80020de:	401a      	ands	r2, r3
 80020e0:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80020e2:	0092      	lsls	r2, r2, #2
 80020e4:	58d3      	ldr	r3, [r2, r3]
 80020e6:	221f      	movs	r2, #31
 80020e8:	4013      	ands	r3, r2
 80020ea:	40d9      	lsrs	r1, r3
 80020ec:	000b      	movs	r3, r1
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40021000 	.word	0x40021000
 80020f8:	08006178 	.word	0x08006178

080020fc <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b086      	sub	sp, #24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002104:	2313      	movs	r3, #19
 8002106:	18fb      	adds	r3, r7, r3
 8002108:	2200      	movs	r2, #0
 800210a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800210c:	2312      	movs	r3, #18
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2200      	movs	r2, #0
 8002112:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2240      	movs	r2, #64	@ 0x40
 800211a:	4013      	ands	r3, r2
 800211c:	d100      	bne.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x24>
 800211e:	e079      	b.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002120:	2011      	movs	r0, #17
 8002122:	183b      	adds	r3, r7, r0
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002128:	4b63      	ldr	r3, [pc, #396]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800212a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800212c:	2380      	movs	r3, #128	@ 0x80
 800212e:	055b      	lsls	r3, r3, #21
 8002130:	4013      	ands	r3, r2
 8002132:	d110      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002134:	4b60      	ldr	r3, [pc, #384]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002136:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002138:	4b5f      	ldr	r3, [pc, #380]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800213a:	2180      	movs	r1, #128	@ 0x80
 800213c:	0549      	lsls	r1, r1, #21
 800213e:	430a      	orrs	r2, r1
 8002140:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002142:	4b5d      	ldr	r3, [pc, #372]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002144:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002146:	2380      	movs	r3, #128	@ 0x80
 8002148:	055b      	lsls	r3, r3, #21
 800214a:	4013      	ands	r3, r2
 800214c:	60bb      	str	r3, [r7, #8]
 800214e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002150:	183b      	adds	r3, r7, r0
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002156:	4b58      	ldr	r3, [pc, #352]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002158:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800215a:	23c0      	movs	r3, #192	@ 0xc0
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4013      	ands	r3, r2
 8002160:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d019      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	699b      	ldr	r3, [r3, #24]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	429a      	cmp	r2, r3
 8002170:	d014      	beq.n	800219c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002172:	4b51      	ldr	r3, [pc, #324]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002176:	4a51      	ldr	r2, [pc, #324]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002178:	4013      	ands	r3, r2
 800217a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800217c:	4b4e      	ldr	r3, [pc, #312]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800217e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002180:	4b4d      	ldr	r3, [pc, #308]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002182:	2180      	movs	r1, #128	@ 0x80
 8002184:	0249      	lsls	r1, r1, #9
 8002186:	430a      	orrs	r2, r1
 8002188:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800218a:	4b4b      	ldr	r3, [pc, #300]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800218c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800218e:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002190:	494b      	ldr	r1, [pc, #300]	@ (80022c0 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002192:	400a      	ands	r2, r1
 8002194:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002196:	4b48      	ldr	r3, [pc, #288]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2201      	movs	r2, #1
 80021a0:	4013      	ands	r3, r2
 80021a2:	d016      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a4:	f7ff f8d0 	bl	8001348 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021ac:	e00c      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ae:	f7ff f8cb 	bl	8001348 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	4a42      	ldr	r2, [pc, #264]	@ (80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d904      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80021be:	2313      	movs	r3, #19
 80021c0:	18fb      	adds	r3, r7, r3
 80021c2:	2203      	movs	r2, #3
 80021c4:	701a      	strb	r2, [r3, #0]
          break;
 80021c6:	e004      	b.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021c8:	4b3b      	ldr	r3, [pc, #236]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021cc:	2202      	movs	r2, #2
 80021ce:	4013      	ands	r3, r2
 80021d0:	d0ed      	beq.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80021d2:	2313      	movs	r3, #19
 80021d4:	18fb      	adds	r3, r7, r3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10a      	bne.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021dc:	4b36      	ldr	r3, [pc, #216]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e0:	4a36      	ldr	r2, [pc, #216]	@ (80022bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	0019      	movs	r1, r3
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	699a      	ldr	r2, [r3, #24]
 80021ea:	4b33      	ldr	r3, [pc, #204]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021ec:	430a      	orrs	r2, r1
 80021ee:	65da      	str	r2, [r3, #92]	@ 0x5c
 80021f0:	e005      	b.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021f2:	2312      	movs	r3, #18
 80021f4:	18fb      	adds	r3, r7, r3
 80021f6:	2213      	movs	r2, #19
 80021f8:	18ba      	adds	r2, r7, r2
 80021fa:	7812      	ldrb	r2, [r2, #0]
 80021fc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021fe:	2311      	movs	r3, #17
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b01      	cmp	r3, #1
 8002206:	d105      	bne.n	8002214 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002208:	4b2b      	ldr	r3, [pc, #172]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800220a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800220c:	4b2a      	ldr	r3, [pc, #168]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800220e:	492e      	ldr	r1, [pc, #184]	@ (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002210:	400a      	ands	r2, r1
 8002212:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2201      	movs	r2, #1
 800221a:	4013      	ands	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800221e:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002220:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002222:	2203      	movs	r2, #3
 8002224:	4393      	bics	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689a      	ldr	r2, [r3, #8]
 800222c:	4b22      	ldr	r3, [pc, #136]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800222e:	430a      	orrs	r2, r1
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2202      	movs	r2, #2
 8002238:	4013      	ands	r3, r2
 800223a:	d009      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800223c:	4b1e      	ldr	r3, [pc, #120]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800223e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002240:	4a22      	ldr	r2, [pc, #136]	@ (80022cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002242:	4013      	ands	r3, r2
 8002244:	0019      	movs	r1, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	4b1b      	ldr	r3, [pc, #108]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800224c:	430a      	orrs	r2, r1
 800224e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2220      	movs	r2, #32
 8002256:	4013      	ands	r3, r2
 8002258:	d008      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800225a:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800225c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	0899      	lsrs	r1, r3, #2
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695a      	ldr	r2, [r3, #20]
 8002266:	4b14      	ldr	r3, [pc, #80]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002268:	430a      	orrs	r2, r1
 800226a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2204      	movs	r2, #4
 8002272:	4013      	ands	r3, r2
 8002274:	d009      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	4a15      	ldr	r2, [pc, #84]	@ (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800227c:	4013      	ands	r3, r2
 800227e:	0019      	movs	r1, r3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691a      	ldr	r2, [r3, #16]
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002286:	430a      	orrs	r2, r1
 8002288:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2280      	movs	r2, #128	@ 0x80
 8002290:	4013      	ands	r3, r2
 8002292:	d009      	beq.n	80022a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002294:	4b08      	ldr	r3, [pc, #32]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	22e0      	movs	r2, #224	@ 0xe0
 800229a:	4393      	bics	r3, r2
 800229c:	0019      	movs	r1, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685a      	ldr	r2, [r3, #4]
 80022a2:	4b05      	ldr	r3, [pc, #20]	@ (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022a4:	430a      	orrs	r2, r1
 80022a6:	601a      	str	r2, [r3, #0]
  }
  return status;
 80022a8:	2312      	movs	r3, #18
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	781b      	ldrb	r3, [r3, #0]
}
 80022ae:	0018      	movs	r0, r3
 80022b0:	46bd      	mov	sp, r7
 80022b2:	b006      	add	sp, #24
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	46c0      	nop			@ (mov r8, r8)
 80022b8:	40021000 	.word	0x40021000
 80022bc:	fffffcff 	.word	0xfffffcff
 80022c0:	fffeffff 	.word	0xfffeffff
 80022c4:	00001388 	.word	0x00001388
 80022c8:	efffffff 	.word	0xefffffff
 80022cc:	ffffcfff 	.word	0xffffcfff
 80022d0:	ffff3fff 	.word	0xffff3fff

080022d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022d4:	b5b0      	push	{r4, r5, r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022dc:	230f      	movs	r3, #15
 80022de:	18fb      	adds	r3, r7, r3
 80022e0:	2201      	movs	r2, #1
 80022e2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d100      	bne.n	80022ec <HAL_RTC_Init+0x18>
 80022ea:	e075      	b.n	80023d8 <HAL_RTC_Init+0x104>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2225      	movs	r2, #37	@ 0x25
 80022f0:	5c9b      	ldrb	r3, [r3, r2]
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2224      	movs	r2, #36	@ 0x24
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	0018      	movs	r0, r3
 8002304:	f7fe fe0c 	bl	8000f20 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2225      	movs	r2, #37	@ 0x25
 800230c:	2102      	movs	r1, #2
 800230e:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2210      	movs	r2, #16
 8002318:	4013      	ands	r3, r2
 800231a:	2b10      	cmp	r3, #16
 800231c:	d04f      	beq.n	80023be <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	22ca      	movs	r2, #202	@ 0xca
 8002324:	625a      	str	r2, [r3, #36]	@ 0x24
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2253      	movs	r2, #83	@ 0x53
 800232c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800232e:	250f      	movs	r5, #15
 8002330:	197c      	adds	r4, r7, r5
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	f000 fadd 	bl	80028f4 <RTC_EnterInitMode>
 800233a:	0003      	movs	r3, r0
 800233c:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800233e:	0028      	movs	r0, r5
 8002340:	183b      	adds	r3, r7, r0
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d121      	bne.n	800238c <HAL_RTC_Init+0xb8>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL));
 8002348:	4b27      	ldr	r3, [pc, #156]	@ (80023e8 <HAL_RTC_Init+0x114>)
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	4b26      	ldr	r3, [pc, #152]	@ (80023e8 <HAL_RTC_Init+0x114>)
 800234e:	4927      	ldr	r1, [pc, #156]	@ (80023ec <HAL_RTC_Init+0x118>)
 8002350:	400a      	ands	r2, r1
 8002352:	619a      	str	r2, [r3, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002354:	4b24      	ldr	r3, [pc, #144]	@ (80023e8 <HAL_RTC_Init+0x114>)
 8002356:	6999      	ldr	r1, [r3, #24]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685a      	ldr	r2, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	431a      	orrs	r2, r3
 8002368:	4b1f      	ldr	r3, [pc, #124]	@ (80023e8 <HAL_RTC_Init+0x114>)
 800236a:	430a      	orrs	r2, r1
 800236c:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	041a      	lsls	r2, r3, #16
 8002378:	4b1b      	ldr	r3, [pc, #108]	@ (80023e8 <HAL_RTC_Init+0x114>)
 800237a:	430a      	orrs	r2, r1
 800237c:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800237e:	183c      	adds	r4, r7, r0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	0018      	movs	r0, r3
 8002384:	f000 fafe 	bl	8002984 <RTC_ExitInitMode>
 8002388:	0003      	movs	r3, r0
 800238a:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 800238c:	230f      	movs	r3, #15
 800238e:	18fb      	adds	r3, r7, r3
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10e      	bne.n	80023b4 <HAL_RTC_Init+0xe0>
      {
        MODIFY_REG(RTC->CR, \
 8002396:	4b14      	ldr	r3, [pc, #80]	@ (80023e8 <HAL_RTC_Init+0x114>)
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	08d9      	lsrs	r1, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a1a      	ldr	r2, [r3, #32]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	69db      	ldr	r3, [r3, #28]
 80023a6:	431a      	orrs	r2, r3
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	695b      	ldr	r3, [r3, #20]
 80023ac:	431a      	orrs	r2, r3
 80023ae:	4b0e      	ldr	r3, [pc, #56]	@ (80023e8 <HAL_RTC_Init+0x114>)
 80023b0:	430a      	orrs	r2, r1
 80023b2:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	22ff      	movs	r2, #255	@ 0xff
 80023ba:	625a      	str	r2, [r3, #36]	@ 0x24
 80023bc:	e003      	b.n	80023c6 <HAL_RTC_Init+0xf2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80023be:	230f      	movs	r3, #15
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80023c6:	230f      	movs	r3, #15
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <HAL_RTC_Init+0x104>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2225      	movs	r2, #37	@ 0x25
 80023d4:	2101      	movs	r1, #1
 80023d6:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80023d8:	230f      	movs	r3, #15
 80023da:	18fb      	adds	r3, r7, r3
 80023dc:	781b      	ldrb	r3, [r3, #0]
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b004      	add	sp, #16
 80023e4:	bdb0      	pop	{r4, r5, r7, pc}
 80023e6:	46c0      	nop			@ (mov r8, r8)
 80023e8:	40002800 	.word	0x40002800
 80023ec:	ff8fffbf 	.word	0xff8fffbf

080023f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80023f0:	b5b0      	push	{r4, r5, r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2224      	movs	r2, #36	@ 0x24
 8002400:	5c9b      	ldrb	r3, [r3, r2]
 8002402:	2b01      	cmp	r3, #1
 8002404:	d101      	bne.n	800240a <HAL_RTC_SetTime+0x1a>
 8002406:	2302      	movs	r3, #2
 8002408:	e092      	b.n	8002530 <HAL_RTC_SetTime+0x140>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2224      	movs	r2, #36	@ 0x24
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2225      	movs	r2, #37	@ 0x25
 8002416:	2102      	movs	r1, #2
 8002418:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	22ca      	movs	r2, #202	@ 0xca
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2253      	movs	r2, #83	@ 0x53
 8002428:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800242a:	2513      	movs	r5, #19
 800242c:	197c      	adds	r4, r7, r5
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	0018      	movs	r0, r3
 8002432:	f000 fa5f 	bl	80028f4 <RTC_EnterInitMode>
 8002436:	0003      	movs	r3, r0
 8002438:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800243a:	197b      	adds	r3, r7, r5
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d162      	bne.n	8002508 <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d125      	bne.n	8002494 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2240      	movs	r2, #64	@ 0x40
 8002450:	4013      	ands	r3, r2
 8002452:	d102      	bne.n	800245a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2200      	movs	r2, #0
 8002458:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	0018      	movs	r0, r3
 8002460:	f000 fad4 	bl	8002a0c <RTC_ByteToBcd2>
 8002464:	0003      	movs	r3, r0
 8002466:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	0018      	movs	r0, r3
 800246e:	f000 facd 	bl	8002a0c <RTC_ByteToBcd2>
 8002472:	0003      	movs	r3, r0
 8002474:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002476:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	789b      	ldrb	r3, [r3, #2]
 800247c:	0018      	movs	r0, r3
 800247e:	f000 fac5 	bl	8002a0c <RTC_ByteToBcd2>
 8002482:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002484:	0022      	movs	r2, r4
 8002486:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	78db      	ldrb	r3, [r3, #3]
 800248c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800248e:	4313      	orrs	r3, r2
 8002490:	617b      	str	r3, [r7, #20]
 8002492:	e017      	b.n	80024c4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2240      	movs	r2, #64	@ 0x40
 800249c:	4013      	ands	r3, r2
 800249e:	d102      	bne.n	80024a6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2200      	movs	r2, #0
 80024a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	785b      	ldrb	r3, [r3, #1]
 80024b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80024b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	78db      	ldrb	r3, [r3, #3]
 80024be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	491b      	ldr	r1, [pc, #108]	@ (8002538 <HAL_RTC_SetTime+0x148>)
 80024cc:	400a      	ands	r2, r1
 80024ce:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	699a      	ldr	r2, [r3, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4918      	ldr	r1, [pc, #96]	@ (800253c <HAL_RTC_SetTime+0x14c>)
 80024dc:	400a      	ands	r2, r1
 80024de:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6999      	ldr	r1, [r3, #24]
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	431a      	orrs	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80024f8:	2313      	movs	r3, #19
 80024fa:	18fc      	adds	r4, r7, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	0018      	movs	r0, r3
 8002500:	f000 fa40 	bl	8002984 <RTC_ExitInitMode>
 8002504:	0003      	movs	r3, r0
 8002506:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	22ff      	movs	r2, #255	@ 0xff
 800250e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002510:	2313      	movs	r3, #19
 8002512:	18fb      	adds	r3, r7, r3
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d103      	bne.n	8002522 <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2225      	movs	r2, #37	@ 0x25
 800251e:	2101      	movs	r1, #1
 8002520:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2224      	movs	r2, #36	@ 0x24
 8002526:	2100      	movs	r1, #0
 8002528:	5499      	strb	r1, [r3, r2]

  return status;
 800252a:	2313      	movs	r3, #19
 800252c:	18fb      	adds	r3, r7, r3
 800252e:	781b      	ldrb	r3, [r3, #0]
}
 8002530:	0018      	movs	r0, r3
 8002532:	46bd      	mov	sp, r7
 8002534:	b006      	add	sp, #24
 8002536:	bdb0      	pop	{r4, r5, r7, pc}
 8002538:	007f7f7f 	.word	0x007f7f7f
 800253c:	fffbffff 	.word	0xfffbffff

08002540 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002540:	b5b0      	push	{r4, r5, r7, lr}
 8002542:	b086      	sub	sp, #24
 8002544:	af00      	add	r7, sp, #0
 8002546:	60f8      	str	r0, [r7, #12]
 8002548:	60b9      	str	r1, [r7, #8]
 800254a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2224      	movs	r2, #36	@ 0x24
 8002550:	5c9b      	ldrb	r3, [r3, r2]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_RTC_SetDate+0x1a>
 8002556:	2302      	movs	r3, #2
 8002558:	e07e      	b.n	8002658 <HAL_RTC_SetDate+0x118>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2224      	movs	r2, #36	@ 0x24
 800255e:	2101      	movs	r1, #1
 8002560:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2225      	movs	r2, #37	@ 0x25
 8002566:	2102      	movs	r1, #2
 8002568:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10e      	bne.n	800258e <HAL_RTC_SetDate+0x4e>
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	785b      	ldrb	r3, [r3, #1]
 8002574:	001a      	movs	r2, r3
 8002576:	2310      	movs	r3, #16
 8002578:	4013      	ands	r3, r2
 800257a:	d008      	beq.n	800258e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	785b      	ldrb	r3, [r3, #1]
 8002580:	2210      	movs	r2, #16
 8002582:	4393      	bics	r3, r2
 8002584:	b2db      	uxtb	r3, r3
 8002586:	330a      	adds	r3, #10
 8002588:	b2da      	uxtb	r2, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d11c      	bne.n	80025ce <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	78db      	ldrb	r3, [r3, #3]
 8002598:	0018      	movs	r0, r3
 800259a:	f000 fa37 	bl	8002a0c <RTC_ByteToBcd2>
 800259e:	0003      	movs	r3, r0
 80025a0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	785b      	ldrb	r3, [r3, #1]
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 fa30 	bl	8002a0c <RTC_ByteToBcd2>
 80025ac:	0003      	movs	r3, r0
 80025ae:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025b0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	789b      	ldrb	r3, [r3, #2]
 80025b6:	0018      	movs	r0, r3
 80025b8:	f000 fa28 	bl	8002a0c <RTC_ByteToBcd2>
 80025bc:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80025be:	0022      	movs	r2, r4
 80025c0:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80025c8:	4313      	orrs	r3, r2
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	e00e      	b.n	80025ec <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	78db      	ldrb	r3, [r3, #3]
 80025d2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	785b      	ldrb	r3, [r3, #1]
 80025d8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80025da:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80025dc:	68ba      	ldr	r2, [r7, #8]
 80025de:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80025e0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	781b      	ldrb	r3, [r3, #0]
 80025e6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	22ca      	movs	r2, #202	@ 0xca
 80025f2:	625a      	str	r2, [r3, #36]	@ 0x24
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	2253      	movs	r2, #83	@ 0x53
 80025fa:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80025fc:	2513      	movs	r5, #19
 80025fe:	197c      	adds	r4, r7, r5
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	0018      	movs	r0, r3
 8002604:	f000 f976 	bl	80028f4 <RTC_EnterInitMode>
 8002608:	0003      	movs	r3, r0
 800260a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800260c:	0028      	movs	r0, r5
 800260e:	183b      	adds	r3, r7, r0
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10c      	bne.n	8002630 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4910      	ldr	r1, [pc, #64]	@ (8002660 <HAL_RTC_SetDate+0x120>)
 800261e:	400a      	ands	r2, r1
 8002620:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002622:	183c      	adds	r4, r7, r0
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	0018      	movs	r0, r3
 8002628:	f000 f9ac 	bl	8002984 <RTC_ExitInitMode>
 800262c:	0003      	movs	r3, r0
 800262e:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	22ff      	movs	r2, #255	@ 0xff
 8002636:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002638:	2313      	movs	r3, #19
 800263a:	18fb      	adds	r3, r7, r3
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d103      	bne.n	800264a <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2225      	movs	r2, #37	@ 0x25
 8002646:	2101      	movs	r1, #1
 8002648:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2224      	movs	r2, #36	@ 0x24
 800264e:	2100      	movs	r1, #0
 8002650:	5499      	strb	r1, [r3, r2]

  return status;
 8002652:	2313      	movs	r3, #19
 8002654:	18fb      	adds	r3, r7, r3
 8002656:	781b      	ldrb	r3, [r3, #0]
}
 8002658:	0018      	movs	r0, r3
 800265a:	46bd      	mov	sp, r7
 800265c:	b006      	add	sp, #24
 800265e:	bdb0      	pop	{r4, r5, r7, pc}
 8002660:	00ffff3f 	.word	0x00ffff3f

08002664 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8002664:	b590      	push	{r4, r7, lr}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2224      	movs	r2, #36	@ 0x24
 8002674:	5c9b      	ldrb	r3, [r3, r2]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d101      	bne.n	800267e <HAL_RTC_SetAlarm_IT+0x1a>
 800267a:	2302      	movs	r3, #2
 800267c:	e0d6      	b.n	800282c <HAL_RTC_SetAlarm_IT+0x1c8>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2224      	movs	r2, #36	@ 0x24
 8002682:	2101      	movs	r1, #1
 8002684:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2225      	movs	r2, #37	@ 0x25
 800268a:	2102      	movs	r1, #2
 800268c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d136      	bne.n	8002702 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2240      	movs	r2, #64	@ 0x40
 800269c:	4013      	ands	r3, r2
 800269e:	d102      	bne.n	80026a6 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 f9ae 	bl	8002a0c <RTC_ByteToBcd2>
 80026b0:	0003      	movs	r3, r0
 80026b2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	785b      	ldrb	r3, [r3, #1]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f000 f9a7 	bl	8002a0c <RTC_ByteToBcd2>
 80026be:	0003      	movs	r3, r0
 80026c0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80026c2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	789b      	ldrb	r3, [r3, #2]
 80026c8:	0018      	movs	r0, r3
 80026ca:	f000 f99f 	bl	8002a0c <RTC_ByteToBcd2>
 80026ce:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80026d0:	0022      	movs	r2, r4
 80026d2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	78db      	ldrb	r3, [r3, #3]
 80026d8:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80026da:	431a      	orrs	r2, r3
 80026dc:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2220      	movs	r2, #32
 80026e2:	5c9b      	ldrb	r3, [r3, r2]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f000 f991 	bl	8002a0c <RTC_ByteToBcd2>
 80026ea:	0003      	movs	r3, r0
 80026ec:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80026ee:	0022      	movs	r2, r4
 80026f0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80026f6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80026fc:	4313      	orrs	r3, r2
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	e022      	b.n	8002748 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2240      	movs	r2, #64	@ 0x40
 800270a:	4013      	ands	r3, r2
 800270c:	d102      	bne.n	8002714 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2200      	movs	r2, #0
 8002712:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002720:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002722:	68ba      	ldr	r2, [r7, #8]
 8002724:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002726:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	78db      	ldrb	r3, [r3, #3]
 800272c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800272e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	2120      	movs	r1, #32
 8002734:	5c5b      	ldrb	r3, [r3, r1]
 8002736:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002738:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800273e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002744:	4313      	orrs	r3, r2
 8002746:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	699b      	ldr	r3, [r3, #24]
 8002750:	4313      	orrs	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	22ca      	movs	r2, #202	@ 0xca
 800275a:	625a      	str	r2, [r3, #36]	@ 0x24
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2253      	movs	r2, #83	@ 0x53
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002768:	2380      	movs	r3, #128	@ 0x80
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	429a      	cmp	r2, r3
 800276e:	d147      	bne.n	8002800 <HAL_RTC_SetAlarm_IT+0x19c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699a      	ldr	r2, [r3, #24]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	492e      	ldr	r1, [pc, #184]	@ (8002834 <HAL_RTC_SetAlarm_IT+0x1d0>)
 800277c:	400a      	ands	r2, r1
 800277e:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2201      	movs	r2, #1
 8002786:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8002788:	f7fe fdde 	bl	8001348 <HAL_GetTick>
 800278c:	0003      	movs	r3, r0
 800278e:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002790:	e016      	b.n	80027c0 <HAL_RTC_SetAlarm_IT+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002792:	f7fe fdd9 	bl	8001348 <HAL_GetTick>
 8002796:	0002      	movs	r2, r0
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad2      	subs	r2, r2, r3
 800279c:	23fa      	movs	r3, #250	@ 0xfa
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d90d      	bls.n	80027c0 <HAL_RTC_SetAlarm_IT+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	22ff      	movs	r2, #255	@ 0xff
 80027aa:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	2225      	movs	r2, #37	@ 0x25
 80027b0:	2103      	movs	r1, #3
 80027b2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	2224      	movs	r2, #36	@ 0x24
 80027b8:	2100      	movs	r1, #0
 80027ba:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e035      	b.n	800282c <HAL_RTC_SetAlarm_IT+0x1c8>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	2201      	movs	r2, #1
 80027c8:	4013      	ands	r3, r2
 80027ca:	d0e2      	beq.n	8002792 <HAL_RTC_SetAlarm_IT+0x12e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	69fa      	ldr	r2, [r7, #28]
 80027d2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	699a      	ldr	r2, [r3, #24]
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2180      	movs	r1, #128	@ 0x80
 80027e8:	0049      	lsls	r1, r1, #1
 80027ea:	430a      	orrs	r2, r1
 80027ec:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	699a      	ldr	r2, [r3, #24]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2180      	movs	r1, #128	@ 0x80
 80027fa:	0149      	lsls	r1, r1, #5
 80027fc:	430a      	orrs	r2, r1
 80027fe:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002800:	4a0d      	ldr	r2, [pc, #52]	@ (8002838 <HAL_RTC_SetAlarm_IT+0x1d4>)
 8002802:	2380      	movs	r3, #128	@ 0x80
 8002804:	58d3      	ldr	r3, [r2, r3]
 8002806:	490c      	ldr	r1, [pc, #48]	@ (8002838 <HAL_RTC_SetAlarm_IT+0x1d4>)
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	0312      	lsls	r2, r2, #12
 800280c:	4313      	orrs	r3, r2
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	22ff      	movs	r2, #255	@ 0xff
 8002818:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2225      	movs	r2, #37	@ 0x25
 800281e:	2101      	movs	r1, #1
 8002820:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2224      	movs	r2, #36	@ 0x24
 8002826:	2100      	movs	r1, #0
 8002828:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800282a:	2300      	movs	r3, #0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b009      	add	sp, #36	@ 0x24
 8002832:	bd90      	pop	{r4, r7, pc}
 8002834:	fffffeff 	.word	0xfffffeff
 8002838:	40021800 	.word	0x40021800

0800283c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b082      	sub	sp, #8
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	2380      	movs	r3, #128	@ 0x80
 800284c:	015b      	lsls	r3, r3, #5
 800284e:	4013      	ands	r3, r2
 8002850:	d00d      	beq.n	800286e <HAL_RTC_AlarmIRQHandler+0x32>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002858:	2201      	movs	r2, #1
 800285a:	4013      	ands	r3, r2
 800285c:	d007      	beq.n	800286e <HAL_RTC_AlarmIRQHandler+0x32>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	2201      	movs	r2, #1
 8002864:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	0018      	movs	r0, r3
 800286a:	f000 f808 	bl	800287e <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2225      	movs	r2, #37	@ 0x25
 8002872:	2101      	movs	r1, #1
 8002874:	5499      	strb	r1, [r3, r2]
}
 8002876:	46c0      	nop			@ (mov r8, r8)
 8002878:	46bd      	mov	sp, r7
 800287a:	b002      	add	sp, #8
 800287c:	bd80      	pop	{r7, pc}

0800287e <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 800287e:	b580      	push	{r7, lr}
 8002880:	b082      	sub	sp, #8
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	46bd      	mov	sp, r7
 800288a:	b002      	add	sp, #8
 800288c:	bd80      	pop	{r7, pc}
	...

08002890 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002898:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <HAL_RTC_WaitForSynchro+0x60>)
 800289a:	68da      	ldr	r2, [r3, #12]
 800289c:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <HAL_RTC_WaitForSynchro+0x60>)
 800289e:	2120      	movs	r1, #32
 80028a0:	438a      	bics	r2, r1
 80028a2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80028a4:	f7fe fd50 	bl	8001348 <HAL_GetTick>
 80028a8:	0003      	movs	r3, r0
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80028ac:	e013      	b.n	80028d6 <HAL_RTC_WaitForSynchro+0x46>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80028ae:	f7fe fd4b 	bl	8001348 <HAL_GetTick>
 80028b2:	0002      	movs	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad2      	subs	r2, r2, r3
 80028b8:	23fa      	movs	r3, #250	@ 0xfa
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	429a      	cmp	r2, r3
 80028be:	d90a      	bls.n	80028d6 <HAL_RTC_WaitForSynchro+0x46>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <HAL_RTC_WaitForSynchro+0x60>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2220      	movs	r2, #32
 80028c6:	4013      	ands	r3, r2
 80028c8:	d10b      	bne.n	80028e2 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2225      	movs	r2, #37	@ 0x25
 80028ce:	2103      	movs	r1, #3
 80028d0:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e007      	b.n	80028e6 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80028d6:	4b06      	ldr	r3, [pc, #24]	@ (80028f0 <HAL_RTC_WaitForSynchro+0x60>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	4013      	ands	r3, r2
 80028de:	d0e6      	beq.n	80028ae <HAL_RTC_WaitForSynchro+0x1e>
 80028e0:	e000      	b.n	80028e4 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 80028e2:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	0018      	movs	r0, r3
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b004      	add	sp, #16
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	40002800 	.word	0x40002800

080028f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80028fc:	230f      	movs	r3, #15
 80028fe:	18fb      	adds	r3, r7, r3
 8002900:	2200      	movs	r2, #0
 8002902:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002904:	4b1e      	ldr	r3, [pc, #120]	@ (8002980 <RTC_EnterInitMode+0x8c>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2240      	movs	r2, #64	@ 0x40
 800290a:	4013      	ands	r3, r2
 800290c:	d130      	bne.n	8002970 <RTC_EnterInitMode+0x7c>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800290e:	4b1c      	ldr	r3, [pc, #112]	@ (8002980 <RTC_EnterInitMode+0x8c>)
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	4b1b      	ldr	r3, [pc, #108]	@ (8002980 <RTC_EnterInitMode+0x8c>)
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	430a      	orrs	r2, r1
 8002918:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800291a:	f7fe fd15 	bl	8001348 <HAL_GetTick>
 800291e:	0003      	movs	r3, r0
 8002920:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002922:	e019      	b.n	8002958 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002924:	f7fe fd10 	bl	8001348 <HAL_GetTick>
 8002928:	0002      	movs	r2, r0
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	1ad2      	subs	r2, r2, r3
 800292e:	200f      	movs	r0, #15
 8002930:	183b      	adds	r3, r7, r0
 8002932:	1839      	adds	r1, r7, r0
 8002934:	7809      	ldrb	r1, [r1, #0]
 8002936:	7019      	strb	r1, [r3, #0]
 8002938:	23fa      	movs	r3, #250	@ 0xfa
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	429a      	cmp	r2, r3
 800293e:	d90b      	bls.n	8002958 <RTC_EnterInitMode+0x64>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002940:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <RTC_EnterInitMode+0x8c>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2240      	movs	r2, #64	@ 0x40
 8002946:	4013      	ands	r3, r2
 8002948:	d111      	bne.n	800296e <RTC_EnterInitMode+0x7a>
        {
          status = HAL_TIMEOUT;
 800294a:	183b      	adds	r3, r7, r0
 800294c:	2203      	movs	r2, #3
 800294e:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2225      	movs	r2, #37	@ 0x25
 8002954:	2103      	movs	r1, #3
 8002956:	5499      	strb	r1, [r3, r2]
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002958:	4b09      	ldr	r3, [pc, #36]	@ (8002980 <RTC_EnterInitMode+0x8c>)
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	2240      	movs	r2, #64	@ 0x40
 800295e:	4013      	ands	r3, r2
 8002960:	d106      	bne.n	8002970 <RTC_EnterInitMode+0x7c>
 8002962:	230f      	movs	r3, #15
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d1db      	bne.n	8002924 <RTC_EnterInitMode+0x30>
 800296c:	e000      	b.n	8002970 <RTC_EnterInitMode+0x7c>
        }
        else
        {
          break;
 800296e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return status;
 8002970:	230f      	movs	r3, #15
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	781b      	ldrb	r3, [r3, #0]
}
 8002976:	0018      	movs	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	b004      	add	sp, #16
 800297c:	bd80      	pop	{r7, pc}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	40002800 	.word	0x40002800

08002984 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002984:	b590      	push	{r4, r7, lr}
 8002986:	b085      	sub	sp, #20
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800298c:	240f      	movs	r4, #15
 800298e:	193b      	adds	r3, r7, r4
 8002990:	2200      	movs	r2, #0
 8002992:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002994:	4b1c      	ldr	r3, [pc, #112]	@ (8002a08 <RTC_ExitInitMode+0x84>)
 8002996:	68da      	ldr	r2, [r3, #12]
 8002998:	4b1b      	ldr	r3, [pc, #108]	@ (8002a08 <RTC_ExitInitMode+0x84>)
 800299a:	2180      	movs	r1, #128	@ 0x80
 800299c:	438a      	bics	r2, r1
 800299e:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <RTC_ExitInitMode+0x84>)
 80029a2:	699b      	ldr	r3, [r3, #24]
 80029a4:	2220      	movs	r2, #32
 80029a6:	4013      	ands	r3, r2
 80029a8:	d10d      	bne.n	80029c6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	0018      	movs	r0, r3
 80029ae:	f7ff ff6f 	bl	8002890 <HAL_RTC_WaitForSynchro>
 80029b2:	1e03      	subs	r3, r0, #0
 80029b4:	d021      	beq.n	80029fa <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2225      	movs	r2, #37	@ 0x25
 80029ba:	2103      	movs	r1, #3
 80029bc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80029be:	193b      	adds	r3, r7, r4
 80029c0:	2203      	movs	r2, #3
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e019      	b.n	80029fa <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029c6:	4b10      	ldr	r3, [pc, #64]	@ (8002a08 <RTC_ExitInitMode+0x84>)
 80029c8:	699a      	ldr	r2, [r3, #24]
 80029ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002a08 <RTC_ExitInitMode+0x84>)
 80029cc:	2120      	movs	r1, #32
 80029ce:	438a      	bics	r2, r1
 80029d0:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	0018      	movs	r0, r3
 80029d6:	f7ff ff5b 	bl	8002890 <HAL_RTC_WaitForSynchro>
 80029da:	1e03      	subs	r3, r0, #0
 80029dc:	d007      	beq.n	80029ee <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2225      	movs	r2, #37	@ 0x25
 80029e2:	2103      	movs	r1, #3
 80029e4:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80029e6:	230f      	movs	r3, #15
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	2203      	movs	r2, #3
 80029ec:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <RTC_ExitInitMode+0x84>)
 80029f0:	699a      	ldr	r2, [r3, #24]
 80029f2:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <RTC_ExitInitMode+0x84>)
 80029f4:	2120      	movs	r1, #32
 80029f6:	430a      	orrs	r2, r1
 80029f8:	619a      	str	r2, [r3, #24]
  }

  return status;
 80029fa:	230f      	movs	r3, #15
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	781b      	ldrb	r3, [r3, #0]
}
 8002a00:	0018      	movs	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	b005      	add	sp, #20
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	40002800 	.word	0x40002800

08002a0c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	0002      	movs	r2, r0
 8002a14:	1dfb      	adds	r3, r7, #7
 8002a16:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002a1c:	230b      	movs	r3, #11
 8002a1e:	18fb      	adds	r3, r7, r3
 8002a20:	1dfa      	adds	r2, r7, #7
 8002a22:	7812      	ldrb	r2, [r2, #0]
 8002a24:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002a26:	e008      	b.n	8002a3a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002a2e:	220b      	movs	r2, #11
 8002a30:	18bb      	adds	r3, r7, r2
 8002a32:	18ba      	adds	r2, r7, r2
 8002a34:	7812      	ldrb	r2, [r2, #0]
 8002a36:	3a0a      	subs	r2, #10
 8002a38:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002a3a:	210b      	movs	r1, #11
 8002a3c:	187b      	adds	r3, r7, r1
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b09      	cmp	r3, #9
 8002a42:	d8f1      	bhi.n	8002a28 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	011b      	lsls	r3, r3, #4
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	b2db      	uxtb	r3, r3
}
 8002a54:	0018      	movs	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b004      	add	sp, #16
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e046      	b.n	8002afc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2288      	movs	r2, #136	@ 0x88
 8002a72:	589b      	ldr	r3, [r3, r2]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2284      	movs	r2, #132	@ 0x84
 8002a7c:	2100      	movs	r1, #0
 8002a7e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f7fe fa92 	bl	8000fac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2288      	movs	r2, #136	@ 0x88
 8002a8c:	2124      	movs	r1, #36	@ 0x24
 8002a8e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2101      	movs	r1, #1
 8002a9c:	438a      	bics	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 fe96 	bl	80037dc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	f000 fd14 	bl	80034e0 <UART_SetConfig>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d101      	bne.n	8002ac2 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e01c      	b.n	8002afc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685a      	ldr	r2, [r3, #4]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	490d      	ldr	r1, [pc, #52]	@ (8002b04 <HAL_UART_Init+0xa8>)
 8002ace:	400a      	ands	r2, r1
 8002ad0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	212a      	movs	r1, #42	@ 0x2a
 8002ade:	438a      	bics	r2, r1
 8002ae0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2101      	movs	r1, #1
 8002aee:	430a      	orrs	r2, r1
 8002af0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	0018      	movs	r0, r3
 8002af6:	f000 ff25 	bl	8003944 <UART_CheckIdleState>
 8002afa:	0003      	movs	r3, r0
}
 8002afc:	0018      	movs	r0, r3
 8002afe:	46bd      	mov	sp, r7
 8002b00:	b002      	add	sp, #8
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	ffffb7ff 	.word	0xffffb7ff

08002b08 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b08a      	sub	sp, #40	@ 0x28
 8002b0c:	af02      	add	r7, sp, #8
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	603b      	str	r3, [r7, #0]
 8002b14:	1dbb      	adds	r3, r7, #6
 8002b16:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2288      	movs	r2, #136	@ 0x88
 8002b1c:	589b      	ldr	r3, [r3, r2]
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d000      	beq.n	8002b24 <HAL_UART_Transmit+0x1c>
 8002b22:	e090      	b.n	8002c46 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_UART_Transmit+0x2a>
 8002b2a:	1dbb      	adds	r3, r7, #6
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e088      	b.n	8002c48 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	2380      	movs	r3, #128	@ 0x80
 8002b3c:	015b      	lsls	r3, r3, #5
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d109      	bne.n	8002b56 <HAL_UART_Transmit+0x4e>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d105      	bne.n	8002b56 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d001      	beq.n	8002b56 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e078      	b.n	8002c48 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2290      	movs	r2, #144	@ 0x90
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2288      	movs	r2, #136	@ 0x88
 8002b62:	2121      	movs	r1, #33	@ 0x21
 8002b64:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b66:	f7fe fbef 	bl	8001348 <HAL_GetTick>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	1dba      	adds	r2, r7, #6
 8002b72:	2154      	movs	r1, #84	@ 0x54
 8002b74:	8812      	ldrh	r2, [r2, #0]
 8002b76:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1dba      	adds	r2, r7, #6
 8002b7c:	2156      	movs	r1, #86	@ 0x56
 8002b7e:	8812      	ldrh	r2, [r2, #0]
 8002b80:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	689a      	ldr	r2, [r3, #8]
 8002b86:	2380      	movs	r3, #128	@ 0x80
 8002b88:	015b      	lsls	r3, r3, #5
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d108      	bne.n	8002ba0 <HAL_UART_Transmit+0x98>
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d104      	bne.n	8002ba0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	61bb      	str	r3, [r7, #24]
 8002b9e:	e003      	b.n	8002ba8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ba8:	e030      	b.n	8002c0c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	0013      	movs	r3, r2
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2180      	movs	r1, #128	@ 0x80
 8002bb8:	f000 ff6e 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8002bbc:	1e03      	subs	r3, r0, #0
 8002bbe:	d005      	beq.n	8002bcc <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	2288      	movs	r2, #136	@ 0x88
 8002bc4:	2120      	movs	r1, #32
 8002bc6:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002bc8:	2303      	movs	r3, #3
 8002bca:	e03d      	b.n	8002c48 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10b      	bne.n	8002bea <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	001a      	movs	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	05d2      	lsls	r2, r2, #23
 8002bde:	0dd2      	lsrs	r2, r2, #23
 8002be0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002be2:	69bb      	ldr	r3, [r7, #24]
 8002be4:	3302      	adds	r3, #2
 8002be6:	61bb      	str	r3, [r7, #24]
 8002be8:	e007      	b.n	8002bfa <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	781a      	ldrb	r2, [r3, #0]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002bf4:	69fb      	ldr	r3, [r7, #28]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2256      	movs	r2, #86	@ 0x56
 8002bfe:	5a9b      	ldrh	r3, [r3, r2]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b299      	uxth	r1, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2256      	movs	r2, #86	@ 0x56
 8002c0a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2256      	movs	r2, #86	@ 0x56
 8002c10:	5a9b      	ldrh	r3, [r3, r2]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d1c8      	bne.n	8002baa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	0013      	movs	r3, r2
 8002c22:	2200      	movs	r2, #0
 8002c24:	2140      	movs	r1, #64	@ 0x40
 8002c26:	f000 ff37 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8002c2a:	1e03      	subs	r3, r0, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	2288      	movs	r2, #136	@ 0x88
 8002c32:	2120      	movs	r1, #32
 8002c34:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e006      	b.n	8002c48 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2288      	movs	r2, #136	@ 0x88
 8002c3e:	2120      	movs	r1, #32
 8002c40:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e000      	b.n	8002c48 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002c46:	2302      	movs	r3, #2
  }
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b008      	add	sp, #32
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b08a      	sub	sp, #40	@ 0x28
 8002c54:	af02      	add	r7, sp, #8
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	1dbb      	adds	r3, r7, #6
 8002c5e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	228c      	movs	r2, #140	@ 0x8c
 8002c64:	589b      	ldr	r3, [r3, r2]
 8002c66:	2b20      	cmp	r3, #32
 8002c68:	d000      	beq.n	8002c6c <HAL_UART_Receive+0x1c>
 8002c6a:	e0d0      	b.n	8002e0e <HAL_UART_Receive+0x1be>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d003      	beq.n	8002c7a <HAL_UART_Receive+0x2a>
 8002c72:	1dbb      	adds	r3, r7, #6
 8002c74:	881b      	ldrh	r3, [r3, #0]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e0c8      	b.n	8002e10 <HAL_UART_Receive+0x1c0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	689a      	ldr	r2, [r3, #8]
 8002c82:	2380      	movs	r3, #128	@ 0x80
 8002c84:	015b      	lsls	r3, r3, #5
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d109      	bne.n	8002c9e <HAL_UART_Receive+0x4e>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d105      	bne.n	8002c9e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2201      	movs	r2, #1
 8002c96:	4013      	ands	r3, r2
 8002c98:	d001      	beq.n	8002c9e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e0b8      	b.n	8002e10 <HAL_UART_Receive+0x1c0>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2290      	movs	r2, #144	@ 0x90
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	228c      	movs	r2, #140	@ 0x8c
 8002caa:	2122      	movs	r1, #34	@ 0x22
 8002cac:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002cb4:	f7fe fb48 	bl	8001348 <HAL_GetTick>
 8002cb8:	0003      	movs	r3, r0
 8002cba:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1dba      	adds	r2, r7, #6
 8002cc0:	215c      	movs	r1, #92	@ 0x5c
 8002cc2:	8812      	ldrh	r2, [r2, #0]
 8002cc4:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1dba      	adds	r2, r7, #6
 8002cca:	215e      	movs	r1, #94	@ 0x5e
 8002ccc:	8812      	ldrh	r2, [r2, #0]
 8002cce:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	2380      	movs	r3, #128	@ 0x80
 8002cd6:	015b      	lsls	r3, r3, #5
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d10d      	bne.n	8002cf8 <HAL_UART_Receive+0xa8>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <HAL_UART_Receive+0x9e>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2260      	movs	r2, #96	@ 0x60
 8002ce8:	494b      	ldr	r1, [pc, #300]	@ (8002e18 <HAL_UART_Receive+0x1c8>)
 8002cea:	5299      	strh	r1, [r3, r2]
 8002cec:	e02e      	b.n	8002d4c <HAL_UART_Receive+0xfc>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2260      	movs	r2, #96	@ 0x60
 8002cf2:	21ff      	movs	r1, #255	@ 0xff
 8002cf4:	5299      	strh	r1, [r3, r2]
 8002cf6:	e029      	b.n	8002d4c <HAL_UART_Receive+0xfc>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d10d      	bne.n	8002d1c <HAL_UART_Receive+0xcc>
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d104      	bne.n	8002d12 <HAL_UART_Receive+0xc2>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2260      	movs	r2, #96	@ 0x60
 8002d0c:	21ff      	movs	r1, #255	@ 0xff
 8002d0e:	5299      	strh	r1, [r3, r2]
 8002d10:	e01c      	b.n	8002d4c <HAL_UART_Receive+0xfc>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2260      	movs	r2, #96	@ 0x60
 8002d16:	217f      	movs	r1, #127	@ 0x7f
 8002d18:	5299      	strh	r1, [r3, r2]
 8002d1a:	e017      	b.n	8002d4c <HAL_UART_Receive+0xfc>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	2380      	movs	r3, #128	@ 0x80
 8002d22:	055b      	lsls	r3, r3, #21
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d10d      	bne.n	8002d44 <HAL_UART_Receive+0xf4>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d104      	bne.n	8002d3a <HAL_UART_Receive+0xea>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2260      	movs	r2, #96	@ 0x60
 8002d34:	217f      	movs	r1, #127	@ 0x7f
 8002d36:	5299      	strh	r1, [r3, r2]
 8002d38:	e008      	b.n	8002d4c <HAL_UART_Receive+0xfc>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2260      	movs	r2, #96	@ 0x60
 8002d3e:	213f      	movs	r1, #63	@ 0x3f
 8002d40:	5299      	strh	r1, [r3, r2]
 8002d42:	e003      	b.n	8002d4c <HAL_UART_Receive+0xfc>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2260      	movs	r2, #96	@ 0x60
 8002d48:	2100      	movs	r1, #0
 8002d4a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8002d4c:	2312      	movs	r3, #18
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	2160      	movs	r1, #96	@ 0x60
 8002d54:	5a52      	ldrh	r2, [r2, r1]
 8002d56:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	689a      	ldr	r2, [r3, #8]
 8002d5c:	2380      	movs	r3, #128	@ 0x80
 8002d5e:	015b      	lsls	r3, r3, #5
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d108      	bne.n	8002d76 <HAL_UART_Receive+0x126>
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d104      	bne.n	8002d76 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	61bb      	str	r3, [r7, #24]
 8002d74:	e003      	b.n	8002d7e <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d7e:	e03a      	b.n	8002df6 <HAL_UART_Receive+0x1a6>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	68f8      	ldr	r0, [r7, #12]
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	9300      	str	r3, [sp, #0]
 8002d88:	0013      	movs	r3, r2
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	2120      	movs	r1, #32
 8002d8e:	f000 fe83 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 8002d92:	1e03      	subs	r3, r0, #0
 8002d94:	d005      	beq.n	8002da2 <HAL_UART_Receive+0x152>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	228c      	movs	r2, #140	@ 0x8c
 8002d9a:	2120      	movs	r1, #32
 8002d9c:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e036      	b.n	8002e10 <HAL_UART_Receive+0x1c0>
      }
      if (pdata8bits == NULL)
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d10e      	bne.n	8002dc6 <HAL_UART_Receive+0x176>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2212      	movs	r2, #18
 8002db2:	18ba      	adds	r2, r7, r2
 8002db4:	8812      	ldrh	r2, [r2, #0]
 8002db6:	4013      	ands	r3, r2
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	3302      	adds	r3, #2
 8002dc2:	61bb      	str	r3, [r7, #24]
 8002dc4:	e00e      	b.n	8002de4 <HAL_UART_Receive+0x194>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2212      	movs	r2, #18
 8002dd0:	18ba      	adds	r2, r7, r2
 8002dd2:	8812      	ldrh	r2, [r2, #0]
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	b2da      	uxtb	r2, r3
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	3301      	adds	r3, #1
 8002de2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	225e      	movs	r2, #94	@ 0x5e
 8002de8:	5a9b      	ldrh	r3, [r3, r2]
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	3b01      	subs	r3, #1
 8002dee:	b299      	uxth	r1, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	225e      	movs	r2, #94	@ 0x5e
 8002df4:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	225e      	movs	r2, #94	@ 0x5e
 8002dfa:	5a9b      	ldrh	r3, [r3, r2]
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1be      	bne.n	8002d80 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	228c      	movs	r2, #140	@ 0x8c
 8002e06:	2120      	movs	r1, #32
 8002e08:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_UART_Receive+0x1c0>
  }
  else
  {
    return HAL_BUSY;
 8002e0e:	2302      	movs	r3, #2
  }
}
 8002e10:	0018      	movs	r0, r3
 8002e12:	46bd      	mov	sp, r7
 8002e14:	b008      	add	sp, #32
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	000001ff 	.word	0x000001ff

08002e1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e1c:	b5b0      	push	{r4, r5, r7, lr}
 8002e1e:	b0aa      	sub	sp, #168	@ 0xa8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	69db      	ldr	r3, [r3, #28]
 8002e2a:	22a4      	movs	r2, #164	@ 0xa4
 8002e2c:	18b9      	adds	r1, r7, r2
 8002e2e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	20a0      	movs	r0, #160	@ 0xa0
 8002e38:	1839      	adds	r1, r7, r0
 8002e3a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	249c      	movs	r4, #156	@ 0x9c
 8002e44:	1939      	adds	r1, r7, r4
 8002e46:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002e48:	0011      	movs	r1, r2
 8002e4a:	18bb      	adds	r3, r7, r2
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4aa2      	ldr	r2, [pc, #648]	@ (80030d8 <HAL_UART_IRQHandler+0x2bc>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	2298      	movs	r2, #152	@ 0x98
 8002e54:	18bd      	adds	r5, r7, r2
 8002e56:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002e58:	18bb      	adds	r3, r7, r2
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d11a      	bne.n	8002e96 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002e60:	187b      	adds	r3, r7, r1
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2220      	movs	r2, #32
 8002e66:	4013      	ands	r3, r2
 8002e68:	d015      	beq.n	8002e96 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002e6a:	183b      	adds	r3, r7, r0
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	4013      	ands	r3, r2
 8002e72:	d105      	bne.n	8002e80 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002e74:	193b      	adds	r3, r7, r4
 8002e76:	681a      	ldr	r2, [r3, #0]
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	055b      	lsls	r3, r3, #21
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	d00a      	beq.n	8002e96 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d100      	bne.n	8002e8a <HAL_UART_IRQHandler+0x6e>
 8002e88:	e2fb      	b.n	8003482 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	0010      	movs	r0, r2
 8002e92:	4798      	blx	r3
      }
      return;
 8002e94:	e2f5      	b.n	8003482 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002e96:	2398      	movs	r3, #152	@ 0x98
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d100      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x86>
 8002ea0:	e122      	b.n	80030e8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002ea2:	239c      	movs	r3, #156	@ 0x9c
 8002ea4:	18fb      	adds	r3, r7, r3
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a8c      	ldr	r2, [pc, #560]	@ (80030dc <HAL_UART_IRQHandler+0x2c0>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d106      	bne.n	8002ebc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002eae:	23a0      	movs	r3, #160	@ 0xa0
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a8a      	ldr	r2, [pc, #552]	@ (80030e0 <HAL_UART_IRQHandler+0x2c4>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d100      	bne.n	8002ebc <HAL_UART_IRQHandler+0xa0>
 8002eba:	e115      	b.n	80030e8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ebc:	23a4      	movs	r3, #164	@ 0xa4
 8002ebe:	18fb      	adds	r3, r7, r3
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	d012      	beq.n	8002eee <HAL_UART_IRQHandler+0xd2>
 8002ec8:	23a0      	movs	r3, #160	@ 0xa0
 8002eca:	18fb      	adds	r3, r7, r3
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	2380      	movs	r3, #128	@ 0x80
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	d00b      	beq.n	8002eee <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2201      	movs	r2, #1
 8002edc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2290      	movs	r2, #144	@ 0x90
 8002ee2:	589b      	ldr	r3, [r3, r2]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2190      	movs	r1, #144	@ 0x90
 8002eec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002eee:	23a4      	movs	r3, #164	@ 0xa4
 8002ef0:	18fb      	adds	r3, r7, r3
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	d011      	beq.n	8002f1e <HAL_UART_IRQHandler+0x102>
 8002efa:	239c      	movs	r3, #156	@ 0x9c
 8002efc:	18fb      	adds	r3, r7, r3
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2201      	movs	r2, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d00b      	beq.n	8002f1e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2290      	movs	r2, #144	@ 0x90
 8002f12:	589b      	ldr	r3, [r3, r2]
 8002f14:	2204      	movs	r2, #4
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2190      	movs	r1, #144	@ 0x90
 8002f1c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f1e:	23a4      	movs	r3, #164	@ 0xa4
 8002f20:	18fb      	adds	r3, r7, r3
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2204      	movs	r2, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	d011      	beq.n	8002f4e <HAL_UART_IRQHandler+0x132>
 8002f2a:	239c      	movs	r3, #156	@ 0x9c
 8002f2c:	18fb      	adds	r3, r7, r3
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2201      	movs	r2, #1
 8002f32:	4013      	ands	r3, r2
 8002f34:	d00b      	beq.n	8002f4e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2204      	movs	r2, #4
 8002f3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2290      	movs	r2, #144	@ 0x90
 8002f42:	589b      	ldr	r3, [r3, r2]
 8002f44:	2202      	movs	r2, #2
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2190      	movs	r1, #144	@ 0x90
 8002f4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002f4e:	23a4      	movs	r3, #164	@ 0xa4
 8002f50:	18fb      	adds	r3, r7, r3
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2208      	movs	r2, #8
 8002f56:	4013      	ands	r3, r2
 8002f58:	d017      	beq.n	8002f8a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f5a:	23a0      	movs	r3, #160	@ 0xa0
 8002f5c:	18fb      	adds	r3, r7, r3
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2220      	movs	r2, #32
 8002f62:	4013      	ands	r3, r2
 8002f64:	d105      	bne.n	8002f72 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002f66:	239c      	movs	r3, #156	@ 0x9c
 8002f68:	18fb      	adds	r3, r7, r3
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a5b      	ldr	r2, [pc, #364]	@ (80030dc <HAL_UART_IRQHandler+0x2c0>)
 8002f6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002f70:	d00b      	beq.n	8002f8a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2208      	movs	r2, #8
 8002f78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2290      	movs	r2, #144	@ 0x90
 8002f7e:	589b      	ldr	r3, [r3, r2]
 8002f80:	2208      	movs	r2, #8
 8002f82:	431a      	orrs	r2, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2190      	movs	r1, #144	@ 0x90
 8002f88:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002f8a:	23a4      	movs	r3, #164	@ 0xa4
 8002f8c:	18fb      	adds	r3, r7, r3
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	2380      	movs	r3, #128	@ 0x80
 8002f92:	011b      	lsls	r3, r3, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d013      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x1a4>
 8002f98:	23a0      	movs	r3, #160	@ 0xa0
 8002f9a:	18fb      	adds	r3, r7, r3
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	2380      	movs	r3, #128	@ 0x80
 8002fa0:	04db      	lsls	r3, r3, #19
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	d00c      	beq.n	8002fc0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	2280      	movs	r2, #128	@ 0x80
 8002fac:	0112      	lsls	r2, r2, #4
 8002fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2290      	movs	r2, #144	@ 0x90
 8002fb4:	589b      	ldr	r3, [r3, r2]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2190      	movs	r1, #144	@ 0x90
 8002fbe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2290      	movs	r2, #144	@ 0x90
 8002fc4:	589b      	ldr	r3, [r3, r2]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d100      	bne.n	8002fcc <HAL_UART_IRQHandler+0x1b0>
 8002fca:	e25c      	b.n	8003486 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fcc:	23a4      	movs	r3, #164	@ 0xa4
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d015      	beq.n	8003004 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fd8:	23a0      	movs	r3, #160	@ 0xa0
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d106      	bne.n	8002ff2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fe4:	239c      	movs	r3, #156	@ 0x9c
 8002fe6:	18fb      	adds	r3, r7, r3
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	2380      	movs	r3, #128	@ 0x80
 8002fec:	055b      	lsls	r3, r3, #21
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d008      	beq.n	8003004 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	0010      	movs	r0, r2
 8003002:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2290      	movs	r2, #144	@ 0x90
 8003008:	589b      	ldr	r3, [r3, r2]
 800300a:	2194      	movs	r1, #148	@ 0x94
 800300c:	187a      	adds	r2, r7, r1
 800300e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2240      	movs	r2, #64	@ 0x40
 8003018:	4013      	ands	r3, r2
 800301a:	2b40      	cmp	r3, #64	@ 0x40
 800301c:	d004      	beq.n	8003028 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800301e:	187b      	adds	r3, r7, r1
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2228      	movs	r2, #40	@ 0x28
 8003024:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003026:	d04c      	beq.n	80030c2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	0018      	movs	r0, r3
 800302c:	f000 fda4 	bl	8003b78 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	2240      	movs	r2, #64	@ 0x40
 8003038:	4013      	ands	r3, r2
 800303a:	2b40      	cmp	r3, #64	@ 0x40
 800303c:	d13c      	bne.n	80030b8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800303e:	f3ef 8310 	mrs	r3, PRIMASK
 8003042:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8003044:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003046:	2090      	movs	r0, #144	@ 0x90
 8003048:	183a      	adds	r2, r7, r0
 800304a:	6013      	str	r3, [r2, #0]
 800304c:	2301      	movs	r3, #1
 800304e:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003050:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003052:	f383 8810 	msr	PRIMASK, r3
}
 8003056:	46c0      	nop			@ (mov r8, r8)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	2140      	movs	r1, #64	@ 0x40
 8003064:	438a      	bics	r2, r1
 8003066:	609a      	str	r2, [r3, #8]
 8003068:	183b      	adds	r3, r7, r0
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003070:	f383 8810 	msr	PRIMASK, r3
}
 8003074:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2280      	movs	r2, #128	@ 0x80
 800307a:	589b      	ldr	r3, [r3, r2]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d016      	beq.n	80030ae <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2280      	movs	r2, #128	@ 0x80
 8003084:	589b      	ldr	r3, [r3, r2]
 8003086:	4a17      	ldr	r2, [pc, #92]	@ (80030e4 <HAL_UART_IRQHandler+0x2c8>)
 8003088:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2280      	movs	r2, #128	@ 0x80
 800308e:	589b      	ldr	r3, [r3, r2]
 8003090:	0018      	movs	r0, r3
 8003092:	f7fe fac7 	bl	8001624 <HAL_DMA_Abort_IT>
 8003096:	1e03      	subs	r3, r0, #0
 8003098:	d01c      	beq.n	80030d4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2280      	movs	r2, #128	@ 0x80
 800309e:	589b      	ldr	r3, [r3, r2]
 80030a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	2180      	movs	r1, #128	@ 0x80
 80030a6:	5852      	ldr	r2, [r2, r1]
 80030a8:	0010      	movs	r0, r2
 80030aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030ac:	e012      	b.n	80030d4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f000 fa01 	bl	80034b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030b6:	e00d      	b.n	80030d4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 f9fc 	bl	80034b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	e008      	b.n	80030d4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 f9f7 	bl	80034b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2290      	movs	r2, #144	@ 0x90
 80030ce:	2100      	movs	r1, #0
 80030d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80030d2:	e1d8      	b.n	8003486 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d4:	46c0      	nop			@ (mov r8, r8)
    return;
 80030d6:	e1d6      	b.n	8003486 <HAL_UART_IRQHandler+0x66a>
 80030d8:	0000080f 	.word	0x0000080f
 80030dc:	10000001 	.word	0x10000001
 80030e0:	04000120 	.word	0x04000120
 80030e4:	08003c45 	.word	0x08003c45

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d000      	beq.n	80030f2 <HAL_UART_IRQHandler+0x2d6>
 80030f0:	e15d      	b.n	80033ae <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80030f2:	23a4      	movs	r3, #164	@ 0xa4
 80030f4:	18fb      	adds	r3, r7, r3
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2210      	movs	r2, #16
 80030fa:	4013      	ands	r3, r2
 80030fc:	d100      	bne.n	8003100 <HAL_UART_IRQHandler+0x2e4>
 80030fe:	e156      	b.n	80033ae <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003100:	23a0      	movs	r3, #160	@ 0xa0
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2210      	movs	r2, #16
 8003108:	4013      	ands	r3, r2
 800310a:	d100      	bne.n	800310e <HAL_UART_IRQHandler+0x2f2>
 800310c:	e14f      	b.n	80033ae <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2210      	movs	r2, #16
 8003114:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2240      	movs	r2, #64	@ 0x40
 800311e:	4013      	ands	r3, r2
 8003120:	2b40      	cmp	r3, #64	@ 0x40
 8003122:	d000      	beq.n	8003126 <HAL_UART_IRQHandler+0x30a>
 8003124:	e0c3      	b.n	80032ae <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2280      	movs	r2, #128	@ 0x80
 800312a:	589b      	ldr	r3, [r3, r2]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685a      	ldr	r2, [r3, #4]
 8003130:	217e      	movs	r1, #126	@ 0x7e
 8003132:	187b      	adds	r3, r7, r1
 8003134:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003136:	187b      	adds	r3, r7, r1
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d100      	bne.n	8003140 <HAL_UART_IRQHandler+0x324>
 800313e:	e097      	b.n	8003270 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	225c      	movs	r2, #92	@ 0x5c
 8003144:	5a9b      	ldrh	r3, [r3, r2]
 8003146:	187a      	adds	r2, r7, r1
 8003148:	8812      	ldrh	r2, [r2, #0]
 800314a:	429a      	cmp	r2, r3
 800314c:	d300      	bcc.n	8003150 <HAL_UART_IRQHandler+0x334>
 800314e:	e08f      	b.n	8003270 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	187a      	adds	r2, r7, r1
 8003154:	215e      	movs	r1, #94	@ 0x5e
 8003156:	8812      	ldrh	r2, [r2, #0]
 8003158:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2280      	movs	r2, #128	@ 0x80
 800315e:	589b      	ldr	r3, [r3, r2]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2220      	movs	r2, #32
 8003166:	4013      	ands	r3, r2
 8003168:	d170      	bne.n	800324c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800316a:	f3ef 8310 	mrs	r3, PRIMASK
 800316e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003170:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003172:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003174:	2301      	movs	r3, #1
 8003176:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800317a:	f383 8810 	msr	PRIMASK, r3
}
 800317e:	46c0      	nop			@ (mov r8, r8)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	49c4      	ldr	r1, [pc, #784]	@ (800349c <HAL_UART_IRQHandler+0x680>)
 800318c:	400a      	ands	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003192:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003194:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003196:	f383 8810 	msr	PRIMASK, r3
}
 800319a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800319c:	f3ef 8310 	mrs	r3, PRIMASK
 80031a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80031a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a4:	677b      	str	r3, [r7, #116]	@ 0x74
 80031a6:	2301      	movs	r3, #1
 80031a8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031ac:	f383 8810 	msr	PRIMASK, r3
}
 80031b0:	46c0      	nop			@ (mov r8, r8)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2101      	movs	r1, #1
 80031be:	438a      	bics	r2, r1
 80031c0:	609a      	str	r2, [r3, #8]
 80031c2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031c4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031c8:	f383 8810 	msr	PRIMASK, r3
}
 80031cc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031ce:	f3ef 8310 	mrs	r3, PRIMASK
 80031d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80031d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d6:	673b      	str	r3, [r7, #112]	@ 0x70
 80031d8:	2301      	movs	r3, #1
 80031da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80031de:	f383 8810 	msr	PRIMASK, r3
}
 80031e2:	46c0      	nop			@ (mov r8, r8)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2140      	movs	r1, #64	@ 0x40
 80031f0:	438a      	bics	r2, r1
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031f6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031fa:	f383 8810 	msr	PRIMASK, r3
}
 80031fe:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	228c      	movs	r2, #140	@ 0x8c
 8003204:	2120      	movs	r1, #32
 8003206:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800320e:	f3ef 8310 	mrs	r3, PRIMASK
 8003212:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003214:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003216:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003218:	2301      	movs	r3, #1
 800321a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800321e:	f383 8810 	msr	PRIMASK, r3
}
 8003222:	46c0      	nop			@ (mov r8, r8)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2110      	movs	r1, #16
 8003230:	438a      	bics	r2, r1
 8003232:	601a      	str	r2, [r3, #0]
 8003234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003236:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003238:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800323a:	f383 8810 	msr	PRIMASK, r3
}
 800323e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2280      	movs	r2, #128	@ 0x80
 8003244:	589b      	ldr	r3, [r3, r2]
 8003246:	0018      	movs	r0, r3
 8003248:	f7fe f98a 	bl	8001560 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2202      	movs	r2, #2
 8003250:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	225c      	movs	r2, #92	@ 0x5c
 8003256:	5a9a      	ldrh	r2, [r3, r2]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	215e      	movs	r1, #94	@ 0x5e
 800325c:	5a5b      	ldrh	r3, [r3, r1]
 800325e:	b29b      	uxth	r3, r3
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	0011      	movs	r1, r2
 8003268:	0018      	movs	r0, r3
 800326a:	f000 f92d 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800326e:	e10c      	b.n	800348a <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	225c      	movs	r2, #92	@ 0x5c
 8003274:	5a9b      	ldrh	r3, [r3, r2]
 8003276:	227e      	movs	r2, #126	@ 0x7e
 8003278:	18ba      	adds	r2, r7, r2
 800327a:	8812      	ldrh	r2, [r2, #0]
 800327c:	429a      	cmp	r2, r3
 800327e:	d000      	beq.n	8003282 <HAL_UART_IRQHandler+0x466>
 8003280:	e103      	b.n	800348a <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2280      	movs	r2, #128	@ 0x80
 8003286:	589b      	ldr	r3, [r3, r2]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2220      	movs	r2, #32
 800328e:	4013      	ands	r3, r2
 8003290:	2b20      	cmp	r3, #32
 8003292:	d000      	beq.n	8003296 <HAL_UART_IRQHandler+0x47a>
 8003294:	e0f9      	b.n	800348a <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2202      	movs	r2, #2
 800329a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	225c      	movs	r2, #92	@ 0x5c
 80032a0:	5a9a      	ldrh	r2, [r3, r2]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	0011      	movs	r1, r2
 80032a6:	0018      	movs	r0, r3
 80032a8:	f000 f90e 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
      return;
 80032ac:	e0ed      	b.n	800348a <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	225c      	movs	r2, #92	@ 0x5c
 80032b2:	5a99      	ldrh	r1, [r3, r2]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	225e      	movs	r2, #94	@ 0x5e
 80032b8:	5a9b      	ldrh	r3, [r3, r2]
 80032ba:	b29a      	uxth	r2, r3
 80032bc:	208e      	movs	r0, #142	@ 0x8e
 80032be:	183b      	adds	r3, r7, r0
 80032c0:	1a8a      	subs	r2, r1, r2
 80032c2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	225e      	movs	r2, #94	@ 0x5e
 80032c8:	5a9b      	ldrh	r3, [r3, r2]
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d100      	bne.n	80032d2 <HAL_UART_IRQHandler+0x4b6>
 80032d0:	e0dd      	b.n	800348e <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 80032d2:	183b      	adds	r3, r7, r0
 80032d4:	881b      	ldrh	r3, [r3, #0]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d100      	bne.n	80032dc <HAL_UART_IRQHandler+0x4c0>
 80032da:	e0d8      	b.n	800348e <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032dc:	f3ef 8310 	mrs	r3, PRIMASK
 80032e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80032e2:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032e4:	2488      	movs	r4, #136	@ 0x88
 80032e6:	193a      	adds	r2, r7, r4
 80032e8:	6013      	str	r3, [r2, #0]
 80032ea:	2301      	movs	r3, #1
 80032ec:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	f383 8810 	msr	PRIMASK, r3
}
 80032f4:	46c0      	nop			@ (mov r8, r8)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4967      	ldr	r1, [pc, #412]	@ (80034a0 <HAL_UART_IRQHandler+0x684>)
 8003302:	400a      	ands	r2, r1
 8003304:	601a      	str	r2, [r3, #0]
 8003306:	193b      	adds	r3, r7, r4
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f383 8810 	msr	PRIMASK, r3
}
 8003312:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003314:	f3ef 8310 	mrs	r3, PRIMASK
 8003318:	61bb      	str	r3, [r7, #24]
  return(result);
 800331a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800331c:	2484      	movs	r4, #132	@ 0x84
 800331e:	193a      	adds	r2, r7, r4
 8003320:	6013      	str	r3, [r2, #0]
 8003322:	2301      	movs	r3, #1
 8003324:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	f383 8810 	msr	PRIMASK, r3
}
 800332c:	46c0      	nop			@ (mov r8, r8)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	495a      	ldr	r1, [pc, #360]	@ (80034a4 <HAL_UART_IRQHandler+0x688>)
 800333a:	400a      	ands	r2, r1
 800333c:	609a      	str	r2, [r3, #8]
 800333e:	193b      	adds	r3, r7, r4
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	f383 8810 	msr	PRIMASK, r3
}
 800334a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	228c      	movs	r2, #140	@ 0x8c
 8003350:	2120      	movs	r1, #32
 8003352:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2200      	movs	r2, #0
 8003358:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003360:	f3ef 8310 	mrs	r3, PRIMASK
 8003364:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003368:	2480      	movs	r4, #128	@ 0x80
 800336a:	193a      	adds	r2, r7, r4
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	2301      	movs	r3, #1
 8003370:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003374:	f383 8810 	msr	PRIMASK, r3
}
 8003378:	46c0      	nop			@ (mov r8, r8)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2110      	movs	r1, #16
 8003386:	438a      	bics	r2, r1
 8003388:	601a      	str	r2, [r3, #0]
 800338a:	193b      	adds	r3, r7, r4
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003392:	f383 8810 	msr	PRIMASK, r3
}
 8003396:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2202      	movs	r2, #2
 800339c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800339e:	183b      	adds	r3, r7, r0
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0011      	movs	r1, r2
 80033a6:	0018      	movs	r0, r3
 80033a8:	f000 f88e 	bl	80034c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ac:	e06f      	b.n	800348e <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033ae:	23a4      	movs	r3, #164	@ 0xa4
 80033b0:	18fb      	adds	r3, r7, r3
 80033b2:	681a      	ldr	r2, [r3, #0]
 80033b4:	2380      	movs	r3, #128	@ 0x80
 80033b6:	035b      	lsls	r3, r3, #13
 80033b8:	4013      	ands	r3, r2
 80033ba:	d010      	beq.n	80033de <HAL_UART_IRQHandler+0x5c2>
 80033bc:	239c      	movs	r3, #156	@ 0x9c
 80033be:	18fb      	adds	r3, r7, r3
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	2380      	movs	r3, #128	@ 0x80
 80033c4:	03db      	lsls	r3, r3, #15
 80033c6:	4013      	ands	r3, r2
 80033c8:	d009      	beq.n	80033de <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2280      	movs	r2, #128	@ 0x80
 80033d0:	0352      	lsls	r2, r2, #13
 80033d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 fc77 	bl	8003cca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80033dc:	e05a      	b.n	8003494 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80033de:	23a4      	movs	r3, #164	@ 0xa4
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	4013      	ands	r3, r2
 80033e8:	d016      	beq.n	8003418 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80033ea:	23a0      	movs	r3, #160	@ 0xa0
 80033ec:	18fb      	adds	r3, r7, r3
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2280      	movs	r2, #128	@ 0x80
 80033f2:	4013      	ands	r3, r2
 80033f4:	d106      	bne.n	8003404 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80033f6:	239c      	movs	r3, #156	@ 0x9c
 80033f8:	18fb      	adds	r3, r7, r3
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	2380      	movs	r3, #128	@ 0x80
 80033fe:	041b      	lsls	r3, r3, #16
 8003400:	4013      	ands	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003408:	2b00      	cmp	r3, #0
 800340a:	d042      	beq.n	8003492 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	0010      	movs	r0, r2
 8003414:	4798      	blx	r3
    }
    return;
 8003416:	e03c      	b.n	8003492 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003418:	23a4      	movs	r3, #164	@ 0xa4
 800341a:	18fb      	adds	r3, r7, r3
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2240      	movs	r2, #64	@ 0x40
 8003420:	4013      	ands	r3, r2
 8003422:	d00a      	beq.n	800343a <HAL_UART_IRQHandler+0x61e>
 8003424:	23a0      	movs	r3, #160	@ 0xa0
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2240      	movs	r2, #64	@ 0x40
 800342c:	4013      	ands	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	0018      	movs	r0, r3
 8003434:	f000 fc1d 	bl	8003c72 <UART_EndTransmit_IT>
    return;
 8003438:	e02c      	b.n	8003494 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800343a:	23a4      	movs	r3, #164	@ 0xa4
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	2380      	movs	r3, #128	@ 0x80
 8003442:	041b      	lsls	r3, r3, #16
 8003444:	4013      	ands	r3, r2
 8003446:	d00b      	beq.n	8003460 <HAL_UART_IRQHandler+0x644>
 8003448:	23a0      	movs	r3, #160	@ 0xa0
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	2380      	movs	r3, #128	@ 0x80
 8003450:	05db      	lsls	r3, r3, #23
 8003452:	4013      	ands	r3, r2
 8003454:	d004      	beq.n	8003460 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	0018      	movs	r0, r3
 800345a:	f000 fc46 	bl	8003cea <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800345e:	e019      	b.n	8003494 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003460:	23a4      	movs	r3, #164	@ 0xa4
 8003462:	18fb      	adds	r3, r7, r3
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	2380      	movs	r3, #128	@ 0x80
 8003468:	045b      	lsls	r3, r3, #17
 800346a:	4013      	ands	r3, r2
 800346c:	d012      	beq.n	8003494 <HAL_UART_IRQHandler+0x678>
 800346e:	23a0      	movs	r3, #160	@ 0xa0
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	da0d      	bge.n	8003494 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	0018      	movs	r0, r3
 800347c:	f000 fc2d 	bl	8003cda <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003480:	e008      	b.n	8003494 <HAL_UART_IRQHandler+0x678>
      return;
 8003482:	46c0      	nop			@ (mov r8, r8)
 8003484:	e006      	b.n	8003494 <HAL_UART_IRQHandler+0x678>
    return;
 8003486:	46c0      	nop			@ (mov r8, r8)
 8003488:	e004      	b.n	8003494 <HAL_UART_IRQHandler+0x678>
      return;
 800348a:	46c0      	nop			@ (mov r8, r8)
 800348c:	e002      	b.n	8003494 <HAL_UART_IRQHandler+0x678>
      return;
 800348e:	46c0      	nop			@ (mov r8, r8)
 8003490:	e000      	b.n	8003494 <HAL_UART_IRQHandler+0x678>
    return;
 8003492:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003494:	46bd      	mov	sp, r7
 8003496:	b02a      	add	sp, #168	@ 0xa8
 8003498:	bdb0      	pop	{r4, r5, r7, pc}
 800349a:	46c0      	nop			@ (mov r8, r8)
 800349c:	fffffeff 	.word	0xfffffeff
 80034a0:	fffffedf 	.word	0xfffffedf
 80034a4:	effffffe 	.word	0xeffffffe

080034a8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80034c0:	46c0      	nop			@ (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	000a      	movs	r2, r1
 80034d2:	1cbb      	adds	r3, r7, #2
 80034d4:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80034d6:	46c0      	nop			@ (mov r8, r8)
 80034d8:	46bd      	mov	sp, r7
 80034da:	b002      	add	sp, #8
 80034dc:	bd80      	pop	{r7, pc}
	...

080034e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80034e8:	231e      	movs	r3, #30
 80034ea:	18fb      	adds	r3, r7, r3
 80034ec:	2200      	movs	r2, #0
 80034ee:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	431a      	orrs	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	431a      	orrs	r2, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4aab      	ldr	r2, [pc, #684]	@ (80037bc <UART_SetConfig+0x2dc>)
 8003510:	4013      	ands	r3, r2
 8003512:	0019      	movs	r1, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	430a      	orrs	r2, r1
 800351c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4aa6      	ldr	r2, [pc, #664]	@ (80037c0 <UART_SetConfig+0x2e0>)
 8003526:	4013      	ands	r3, r2
 8003528:	0019      	movs	r1, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68da      	ldr	r2, [r3, #12]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	697a      	ldr	r2, [r7, #20]
 8003542:	4313      	orrs	r3, r2
 8003544:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	4a9d      	ldr	r2, [pc, #628]	@ (80037c4 <UART_SetConfig+0x2e4>)
 800354e:	4013      	ands	r3, r2
 8003550:	0019      	movs	r1, r3
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	697a      	ldr	r2, [r7, #20]
 8003558:	430a      	orrs	r2, r1
 800355a:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003562:	220f      	movs	r2, #15
 8003564:	4393      	bics	r3, r2
 8003566:	0019      	movs	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a93      	ldr	r2, [pc, #588]	@ (80037c8 <UART_SetConfig+0x2e8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d127      	bne.n	80035ce <UART_SetConfig+0xee>
 800357e:	4b93      	ldr	r3, [pc, #588]	@ (80037cc <UART_SetConfig+0x2ec>)
 8003580:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003582:	2203      	movs	r2, #3
 8003584:	4013      	ands	r3, r2
 8003586:	2b03      	cmp	r3, #3
 8003588:	d017      	beq.n	80035ba <UART_SetConfig+0xda>
 800358a:	d81b      	bhi.n	80035c4 <UART_SetConfig+0xe4>
 800358c:	2b02      	cmp	r3, #2
 800358e:	d00a      	beq.n	80035a6 <UART_SetConfig+0xc6>
 8003590:	d818      	bhi.n	80035c4 <UART_SetConfig+0xe4>
 8003592:	2b00      	cmp	r3, #0
 8003594:	d002      	beq.n	800359c <UART_SetConfig+0xbc>
 8003596:	2b01      	cmp	r3, #1
 8003598:	d00a      	beq.n	80035b0 <UART_SetConfig+0xd0>
 800359a:	e013      	b.n	80035c4 <UART_SetConfig+0xe4>
 800359c:	231f      	movs	r3, #31
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	2200      	movs	r2, #0
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	e021      	b.n	80035ea <UART_SetConfig+0x10a>
 80035a6:	231f      	movs	r3, #31
 80035a8:	18fb      	adds	r3, r7, r3
 80035aa:	2202      	movs	r2, #2
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	e01c      	b.n	80035ea <UART_SetConfig+0x10a>
 80035b0:	231f      	movs	r3, #31
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	2204      	movs	r2, #4
 80035b6:	701a      	strb	r2, [r3, #0]
 80035b8:	e017      	b.n	80035ea <UART_SetConfig+0x10a>
 80035ba:	231f      	movs	r3, #31
 80035bc:	18fb      	adds	r3, r7, r3
 80035be:	2208      	movs	r2, #8
 80035c0:	701a      	strb	r2, [r3, #0]
 80035c2:	e012      	b.n	80035ea <UART_SetConfig+0x10a>
 80035c4:	231f      	movs	r3, #31
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2210      	movs	r2, #16
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e00d      	b.n	80035ea <UART_SetConfig+0x10a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a7f      	ldr	r2, [pc, #508]	@ (80037d0 <UART_SetConfig+0x2f0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d104      	bne.n	80035e2 <UART_SetConfig+0x102>
 80035d8:	231f      	movs	r3, #31
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
 80035e0:	e003      	b.n	80035ea <UART_SetConfig+0x10a>
 80035e2:	231f      	movs	r3, #31
 80035e4:	18fb      	adds	r3, r7, r3
 80035e6:	2210      	movs	r2, #16
 80035e8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	69da      	ldr	r2, [r3, #28]
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d000      	beq.n	80035f8 <UART_SetConfig+0x118>
 80035f6:	e06f      	b.n	80036d8 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80035f8:	231f      	movs	r3, #31
 80035fa:	18fb      	adds	r3, r7, r3
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d01f      	beq.n	8003642 <UART_SetConfig+0x162>
 8003602:	dc22      	bgt.n	800364a <UART_SetConfig+0x16a>
 8003604:	2b04      	cmp	r3, #4
 8003606:	d017      	beq.n	8003638 <UART_SetConfig+0x158>
 8003608:	dc1f      	bgt.n	800364a <UART_SetConfig+0x16a>
 800360a:	2b00      	cmp	r3, #0
 800360c:	d002      	beq.n	8003614 <UART_SetConfig+0x134>
 800360e:	2b02      	cmp	r3, #2
 8003610:	d005      	beq.n	800361e <UART_SetConfig+0x13e>
 8003612:	e01a      	b.n	800364a <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003614:	f7fe fd5a 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8003618:	0003      	movs	r3, r0
 800361a:	61bb      	str	r3, [r7, #24]
        break;
 800361c:	e01c      	b.n	8003658 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800361e:	4b6b      	ldr	r3, [pc, #428]	@ (80037cc <UART_SetConfig+0x2ec>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2207      	movs	r2, #7
 8003626:	4013      	ands	r3, r2
 8003628:	3301      	adds	r3, #1
 800362a:	0019      	movs	r1, r3
 800362c:	4869      	ldr	r0, [pc, #420]	@ (80037d4 <UART_SetConfig+0x2f4>)
 800362e:	f7fc fd7d 	bl	800012c <__udivsi3>
 8003632:	0003      	movs	r3, r0
 8003634:	61bb      	str	r3, [r7, #24]
        break;
 8003636:	e00f      	b.n	8003658 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003638:	f7fe fcda 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 800363c:	0003      	movs	r3, r0
 800363e:	61bb      	str	r3, [r7, #24]
        break;
 8003640:	e00a      	b.n	8003658 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003642:	2380      	movs	r3, #128	@ 0x80
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	61bb      	str	r3, [r7, #24]
        break;
 8003648:	e006      	b.n	8003658 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800364e:	231e      	movs	r3, #30
 8003650:	18fb      	adds	r3, r7, r3
 8003652:	2201      	movs	r2, #1
 8003654:	701a      	strb	r2, [r3, #0]
        break;
 8003656:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d100      	bne.n	8003660 <UART_SetConfig+0x180>
 800365e:	e097      	b.n	8003790 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003664:	4b5c      	ldr	r3, [pc, #368]	@ (80037d8 <UART_SetConfig+0x2f8>)
 8003666:	0052      	lsls	r2, r2, #1
 8003668:	5ad3      	ldrh	r3, [r2, r3]
 800366a:	0019      	movs	r1, r3
 800366c:	69b8      	ldr	r0, [r7, #24]
 800366e:	f7fc fd5d 	bl	800012c <__udivsi3>
 8003672:	0003      	movs	r3, r0
 8003674:	005a      	lsls	r2, r3, #1
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	085b      	lsrs	r3, r3, #1
 800367c:	18d2      	adds	r2, r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	0019      	movs	r1, r3
 8003684:	0010      	movs	r0, r2
 8003686:	f7fc fd51 	bl	800012c <__udivsi3>
 800368a:	0003      	movs	r3, r0
 800368c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	2b0f      	cmp	r3, #15
 8003692:	d91c      	bls.n	80036ce <UART_SetConfig+0x1ee>
 8003694:	693a      	ldr	r2, [r7, #16]
 8003696:	2380      	movs	r3, #128	@ 0x80
 8003698:	025b      	lsls	r3, r3, #9
 800369a:	429a      	cmp	r2, r3
 800369c:	d217      	bcs.n	80036ce <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	200e      	movs	r0, #14
 80036a4:	183b      	adds	r3, r7, r0
 80036a6:	210f      	movs	r1, #15
 80036a8:	438a      	bics	r2, r1
 80036aa:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	085b      	lsrs	r3, r3, #1
 80036b0:	b29b      	uxth	r3, r3
 80036b2:	2207      	movs	r2, #7
 80036b4:	4013      	ands	r3, r2
 80036b6:	b299      	uxth	r1, r3
 80036b8:	183b      	adds	r3, r7, r0
 80036ba:	183a      	adds	r2, r7, r0
 80036bc:	8812      	ldrh	r2, [r2, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	183a      	adds	r2, r7, r0
 80036c8:	8812      	ldrh	r2, [r2, #0]
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	e060      	b.n	8003790 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80036ce:	231e      	movs	r3, #30
 80036d0:	18fb      	adds	r3, r7, r3
 80036d2:	2201      	movs	r2, #1
 80036d4:	701a      	strb	r2, [r3, #0]
 80036d6:	e05b      	b.n	8003790 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036d8:	231f      	movs	r3, #31
 80036da:	18fb      	adds	r3, r7, r3
 80036dc:	781b      	ldrb	r3, [r3, #0]
 80036de:	2b08      	cmp	r3, #8
 80036e0:	d01f      	beq.n	8003722 <UART_SetConfig+0x242>
 80036e2:	dc22      	bgt.n	800372a <UART_SetConfig+0x24a>
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d017      	beq.n	8003718 <UART_SetConfig+0x238>
 80036e8:	dc1f      	bgt.n	800372a <UART_SetConfig+0x24a>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d002      	beq.n	80036f4 <UART_SetConfig+0x214>
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d005      	beq.n	80036fe <UART_SetConfig+0x21e>
 80036f2:	e01a      	b.n	800372a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036f4:	f7fe fcea 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 80036f8:	0003      	movs	r3, r0
 80036fa:	61bb      	str	r3, [r7, #24]
        break;
 80036fc:	e01c      	b.n	8003738 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80036fe:	4b33      	ldr	r3, [pc, #204]	@ (80037cc <UART_SetConfig+0x2ec>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	095b      	lsrs	r3, r3, #5
 8003704:	2207      	movs	r2, #7
 8003706:	4013      	ands	r3, r2
 8003708:	3301      	adds	r3, #1
 800370a:	0019      	movs	r1, r3
 800370c:	4831      	ldr	r0, [pc, #196]	@ (80037d4 <UART_SetConfig+0x2f4>)
 800370e:	f7fc fd0d 	bl	800012c <__udivsi3>
 8003712:	0003      	movs	r3, r0
 8003714:	61bb      	str	r3, [r7, #24]
        break;
 8003716:	e00f      	b.n	8003738 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003718:	f7fe fc6a 	bl	8001ff0 <HAL_RCC_GetSysClockFreq>
 800371c:	0003      	movs	r3, r0
 800371e:	61bb      	str	r3, [r7, #24]
        break;
 8003720:	e00a      	b.n	8003738 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003722:	2380      	movs	r3, #128	@ 0x80
 8003724:	021b      	lsls	r3, r3, #8
 8003726:	61bb      	str	r3, [r7, #24]
        break;
 8003728:	e006      	b.n	8003738 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800372e:	231e      	movs	r3, #30
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
        break;
 8003736:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d028      	beq.n	8003790 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003742:	4b25      	ldr	r3, [pc, #148]	@ (80037d8 <UART_SetConfig+0x2f8>)
 8003744:	0052      	lsls	r2, r2, #1
 8003746:	5ad3      	ldrh	r3, [r2, r3]
 8003748:	0019      	movs	r1, r3
 800374a:	69b8      	ldr	r0, [r7, #24]
 800374c:	f7fc fcee 	bl	800012c <__udivsi3>
 8003750:	0003      	movs	r3, r0
 8003752:	001a      	movs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	18d2      	adds	r2, r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	0019      	movs	r1, r3
 8003762:	0010      	movs	r0, r2
 8003764:	f7fc fce2 	bl	800012c <__udivsi3>
 8003768:	0003      	movs	r3, r0
 800376a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	2b0f      	cmp	r3, #15
 8003770:	d90a      	bls.n	8003788 <UART_SetConfig+0x2a8>
 8003772:	693a      	ldr	r2, [r7, #16]
 8003774:	2380      	movs	r3, #128	@ 0x80
 8003776:	025b      	lsls	r3, r3, #9
 8003778:	429a      	cmp	r2, r3
 800377a:	d205      	bcs.n	8003788 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	b29a      	uxth	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	60da      	str	r2, [r3, #12]
 8003786:	e003      	b.n	8003790 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003788:	231e      	movs	r3, #30
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	226a      	movs	r2, #106	@ 0x6a
 8003794:	2101      	movs	r1, #1
 8003796:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2268      	movs	r2, #104	@ 0x68
 800379c:	2101      	movs	r1, #1
 800379e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2200      	movs	r2, #0
 80037aa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80037ac:	231e      	movs	r3, #30
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	781b      	ldrb	r3, [r3, #0]
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b008      	add	sp, #32
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	cfff69f3 	.word	0xcfff69f3
 80037c0:	ffffcfff 	.word	0xffffcfff
 80037c4:	11fff4ff 	.word	0x11fff4ff
 80037c8:	40013800 	.word	0x40013800
 80037cc:	40021000 	.word	0x40021000
 80037d0:	40004400 	.word	0x40004400
 80037d4:	02dc6c00 	.word	0x02dc6c00
 80037d8:	08006198 	.word	0x08006198

080037dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037e8:	2208      	movs	r2, #8
 80037ea:	4013      	ands	r3, r2
 80037ec:	d00b      	beq.n	8003806 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a4a      	ldr	r2, [pc, #296]	@ (8003920 <UART_AdvFeatureConfig+0x144>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800380a:	2201      	movs	r2, #1
 800380c:	4013      	ands	r3, r2
 800380e:	d00b      	beq.n	8003828 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4a43      	ldr	r2, [pc, #268]	@ (8003924 <UART_AdvFeatureConfig+0x148>)
 8003818:	4013      	ands	r3, r2
 800381a:	0019      	movs	r1, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800382c:	2202      	movs	r2, #2
 800382e:	4013      	ands	r3, r2
 8003830:	d00b      	beq.n	800384a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	4a3b      	ldr	r2, [pc, #236]	@ (8003928 <UART_AdvFeatureConfig+0x14c>)
 800383a:	4013      	ands	r3, r2
 800383c:	0019      	movs	r1, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800384e:	2204      	movs	r2, #4
 8003850:	4013      	ands	r3, r2
 8003852:	d00b      	beq.n	800386c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	4a34      	ldr	r2, [pc, #208]	@ (800392c <UART_AdvFeatureConfig+0x150>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003870:	2210      	movs	r2, #16
 8003872:	4013      	ands	r3, r2
 8003874:	d00b      	beq.n	800388e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	4a2c      	ldr	r2, [pc, #176]	@ (8003930 <UART_AdvFeatureConfig+0x154>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003892:	2220      	movs	r2, #32
 8003894:	4013      	ands	r3, r2
 8003896:	d00b      	beq.n	80038b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	4a25      	ldr	r2, [pc, #148]	@ (8003934 <UART_AdvFeatureConfig+0x158>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	0019      	movs	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	2240      	movs	r2, #64	@ 0x40
 80038b6:	4013      	ands	r3, r2
 80038b8:	d01d      	beq.n	80038f6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	4a1d      	ldr	r2, [pc, #116]	@ (8003938 <UART_AdvFeatureConfig+0x15c>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	0019      	movs	r1, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038d6:	2380      	movs	r3, #128	@ 0x80
 80038d8:	035b      	lsls	r3, r3, #13
 80038da:	429a      	cmp	r2, r3
 80038dc:	d10b      	bne.n	80038f6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a15      	ldr	r2, [pc, #84]	@ (800393c <UART_AdvFeatureConfig+0x160>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038fa:	2280      	movs	r2, #128	@ 0x80
 80038fc:	4013      	ands	r3, r2
 80038fe:	d00b      	beq.n	8003918 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4a0e      	ldr	r2, [pc, #56]	@ (8003940 <UART_AdvFeatureConfig+0x164>)
 8003908:	4013      	ands	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]
  }
}
 8003918:	46c0      	nop			@ (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}
 8003920:	ffff7fff 	.word	0xffff7fff
 8003924:	fffdffff 	.word	0xfffdffff
 8003928:	fffeffff 	.word	0xfffeffff
 800392c:	fffbffff 	.word	0xfffbffff
 8003930:	ffffefff 	.word	0xffffefff
 8003934:	ffffdfff 	.word	0xffffdfff
 8003938:	ffefffff 	.word	0xffefffff
 800393c:	ff9fffff 	.word	0xff9fffff
 8003940:	fff7ffff 	.word	0xfff7ffff

08003944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b092      	sub	sp, #72	@ 0x48
 8003948:	af02      	add	r7, sp, #8
 800394a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2290      	movs	r2, #144	@ 0x90
 8003950:	2100      	movs	r1, #0
 8003952:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003954:	f7fd fcf8 	bl	8001348 <HAL_GetTick>
 8003958:	0003      	movs	r3, r0
 800395a:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	2208      	movs	r2, #8
 8003964:	4013      	ands	r3, r2
 8003966:	2b08      	cmp	r3, #8
 8003968:	d12d      	bne.n	80039c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800396a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800396c:	2280      	movs	r2, #128	@ 0x80
 800396e:	0391      	lsls	r1, r2, #14
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	4a47      	ldr	r2, [pc, #284]	@ (8003a90 <UART_CheckIdleState+0x14c>)
 8003974:	9200      	str	r2, [sp, #0]
 8003976:	2200      	movs	r2, #0
 8003978:	f000 f88e 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 800397c:	1e03      	subs	r3, r0, #0
 800397e:	d022      	beq.n	80039c6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003980:	f3ef 8310 	mrs	r3, PRIMASK
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003988:	63bb      	str	r3, [r7, #56]	@ 0x38
 800398a:	2301      	movs	r3, #1
 800398c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800398e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003990:	f383 8810 	msr	PRIMASK, r3
}
 8003994:	46c0      	nop			@ (mov r8, r8)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2180      	movs	r1, #128	@ 0x80
 80039a2:	438a      	bics	r2, r1
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ac:	f383 8810 	msr	PRIMASK, r3
}
 80039b0:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2288      	movs	r2, #136	@ 0x88
 80039b6:	2120      	movs	r1, #32
 80039b8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2284      	movs	r2, #132	@ 0x84
 80039be:	2100      	movs	r1, #0
 80039c0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e060      	b.n	8003a88 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	2204      	movs	r2, #4
 80039ce:	4013      	ands	r3, r2
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d146      	bne.n	8003a62 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80039d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80039d6:	2280      	movs	r2, #128	@ 0x80
 80039d8:	03d1      	lsls	r1, r2, #15
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4a2c      	ldr	r2, [pc, #176]	@ (8003a90 <UART_CheckIdleState+0x14c>)
 80039de:	9200      	str	r2, [sp, #0]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f000 f859 	bl	8003a98 <UART_WaitOnFlagUntilTimeout>
 80039e6:	1e03      	subs	r3, r0, #0
 80039e8:	d03b      	beq.n	8003a62 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039ea:	f3ef 8310 	mrs	r3, PRIMASK
 80039ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80039f0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039f4:	2301      	movs	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	f383 8810 	msr	PRIMASK, r3
}
 80039fe:	46c0      	nop			@ (mov r8, r8)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4922      	ldr	r1, [pc, #136]	@ (8003a94 <UART_CheckIdleState+0x150>)
 8003a0c:	400a      	ands	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	f383 8810 	msr	PRIMASK, r3
}
 8003a1a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a1c:	f3ef 8310 	mrs	r3, PRIMASK
 8003a20:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a22:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003a26:	2301      	movs	r3, #1
 8003a28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	f383 8810 	msr	PRIMASK, r3
}
 8003a30:	46c0      	nop			@ (mov r8, r8)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	689a      	ldr	r2, [r3, #8]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	438a      	bics	r2, r1
 8003a40:	609a      	str	r2, [r3, #8]
 8003a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	f383 8810 	msr	PRIMASK, r3
}
 8003a4c:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	228c      	movs	r2, #140	@ 0x8c
 8003a52:	2120      	movs	r1, #32
 8003a54:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2284      	movs	r2, #132	@ 0x84
 8003a5a:	2100      	movs	r1, #0
 8003a5c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e012      	b.n	8003a88 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2288      	movs	r2, #136	@ 0x88
 8003a66:	2120      	movs	r1, #32
 8003a68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	228c      	movs	r2, #140	@ 0x8c
 8003a6e:	2120      	movs	r1, #32
 8003a70:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2284      	movs	r2, #132	@ 0x84
 8003a82:	2100      	movs	r1, #0
 8003a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	0018      	movs	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b010      	add	sp, #64	@ 0x40
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	01ffffff 	.word	0x01ffffff
 8003a94:	fffffedf 	.word	0xfffffedf

08003a98 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	603b      	str	r3, [r7, #0]
 8003aa4:	1dfb      	adds	r3, r7, #7
 8003aa6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aa8:	e051      	b.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	3301      	adds	r3, #1
 8003aae:	d04e      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ab0:	f7fd fc4a 	bl	8001348 <HAL_GetTick>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d302      	bcc.n	8003ac6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e051      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	d03b      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	2b80      	cmp	r3, #128	@ 0x80
 8003ada:	d038      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb6>
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b40      	cmp	r3, #64	@ 0x40
 8003ae0:	d035      	beq.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	2208      	movs	r2, #8
 8003aea:	4013      	ands	r3, r2
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d111      	bne.n	8003b14 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2208      	movs	r2, #8
 8003af6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	0018      	movs	r0, r3
 8003afc:	f000 f83c 	bl	8003b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2290      	movs	r2, #144	@ 0x90
 8003b04:	2108      	movs	r1, #8
 8003b06:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2284      	movs	r2, #132	@ 0x84
 8003b0c:	2100      	movs	r1, #0
 8003b0e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e02c      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	69da      	ldr	r2, [r3, #28]
 8003b1a:	2380      	movs	r3, #128	@ 0x80
 8003b1c:	011b      	lsls	r3, r3, #4
 8003b1e:	401a      	ands	r2, r3
 8003b20:	2380      	movs	r3, #128	@ 0x80
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d112      	bne.n	8003b4e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	2280      	movs	r2, #128	@ 0x80
 8003b2e:	0112      	lsls	r2, r2, #4
 8003b30:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	0018      	movs	r0, r3
 8003b36:	f000 f81f 	bl	8003b78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2290      	movs	r2, #144	@ 0x90
 8003b3e:	2120      	movs	r1, #32
 8003b40:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2284      	movs	r2, #132	@ 0x84
 8003b46:	2100      	movs	r1, #0
 8003b48:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e00f      	b.n	8003b6e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	69db      	ldr	r3, [r3, #28]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	4013      	ands	r3, r2
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	425a      	negs	r2, r3
 8003b5e:	4153      	adcs	r3, r2
 8003b60:	b2db      	uxtb	r3, r3
 8003b62:	001a      	movs	r2, r3
 8003b64:	1dfb      	adds	r3, r7, #7
 8003b66:	781b      	ldrb	r3, [r3, #0]
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d09e      	beq.n	8003aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	0018      	movs	r0, r3
 8003b70:	46bd      	mov	sp, r7
 8003b72:	b004      	add	sp, #16
 8003b74:	bd80      	pop	{r7, pc}
	...

08003b78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08e      	sub	sp, #56	@ 0x38
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b80:	f3ef 8310 	mrs	r3, PRIMASK
 8003b84:	617b      	str	r3, [r7, #20]
  return(result);
 8003b86:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b88:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	f383 8810 	msr	PRIMASK, r3
}
 8003b94:	46c0      	nop			@ (mov r8, r8)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4926      	ldr	r1, [pc, #152]	@ (8003c3c <UART_EndRxTransfer+0xc4>)
 8003ba2:	400a      	ands	r2, r1
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ba8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003baa:	69fb      	ldr	r3, [r7, #28]
 8003bac:	f383 8810 	msr	PRIMASK, r3
}
 8003bb0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb6:	623b      	str	r3, [r7, #32]
  return(result);
 8003bb8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bba:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc2:	f383 8810 	msr	PRIMASK, r3
}
 8003bc6:	46c0      	nop			@ (mov r8, r8)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689a      	ldr	r2, [r3, #8]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	491b      	ldr	r1, [pc, #108]	@ (8003c40 <UART_EndRxTransfer+0xc8>)
 8003bd4:	400a      	ands	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bda:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bde:	f383 8810 	msr	PRIMASK, r3
}
 8003be2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d118      	bne.n	8003c1e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bec:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003bf2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	f383 8810 	msr	PRIMASK, r3
}
 8003c00:	46c0      	nop			@ (mov r8, r8)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2110      	movs	r1, #16
 8003c0e:	438a      	bics	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c14:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	f383 8810 	msr	PRIMASK, r3
}
 8003c1c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	228c      	movs	r2, #140	@ 0x8c
 8003c22:	2120      	movs	r1, #32
 8003c24:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	46bd      	mov	sp, r7
 8003c36:	b00e      	add	sp, #56	@ 0x38
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	46c0      	nop			@ (mov r8, r8)
 8003c3c:	fffffedf 	.word	0xfffffedf
 8003c40:	effffffe 	.word	0xeffffffe

08003c44 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c50:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	225e      	movs	r2, #94	@ 0x5e
 8003c56:	2100      	movs	r1, #0
 8003c58:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2256      	movs	r2, #86	@ 0x56
 8003c5e:	2100      	movs	r1, #0
 8003c60:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	0018      	movs	r0, r3
 8003c66:	f7ff fc27 	bl	80034b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c6a:	46c0      	nop			@ (mov r8, r8)
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c7a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c80:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c82:	617b      	str	r3, [r7, #20]
 8003c84:	2301      	movs	r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f383 8810 	msr	PRIMASK, r3
}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2140      	movs	r1, #64	@ 0x40
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	f383 8810 	msr	PRIMASK, r3
}
 8003caa:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2288      	movs	r2, #136	@ 0x88
 8003cb0:	2120      	movs	r1, #32
 8003cb2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	0018      	movs	r0, r3
 8003cbe:	f7ff fbf3 	bl	80034a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b006      	add	sp, #24
 8003cc8:	bd80      	pop	{r7, pc}

08003cca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cca:	b580      	push	{r7, lr}
 8003ccc:	b082      	sub	sp, #8
 8003cce:	af00      	add	r7, sp, #0
 8003cd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cd2:	46c0      	nop			@ (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b082      	sub	sp, #8
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003ce2:	46c0      	nop			@ (mov r8, r8)
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	b002      	add	sp, #8
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b082      	sub	sp, #8
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b002      	add	sp, #8
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <std>:
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	b510      	push	{r4, lr}
 8003d00:	0004      	movs	r4, r0
 8003d02:	6003      	str	r3, [r0, #0]
 8003d04:	6043      	str	r3, [r0, #4]
 8003d06:	6083      	str	r3, [r0, #8]
 8003d08:	8181      	strh	r1, [r0, #12]
 8003d0a:	6643      	str	r3, [r0, #100]	@ 0x64
 8003d0c:	81c2      	strh	r2, [r0, #14]
 8003d0e:	6103      	str	r3, [r0, #16]
 8003d10:	6143      	str	r3, [r0, #20]
 8003d12:	6183      	str	r3, [r0, #24]
 8003d14:	0019      	movs	r1, r3
 8003d16:	2208      	movs	r2, #8
 8003d18:	305c      	adds	r0, #92	@ 0x5c
 8003d1a:	f000 fa6d 	bl	80041f8 <memset>
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	@ (8003d4c <std+0x50>)
 8003d20:	6224      	str	r4, [r4, #32]
 8003d22:	6263      	str	r3, [r4, #36]	@ 0x24
 8003d24:	4b0a      	ldr	r3, [pc, #40]	@ (8003d50 <std+0x54>)
 8003d26:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003d28:	4b0a      	ldr	r3, [pc, #40]	@ (8003d54 <std+0x58>)
 8003d2a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003d2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003d58 <std+0x5c>)
 8003d2e:	6323      	str	r3, [r4, #48]	@ 0x30
 8003d30:	4b0a      	ldr	r3, [pc, #40]	@ (8003d5c <std+0x60>)
 8003d32:	429c      	cmp	r4, r3
 8003d34:	d005      	beq.n	8003d42 <std+0x46>
 8003d36:	4b0a      	ldr	r3, [pc, #40]	@ (8003d60 <std+0x64>)
 8003d38:	429c      	cmp	r4, r3
 8003d3a:	d002      	beq.n	8003d42 <std+0x46>
 8003d3c:	4b09      	ldr	r3, [pc, #36]	@ (8003d64 <std+0x68>)
 8003d3e:	429c      	cmp	r4, r3
 8003d40:	d103      	bne.n	8003d4a <std+0x4e>
 8003d42:	0020      	movs	r0, r4
 8003d44:	3058      	adds	r0, #88	@ 0x58
 8003d46:	f000 fb31 	bl	80043ac <__retarget_lock_init_recursive>
 8003d4a:	bd10      	pop	{r4, pc}
 8003d4c:	0800401d 	.word	0x0800401d
 8003d50:	08004049 	.word	0x08004049
 8003d54:	08004081 	.word	0x08004081
 8003d58:	080040ad 	.word	0x080040ad
 8003d5c:	20000148 	.word	0x20000148
 8003d60:	200001b0 	.word	0x200001b0
 8003d64:	20000218 	.word	0x20000218

08003d68 <stdio_exit_handler>:
 8003d68:	b510      	push	{r4, lr}
 8003d6a:	4a03      	ldr	r2, [pc, #12]	@ (8003d78 <stdio_exit_handler+0x10>)
 8003d6c:	4903      	ldr	r1, [pc, #12]	@ (8003d7c <stdio_exit_handler+0x14>)
 8003d6e:	4804      	ldr	r0, [pc, #16]	@ (8003d80 <stdio_exit_handler+0x18>)
 8003d70:	f000 f86c 	bl	8003e4c <_fwalk_sglue>
 8003d74:	bd10      	pop	{r4, pc}
 8003d76:	46c0      	nop			@ (mov r8, r8)
 8003d78:	2000000c 	.word	0x2000000c
 8003d7c:	08005535 	.word	0x08005535
 8003d80:	2000001c 	.word	0x2000001c

08003d84 <cleanup_stdio>:
 8003d84:	6841      	ldr	r1, [r0, #4]
 8003d86:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <cleanup_stdio+0x30>)
 8003d88:	b510      	push	{r4, lr}
 8003d8a:	0004      	movs	r4, r0
 8003d8c:	4299      	cmp	r1, r3
 8003d8e:	d001      	beq.n	8003d94 <cleanup_stdio+0x10>
 8003d90:	f001 fbd0 	bl	8005534 <_fflush_r>
 8003d94:	68a1      	ldr	r1, [r4, #8]
 8003d96:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <cleanup_stdio+0x34>)
 8003d98:	4299      	cmp	r1, r3
 8003d9a:	d002      	beq.n	8003da2 <cleanup_stdio+0x1e>
 8003d9c:	0020      	movs	r0, r4
 8003d9e:	f001 fbc9 	bl	8005534 <_fflush_r>
 8003da2:	68e1      	ldr	r1, [r4, #12]
 8003da4:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <cleanup_stdio+0x38>)
 8003da6:	4299      	cmp	r1, r3
 8003da8:	d002      	beq.n	8003db0 <cleanup_stdio+0x2c>
 8003daa:	0020      	movs	r0, r4
 8003dac:	f001 fbc2 	bl	8005534 <_fflush_r>
 8003db0:	bd10      	pop	{r4, pc}
 8003db2:	46c0      	nop			@ (mov r8, r8)
 8003db4:	20000148 	.word	0x20000148
 8003db8:	200001b0 	.word	0x200001b0
 8003dbc:	20000218 	.word	0x20000218

08003dc0 <global_stdio_init.part.0>:
 8003dc0:	b510      	push	{r4, lr}
 8003dc2:	4b09      	ldr	r3, [pc, #36]	@ (8003de8 <global_stdio_init.part.0+0x28>)
 8003dc4:	4a09      	ldr	r2, [pc, #36]	@ (8003dec <global_stdio_init.part.0+0x2c>)
 8003dc6:	2104      	movs	r1, #4
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	4809      	ldr	r0, [pc, #36]	@ (8003df0 <global_stdio_init.part.0+0x30>)
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f7ff ff95 	bl	8003cfc <std>
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	2109      	movs	r1, #9
 8003dd6:	4807      	ldr	r0, [pc, #28]	@ (8003df4 <global_stdio_init.part.0+0x34>)
 8003dd8:	f7ff ff90 	bl	8003cfc <std>
 8003ddc:	2202      	movs	r2, #2
 8003dde:	2112      	movs	r1, #18
 8003de0:	4805      	ldr	r0, [pc, #20]	@ (8003df8 <global_stdio_init.part.0+0x38>)
 8003de2:	f7ff ff8b 	bl	8003cfc <std>
 8003de6:	bd10      	pop	{r4, pc}
 8003de8:	20000280 	.word	0x20000280
 8003dec:	08003d69 	.word	0x08003d69
 8003df0:	20000148 	.word	0x20000148
 8003df4:	200001b0 	.word	0x200001b0
 8003df8:	20000218 	.word	0x20000218

08003dfc <__sfp_lock_acquire>:
 8003dfc:	b510      	push	{r4, lr}
 8003dfe:	4802      	ldr	r0, [pc, #8]	@ (8003e08 <__sfp_lock_acquire+0xc>)
 8003e00:	f000 fad5 	bl	80043ae <__retarget_lock_acquire_recursive>
 8003e04:	bd10      	pop	{r4, pc}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	20000289 	.word	0x20000289

08003e0c <__sfp_lock_release>:
 8003e0c:	b510      	push	{r4, lr}
 8003e0e:	4802      	ldr	r0, [pc, #8]	@ (8003e18 <__sfp_lock_release+0xc>)
 8003e10:	f000 face 	bl	80043b0 <__retarget_lock_release_recursive>
 8003e14:	bd10      	pop	{r4, pc}
 8003e16:	46c0      	nop			@ (mov r8, r8)
 8003e18:	20000289 	.word	0x20000289

08003e1c <__sinit>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	0004      	movs	r4, r0
 8003e20:	f7ff ffec 	bl	8003dfc <__sfp_lock_acquire>
 8003e24:	6a23      	ldr	r3, [r4, #32]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <__sinit+0x14>
 8003e2a:	f7ff ffef 	bl	8003e0c <__sfp_lock_release>
 8003e2e:	bd10      	pop	{r4, pc}
 8003e30:	4b04      	ldr	r3, [pc, #16]	@ (8003e44 <__sinit+0x28>)
 8003e32:	6223      	str	r3, [r4, #32]
 8003e34:	4b04      	ldr	r3, [pc, #16]	@ (8003e48 <__sinit+0x2c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1f6      	bne.n	8003e2a <__sinit+0xe>
 8003e3c:	f7ff ffc0 	bl	8003dc0 <global_stdio_init.part.0>
 8003e40:	e7f3      	b.n	8003e2a <__sinit+0xe>
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	08003d85 	.word	0x08003d85
 8003e48:	20000280 	.word	0x20000280

08003e4c <_fwalk_sglue>:
 8003e4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003e4e:	0014      	movs	r4, r2
 8003e50:	2600      	movs	r6, #0
 8003e52:	9000      	str	r0, [sp, #0]
 8003e54:	9101      	str	r1, [sp, #4]
 8003e56:	68a5      	ldr	r5, [r4, #8]
 8003e58:	6867      	ldr	r7, [r4, #4]
 8003e5a:	3f01      	subs	r7, #1
 8003e5c:	d504      	bpl.n	8003e68 <_fwalk_sglue+0x1c>
 8003e5e:	6824      	ldr	r4, [r4, #0]
 8003e60:	2c00      	cmp	r4, #0
 8003e62:	d1f8      	bne.n	8003e56 <_fwalk_sglue+0xa>
 8003e64:	0030      	movs	r0, r6
 8003e66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003e68:	89ab      	ldrh	r3, [r5, #12]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d908      	bls.n	8003e80 <_fwalk_sglue+0x34>
 8003e6e:	220e      	movs	r2, #14
 8003e70:	5eab      	ldrsh	r3, [r5, r2]
 8003e72:	3301      	adds	r3, #1
 8003e74:	d004      	beq.n	8003e80 <_fwalk_sglue+0x34>
 8003e76:	0029      	movs	r1, r5
 8003e78:	9800      	ldr	r0, [sp, #0]
 8003e7a:	9b01      	ldr	r3, [sp, #4]
 8003e7c:	4798      	blx	r3
 8003e7e:	4306      	orrs	r6, r0
 8003e80:	3568      	adds	r5, #104	@ 0x68
 8003e82:	e7ea      	b.n	8003e5a <_fwalk_sglue+0xe>

08003e84 <iprintf>:
 8003e84:	b40f      	push	{r0, r1, r2, r3}
 8003e86:	b507      	push	{r0, r1, r2, lr}
 8003e88:	4905      	ldr	r1, [pc, #20]	@ (8003ea0 <iprintf+0x1c>)
 8003e8a:	ab04      	add	r3, sp, #16
 8003e8c:	6808      	ldr	r0, [r1, #0]
 8003e8e:	cb04      	ldmia	r3!, {r2}
 8003e90:	6881      	ldr	r1, [r0, #8]
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	f000 fece 	bl	8004c34 <_vfiprintf_r>
 8003e98:	b003      	add	sp, #12
 8003e9a:	bc08      	pop	{r3}
 8003e9c:	b004      	add	sp, #16
 8003e9e:	4718      	bx	r3
 8003ea0:	20000018 	.word	0x20000018

08003ea4 <_puts_r>:
 8003ea4:	6a03      	ldr	r3, [r0, #32]
 8003ea6:	b570      	push	{r4, r5, r6, lr}
 8003ea8:	0005      	movs	r5, r0
 8003eaa:	000e      	movs	r6, r1
 8003eac:	6884      	ldr	r4, [r0, #8]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <_puts_r+0x12>
 8003eb2:	f7ff ffb3 	bl	8003e1c <__sinit>
 8003eb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003eb8:	07db      	lsls	r3, r3, #31
 8003eba:	d405      	bmi.n	8003ec8 <_puts_r+0x24>
 8003ebc:	89a3      	ldrh	r3, [r4, #12]
 8003ebe:	059b      	lsls	r3, r3, #22
 8003ec0:	d402      	bmi.n	8003ec8 <_puts_r+0x24>
 8003ec2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ec4:	f000 fa73 	bl	80043ae <__retarget_lock_acquire_recursive>
 8003ec8:	89a3      	ldrh	r3, [r4, #12]
 8003eca:	071b      	lsls	r3, r3, #28
 8003ecc:	d502      	bpl.n	8003ed4 <_puts_r+0x30>
 8003ece:	6923      	ldr	r3, [r4, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d11f      	bne.n	8003f14 <_puts_r+0x70>
 8003ed4:	0021      	movs	r1, r4
 8003ed6:	0028      	movs	r0, r5
 8003ed8:	f000 f930 	bl	800413c <__swsetup_r>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	d019      	beq.n	8003f14 <_puts_r+0x70>
 8003ee0:	2501      	movs	r5, #1
 8003ee2:	426d      	negs	r5, r5
 8003ee4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003ee6:	07db      	lsls	r3, r3, #31
 8003ee8:	d405      	bmi.n	8003ef6 <_puts_r+0x52>
 8003eea:	89a3      	ldrh	r3, [r4, #12]
 8003eec:	059b      	lsls	r3, r3, #22
 8003eee:	d402      	bmi.n	8003ef6 <_puts_r+0x52>
 8003ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ef2:	f000 fa5d 	bl	80043b0 <__retarget_lock_release_recursive>
 8003ef6:	0028      	movs	r0, r5
 8003ef8:	bd70      	pop	{r4, r5, r6, pc}
 8003efa:	3601      	adds	r6, #1
 8003efc:	60a3      	str	r3, [r4, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	da04      	bge.n	8003f0c <_puts_r+0x68>
 8003f02:	69a2      	ldr	r2, [r4, #24]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	dc16      	bgt.n	8003f36 <_puts_r+0x92>
 8003f08:	290a      	cmp	r1, #10
 8003f0a:	d014      	beq.n	8003f36 <_puts_r+0x92>
 8003f0c:	6823      	ldr	r3, [r4, #0]
 8003f0e:	1c5a      	adds	r2, r3, #1
 8003f10:	6022      	str	r2, [r4, #0]
 8003f12:	7019      	strb	r1, [r3, #0]
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	7831      	ldrb	r1, [r6, #0]
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	2900      	cmp	r1, #0
 8003f1c:	d1ed      	bne.n	8003efa <_puts_r+0x56>
 8003f1e:	60a3      	str	r3, [r4, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	da0f      	bge.n	8003f44 <_puts_r+0xa0>
 8003f24:	0022      	movs	r2, r4
 8003f26:	0028      	movs	r0, r5
 8003f28:	310a      	adds	r1, #10
 8003f2a:	f000 f8c5 	bl	80040b8 <__swbuf_r>
 8003f2e:	3001      	adds	r0, #1
 8003f30:	d0d6      	beq.n	8003ee0 <_puts_r+0x3c>
 8003f32:	250a      	movs	r5, #10
 8003f34:	e7d6      	b.n	8003ee4 <_puts_r+0x40>
 8003f36:	0022      	movs	r2, r4
 8003f38:	0028      	movs	r0, r5
 8003f3a:	f000 f8bd 	bl	80040b8 <__swbuf_r>
 8003f3e:	3001      	adds	r0, #1
 8003f40:	d1e8      	bne.n	8003f14 <_puts_r+0x70>
 8003f42:	e7cd      	b.n	8003ee0 <_puts_r+0x3c>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	1c5a      	adds	r2, r3, #1
 8003f48:	6022      	str	r2, [r4, #0]
 8003f4a:	220a      	movs	r2, #10
 8003f4c:	701a      	strb	r2, [r3, #0]
 8003f4e:	e7f0      	b.n	8003f32 <_puts_r+0x8e>

08003f50 <puts>:
 8003f50:	b510      	push	{r4, lr}
 8003f52:	4b03      	ldr	r3, [pc, #12]	@ (8003f60 <puts+0x10>)
 8003f54:	0001      	movs	r1, r0
 8003f56:	6818      	ldr	r0, [r3, #0]
 8003f58:	f7ff ffa4 	bl	8003ea4 <_puts_r>
 8003f5c:	bd10      	pop	{r4, pc}
 8003f5e:	46c0      	nop			@ (mov r8, r8)
 8003f60:	20000018 	.word	0x20000018

08003f64 <sniprintf>:
 8003f64:	b40c      	push	{r2, r3}
 8003f66:	b530      	push	{r4, r5, lr}
 8003f68:	4b17      	ldr	r3, [pc, #92]	@ (8003fc8 <sniprintf+0x64>)
 8003f6a:	000c      	movs	r4, r1
 8003f6c:	681d      	ldr	r5, [r3, #0]
 8003f6e:	b09d      	sub	sp, #116	@ 0x74
 8003f70:	2900      	cmp	r1, #0
 8003f72:	da08      	bge.n	8003f86 <sniprintf+0x22>
 8003f74:	238b      	movs	r3, #139	@ 0x8b
 8003f76:	2001      	movs	r0, #1
 8003f78:	602b      	str	r3, [r5, #0]
 8003f7a:	4240      	negs	r0, r0
 8003f7c:	b01d      	add	sp, #116	@ 0x74
 8003f7e:	bc30      	pop	{r4, r5}
 8003f80:	bc08      	pop	{r3}
 8003f82:	b002      	add	sp, #8
 8003f84:	4718      	bx	r3
 8003f86:	2382      	movs	r3, #130	@ 0x82
 8003f88:	466a      	mov	r2, sp
 8003f8a:	009b      	lsls	r3, r3, #2
 8003f8c:	8293      	strh	r3, [r2, #20]
 8003f8e:	2300      	movs	r3, #0
 8003f90:	9002      	str	r0, [sp, #8]
 8003f92:	9006      	str	r0, [sp, #24]
 8003f94:	4299      	cmp	r1, r3
 8003f96:	d000      	beq.n	8003f9a <sniprintf+0x36>
 8003f98:	1e4b      	subs	r3, r1, #1
 8003f9a:	9304      	str	r3, [sp, #16]
 8003f9c:	9307      	str	r3, [sp, #28]
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	466a      	mov	r2, sp
 8003fa2:	425b      	negs	r3, r3
 8003fa4:	82d3      	strh	r3, [r2, #22]
 8003fa6:	0028      	movs	r0, r5
 8003fa8:	ab21      	add	r3, sp, #132	@ 0x84
 8003faa:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003fac:	a902      	add	r1, sp, #8
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	f000 fb5c 	bl	800466c <_svfiprintf_r>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	da01      	bge.n	8003fbc <sniprintf+0x58>
 8003fb8:	238b      	movs	r3, #139	@ 0x8b
 8003fba:	602b      	str	r3, [r5, #0]
 8003fbc:	2c00      	cmp	r4, #0
 8003fbe:	d0dd      	beq.n	8003f7c <sniprintf+0x18>
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	9b02      	ldr	r3, [sp, #8]
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e7d9      	b.n	8003f7c <sniprintf+0x18>
 8003fc8:	20000018 	.word	0x20000018

08003fcc <siscanf>:
 8003fcc:	b40e      	push	{r1, r2, r3}
 8003fce:	b530      	push	{r4, r5, lr}
 8003fd0:	2381      	movs	r3, #129	@ 0x81
 8003fd2:	b09c      	sub	sp, #112	@ 0x70
 8003fd4:	466a      	mov	r2, sp
 8003fd6:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	cc20      	ldmia	r4!, {r5}
 8003fdc:	8293      	strh	r3, [r2, #20]
 8003fde:	9002      	str	r0, [sp, #8]
 8003fe0:	9006      	str	r0, [sp, #24]
 8003fe2:	f7fc f891 	bl	8000108 <strlen>
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8004014 <siscanf+0x48>)
 8003fe8:	466a      	mov	r2, sp
 8003fea:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003fec:	2300      	movs	r3, #0
 8003fee:	9003      	str	r0, [sp, #12]
 8003ff0:	9007      	str	r0, [sp, #28]
 8003ff2:	4809      	ldr	r0, [pc, #36]	@ (8004018 <siscanf+0x4c>)
 8003ff4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003ff6:	9314      	str	r3, [sp, #80]	@ 0x50
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	82d3      	strh	r3, [r2, #22]
 8003ffc:	a902      	add	r1, sp, #8
 8003ffe:	0023      	movs	r3, r4
 8004000:	002a      	movs	r2, r5
 8004002:	6800      	ldr	r0, [r0, #0]
 8004004:	9401      	str	r4, [sp, #4]
 8004006:	f000 fc8b 	bl	8004920 <__ssvfiscanf_r>
 800400a:	b01c      	add	sp, #112	@ 0x70
 800400c:	bc30      	pop	{r4, r5}
 800400e:	bc08      	pop	{r3}
 8004010:	b003      	add	sp, #12
 8004012:	4718      	bx	r3
 8004014:	08004045 	.word	0x08004045
 8004018:	20000018 	.word	0x20000018

0800401c <__sread>:
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	000c      	movs	r4, r1
 8004020:	250e      	movs	r5, #14
 8004022:	5f49      	ldrsh	r1, [r1, r5]
 8004024:	f000 f970 	bl	8004308 <_read_r>
 8004028:	2800      	cmp	r0, #0
 800402a:	db03      	blt.n	8004034 <__sread+0x18>
 800402c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800402e:	181b      	adds	r3, r3, r0
 8004030:	6563      	str	r3, [r4, #84]	@ 0x54
 8004032:	bd70      	pop	{r4, r5, r6, pc}
 8004034:	89a3      	ldrh	r3, [r4, #12]
 8004036:	4a02      	ldr	r2, [pc, #8]	@ (8004040 <__sread+0x24>)
 8004038:	4013      	ands	r3, r2
 800403a:	81a3      	strh	r3, [r4, #12]
 800403c:	e7f9      	b.n	8004032 <__sread+0x16>
 800403e:	46c0      	nop			@ (mov r8, r8)
 8004040:	ffffefff 	.word	0xffffefff

08004044 <__seofread>:
 8004044:	2000      	movs	r0, #0
 8004046:	4770      	bx	lr

08004048 <__swrite>:
 8004048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800404a:	001f      	movs	r7, r3
 800404c:	898b      	ldrh	r3, [r1, #12]
 800404e:	0005      	movs	r5, r0
 8004050:	000c      	movs	r4, r1
 8004052:	0016      	movs	r6, r2
 8004054:	05db      	lsls	r3, r3, #23
 8004056:	d505      	bpl.n	8004064 <__swrite+0x1c>
 8004058:	230e      	movs	r3, #14
 800405a:	5ec9      	ldrsh	r1, [r1, r3]
 800405c:	2200      	movs	r2, #0
 800405e:	2302      	movs	r3, #2
 8004060:	f000 f93e 	bl	80042e0 <_lseek_r>
 8004064:	89a3      	ldrh	r3, [r4, #12]
 8004066:	4a05      	ldr	r2, [pc, #20]	@ (800407c <__swrite+0x34>)
 8004068:	0028      	movs	r0, r5
 800406a:	4013      	ands	r3, r2
 800406c:	81a3      	strh	r3, [r4, #12]
 800406e:	0032      	movs	r2, r6
 8004070:	230e      	movs	r3, #14
 8004072:	5ee1      	ldrsh	r1, [r4, r3]
 8004074:	003b      	movs	r3, r7
 8004076:	f000 f95b 	bl	8004330 <_write_r>
 800407a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800407c:	ffffefff 	.word	0xffffefff

08004080 <__sseek>:
 8004080:	b570      	push	{r4, r5, r6, lr}
 8004082:	000c      	movs	r4, r1
 8004084:	250e      	movs	r5, #14
 8004086:	5f49      	ldrsh	r1, [r1, r5]
 8004088:	f000 f92a 	bl	80042e0 <_lseek_r>
 800408c:	89a3      	ldrh	r3, [r4, #12]
 800408e:	1c42      	adds	r2, r0, #1
 8004090:	d103      	bne.n	800409a <__sseek+0x1a>
 8004092:	4a05      	ldr	r2, [pc, #20]	@ (80040a8 <__sseek+0x28>)
 8004094:	4013      	ands	r3, r2
 8004096:	81a3      	strh	r3, [r4, #12]
 8004098:	bd70      	pop	{r4, r5, r6, pc}
 800409a:	2280      	movs	r2, #128	@ 0x80
 800409c:	0152      	lsls	r2, r2, #5
 800409e:	4313      	orrs	r3, r2
 80040a0:	81a3      	strh	r3, [r4, #12]
 80040a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80040a4:	e7f8      	b.n	8004098 <__sseek+0x18>
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	ffffefff 	.word	0xffffefff

080040ac <__sclose>:
 80040ac:	b510      	push	{r4, lr}
 80040ae:	230e      	movs	r3, #14
 80040b0:	5ec9      	ldrsh	r1, [r1, r3]
 80040b2:	f000 f903 	bl	80042bc <_close_r>
 80040b6:	bd10      	pop	{r4, pc}

080040b8 <__swbuf_r>:
 80040b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ba:	0006      	movs	r6, r0
 80040bc:	000d      	movs	r5, r1
 80040be:	0014      	movs	r4, r2
 80040c0:	2800      	cmp	r0, #0
 80040c2:	d004      	beq.n	80040ce <__swbuf_r+0x16>
 80040c4:	6a03      	ldr	r3, [r0, #32]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <__swbuf_r+0x16>
 80040ca:	f7ff fea7 	bl	8003e1c <__sinit>
 80040ce:	69a3      	ldr	r3, [r4, #24]
 80040d0:	60a3      	str	r3, [r4, #8]
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	071b      	lsls	r3, r3, #28
 80040d6:	d502      	bpl.n	80040de <__swbuf_r+0x26>
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <__swbuf_r+0x3a>
 80040de:	0021      	movs	r1, r4
 80040e0:	0030      	movs	r0, r6
 80040e2:	f000 f82b 	bl	800413c <__swsetup_r>
 80040e6:	2800      	cmp	r0, #0
 80040e8:	d003      	beq.n	80040f2 <__swbuf_r+0x3a>
 80040ea:	2501      	movs	r5, #1
 80040ec:	426d      	negs	r5, r5
 80040ee:	0028      	movs	r0, r5
 80040f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040f2:	6923      	ldr	r3, [r4, #16]
 80040f4:	6820      	ldr	r0, [r4, #0]
 80040f6:	b2ef      	uxtb	r7, r5
 80040f8:	1ac0      	subs	r0, r0, r3
 80040fa:	6963      	ldr	r3, [r4, #20]
 80040fc:	b2ed      	uxtb	r5, r5
 80040fe:	4283      	cmp	r3, r0
 8004100:	dc05      	bgt.n	800410e <__swbuf_r+0x56>
 8004102:	0021      	movs	r1, r4
 8004104:	0030      	movs	r0, r6
 8004106:	f001 fa15 	bl	8005534 <_fflush_r>
 800410a:	2800      	cmp	r0, #0
 800410c:	d1ed      	bne.n	80040ea <__swbuf_r+0x32>
 800410e:	68a3      	ldr	r3, [r4, #8]
 8004110:	3001      	adds	r0, #1
 8004112:	3b01      	subs	r3, #1
 8004114:	60a3      	str	r3, [r4, #8]
 8004116:	6823      	ldr	r3, [r4, #0]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	6022      	str	r2, [r4, #0]
 800411c:	701f      	strb	r7, [r3, #0]
 800411e:	6963      	ldr	r3, [r4, #20]
 8004120:	4283      	cmp	r3, r0
 8004122:	d004      	beq.n	800412e <__swbuf_r+0x76>
 8004124:	89a3      	ldrh	r3, [r4, #12]
 8004126:	07db      	lsls	r3, r3, #31
 8004128:	d5e1      	bpl.n	80040ee <__swbuf_r+0x36>
 800412a:	2d0a      	cmp	r5, #10
 800412c:	d1df      	bne.n	80040ee <__swbuf_r+0x36>
 800412e:	0021      	movs	r1, r4
 8004130:	0030      	movs	r0, r6
 8004132:	f001 f9ff 	bl	8005534 <_fflush_r>
 8004136:	2800      	cmp	r0, #0
 8004138:	d0d9      	beq.n	80040ee <__swbuf_r+0x36>
 800413a:	e7d6      	b.n	80040ea <__swbuf_r+0x32>

0800413c <__swsetup_r>:
 800413c:	4b2d      	ldr	r3, [pc, #180]	@ (80041f4 <__swsetup_r+0xb8>)
 800413e:	b570      	push	{r4, r5, r6, lr}
 8004140:	0005      	movs	r5, r0
 8004142:	6818      	ldr	r0, [r3, #0]
 8004144:	000c      	movs	r4, r1
 8004146:	2800      	cmp	r0, #0
 8004148:	d004      	beq.n	8004154 <__swsetup_r+0x18>
 800414a:	6a03      	ldr	r3, [r0, #32]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d101      	bne.n	8004154 <__swsetup_r+0x18>
 8004150:	f7ff fe64 	bl	8003e1c <__sinit>
 8004154:	230c      	movs	r3, #12
 8004156:	5ee2      	ldrsh	r2, [r4, r3]
 8004158:	0713      	lsls	r3, r2, #28
 800415a:	d423      	bmi.n	80041a4 <__swsetup_r+0x68>
 800415c:	06d3      	lsls	r3, r2, #27
 800415e:	d407      	bmi.n	8004170 <__swsetup_r+0x34>
 8004160:	2309      	movs	r3, #9
 8004162:	602b      	str	r3, [r5, #0]
 8004164:	2340      	movs	r3, #64	@ 0x40
 8004166:	2001      	movs	r0, #1
 8004168:	4313      	orrs	r3, r2
 800416a:	81a3      	strh	r3, [r4, #12]
 800416c:	4240      	negs	r0, r0
 800416e:	e03a      	b.n	80041e6 <__swsetup_r+0xaa>
 8004170:	0752      	lsls	r2, r2, #29
 8004172:	d513      	bpl.n	800419c <__swsetup_r+0x60>
 8004174:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004176:	2900      	cmp	r1, #0
 8004178:	d008      	beq.n	800418c <__swsetup_r+0x50>
 800417a:	0023      	movs	r3, r4
 800417c:	3344      	adds	r3, #68	@ 0x44
 800417e:	4299      	cmp	r1, r3
 8004180:	d002      	beq.n	8004188 <__swsetup_r+0x4c>
 8004182:	0028      	movs	r0, r5
 8004184:	f000 f916 	bl	80043b4 <_free_r>
 8004188:	2300      	movs	r3, #0
 800418a:	6363      	str	r3, [r4, #52]	@ 0x34
 800418c:	2224      	movs	r2, #36	@ 0x24
 800418e:	89a3      	ldrh	r3, [r4, #12]
 8004190:	4393      	bics	r3, r2
 8004192:	81a3      	strh	r3, [r4, #12]
 8004194:	2300      	movs	r3, #0
 8004196:	6063      	str	r3, [r4, #4]
 8004198:	6923      	ldr	r3, [r4, #16]
 800419a:	6023      	str	r3, [r4, #0]
 800419c:	2308      	movs	r3, #8
 800419e:	89a2      	ldrh	r2, [r4, #12]
 80041a0:	4313      	orrs	r3, r2
 80041a2:	81a3      	strh	r3, [r4, #12]
 80041a4:	6923      	ldr	r3, [r4, #16]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <__swsetup_r+0x86>
 80041aa:	21a0      	movs	r1, #160	@ 0xa0
 80041ac:	2280      	movs	r2, #128	@ 0x80
 80041ae:	89a3      	ldrh	r3, [r4, #12]
 80041b0:	0089      	lsls	r1, r1, #2
 80041b2:	0092      	lsls	r2, r2, #2
 80041b4:	400b      	ands	r3, r1
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d003      	beq.n	80041c2 <__swsetup_r+0x86>
 80041ba:	0021      	movs	r1, r4
 80041bc:	0028      	movs	r0, r5
 80041be:	f001 fa0f 	bl	80055e0 <__smakebuf_r>
 80041c2:	230c      	movs	r3, #12
 80041c4:	5ee2      	ldrsh	r2, [r4, r3]
 80041c6:	2101      	movs	r1, #1
 80041c8:	0013      	movs	r3, r2
 80041ca:	400b      	ands	r3, r1
 80041cc:	420a      	tst	r2, r1
 80041ce:	d00b      	beq.n	80041e8 <__swsetup_r+0xac>
 80041d0:	2300      	movs	r3, #0
 80041d2:	60a3      	str	r3, [r4, #8]
 80041d4:	6963      	ldr	r3, [r4, #20]
 80041d6:	425b      	negs	r3, r3
 80041d8:	61a3      	str	r3, [r4, #24]
 80041da:	2000      	movs	r0, #0
 80041dc:	6923      	ldr	r3, [r4, #16]
 80041de:	4283      	cmp	r3, r0
 80041e0:	d101      	bne.n	80041e6 <__swsetup_r+0xaa>
 80041e2:	0613      	lsls	r3, r2, #24
 80041e4:	d4be      	bmi.n	8004164 <__swsetup_r+0x28>
 80041e6:	bd70      	pop	{r4, r5, r6, pc}
 80041e8:	0791      	lsls	r1, r2, #30
 80041ea:	d400      	bmi.n	80041ee <__swsetup_r+0xb2>
 80041ec:	6963      	ldr	r3, [r4, #20]
 80041ee:	60a3      	str	r3, [r4, #8]
 80041f0:	e7f3      	b.n	80041da <__swsetup_r+0x9e>
 80041f2:	46c0      	nop			@ (mov r8, r8)
 80041f4:	20000018 	.word	0x20000018

080041f8 <memset>:
 80041f8:	0003      	movs	r3, r0
 80041fa:	1882      	adds	r2, r0, r2
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d100      	bne.n	8004202 <memset+0xa>
 8004200:	4770      	bx	lr
 8004202:	7019      	strb	r1, [r3, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	e7f9      	b.n	80041fc <memset+0x4>

08004208 <strchr>:
 8004208:	b2c9      	uxtb	r1, r1
 800420a:	7803      	ldrb	r3, [r0, #0]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d004      	beq.n	800421a <strchr+0x12>
 8004210:	428b      	cmp	r3, r1
 8004212:	d100      	bne.n	8004216 <strchr+0xe>
 8004214:	4770      	bx	lr
 8004216:	3001      	adds	r0, #1
 8004218:	e7f7      	b.n	800420a <strchr+0x2>
 800421a:	424b      	negs	r3, r1
 800421c:	4159      	adcs	r1, r3
 800421e:	4249      	negs	r1, r1
 8004220:	4008      	ands	r0, r1
 8004222:	e7f7      	b.n	8004214 <strchr+0xc>

08004224 <strstr>:
 8004224:	780a      	ldrb	r2, [r1, #0]
 8004226:	b530      	push	{r4, r5, lr}
 8004228:	2a00      	cmp	r2, #0
 800422a:	d10c      	bne.n	8004246 <strstr+0x22>
 800422c:	bd30      	pop	{r4, r5, pc}
 800422e:	429a      	cmp	r2, r3
 8004230:	d108      	bne.n	8004244 <strstr+0x20>
 8004232:	2301      	movs	r3, #1
 8004234:	5ccc      	ldrb	r4, [r1, r3]
 8004236:	2c00      	cmp	r4, #0
 8004238:	d0f8      	beq.n	800422c <strstr+0x8>
 800423a:	5cc5      	ldrb	r5, [r0, r3]
 800423c:	42a5      	cmp	r5, r4
 800423e:	d101      	bne.n	8004244 <strstr+0x20>
 8004240:	3301      	adds	r3, #1
 8004242:	e7f7      	b.n	8004234 <strstr+0x10>
 8004244:	3001      	adds	r0, #1
 8004246:	7803      	ldrb	r3, [r0, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1f0      	bne.n	800422e <strstr+0xa>
 800424c:	0018      	movs	r0, r3
 800424e:	e7ed      	b.n	800422c <strstr+0x8>

08004250 <strcasestr>:
 8004250:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004252:	780b      	ldrb	r3, [r1, #0]
 8004254:	0004      	movs	r4, r0
 8004256:	000d      	movs	r5, r1
 8004258:	b085      	sub	sp, #20
 800425a:	2b00      	cmp	r3, #0
 800425c:	d027      	beq.n	80042ae <strcasestr+0x5e>
 800425e:	2103      	movs	r1, #3
 8004260:	4a15      	ldr	r2, [pc, #84]	@ (80042b8 <strcasestr+0x68>)
 8004262:	5cd2      	ldrb	r2, [r2, r3]
 8004264:	400a      	ands	r2, r1
 8004266:	2a01      	cmp	r2, #1
 8004268:	d100      	bne.n	800426c <strcasestr+0x1c>
 800426a:	3320      	adds	r3, #32
 800426c:	3501      	adds	r5, #1
 800426e:	b2db      	uxtb	r3, r3
 8004270:	0028      	movs	r0, r5
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	f7fb ff48 	bl	8000108 <strlen>
 8004278:	0026      	movs	r6, r4
 800427a:	2703      	movs	r7, #3
 800427c:	4b0e      	ldr	r3, [pc, #56]	@ (80042b8 <strcasestr+0x68>)
 800427e:	9002      	str	r0, [sp, #8]
 8004280:	9303      	str	r3, [sp, #12]
 8004282:	0034      	movs	r4, r6
 8004284:	7823      	ldrb	r3, [r4, #0]
 8004286:	3601      	adds	r6, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d013      	beq.n	80042b4 <strcasestr+0x64>
 800428c:	9a03      	ldr	r2, [sp, #12]
 800428e:	5cd2      	ldrb	r2, [r2, r3]
 8004290:	403a      	ands	r2, r7
 8004292:	2a01      	cmp	r2, #1
 8004294:	d100      	bne.n	8004298 <strcasestr+0x48>
 8004296:	3320      	adds	r3, #32
 8004298:	9a01      	ldr	r2, [sp, #4]
 800429a:	b2db      	uxtb	r3, r3
 800429c:	4293      	cmp	r3, r2
 800429e:	d1f0      	bne.n	8004282 <strcasestr+0x32>
 80042a0:	0029      	movs	r1, r5
 80042a2:	0030      	movs	r0, r6
 80042a4:	9a02      	ldr	r2, [sp, #8]
 80042a6:	f001 fa67 	bl	8005778 <strncasecmp>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	d1e9      	bne.n	8004282 <strcasestr+0x32>
 80042ae:	0020      	movs	r0, r4
 80042b0:	b005      	add	sp, #20
 80042b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042b4:	001c      	movs	r4, r3
 80042b6:	e7fa      	b.n	80042ae <strcasestr+0x5e>
 80042b8:	080061b1 	.word	0x080061b1

080042bc <_close_r>:
 80042bc:	2300      	movs	r3, #0
 80042be:	b570      	push	{r4, r5, r6, lr}
 80042c0:	4d06      	ldr	r5, [pc, #24]	@ (80042dc <_close_r+0x20>)
 80042c2:	0004      	movs	r4, r0
 80042c4:	0008      	movs	r0, r1
 80042c6:	602b      	str	r3, [r5, #0]
 80042c8:	f7fc ff33 	bl	8001132 <_close>
 80042cc:	1c43      	adds	r3, r0, #1
 80042ce:	d103      	bne.n	80042d8 <_close_r+0x1c>
 80042d0:	682b      	ldr	r3, [r5, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d000      	beq.n	80042d8 <_close_r+0x1c>
 80042d6:	6023      	str	r3, [r4, #0]
 80042d8:	bd70      	pop	{r4, r5, r6, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	20000284 	.word	0x20000284

080042e0 <_lseek_r>:
 80042e0:	b570      	push	{r4, r5, r6, lr}
 80042e2:	0004      	movs	r4, r0
 80042e4:	0008      	movs	r0, r1
 80042e6:	0011      	movs	r1, r2
 80042e8:	001a      	movs	r2, r3
 80042ea:	2300      	movs	r3, #0
 80042ec:	4d05      	ldr	r5, [pc, #20]	@ (8004304 <_lseek_r+0x24>)
 80042ee:	602b      	str	r3, [r5, #0]
 80042f0:	f7fc ff40 	bl	8001174 <_lseek>
 80042f4:	1c43      	adds	r3, r0, #1
 80042f6:	d103      	bne.n	8004300 <_lseek_r+0x20>
 80042f8:	682b      	ldr	r3, [r5, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d000      	beq.n	8004300 <_lseek_r+0x20>
 80042fe:	6023      	str	r3, [r4, #0]
 8004300:	bd70      	pop	{r4, r5, r6, pc}
 8004302:	46c0      	nop			@ (mov r8, r8)
 8004304:	20000284 	.word	0x20000284

08004308 <_read_r>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	0004      	movs	r4, r0
 800430c:	0008      	movs	r0, r1
 800430e:	0011      	movs	r1, r2
 8004310:	001a      	movs	r2, r3
 8004312:	2300      	movs	r3, #0
 8004314:	4d05      	ldr	r5, [pc, #20]	@ (800432c <_read_r+0x24>)
 8004316:	602b      	str	r3, [r5, #0]
 8004318:	f7fc fed2 	bl	80010c0 <_read>
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	d103      	bne.n	8004328 <_read_r+0x20>
 8004320:	682b      	ldr	r3, [r5, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d000      	beq.n	8004328 <_read_r+0x20>
 8004326:	6023      	str	r3, [r4, #0]
 8004328:	bd70      	pop	{r4, r5, r6, pc}
 800432a:	46c0      	nop			@ (mov r8, r8)
 800432c:	20000284 	.word	0x20000284

08004330 <_write_r>:
 8004330:	b570      	push	{r4, r5, r6, lr}
 8004332:	0004      	movs	r4, r0
 8004334:	0008      	movs	r0, r1
 8004336:	0011      	movs	r1, r2
 8004338:	001a      	movs	r2, r3
 800433a:	2300      	movs	r3, #0
 800433c:	4d05      	ldr	r5, [pc, #20]	@ (8004354 <_write_r+0x24>)
 800433e:	602b      	str	r3, [r5, #0]
 8004340:	f7fc fedb 	bl	80010fa <_write>
 8004344:	1c43      	adds	r3, r0, #1
 8004346:	d103      	bne.n	8004350 <_write_r+0x20>
 8004348:	682b      	ldr	r3, [r5, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d000      	beq.n	8004350 <_write_r+0x20>
 800434e:	6023      	str	r3, [r4, #0]
 8004350:	bd70      	pop	{r4, r5, r6, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	20000284 	.word	0x20000284

08004358 <__errno>:
 8004358:	4b01      	ldr	r3, [pc, #4]	@ (8004360 <__errno+0x8>)
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	4770      	bx	lr
 800435e:	46c0      	nop			@ (mov r8, r8)
 8004360:	20000018 	.word	0x20000018

08004364 <__libc_init_array>:
 8004364:	b570      	push	{r4, r5, r6, lr}
 8004366:	2600      	movs	r6, #0
 8004368:	4c0c      	ldr	r4, [pc, #48]	@ (800439c <__libc_init_array+0x38>)
 800436a:	4d0d      	ldr	r5, [pc, #52]	@ (80043a0 <__libc_init_array+0x3c>)
 800436c:	1b64      	subs	r4, r4, r5
 800436e:	10a4      	asrs	r4, r4, #2
 8004370:	42a6      	cmp	r6, r4
 8004372:	d109      	bne.n	8004388 <__libc_init_array+0x24>
 8004374:	2600      	movs	r6, #0
 8004376:	f001 fbb9 	bl	8005aec <_init>
 800437a:	4c0a      	ldr	r4, [pc, #40]	@ (80043a4 <__libc_init_array+0x40>)
 800437c:	4d0a      	ldr	r5, [pc, #40]	@ (80043a8 <__libc_init_array+0x44>)
 800437e:	1b64      	subs	r4, r4, r5
 8004380:	10a4      	asrs	r4, r4, #2
 8004382:	42a6      	cmp	r6, r4
 8004384:	d105      	bne.n	8004392 <__libc_init_array+0x2e>
 8004386:	bd70      	pop	{r4, r5, r6, pc}
 8004388:	00b3      	lsls	r3, r6, #2
 800438a:	58eb      	ldr	r3, [r5, r3]
 800438c:	4798      	blx	r3
 800438e:	3601      	adds	r6, #1
 8004390:	e7ee      	b.n	8004370 <__libc_init_array+0xc>
 8004392:	00b3      	lsls	r3, r6, #2
 8004394:	58eb      	ldr	r3, [r5, r3]
 8004396:	4798      	blx	r3
 8004398:	3601      	adds	r6, #1
 800439a:	e7f2      	b.n	8004382 <__libc_init_array+0x1e>
 800439c:	08006300 	.word	0x08006300
 80043a0:	08006300 	.word	0x08006300
 80043a4:	08006304 	.word	0x08006304
 80043a8:	08006300 	.word	0x08006300

080043ac <__retarget_lock_init_recursive>:
 80043ac:	4770      	bx	lr

080043ae <__retarget_lock_acquire_recursive>:
 80043ae:	4770      	bx	lr

080043b0 <__retarget_lock_release_recursive>:
 80043b0:	4770      	bx	lr
	...

080043b4 <_free_r>:
 80043b4:	b570      	push	{r4, r5, r6, lr}
 80043b6:	0005      	movs	r5, r0
 80043b8:	1e0c      	subs	r4, r1, #0
 80043ba:	d010      	beq.n	80043de <_free_r+0x2a>
 80043bc:	3c04      	subs	r4, #4
 80043be:	6823      	ldr	r3, [r4, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	da00      	bge.n	80043c6 <_free_r+0x12>
 80043c4:	18e4      	adds	r4, r4, r3
 80043c6:	0028      	movs	r0, r5
 80043c8:	f000 f8e0 	bl	800458c <__malloc_lock>
 80043cc:	4a1d      	ldr	r2, [pc, #116]	@ (8004444 <_free_r+0x90>)
 80043ce:	6813      	ldr	r3, [r2, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d105      	bne.n	80043e0 <_free_r+0x2c>
 80043d4:	6063      	str	r3, [r4, #4]
 80043d6:	6014      	str	r4, [r2, #0]
 80043d8:	0028      	movs	r0, r5
 80043da:	f000 f8df 	bl	800459c <__malloc_unlock>
 80043de:	bd70      	pop	{r4, r5, r6, pc}
 80043e0:	42a3      	cmp	r3, r4
 80043e2:	d908      	bls.n	80043f6 <_free_r+0x42>
 80043e4:	6820      	ldr	r0, [r4, #0]
 80043e6:	1821      	adds	r1, r4, r0
 80043e8:	428b      	cmp	r3, r1
 80043ea:	d1f3      	bne.n	80043d4 <_free_r+0x20>
 80043ec:	6819      	ldr	r1, [r3, #0]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	1809      	adds	r1, r1, r0
 80043f2:	6021      	str	r1, [r4, #0]
 80043f4:	e7ee      	b.n	80043d4 <_free_r+0x20>
 80043f6:	001a      	movs	r2, r3
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <_free_r+0x4e>
 80043fe:	42a3      	cmp	r3, r4
 8004400:	d9f9      	bls.n	80043f6 <_free_r+0x42>
 8004402:	6811      	ldr	r1, [r2, #0]
 8004404:	1850      	adds	r0, r2, r1
 8004406:	42a0      	cmp	r0, r4
 8004408:	d10b      	bne.n	8004422 <_free_r+0x6e>
 800440a:	6820      	ldr	r0, [r4, #0]
 800440c:	1809      	adds	r1, r1, r0
 800440e:	1850      	adds	r0, r2, r1
 8004410:	6011      	str	r1, [r2, #0]
 8004412:	4283      	cmp	r3, r0
 8004414:	d1e0      	bne.n	80043d8 <_free_r+0x24>
 8004416:	6818      	ldr	r0, [r3, #0]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	1841      	adds	r1, r0, r1
 800441c:	6011      	str	r1, [r2, #0]
 800441e:	6053      	str	r3, [r2, #4]
 8004420:	e7da      	b.n	80043d8 <_free_r+0x24>
 8004422:	42a0      	cmp	r0, r4
 8004424:	d902      	bls.n	800442c <_free_r+0x78>
 8004426:	230c      	movs	r3, #12
 8004428:	602b      	str	r3, [r5, #0]
 800442a:	e7d5      	b.n	80043d8 <_free_r+0x24>
 800442c:	6820      	ldr	r0, [r4, #0]
 800442e:	1821      	adds	r1, r4, r0
 8004430:	428b      	cmp	r3, r1
 8004432:	d103      	bne.n	800443c <_free_r+0x88>
 8004434:	6819      	ldr	r1, [r3, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	1809      	adds	r1, r1, r0
 800443a:	6021      	str	r1, [r4, #0]
 800443c:	6063      	str	r3, [r4, #4]
 800443e:	6054      	str	r4, [r2, #4]
 8004440:	e7ca      	b.n	80043d8 <_free_r+0x24>
 8004442:	46c0      	nop			@ (mov r8, r8)
 8004444:	20000290 	.word	0x20000290

08004448 <sbrk_aligned>:
 8004448:	b570      	push	{r4, r5, r6, lr}
 800444a:	4e0f      	ldr	r6, [pc, #60]	@ (8004488 <sbrk_aligned+0x40>)
 800444c:	000d      	movs	r5, r1
 800444e:	6831      	ldr	r1, [r6, #0]
 8004450:	0004      	movs	r4, r0
 8004452:	2900      	cmp	r1, #0
 8004454:	d102      	bne.n	800445c <sbrk_aligned+0x14>
 8004456:	f001 f9d7 	bl	8005808 <_sbrk_r>
 800445a:	6030      	str	r0, [r6, #0]
 800445c:	0029      	movs	r1, r5
 800445e:	0020      	movs	r0, r4
 8004460:	f001 f9d2 	bl	8005808 <_sbrk_r>
 8004464:	1c43      	adds	r3, r0, #1
 8004466:	d103      	bne.n	8004470 <sbrk_aligned+0x28>
 8004468:	2501      	movs	r5, #1
 800446a:	426d      	negs	r5, r5
 800446c:	0028      	movs	r0, r5
 800446e:	bd70      	pop	{r4, r5, r6, pc}
 8004470:	2303      	movs	r3, #3
 8004472:	1cc5      	adds	r5, r0, #3
 8004474:	439d      	bics	r5, r3
 8004476:	42a8      	cmp	r0, r5
 8004478:	d0f8      	beq.n	800446c <sbrk_aligned+0x24>
 800447a:	1a29      	subs	r1, r5, r0
 800447c:	0020      	movs	r0, r4
 800447e:	f001 f9c3 	bl	8005808 <_sbrk_r>
 8004482:	3001      	adds	r0, #1
 8004484:	d1f2      	bne.n	800446c <sbrk_aligned+0x24>
 8004486:	e7ef      	b.n	8004468 <sbrk_aligned+0x20>
 8004488:	2000028c 	.word	0x2000028c

0800448c <_malloc_r>:
 800448c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800448e:	2203      	movs	r2, #3
 8004490:	1ccb      	adds	r3, r1, #3
 8004492:	4393      	bics	r3, r2
 8004494:	3308      	adds	r3, #8
 8004496:	0005      	movs	r5, r0
 8004498:	001f      	movs	r7, r3
 800449a:	2b0c      	cmp	r3, #12
 800449c:	d234      	bcs.n	8004508 <_malloc_r+0x7c>
 800449e:	270c      	movs	r7, #12
 80044a0:	42b9      	cmp	r1, r7
 80044a2:	d833      	bhi.n	800450c <_malloc_r+0x80>
 80044a4:	0028      	movs	r0, r5
 80044a6:	f000 f871 	bl	800458c <__malloc_lock>
 80044aa:	4e37      	ldr	r6, [pc, #220]	@ (8004588 <_malloc_r+0xfc>)
 80044ac:	6833      	ldr	r3, [r6, #0]
 80044ae:	001c      	movs	r4, r3
 80044b0:	2c00      	cmp	r4, #0
 80044b2:	d12f      	bne.n	8004514 <_malloc_r+0x88>
 80044b4:	0039      	movs	r1, r7
 80044b6:	0028      	movs	r0, r5
 80044b8:	f7ff ffc6 	bl	8004448 <sbrk_aligned>
 80044bc:	0004      	movs	r4, r0
 80044be:	1c43      	adds	r3, r0, #1
 80044c0:	d15f      	bne.n	8004582 <_malloc_r+0xf6>
 80044c2:	6834      	ldr	r4, [r6, #0]
 80044c4:	9400      	str	r4, [sp, #0]
 80044c6:	9b00      	ldr	r3, [sp, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d14a      	bne.n	8004562 <_malloc_r+0xd6>
 80044cc:	2c00      	cmp	r4, #0
 80044ce:	d052      	beq.n	8004576 <_malloc_r+0xea>
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	0028      	movs	r0, r5
 80044d4:	18e3      	adds	r3, r4, r3
 80044d6:	9900      	ldr	r1, [sp, #0]
 80044d8:	9301      	str	r3, [sp, #4]
 80044da:	f001 f995 	bl	8005808 <_sbrk_r>
 80044de:	9b01      	ldr	r3, [sp, #4]
 80044e0:	4283      	cmp	r3, r0
 80044e2:	d148      	bne.n	8004576 <_malloc_r+0xea>
 80044e4:	6823      	ldr	r3, [r4, #0]
 80044e6:	0028      	movs	r0, r5
 80044e8:	1aff      	subs	r7, r7, r3
 80044ea:	0039      	movs	r1, r7
 80044ec:	f7ff ffac 	bl	8004448 <sbrk_aligned>
 80044f0:	3001      	adds	r0, #1
 80044f2:	d040      	beq.n	8004576 <_malloc_r+0xea>
 80044f4:	6823      	ldr	r3, [r4, #0]
 80044f6:	19db      	adds	r3, r3, r7
 80044f8:	6023      	str	r3, [r4, #0]
 80044fa:	6833      	ldr	r3, [r6, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	2a00      	cmp	r2, #0
 8004500:	d133      	bne.n	800456a <_malloc_r+0xde>
 8004502:	9b00      	ldr	r3, [sp, #0]
 8004504:	6033      	str	r3, [r6, #0]
 8004506:	e019      	b.n	800453c <_malloc_r+0xb0>
 8004508:	2b00      	cmp	r3, #0
 800450a:	dac9      	bge.n	80044a0 <_malloc_r+0x14>
 800450c:	230c      	movs	r3, #12
 800450e:	602b      	str	r3, [r5, #0]
 8004510:	2000      	movs	r0, #0
 8004512:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004514:	6821      	ldr	r1, [r4, #0]
 8004516:	1bc9      	subs	r1, r1, r7
 8004518:	d420      	bmi.n	800455c <_malloc_r+0xd0>
 800451a:	290b      	cmp	r1, #11
 800451c:	d90a      	bls.n	8004534 <_malloc_r+0xa8>
 800451e:	19e2      	adds	r2, r4, r7
 8004520:	6027      	str	r7, [r4, #0]
 8004522:	42a3      	cmp	r3, r4
 8004524:	d104      	bne.n	8004530 <_malloc_r+0xa4>
 8004526:	6032      	str	r2, [r6, #0]
 8004528:	6863      	ldr	r3, [r4, #4]
 800452a:	6011      	str	r1, [r2, #0]
 800452c:	6053      	str	r3, [r2, #4]
 800452e:	e005      	b.n	800453c <_malloc_r+0xb0>
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	e7f9      	b.n	8004528 <_malloc_r+0x9c>
 8004534:	6862      	ldr	r2, [r4, #4]
 8004536:	42a3      	cmp	r3, r4
 8004538:	d10e      	bne.n	8004558 <_malloc_r+0xcc>
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	0028      	movs	r0, r5
 800453e:	f000 f82d 	bl	800459c <__malloc_unlock>
 8004542:	0020      	movs	r0, r4
 8004544:	2207      	movs	r2, #7
 8004546:	300b      	adds	r0, #11
 8004548:	1d23      	adds	r3, r4, #4
 800454a:	4390      	bics	r0, r2
 800454c:	1ac2      	subs	r2, r0, r3
 800454e:	4298      	cmp	r0, r3
 8004550:	d0df      	beq.n	8004512 <_malloc_r+0x86>
 8004552:	1a1b      	subs	r3, r3, r0
 8004554:	50a3      	str	r3, [r4, r2]
 8004556:	e7dc      	b.n	8004512 <_malloc_r+0x86>
 8004558:	605a      	str	r2, [r3, #4]
 800455a:	e7ef      	b.n	800453c <_malloc_r+0xb0>
 800455c:	0023      	movs	r3, r4
 800455e:	6864      	ldr	r4, [r4, #4]
 8004560:	e7a6      	b.n	80044b0 <_malloc_r+0x24>
 8004562:	9c00      	ldr	r4, [sp, #0]
 8004564:	6863      	ldr	r3, [r4, #4]
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	e7ad      	b.n	80044c6 <_malloc_r+0x3a>
 800456a:	001a      	movs	r2, r3
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	42a3      	cmp	r3, r4
 8004570:	d1fb      	bne.n	800456a <_malloc_r+0xde>
 8004572:	2300      	movs	r3, #0
 8004574:	e7da      	b.n	800452c <_malloc_r+0xa0>
 8004576:	230c      	movs	r3, #12
 8004578:	0028      	movs	r0, r5
 800457a:	602b      	str	r3, [r5, #0]
 800457c:	f000 f80e 	bl	800459c <__malloc_unlock>
 8004580:	e7c6      	b.n	8004510 <_malloc_r+0x84>
 8004582:	6007      	str	r7, [r0, #0]
 8004584:	e7da      	b.n	800453c <_malloc_r+0xb0>
 8004586:	46c0      	nop			@ (mov r8, r8)
 8004588:	20000290 	.word	0x20000290

0800458c <__malloc_lock>:
 800458c:	b510      	push	{r4, lr}
 800458e:	4802      	ldr	r0, [pc, #8]	@ (8004598 <__malloc_lock+0xc>)
 8004590:	f7ff ff0d 	bl	80043ae <__retarget_lock_acquire_recursive>
 8004594:	bd10      	pop	{r4, pc}
 8004596:	46c0      	nop			@ (mov r8, r8)
 8004598:	20000288 	.word	0x20000288

0800459c <__malloc_unlock>:
 800459c:	b510      	push	{r4, lr}
 800459e:	4802      	ldr	r0, [pc, #8]	@ (80045a8 <__malloc_unlock+0xc>)
 80045a0:	f7ff ff06 	bl	80043b0 <__retarget_lock_release_recursive>
 80045a4:	bd10      	pop	{r4, pc}
 80045a6:	46c0      	nop			@ (mov r8, r8)
 80045a8:	20000288 	.word	0x20000288

080045ac <__ssputs_r>:
 80045ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045ae:	688e      	ldr	r6, [r1, #8]
 80045b0:	b085      	sub	sp, #20
 80045b2:	001f      	movs	r7, r3
 80045b4:	000c      	movs	r4, r1
 80045b6:	680b      	ldr	r3, [r1, #0]
 80045b8:	9002      	str	r0, [sp, #8]
 80045ba:	9203      	str	r2, [sp, #12]
 80045bc:	42be      	cmp	r6, r7
 80045be:	d830      	bhi.n	8004622 <__ssputs_r+0x76>
 80045c0:	210c      	movs	r1, #12
 80045c2:	5e62      	ldrsh	r2, [r4, r1]
 80045c4:	2190      	movs	r1, #144	@ 0x90
 80045c6:	00c9      	lsls	r1, r1, #3
 80045c8:	420a      	tst	r2, r1
 80045ca:	d028      	beq.n	800461e <__ssputs_r+0x72>
 80045cc:	2003      	movs	r0, #3
 80045ce:	6921      	ldr	r1, [r4, #16]
 80045d0:	1a5b      	subs	r3, r3, r1
 80045d2:	9301      	str	r3, [sp, #4]
 80045d4:	6963      	ldr	r3, [r4, #20]
 80045d6:	4343      	muls	r3, r0
 80045d8:	9801      	ldr	r0, [sp, #4]
 80045da:	0fdd      	lsrs	r5, r3, #31
 80045dc:	18ed      	adds	r5, r5, r3
 80045de:	1c7b      	adds	r3, r7, #1
 80045e0:	181b      	adds	r3, r3, r0
 80045e2:	106d      	asrs	r5, r5, #1
 80045e4:	42ab      	cmp	r3, r5
 80045e6:	d900      	bls.n	80045ea <__ssputs_r+0x3e>
 80045e8:	001d      	movs	r5, r3
 80045ea:	0552      	lsls	r2, r2, #21
 80045ec:	d528      	bpl.n	8004640 <__ssputs_r+0x94>
 80045ee:	0029      	movs	r1, r5
 80045f0:	9802      	ldr	r0, [sp, #8]
 80045f2:	f7ff ff4b 	bl	800448c <_malloc_r>
 80045f6:	1e06      	subs	r6, r0, #0
 80045f8:	d02c      	beq.n	8004654 <__ssputs_r+0xa8>
 80045fa:	9a01      	ldr	r2, [sp, #4]
 80045fc:	6921      	ldr	r1, [r4, #16]
 80045fe:	f001 f920 	bl	8005842 <memcpy>
 8004602:	89a2      	ldrh	r2, [r4, #12]
 8004604:	4b18      	ldr	r3, [pc, #96]	@ (8004668 <__ssputs_r+0xbc>)
 8004606:	401a      	ands	r2, r3
 8004608:	2380      	movs	r3, #128	@ 0x80
 800460a:	4313      	orrs	r3, r2
 800460c:	81a3      	strh	r3, [r4, #12]
 800460e:	9b01      	ldr	r3, [sp, #4]
 8004610:	6126      	str	r6, [r4, #16]
 8004612:	18f6      	adds	r6, r6, r3
 8004614:	6026      	str	r6, [r4, #0]
 8004616:	003e      	movs	r6, r7
 8004618:	6165      	str	r5, [r4, #20]
 800461a:	1aed      	subs	r5, r5, r3
 800461c:	60a5      	str	r5, [r4, #8]
 800461e:	42be      	cmp	r6, r7
 8004620:	d900      	bls.n	8004624 <__ssputs_r+0x78>
 8004622:	003e      	movs	r6, r7
 8004624:	0032      	movs	r2, r6
 8004626:	9903      	ldr	r1, [sp, #12]
 8004628:	6820      	ldr	r0, [r4, #0]
 800462a:	f001 f891 	bl	8005750 <memmove>
 800462e:	2000      	movs	r0, #0
 8004630:	68a3      	ldr	r3, [r4, #8]
 8004632:	1b9b      	subs	r3, r3, r6
 8004634:	60a3      	str	r3, [r4, #8]
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	199b      	adds	r3, r3, r6
 800463a:	6023      	str	r3, [r4, #0]
 800463c:	b005      	add	sp, #20
 800463e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004640:	002a      	movs	r2, r5
 8004642:	9802      	ldr	r0, [sp, #8]
 8004644:	f001 f906 	bl	8005854 <_realloc_r>
 8004648:	1e06      	subs	r6, r0, #0
 800464a:	d1e0      	bne.n	800460e <__ssputs_r+0x62>
 800464c:	6921      	ldr	r1, [r4, #16]
 800464e:	9802      	ldr	r0, [sp, #8]
 8004650:	f7ff feb0 	bl	80043b4 <_free_r>
 8004654:	230c      	movs	r3, #12
 8004656:	2001      	movs	r0, #1
 8004658:	9a02      	ldr	r2, [sp, #8]
 800465a:	4240      	negs	r0, r0
 800465c:	6013      	str	r3, [r2, #0]
 800465e:	89a2      	ldrh	r2, [r4, #12]
 8004660:	3334      	adds	r3, #52	@ 0x34
 8004662:	4313      	orrs	r3, r2
 8004664:	81a3      	strh	r3, [r4, #12]
 8004666:	e7e9      	b.n	800463c <__ssputs_r+0x90>
 8004668:	fffffb7f 	.word	0xfffffb7f

0800466c <_svfiprintf_r>:
 800466c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800466e:	b0a1      	sub	sp, #132	@ 0x84
 8004670:	9003      	str	r0, [sp, #12]
 8004672:	001d      	movs	r5, r3
 8004674:	898b      	ldrh	r3, [r1, #12]
 8004676:	000f      	movs	r7, r1
 8004678:	0016      	movs	r6, r2
 800467a:	061b      	lsls	r3, r3, #24
 800467c:	d511      	bpl.n	80046a2 <_svfiprintf_r+0x36>
 800467e:	690b      	ldr	r3, [r1, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10e      	bne.n	80046a2 <_svfiprintf_r+0x36>
 8004684:	2140      	movs	r1, #64	@ 0x40
 8004686:	f7ff ff01 	bl	800448c <_malloc_r>
 800468a:	6038      	str	r0, [r7, #0]
 800468c:	6138      	str	r0, [r7, #16]
 800468e:	2800      	cmp	r0, #0
 8004690:	d105      	bne.n	800469e <_svfiprintf_r+0x32>
 8004692:	230c      	movs	r3, #12
 8004694:	9a03      	ldr	r2, [sp, #12]
 8004696:	6013      	str	r3, [r2, #0]
 8004698:	2001      	movs	r0, #1
 800469a:	4240      	negs	r0, r0
 800469c:	e0cf      	b.n	800483e <_svfiprintf_r+0x1d2>
 800469e:	2340      	movs	r3, #64	@ 0x40
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	2300      	movs	r3, #0
 80046a4:	ac08      	add	r4, sp, #32
 80046a6:	6163      	str	r3, [r4, #20]
 80046a8:	3320      	adds	r3, #32
 80046aa:	7663      	strb	r3, [r4, #25]
 80046ac:	3310      	adds	r3, #16
 80046ae:	76a3      	strb	r3, [r4, #26]
 80046b0:	9507      	str	r5, [sp, #28]
 80046b2:	0035      	movs	r5, r6
 80046b4:	782b      	ldrb	r3, [r5, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d001      	beq.n	80046be <_svfiprintf_r+0x52>
 80046ba:	2b25      	cmp	r3, #37	@ 0x25
 80046bc:	d148      	bne.n	8004750 <_svfiprintf_r+0xe4>
 80046be:	1bab      	subs	r3, r5, r6
 80046c0:	9305      	str	r3, [sp, #20]
 80046c2:	42b5      	cmp	r5, r6
 80046c4:	d00b      	beq.n	80046de <_svfiprintf_r+0x72>
 80046c6:	0032      	movs	r2, r6
 80046c8:	0039      	movs	r1, r7
 80046ca:	9803      	ldr	r0, [sp, #12]
 80046cc:	f7ff ff6e 	bl	80045ac <__ssputs_r>
 80046d0:	3001      	adds	r0, #1
 80046d2:	d100      	bne.n	80046d6 <_svfiprintf_r+0x6a>
 80046d4:	e0ae      	b.n	8004834 <_svfiprintf_r+0x1c8>
 80046d6:	6963      	ldr	r3, [r4, #20]
 80046d8:	9a05      	ldr	r2, [sp, #20]
 80046da:	189b      	adds	r3, r3, r2
 80046dc:	6163      	str	r3, [r4, #20]
 80046de:	782b      	ldrb	r3, [r5, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d100      	bne.n	80046e6 <_svfiprintf_r+0x7a>
 80046e4:	e0a6      	b.n	8004834 <_svfiprintf_r+0x1c8>
 80046e6:	2201      	movs	r2, #1
 80046e8:	2300      	movs	r3, #0
 80046ea:	4252      	negs	r2, r2
 80046ec:	6062      	str	r2, [r4, #4]
 80046ee:	a904      	add	r1, sp, #16
 80046f0:	3254      	adds	r2, #84	@ 0x54
 80046f2:	1852      	adds	r2, r2, r1
 80046f4:	1c6e      	adds	r6, r5, #1
 80046f6:	6023      	str	r3, [r4, #0]
 80046f8:	60e3      	str	r3, [r4, #12]
 80046fa:	60a3      	str	r3, [r4, #8]
 80046fc:	7013      	strb	r3, [r2, #0]
 80046fe:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004700:	4b54      	ldr	r3, [pc, #336]	@ (8004854 <_svfiprintf_r+0x1e8>)
 8004702:	2205      	movs	r2, #5
 8004704:	0018      	movs	r0, r3
 8004706:	7831      	ldrb	r1, [r6, #0]
 8004708:	9305      	str	r3, [sp, #20]
 800470a:	f001 f88f 	bl	800582c <memchr>
 800470e:	1c75      	adds	r5, r6, #1
 8004710:	2800      	cmp	r0, #0
 8004712:	d11f      	bne.n	8004754 <_svfiprintf_r+0xe8>
 8004714:	6822      	ldr	r2, [r4, #0]
 8004716:	06d3      	lsls	r3, r2, #27
 8004718:	d504      	bpl.n	8004724 <_svfiprintf_r+0xb8>
 800471a:	2353      	movs	r3, #83	@ 0x53
 800471c:	a904      	add	r1, sp, #16
 800471e:	185b      	adds	r3, r3, r1
 8004720:	2120      	movs	r1, #32
 8004722:	7019      	strb	r1, [r3, #0]
 8004724:	0713      	lsls	r3, r2, #28
 8004726:	d504      	bpl.n	8004732 <_svfiprintf_r+0xc6>
 8004728:	2353      	movs	r3, #83	@ 0x53
 800472a:	a904      	add	r1, sp, #16
 800472c:	185b      	adds	r3, r3, r1
 800472e:	212b      	movs	r1, #43	@ 0x2b
 8004730:	7019      	strb	r1, [r3, #0]
 8004732:	7833      	ldrb	r3, [r6, #0]
 8004734:	2b2a      	cmp	r3, #42	@ 0x2a
 8004736:	d016      	beq.n	8004766 <_svfiprintf_r+0xfa>
 8004738:	0035      	movs	r5, r6
 800473a:	2100      	movs	r1, #0
 800473c:	200a      	movs	r0, #10
 800473e:	68e3      	ldr	r3, [r4, #12]
 8004740:	782a      	ldrb	r2, [r5, #0]
 8004742:	1c6e      	adds	r6, r5, #1
 8004744:	3a30      	subs	r2, #48	@ 0x30
 8004746:	2a09      	cmp	r2, #9
 8004748:	d950      	bls.n	80047ec <_svfiprintf_r+0x180>
 800474a:	2900      	cmp	r1, #0
 800474c:	d111      	bne.n	8004772 <_svfiprintf_r+0x106>
 800474e:	e017      	b.n	8004780 <_svfiprintf_r+0x114>
 8004750:	3501      	adds	r5, #1
 8004752:	e7af      	b.n	80046b4 <_svfiprintf_r+0x48>
 8004754:	9b05      	ldr	r3, [sp, #20]
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	1ac0      	subs	r0, r0, r3
 800475a:	2301      	movs	r3, #1
 800475c:	4083      	lsls	r3, r0
 800475e:	4313      	orrs	r3, r2
 8004760:	002e      	movs	r6, r5
 8004762:	6023      	str	r3, [r4, #0]
 8004764:	e7cc      	b.n	8004700 <_svfiprintf_r+0x94>
 8004766:	9b07      	ldr	r3, [sp, #28]
 8004768:	1d19      	adds	r1, r3, #4
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	9107      	str	r1, [sp, #28]
 800476e:	2b00      	cmp	r3, #0
 8004770:	db01      	blt.n	8004776 <_svfiprintf_r+0x10a>
 8004772:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004774:	e004      	b.n	8004780 <_svfiprintf_r+0x114>
 8004776:	425b      	negs	r3, r3
 8004778:	60e3      	str	r3, [r4, #12]
 800477a:	2302      	movs	r3, #2
 800477c:	4313      	orrs	r3, r2
 800477e:	6023      	str	r3, [r4, #0]
 8004780:	782b      	ldrb	r3, [r5, #0]
 8004782:	2b2e      	cmp	r3, #46	@ 0x2e
 8004784:	d10c      	bne.n	80047a0 <_svfiprintf_r+0x134>
 8004786:	786b      	ldrb	r3, [r5, #1]
 8004788:	2b2a      	cmp	r3, #42	@ 0x2a
 800478a:	d134      	bne.n	80047f6 <_svfiprintf_r+0x18a>
 800478c:	9b07      	ldr	r3, [sp, #28]
 800478e:	3502      	adds	r5, #2
 8004790:	1d1a      	adds	r2, r3, #4
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	9207      	str	r2, [sp, #28]
 8004796:	2b00      	cmp	r3, #0
 8004798:	da01      	bge.n	800479e <_svfiprintf_r+0x132>
 800479a:	2301      	movs	r3, #1
 800479c:	425b      	negs	r3, r3
 800479e:	9309      	str	r3, [sp, #36]	@ 0x24
 80047a0:	4e2d      	ldr	r6, [pc, #180]	@ (8004858 <_svfiprintf_r+0x1ec>)
 80047a2:	2203      	movs	r2, #3
 80047a4:	0030      	movs	r0, r6
 80047a6:	7829      	ldrb	r1, [r5, #0]
 80047a8:	f001 f840 	bl	800582c <memchr>
 80047ac:	2800      	cmp	r0, #0
 80047ae:	d006      	beq.n	80047be <_svfiprintf_r+0x152>
 80047b0:	2340      	movs	r3, #64	@ 0x40
 80047b2:	1b80      	subs	r0, r0, r6
 80047b4:	4083      	lsls	r3, r0
 80047b6:	6822      	ldr	r2, [r4, #0]
 80047b8:	3501      	adds	r5, #1
 80047ba:	4313      	orrs	r3, r2
 80047bc:	6023      	str	r3, [r4, #0]
 80047be:	7829      	ldrb	r1, [r5, #0]
 80047c0:	2206      	movs	r2, #6
 80047c2:	4826      	ldr	r0, [pc, #152]	@ (800485c <_svfiprintf_r+0x1f0>)
 80047c4:	1c6e      	adds	r6, r5, #1
 80047c6:	7621      	strb	r1, [r4, #24]
 80047c8:	f001 f830 	bl	800582c <memchr>
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d038      	beq.n	8004842 <_svfiprintf_r+0x1d6>
 80047d0:	4b23      	ldr	r3, [pc, #140]	@ (8004860 <_svfiprintf_r+0x1f4>)
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d122      	bne.n	800481c <_svfiprintf_r+0x1b0>
 80047d6:	2207      	movs	r2, #7
 80047d8:	9b07      	ldr	r3, [sp, #28]
 80047da:	3307      	adds	r3, #7
 80047dc:	4393      	bics	r3, r2
 80047de:	3308      	adds	r3, #8
 80047e0:	9307      	str	r3, [sp, #28]
 80047e2:	6963      	ldr	r3, [r4, #20]
 80047e4:	9a04      	ldr	r2, [sp, #16]
 80047e6:	189b      	adds	r3, r3, r2
 80047e8:	6163      	str	r3, [r4, #20]
 80047ea:	e762      	b.n	80046b2 <_svfiprintf_r+0x46>
 80047ec:	4343      	muls	r3, r0
 80047ee:	0035      	movs	r5, r6
 80047f0:	2101      	movs	r1, #1
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	e7a4      	b.n	8004740 <_svfiprintf_r+0xd4>
 80047f6:	2300      	movs	r3, #0
 80047f8:	200a      	movs	r0, #10
 80047fa:	0019      	movs	r1, r3
 80047fc:	3501      	adds	r5, #1
 80047fe:	6063      	str	r3, [r4, #4]
 8004800:	782a      	ldrb	r2, [r5, #0]
 8004802:	1c6e      	adds	r6, r5, #1
 8004804:	3a30      	subs	r2, #48	@ 0x30
 8004806:	2a09      	cmp	r2, #9
 8004808:	d903      	bls.n	8004812 <_svfiprintf_r+0x1a6>
 800480a:	2b00      	cmp	r3, #0
 800480c:	d0c8      	beq.n	80047a0 <_svfiprintf_r+0x134>
 800480e:	9109      	str	r1, [sp, #36]	@ 0x24
 8004810:	e7c6      	b.n	80047a0 <_svfiprintf_r+0x134>
 8004812:	4341      	muls	r1, r0
 8004814:	0035      	movs	r5, r6
 8004816:	2301      	movs	r3, #1
 8004818:	1889      	adds	r1, r1, r2
 800481a:	e7f1      	b.n	8004800 <_svfiprintf_r+0x194>
 800481c:	aa07      	add	r2, sp, #28
 800481e:	9200      	str	r2, [sp, #0]
 8004820:	0021      	movs	r1, r4
 8004822:	003a      	movs	r2, r7
 8004824:	4b0f      	ldr	r3, [pc, #60]	@ (8004864 <_svfiprintf_r+0x1f8>)
 8004826:	9803      	ldr	r0, [sp, #12]
 8004828:	e000      	b.n	800482c <_svfiprintf_r+0x1c0>
 800482a:	bf00      	nop
 800482c:	9004      	str	r0, [sp, #16]
 800482e:	9b04      	ldr	r3, [sp, #16]
 8004830:	3301      	adds	r3, #1
 8004832:	d1d6      	bne.n	80047e2 <_svfiprintf_r+0x176>
 8004834:	89bb      	ldrh	r3, [r7, #12]
 8004836:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004838:	065b      	lsls	r3, r3, #25
 800483a:	d500      	bpl.n	800483e <_svfiprintf_r+0x1d2>
 800483c:	e72c      	b.n	8004698 <_svfiprintf_r+0x2c>
 800483e:	b021      	add	sp, #132	@ 0x84
 8004840:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004842:	aa07      	add	r2, sp, #28
 8004844:	9200      	str	r2, [sp, #0]
 8004846:	0021      	movs	r1, r4
 8004848:	003a      	movs	r2, r7
 800484a:	4b06      	ldr	r3, [pc, #24]	@ (8004864 <_svfiprintf_r+0x1f8>)
 800484c:	9803      	ldr	r0, [sp, #12]
 800484e:	f000 fb7d 	bl	8004f4c <_printf_i>
 8004852:	e7eb      	b.n	800482c <_svfiprintf_r+0x1c0>
 8004854:	080062b1 	.word	0x080062b1
 8004858:	080062b7 	.word	0x080062b7
 800485c:	080062bb 	.word	0x080062bb
 8004860:	00000000 	.word	0x00000000
 8004864:	080045ad 	.word	0x080045ad

08004868 <_sungetc_r>:
 8004868:	b570      	push	{r4, r5, r6, lr}
 800486a:	0014      	movs	r4, r2
 800486c:	1c4b      	adds	r3, r1, #1
 800486e:	d103      	bne.n	8004878 <_sungetc_r+0x10>
 8004870:	2501      	movs	r5, #1
 8004872:	426d      	negs	r5, r5
 8004874:	0028      	movs	r0, r5
 8004876:	bd70      	pop	{r4, r5, r6, pc}
 8004878:	8993      	ldrh	r3, [r2, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	4393      	bics	r3, r2
 800487e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004880:	81a3      	strh	r3, [r4, #12]
 8004882:	b2ce      	uxtb	r6, r1
 8004884:	6863      	ldr	r3, [r4, #4]
 8004886:	b2cd      	uxtb	r5, r1
 8004888:	2a00      	cmp	r2, #0
 800488a:	d010      	beq.n	80048ae <_sungetc_r+0x46>
 800488c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800488e:	429a      	cmp	r2, r3
 8004890:	dd07      	ble.n	80048a2 <_sungetc_r+0x3a>
 8004892:	6823      	ldr	r3, [r4, #0]
 8004894:	3b01      	subs	r3, #1
 8004896:	6023      	str	r3, [r4, #0]
 8004898:	701e      	strb	r6, [r3, #0]
 800489a:	6863      	ldr	r3, [r4, #4]
 800489c:	3301      	adds	r3, #1
 800489e:	6063      	str	r3, [r4, #4]
 80048a0:	e7e8      	b.n	8004874 <_sungetc_r+0xc>
 80048a2:	0021      	movs	r1, r4
 80048a4:	f000 ff16 	bl	80056d4 <__submore>
 80048a8:	2800      	cmp	r0, #0
 80048aa:	d0f2      	beq.n	8004892 <_sungetc_r+0x2a>
 80048ac:	e7e0      	b.n	8004870 <_sungetc_r+0x8>
 80048ae:	6921      	ldr	r1, [r4, #16]
 80048b0:	6822      	ldr	r2, [r4, #0]
 80048b2:	2900      	cmp	r1, #0
 80048b4:	d007      	beq.n	80048c6 <_sungetc_r+0x5e>
 80048b6:	4291      	cmp	r1, r2
 80048b8:	d205      	bcs.n	80048c6 <_sungetc_r+0x5e>
 80048ba:	1e51      	subs	r1, r2, #1
 80048bc:	7808      	ldrb	r0, [r1, #0]
 80048be:	42a8      	cmp	r0, r5
 80048c0:	d101      	bne.n	80048c6 <_sungetc_r+0x5e>
 80048c2:	6021      	str	r1, [r4, #0]
 80048c4:	e7ea      	b.n	800489c <_sungetc_r+0x34>
 80048c6:	6423      	str	r3, [r4, #64]	@ 0x40
 80048c8:	0023      	movs	r3, r4
 80048ca:	3344      	adds	r3, #68	@ 0x44
 80048cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80048ce:	2303      	movs	r3, #3
 80048d0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80048d2:	0023      	movs	r3, r4
 80048d4:	3346      	adds	r3, #70	@ 0x46
 80048d6:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80048d8:	701e      	strb	r6, [r3, #0]
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	2301      	movs	r3, #1
 80048de:	e7de      	b.n	800489e <_sungetc_r+0x36>

080048e0 <__ssrefill_r>:
 80048e0:	b510      	push	{r4, lr}
 80048e2:	000c      	movs	r4, r1
 80048e4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80048e6:	2900      	cmp	r1, #0
 80048e8:	d00e      	beq.n	8004908 <__ssrefill_r+0x28>
 80048ea:	0023      	movs	r3, r4
 80048ec:	3344      	adds	r3, #68	@ 0x44
 80048ee:	4299      	cmp	r1, r3
 80048f0:	d001      	beq.n	80048f6 <__ssrefill_r+0x16>
 80048f2:	f7ff fd5f 	bl	80043b4 <_free_r>
 80048f6:	2000      	movs	r0, #0
 80048f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048fa:	6360      	str	r0, [r4, #52]	@ 0x34
 80048fc:	6063      	str	r3, [r4, #4]
 80048fe:	4283      	cmp	r3, r0
 8004900:	d002      	beq.n	8004908 <__ssrefill_r+0x28>
 8004902:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004904:	6023      	str	r3, [r4, #0]
 8004906:	bd10      	pop	{r4, pc}
 8004908:	6923      	ldr	r3, [r4, #16]
 800490a:	2001      	movs	r0, #1
 800490c:	6023      	str	r3, [r4, #0]
 800490e:	2300      	movs	r3, #0
 8004910:	89a2      	ldrh	r2, [r4, #12]
 8004912:	6063      	str	r3, [r4, #4]
 8004914:	3320      	adds	r3, #32
 8004916:	4313      	orrs	r3, r2
 8004918:	81a3      	strh	r3, [r4, #12]
 800491a:	4240      	negs	r0, r0
 800491c:	e7f3      	b.n	8004906 <__ssrefill_r+0x26>
	...

08004920 <__ssvfiscanf_r>:
 8004920:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004922:	4caa      	ldr	r4, [pc, #680]	@ (8004bcc <__ssvfiscanf_r+0x2ac>)
 8004924:	44a5      	add	sp, r4
 8004926:	000c      	movs	r4, r1
 8004928:	2100      	movs	r1, #0
 800492a:	9001      	str	r0, [sp, #4]
 800492c:	20be      	movs	r0, #190	@ 0xbe
 800492e:	9146      	str	r1, [sp, #280]	@ 0x118
 8004930:	9147      	str	r1, [sp, #284]	@ 0x11c
 8004932:	a903      	add	r1, sp, #12
 8004934:	9148      	str	r1, [sp, #288]	@ 0x120
 8004936:	49a6      	ldr	r1, [pc, #664]	@ (8004bd0 <__ssvfiscanf_r+0x2b0>)
 8004938:	0040      	lsls	r0, r0, #1
 800493a:	ad43      	add	r5, sp, #268	@ 0x10c
 800493c:	5029      	str	r1, [r5, r0]
 800493e:	49a5      	ldr	r1, [pc, #660]	@ (8004bd4 <__ssvfiscanf_r+0x2b4>)
 8004940:	3004      	adds	r0, #4
 8004942:	ad43      	add	r5, sp, #268	@ 0x10c
 8004944:	5029      	str	r1, [r5, r0]
 8004946:	9302      	str	r3, [sp, #8]
 8004948:	7813      	ldrb	r3, [r2, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d100      	bne.n	8004950 <__ssvfiscanf_r+0x30>
 800494e:	e13a      	b.n	8004bc6 <__ssvfiscanf_r+0x2a6>
 8004950:	2108      	movs	r1, #8
 8004952:	2708      	movs	r7, #8
 8004954:	4ea0      	ldr	r6, [pc, #640]	@ (8004bd8 <__ssvfiscanf_r+0x2b8>)
 8004956:	1c55      	adds	r5, r2, #1
 8004958:	5cf0      	ldrb	r0, [r6, r3]
 800495a:	4001      	ands	r1, r0
 800495c:	4238      	tst	r0, r7
 800495e:	d01c      	beq.n	800499a <__ssvfiscanf_r+0x7a>
 8004960:	6863      	ldr	r3, [r4, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	dd0f      	ble.n	8004986 <__ssvfiscanf_r+0x66>
 8004966:	6823      	ldr	r3, [r4, #0]
 8004968:	781a      	ldrb	r2, [r3, #0]
 800496a:	5cb2      	ldrb	r2, [r6, r2]
 800496c:	423a      	tst	r2, r7
 800496e:	d101      	bne.n	8004974 <__ssvfiscanf_r+0x54>
 8004970:	002a      	movs	r2, r5
 8004972:	e7e9      	b.n	8004948 <__ssvfiscanf_r+0x28>
 8004974:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8004976:	3301      	adds	r3, #1
 8004978:	3201      	adds	r2, #1
 800497a:	9247      	str	r2, [sp, #284]	@ 0x11c
 800497c:	6862      	ldr	r2, [r4, #4]
 800497e:	6023      	str	r3, [r4, #0]
 8004980:	3a01      	subs	r2, #1
 8004982:	6062      	str	r2, [r4, #4]
 8004984:	e7ec      	b.n	8004960 <__ssvfiscanf_r+0x40>
 8004986:	22c0      	movs	r2, #192	@ 0xc0
 8004988:	ab43      	add	r3, sp, #268	@ 0x10c
 800498a:	0052      	lsls	r2, r2, #1
 800498c:	0021      	movs	r1, r4
 800498e:	589b      	ldr	r3, [r3, r2]
 8004990:	9801      	ldr	r0, [sp, #4]
 8004992:	4798      	blx	r3
 8004994:	2800      	cmp	r0, #0
 8004996:	d0e6      	beq.n	8004966 <__ssvfiscanf_r+0x46>
 8004998:	e7ea      	b.n	8004970 <__ssvfiscanf_r+0x50>
 800499a:	001e      	movs	r6, r3
 800499c:	2b25      	cmp	r3, #37	@ 0x25
 800499e:	d160      	bne.n	8004a62 <__ssvfiscanf_r+0x142>
 80049a0:	9145      	str	r1, [sp, #276]	@ 0x114
 80049a2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80049a4:	7853      	ldrb	r3, [r2, #1]
 80049a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80049a8:	d102      	bne.n	80049b0 <__ssvfiscanf_r+0x90>
 80049aa:	3b1a      	subs	r3, #26
 80049ac:	9343      	str	r3, [sp, #268]	@ 0x10c
 80049ae:	1c95      	adds	r5, r2, #2
 80049b0:	002e      	movs	r6, r5
 80049b2:	220a      	movs	r2, #10
 80049b4:	7831      	ldrb	r1, [r6, #0]
 80049b6:	1c75      	adds	r5, r6, #1
 80049b8:	000b      	movs	r3, r1
 80049ba:	3b30      	subs	r3, #48	@ 0x30
 80049bc:	2b09      	cmp	r3, #9
 80049be:	d91d      	bls.n	80049fc <__ssvfiscanf_r+0xdc>
 80049c0:	4f86      	ldr	r7, [pc, #536]	@ (8004bdc <__ssvfiscanf_r+0x2bc>)
 80049c2:	2203      	movs	r2, #3
 80049c4:	0038      	movs	r0, r7
 80049c6:	f000 ff31 	bl	800582c <memchr>
 80049ca:	2800      	cmp	r0, #0
 80049cc:	d006      	beq.n	80049dc <__ssvfiscanf_r+0xbc>
 80049ce:	2301      	movs	r3, #1
 80049d0:	1bc0      	subs	r0, r0, r7
 80049d2:	4083      	lsls	r3, r0
 80049d4:	002e      	movs	r6, r5
 80049d6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80049d8:	4313      	orrs	r3, r2
 80049da:	9343      	str	r3, [sp, #268]	@ 0x10c
 80049dc:	1c75      	adds	r5, r6, #1
 80049de:	7836      	ldrb	r6, [r6, #0]
 80049e0:	2e78      	cmp	r6, #120	@ 0x78
 80049e2:	d806      	bhi.n	80049f2 <__ssvfiscanf_r+0xd2>
 80049e4:	2e57      	cmp	r6, #87	@ 0x57
 80049e6:	d810      	bhi.n	8004a0a <__ssvfiscanf_r+0xea>
 80049e8:	2e25      	cmp	r6, #37	@ 0x25
 80049ea:	d03a      	beq.n	8004a62 <__ssvfiscanf_r+0x142>
 80049ec:	d834      	bhi.n	8004a58 <__ssvfiscanf_r+0x138>
 80049ee:	2e00      	cmp	r6, #0
 80049f0:	d055      	beq.n	8004a9e <__ssvfiscanf_r+0x17e>
 80049f2:	2303      	movs	r3, #3
 80049f4:	9349      	str	r3, [sp, #292]	@ 0x124
 80049f6:	3307      	adds	r3, #7
 80049f8:	9344      	str	r3, [sp, #272]	@ 0x110
 80049fa:	e069      	b.n	8004ad0 <__ssvfiscanf_r+0x1b0>
 80049fc:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80049fe:	002e      	movs	r6, r5
 8004a00:	4353      	muls	r3, r2
 8004a02:	3b30      	subs	r3, #48	@ 0x30
 8004a04:	185b      	adds	r3, r3, r1
 8004a06:	9345      	str	r3, [sp, #276]	@ 0x114
 8004a08:	e7d4      	b.n	80049b4 <__ssvfiscanf_r+0x94>
 8004a0a:	0030      	movs	r0, r6
 8004a0c:	3858      	subs	r0, #88	@ 0x58
 8004a0e:	2820      	cmp	r0, #32
 8004a10:	d8ef      	bhi.n	80049f2 <__ssvfiscanf_r+0xd2>
 8004a12:	f7fb fb81 	bl	8000118 <__gnu_thumb1_case_shi>
 8004a16:	004b      	.short	0x004b
 8004a18:	ffeeffee 	.word	0xffeeffee
 8004a1c:	ffee007d 	.word	0xffee007d
 8004a20:	ffeeffee 	.word	0xffeeffee
 8004a24:	ffeeffee 	.word	0xffeeffee
 8004a28:	ffeeffee 	.word	0xffeeffee
 8004a2c:	007b0088 	.word	0x007b0088
 8004a30:	00240024 	.word	0x00240024
 8004a34:	ffee0024 	.word	0xffee0024
 8004a38:	ffee0055 	.word	0xffee0055
 8004a3c:	ffeeffee 	.word	0xffeeffee
 8004a40:	0090ffee 	.word	0x0090ffee
 8004a44:	00470059 	.word	0x00470059
 8004a48:	ffeeffee 	.word	0xffeeffee
 8004a4c:	ffee008e 	.word	0xffee008e
 8004a50:	ffee007b 	.word	0xffee007b
 8004a54:	004bffee 	.word	0x004bffee
 8004a58:	3e45      	subs	r6, #69	@ 0x45
 8004a5a:	2e02      	cmp	r6, #2
 8004a5c:	d8c9      	bhi.n	80049f2 <__ssvfiscanf_r+0xd2>
 8004a5e:	2305      	movs	r3, #5
 8004a60:	e035      	b.n	8004ace <__ssvfiscanf_r+0x1ae>
 8004a62:	6863      	ldr	r3, [r4, #4]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	dd0d      	ble.n	8004a84 <__ssvfiscanf_r+0x164>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	781a      	ldrb	r2, [r3, #0]
 8004a6c:	42b2      	cmp	r2, r6
 8004a6e:	d000      	beq.n	8004a72 <__ssvfiscanf_r+0x152>
 8004a70:	e0a9      	b.n	8004bc6 <__ssvfiscanf_r+0x2a6>
 8004a72:	3301      	adds	r3, #1
 8004a74:	6862      	ldr	r2, [r4, #4]
 8004a76:	6023      	str	r3, [r4, #0]
 8004a78:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004a7a:	3a01      	subs	r2, #1
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	6062      	str	r2, [r4, #4]
 8004a80:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004a82:	e775      	b.n	8004970 <__ssvfiscanf_r+0x50>
 8004a84:	23c0      	movs	r3, #192	@ 0xc0
 8004a86:	aa43      	add	r2, sp, #268	@ 0x10c
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	0021      	movs	r1, r4
 8004a8c:	58d3      	ldr	r3, [r2, r3]
 8004a8e:	9801      	ldr	r0, [sp, #4]
 8004a90:	4798      	blx	r3
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d0e8      	beq.n	8004a68 <__ssvfiscanf_r+0x148>
 8004a96:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004a98:	2800      	cmp	r0, #0
 8004a9a:	d000      	beq.n	8004a9e <__ssvfiscanf_r+0x17e>
 8004a9c:	e08b      	b.n	8004bb6 <__ssvfiscanf_r+0x296>
 8004a9e:	2001      	movs	r0, #1
 8004aa0:	4240      	negs	r0, r0
 8004aa2:	e08c      	b.n	8004bbe <__ssvfiscanf_r+0x29e>
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004aac:	2380      	movs	r3, #128	@ 0x80
 8004aae:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004ab6:	2310      	movs	r3, #16
 8004ab8:	9344      	str	r3, [sp, #272]	@ 0x110
 8004aba:	2e6e      	cmp	r6, #110	@ 0x6e
 8004abc:	d902      	bls.n	8004ac4 <__ssvfiscanf_r+0x1a4>
 8004abe:	e005      	b.n	8004acc <__ssvfiscanf_r+0x1ac>
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	9344      	str	r3, [sp, #272]	@ 0x110
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e002      	b.n	8004ace <__ssvfiscanf_r+0x1ae>
 8004ac8:	2308      	movs	r3, #8
 8004aca:	9344      	str	r3, [sp, #272]	@ 0x110
 8004acc:	2304      	movs	r3, #4
 8004ace:	9349      	str	r3, [sp, #292]	@ 0x124
 8004ad0:	6863      	ldr	r3, [r4, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	dd3e      	ble.n	8004b54 <__ssvfiscanf_r+0x234>
 8004ad6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8004ad8:	065b      	lsls	r3, r3, #25
 8004ada:	d408      	bmi.n	8004aee <__ssvfiscanf_r+0x1ce>
 8004adc:	27c0      	movs	r7, #192	@ 0xc0
 8004ade:	2608      	movs	r6, #8
 8004ae0:	007f      	lsls	r7, r7, #1
 8004ae2:	6823      	ldr	r3, [r4, #0]
 8004ae4:	493c      	ldr	r1, [pc, #240]	@ (8004bd8 <__ssvfiscanf_r+0x2b8>)
 8004ae6:	781a      	ldrb	r2, [r3, #0]
 8004ae8:	5c8a      	ldrb	r2, [r1, r2]
 8004aea:	4232      	tst	r2, r6
 8004aec:	d13c      	bne.n	8004b68 <__ssvfiscanf_r+0x248>
 8004aee:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8004af0:	2b02      	cmp	r3, #2
 8004af2:	dc4c      	bgt.n	8004b8e <__ssvfiscanf_r+0x26e>
 8004af4:	0022      	movs	r2, r4
 8004af6:	9801      	ldr	r0, [sp, #4]
 8004af8:	ab02      	add	r3, sp, #8
 8004afa:	a943      	add	r1, sp, #268	@ 0x10c
 8004afc:	f000 fb34 	bl	8005168 <_scanf_chars>
 8004b00:	2801      	cmp	r0, #1
 8004b02:	d060      	beq.n	8004bc6 <__ssvfiscanf_r+0x2a6>
 8004b04:	2802      	cmp	r0, #2
 8004b06:	d000      	beq.n	8004b0a <__ssvfiscanf_r+0x1ea>
 8004b08:	e732      	b.n	8004970 <__ssvfiscanf_r+0x50>
 8004b0a:	e7c4      	b.n	8004a96 <__ssvfiscanf_r+0x176>
 8004b0c:	230a      	movs	r3, #10
 8004b0e:	e7d3      	b.n	8004ab8 <__ssvfiscanf_r+0x198>
 8004b10:	0029      	movs	r1, r5
 8004b12:	a803      	add	r0, sp, #12
 8004b14:	f000 fda5 	bl	8005662 <__sccl>
 8004b18:	2340      	movs	r3, #64	@ 0x40
 8004b1a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004b1c:	0005      	movs	r5, r0
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004b22:	2301      	movs	r3, #1
 8004b24:	e7d3      	b.n	8004ace <__ssvfiscanf_r+0x1ae>
 8004b26:	2340      	movs	r3, #64	@ 0x40
 8004b28:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e7cd      	b.n	8004ace <__ssvfiscanf_r+0x1ae>
 8004b32:	2302      	movs	r3, #2
 8004b34:	e7cb      	b.n	8004ace <__ssvfiscanf_r+0x1ae>
 8004b36:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004b38:	06d3      	lsls	r3, r2, #27
 8004b3a:	d500      	bpl.n	8004b3e <__ssvfiscanf_r+0x21e>
 8004b3c:	e718      	b.n	8004970 <__ssvfiscanf_r+0x50>
 8004b3e:	9b02      	ldr	r3, [sp, #8]
 8004b40:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8004b42:	1d18      	adds	r0, r3, #4
 8004b44:	9002      	str	r0, [sp, #8]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	07d6      	lsls	r6, r2, #31
 8004b4a:	d501      	bpl.n	8004b50 <__ssvfiscanf_r+0x230>
 8004b4c:	8019      	strh	r1, [r3, #0]
 8004b4e:	e70f      	b.n	8004970 <__ssvfiscanf_r+0x50>
 8004b50:	6019      	str	r1, [r3, #0]
 8004b52:	e70d      	b.n	8004970 <__ssvfiscanf_r+0x50>
 8004b54:	23c0      	movs	r3, #192	@ 0xc0
 8004b56:	aa43      	add	r2, sp, #268	@ 0x10c
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	0021      	movs	r1, r4
 8004b5c:	58d3      	ldr	r3, [r2, r3]
 8004b5e:	9801      	ldr	r0, [sp, #4]
 8004b60:	4798      	blx	r3
 8004b62:	2800      	cmp	r0, #0
 8004b64:	d0b7      	beq.n	8004ad6 <__ssvfiscanf_r+0x1b6>
 8004b66:	e796      	b.n	8004a96 <__ssvfiscanf_r+0x176>
 8004b68:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8004b6a:	3201      	adds	r2, #1
 8004b6c:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004b6e:	6862      	ldr	r2, [r4, #4]
 8004b70:	3a01      	subs	r2, #1
 8004b72:	6062      	str	r2, [r4, #4]
 8004b74:	2a00      	cmp	r2, #0
 8004b76:	dd02      	ble.n	8004b7e <__ssvfiscanf_r+0x25e>
 8004b78:	3301      	adds	r3, #1
 8004b7a:	6023      	str	r3, [r4, #0]
 8004b7c:	e7b1      	b.n	8004ae2 <__ssvfiscanf_r+0x1c2>
 8004b7e:	ab43      	add	r3, sp, #268	@ 0x10c
 8004b80:	0021      	movs	r1, r4
 8004b82:	59db      	ldr	r3, [r3, r7]
 8004b84:	9801      	ldr	r0, [sp, #4]
 8004b86:	4798      	blx	r3
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d0aa      	beq.n	8004ae2 <__ssvfiscanf_r+0x1c2>
 8004b8c:	e783      	b.n	8004a96 <__ssvfiscanf_r+0x176>
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	dc06      	bgt.n	8004ba0 <__ssvfiscanf_r+0x280>
 8004b92:	0022      	movs	r2, r4
 8004b94:	9801      	ldr	r0, [sp, #4]
 8004b96:	ab02      	add	r3, sp, #8
 8004b98:	a943      	add	r1, sp, #268	@ 0x10c
 8004b9a:	f000 fb45 	bl	8005228 <_scanf_i>
 8004b9e:	e7af      	b.n	8004b00 <__ssvfiscanf_r+0x1e0>
 8004ba0:	4b0f      	ldr	r3, [pc, #60]	@ (8004be0 <__ssvfiscanf_r+0x2c0>)
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d100      	bne.n	8004ba8 <__ssvfiscanf_r+0x288>
 8004ba6:	e6e3      	b.n	8004970 <__ssvfiscanf_r+0x50>
 8004ba8:	0022      	movs	r2, r4
 8004baa:	9801      	ldr	r0, [sp, #4]
 8004bac:	ab02      	add	r3, sp, #8
 8004bae:	a943      	add	r1, sp, #268	@ 0x10c
 8004bb0:	e000      	b.n	8004bb4 <__ssvfiscanf_r+0x294>
 8004bb2:	bf00      	nop
 8004bb4:	e7a4      	b.n	8004b00 <__ssvfiscanf_r+0x1e0>
 8004bb6:	89a3      	ldrh	r3, [r4, #12]
 8004bb8:	065b      	lsls	r3, r3, #25
 8004bba:	d500      	bpl.n	8004bbe <__ssvfiscanf_r+0x29e>
 8004bbc:	e76f      	b.n	8004a9e <__ssvfiscanf_r+0x17e>
 8004bbe:	23a5      	movs	r3, #165	@ 0xa5
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	449d      	add	sp, r3
 8004bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc6:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004bc8:	e7f9      	b.n	8004bbe <__ssvfiscanf_r+0x29e>
 8004bca:	46c0      	nop			@ (mov r8, r8)
 8004bcc:	fffffd6c 	.word	0xfffffd6c
 8004bd0:	08004869 	.word	0x08004869
 8004bd4:	080048e1 	.word	0x080048e1
 8004bd8:	080061b1 	.word	0x080061b1
 8004bdc:	080062b7 	.word	0x080062b7
 8004be0:	00000000 	.word	0x00000000

08004be4 <__sfputc_r>:
 8004be4:	6893      	ldr	r3, [r2, #8]
 8004be6:	b510      	push	{r4, lr}
 8004be8:	3b01      	subs	r3, #1
 8004bea:	6093      	str	r3, [r2, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	da04      	bge.n	8004bfa <__sfputc_r+0x16>
 8004bf0:	6994      	ldr	r4, [r2, #24]
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	db07      	blt.n	8004c06 <__sfputc_r+0x22>
 8004bf6:	290a      	cmp	r1, #10
 8004bf8:	d005      	beq.n	8004c06 <__sfputc_r+0x22>
 8004bfa:	6813      	ldr	r3, [r2, #0]
 8004bfc:	1c58      	adds	r0, r3, #1
 8004bfe:	6010      	str	r0, [r2, #0]
 8004c00:	7019      	strb	r1, [r3, #0]
 8004c02:	0008      	movs	r0, r1
 8004c04:	bd10      	pop	{r4, pc}
 8004c06:	f7ff fa57 	bl	80040b8 <__swbuf_r>
 8004c0a:	0001      	movs	r1, r0
 8004c0c:	e7f9      	b.n	8004c02 <__sfputc_r+0x1e>

08004c0e <__sfputs_r>:
 8004c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c10:	0006      	movs	r6, r0
 8004c12:	000f      	movs	r7, r1
 8004c14:	0014      	movs	r4, r2
 8004c16:	18d5      	adds	r5, r2, r3
 8004c18:	42ac      	cmp	r4, r5
 8004c1a:	d101      	bne.n	8004c20 <__sfputs_r+0x12>
 8004c1c:	2000      	movs	r0, #0
 8004c1e:	e007      	b.n	8004c30 <__sfputs_r+0x22>
 8004c20:	7821      	ldrb	r1, [r4, #0]
 8004c22:	003a      	movs	r2, r7
 8004c24:	0030      	movs	r0, r6
 8004c26:	f7ff ffdd 	bl	8004be4 <__sfputc_r>
 8004c2a:	3401      	adds	r4, #1
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d1f3      	bne.n	8004c18 <__sfputs_r+0xa>
 8004c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004c34 <_vfiprintf_r>:
 8004c34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c36:	b0a1      	sub	sp, #132	@ 0x84
 8004c38:	000f      	movs	r7, r1
 8004c3a:	0015      	movs	r5, r2
 8004c3c:	001e      	movs	r6, r3
 8004c3e:	9003      	str	r0, [sp, #12]
 8004c40:	2800      	cmp	r0, #0
 8004c42:	d004      	beq.n	8004c4e <_vfiprintf_r+0x1a>
 8004c44:	6a03      	ldr	r3, [r0, #32]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d101      	bne.n	8004c4e <_vfiprintf_r+0x1a>
 8004c4a:	f7ff f8e7 	bl	8003e1c <__sinit>
 8004c4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c50:	07db      	lsls	r3, r3, #31
 8004c52:	d405      	bmi.n	8004c60 <_vfiprintf_r+0x2c>
 8004c54:	89bb      	ldrh	r3, [r7, #12]
 8004c56:	059b      	lsls	r3, r3, #22
 8004c58:	d402      	bmi.n	8004c60 <_vfiprintf_r+0x2c>
 8004c5a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004c5c:	f7ff fba7 	bl	80043ae <__retarget_lock_acquire_recursive>
 8004c60:	89bb      	ldrh	r3, [r7, #12]
 8004c62:	071b      	lsls	r3, r3, #28
 8004c64:	d502      	bpl.n	8004c6c <_vfiprintf_r+0x38>
 8004c66:	693b      	ldr	r3, [r7, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d113      	bne.n	8004c94 <_vfiprintf_r+0x60>
 8004c6c:	0039      	movs	r1, r7
 8004c6e:	9803      	ldr	r0, [sp, #12]
 8004c70:	f7ff fa64 	bl	800413c <__swsetup_r>
 8004c74:	2800      	cmp	r0, #0
 8004c76:	d00d      	beq.n	8004c94 <_vfiprintf_r+0x60>
 8004c78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c7a:	07db      	lsls	r3, r3, #31
 8004c7c:	d503      	bpl.n	8004c86 <_vfiprintf_r+0x52>
 8004c7e:	2001      	movs	r0, #1
 8004c80:	4240      	negs	r0, r0
 8004c82:	b021      	add	sp, #132	@ 0x84
 8004c84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c86:	89bb      	ldrh	r3, [r7, #12]
 8004c88:	059b      	lsls	r3, r3, #22
 8004c8a:	d4f8      	bmi.n	8004c7e <_vfiprintf_r+0x4a>
 8004c8c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004c8e:	f7ff fb8f 	bl	80043b0 <__retarget_lock_release_recursive>
 8004c92:	e7f4      	b.n	8004c7e <_vfiprintf_r+0x4a>
 8004c94:	2300      	movs	r3, #0
 8004c96:	ac08      	add	r4, sp, #32
 8004c98:	6163      	str	r3, [r4, #20]
 8004c9a:	3320      	adds	r3, #32
 8004c9c:	7663      	strb	r3, [r4, #25]
 8004c9e:	3310      	adds	r3, #16
 8004ca0:	76a3      	strb	r3, [r4, #26]
 8004ca2:	9607      	str	r6, [sp, #28]
 8004ca4:	002e      	movs	r6, r5
 8004ca6:	7833      	ldrb	r3, [r6, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <_vfiprintf_r+0x7c>
 8004cac:	2b25      	cmp	r3, #37	@ 0x25
 8004cae:	d148      	bne.n	8004d42 <_vfiprintf_r+0x10e>
 8004cb0:	1b73      	subs	r3, r6, r5
 8004cb2:	9305      	str	r3, [sp, #20]
 8004cb4:	42ae      	cmp	r6, r5
 8004cb6:	d00b      	beq.n	8004cd0 <_vfiprintf_r+0x9c>
 8004cb8:	002a      	movs	r2, r5
 8004cba:	0039      	movs	r1, r7
 8004cbc:	9803      	ldr	r0, [sp, #12]
 8004cbe:	f7ff ffa6 	bl	8004c0e <__sfputs_r>
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d100      	bne.n	8004cc8 <_vfiprintf_r+0x94>
 8004cc6:	e0ae      	b.n	8004e26 <_vfiprintf_r+0x1f2>
 8004cc8:	6963      	ldr	r3, [r4, #20]
 8004cca:	9a05      	ldr	r2, [sp, #20]
 8004ccc:	189b      	adds	r3, r3, r2
 8004cce:	6163      	str	r3, [r4, #20]
 8004cd0:	7833      	ldrb	r3, [r6, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d100      	bne.n	8004cd8 <_vfiprintf_r+0xa4>
 8004cd6:	e0a6      	b.n	8004e26 <_vfiprintf_r+0x1f2>
 8004cd8:	2201      	movs	r2, #1
 8004cda:	2300      	movs	r3, #0
 8004cdc:	4252      	negs	r2, r2
 8004cde:	6062      	str	r2, [r4, #4]
 8004ce0:	a904      	add	r1, sp, #16
 8004ce2:	3254      	adds	r2, #84	@ 0x54
 8004ce4:	1852      	adds	r2, r2, r1
 8004ce6:	1c75      	adds	r5, r6, #1
 8004ce8:	6023      	str	r3, [r4, #0]
 8004cea:	60e3      	str	r3, [r4, #12]
 8004cec:	60a3      	str	r3, [r4, #8]
 8004cee:	7013      	strb	r3, [r2, #0]
 8004cf0:	65a3      	str	r3, [r4, #88]	@ 0x58
 8004cf2:	4b59      	ldr	r3, [pc, #356]	@ (8004e58 <_vfiprintf_r+0x224>)
 8004cf4:	2205      	movs	r2, #5
 8004cf6:	0018      	movs	r0, r3
 8004cf8:	7829      	ldrb	r1, [r5, #0]
 8004cfa:	9305      	str	r3, [sp, #20]
 8004cfc:	f000 fd96 	bl	800582c <memchr>
 8004d00:	1c6e      	adds	r6, r5, #1
 8004d02:	2800      	cmp	r0, #0
 8004d04:	d11f      	bne.n	8004d46 <_vfiprintf_r+0x112>
 8004d06:	6822      	ldr	r2, [r4, #0]
 8004d08:	06d3      	lsls	r3, r2, #27
 8004d0a:	d504      	bpl.n	8004d16 <_vfiprintf_r+0xe2>
 8004d0c:	2353      	movs	r3, #83	@ 0x53
 8004d0e:	a904      	add	r1, sp, #16
 8004d10:	185b      	adds	r3, r3, r1
 8004d12:	2120      	movs	r1, #32
 8004d14:	7019      	strb	r1, [r3, #0]
 8004d16:	0713      	lsls	r3, r2, #28
 8004d18:	d504      	bpl.n	8004d24 <_vfiprintf_r+0xf0>
 8004d1a:	2353      	movs	r3, #83	@ 0x53
 8004d1c:	a904      	add	r1, sp, #16
 8004d1e:	185b      	adds	r3, r3, r1
 8004d20:	212b      	movs	r1, #43	@ 0x2b
 8004d22:	7019      	strb	r1, [r3, #0]
 8004d24:	782b      	ldrb	r3, [r5, #0]
 8004d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d28:	d016      	beq.n	8004d58 <_vfiprintf_r+0x124>
 8004d2a:	002e      	movs	r6, r5
 8004d2c:	2100      	movs	r1, #0
 8004d2e:	200a      	movs	r0, #10
 8004d30:	68e3      	ldr	r3, [r4, #12]
 8004d32:	7832      	ldrb	r2, [r6, #0]
 8004d34:	1c75      	adds	r5, r6, #1
 8004d36:	3a30      	subs	r2, #48	@ 0x30
 8004d38:	2a09      	cmp	r2, #9
 8004d3a:	d950      	bls.n	8004dde <_vfiprintf_r+0x1aa>
 8004d3c:	2900      	cmp	r1, #0
 8004d3e:	d111      	bne.n	8004d64 <_vfiprintf_r+0x130>
 8004d40:	e017      	b.n	8004d72 <_vfiprintf_r+0x13e>
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7af      	b.n	8004ca6 <_vfiprintf_r+0x72>
 8004d46:	9b05      	ldr	r3, [sp, #20]
 8004d48:	6822      	ldr	r2, [r4, #0]
 8004d4a:	1ac0      	subs	r0, r0, r3
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	4083      	lsls	r3, r0
 8004d50:	4313      	orrs	r3, r2
 8004d52:	0035      	movs	r5, r6
 8004d54:	6023      	str	r3, [r4, #0]
 8004d56:	e7cc      	b.n	8004cf2 <_vfiprintf_r+0xbe>
 8004d58:	9b07      	ldr	r3, [sp, #28]
 8004d5a:	1d19      	adds	r1, r3, #4
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	9107      	str	r1, [sp, #28]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	db01      	blt.n	8004d68 <_vfiprintf_r+0x134>
 8004d64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d66:	e004      	b.n	8004d72 <_vfiprintf_r+0x13e>
 8004d68:	425b      	negs	r3, r3
 8004d6a:	60e3      	str	r3, [r4, #12]
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	6023      	str	r3, [r4, #0]
 8004d72:	7833      	ldrb	r3, [r6, #0]
 8004d74:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d76:	d10c      	bne.n	8004d92 <_vfiprintf_r+0x15e>
 8004d78:	7873      	ldrb	r3, [r6, #1]
 8004d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d7c:	d134      	bne.n	8004de8 <_vfiprintf_r+0x1b4>
 8004d7e:	9b07      	ldr	r3, [sp, #28]
 8004d80:	3602      	adds	r6, #2
 8004d82:	1d1a      	adds	r2, r3, #4
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	9207      	str	r2, [sp, #28]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	da01      	bge.n	8004d90 <_vfiprintf_r+0x15c>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	425b      	negs	r3, r3
 8004d90:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d92:	4d32      	ldr	r5, [pc, #200]	@ (8004e5c <_vfiprintf_r+0x228>)
 8004d94:	2203      	movs	r2, #3
 8004d96:	0028      	movs	r0, r5
 8004d98:	7831      	ldrb	r1, [r6, #0]
 8004d9a:	f000 fd47 	bl	800582c <memchr>
 8004d9e:	2800      	cmp	r0, #0
 8004da0:	d006      	beq.n	8004db0 <_vfiprintf_r+0x17c>
 8004da2:	2340      	movs	r3, #64	@ 0x40
 8004da4:	1b40      	subs	r0, r0, r5
 8004da6:	4083      	lsls	r3, r0
 8004da8:	6822      	ldr	r2, [r4, #0]
 8004daa:	3601      	adds	r6, #1
 8004dac:	4313      	orrs	r3, r2
 8004dae:	6023      	str	r3, [r4, #0]
 8004db0:	7831      	ldrb	r1, [r6, #0]
 8004db2:	2206      	movs	r2, #6
 8004db4:	482a      	ldr	r0, [pc, #168]	@ (8004e60 <_vfiprintf_r+0x22c>)
 8004db6:	1c75      	adds	r5, r6, #1
 8004db8:	7621      	strb	r1, [r4, #24]
 8004dba:	f000 fd37 	bl	800582c <memchr>
 8004dbe:	2800      	cmp	r0, #0
 8004dc0:	d040      	beq.n	8004e44 <_vfiprintf_r+0x210>
 8004dc2:	4b28      	ldr	r3, [pc, #160]	@ (8004e64 <_vfiprintf_r+0x230>)
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d122      	bne.n	8004e0e <_vfiprintf_r+0x1da>
 8004dc8:	2207      	movs	r2, #7
 8004dca:	9b07      	ldr	r3, [sp, #28]
 8004dcc:	3307      	adds	r3, #7
 8004dce:	4393      	bics	r3, r2
 8004dd0:	3308      	adds	r3, #8
 8004dd2:	9307      	str	r3, [sp, #28]
 8004dd4:	6963      	ldr	r3, [r4, #20]
 8004dd6:	9a04      	ldr	r2, [sp, #16]
 8004dd8:	189b      	adds	r3, r3, r2
 8004dda:	6163      	str	r3, [r4, #20]
 8004ddc:	e762      	b.n	8004ca4 <_vfiprintf_r+0x70>
 8004dde:	4343      	muls	r3, r0
 8004de0:	002e      	movs	r6, r5
 8004de2:	2101      	movs	r1, #1
 8004de4:	189b      	adds	r3, r3, r2
 8004de6:	e7a4      	b.n	8004d32 <_vfiprintf_r+0xfe>
 8004de8:	2300      	movs	r3, #0
 8004dea:	200a      	movs	r0, #10
 8004dec:	0019      	movs	r1, r3
 8004dee:	3601      	adds	r6, #1
 8004df0:	6063      	str	r3, [r4, #4]
 8004df2:	7832      	ldrb	r2, [r6, #0]
 8004df4:	1c75      	adds	r5, r6, #1
 8004df6:	3a30      	subs	r2, #48	@ 0x30
 8004df8:	2a09      	cmp	r2, #9
 8004dfa:	d903      	bls.n	8004e04 <_vfiprintf_r+0x1d0>
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d0c8      	beq.n	8004d92 <_vfiprintf_r+0x15e>
 8004e00:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e02:	e7c6      	b.n	8004d92 <_vfiprintf_r+0x15e>
 8004e04:	4341      	muls	r1, r0
 8004e06:	002e      	movs	r6, r5
 8004e08:	2301      	movs	r3, #1
 8004e0a:	1889      	adds	r1, r1, r2
 8004e0c:	e7f1      	b.n	8004df2 <_vfiprintf_r+0x1be>
 8004e0e:	aa07      	add	r2, sp, #28
 8004e10:	9200      	str	r2, [sp, #0]
 8004e12:	0021      	movs	r1, r4
 8004e14:	003a      	movs	r2, r7
 8004e16:	4b14      	ldr	r3, [pc, #80]	@ (8004e68 <_vfiprintf_r+0x234>)
 8004e18:	9803      	ldr	r0, [sp, #12]
 8004e1a:	e000      	b.n	8004e1e <_vfiprintf_r+0x1ea>
 8004e1c:	bf00      	nop
 8004e1e:	9004      	str	r0, [sp, #16]
 8004e20:	9b04      	ldr	r3, [sp, #16]
 8004e22:	3301      	adds	r3, #1
 8004e24:	d1d6      	bne.n	8004dd4 <_vfiprintf_r+0x1a0>
 8004e26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e28:	07db      	lsls	r3, r3, #31
 8004e2a:	d405      	bmi.n	8004e38 <_vfiprintf_r+0x204>
 8004e2c:	89bb      	ldrh	r3, [r7, #12]
 8004e2e:	059b      	lsls	r3, r3, #22
 8004e30:	d402      	bmi.n	8004e38 <_vfiprintf_r+0x204>
 8004e32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004e34:	f7ff fabc 	bl	80043b0 <__retarget_lock_release_recursive>
 8004e38:	89bb      	ldrh	r3, [r7, #12]
 8004e3a:	065b      	lsls	r3, r3, #25
 8004e3c:	d500      	bpl.n	8004e40 <_vfiprintf_r+0x20c>
 8004e3e:	e71e      	b.n	8004c7e <_vfiprintf_r+0x4a>
 8004e40:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004e42:	e71e      	b.n	8004c82 <_vfiprintf_r+0x4e>
 8004e44:	aa07      	add	r2, sp, #28
 8004e46:	9200      	str	r2, [sp, #0]
 8004e48:	0021      	movs	r1, r4
 8004e4a:	003a      	movs	r2, r7
 8004e4c:	4b06      	ldr	r3, [pc, #24]	@ (8004e68 <_vfiprintf_r+0x234>)
 8004e4e:	9803      	ldr	r0, [sp, #12]
 8004e50:	f000 f87c 	bl	8004f4c <_printf_i>
 8004e54:	e7e3      	b.n	8004e1e <_vfiprintf_r+0x1ea>
 8004e56:	46c0      	nop			@ (mov r8, r8)
 8004e58:	080062b1 	.word	0x080062b1
 8004e5c:	080062b7 	.word	0x080062b7
 8004e60:	080062bb 	.word	0x080062bb
 8004e64:	00000000 	.word	0x00000000
 8004e68:	08004c0f 	.word	0x08004c0f

08004e6c <_printf_common>:
 8004e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e6e:	0016      	movs	r6, r2
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	688a      	ldr	r2, [r1, #8]
 8004e74:	690b      	ldr	r3, [r1, #16]
 8004e76:	000c      	movs	r4, r1
 8004e78:	9000      	str	r0, [sp, #0]
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	da00      	bge.n	8004e80 <_printf_common+0x14>
 8004e7e:	0013      	movs	r3, r2
 8004e80:	0022      	movs	r2, r4
 8004e82:	6033      	str	r3, [r6, #0]
 8004e84:	3243      	adds	r2, #67	@ 0x43
 8004e86:	7812      	ldrb	r2, [r2, #0]
 8004e88:	2a00      	cmp	r2, #0
 8004e8a:	d001      	beq.n	8004e90 <_printf_common+0x24>
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	6033      	str	r3, [r6, #0]
 8004e90:	6823      	ldr	r3, [r4, #0]
 8004e92:	069b      	lsls	r3, r3, #26
 8004e94:	d502      	bpl.n	8004e9c <_printf_common+0x30>
 8004e96:	6833      	ldr	r3, [r6, #0]
 8004e98:	3302      	adds	r3, #2
 8004e9a:	6033      	str	r3, [r6, #0]
 8004e9c:	6822      	ldr	r2, [r4, #0]
 8004e9e:	2306      	movs	r3, #6
 8004ea0:	0015      	movs	r5, r2
 8004ea2:	401d      	ands	r5, r3
 8004ea4:	421a      	tst	r2, r3
 8004ea6:	d027      	beq.n	8004ef8 <_printf_common+0x8c>
 8004ea8:	0023      	movs	r3, r4
 8004eaa:	3343      	adds	r3, #67	@ 0x43
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	4193      	sbcs	r3, r2
 8004eb2:	6822      	ldr	r2, [r4, #0]
 8004eb4:	0692      	lsls	r2, r2, #26
 8004eb6:	d430      	bmi.n	8004f1a <_printf_common+0xae>
 8004eb8:	0022      	movs	r2, r4
 8004eba:	9901      	ldr	r1, [sp, #4]
 8004ebc:	9800      	ldr	r0, [sp, #0]
 8004ebe:	9d08      	ldr	r5, [sp, #32]
 8004ec0:	3243      	adds	r2, #67	@ 0x43
 8004ec2:	47a8      	blx	r5
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d025      	beq.n	8004f14 <_printf_common+0xa8>
 8004ec8:	2206      	movs	r2, #6
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	2500      	movs	r5, #0
 8004ece:	4013      	ands	r3, r2
 8004ed0:	2b04      	cmp	r3, #4
 8004ed2:	d105      	bne.n	8004ee0 <_printf_common+0x74>
 8004ed4:	6833      	ldr	r3, [r6, #0]
 8004ed6:	68e5      	ldr	r5, [r4, #12]
 8004ed8:	1aed      	subs	r5, r5, r3
 8004eda:	43eb      	mvns	r3, r5
 8004edc:	17db      	asrs	r3, r3, #31
 8004ede:	401d      	ands	r5, r3
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	6922      	ldr	r2, [r4, #16]
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	dd01      	ble.n	8004eec <_printf_common+0x80>
 8004ee8:	1a9b      	subs	r3, r3, r2
 8004eea:	18ed      	adds	r5, r5, r3
 8004eec:	2600      	movs	r6, #0
 8004eee:	42b5      	cmp	r5, r6
 8004ef0:	d120      	bne.n	8004f34 <_printf_common+0xc8>
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	e010      	b.n	8004f18 <_printf_common+0xac>
 8004ef6:	3501      	adds	r5, #1
 8004ef8:	68e3      	ldr	r3, [r4, #12]
 8004efa:	6832      	ldr	r2, [r6, #0]
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	42ab      	cmp	r3, r5
 8004f00:	ddd2      	ble.n	8004ea8 <_printf_common+0x3c>
 8004f02:	0022      	movs	r2, r4
 8004f04:	2301      	movs	r3, #1
 8004f06:	9901      	ldr	r1, [sp, #4]
 8004f08:	9800      	ldr	r0, [sp, #0]
 8004f0a:	9f08      	ldr	r7, [sp, #32]
 8004f0c:	3219      	adds	r2, #25
 8004f0e:	47b8      	blx	r7
 8004f10:	3001      	adds	r0, #1
 8004f12:	d1f0      	bne.n	8004ef6 <_printf_common+0x8a>
 8004f14:	2001      	movs	r0, #1
 8004f16:	4240      	negs	r0, r0
 8004f18:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004f1a:	2030      	movs	r0, #48	@ 0x30
 8004f1c:	18e1      	adds	r1, r4, r3
 8004f1e:	3143      	adds	r1, #67	@ 0x43
 8004f20:	7008      	strb	r0, [r1, #0]
 8004f22:	0021      	movs	r1, r4
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	3145      	adds	r1, #69	@ 0x45
 8004f28:	7809      	ldrb	r1, [r1, #0]
 8004f2a:	18a2      	adds	r2, r4, r2
 8004f2c:	3243      	adds	r2, #67	@ 0x43
 8004f2e:	3302      	adds	r3, #2
 8004f30:	7011      	strb	r1, [r2, #0]
 8004f32:	e7c1      	b.n	8004eb8 <_printf_common+0x4c>
 8004f34:	0022      	movs	r2, r4
 8004f36:	2301      	movs	r3, #1
 8004f38:	9901      	ldr	r1, [sp, #4]
 8004f3a:	9800      	ldr	r0, [sp, #0]
 8004f3c:	9f08      	ldr	r7, [sp, #32]
 8004f3e:	321a      	adds	r2, #26
 8004f40:	47b8      	blx	r7
 8004f42:	3001      	adds	r0, #1
 8004f44:	d0e6      	beq.n	8004f14 <_printf_common+0xa8>
 8004f46:	3601      	adds	r6, #1
 8004f48:	e7d1      	b.n	8004eee <_printf_common+0x82>
	...

08004f4c <_printf_i>:
 8004f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f4e:	b08b      	sub	sp, #44	@ 0x2c
 8004f50:	9206      	str	r2, [sp, #24]
 8004f52:	000a      	movs	r2, r1
 8004f54:	3243      	adds	r2, #67	@ 0x43
 8004f56:	9307      	str	r3, [sp, #28]
 8004f58:	9005      	str	r0, [sp, #20]
 8004f5a:	9203      	str	r2, [sp, #12]
 8004f5c:	7e0a      	ldrb	r2, [r1, #24]
 8004f5e:	000c      	movs	r4, r1
 8004f60:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f62:	2a78      	cmp	r2, #120	@ 0x78
 8004f64:	d809      	bhi.n	8004f7a <_printf_i+0x2e>
 8004f66:	2a62      	cmp	r2, #98	@ 0x62
 8004f68:	d80b      	bhi.n	8004f82 <_printf_i+0x36>
 8004f6a:	2a00      	cmp	r2, #0
 8004f6c:	d100      	bne.n	8004f70 <_printf_i+0x24>
 8004f6e:	e0bc      	b.n	80050ea <_printf_i+0x19e>
 8004f70:	497b      	ldr	r1, [pc, #492]	@ (8005160 <_printf_i+0x214>)
 8004f72:	9104      	str	r1, [sp, #16]
 8004f74:	2a58      	cmp	r2, #88	@ 0x58
 8004f76:	d100      	bne.n	8004f7a <_printf_i+0x2e>
 8004f78:	e090      	b.n	800509c <_printf_i+0x150>
 8004f7a:	0025      	movs	r5, r4
 8004f7c:	3542      	adds	r5, #66	@ 0x42
 8004f7e:	702a      	strb	r2, [r5, #0]
 8004f80:	e022      	b.n	8004fc8 <_printf_i+0x7c>
 8004f82:	0010      	movs	r0, r2
 8004f84:	3863      	subs	r0, #99	@ 0x63
 8004f86:	2815      	cmp	r0, #21
 8004f88:	d8f7      	bhi.n	8004f7a <_printf_i+0x2e>
 8004f8a:	f7fb f8c5 	bl	8000118 <__gnu_thumb1_case_shi>
 8004f8e:	0016      	.short	0x0016
 8004f90:	fff6001f 	.word	0xfff6001f
 8004f94:	fff6fff6 	.word	0xfff6fff6
 8004f98:	001ffff6 	.word	0x001ffff6
 8004f9c:	fff6fff6 	.word	0xfff6fff6
 8004fa0:	fff6fff6 	.word	0xfff6fff6
 8004fa4:	003600a1 	.word	0x003600a1
 8004fa8:	fff60080 	.word	0xfff60080
 8004fac:	00b2fff6 	.word	0x00b2fff6
 8004fb0:	0036fff6 	.word	0x0036fff6
 8004fb4:	fff6fff6 	.word	0xfff6fff6
 8004fb8:	0084      	.short	0x0084
 8004fba:	0025      	movs	r5, r4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	3542      	adds	r5, #66	@ 0x42
 8004fc0:	1d11      	adds	r1, r2, #4
 8004fc2:	6019      	str	r1, [r3, #0]
 8004fc4:	6813      	ldr	r3, [r2, #0]
 8004fc6:	702b      	strb	r3, [r5, #0]
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e0a0      	b.n	800510e <_printf_i+0x1c2>
 8004fcc:	6818      	ldr	r0, [r3, #0]
 8004fce:	6809      	ldr	r1, [r1, #0]
 8004fd0:	1d02      	adds	r2, r0, #4
 8004fd2:	060d      	lsls	r5, r1, #24
 8004fd4:	d50b      	bpl.n	8004fee <_printf_i+0xa2>
 8004fd6:	6806      	ldr	r6, [r0, #0]
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	2e00      	cmp	r6, #0
 8004fdc:	da03      	bge.n	8004fe6 <_printf_i+0x9a>
 8004fde:	232d      	movs	r3, #45	@ 0x2d
 8004fe0:	9a03      	ldr	r2, [sp, #12]
 8004fe2:	4276      	negs	r6, r6
 8004fe4:	7013      	strb	r3, [r2, #0]
 8004fe6:	4b5e      	ldr	r3, [pc, #376]	@ (8005160 <_printf_i+0x214>)
 8004fe8:	270a      	movs	r7, #10
 8004fea:	9304      	str	r3, [sp, #16]
 8004fec:	e018      	b.n	8005020 <_printf_i+0xd4>
 8004fee:	6806      	ldr	r6, [r0, #0]
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	0649      	lsls	r1, r1, #25
 8004ff4:	d5f1      	bpl.n	8004fda <_printf_i+0x8e>
 8004ff6:	b236      	sxth	r6, r6
 8004ff8:	e7ef      	b.n	8004fda <_printf_i+0x8e>
 8004ffa:	6808      	ldr	r0, [r1, #0]
 8004ffc:	6819      	ldr	r1, [r3, #0]
 8004ffe:	c940      	ldmia	r1!, {r6}
 8005000:	0605      	lsls	r5, r0, #24
 8005002:	d402      	bmi.n	800500a <_printf_i+0xbe>
 8005004:	0640      	lsls	r0, r0, #25
 8005006:	d500      	bpl.n	800500a <_printf_i+0xbe>
 8005008:	b2b6      	uxth	r6, r6
 800500a:	6019      	str	r1, [r3, #0]
 800500c:	4b54      	ldr	r3, [pc, #336]	@ (8005160 <_printf_i+0x214>)
 800500e:	270a      	movs	r7, #10
 8005010:	9304      	str	r3, [sp, #16]
 8005012:	2a6f      	cmp	r2, #111	@ 0x6f
 8005014:	d100      	bne.n	8005018 <_printf_i+0xcc>
 8005016:	3f02      	subs	r7, #2
 8005018:	0023      	movs	r3, r4
 800501a:	2200      	movs	r2, #0
 800501c:	3343      	adds	r3, #67	@ 0x43
 800501e:	701a      	strb	r2, [r3, #0]
 8005020:	6863      	ldr	r3, [r4, #4]
 8005022:	60a3      	str	r3, [r4, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	db03      	blt.n	8005030 <_printf_i+0xe4>
 8005028:	2104      	movs	r1, #4
 800502a:	6822      	ldr	r2, [r4, #0]
 800502c:	438a      	bics	r2, r1
 800502e:	6022      	str	r2, [r4, #0]
 8005030:	2e00      	cmp	r6, #0
 8005032:	d102      	bne.n	800503a <_printf_i+0xee>
 8005034:	9d03      	ldr	r5, [sp, #12]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00c      	beq.n	8005054 <_printf_i+0x108>
 800503a:	9d03      	ldr	r5, [sp, #12]
 800503c:	0030      	movs	r0, r6
 800503e:	0039      	movs	r1, r7
 8005040:	f7fb f8fa 	bl	8000238 <__aeabi_uidivmod>
 8005044:	9b04      	ldr	r3, [sp, #16]
 8005046:	3d01      	subs	r5, #1
 8005048:	5c5b      	ldrb	r3, [r3, r1]
 800504a:	702b      	strb	r3, [r5, #0]
 800504c:	0033      	movs	r3, r6
 800504e:	0006      	movs	r6, r0
 8005050:	429f      	cmp	r7, r3
 8005052:	d9f3      	bls.n	800503c <_printf_i+0xf0>
 8005054:	2f08      	cmp	r7, #8
 8005056:	d109      	bne.n	800506c <_printf_i+0x120>
 8005058:	6823      	ldr	r3, [r4, #0]
 800505a:	07db      	lsls	r3, r3, #31
 800505c:	d506      	bpl.n	800506c <_printf_i+0x120>
 800505e:	6862      	ldr	r2, [r4, #4]
 8005060:	6923      	ldr	r3, [r4, #16]
 8005062:	429a      	cmp	r2, r3
 8005064:	dc02      	bgt.n	800506c <_printf_i+0x120>
 8005066:	2330      	movs	r3, #48	@ 0x30
 8005068:	3d01      	subs	r5, #1
 800506a:	702b      	strb	r3, [r5, #0]
 800506c:	9b03      	ldr	r3, [sp, #12]
 800506e:	1b5b      	subs	r3, r3, r5
 8005070:	6123      	str	r3, [r4, #16]
 8005072:	9b07      	ldr	r3, [sp, #28]
 8005074:	0021      	movs	r1, r4
 8005076:	9300      	str	r3, [sp, #0]
 8005078:	9805      	ldr	r0, [sp, #20]
 800507a:	9b06      	ldr	r3, [sp, #24]
 800507c:	aa09      	add	r2, sp, #36	@ 0x24
 800507e:	f7ff fef5 	bl	8004e6c <_printf_common>
 8005082:	3001      	adds	r0, #1
 8005084:	d148      	bne.n	8005118 <_printf_i+0x1cc>
 8005086:	2001      	movs	r0, #1
 8005088:	4240      	negs	r0, r0
 800508a:	b00b      	add	sp, #44	@ 0x2c
 800508c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800508e:	2220      	movs	r2, #32
 8005090:	6809      	ldr	r1, [r1, #0]
 8005092:	430a      	orrs	r2, r1
 8005094:	6022      	str	r2, [r4, #0]
 8005096:	2278      	movs	r2, #120	@ 0x78
 8005098:	4932      	ldr	r1, [pc, #200]	@ (8005164 <_printf_i+0x218>)
 800509a:	9104      	str	r1, [sp, #16]
 800509c:	0021      	movs	r1, r4
 800509e:	3145      	adds	r1, #69	@ 0x45
 80050a0:	700a      	strb	r2, [r1, #0]
 80050a2:	6819      	ldr	r1, [r3, #0]
 80050a4:	6822      	ldr	r2, [r4, #0]
 80050a6:	c940      	ldmia	r1!, {r6}
 80050a8:	0610      	lsls	r0, r2, #24
 80050aa:	d402      	bmi.n	80050b2 <_printf_i+0x166>
 80050ac:	0650      	lsls	r0, r2, #25
 80050ae:	d500      	bpl.n	80050b2 <_printf_i+0x166>
 80050b0:	b2b6      	uxth	r6, r6
 80050b2:	6019      	str	r1, [r3, #0]
 80050b4:	07d3      	lsls	r3, r2, #31
 80050b6:	d502      	bpl.n	80050be <_printf_i+0x172>
 80050b8:	2320      	movs	r3, #32
 80050ba:	4313      	orrs	r3, r2
 80050bc:	6023      	str	r3, [r4, #0]
 80050be:	2e00      	cmp	r6, #0
 80050c0:	d001      	beq.n	80050c6 <_printf_i+0x17a>
 80050c2:	2710      	movs	r7, #16
 80050c4:	e7a8      	b.n	8005018 <_printf_i+0xcc>
 80050c6:	2220      	movs	r2, #32
 80050c8:	6823      	ldr	r3, [r4, #0]
 80050ca:	4393      	bics	r3, r2
 80050cc:	6023      	str	r3, [r4, #0]
 80050ce:	e7f8      	b.n	80050c2 <_printf_i+0x176>
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	680d      	ldr	r5, [r1, #0]
 80050d4:	1d10      	adds	r0, r2, #4
 80050d6:	6949      	ldr	r1, [r1, #20]
 80050d8:	6018      	str	r0, [r3, #0]
 80050da:	6813      	ldr	r3, [r2, #0]
 80050dc:	062e      	lsls	r6, r5, #24
 80050de:	d501      	bpl.n	80050e4 <_printf_i+0x198>
 80050e0:	6019      	str	r1, [r3, #0]
 80050e2:	e002      	b.n	80050ea <_printf_i+0x19e>
 80050e4:	066d      	lsls	r5, r5, #25
 80050e6:	d5fb      	bpl.n	80050e0 <_printf_i+0x194>
 80050e8:	8019      	strh	r1, [r3, #0]
 80050ea:	2300      	movs	r3, #0
 80050ec:	9d03      	ldr	r5, [sp, #12]
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	e7bf      	b.n	8005072 <_printf_i+0x126>
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	1d11      	adds	r1, r2, #4
 80050f6:	6019      	str	r1, [r3, #0]
 80050f8:	6815      	ldr	r5, [r2, #0]
 80050fa:	2100      	movs	r1, #0
 80050fc:	0028      	movs	r0, r5
 80050fe:	6862      	ldr	r2, [r4, #4]
 8005100:	f000 fb94 	bl	800582c <memchr>
 8005104:	2800      	cmp	r0, #0
 8005106:	d001      	beq.n	800510c <_printf_i+0x1c0>
 8005108:	1b40      	subs	r0, r0, r5
 800510a:	6060      	str	r0, [r4, #4]
 800510c:	6863      	ldr	r3, [r4, #4]
 800510e:	6123      	str	r3, [r4, #16]
 8005110:	2300      	movs	r3, #0
 8005112:	9a03      	ldr	r2, [sp, #12]
 8005114:	7013      	strb	r3, [r2, #0]
 8005116:	e7ac      	b.n	8005072 <_printf_i+0x126>
 8005118:	002a      	movs	r2, r5
 800511a:	6923      	ldr	r3, [r4, #16]
 800511c:	9906      	ldr	r1, [sp, #24]
 800511e:	9805      	ldr	r0, [sp, #20]
 8005120:	9d07      	ldr	r5, [sp, #28]
 8005122:	47a8      	blx	r5
 8005124:	3001      	adds	r0, #1
 8005126:	d0ae      	beq.n	8005086 <_printf_i+0x13a>
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	079b      	lsls	r3, r3, #30
 800512c:	d415      	bmi.n	800515a <_printf_i+0x20e>
 800512e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005130:	68e0      	ldr	r0, [r4, #12]
 8005132:	4298      	cmp	r0, r3
 8005134:	daa9      	bge.n	800508a <_printf_i+0x13e>
 8005136:	0018      	movs	r0, r3
 8005138:	e7a7      	b.n	800508a <_printf_i+0x13e>
 800513a:	0022      	movs	r2, r4
 800513c:	2301      	movs	r3, #1
 800513e:	9906      	ldr	r1, [sp, #24]
 8005140:	9805      	ldr	r0, [sp, #20]
 8005142:	9e07      	ldr	r6, [sp, #28]
 8005144:	3219      	adds	r2, #25
 8005146:	47b0      	blx	r6
 8005148:	3001      	adds	r0, #1
 800514a:	d09c      	beq.n	8005086 <_printf_i+0x13a>
 800514c:	3501      	adds	r5, #1
 800514e:	68e3      	ldr	r3, [r4, #12]
 8005150:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005152:	1a9b      	subs	r3, r3, r2
 8005154:	42ab      	cmp	r3, r5
 8005156:	dcf0      	bgt.n	800513a <_printf_i+0x1ee>
 8005158:	e7e9      	b.n	800512e <_printf_i+0x1e2>
 800515a:	2500      	movs	r5, #0
 800515c:	e7f7      	b.n	800514e <_printf_i+0x202>
 800515e:	46c0      	nop			@ (mov r8, r8)
 8005160:	080062c2 	.word	0x080062c2
 8005164:	080062d3 	.word	0x080062d3

08005168 <_scanf_chars>:
 8005168:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800516a:	0015      	movs	r5, r2
 800516c:	688a      	ldr	r2, [r1, #8]
 800516e:	000c      	movs	r4, r1
 8005170:	9001      	str	r0, [sp, #4]
 8005172:	2a00      	cmp	r2, #0
 8005174:	d104      	bne.n	8005180 <_scanf_chars+0x18>
 8005176:	698a      	ldr	r2, [r1, #24]
 8005178:	2a00      	cmp	r2, #0
 800517a:	d117      	bne.n	80051ac <_scanf_chars+0x44>
 800517c:	3201      	adds	r2, #1
 800517e:	60a2      	str	r2, [r4, #8]
 8005180:	6822      	ldr	r2, [r4, #0]
 8005182:	06d2      	lsls	r2, r2, #27
 8005184:	d403      	bmi.n	800518e <_scanf_chars+0x26>
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	1d11      	adds	r1, r2, #4
 800518a:	6019      	str	r1, [r3, #0]
 800518c:	6817      	ldr	r7, [r2, #0]
 800518e:	2600      	movs	r6, #0
 8005190:	69a0      	ldr	r0, [r4, #24]
 8005192:	2800      	cmp	r0, #0
 8005194:	d016      	beq.n	80051c4 <_scanf_chars+0x5c>
 8005196:	2801      	cmp	r0, #1
 8005198:	d10b      	bne.n	80051b2 <_scanf_chars+0x4a>
 800519a:	682b      	ldr	r3, [r5, #0]
 800519c:	6962      	ldr	r2, [r4, #20]
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	5cd3      	ldrb	r3, [r2, r3]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10e      	bne.n	80051c4 <_scanf_chars+0x5c>
 80051a6:	2e00      	cmp	r6, #0
 80051a8:	d03b      	beq.n	8005222 <_scanf_chars+0xba>
 80051aa:	e029      	b.n	8005200 <_scanf_chars+0x98>
 80051ac:	2201      	movs	r2, #1
 80051ae:	4252      	negs	r2, r2
 80051b0:	e7e5      	b.n	800517e <_scanf_chars+0x16>
 80051b2:	2802      	cmp	r0, #2
 80051b4:	d124      	bne.n	8005200 <_scanf_chars+0x98>
 80051b6:	682b      	ldr	r3, [r5, #0]
 80051b8:	4a1a      	ldr	r2, [pc, #104]	@ (8005224 <_scanf_chars+0xbc>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	5cd3      	ldrb	r3, [r2, r3]
 80051be:	2208      	movs	r2, #8
 80051c0:	4213      	tst	r3, r2
 80051c2:	d11d      	bne.n	8005200 <_scanf_chars+0x98>
 80051c4:	2210      	movs	r2, #16
 80051c6:	6823      	ldr	r3, [r4, #0]
 80051c8:	3601      	adds	r6, #1
 80051ca:	4213      	tst	r3, r2
 80051cc:	d103      	bne.n	80051d6 <_scanf_chars+0x6e>
 80051ce:	682b      	ldr	r3, [r5, #0]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	703b      	strb	r3, [r7, #0]
 80051d4:	3701      	adds	r7, #1
 80051d6:	682a      	ldr	r2, [r5, #0]
 80051d8:	686b      	ldr	r3, [r5, #4]
 80051da:	3201      	adds	r2, #1
 80051dc:	602a      	str	r2, [r5, #0]
 80051de:	68a2      	ldr	r2, [r4, #8]
 80051e0:	3b01      	subs	r3, #1
 80051e2:	3a01      	subs	r2, #1
 80051e4:	606b      	str	r3, [r5, #4]
 80051e6:	60a2      	str	r2, [r4, #8]
 80051e8:	2a00      	cmp	r2, #0
 80051ea:	d009      	beq.n	8005200 <_scanf_chars+0x98>
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	dccf      	bgt.n	8005190 <_scanf_chars+0x28>
 80051f0:	23c0      	movs	r3, #192	@ 0xc0
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	0029      	movs	r1, r5
 80051f6:	58e3      	ldr	r3, [r4, r3]
 80051f8:	9801      	ldr	r0, [sp, #4]
 80051fa:	4798      	blx	r3
 80051fc:	2800      	cmp	r0, #0
 80051fe:	d0c7      	beq.n	8005190 <_scanf_chars+0x28>
 8005200:	6822      	ldr	r2, [r4, #0]
 8005202:	2310      	movs	r3, #16
 8005204:	0011      	movs	r1, r2
 8005206:	4019      	ands	r1, r3
 8005208:	421a      	tst	r2, r3
 800520a:	d106      	bne.n	800521a <_scanf_chars+0xb2>
 800520c:	68e3      	ldr	r3, [r4, #12]
 800520e:	3301      	adds	r3, #1
 8005210:	60e3      	str	r3, [r4, #12]
 8005212:	69a3      	ldr	r3, [r4, #24]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d000      	beq.n	800521a <_scanf_chars+0xb2>
 8005218:	7039      	strb	r1, [r7, #0]
 800521a:	2000      	movs	r0, #0
 800521c:	6923      	ldr	r3, [r4, #16]
 800521e:	199b      	adds	r3, r3, r6
 8005220:	6123      	str	r3, [r4, #16]
 8005222:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005224:	080061b1 	.word	0x080061b1

08005228 <_scanf_i>:
 8005228:	b5f0      	push	{r4, r5, r6, r7, lr}
 800522a:	b08b      	sub	sp, #44	@ 0x2c
 800522c:	9301      	str	r3, [sp, #4]
 800522e:	4b78      	ldr	r3, [pc, #480]	@ (8005410 <_scanf_i+0x1e8>)
 8005230:	0016      	movs	r6, r2
 8005232:	9004      	str	r0, [sp, #16]
 8005234:	aa07      	add	r2, sp, #28
 8005236:	cba1      	ldmia	r3!, {r0, r5, r7}
 8005238:	c2a1      	stmia	r2!, {r0, r5, r7}
 800523a:	4a76      	ldr	r2, [pc, #472]	@ (8005414 <_scanf_i+0x1ec>)
 800523c:	698b      	ldr	r3, [r1, #24]
 800523e:	000c      	movs	r4, r1
 8005240:	9205      	str	r2, [sp, #20]
 8005242:	2b03      	cmp	r3, #3
 8005244:	d101      	bne.n	800524a <_scanf_i+0x22>
 8005246:	4b74      	ldr	r3, [pc, #464]	@ (8005418 <_scanf_i+0x1f0>)
 8005248:	9305      	str	r3, [sp, #20]
 800524a:	22ae      	movs	r2, #174	@ 0xae
 800524c:	2000      	movs	r0, #0
 800524e:	68a3      	ldr	r3, [r4, #8]
 8005250:	0052      	lsls	r2, r2, #1
 8005252:	1e59      	subs	r1, r3, #1
 8005254:	9003      	str	r0, [sp, #12]
 8005256:	4291      	cmp	r1, r2
 8005258:	d905      	bls.n	8005266 <_scanf_i+0x3e>
 800525a:	3b5e      	subs	r3, #94	@ 0x5e
 800525c:	3bff      	subs	r3, #255	@ 0xff
 800525e:	9303      	str	r3, [sp, #12]
 8005260:	235e      	movs	r3, #94	@ 0x5e
 8005262:	33ff      	adds	r3, #255	@ 0xff
 8005264:	60a3      	str	r3, [r4, #8]
 8005266:	0023      	movs	r3, r4
 8005268:	331c      	adds	r3, #28
 800526a:	9300      	str	r3, [sp, #0]
 800526c:	23d0      	movs	r3, #208	@ 0xd0
 800526e:	2700      	movs	r7, #0
 8005270:	6822      	ldr	r2, [r4, #0]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	4313      	orrs	r3, r2
 8005276:	6023      	str	r3, [r4, #0]
 8005278:	9b00      	ldr	r3, [sp, #0]
 800527a:	9302      	str	r3, [sp, #8]
 800527c:	6833      	ldr	r3, [r6, #0]
 800527e:	a807      	add	r0, sp, #28
 8005280:	7819      	ldrb	r1, [r3, #0]
 8005282:	00bb      	lsls	r3, r7, #2
 8005284:	2202      	movs	r2, #2
 8005286:	5818      	ldr	r0, [r3, r0]
 8005288:	f000 fad0 	bl	800582c <memchr>
 800528c:	2800      	cmp	r0, #0
 800528e:	d029      	beq.n	80052e4 <_scanf_i+0xbc>
 8005290:	2f01      	cmp	r7, #1
 8005292:	d15e      	bne.n	8005352 <_scanf_i+0x12a>
 8005294:	6863      	ldr	r3, [r4, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d106      	bne.n	80052a8 <_scanf_i+0x80>
 800529a:	3308      	adds	r3, #8
 800529c:	6822      	ldr	r2, [r4, #0]
 800529e:	6063      	str	r3, [r4, #4]
 80052a0:	33f9      	adds	r3, #249	@ 0xf9
 80052a2:	33ff      	adds	r3, #255	@ 0xff
 80052a4:	4313      	orrs	r3, r2
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	4a5c      	ldr	r2, [pc, #368]	@ (800541c <_scanf_i+0x1f4>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	6023      	str	r3, [r4, #0]
 80052b0:	68a3      	ldr	r3, [r4, #8]
 80052b2:	1e5a      	subs	r2, r3, #1
 80052b4:	60a2      	str	r2, [r4, #8]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d014      	beq.n	80052e4 <_scanf_i+0xbc>
 80052ba:	6833      	ldr	r3, [r6, #0]
 80052bc:	1c5a      	adds	r2, r3, #1
 80052be:	6032      	str	r2, [r6, #0]
 80052c0:	781b      	ldrb	r3, [r3, #0]
 80052c2:	9a02      	ldr	r2, [sp, #8]
 80052c4:	7013      	strb	r3, [r2, #0]
 80052c6:	6873      	ldr	r3, [r6, #4]
 80052c8:	1c55      	adds	r5, r2, #1
 80052ca:	3b01      	subs	r3, #1
 80052cc:	6073      	str	r3, [r6, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	dc07      	bgt.n	80052e2 <_scanf_i+0xba>
 80052d2:	23c0      	movs	r3, #192	@ 0xc0
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	0031      	movs	r1, r6
 80052d8:	58e3      	ldr	r3, [r4, r3]
 80052da:	9804      	ldr	r0, [sp, #16]
 80052dc:	4798      	blx	r3
 80052de:	2800      	cmp	r0, #0
 80052e0:	d17e      	bne.n	80053e0 <_scanf_i+0x1b8>
 80052e2:	9502      	str	r5, [sp, #8]
 80052e4:	3701      	adds	r7, #1
 80052e6:	2f03      	cmp	r7, #3
 80052e8:	d1c8      	bne.n	800527c <_scanf_i+0x54>
 80052ea:	6863      	ldr	r3, [r4, #4]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d101      	bne.n	80052f4 <_scanf_i+0xcc>
 80052f0:	330a      	adds	r3, #10
 80052f2:	6063      	str	r3, [r4, #4]
 80052f4:	2700      	movs	r7, #0
 80052f6:	6863      	ldr	r3, [r4, #4]
 80052f8:	4949      	ldr	r1, [pc, #292]	@ (8005420 <_scanf_i+0x1f8>)
 80052fa:	6960      	ldr	r0, [r4, #20]
 80052fc:	1ac9      	subs	r1, r1, r3
 80052fe:	f000 f9b0 	bl	8005662 <__sccl>
 8005302:	9d02      	ldr	r5, [sp, #8]
 8005304:	68a3      	ldr	r3, [r4, #8]
 8005306:	6820      	ldr	r0, [r4, #0]
 8005308:	9302      	str	r3, [sp, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d03f      	beq.n	800538e <_scanf_i+0x166>
 800530e:	6831      	ldr	r1, [r6, #0]
 8005310:	6963      	ldr	r3, [r4, #20]
 8005312:	780a      	ldrb	r2, [r1, #0]
 8005314:	5c9b      	ldrb	r3, [r3, r2]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d039      	beq.n	800538e <_scanf_i+0x166>
 800531a:	2a30      	cmp	r2, #48	@ 0x30
 800531c:	d128      	bne.n	8005370 <_scanf_i+0x148>
 800531e:	2380      	movs	r3, #128	@ 0x80
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	4218      	tst	r0, r3
 8005324:	d024      	beq.n	8005370 <_scanf_i+0x148>
 8005326:	9b03      	ldr	r3, [sp, #12]
 8005328:	3701      	adds	r7, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <_scanf_i+0x112>
 800532e:	001a      	movs	r2, r3
 8005330:	9b02      	ldr	r3, [sp, #8]
 8005332:	3a01      	subs	r2, #1
 8005334:	3301      	adds	r3, #1
 8005336:	9203      	str	r2, [sp, #12]
 8005338:	60a3      	str	r3, [r4, #8]
 800533a:	6873      	ldr	r3, [r6, #4]
 800533c:	3b01      	subs	r3, #1
 800533e:	6073      	str	r3, [r6, #4]
 8005340:	2b00      	cmp	r3, #0
 8005342:	dd1c      	ble.n	800537e <_scanf_i+0x156>
 8005344:	6833      	ldr	r3, [r6, #0]
 8005346:	3301      	adds	r3, #1
 8005348:	6033      	str	r3, [r6, #0]
 800534a:	68a3      	ldr	r3, [r4, #8]
 800534c:	3b01      	subs	r3, #1
 800534e:	60a3      	str	r3, [r4, #8]
 8005350:	e7d8      	b.n	8005304 <_scanf_i+0xdc>
 8005352:	2f02      	cmp	r7, #2
 8005354:	d1ac      	bne.n	80052b0 <_scanf_i+0x88>
 8005356:	23c0      	movs	r3, #192	@ 0xc0
 8005358:	2180      	movs	r1, #128	@ 0x80
 800535a:	6822      	ldr	r2, [r4, #0]
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	4013      	ands	r3, r2
 8005360:	0089      	lsls	r1, r1, #2
 8005362:	428b      	cmp	r3, r1
 8005364:	d1c1      	bne.n	80052ea <_scanf_i+0xc2>
 8005366:	2310      	movs	r3, #16
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	33f0      	adds	r3, #240	@ 0xf0
 800536c:	4313      	orrs	r3, r2
 800536e:	e79e      	b.n	80052ae <_scanf_i+0x86>
 8005370:	4b2c      	ldr	r3, [pc, #176]	@ (8005424 <_scanf_i+0x1fc>)
 8005372:	4003      	ands	r3, r0
 8005374:	6023      	str	r3, [r4, #0]
 8005376:	780b      	ldrb	r3, [r1, #0]
 8005378:	702b      	strb	r3, [r5, #0]
 800537a:	3501      	adds	r5, #1
 800537c:	e7dd      	b.n	800533a <_scanf_i+0x112>
 800537e:	23c0      	movs	r3, #192	@ 0xc0
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	0031      	movs	r1, r6
 8005384:	58e3      	ldr	r3, [r4, r3]
 8005386:	9804      	ldr	r0, [sp, #16]
 8005388:	4798      	blx	r3
 800538a:	2800      	cmp	r0, #0
 800538c:	d0dd      	beq.n	800534a <_scanf_i+0x122>
 800538e:	6823      	ldr	r3, [r4, #0]
 8005390:	05db      	lsls	r3, r3, #23
 8005392:	d50e      	bpl.n	80053b2 <_scanf_i+0x18a>
 8005394:	9b00      	ldr	r3, [sp, #0]
 8005396:	429d      	cmp	r5, r3
 8005398:	d907      	bls.n	80053aa <_scanf_i+0x182>
 800539a:	23be      	movs	r3, #190	@ 0xbe
 800539c:	3d01      	subs	r5, #1
 800539e:	005b      	lsls	r3, r3, #1
 80053a0:	0032      	movs	r2, r6
 80053a2:	7829      	ldrb	r1, [r5, #0]
 80053a4:	58e3      	ldr	r3, [r4, r3]
 80053a6:	9804      	ldr	r0, [sp, #16]
 80053a8:	4798      	blx	r3
 80053aa:	9b00      	ldr	r3, [sp, #0]
 80053ac:	2001      	movs	r0, #1
 80053ae:	429d      	cmp	r5, r3
 80053b0:	d029      	beq.n	8005406 <_scanf_i+0x1de>
 80053b2:	6821      	ldr	r1, [r4, #0]
 80053b4:	2310      	movs	r3, #16
 80053b6:	000a      	movs	r2, r1
 80053b8:	401a      	ands	r2, r3
 80053ba:	4219      	tst	r1, r3
 80053bc:	d11c      	bne.n	80053f8 <_scanf_i+0x1d0>
 80053be:	702a      	strb	r2, [r5, #0]
 80053c0:	6863      	ldr	r3, [r4, #4]
 80053c2:	9900      	ldr	r1, [sp, #0]
 80053c4:	9804      	ldr	r0, [sp, #16]
 80053c6:	9e05      	ldr	r6, [sp, #20]
 80053c8:	47b0      	blx	r6
 80053ca:	9b01      	ldr	r3, [sp, #4]
 80053cc:	6822      	ldr	r2, [r4, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	0691      	lsls	r1, r2, #26
 80053d2:	d507      	bpl.n	80053e4 <_scanf_i+0x1bc>
 80053d4:	9901      	ldr	r1, [sp, #4]
 80053d6:	1d1a      	adds	r2, r3, #4
 80053d8:	600a      	str	r2, [r1, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6018      	str	r0, [r3, #0]
 80053de:	e008      	b.n	80053f2 <_scanf_i+0x1ca>
 80053e0:	2700      	movs	r7, #0
 80053e2:	e7d4      	b.n	800538e <_scanf_i+0x166>
 80053e4:	1d19      	adds	r1, r3, #4
 80053e6:	07d6      	lsls	r6, r2, #31
 80053e8:	d50f      	bpl.n	800540a <_scanf_i+0x1e2>
 80053ea:	9a01      	ldr	r2, [sp, #4]
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	8018      	strh	r0, [r3, #0]
 80053f2:	68e3      	ldr	r3, [r4, #12]
 80053f4:	3301      	adds	r3, #1
 80053f6:	60e3      	str	r3, [r4, #12]
 80053f8:	2000      	movs	r0, #0
 80053fa:	9b00      	ldr	r3, [sp, #0]
 80053fc:	1aed      	subs	r5, r5, r3
 80053fe:	6923      	ldr	r3, [r4, #16]
 8005400:	19ed      	adds	r5, r5, r7
 8005402:	195b      	adds	r3, r3, r5
 8005404:	6123      	str	r3, [r4, #16]
 8005406:	b00b      	add	sp, #44	@ 0x2c
 8005408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800540a:	9a01      	ldr	r2, [sp, #4]
 800540c:	6011      	str	r1, [r2, #0]
 800540e:	e7e4      	b.n	80053da <_scanf_i+0x1b2>
 8005410:	0800612c 	.word	0x0800612c
 8005414:	08005ad5 	.word	0x08005ad5
 8005418:	080059c9 	.word	0x080059c9
 800541c:	fffffaff 	.word	0xfffffaff
 8005420:	080062f4 	.word	0x080062f4
 8005424:	fffff6ff 	.word	0xfffff6ff

08005428 <__sflush_r>:
 8005428:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800542a:	220c      	movs	r2, #12
 800542c:	5e8b      	ldrsh	r3, [r1, r2]
 800542e:	0005      	movs	r5, r0
 8005430:	000c      	movs	r4, r1
 8005432:	071a      	lsls	r2, r3, #28
 8005434:	d456      	bmi.n	80054e4 <__sflush_r+0xbc>
 8005436:	684a      	ldr	r2, [r1, #4]
 8005438:	2a00      	cmp	r2, #0
 800543a:	dc02      	bgt.n	8005442 <__sflush_r+0x1a>
 800543c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800543e:	2a00      	cmp	r2, #0
 8005440:	dd4e      	ble.n	80054e0 <__sflush_r+0xb8>
 8005442:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005444:	2f00      	cmp	r7, #0
 8005446:	d04b      	beq.n	80054e0 <__sflush_r+0xb8>
 8005448:	2200      	movs	r2, #0
 800544a:	2080      	movs	r0, #128	@ 0x80
 800544c:	682e      	ldr	r6, [r5, #0]
 800544e:	602a      	str	r2, [r5, #0]
 8005450:	001a      	movs	r2, r3
 8005452:	0140      	lsls	r0, r0, #5
 8005454:	6a21      	ldr	r1, [r4, #32]
 8005456:	4002      	ands	r2, r0
 8005458:	4203      	tst	r3, r0
 800545a:	d033      	beq.n	80054c4 <__sflush_r+0x9c>
 800545c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	075b      	lsls	r3, r3, #29
 8005462:	d506      	bpl.n	8005472 <__sflush_r+0x4a>
 8005464:	6863      	ldr	r3, [r4, #4]
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <__sflush_r+0x4a>
 800546e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005470:	1ad2      	subs	r2, r2, r3
 8005472:	2300      	movs	r3, #0
 8005474:	0028      	movs	r0, r5
 8005476:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8005478:	6a21      	ldr	r1, [r4, #32]
 800547a:	47b8      	blx	r7
 800547c:	89a2      	ldrh	r2, [r4, #12]
 800547e:	1c43      	adds	r3, r0, #1
 8005480:	d106      	bne.n	8005490 <__sflush_r+0x68>
 8005482:	6829      	ldr	r1, [r5, #0]
 8005484:	291d      	cmp	r1, #29
 8005486:	d846      	bhi.n	8005516 <__sflush_r+0xee>
 8005488:	4b29      	ldr	r3, [pc, #164]	@ (8005530 <__sflush_r+0x108>)
 800548a:	410b      	asrs	r3, r1
 800548c:	07db      	lsls	r3, r3, #31
 800548e:	d442      	bmi.n	8005516 <__sflush_r+0xee>
 8005490:	2300      	movs	r3, #0
 8005492:	6063      	str	r3, [r4, #4]
 8005494:	6923      	ldr	r3, [r4, #16]
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	04d2      	lsls	r2, r2, #19
 800549a:	d505      	bpl.n	80054a8 <__sflush_r+0x80>
 800549c:	1c43      	adds	r3, r0, #1
 800549e:	d102      	bne.n	80054a6 <__sflush_r+0x7e>
 80054a0:	682b      	ldr	r3, [r5, #0]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d100      	bne.n	80054a8 <__sflush_r+0x80>
 80054a6:	6560      	str	r0, [r4, #84]	@ 0x54
 80054a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054aa:	602e      	str	r6, [r5, #0]
 80054ac:	2900      	cmp	r1, #0
 80054ae:	d017      	beq.n	80054e0 <__sflush_r+0xb8>
 80054b0:	0023      	movs	r3, r4
 80054b2:	3344      	adds	r3, #68	@ 0x44
 80054b4:	4299      	cmp	r1, r3
 80054b6:	d002      	beq.n	80054be <__sflush_r+0x96>
 80054b8:	0028      	movs	r0, r5
 80054ba:	f7fe ff7b 	bl	80043b4 <_free_r>
 80054be:	2300      	movs	r3, #0
 80054c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80054c2:	e00d      	b.n	80054e0 <__sflush_r+0xb8>
 80054c4:	2301      	movs	r3, #1
 80054c6:	0028      	movs	r0, r5
 80054c8:	47b8      	blx	r7
 80054ca:	0002      	movs	r2, r0
 80054cc:	1c43      	adds	r3, r0, #1
 80054ce:	d1c6      	bne.n	800545e <__sflush_r+0x36>
 80054d0:	682b      	ldr	r3, [r5, #0]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d0c3      	beq.n	800545e <__sflush_r+0x36>
 80054d6:	2b1d      	cmp	r3, #29
 80054d8:	d001      	beq.n	80054de <__sflush_r+0xb6>
 80054da:	2b16      	cmp	r3, #22
 80054dc:	d11a      	bne.n	8005514 <__sflush_r+0xec>
 80054de:	602e      	str	r6, [r5, #0]
 80054e0:	2000      	movs	r0, #0
 80054e2:	e01e      	b.n	8005522 <__sflush_r+0xfa>
 80054e4:	690e      	ldr	r6, [r1, #16]
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	d0fa      	beq.n	80054e0 <__sflush_r+0xb8>
 80054ea:	680f      	ldr	r7, [r1, #0]
 80054ec:	600e      	str	r6, [r1, #0]
 80054ee:	1bba      	subs	r2, r7, r6
 80054f0:	9201      	str	r2, [sp, #4]
 80054f2:	2200      	movs	r2, #0
 80054f4:	079b      	lsls	r3, r3, #30
 80054f6:	d100      	bne.n	80054fa <__sflush_r+0xd2>
 80054f8:	694a      	ldr	r2, [r1, #20]
 80054fa:	60a2      	str	r2, [r4, #8]
 80054fc:	9b01      	ldr	r3, [sp, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	ddee      	ble.n	80054e0 <__sflush_r+0xb8>
 8005502:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8005504:	0032      	movs	r2, r6
 8005506:	001f      	movs	r7, r3
 8005508:	0028      	movs	r0, r5
 800550a:	9b01      	ldr	r3, [sp, #4]
 800550c:	6a21      	ldr	r1, [r4, #32]
 800550e:	47b8      	blx	r7
 8005510:	2800      	cmp	r0, #0
 8005512:	dc07      	bgt.n	8005524 <__sflush_r+0xfc>
 8005514:	89a2      	ldrh	r2, [r4, #12]
 8005516:	2340      	movs	r3, #64	@ 0x40
 8005518:	2001      	movs	r0, #1
 800551a:	4313      	orrs	r3, r2
 800551c:	b21b      	sxth	r3, r3
 800551e:	81a3      	strh	r3, [r4, #12]
 8005520:	4240      	negs	r0, r0
 8005522:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005524:	9b01      	ldr	r3, [sp, #4]
 8005526:	1836      	adds	r6, r6, r0
 8005528:	1a1b      	subs	r3, r3, r0
 800552a:	9301      	str	r3, [sp, #4]
 800552c:	e7e6      	b.n	80054fc <__sflush_r+0xd4>
 800552e:	46c0      	nop			@ (mov r8, r8)
 8005530:	dfbffffe 	.word	0xdfbffffe

08005534 <_fflush_r>:
 8005534:	690b      	ldr	r3, [r1, #16]
 8005536:	b570      	push	{r4, r5, r6, lr}
 8005538:	0005      	movs	r5, r0
 800553a:	000c      	movs	r4, r1
 800553c:	2b00      	cmp	r3, #0
 800553e:	d102      	bne.n	8005546 <_fflush_r+0x12>
 8005540:	2500      	movs	r5, #0
 8005542:	0028      	movs	r0, r5
 8005544:	bd70      	pop	{r4, r5, r6, pc}
 8005546:	2800      	cmp	r0, #0
 8005548:	d004      	beq.n	8005554 <_fflush_r+0x20>
 800554a:	6a03      	ldr	r3, [r0, #32]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <_fflush_r+0x20>
 8005550:	f7fe fc64 	bl	8003e1c <__sinit>
 8005554:	220c      	movs	r2, #12
 8005556:	5ea3      	ldrsh	r3, [r4, r2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d0f1      	beq.n	8005540 <_fflush_r+0xc>
 800555c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800555e:	07d2      	lsls	r2, r2, #31
 8005560:	d404      	bmi.n	800556c <_fflush_r+0x38>
 8005562:	059b      	lsls	r3, r3, #22
 8005564:	d402      	bmi.n	800556c <_fflush_r+0x38>
 8005566:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005568:	f7fe ff21 	bl	80043ae <__retarget_lock_acquire_recursive>
 800556c:	0028      	movs	r0, r5
 800556e:	0021      	movs	r1, r4
 8005570:	f7ff ff5a 	bl	8005428 <__sflush_r>
 8005574:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005576:	0005      	movs	r5, r0
 8005578:	07db      	lsls	r3, r3, #31
 800557a:	d4e2      	bmi.n	8005542 <_fflush_r+0xe>
 800557c:	89a3      	ldrh	r3, [r4, #12]
 800557e:	059b      	lsls	r3, r3, #22
 8005580:	d4df      	bmi.n	8005542 <_fflush_r+0xe>
 8005582:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005584:	f7fe ff14 	bl	80043b0 <__retarget_lock_release_recursive>
 8005588:	e7db      	b.n	8005542 <_fflush_r+0xe>
	...

0800558c <__swhatbuf_r>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	000e      	movs	r6, r1
 8005590:	001d      	movs	r5, r3
 8005592:	230e      	movs	r3, #14
 8005594:	5ec9      	ldrsh	r1, [r1, r3]
 8005596:	0014      	movs	r4, r2
 8005598:	b096      	sub	sp, #88	@ 0x58
 800559a:	2900      	cmp	r1, #0
 800559c:	da0c      	bge.n	80055b8 <__swhatbuf_r+0x2c>
 800559e:	89b2      	ldrh	r2, [r6, #12]
 80055a0:	2380      	movs	r3, #128	@ 0x80
 80055a2:	0011      	movs	r1, r2
 80055a4:	4019      	ands	r1, r3
 80055a6:	421a      	tst	r2, r3
 80055a8:	d114      	bne.n	80055d4 <__swhatbuf_r+0x48>
 80055aa:	2380      	movs	r3, #128	@ 0x80
 80055ac:	00db      	lsls	r3, r3, #3
 80055ae:	2000      	movs	r0, #0
 80055b0:	6029      	str	r1, [r5, #0]
 80055b2:	6023      	str	r3, [r4, #0]
 80055b4:	b016      	add	sp, #88	@ 0x58
 80055b6:	bd70      	pop	{r4, r5, r6, pc}
 80055b8:	466a      	mov	r2, sp
 80055ba:	f000 f901 	bl	80057c0 <_fstat_r>
 80055be:	2800      	cmp	r0, #0
 80055c0:	dbed      	blt.n	800559e <__swhatbuf_r+0x12>
 80055c2:	23f0      	movs	r3, #240	@ 0xf0
 80055c4:	9901      	ldr	r1, [sp, #4]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	4019      	ands	r1, r3
 80055ca:	4b04      	ldr	r3, [pc, #16]	@ (80055dc <__swhatbuf_r+0x50>)
 80055cc:	18c9      	adds	r1, r1, r3
 80055ce:	424b      	negs	r3, r1
 80055d0:	4159      	adcs	r1, r3
 80055d2:	e7ea      	b.n	80055aa <__swhatbuf_r+0x1e>
 80055d4:	2100      	movs	r1, #0
 80055d6:	2340      	movs	r3, #64	@ 0x40
 80055d8:	e7e9      	b.n	80055ae <__swhatbuf_r+0x22>
 80055da:	46c0      	nop			@ (mov r8, r8)
 80055dc:	ffffe000 	.word	0xffffe000

080055e0 <__smakebuf_r>:
 80055e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055e2:	2602      	movs	r6, #2
 80055e4:	898b      	ldrh	r3, [r1, #12]
 80055e6:	0005      	movs	r5, r0
 80055e8:	000c      	movs	r4, r1
 80055ea:	b085      	sub	sp, #20
 80055ec:	4233      	tst	r3, r6
 80055ee:	d007      	beq.n	8005600 <__smakebuf_r+0x20>
 80055f0:	0023      	movs	r3, r4
 80055f2:	3347      	adds	r3, #71	@ 0x47
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	6123      	str	r3, [r4, #16]
 80055f8:	2301      	movs	r3, #1
 80055fa:	6163      	str	r3, [r4, #20]
 80055fc:	b005      	add	sp, #20
 80055fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005600:	ab03      	add	r3, sp, #12
 8005602:	aa02      	add	r2, sp, #8
 8005604:	f7ff ffc2 	bl	800558c <__swhatbuf_r>
 8005608:	9f02      	ldr	r7, [sp, #8]
 800560a:	9001      	str	r0, [sp, #4]
 800560c:	0039      	movs	r1, r7
 800560e:	0028      	movs	r0, r5
 8005610:	f7fe ff3c 	bl	800448c <_malloc_r>
 8005614:	2800      	cmp	r0, #0
 8005616:	d108      	bne.n	800562a <__smakebuf_r+0x4a>
 8005618:	220c      	movs	r2, #12
 800561a:	5ea3      	ldrsh	r3, [r4, r2]
 800561c:	059a      	lsls	r2, r3, #22
 800561e:	d4ed      	bmi.n	80055fc <__smakebuf_r+0x1c>
 8005620:	2203      	movs	r2, #3
 8005622:	4393      	bics	r3, r2
 8005624:	431e      	orrs	r6, r3
 8005626:	81a6      	strh	r6, [r4, #12]
 8005628:	e7e2      	b.n	80055f0 <__smakebuf_r+0x10>
 800562a:	2380      	movs	r3, #128	@ 0x80
 800562c:	89a2      	ldrh	r2, [r4, #12]
 800562e:	6020      	str	r0, [r4, #0]
 8005630:	4313      	orrs	r3, r2
 8005632:	81a3      	strh	r3, [r4, #12]
 8005634:	9b03      	ldr	r3, [sp, #12]
 8005636:	6120      	str	r0, [r4, #16]
 8005638:	6167      	str	r7, [r4, #20]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00c      	beq.n	8005658 <__smakebuf_r+0x78>
 800563e:	0028      	movs	r0, r5
 8005640:	230e      	movs	r3, #14
 8005642:	5ee1      	ldrsh	r1, [r4, r3]
 8005644:	f000 f8ce 	bl	80057e4 <_isatty_r>
 8005648:	2800      	cmp	r0, #0
 800564a:	d005      	beq.n	8005658 <__smakebuf_r+0x78>
 800564c:	2303      	movs	r3, #3
 800564e:	89a2      	ldrh	r2, [r4, #12]
 8005650:	439a      	bics	r2, r3
 8005652:	3b02      	subs	r3, #2
 8005654:	4313      	orrs	r3, r2
 8005656:	81a3      	strh	r3, [r4, #12]
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	9a01      	ldr	r2, [sp, #4]
 800565c:	4313      	orrs	r3, r2
 800565e:	81a3      	strh	r3, [r4, #12]
 8005660:	e7cc      	b.n	80055fc <__smakebuf_r+0x1c>

08005662 <__sccl>:
 8005662:	b570      	push	{r4, r5, r6, lr}
 8005664:	780b      	ldrb	r3, [r1, #0]
 8005666:	0004      	movs	r4, r0
 8005668:	2b5e      	cmp	r3, #94	@ 0x5e
 800566a:	d018      	beq.n	800569e <__sccl+0x3c>
 800566c:	2200      	movs	r2, #0
 800566e:	1c4d      	adds	r5, r1, #1
 8005670:	0021      	movs	r1, r4
 8005672:	1c60      	adds	r0, r4, #1
 8005674:	30ff      	adds	r0, #255	@ 0xff
 8005676:	700a      	strb	r2, [r1, #0]
 8005678:	3101      	adds	r1, #1
 800567a:	4281      	cmp	r1, r0
 800567c:	d1fb      	bne.n	8005676 <__sccl+0x14>
 800567e:	1e68      	subs	r0, r5, #1
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00b      	beq.n	800569c <__sccl+0x3a>
 8005684:	2101      	movs	r1, #1
 8005686:	404a      	eors	r2, r1
 8005688:	0028      	movs	r0, r5
 800568a:	54e2      	strb	r2, [r4, r3]
 800568c:	7801      	ldrb	r1, [r0, #0]
 800568e:	1c45      	adds	r5, r0, #1
 8005690:	292d      	cmp	r1, #45	@ 0x2d
 8005692:	d00a      	beq.n	80056aa <__sccl+0x48>
 8005694:	295d      	cmp	r1, #93	@ 0x5d
 8005696:	d01b      	beq.n	80056d0 <__sccl+0x6e>
 8005698:	2900      	cmp	r1, #0
 800569a:	d104      	bne.n	80056a6 <__sccl+0x44>
 800569c:	bd70      	pop	{r4, r5, r6, pc}
 800569e:	2201      	movs	r2, #1
 80056a0:	784b      	ldrb	r3, [r1, #1]
 80056a2:	1c8d      	adds	r5, r1, #2
 80056a4:	e7e4      	b.n	8005670 <__sccl+0xe>
 80056a6:	000b      	movs	r3, r1
 80056a8:	e7ee      	b.n	8005688 <__sccl+0x26>
 80056aa:	7846      	ldrb	r6, [r0, #1]
 80056ac:	2e5d      	cmp	r6, #93	@ 0x5d
 80056ae:	d0fa      	beq.n	80056a6 <__sccl+0x44>
 80056b0:	42b3      	cmp	r3, r6
 80056b2:	dcf8      	bgt.n	80056a6 <__sccl+0x44>
 80056b4:	0019      	movs	r1, r3
 80056b6:	3002      	adds	r0, #2
 80056b8:	3101      	adds	r1, #1
 80056ba:	5462      	strb	r2, [r4, r1]
 80056bc:	428e      	cmp	r6, r1
 80056be:	dcfb      	bgt.n	80056b8 <__sccl+0x56>
 80056c0:	2100      	movs	r1, #0
 80056c2:	1c5d      	adds	r5, r3, #1
 80056c4:	42b3      	cmp	r3, r6
 80056c6:	da01      	bge.n	80056cc <__sccl+0x6a>
 80056c8:	1af1      	subs	r1, r6, r3
 80056ca:	3901      	subs	r1, #1
 80056cc:	186b      	adds	r3, r5, r1
 80056ce:	e7dd      	b.n	800568c <__sccl+0x2a>
 80056d0:	0028      	movs	r0, r5
 80056d2:	e7e3      	b.n	800569c <__sccl+0x3a>

080056d4 <__submore>:
 80056d4:	000b      	movs	r3, r1
 80056d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056d8:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 80056da:	3344      	adds	r3, #68	@ 0x44
 80056dc:	000c      	movs	r4, r1
 80056de:	429d      	cmp	r5, r3
 80056e0:	d11c      	bne.n	800571c <__submore+0x48>
 80056e2:	2680      	movs	r6, #128	@ 0x80
 80056e4:	00f6      	lsls	r6, r6, #3
 80056e6:	0031      	movs	r1, r6
 80056e8:	f7fe fed0 	bl	800448c <_malloc_r>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	d102      	bne.n	80056f6 <__submore+0x22>
 80056f0:	2001      	movs	r0, #1
 80056f2:	4240      	negs	r0, r0
 80056f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80056f6:	0023      	movs	r3, r4
 80056f8:	6360      	str	r0, [r4, #52]	@ 0x34
 80056fa:	63a6      	str	r6, [r4, #56]	@ 0x38
 80056fc:	3346      	adds	r3, #70	@ 0x46
 80056fe:	781a      	ldrb	r2, [r3, #0]
 8005700:	4b10      	ldr	r3, [pc, #64]	@ (8005744 <__submore+0x70>)
 8005702:	54c2      	strb	r2, [r0, r3]
 8005704:	0023      	movs	r3, r4
 8005706:	3345      	adds	r3, #69	@ 0x45
 8005708:	781a      	ldrb	r2, [r3, #0]
 800570a:	4b0f      	ldr	r3, [pc, #60]	@ (8005748 <__submore+0x74>)
 800570c:	54c2      	strb	r2, [r0, r3]
 800570e:	782a      	ldrb	r2, [r5, #0]
 8005710:	4b0e      	ldr	r3, [pc, #56]	@ (800574c <__submore+0x78>)
 8005712:	54c2      	strb	r2, [r0, r3]
 8005714:	18c0      	adds	r0, r0, r3
 8005716:	6020      	str	r0, [r4, #0]
 8005718:	2000      	movs	r0, #0
 800571a:	e7eb      	b.n	80056f4 <__submore+0x20>
 800571c:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800571e:	0029      	movs	r1, r5
 8005720:	0073      	lsls	r3, r6, #1
 8005722:	001a      	movs	r2, r3
 8005724:	9301      	str	r3, [sp, #4]
 8005726:	f000 f895 	bl	8005854 <_realloc_r>
 800572a:	1e05      	subs	r5, r0, #0
 800572c:	d0e0      	beq.n	80056f0 <__submore+0x1c>
 800572e:	1987      	adds	r7, r0, r6
 8005730:	0001      	movs	r1, r0
 8005732:	0032      	movs	r2, r6
 8005734:	0038      	movs	r0, r7
 8005736:	f000 f884 	bl	8005842 <memcpy>
 800573a:	9b01      	ldr	r3, [sp, #4]
 800573c:	6027      	str	r7, [r4, #0]
 800573e:	6365      	str	r5, [r4, #52]	@ 0x34
 8005740:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005742:	e7e9      	b.n	8005718 <__submore+0x44>
 8005744:	000003ff 	.word	0x000003ff
 8005748:	000003fe 	.word	0x000003fe
 800574c:	000003fd 	.word	0x000003fd

08005750 <memmove>:
 8005750:	b510      	push	{r4, lr}
 8005752:	4288      	cmp	r0, r1
 8005754:	d806      	bhi.n	8005764 <memmove+0x14>
 8005756:	2300      	movs	r3, #0
 8005758:	429a      	cmp	r2, r3
 800575a:	d008      	beq.n	800576e <memmove+0x1e>
 800575c:	5ccc      	ldrb	r4, [r1, r3]
 800575e:	54c4      	strb	r4, [r0, r3]
 8005760:	3301      	adds	r3, #1
 8005762:	e7f9      	b.n	8005758 <memmove+0x8>
 8005764:	188b      	adds	r3, r1, r2
 8005766:	4298      	cmp	r0, r3
 8005768:	d2f5      	bcs.n	8005756 <memmove+0x6>
 800576a:	3a01      	subs	r2, #1
 800576c:	d200      	bcs.n	8005770 <memmove+0x20>
 800576e:	bd10      	pop	{r4, pc}
 8005770:	5c8b      	ldrb	r3, [r1, r2]
 8005772:	5483      	strb	r3, [r0, r2]
 8005774:	e7f9      	b.n	800576a <memmove+0x1a>
	...

08005778 <strncasecmp>:
 8005778:	2303      	movs	r3, #3
 800577a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800577c:	469c      	mov	ip, r3
 800577e:	0006      	movs	r6, r0
 8005780:	2400      	movs	r4, #0
 8005782:	4f0e      	ldr	r7, [pc, #56]	@ (80057bc <strncasecmp+0x44>)
 8005784:	9201      	str	r2, [sp, #4]
 8005786:	9b01      	ldr	r3, [sp, #4]
 8005788:	429c      	cmp	r4, r3
 800578a:	d101      	bne.n	8005790 <strncasecmp+0x18>
 800578c:	2000      	movs	r0, #0
 800578e:	e013      	b.n	80057b8 <strncasecmp+0x40>
 8005790:	4660      	mov	r0, ip
 8005792:	5d35      	ldrb	r5, [r6, r4]
 8005794:	5d7b      	ldrb	r3, [r7, r5]
 8005796:	4003      	ands	r3, r0
 8005798:	2b01      	cmp	r3, #1
 800579a:	d100      	bne.n	800579e <strncasecmp+0x26>
 800579c:	3520      	adds	r5, #32
 800579e:	4662      	mov	r2, ip
 80057a0:	5d0b      	ldrb	r3, [r1, r4]
 80057a2:	5cf8      	ldrb	r0, [r7, r3]
 80057a4:	4010      	ands	r0, r2
 80057a6:	2801      	cmp	r0, #1
 80057a8:	d100      	bne.n	80057ac <strncasecmp+0x34>
 80057aa:	3320      	adds	r3, #32
 80057ac:	1ae8      	subs	r0, r5, r3
 80057ae:	429d      	cmp	r5, r3
 80057b0:	d102      	bne.n	80057b8 <strncasecmp+0x40>
 80057b2:	3401      	adds	r4, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d1e6      	bne.n	8005786 <strncasecmp+0xe>
 80057b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	080061b1 	.word	0x080061b1

080057c0 <_fstat_r>:
 80057c0:	2300      	movs	r3, #0
 80057c2:	b570      	push	{r4, r5, r6, lr}
 80057c4:	4d06      	ldr	r5, [pc, #24]	@ (80057e0 <_fstat_r+0x20>)
 80057c6:	0004      	movs	r4, r0
 80057c8:	0008      	movs	r0, r1
 80057ca:	0011      	movs	r1, r2
 80057cc:	602b      	str	r3, [r5, #0]
 80057ce:	f7fb fcba 	bl	8001146 <_fstat>
 80057d2:	1c43      	adds	r3, r0, #1
 80057d4:	d103      	bne.n	80057de <_fstat_r+0x1e>
 80057d6:	682b      	ldr	r3, [r5, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d000      	beq.n	80057de <_fstat_r+0x1e>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd70      	pop	{r4, r5, r6, pc}
 80057e0:	20000284 	.word	0x20000284

080057e4 <_isatty_r>:
 80057e4:	2300      	movs	r3, #0
 80057e6:	b570      	push	{r4, r5, r6, lr}
 80057e8:	4d06      	ldr	r5, [pc, #24]	@ (8005804 <_isatty_r+0x20>)
 80057ea:	0004      	movs	r4, r0
 80057ec:	0008      	movs	r0, r1
 80057ee:	602b      	str	r3, [r5, #0]
 80057f0:	f7fb fcb7 	bl	8001162 <_isatty>
 80057f4:	1c43      	adds	r3, r0, #1
 80057f6:	d103      	bne.n	8005800 <_isatty_r+0x1c>
 80057f8:	682b      	ldr	r3, [r5, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d000      	beq.n	8005800 <_isatty_r+0x1c>
 80057fe:	6023      	str	r3, [r4, #0]
 8005800:	bd70      	pop	{r4, r5, r6, pc}
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	20000284 	.word	0x20000284

08005808 <_sbrk_r>:
 8005808:	2300      	movs	r3, #0
 800580a:	b570      	push	{r4, r5, r6, lr}
 800580c:	4d06      	ldr	r5, [pc, #24]	@ (8005828 <_sbrk_r+0x20>)
 800580e:	0004      	movs	r4, r0
 8005810:	0008      	movs	r0, r1
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	f7fb fcba 	bl	800118c <_sbrk>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d103      	bne.n	8005824 <_sbrk_r+0x1c>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d000      	beq.n	8005824 <_sbrk_r+0x1c>
 8005822:	6023      	str	r3, [r4, #0]
 8005824:	bd70      	pop	{r4, r5, r6, pc}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	20000284 	.word	0x20000284

0800582c <memchr>:
 800582c:	b2c9      	uxtb	r1, r1
 800582e:	1882      	adds	r2, r0, r2
 8005830:	4290      	cmp	r0, r2
 8005832:	d101      	bne.n	8005838 <memchr+0xc>
 8005834:	2000      	movs	r0, #0
 8005836:	4770      	bx	lr
 8005838:	7803      	ldrb	r3, [r0, #0]
 800583a:	428b      	cmp	r3, r1
 800583c:	d0fb      	beq.n	8005836 <memchr+0xa>
 800583e:	3001      	adds	r0, #1
 8005840:	e7f6      	b.n	8005830 <memchr+0x4>

08005842 <memcpy>:
 8005842:	2300      	movs	r3, #0
 8005844:	b510      	push	{r4, lr}
 8005846:	429a      	cmp	r2, r3
 8005848:	d100      	bne.n	800584c <memcpy+0xa>
 800584a:	bd10      	pop	{r4, pc}
 800584c:	5ccc      	ldrb	r4, [r1, r3]
 800584e:	54c4      	strb	r4, [r0, r3]
 8005850:	3301      	adds	r3, #1
 8005852:	e7f8      	b.n	8005846 <memcpy+0x4>

08005854 <_realloc_r>:
 8005854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005856:	0006      	movs	r6, r0
 8005858:	000c      	movs	r4, r1
 800585a:	0015      	movs	r5, r2
 800585c:	2900      	cmp	r1, #0
 800585e:	d105      	bne.n	800586c <_realloc_r+0x18>
 8005860:	0011      	movs	r1, r2
 8005862:	f7fe fe13 	bl	800448c <_malloc_r>
 8005866:	0004      	movs	r4, r0
 8005868:	0020      	movs	r0, r4
 800586a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800586c:	2a00      	cmp	r2, #0
 800586e:	d103      	bne.n	8005878 <_realloc_r+0x24>
 8005870:	f7fe fda0 	bl	80043b4 <_free_r>
 8005874:	2400      	movs	r4, #0
 8005876:	e7f7      	b.n	8005868 <_realloc_r+0x14>
 8005878:	f000 f930 	bl	8005adc <_malloc_usable_size_r>
 800587c:	0007      	movs	r7, r0
 800587e:	4285      	cmp	r5, r0
 8005880:	d802      	bhi.n	8005888 <_realloc_r+0x34>
 8005882:	0843      	lsrs	r3, r0, #1
 8005884:	42ab      	cmp	r3, r5
 8005886:	d3ef      	bcc.n	8005868 <_realloc_r+0x14>
 8005888:	0029      	movs	r1, r5
 800588a:	0030      	movs	r0, r6
 800588c:	f7fe fdfe 	bl	800448c <_malloc_r>
 8005890:	9001      	str	r0, [sp, #4]
 8005892:	2800      	cmp	r0, #0
 8005894:	d0ee      	beq.n	8005874 <_realloc_r+0x20>
 8005896:	002a      	movs	r2, r5
 8005898:	42bd      	cmp	r5, r7
 800589a:	d900      	bls.n	800589e <_realloc_r+0x4a>
 800589c:	003a      	movs	r2, r7
 800589e:	0021      	movs	r1, r4
 80058a0:	9801      	ldr	r0, [sp, #4]
 80058a2:	f7ff ffce 	bl	8005842 <memcpy>
 80058a6:	0021      	movs	r1, r4
 80058a8:	0030      	movs	r0, r6
 80058aa:	f7fe fd83 	bl	80043b4 <_free_r>
 80058ae:	9c01      	ldr	r4, [sp, #4]
 80058b0:	e7da      	b.n	8005868 <_realloc_r+0x14>
	...

080058b4 <_strtol_l.constprop.0>:
 80058b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058b6:	b085      	sub	sp, #20
 80058b8:	0017      	movs	r7, r2
 80058ba:	001e      	movs	r6, r3
 80058bc:	9003      	str	r0, [sp, #12]
 80058be:	9101      	str	r1, [sp, #4]
 80058c0:	2b24      	cmp	r3, #36	@ 0x24
 80058c2:	d844      	bhi.n	800594e <_strtol_l.constprop.0+0x9a>
 80058c4:	000c      	movs	r4, r1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d041      	beq.n	800594e <_strtol_l.constprop.0+0x9a>
 80058ca:	4b3d      	ldr	r3, [pc, #244]	@ (80059c0 <_strtol_l.constprop.0+0x10c>)
 80058cc:	2208      	movs	r2, #8
 80058ce:	469c      	mov	ip, r3
 80058d0:	0023      	movs	r3, r4
 80058d2:	4661      	mov	r1, ip
 80058d4:	781d      	ldrb	r5, [r3, #0]
 80058d6:	3401      	adds	r4, #1
 80058d8:	5d48      	ldrb	r0, [r1, r5]
 80058da:	0001      	movs	r1, r0
 80058dc:	4011      	ands	r1, r2
 80058de:	4210      	tst	r0, r2
 80058e0:	d1f6      	bne.n	80058d0 <_strtol_l.constprop.0+0x1c>
 80058e2:	2d2d      	cmp	r5, #45	@ 0x2d
 80058e4:	d13a      	bne.n	800595c <_strtol_l.constprop.0+0xa8>
 80058e6:	7825      	ldrb	r5, [r4, #0]
 80058e8:	1c9c      	adds	r4, r3, #2
 80058ea:	2301      	movs	r3, #1
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	2210      	movs	r2, #16
 80058f0:	0033      	movs	r3, r6
 80058f2:	4393      	bics	r3, r2
 80058f4:	d109      	bne.n	800590a <_strtol_l.constprop.0+0x56>
 80058f6:	2d30      	cmp	r5, #48	@ 0x30
 80058f8:	d136      	bne.n	8005968 <_strtol_l.constprop.0+0xb4>
 80058fa:	2120      	movs	r1, #32
 80058fc:	7823      	ldrb	r3, [r4, #0]
 80058fe:	438b      	bics	r3, r1
 8005900:	2b58      	cmp	r3, #88	@ 0x58
 8005902:	d131      	bne.n	8005968 <_strtol_l.constprop.0+0xb4>
 8005904:	0016      	movs	r6, r2
 8005906:	7865      	ldrb	r5, [r4, #1]
 8005908:	3402      	adds	r4, #2
 800590a:	4a2e      	ldr	r2, [pc, #184]	@ (80059c4 <_strtol_l.constprop.0+0x110>)
 800590c:	9b00      	ldr	r3, [sp, #0]
 800590e:	4694      	mov	ip, r2
 8005910:	4463      	add	r3, ip
 8005912:	0031      	movs	r1, r6
 8005914:	0018      	movs	r0, r3
 8005916:	9302      	str	r3, [sp, #8]
 8005918:	f7fa fc8e 	bl	8000238 <__aeabi_uidivmod>
 800591c:	2200      	movs	r2, #0
 800591e:	4684      	mov	ip, r0
 8005920:	0010      	movs	r0, r2
 8005922:	002b      	movs	r3, r5
 8005924:	3b30      	subs	r3, #48	@ 0x30
 8005926:	2b09      	cmp	r3, #9
 8005928:	d825      	bhi.n	8005976 <_strtol_l.constprop.0+0xc2>
 800592a:	001d      	movs	r5, r3
 800592c:	42ae      	cmp	r6, r5
 800592e:	dd31      	ble.n	8005994 <_strtol_l.constprop.0+0xe0>
 8005930:	1c53      	adds	r3, r2, #1
 8005932:	d009      	beq.n	8005948 <_strtol_l.constprop.0+0x94>
 8005934:	2201      	movs	r2, #1
 8005936:	4252      	negs	r2, r2
 8005938:	4584      	cmp	ip, r0
 800593a:	d305      	bcc.n	8005948 <_strtol_l.constprop.0+0x94>
 800593c:	d101      	bne.n	8005942 <_strtol_l.constprop.0+0x8e>
 800593e:	42a9      	cmp	r1, r5
 8005940:	db25      	blt.n	800598e <_strtol_l.constprop.0+0xda>
 8005942:	2201      	movs	r2, #1
 8005944:	4370      	muls	r0, r6
 8005946:	1828      	adds	r0, r5, r0
 8005948:	7825      	ldrb	r5, [r4, #0]
 800594a:	3401      	adds	r4, #1
 800594c:	e7e9      	b.n	8005922 <_strtol_l.constprop.0+0x6e>
 800594e:	f7fe fd03 	bl	8004358 <__errno>
 8005952:	2316      	movs	r3, #22
 8005954:	6003      	str	r3, [r0, #0]
 8005956:	2000      	movs	r0, #0
 8005958:	b005      	add	sp, #20
 800595a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800595c:	9100      	str	r1, [sp, #0]
 800595e:	2d2b      	cmp	r5, #43	@ 0x2b
 8005960:	d1c5      	bne.n	80058ee <_strtol_l.constprop.0+0x3a>
 8005962:	7825      	ldrb	r5, [r4, #0]
 8005964:	1c9c      	adds	r4, r3, #2
 8005966:	e7c2      	b.n	80058ee <_strtol_l.constprop.0+0x3a>
 8005968:	2e00      	cmp	r6, #0
 800596a:	d1ce      	bne.n	800590a <_strtol_l.constprop.0+0x56>
 800596c:	3608      	adds	r6, #8
 800596e:	2d30      	cmp	r5, #48	@ 0x30
 8005970:	d0cb      	beq.n	800590a <_strtol_l.constprop.0+0x56>
 8005972:	3602      	adds	r6, #2
 8005974:	e7c9      	b.n	800590a <_strtol_l.constprop.0+0x56>
 8005976:	002b      	movs	r3, r5
 8005978:	3b41      	subs	r3, #65	@ 0x41
 800597a:	2b19      	cmp	r3, #25
 800597c:	d801      	bhi.n	8005982 <_strtol_l.constprop.0+0xce>
 800597e:	3d37      	subs	r5, #55	@ 0x37
 8005980:	e7d4      	b.n	800592c <_strtol_l.constprop.0+0x78>
 8005982:	002b      	movs	r3, r5
 8005984:	3b61      	subs	r3, #97	@ 0x61
 8005986:	2b19      	cmp	r3, #25
 8005988:	d804      	bhi.n	8005994 <_strtol_l.constprop.0+0xe0>
 800598a:	3d57      	subs	r5, #87	@ 0x57
 800598c:	e7ce      	b.n	800592c <_strtol_l.constprop.0+0x78>
 800598e:	2201      	movs	r2, #1
 8005990:	4252      	negs	r2, r2
 8005992:	e7d9      	b.n	8005948 <_strtol_l.constprop.0+0x94>
 8005994:	1c53      	adds	r3, r2, #1
 8005996:	d108      	bne.n	80059aa <_strtol_l.constprop.0+0xf6>
 8005998:	2322      	movs	r3, #34	@ 0x22
 800599a:	9a03      	ldr	r2, [sp, #12]
 800599c:	9802      	ldr	r0, [sp, #8]
 800599e:	6013      	str	r3, [r2, #0]
 80059a0:	2f00      	cmp	r7, #0
 80059a2:	d0d9      	beq.n	8005958 <_strtol_l.constprop.0+0xa4>
 80059a4:	1e63      	subs	r3, r4, #1
 80059a6:	9301      	str	r3, [sp, #4]
 80059a8:	e007      	b.n	80059ba <_strtol_l.constprop.0+0x106>
 80059aa:	9b00      	ldr	r3, [sp, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d000      	beq.n	80059b2 <_strtol_l.constprop.0+0xfe>
 80059b0:	4240      	negs	r0, r0
 80059b2:	2f00      	cmp	r7, #0
 80059b4:	d0d0      	beq.n	8005958 <_strtol_l.constprop.0+0xa4>
 80059b6:	2a00      	cmp	r2, #0
 80059b8:	d1f4      	bne.n	80059a4 <_strtol_l.constprop.0+0xf0>
 80059ba:	9b01      	ldr	r3, [sp, #4]
 80059bc:	603b      	str	r3, [r7, #0]
 80059be:	e7cb      	b.n	8005958 <_strtol_l.constprop.0+0xa4>
 80059c0:	080061b1 	.word	0x080061b1
 80059c4:	7fffffff 	.word	0x7fffffff

080059c8 <_strtol_r>:
 80059c8:	b510      	push	{r4, lr}
 80059ca:	f7ff ff73 	bl	80058b4 <_strtol_l.constprop.0>
 80059ce:	bd10      	pop	{r4, pc}

080059d0 <_strtoul_l.constprop.0>:
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d2:	001e      	movs	r6, r3
 80059d4:	4b3e      	ldr	r3, [pc, #248]	@ (8005ad0 <_strtoul_l.constprop.0+0x100>)
 80059d6:	0017      	movs	r7, r2
 80059d8:	000c      	movs	r4, r1
 80059da:	469c      	mov	ip, r3
 80059dc:	2208      	movs	r2, #8
 80059de:	b085      	sub	sp, #20
 80059e0:	9003      	str	r0, [sp, #12]
 80059e2:	9100      	str	r1, [sp, #0]
 80059e4:	0023      	movs	r3, r4
 80059e6:	4661      	mov	r1, ip
 80059e8:	781d      	ldrb	r5, [r3, #0]
 80059ea:	3401      	adds	r4, #1
 80059ec:	5d48      	ldrb	r0, [r1, r5]
 80059ee:	0001      	movs	r1, r0
 80059f0:	4011      	ands	r1, r2
 80059f2:	4210      	tst	r0, r2
 80059f4:	d1f6      	bne.n	80059e4 <_strtoul_l.constprop.0+0x14>
 80059f6:	2d2d      	cmp	r5, #45	@ 0x2d
 80059f8:	d137      	bne.n	8005a6a <_strtoul_l.constprop.0+0x9a>
 80059fa:	7825      	ldrb	r5, [r4, #0]
 80059fc:	1c9c      	adds	r4, r3, #2
 80059fe:	2301      	movs	r3, #1
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	2210      	movs	r2, #16
 8005a04:	0033      	movs	r3, r6
 8005a06:	4393      	bics	r3, r2
 8005a08:	d109      	bne.n	8005a1e <_strtoul_l.constprop.0+0x4e>
 8005a0a:	2d30      	cmp	r5, #48	@ 0x30
 8005a0c:	d133      	bne.n	8005a76 <_strtoul_l.constprop.0+0xa6>
 8005a0e:	2120      	movs	r1, #32
 8005a10:	7823      	ldrb	r3, [r4, #0]
 8005a12:	438b      	bics	r3, r1
 8005a14:	2b58      	cmp	r3, #88	@ 0x58
 8005a16:	d12e      	bne.n	8005a76 <_strtoul_l.constprop.0+0xa6>
 8005a18:	0016      	movs	r6, r2
 8005a1a:	7865      	ldrb	r5, [r4, #1]
 8005a1c:	3402      	adds	r4, #2
 8005a1e:	2001      	movs	r0, #1
 8005a20:	0031      	movs	r1, r6
 8005a22:	4240      	negs	r0, r0
 8005a24:	f7fa fb82 	bl	800012c <__udivsi3>
 8005a28:	9001      	str	r0, [sp, #4]
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	0031      	movs	r1, r6
 8005a2e:	4240      	negs	r0, r0
 8005a30:	f7fa fc02 	bl	8000238 <__aeabi_uidivmod>
 8005a34:	2300      	movs	r3, #0
 8005a36:	2201      	movs	r2, #1
 8005a38:	0018      	movs	r0, r3
 8005a3a:	4694      	mov	ip, r2
 8005a3c:	002a      	movs	r2, r5
 8005a3e:	3a30      	subs	r2, #48	@ 0x30
 8005a40:	2a09      	cmp	r2, #9
 8005a42:	d81f      	bhi.n	8005a84 <_strtoul_l.constprop.0+0xb4>
 8005a44:	0015      	movs	r5, r2
 8005a46:	42ae      	cmp	r6, r5
 8005a48:	dd2b      	ble.n	8005aa2 <_strtoul_l.constprop.0+0xd2>
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	d00a      	beq.n	8005a64 <_strtoul_l.constprop.0+0x94>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	9a01      	ldr	r2, [sp, #4]
 8005a52:	425b      	negs	r3, r3
 8005a54:	4282      	cmp	r2, r0
 8005a56:	d305      	bcc.n	8005a64 <_strtoul_l.constprop.0+0x94>
 8005a58:	d101      	bne.n	8005a5e <_strtoul_l.constprop.0+0x8e>
 8005a5a:	42a9      	cmp	r1, r5
 8005a5c:	db1e      	blt.n	8005a9c <_strtoul_l.constprop.0+0xcc>
 8005a5e:	4663      	mov	r3, ip
 8005a60:	4370      	muls	r0, r6
 8005a62:	1828      	adds	r0, r5, r0
 8005a64:	7825      	ldrb	r5, [r4, #0]
 8005a66:	3401      	adds	r4, #1
 8005a68:	e7e8      	b.n	8005a3c <_strtoul_l.constprop.0+0x6c>
 8005a6a:	9102      	str	r1, [sp, #8]
 8005a6c:	2d2b      	cmp	r5, #43	@ 0x2b
 8005a6e:	d1c8      	bne.n	8005a02 <_strtoul_l.constprop.0+0x32>
 8005a70:	7825      	ldrb	r5, [r4, #0]
 8005a72:	1c9c      	adds	r4, r3, #2
 8005a74:	e7c5      	b.n	8005a02 <_strtoul_l.constprop.0+0x32>
 8005a76:	2e00      	cmp	r6, #0
 8005a78:	d1d1      	bne.n	8005a1e <_strtoul_l.constprop.0+0x4e>
 8005a7a:	3608      	adds	r6, #8
 8005a7c:	2d30      	cmp	r5, #48	@ 0x30
 8005a7e:	d0ce      	beq.n	8005a1e <_strtoul_l.constprop.0+0x4e>
 8005a80:	3602      	adds	r6, #2
 8005a82:	e7cc      	b.n	8005a1e <_strtoul_l.constprop.0+0x4e>
 8005a84:	002a      	movs	r2, r5
 8005a86:	3a41      	subs	r2, #65	@ 0x41
 8005a88:	2a19      	cmp	r2, #25
 8005a8a:	d801      	bhi.n	8005a90 <_strtoul_l.constprop.0+0xc0>
 8005a8c:	3d37      	subs	r5, #55	@ 0x37
 8005a8e:	e7da      	b.n	8005a46 <_strtoul_l.constprop.0+0x76>
 8005a90:	002a      	movs	r2, r5
 8005a92:	3a61      	subs	r2, #97	@ 0x61
 8005a94:	2a19      	cmp	r2, #25
 8005a96:	d804      	bhi.n	8005aa2 <_strtoul_l.constprop.0+0xd2>
 8005a98:	3d57      	subs	r5, #87	@ 0x57
 8005a9a:	e7d4      	b.n	8005a46 <_strtoul_l.constprop.0+0x76>
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	425b      	negs	r3, r3
 8005aa0:	e7e0      	b.n	8005a64 <_strtoul_l.constprop.0+0x94>
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	d107      	bne.n	8005ab6 <_strtoul_l.constprop.0+0xe6>
 8005aa6:	2222      	movs	r2, #34	@ 0x22
 8005aa8:	9903      	ldr	r1, [sp, #12]
 8005aaa:	0018      	movs	r0, r3
 8005aac:	600a      	str	r2, [r1, #0]
 8005aae:	2f00      	cmp	r7, #0
 8005ab0:	d109      	bne.n	8005ac6 <_strtoul_l.constprop.0+0xf6>
 8005ab2:	b005      	add	sp, #20
 8005ab4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ab6:	9a02      	ldr	r2, [sp, #8]
 8005ab8:	2a00      	cmp	r2, #0
 8005aba:	d000      	beq.n	8005abe <_strtoul_l.constprop.0+0xee>
 8005abc:	4240      	negs	r0, r0
 8005abe:	2f00      	cmp	r7, #0
 8005ac0:	d0f7      	beq.n	8005ab2 <_strtoul_l.constprop.0+0xe2>
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d001      	beq.n	8005aca <_strtoul_l.constprop.0+0xfa>
 8005ac6:	1e63      	subs	r3, r4, #1
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	9b00      	ldr	r3, [sp, #0]
 8005acc:	603b      	str	r3, [r7, #0]
 8005ace:	e7f0      	b.n	8005ab2 <_strtoul_l.constprop.0+0xe2>
 8005ad0:	080061b1 	.word	0x080061b1

08005ad4 <_strtoul_r>:
 8005ad4:	b510      	push	{r4, lr}
 8005ad6:	f7ff ff7b 	bl	80059d0 <_strtoul_l.constprop.0>
 8005ada:	bd10      	pop	{r4, pc}

08005adc <_malloc_usable_size_r>:
 8005adc:	1f0b      	subs	r3, r1, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	1f18      	subs	r0, r3, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	da01      	bge.n	8005aea <_malloc_usable_size_r+0xe>
 8005ae6:	580b      	ldr	r3, [r1, r0]
 8005ae8:	18c0      	adds	r0, r0, r3
 8005aea:	4770      	bx	lr

08005aec <_init>:
 8005aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aee:	46c0      	nop			@ (mov r8, r8)
 8005af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005af2:	bc08      	pop	{r3}
 8005af4:	469e      	mov	lr, r3
 8005af6:	4770      	bx	lr

08005af8 <_fini>:
 8005af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afe:	bc08      	pop	{r3}
 8005b00:	469e      	mov	lr, r3
 8005b02:	4770      	bx	lr
