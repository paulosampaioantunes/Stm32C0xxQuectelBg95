
QuectelBg95Stm32C0Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000671c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000534  080067dc  080067dc  000077dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d10  08006d10  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006d10  08006d10  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d10  08006d10  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d10  08006d10  00007d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d14  08006d14  00007d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006d18  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000068  08006d80  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000398  08006d80  00008398  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d452  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022e5  00000000  00000000  000154e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  000177c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000827  00000000  00000000  00018270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014472  00000000  00000000  00018a97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfb4  00000000  00000000  0002cf09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000795ba  00000000  00000000  0003aebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b4477  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003020  00000000  00000000  000b44bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b74dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080067c4 	.word	0x080067c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	080067c4 	.word	0x080067c4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 ffde 	bl	800120a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f835 	bl	80002bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f951 	bl	80004f8 <MX_GPIO_Init>
  MX_RTC_Init();
 8000256:	f000 f877 	bl	8000348 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f919 	bl	8000490 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //configurando rtc apos reset
  	__HAL_RCC_PWR_CLK_ENABLE();
 800025e:	4b15      	ldr	r3, [pc, #84]	@ (80002b4 <main+0x70>)
 8000260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000262:	4b14      	ldr	r3, [pc, #80]	@ (80002b4 <main+0x70>)
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	0549      	lsls	r1, r1, #21
 8000268:	430a      	orrs	r2, r1
 800026a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800026c:	4b11      	ldr	r3, [pc, #68]	@ (80002b4 <main+0x70>)
 800026e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	055b      	lsls	r3, r3, #21
 8000274:	4013      	ands	r3, r2
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  	__HAL_RCC_RTC_ENABLE();
 800027a:	4b0e      	ldr	r3, [pc, #56]	@ (80002b4 <main+0x70>)
 800027c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800027e:	4b0d      	ldr	r3, [pc, #52]	@ (80002b4 <main+0x70>)
 8000280:	2180      	movs	r1, #128	@ 0x80
 8000282:	0209      	lsls	r1, r1, #8
 8000284:	430a      	orrs	r2, r1
 8000286:	65da      	str	r2, [r3, #92]	@ 0x5c
  	InitFlags();
 8000288:	f000 fdd0 	bl	8000e2c <InitFlags>
	        		    	RESPONSE_BUFFER_SIZE);
	        }
	        responseReceived = 0;
	*/

		InitialConfigBg95();
 800028c:	f000 f96c 	bl	8000568 <InitialConfigBg95>
		ConfigPdpContext();
 8000290:	f000 fb3a 	bl	8000908 <ConfigPdpContext>
		ActivePdp();
 8000294:	f000 fc24 	bl	8000ae0 <ActivePdp>
		ConfigMqttContext();
 8000298:	f000 fbae 	bl	80009f8 <ConfigMqttContext>
		MqttConfigBeforeConnection();
 800029c:	f000 fcd4 	bl	8000c48 <MqttConfigBeforeConnection>
		MqttConnectAndSubscribe();
 80002a0:	f000 fc78 	bl	8000b94 <MqttConnectAndSubscribe>
		HAL_Delay(10000);
 80002a4:	4b04      	ldr	r3, [pc, #16]	@ (80002b8 <main+0x74>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f001 f82c 	bl	8001304 <HAL_Delay>

		EnterSleepMode();
 80002ac:	f000 fd40 	bl	8000d30 <EnterSleepMode>
		InitialConfigBg95();
 80002b0:	46c0      	nop			@ (mov r8, r8)
 80002b2:	e7eb      	b.n	800028c <main+0x48>
 80002b4:	40021000 	.word	0x40021000
 80002b8:	00002710 	.word	0x00002710

080002bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002bc:	b590      	push	{r4, r7, lr}
 80002be:	b08d      	sub	sp, #52	@ 0x34
 80002c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c2:	2414      	movs	r4, #20
 80002c4:	193b      	adds	r3, r7, r4
 80002c6:	0018      	movs	r0, r3
 80002c8:	231c      	movs	r3, #28
 80002ca:	001a      	movs	r2, r3
 80002cc:	2100      	movs	r1, #0
 80002ce:	f004 fe67 	bl	8004fa0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d2:	003b      	movs	r3, r7
 80002d4:	0018      	movs	r0, r3
 80002d6:	2314      	movs	r3, #20
 80002d8:	001a      	movs	r2, r3
 80002da:	2100      	movs	r1, #0
 80002dc:	f004 fe60 	bl	8004fa0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	220a      	movs	r2, #10
 80002e4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2280      	movs	r2, #128	@ 0x80
 80002ea:	0052      	lsls	r2, r2, #1
 80002ec:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ee:	193b      	adds	r3, r7, r4
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f4:	193b      	adds	r3, r7, r4
 80002f6:	2240      	movs	r2, #64	@ 0x40
 80002f8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2201      	movs	r2, #1
 80002fe:	619a      	str	r2, [r3, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	193b      	adds	r3, r7, r4
 8000302:	0018      	movs	r0, r3
 8000304:	f001 fb94 	bl	8001a30 <HAL_RCC_OscConfig>
 8000308:	1e03      	subs	r3, r0, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800030c:	f000 fdaa 	bl	8000e64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	003b      	movs	r3, r7
 8000312:	2207      	movs	r2, #7
 8000314:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000316:	003b      	movs	r3, r7
 8000318:	2200      	movs	r2, #0
 800031a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	003b      	movs	r3, r7
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000322:	003b      	movs	r3, r7
 8000324:	2200      	movs	r2, #0
 8000326:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000328:	003b      	movs	r3, r7
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032e:	003b      	movs	r3, r7
 8000330:	2101      	movs	r1, #1
 8000332:	0018      	movs	r0, r3
 8000334:	f001 fd60 	bl	8001df8 <HAL_RCC_ClockConfig>
 8000338:	1e03      	subs	r3, r0, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800033c:	f000 fd92 	bl	8000e64 <Error_Handler>
  }
}
 8000340:	46c0      	nop			@ (mov r8, r8)
 8000342:	46bd      	mov	sp, r7
 8000344:	b00d      	add	sp, #52	@ 0x34
 8000346:	bd90      	pop	{r4, r7, pc}

08000348 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b090      	sub	sp, #64	@ 0x40
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800034e:	232c      	movs	r3, #44	@ 0x2c
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	0018      	movs	r0, r3
 8000354:	2314      	movs	r3, #20
 8000356:	001a      	movs	r2, r3
 8000358:	2100      	movs	r1, #0
 800035a:	f004 fe21 	bl	8004fa0 <memset>
  RTC_DateTypeDef sDate = {0};
 800035e:	2328      	movs	r3, #40	@ 0x28
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000366:	003b      	movs	r3, r7
 8000368:	0018      	movs	r0, r3
 800036a:	2328      	movs	r3, #40	@ 0x28
 800036c:	001a      	movs	r2, r3
 800036e:	2100      	movs	r1, #0
 8000370:	f004 fe16 	bl	8004fa0 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000374:	4b44      	ldr	r3, [pc, #272]	@ (8000488 <MX_RTC_Init+0x140>)
 8000376:	4a45      	ldr	r2, [pc, #276]	@ (800048c <MX_RTC_Init+0x144>)
 8000378:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800037a:	4b43      	ldr	r3, [pc, #268]	@ (8000488 <MX_RTC_Init+0x140>)
 800037c:	2200      	movs	r2, #0
 800037e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000380:	4b41      	ldr	r3, [pc, #260]	@ (8000488 <MX_RTC_Init+0x140>)
 8000382:	227f      	movs	r2, #127	@ 0x7f
 8000384:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000386:	4b40      	ldr	r3, [pc, #256]	@ (8000488 <MX_RTC_Init+0x140>)
 8000388:	22ff      	movs	r2, #255	@ 0xff
 800038a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800038c:	4b3e      	ldr	r3, [pc, #248]	@ (8000488 <MX_RTC_Init+0x140>)
 800038e:	2200      	movs	r2, #0
 8000390:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000392:	4b3d      	ldr	r3, [pc, #244]	@ (8000488 <MX_RTC_Init+0x140>)
 8000394:	2200      	movs	r2, #0
 8000396:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000398:	4b3b      	ldr	r3, [pc, #236]	@ (8000488 <MX_RTC_Init+0x140>)
 800039a:	2200      	movs	r2, #0
 800039c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800039e:	4b3a      	ldr	r3, [pc, #232]	@ (8000488 <MX_RTC_Init+0x140>)
 80003a0:	2280      	movs	r2, #128	@ 0x80
 80003a2:	05d2      	lsls	r2, r2, #23
 80003a4:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003a6:	4b38      	ldr	r3, [pc, #224]	@ (8000488 <MX_RTC_Init+0x140>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003ac:	4b36      	ldr	r3, [pc, #216]	@ (8000488 <MX_RTC_Init+0x140>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f001 ff9e 	bl	80022f0 <HAL_RTC_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80003b8:	f000 fd54 	bl	8000e64 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003bc:	212c      	movs	r1, #44	@ 0x2c
 80003be:	187b      	adds	r3, r7, r1
 80003c0:	2200      	movs	r2, #0
 80003c2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003c4:	187b      	adds	r3, r7, r1
 80003c6:	2200      	movs	r2, #0
 80003c8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003ca:	187b      	adds	r3, r7, r1
 80003cc:	2200      	movs	r2, #0
 80003ce:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80003d0:	187b      	adds	r3, r7, r1
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003d6:	187b      	adds	r3, r7, r1
 80003d8:	2200      	movs	r2, #0
 80003da:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003dc:	187b      	adds	r3, r7, r1
 80003de:	2200      	movs	r2, #0
 80003e0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003e2:	1879      	adds	r1, r7, r1
 80003e4:	4b28      	ldr	r3, [pc, #160]	@ (8000488 <MX_RTC_Init+0x140>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	0018      	movs	r0, r3
 80003ea:	f002 f80f 	bl	800240c <HAL_RTC_SetTime>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80003f2:	f000 fd37 	bl	8000e64 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003f6:	2128      	movs	r1, #40	@ 0x28
 80003f8:	187b      	adds	r3, r7, r1
 80003fa:	2201      	movs	r2, #1
 80003fc:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003fe:	187b      	adds	r3, r7, r1
 8000400:	2201      	movs	r2, #1
 8000402:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000404:	187b      	adds	r3, r7, r1
 8000406:	2201      	movs	r2, #1
 8000408:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 800040a:	187b      	adds	r3, r7, r1
 800040c:	2200      	movs	r2, #0
 800040e:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000410:	1879      	adds	r1, r7, r1
 8000412:	4b1d      	ldr	r3, [pc, #116]	@ (8000488 <MX_RTC_Init+0x140>)
 8000414:	2201      	movs	r2, #1
 8000416:	0018      	movs	r0, r3
 8000418:	f002 f8fc 	bl	8002614 <HAL_RTC_SetDate>
 800041c:	1e03      	subs	r3, r0, #0
 800041e:	d001      	beq.n	8000424 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 8000420:	f000 fd20 	bl	8000e64 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000424:	003b      	movs	r3, r7
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800042a:	003b      	movs	r3, r7
 800042c:	2200      	movs	r2, #0
 800042e:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8000430:	003b      	movs	r3, r7
 8000432:	2200      	movs	r2, #0
 8000434:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000436:	003b      	movs	r3, r7
 8000438:	2200      	movs	r2, #0
 800043a:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800043c:	003b      	movs	r3, r7
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000442:	003b      	movs	r3, r7
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000448:	003b      	movs	r3, r7
 800044a:	2200      	movs	r2, #0
 800044c:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800044e:	003b      	movs	r3, r7
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000454:	003b      	movs	r3, r7
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 800045a:	003b      	movs	r3, r7
 800045c:	2220      	movs	r2, #32
 800045e:	2101      	movs	r1, #1
 8000460:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 8000462:	003b      	movs	r3, r7
 8000464:	2280      	movs	r2, #128	@ 0x80
 8000466:	0052      	lsls	r2, r2, #1
 8000468:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800046a:	0039      	movs	r1, r7
 800046c:	4b06      	ldr	r3, [pc, #24]	@ (8000488 <MX_RTC_Init+0x140>)
 800046e:	2201      	movs	r2, #1
 8000470:	0018      	movs	r0, r3
 8000472:	f002 f9af 	bl	80027d4 <HAL_RTC_SetAlarm_IT>
 8000476:	1e03      	subs	r3, r0, #0
 8000478:	d001      	beq.n	800047e <MX_RTC_Init+0x136>
  {
    Error_Handler();
 800047a:	f000 fcf3 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800047e:	46c0      	nop			@ (mov r8, r8)
 8000480:	46bd      	mov	sp, r7
 8000482:	b010      	add	sp, #64	@ 0x40
 8000484:	bd80      	pop	{r7, pc}
 8000486:	46c0      	nop			@ (mov r8, r8)
 8000488:	20000084 	.word	0x20000084
 800048c:	40002800 	.word	0x40002800

08000490 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000494:	4b16      	ldr	r3, [pc, #88]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 8000496:	4a17      	ldr	r2, [pc, #92]	@ (80004f4 <MX_USART2_UART_Init+0x64>)
 8000498:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800049a:	4b15      	ldr	r3, [pc, #84]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 800049c:	22e1      	movs	r2, #225	@ 0xe1
 800049e:	0252      	lsls	r2, r2, #9
 80004a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004a2:	4b13      	ldr	r3, [pc, #76]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a8:	4b11      	ldr	r3, [pc, #68]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ae:	4b10      	ldr	r3, [pc, #64]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b4:	4b0e      	ldr	r3, [pc, #56]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004b6:	220c      	movs	r2, #12
 80004b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004ba:	4b0d      	ldr	r3, [pc, #52]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004bc:	2200      	movs	r2, #0
 80004be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004c0:	4b0b      	ldr	r3, [pc, #44]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c6:	4b0a      	ldr	r3, [pc, #40]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004cc:	4b08      	ldr	r3, [pc, #32]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004d2:	4b07      	ldr	r3, [pc, #28]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d8:	4b05      	ldr	r3, [pc, #20]	@ (80004f0 <MX_USART2_UART_Init+0x60>)
 80004da:	0018      	movs	r0, r3
 80004dc:	f002 fbfc 	bl	8002cd8 <HAL_UART_Init>
 80004e0:	1e03      	subs	r3, r0, #0
 80004e2:	d001      	beq.n	80004e8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004e4:	f000 fcbe 	bl	8000e64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e8:	46c0      	nop			@ (mov r8, r8)
 80004ea:	46bd      	mov	sp, r7
 80004ec:	bd80      	pop	{r7, pc}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	200000ac 	.word	0x200000ac
 80004f4:	40004400 	.word	0x40004400

080004f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000500:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000502:	4b0d      	ldr	r3, [pc, #52]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000504:	2104      	movs	r1, #4
 8000506:	430a      	orrs	r2, r1
 8000508:	635a      	str	r2, [r3, #52]	@ 0x34
 800050a:	4b0b      	ldr	r3, [pc, #44]	@ (8000538 <MX_GPIO_Init+0x40>)
 800050c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050e:	2204      	movs	r2, #4
 8000510:	4013      	ands	r3, r2
 8000512:	607b      	str	r3, [r7, #4]
 8000514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000516:	4b08      	ldr	r3, [pc, #32]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000518:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800051a:	4b07      	ldr	r3, [pc, #28]	@ (8000538 <MX_GPIO_Init+0x40>)
 800051c:	2101      	movs	r1, #1
 800051e:	430a      	orrs	r2, r1
 8000520:	635a      	str	r2, [r3, #52]	@ 0x34
 8000522:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <MX_GPIO_Init+0x40>)
 8000524:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000526:	2201      	movs	r2, #1
 8000528:	4013      	ands	r3, r2
 800052a:	603b      	str	r3, [r7, #0]
 800052c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052e:	46c0      	nop			@ (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	40021000 	.word	0x40021000

0800053c <sendATCommand>:

/* USER CODE BEGIN 4 */
void sendATCommand(char* command) {
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	0018      	movs	r0, r3
 8000548:	f7ff fdde 	bl	8000108 <strlen>
 800054c:	0003      	movs	r3, r0
 800054e:	b29a      	uxth	r2, r3
 8000550:	2301      	movs	r3, #1
 8000552:	425b      	negs	r3, r3
 8000554:	6879      	ldr	r1, [r7, #4]
 8000556:	4803      	ldr	r0, [pc, #12]	@ (8000564 <sendATCommand+0x28>)
 8000558:	f002 fc14 	bl	8002d84 <HAL_UART_Transmit>
}
 800055c:	46c0      	nop			@ (mov r8, r8)
 800055e:	46bd      	mov	sp, r7
 8000560:	b002      	add	sp, #8
 8000562:	bd80      	pop	{r7, pc}
 8000564:	200000ac 	.word	0x200000ac

08000568 <InitialConfigBg95>:
void receiveResponse(char* buffer, uint16_t bufferSize) {
    HAL_UART_Receive(&huart2, (uint8_t*)buffer, bufferSize, HAL_MAX_DELAY);
}


void InitialConfigBg95() {
 8000568:	b590      	push	{r4, r7, lr}
 800056a:	b0c5      	sub	sp, #276	@ 0x114
 800056c:	af00      	add	r7, sp, #0
    char response[128];   // Buffer temporário para respostas AT
    char ip[16];          // Buffer para armazenar o endereço IP
    char command[128];    // Buffer para os comandos AT
    sendATCommand("AT+CCID\r\n");
 800056e:	4bd0      	ldr	r3, [pc, #832]	@ (80008b0 <InitialConfigBg95+0x348>)
 8000570:	0018      	movs	r0, r3
 8000572:	f7ff ffe3 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000576:	e00a      	b.n	800058e <InitialConfigBg95+0x26>
	    sendATCommand("AT+CCID\r\n");
 8000578:	4bcd      	ldr	r3, [pc, #820]	@ (80008b0 <InitialConfigBg95+0x348>)
 800057a:	0018      	movs	r0, r3
 800057c:	f7ff ffde 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000580:	2380      	movs	r3, #128	@ 0x80
 8000582:	005a      	lsls	r2, r3, #1
 8000584:	49cb      	ldr	r1, [pc, #812]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000586:	4bcc      	ldr	r3, [pc, #816]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fc9f 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 800058e:	4bcb      	ldr	r3, [pc, #812]	@ (80008bc <InitialConfigBg95+0x354>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d0ef      	beq.n	8000578 <InitialConfigBg95+0x10>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000598:	4bc8      	ldr	r3, [pc, #800]	@ (80008bc <InitialConfigBg95+0x354>)
 800059a:	2200      	movs	r2, #0
 800059c:	701a      	strb	r2, [r3, #0]
    // Comando AT+CIMI
    sendATCommand("AT+CIMI\r\n");
 800059e:	4bc8      	ldr	r3, [pc, #800]	@ (80008c0 <InitialConfigBg95+0x358>)
 80005a0:	0018      	movs	r0, r3
 80005a2:	f7ff ffcb 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80005a6:	e00a      	b.n	80005be <InitialConfigBg95+0x56>
    		sendATCommand("AT+CIMI\r\n");
 80005a8:	4bc5      	ldr	r3, [pc, #788]	@ (80008c0 <InitialConfigBg95+0x358>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff ffc6 	bl	800053c <sendATCommand>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80005b0:	2380      	movs	r3, #128	@ 0x80
 80005b2:	005a      	lsls	r2, r3, #1
 80005b4:	49bf      	ldr	r1, [pc, #764]	@ (80008b4 <InitialConfigBg95+0x34c>)
 80005b6:	4bc0      	ldr	r3, [pc, #768]	@ (80008b8 <InitialConfigBg95+0x350>)
 80005b8:	0018      	movs	r0, r3
 80005ba:	f002 fc87 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80005be:	4bbf      	ldr	r3, [pc, #764]	@ (80008bc <InitialConfigBg95+0x354>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d0ef      	beq.n	80005a8 <InitialConfigBg95+0x40>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 80005c8:	4bbc      	ldr	r3, [pc, #752]	@ (80008bc <InitialConfigBg95+0x354>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	701a      	strb	r2, [r3, #0]

    // Comando AT+CFUN=0
    sendATCommand("AT+CFUN=0\r\n");
 80005ce:	4bbd      	ldr	r3, [pc, #756]	@ (80008c4 <InitialConfigBg95+0x35c>)
 80005d0:	0018      	movs	r0, r3
 80005d2:	f7ff ffb3 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80005d6:	e00a      	b.n	80005ee <InitialConfigBg95+0x86>
        	sendATCommand("AT+CFUN=0\r\n");
 80005d8:	4bba      	ldr	r3, [pc, #744]	@ (80008c4 <InitialConfigBg95+0x35c>)
 80005da:	0018      	movs	r0, r3
 80005dc:	f7ff ffae 	bl	800053c <sendATCommand>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80005e0:	2380      	movs	r3, #128	@ 0x80
 80005e2:	005a      	lsls	r2, r3, #1
 80005e4:	49b3      	ldr	r1, [pc, #716]	@ (80008b4 <InitialConfigBg95+0x34c>)
 80005e6:	4bb4      	ldr	r3, [pc, #720]	@ (80008b8 <InitialConfigBg95+0x350>)
 80005e8:	0018      	movs	r0, r3
 80005ea:	f002 fc6f 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80005ee:	4bb3      	ldr	r3, [pc, #716]	@ (80008bc <InitialConfigBg95+0x354>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0ef      	beq.n	80005d8 <InitialConfigBg95+0x70>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 80005f8:	4bb0      	ldr	r3, [pc, #704]	@ (80008bc <InitialConfigBg95+0x354>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	701a      	strb	r2, [r3, #0]

    // Comando AT+QCFG="nwscanmode",0,1
    sendATCommand("AT+QCFG=\"nwscanmode\",0,1\r\n");
 80005fe:	4bb2      	ldr	r3, [pc, #712]	@ (80008c8 <InitialConfigBg95+0x360>)
 8000600:	0018      	movs	r0, r3
 8000602:	f7ff ff9b 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000606:	e00a      	b.n	800061e <InitialConfigBg95+0xb6>
	    sendATCommand("AT+QCFG=\"nwscanmode\",0,1\r\n");
 8000608:	4baf      	ldr	r3, [pc, #700]	@ (80008c8 <InitialConfigBg95+0x360>)
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff ff96 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000610:	2380      	movs	r3, #128	@ 0x80
 8000612:	005a      	lsls	r2, r3, #1
 8000614:	49a7      	ldr	r1, [pc, #668]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000616:	4ba8      	ldr	r3, [pc, #672]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000618:	0018      	movs	r0, r3
 800061a:	f002 fc57 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 800061e:	4ba7      	ldr	r3, [pc, #668]	@ (80008bc <InitialConfigBg95+0x354>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	b2db      	uxtb	r3, r3
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0ef      	beq.n	8000608 <InitialConfigBg95+0xa0>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000628:	4ba4      	ldr	r3, [pc, #656]	@ (80008bc <InitialConfigBg95+0x354>)
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]

    // Comando AT+QCFG="nwscanseq",020103,1
    sendATCommand("AT+QCFG=\"nwscanseq\",020103,1\r\n");
 800062e:	4ba7      	ldr	r3, [pc, #668]	@ (80008cc <InitialConfigBg95+0x364>)
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff ff83 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000636:	e00a      	b.n	800064e <InitialConfigBg95+0xe6>
	    sendATCommand("AT+QCFG=\"nwscanseq\",020103,1\r\n");
 8000638:	4ba4      	ldr	r3, [pc, #656]	@ (80008cc <InitialConfigBg95+0x364>)
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ff7e 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000640:	2380      	movs	r3, #128	@ 0x80
 8000642:	005a      	lsls	r2, r3, #1
 8000644:	499b      	ldr	r1, [pc, #620]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000646:	4b9c      	ldr	r3, [pc, #624]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000648:	0018      	movs	r0, r3
 800064a:	f002 fc3f 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 800064e:	4b9b      	ldr	r3, [pc, #620]	@ (80008bc <InitialConfigBg95+0x354>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	b2db      	uxtb	r3, r3
 8000654:	2b00      	cmp	r3, #0
 8000656:	d0ef      	beq.n	8000638 <InitialConfigBg95+0xd0>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000658:	4b98      	ldr	r3, [pc, #608]	@ (80008bc <InitialConfigBg95+0x354>)
 800065a:	2200      	movs	r2, #0
 800065c:	701a      	strb	r2, [r3, #0]

    // Comando AT+QCFG="band",0,0
    sendATCommand("AT+QCFG=\"band\",0,0\r\n");
 800065e:	4b9c      	ldr	r3, [pc, #624]	@ (80008d0 <InitialConfigBg95+0x368>)
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ff6b 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000666:	e00a      	b.n	800067e <InitialConfigBg95+0x116>
	    sendATCommand("AT+QCFG=\"band\",0,0\r\n");
 8000668:	4b99      	ldr	r3, [pc, #612]	@ (80008d0 <InitialConfigBg95+0x368>)
 800066a:	0018      	movs	r0, r3
 800066c:	f7ff ff66 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000670:	2380      	movs	r3, #128	@ 0x80
 8000672:	005a      	lsls	r2, r3, #1
 8000674:	498f      	ldr	r1, [pc, #572]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000676:	4b90      	ldr	r3, [pc, #576]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000678:	0018      	movs	r0, r3
 800067a:	f002 fc27 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 800067e:	4b8f      	ldr	r3, [pc, #572]	@ (80008bc <InitialConfigBg95+0x354>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d0ef      	beq.n	8000668 <InitialConfigBg95+0x100>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000688:	4b8c      	ldr	r3, [pc, #560]	@ (80008bc <InitialConfigBg95+0x354>)
 800068a:	2200      	movs	r2, #0
 800068c:	701a      	strb	r2, [r3, #0]


    // Comando AT+COPS=0
    sendATCommand("AT+COPS=0\r\n");
 800068e:	4b91      	ldr	r3, [pc, #580]	@ (80008d4 <InitialConfigBg95+0x36c>)
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff ff53 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000696:	e00a      	b.n	80006ae <InitialConfigBg95+0x146>
        	sendATCommand("AT+COPS=0\r\n");
 8000698:	4b8e      	ldr	r3, [pc, #568]	@ (80008d4 <InitialConfigBg95+0x36c>)
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff ff4e 	bl	800053c <sendATCommand>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	005a      	lsls	r2, r3, #1
 80006a4:	4983      	ldr	r1, [pc, #524]	@ (80008b4 <InitialConfigBg95+0x34c>)
 80006a6:	4b84      	ldr	r3, [pc, #528]	@ (80008b8 <InitialConfigBg95+0x350>)
 80006a8:	0018      	movs	r0, r3
 80006aa:	f002 fc0f 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80006ae:	4b83      	ldr	r3, [pc, #524]	@ (80008bc <InitialConfigBg95+0x354>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d0ef      	beq.n	8000698 <InitialConfigBg95+0x130>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 80006b8:	4b80      	ldr	r3, [pc, #512]	@ (80008bc <InitialConfigBg95+0x354>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]

    // Configurar o APN, username e password para a Vivo
    sendATCommand("AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"datatem\",\"datatem\"\r\n");
 80006be:	4b86      	ldr	r3, [pc, #536]	@ (80008d8 <InitialConfigBg95+0x370>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f7ff ff3b 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 80006c6:	e00a      	b.n	80006de <InitialConfigBg95+0x176>
	    sendATCommand("AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"datatem\",\"datatem\"\r\n");
 80006c8:	4b83      	ldr	r3, [pc, #524]	@ (80008d8 <InitialConfigBg95+0x370>)
 80006ca:	0018      	movs	r0, r3
 80006cc:	f7ff ff36 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80006d0:	2380      	movs	r3, #128	@ 0x80
 80006d2:	005a      	lsls	r2, r3, #1
 80006d4:	4977      	ldr	r1, [pc, #476]	@ (80008b4 <InitialConfigBg95+0x34c>)
 80006d6:	4b78      	ldr	r3, [pc, #480]	@ (80008b8 <InitialConfigBg95+0x350>)
 80006d8:	0018      	movs	r0, r3
 80006da:	f002 fbf7 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 80006de:	4b77      	ldr	r3, [pc, #476]	@ (80008bc <InitialConfigBg95+0x354>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d0ef      	beq.n	80006c8 <InitialConfigBg95+0x160>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 80006e8:	4b74      	ldr	r3, [pc, #464]	@ (80008bc <InitialConfigBg95+0x354>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	701a      	strb	r2, [r3, #0]

    // Comando AT+CFUN=1
    sendATCommand("AT+CFUN=1\r\n");
 80006ee:	4b7b      	ldr	r3, [pc, #492]	@ (80008dc <InitialConfigBg95+0x374>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ff23 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 80006f6:	e00a      	b.n	800070e <InitialConfigBg95+0x1a6>
	    sendATCommand("AT+CFUN=1\r\n");
 80006f8:	4b78      	ldr	r3, [pc, #480]	@ (80008dc <InitialConfigBg95+0x374>)
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff ff1e 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000700:	2380      	movs	r3, #128	@ 0x80
 8000702:	005a      	lsls	r2, r3, #1
 8000704:	496b      	ldr	r1, [pc, #428]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000706:	4b6c      	ldr	r3, [pc, #432]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000708:	0018      	movs	r0, r3
 800070a:	f002 fbdf 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 800070e:	4b6b      	ldr	r3, [pc, #428]	@ (80008bc <InitialConfigBg95+0x354>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	b2db      	uxtb	r3, r3
 8000714:	2b00      	cmp	r3, #0
 8000716:	d0ef      	beq.n	80006f8 <InitialConfigBg95+0x190>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000718:	4b68      	ldr	r3, [pc, #416]	@ (80008bc <InitialConfigBg95+0x354>)
 800071a:	2200      	movs	r2, #0
 800071c:	701a      	strb	r2, [r3, #0]

    // Comando AT+CREG=1;+CGREG=1;+CEREG=1
    sendATCommand("AT+CREG=1;+CGREG=1;+CEREG=1\r\n");
 800071e:	4b70      	ldr	r3, [pc, #448]	@ (80008e0 <InitialConfigBg95+0x378>)
 8000720:	0018      	movs	r0, r3
 8000722:	f7ff ff0b 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000726:	e00a      	b.n	800073e <InitialConfigBg95+0x1d6>
    		sendATCommand("AT+CREG=1;+CGREG=1;+CEREG=1\r\n");
 8000728:	4b6d      	ldr	r3, [pc, #436]	@ (80008e0 <InitialConfigBg95+0x378>)
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff ff06 	bl	800053c <sendATCommand>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000730:	2380      	movs	r3, #128	@ 0x80
 8000732:	005a      	lsls	r2, r3, #1
 8000734:	495f      	ldr	r1, [pc, #380]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000736:	4b60      	ldr	r3, [pc, #384]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000738:	0018      	movs	r0, r3
 800073a:	f002 fbc7 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 800073e:	4b5f      	ldr	r3, [pc, #380]	@ (80008bc <InitialConfigBg95+0x354>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2b00      	cmp	r3, #0
 8000746:	d0ef      	beq.n	8000728 <InitialConfigBg95+0x1c0>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000748:	4b5c      	ldr	r3, [pc, #368]	@ (80008bc <InitialConfigBg95+0x354>)
 800074a:	2200      	movs	r2, #0
 800074c:	701a      	strb	r2, [r3, #0]

    // Comando AT+COPS?
    sendATCommand("AT+COPS?\r\n");
 800074e:	4b65      	ldr	r3, [pc, #404]	@ (80008e4 <InitialConfigBg95+0x37c>)
 8000750:	0018      	movs	r0, r3
 8000752:	f7ff fef3 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000756:	e00a      	b.n	800076e <InitialConfigBg95+0x206>
	    sendATCommand("AT+COPS?\r\n");
 8000758:	4b62      	ldr	r3, [pc, #392]	@ (80008e4 <InitialConfigBg95+0x37c>)
 800075a:	0018      	movs	r0, r3
 800075c:	f7ff feee 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000760:	2380      	movs	r3, #128	@ 0x80
 8000762:	005a      	lsls	r2, r3, #1
 8000764:	4953      	ldr	r1, [pc, #332]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000766:	4b54      	ldr	r3, [pc, #336]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000768:	0018      	movs	r0, r3
 800076a:	f002 fbaf 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 800076e:	4b53      	ldr	r3, [pc, #332]	@ (80008bc <InitialConfigBg95+0x354>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b2db      	uxtb	r3, r3
 8000774:	2b00      	cmp	r3, #0
 8000776:	d0ef      	beq.n	8000758 <InitialConfigBg95+0x1f0>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000778:	4b50      	ldr	r3, [pc, #320]	@ (80008bc <InitialConfigBg95+0x354>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]

    // Comando AT+QCSQ
    sendATCommand("AT+QCSQ\r\n");
 800077e:	4b5a      	ldr	r3, [pc, #360]	@ (80008e8 <InitialConfigBg95+0x380>)
 8000780:	0018      	movs	r0, r3
 8000782:	f7ff fedb 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000786:	e00a      	b.n	800079e <InitialConfigBg95+0x236>
        	sendATCommand("AT+QCSQ\r\n");
 8000788:	4b57      	ldr	r3, [pc, #348]	@ (80008e8 <InitialConfigBg95+0x380>)
 800078a:	0018      	movs	r0, r3
 800078c:	f7ff fed6 	bl	800053c <sendATCommand>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000790:	2380      	movs	r3, #128	@ 0x80
 8000792:	005a      	lsls	r2, r3, #1
 8000794:	4947      	ldr	r1, [pc, #284]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000796:	4b48      	ldr	r3, [pc, #288]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000798:	0018      	movs	r0, r3
 800079a:	f002 fb97 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 800079e:	4b47      	ldr	r3, [pc, #284]	@ (80008bc <InitialConfigBg95+0x354>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d0ef      	beq.n	8000788 <InitialConfigBg95+0x220>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 80007a8:	4b44      	ldr	r3, [pc, #272]	@ (80008bc <InitialConfigBg95+0x354>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	701a      	strb	r2, [r3, #0]

    // Comando AT+CREG?;+CEREG?;+CGREG?
    sendATCommand("AT+CREG?;+CEREG?;+CGREG?\r\n");
 80007ae:	4b4f      	ldr	r3, [pc, #316]	@ (80008ec <InitialConfigBg95+0x384>)
 80007b0:	0018      	movs	r0, r3
 80007b2:	f7ff fec3 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80007b6:	e00a      	b.n	80007ce <InitialConfigBg95+0x266>
    	 	sendATCommand("AT+CREG?;+CEREG?;+CGREG?\r\n");
 80007b8:	4b4c      	ldr	r3, [pc, #304]	@ (80008ec <InitialConfigBg95+0x384>)
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff febe 	bl	800053c <sendATCommand>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	005a      	lsls	r2, r3, #1
 80007c4:	493b      	ldr	r1, [pc, #236]	@ (80008b4 <InitialConfigBg95+0x34c>)
 80007c6:	4b3c      	ldr	r3, [pc, #240]	@ (80008b8 <InitialConfigBg95+0x350>)
 80007c8:	0018      	movs	r0, r3
 80007ca:	f002 fb7f 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80007ce:	4b3b      	ldr	r3, [pc, #236]	@ (80008bc <InitialConfigBg95+0x354>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d0ef      	beq.n	80007b8 <InitialConfigBg95+0x250>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 80007d8:	4b38      	ldr	r3, [pc, #224]	@ (80008bc <InitialConfigBg95+0x354>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]

    // Comando AT+CGATT=1 (Conectar à rede)
    sendATCommand("AT+CGATT=1\r\n");
 80007de:	4b44      	ldr	r3, [pc, #272]	@ (80008f0 <InitialConfigBg95+0x388>)
 80007e0:	0018      	movs	r0, r3
 80007e2:	f7ff feab 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 80007e6:	e00a      	b.n	80007fe <InitialConfigBg95+0x296>
        		sendATCommand("AT+CGATT=1\r\n");
 80007e8:	4b41      	ldr	r3, [pc, #260]	@ (80008f0 <InitialConfigBg95+0x388>)
 80007ea:	0018      	movs	r0, r3
 80007ec:	f7ff fea6 	bl	800053c <sendATCommand>
           		HAL_UART_Receive_IT(&huart2, responseBuffer,
 80007f0:	2380      	movs	r3, #128	@ 0x80
 80007f2:	005a      	lsls	r2, r3, #1
 80007f4:	492f      	ldr	r1, [pc, #188]	@ (80008b4 <InitialConfigBg95+0x34c>)
 80007f6:	4b30      	ldr	r3, [pc, #192]	@ (80008b8 <InitialConfigBg95+0x350>)
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 fb67 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80007fe:	4b2f      	ldr	r3, [pc, #188]	@ (80008bc <InitialConfigBg95+0x354>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	2b00      	cmp	r3, #0
 8000806:	d0ef      	beq.n	80007e8 <InitialConfigBg95+0x280>
           		RESPONSE_BUFFER_SIZE);
           	}
           	responseReceived = 0;
 8000808:	4b2c      	ldr	r3, [pc, #176]	@ (80008bc <InitialConfigBg95+0x354>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]

    // Verificar o endereço IP alocado
    sendATCommand("AT+CGPADDR\r\n");
 800080e:	4b39      	ldr	r3, [pc, #228]	@ (80008f4 <InitialConfigBg95+0x38c>)
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff fe93 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000816:	e00a      	b.n	800082e <InitialConfigBg95+0x2c6>
		sendATCommand("AT+CGPADDR\r\n");
 8000818:	4b36      	ldr	r3, [pc, #216]	@ (80008f4 <InitialConfigBg95+0x38c>)
 800081a:	0018      	movs	r0, r3
 800081c:	f7ff fe8e 	bl	800053c <sendATCommand>

		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000820:	2380      	movs	r3, #128	@ 0x80
 8000822:	005a      	lsls	r2, r3, #1
 8000824:	4923      	ldr	r1, [pc, #140]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000826:	4b24      	ldr	r3, [pc, #144]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000828:	0018      	movs	r0, r3
 800082a:	f002 fb4f 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 800082e:	4b23      	ldr	r3, [pc, #140]	@ (80008bc <InitialConfigBg95+0x354>)
 8000830:	781b      	ldrb	r3, [r3, #0]
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d0ef      	beq.n	8000818 <InitialConfigBg95+0x2b0>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000838:	4b20      	ldr	r3, [pc, #128]	@ (80008bc <InitialConfigBg95+0x354>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]
    // Extrair o endereço IP da resposta
    if (sscanf(responseBuffer, "+CGPADDR: 1,\"%15[^\"]", ip) == 1) {
 800083e:	2480      	movs	r4, #128	@ 0x80
 8000840:	193a      	adds	r2, r7, r4
 8000842:	492d      	ldr	r1, [pc, #180]	@ (80008f8 <InitialConfigBg95+0x390>)
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <InitialConfigBg95+0x34c>)
 8000846:	0018      	movs	r0, r3
 8000848:	f004 fa94 	bl	8004d74 <siscanf>
 800084c:	0003      	movs	r3, r0
 800084e:	2b01      	cmp	r3, #1
 8000850:	d106      	bne.n	8000860 <InitialConfigBg95+0x2f8>
        printf("Endereço IP alocado: %s\n", ip); // Exibir o IP
 8000852:	193a      	adds	r2, r7, r4
 8000854:	4b29      	ldr	r3, [pc, #164]	@ (80008fc <InitialConfigBg95+0x394>)
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f004 f9e7 	bl	8004c2c <iprintf>
 800085e:	e003      	b.n	8000868 <InitialConfigBg95+0x300>
    } else {
        printf("Falha ao obter o endereço IP.\n");
 8000860:	4b27      	ldr	r3, [pc, #156]	@ (8000900 <InitialConfigBg95+0x398>)
 8000862:	0018      	movs	r0, r3
 8000864:	f004 fa48 	bl	8004cf8 <puts>
    }

    // Realizar um teste de ping com o IP obtido
    snprintf(command, sizeof(command), "AT+QPING=1,\"%s\"\r\n", ip);
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	18fb      	adds	r3, r7, r3
 800086c:	4a25      	ldr	r2, [pc, #148]	@ (8000904 <InitialConfigBg95+0x39c>)
 800086e:	0038      	movs	r0, r7
 8000870:	2180      	movs	r1, #128	@ 0x80
 8000872:	f004 fa4b 	bl	8004d0c <sniprintf>
    sendATCommand(command);
 8000876:	003b      	movs	r3, r7
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff fe5f 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 800087e:	e00a      	b.n	8000896 <InitialConfigBg95+0x32e>
    		sendATCommand(command);
 8000880:	003b      	movs	r3, r7
 8000882:	0018      	movs	r0, r3
 8000884:	f7ff fe5a 	bl	800053c <sendATCommand>


    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000888:	2380      	movs	r3, #128	@ 0x80
 800088a:	005a      	lsls	r2, r3, #1
 800088c:	4909      	ldr	r1, [pc, #36]	@ (80008b4 <InitialConfigBg95+0x34c>)
 800088e:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <InitialConfigBg95+0x350>)
 8000890:	0018      	movs	r0, r3
 8000892:	f002 fb1b 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000896:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <InitialConfigBg95+0x354>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d0ef      	beq.n	8000880 <InitialConfigBg95+0x318>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <InitialConfigBg95+0x354>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
}
 80008a6:	46c0      	nop			@ (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b045      	add	sp, #276	@ 0x114
 80008ac:	bd90      	pop	{r4, r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	080067dc 	.word	0x080067dc
 80008b4:	20000140 	.word	0x20000140
 80008b8:	200000ac 	.word	0x200000ac
 80008bc:	20000240 	.word	0x20000240
 80008c0:	080067e8 	.word	0x080067e8
 80008c4:	080067f4 	.word	0x080067f4
 80008c8:	08006800 	.word	0x08006800
 80008cc:	0800681c 	.word	0x0800681c
 80008d0:	0800683c 	.word	0x0800683c
 80008d4:	08006854 	.word	0x08006854
 80008d8:	08006860 	.word	0x08006860
 80008dc:	0800689c 	.word	0x0800689c
 80008e0:	080068a8 	.word	0x080068a8
 80008e4:	080068c8 	.word	0x080068c8
 80008e8:	080068d4 	.word	0x080068d4
 80008ec:	080068e0 	.word	0x080068e0
 80008f0:	080068fc 	.word	0x080068fc
 80008f4:	0800690c 	.word	0x0800690c
 80008f8:	0800691c 	.word	0x0800691c
 80008fc:	08006934 	.word	0x08006934
 8000900:	08006950 	.word	0x08006950
 8000904:	08006970 	.word	0x08006970

08000908 <ConfigPdpContext>:


void ConfigPdpContext() {
 8000908:	b580      	push	{r7, lr}
 800090a:	b0e0      	sub	sp, #384	@ 0x180
 800090c:	af00      	add	r7, sp, #0
    char command[128];
    char response[256];

    // Configurar APN com o contexto CID 1, com login e senha
    snprintf(command, sizeof(command), "AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"\",0,0\r\n");
 800090e:	4a32      	ldr	r2, [pc, #200]	@ (80009d8 <ConfigPdpContext+0xd0>)
 8000910:	1c7b      	adds	r3, r7, #1
 8000912:	33ff      	adds	r3, #255	@ 0xff
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	0018      	movs	r0, r3
 8000918:	f004 f9f8 	bl	8004d0c <sniprintf>
    sendATCommand(command);
 800091c:	1c7b      	adds	r3, r7, #1
 800091e:	33ff      	adds	r3, #255	@ 0xff
 8000920:	0018      	movs	r0, r3
 8000922:	f7ff fe0b 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000926:	e00b      	b.n	8000940 <ConfigPdpContext+0x38>
	    sendATCommand(command);
 8000928:	1c7b      	adds	r3, r7, #1
 800092a:	33ff      	adds	r3, #255	@ 0xff
 800092c:	0018      	movs	r0, r3
 800092e:	f7ff fe05 	bl	800053c <sendATCommand>

		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000932:	2380      	movs	r3, #128	@ 0x80
 8000934:	005a      	lsls	r2, r3, #1
 8000936:	4929      	ldr	r1, [pc, #164]	@ (80009dc <ConfigPdpContext+0xd4>)
 8000938:	4b29      	ldr	r3, [pc, #164]	@ (80009e0 <ConfigPdpContext+0xd8>)
 800093a:	0018      	movs	r0, r3
 800093c:	f002 fac6 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000940:	4b28      	ldr	r3, [pc, #160]	@ (80009e4 <ConfigPdpContext+0xdc>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	b2db      	uxtb	r3, r3
 8000946:	2b00      	cmp	r3, #0
 8000948:	d0ee      	beq.n	8000928 <ConfigPdpContext+0x20>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 800094a:	4b26      	ldr	r3, [pc, #152]	@ (80009e4 <ConfigPdpContext+0xdc>)
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
    // Ativar o contexto PDP
    sendATCommand("AT+CGACT=1,1\r\n");
 8000950:	4b25      	ldr	r3, [pc, #148]	@ (80009e8 <ConfigPdpContext+0xe0>)
 8000952:	0018      	movs	r0, r3
 8000954:	f7ff fdf2 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000958:	e00a      	b.n	8000970 <ConfigPdpContext+0x68>
        	sendATCommand("AT+CGACT=1,1\r\n");
 800095a:	4b23      	ldr	r3, [pc, #140]	@ (80009e8 <ConfigPdpContext+0xe0>)
 800095c:	0018      	movs	r0, r3
 800095e:	f7ff fded 	bl	800053c <sendATCommand>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000962:	2380      	movs	r3, #128	@ 0x80
 8000964:	005a      	lsls	r2, r3, #1
 8000966:	491d      	ldr	r1, [pc, #116]	@ (80009dc <ConfigPdpContext+0xd4>)
 8000968:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <ConfigPdpContext+0xd8>)
 800096a:	0018      	movs	r0, r3
 800096c:	f002 faae 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000970:	4b1c      	ldr	r3, [pc, #112]	@ (80009e4 <ConfigPdpContext+0xdc>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d0ef      	beq.n	800095a <ConfigPdpContext+0x52>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 800097a:	4b1a      	ldr	r3, [pc, #104]	@ (80009e4 <ConfigPdpContext+0xdc>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
    // Verificar se o contexto PDP está ativo
    sendATCommand("AT+CGPADDR=1\r\n");
 8000980:	4b1a      	ldr	r3, [pc, #104]	@ (80009ec <ConfigPdpContext+0xe4>)
 8000982:	0018      	movs	r0, r3
 8000984:	f7ff fdda 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000988:	e00a      	b.n	80009a0 <ConfigPdpContext+0x98>
        		sendATCommand("AT+CGPADDR=1\r\n");
 800098a:	4b18      	ldr	r3, [pc, #96]	@ (80009ec <ConfigPdpContext+0xe4>)
 800098c:	0018      	movs	r0, r3
 800098e:	f7ff fdd5 	bl	800053c <sendATCommand>
        		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000992:	2380      	movs	r3, #128	@ 0x80
 8000994:	005a      	lsls	r2, r3, #1
 8000996:	4911      	ldr	r1, [pc, #68]	@ (80009dc <ConfigPdpContext+0xd4>)
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <ConfigPdpContext+0xd8>)
 800099a:	0018      	movs	r0, r3
 800099c:	f002 fa96 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 80009a0:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <ConfigPdpContext+0xdc>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d0ef      	beq.n	800098a <ConfigPdpContext+0x82>
        		RESPONSE_BUFFER_SIZE);
        	}
        	responseReceived = 0;
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <ConfigPdpContext+0xdc>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	701a      	strb	r2, [r3, #0]
    // Receber a resposta e verificar se contém o IP
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    if (strstr(responseBuffer, "0.0.0.0") == NULL) {
 80009b0:	4a0f      	ldr	r2, [pc, #60]	@ (80009f0 <ConfigPdpContext+0xe8>)
 80009b2:	4b0a      	ldr	r3, [pc, #40]	@ (80009dc <ConfigPdpContext+0xd4>)
 80009b4:	0011      	movs	r1, r2
 80009b6:	0018      	movs	r0, r3
 80009b8:	f004 fafa 	bl	8004fb0 <strstr>
 80009bc:	1e03      	subs	r3, r0, #0
 80009be:	d106      	bne.n	80009ce <ConfigPdpContext+0xc6>
        // Contexto PDP ativado com sucesso, IP foi alocado corretamente
        snprintf(command, sizeof(command), "PDP context ativado com sucesso. APN: inlog.vivo.com.br, IP: %s\r\n", response);
 80009c0:	003b      	movs	r3, r7
 80009c2:	4a0c      	ldr	r2, [pc, #48]	@ (80009f4 <ConfigPdpContext+0xec>)
 80009c4:	1c78      	adds	r0, r7, #1
 80009c6:	30ff      	adds	r0, #255	@ 0xff
 80009c8:	2180      	movs	r1, #128	@ 0x80
 80009ca:	f004 f99f 	bl	8004d0c <sniprintf>
       // sendATCommand(command); // Transmitir a mensagem de sucesso pela UART
    } else {
        // Erro ao ativar o contexto PDP
        //sendATCommand("Erro ao ativar o contexto PDP\r\n");
    }
}
 80009ce:	46c0      	nop			@ (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	b060      	add	sp, #384	@ 0x180
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	08006984 	.word	0x08006984
 80009dc:	20000140 	.word	0x20000140
 80009e0:	200000ac 	.word	0x200000ac
 80009e4:	20000240 	.word	0x20000240
 80009e8:	080069b4 	.word	0x080069b4
 80009ec:	080069c4 	.word	0x080069c4
 80009f0:	080069d4 	.word	0x080069d4
 80009f4:	080069dc 	.word	0x080069dc

080009f8 <ConfigMqttContext>:


void ConfigMqttContext() {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
    // Configurar a versão MQTT como 3.1.1
    sendATCommand("AT+QMTCFG=\"version\",0,4\r\n");
 80009fc:	4b31      	ldr	r3, [pc, #196]	@ (8000ac4 <ConfigMqttContext+0xcc>)
 80009fe:	0018      	movs	r0, r3
 8000a00:	f7ff fd9c 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000a04:	e00a      	b.n	8000a1c <ConfigMqttContext+0x24>
	    sendATCommand("AT+QMTCFG=\"version\",0,4\r\n");
 8000a06:	4b2f      	ldr	r3, [pc, #188]	@ (8000ac4 <ConfigMqttContext+0xcc>)
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff fd97 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000a0e:	2380      	movs	r3, #128	@ 0x80
 8000a10:	005a      	lsls	r2, r3, #1
 8000a12:	492d      	ldr	r1, [pc, #180]	@ (8000ac8 <ConfigMqttContext+0xd0>)
 8000a14:	4b2d      	ldr	r3, [pc, #180]	@ (8000acc <ConfigMqttContext+0xd4>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f002 fa58 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ad0 <ConfigMqttContext+0xd8>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d0ef      	beq.n	8000a06 <ConfigMqttContext+0xe>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000a26:	4b2a      	ldr	r3, [pc, #168]	@ (8000ad0 <ConfigMqttContext+0xd8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
    // Associar o contexto PDP ao cliente MQTT
    sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000a2c:	4b29      	ldr	r3, [pc, #164]	@ (8000ad4 <ConfigMqttContext+0xdc>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fd84 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000a34:	e00a      	b.n	8000a4c <ConfigMqttContext+0x54>
    		sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000a36:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <ConfigMqttContext+0xdc>)
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fd7f 	bl	800053c <sendATCommand>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000a3e:	2380      	movs	r3, #128	@ 0x80
 8000a40:	005a      	lsls	r2, r3, #1
 8000a42:	4921      	ldr	r1, [pc, #132]	@ (8000ac8 <ConfigMqttContext+0xd0>)
 8000a44:	4b21      	ldr	r3, [pc, #132]	@ (8000acc <ConfigMqttContext+0xd4>)
 8000a46:	0018      	movs	r0, r3
 8000a48:	f002 fa40 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000a4c:	4b20      	ldr	r3, [pc, #128]	@ (8000ad0 <ConfigMqttContext+0xd8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d0ef      	beq.n	8000a36 <ConfigMqttContext+0x3e>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000a56:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad0 <ConfigMqttContext+0xd8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	701a      	strb	r2, [r3, #0]
    // Habilitar SSL para o cliente MQTT
    sendATCommand("AT+QMTCFG=\"ssl\",0,1,0\r\n");
 8000a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ad8 <ConfigMqttContext+0xe0>)
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f7ff fd6c 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000a64:	e00a      	b.n	8000a7c <ConfigMqttContext+0x84>
    		sendATCommand("AT+QMTCFG=\"ssl\",0,1,0\r\n");
 8000a66:	4b1c      	ldr	r3, [pc, #112]	@ (8000ad8 <ConfigMqttContext+0xe0>)
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f7ff fd67 	bl	800053c <sendATCommand>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000a6e:	2380      	movs	r3, #128	@ 0x80
 8000a70:	005a      	lsls	r2, r3, #1
 8000a72:	4915      	ldr	r1, [pc, #84]	@ (8000ac8 <ConfigMqttContext+0xd0>)
 8000a74:	4b15      	ldr	r3, [pc, #84]	@ (8000acc <ConfigMqttContext+0xd4>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f002 fa28 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000a7c:	4b14      	ldr	r3, [pc, #80]	@ (8000ad0 <ConfigMqttContext+0xd8>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d0ef      	beq.n	8000a66 <ConfigMqttContext+0x6e>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 8000a86:	4b12      	ldr	r3, [pc, #72]	@ (8000ad0 <ConfigMqttContext+0xd8>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	701a      	strb	r2, [r3, #0]
    // Configurar keepalive para 3600 segundos
    sendATCommand("AT+QMTCFG=\"keepalive\",0,3600\r\n");
 8000a8c:	4b13      	ldr	r3, [pc, #76]	@ (8000adc <ConfigMqttContext+0xe4>)
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff fd54 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000a94:	e00a      	b.n	8000aac <ConfigMqttContext+0xb4>
	    sendATCommand("AT+QMTCFG=\"keepalive\",0,3600\r\n");
 8000a96:	4b11      	ldr	r3, [pc, #68]	@ (8000adc <ConfigMqttContext+0xe4>)
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f7ff fd4f 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000a9e:	2380      	movs	r3, #128	@ 0x80
 8000aa0:	005a      	lsls	r2, r3, #1
 8000aa2:	4909      	ldr	r1, [pc, #36]	@ (8000ac8 <ConfigMqttContext+0xd0>)
 8000aa4:	4b09      	ldr	r3, [pc, #36]	@ (8000acc <ConfigMqttContext+0xd4>)
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f002 fa10 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000aac:	4b08      	ldr	r3, [pc, #32]	@ (8000ad0 <ConfigMqttContext+0xd8>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0ef      	beq.n	8000a96 <ConfigMqttContext+0x9e>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000ab6:	4b06      	ldr	r3, [pc, #24]	@ (8000ad0 <ConfigMqttContext+0xd8>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	701a      	strb	r2, [r3, #0]
    // Configurar o "Will Message" do MQTT
   // sendATCommand("AT+QMTCFG=\"will\",0,1,0,1,\"/test/will\",\"Client disconnected unexpectedly\"\r\n");
}
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	46c0      	nop			@ (mov r8, r8)
 8000ac4:	08006a20 	.word	0x08006a20
 8000ac8:	20000140 	.word	0x20000140
 8000acc:	200000ac 	.word	0x200000ac
 8000ad0:	20000240 	.word	0x20000240
 8000ad4:	08006a3c 	.word	0x08006a3c
 8000ad8:	08006a58 	.word	0x08006a58
 8000adc:	08006a70 	.word	0x08006a70

08000ae0 <ActivePdp>:

void ActivePdp() {
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
    // Verificar se o APN está configurado corretamente
    sendATCommand("AT+CGDCONT?\r\n");
 8000ae4:	4b25      	ldr	r3, [pc, #148]	@ (8000b7c <ActivePdp+0x9c>)
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f7ff fd28 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000aec:	e00a      	b.n	8000b04 <ActivePdp+0x24>
        	sendATCommand("AT+CGDCONT?\r\n");
 8000aee:	4b23      	ldr	r3, [pc, #140]	@ (8000b7c <ActivePdp+0x9c>)
 8000af0:	0018      	movs	r0, r3
 8000af2:	f7ff fd23 	bl	800053c <sendATCommand>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000af6:	2380      	movs	r3, #128	@ 0x80
 8000af8:	005a      	lsls	r2, r3, #1
 8000afa:	4921      	ldr	r1, [pc, #132]	@ (8000b80 <ActivePdp+0xa0>)
 8000afc:	4b21      	ldr	r3, [pc, #132]	@ (8000b84 <ActivePdp+0xa4>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 f9e4 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000b04:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <ActivePdp+0xa8>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0ef      	beq.n	8000aee <ActivePdp+0xe>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <ActivePdp+0xa8>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	701a      	strb	r2, [r3, #0]
    // Ativar o contexto PDP
    sendATCommand("AT+CGACT=1,1\r\n");
 8000b14:	4b1d      	ldr	r3, [pc, #116]	@ (8000b8c <ActivePdp+0xac>)
 8000b16:	0018      	movs	r0, r3
 8000b18:	f7ff fd10 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000b1c:	e00a      	b.n	8000b34 <ActivePdp+0x54>
    		sendATCommand("AT+CGACT=1,1\r\n");
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <ActivePdp+0xac>)
 8000b20:	0018      	movs	r0, r3
 8000b22:	f7ff fd0b 	bl	800053c <sendATCommand>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000b26:	2380      	movs	r3, #128	@ 0x80
 8000b28:	005a      	lsls	r2, r3, #1
 8000b2a:	4915      	ldr	r1, [pc, #84]	@ (8000b80 <ActivePdp+0xa0>)
 8000b2c:	4b15      	ldr	r3, [pc, #84]	@ (8000b84 <ActivePdp+0xa4>)
 8000b2e:	0018      	movs	r0, r3
 8000b30:	f002 f9cc 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000b34:	4b14      	ldr	r3, [pc, #80]	@ (8000b88 <ActivePdp+0xa8>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d0ef      	beq.n	8000b1e <ActivePdp+0x3e>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 8000b3e:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <ActivePdp+0xa8>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	701a      	strb	r2, [r3, #0]
    // Verificar se um endereço IP foi atribuído
    sendATCommand("AT+CGPADDR=1\r\n");
 8000b44:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <ActivePdp+0xb0>)
 8000b46:	0018      	movs	r0, r3
 8000b48:	f7ff fcf8 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000b4c:	e00a      	b.n	8000b64 <ActivePdp+0x84>
    		sendATCommand("AT+CGPADDR=1\r\n");
 8000b4e:	4b10      	ldr	r3, [pc, #64]	@ (8000b90 <ActivePdp+0xb0>)
 8000b50:	0018      	movs	r0, r3
 8000b52:	f7ff fcf3 	bl	800053c <sendATCommand>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000b56:	2380      	movs	r3, #128	@ 0x80
 8000b58:	005a      	lsls	r2, r3, #1
 8000b5a:	4909      	ldr	r1, [pc, #36]	@ (8000b80 <ActivePdp+0xa0>)
 8000b5c:	4b09      	ldr	r3, [pc, #36]	@ (8000b84 <ActivePdp+0xa4>)
 8000b5e:	0018      	movs	r0, r3
 8000b60:	f002 f9b4 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <ActivePdp+0xa8>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d0ef      	beq.n	8000b4e <ActivePdp+0x6e>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <ActivePdp+0xa8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	701a      	strb	r2, [r3, #0]
}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	46c0      	nop			@ (mov r8, r8)
 8000b7c:	08006a90 	.word	0x08006a90
 8000b80:	20000140 	.word	0x20000140
 8000b84:	200000ac 	.word	0x200000ac
 8000b88:	20000240 	.word	0x20000240
 8000b8c:	080069b4 	.word	0x080069b4
 8000b90:	080069c4 	.word	0x080069c4

08000b94 <MqttConnectAndSubscribe>:
void MqttConnectAndSubscribe() {
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
    // Conectar ao broker MQTT
    sendATCommand("AT+QMTOPEN=0,1883\r\n");
 8000b98:	4b25      	ldr	r3, [pc, #148]	@ (8000c30 <MqttConnectAndSubscribe+0x9c>)
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fcce 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000ba0:	e00a      	b.n	8000bb8 <MqttConnectAndSubscribe+0x24>
		sendATCommand("AT+QMTOPEN=0,1883\r\n");
 8000ba2:	4b23      	ldr	r3, [pc, #140]	@ (8000c30 <MqttConnectAndSubscribe+0x9c>)
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f7ff fcc9 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000baa:	2380      	movs	r3, #128	@ 0x80
 8000bac:	005a      	lsls	r2, r3, #1
 8000bae:	4921      	ldr	r1, [pc, #132]	@ (8000c34 <MqttConnectAndSubscribe+0xa0>)
 8000bb0:	4b21      	ldr	r3, [pc, #132]	@ (8000c38 <MqttConnectAndSubscribe+0xa4>)
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f002 f98a 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000bb8:	4b20      	ldr	r3, [pc, #128]	@ (8000c3c <MqttConnectAndSubscribe+0xa8>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d0ef      	beq.n	8000ba2 <MqttConnectAndSubscribe+0xe>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MqttConnectAndSubscribe+0xa8>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]
    // Conectar ao broker MQTT com ID e credenciais
    sendATCommand("AT+QMTCONN=0,\"1\",\"pixtest\",\"pixtest\"\r\n");
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	@ (8000c40 <MqttConnectAndSubscribe+0xac>)
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fcb6 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000bd0:	e00a      	b.n	8000be8 <MqttConnectAndSubscribe+0x54>
    		sendATCommand("AT+QMTCONN=0,\"1\",\"pixtest\",\"pixtest\"\r\n");
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	@ (8000c40 <MqttConnectAndSubscribe+0xac>)
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f7ff fcb1 	bl	800053c <sendATCommand>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000bda:	2380      	movs	r3, #128	@ 0x80
 8000bdc:	005a      	lsls	r2, r3, #1
 8000bde:	4915      	ldr	r1, [pc, #84]	@ (8000c34 <MqttConnectAndSubscribe+0xa0>)
 8000be0:	4b15      	ldr	r3, [pc, #84]	@ (8000c38 <MqttConnectAndSubscribe+0xa4>)
 8000be2:	0018      	movs	r0, r3
 8000be4:	f002 f972 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000be8:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <MqttConnectAndSubscribe+0xa8>)
 8000bea:	781b      	ldrb	r3, [r3, #0]
 8000bec:	b2db      	uxtb	r3, r3
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0ef      	beq.n	8000bd2 <MqttConnectAndSubscribe+0x3e>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000bf2:	4b12      	ldr	r3, [pc, #72]	@ (8000c3c <MqttConnectAndSubscribe+0xa8>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]
    // Inscrever-se no tópico desejado
    sendATCommand("AT+QMTSUB=0,\"pixtest\",1\r\n");
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <MqttConnectAndSubscribe+0xb0>)
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f7ff fc9e 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000c00:	e00a      	b.n	8000c18 <MqttConnectAndSubscribe+0x84>
    		sendATCommand("AT+QMTSUB=0,\"pixtest\",1\r\n");
 8000c02:	4b10      	ldr	r3, [pc, #64]	@ (8000c44 <MqttConnectAndSubscribe+0xb0>)
 8000c04:	0018      	movs	r0, r3
 8000c06:	f7ff fc99 	bl	800053c <sendATCommand>
      		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000c0a:	2380      	movs	r3, #128	@ 0x80
 8000c0c:	005a      	lsls	r2, r3, #1
 8000c0e:	4909      	ldr	r1, [pc, #36]	@ (8000c34 <MqttConnectAndSubscribe+0xa0>)
 8000c10:	4b09      	ldr	r3, [pc, #36]	@ (8000c38 <MqttConnectAndSubscribe+0xa4>)
 8000c12:	0018      	movs	r0, r3
 8000c14:	f002 f95a 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000c18:	4b08      	ldr	r3, [pc, #32]	@ (8000c3c <MqttConnectAndSubscribe+0xa8>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d0ef      	beq.n	8000c02 <MqttConnectAndSubscribe+0x6e>
      		RESPONSE_BUFFER_SIZE);
      	}
      	responseReceived = 0;
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <MqttConnectAndSubscribe+0xa8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]
}
 8000c28:	46c0      	nop			@ (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	46c0      	nop			@ (mov r8, r8)
 8000c30:	08006aa0 	.word	0x08006aa0
 8000c34:	20000140 	.word	0x20000140
 8000c38:	200000ac 	.word	0x200000ac
 8000c3c:	20000240 	.word	0x20000240
 8000c40:	08006ab4 	.word	0x08006ab4
 8000c44:	08006adc 	.word	0x08006adc

08000c48 <MqttConfigBeforeConnection>:

void MqttConfigBeforeConnection() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0

    // Verificar se o dispositivo está registrado na rede
    sendATCommand("AT+CREG?\r\n");
 8000c4c:	4b31      	ldr	r3, [pc, #196]	@ (8000d14 <MqttConfigBeforeConnection+0xcc>)
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff fc74 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000c54:	e00a      	b.n	8000c6c <MqttConfigBeforeConnection+0x24>
	    sendATCommand("AT+CREG?\r\n");
 8000c56:	4b2f      	ldr	r3, [pc, #188]	@ (8000d14 <MqttConfigBeforeConnection+0xcc>)
 8000c58:	0018      	movs	r0, r3
 8000c5a:	f7ff fc6f 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000c5e:	2380      	movs	r3, #128	@ 0x80
 8000c60:	005a      	lsls	r2, r3, #1
 8000c62:	492d      	ldr	r1, [pc, #180]	@ (8000d18 <MqttConfigBeforeConnection+0xd0>)
 8000c64:	4b2d      	ldr	r3, [pc, #180]	@ (8000d1c <MqttConfigBeforeConnection+0xd4>)
 8000c66:	0018      	movs	r0, r3
 8000c68:	f002 f930 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MqttConfigBeforeConnection+0xd8>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0ef      	beq.n	8000c56 <MqttConfigBeforeConnection+0xe>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000c76:	4b2a      	ldr	r3, [pc, #168]	@ (8000d20 <MqttConfigBeforeConnection+0xd8>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	701a      	strb	r2, [r3, #0]
    // Verificar o status do contexto PDP
    sendATCommand("AT+CGACT?\r\n");
 8000c7c:	4b29      	ldr	r3, [pc, #164]	@ (8000d24 <MqttConfigBeforeConnection+0xdc>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f7ff fc5c 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000c84:	e00a      	b.n	8000c9c <MqttConfigBeforeConnection+0x54>
    		sendATCommand("AT+CGACT?\r\n");
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <MqttConfigBeforeConnection+0xdc>)
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f7ff fc57 	bl	800053c <sendATCommand>
    		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	005a      	lsls	r2, r3, #1
 8000c92:	4921      	ldr	r1, [pc, #132]	@ (8000d18 <MqttConfigBeforeConnection+0xd0>)
 8000c94:	4b21      	ldr	r3, [pc, #132]	@ (8000d1c <MqttConfigBeforeConnection+0xd4>)
 8000c96:	0018      	movs	r0, r3
 8000c98:	f002 f918 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000c9c:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <MqttConfigBeforeConnection+0xd8>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d0ef      	beq.n	8000c86 <MqttConfigBeforeConnection+0x3e>
    		RESPONSE_BUFFER_SIZE);
    	}
    	responseReceived = 0;
 8000ca6:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MqttConfigBeforeConnection+0xd8>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	701a      	strb	r2, [r3, #0]
    // Verificar a qualidade do sinal
    sendATCommand("AT+CSQ\r\n");
 8000cac:	4b1e      	ldr	r3, [pc, #120]	@ (8000d28 <MqttConfigBeforeConnection+0xe0>)
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fc44 	bl	800053c <sendATCommand>
    while (!responseReceived) {
 8000cb4:	e00a      	b.n	8000ccc <MqttConfigBeforeConnection+0x84>
    		sendATCommand("AT+CSQ\r\n");
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	@ (8000d28 <MqttConfigBeforeConnection+0xe0>)
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f7ff fc3f 	bl	800053c <sendATCommand>
       		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000cbe:	2380      	movs	r3, #128	@ 0x80
 8000cc0:	005a      	lsls	r2, r3, #1
 8000cc2:	4915      	ldr	r1, [pc, #84]	@ (8000d18 <MqttConfigBeforeConnection+0xd0>)
 8000cc4:	4b15      	ldr	r3, [pc, #84]	@ (8000d1c <MqttConfigBeforeConnection+0xd4>)
 8000cc6:	0018      	movs	r0, r3
 8000cc8:	f002 f900 	bl	8002ecc <HAL_UART_Receive_IT>
    while (!responseReceived) {
 8000ccc:	4b14      	ldr	r3, [pc, #80]	@ (8000d20 <MqttConfigBeforeConnection+0xd8>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d0ef      	beq.n	8000cb6 <MqttConfigBeforeConnection+0x6e>
       		RESPONSE_BUFFER_SIZE);
       	}
       	responseReceived = 0;
 8000cd6:	4b12      	ldr	r3, [pc, #72]	@ (8000d20 <MqttConfigBeforeConnection+0xd8>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
    // Configurar o cntexto PDP para o canal MQTT
    sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000cdc:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <MqttConfigBeforeConnection+0xe4>)
 8000cde:	0018      	movs	r0, r3
 8000ce0:	f7ff fc2c 	bl	800053c <sendATCommand>
	while (!responseReceived) {
 8000ce4:	e00a      	b.n	8000cfc <MqttConfigBeforeConnection+0xb4>
		sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 8000ce6:	4b11      	ldr	r3, [pc, #68]	@ (8000d2c <MqttConfigBeforeConnection+0xe4>)
 8000ce8:	0018      	movs	r0, r3
 8000cea:	f7ff fc27 	bl	800053c <sendATCommand>
		HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000cee:	2380      	movs	r3, #128	@ 0x80
 8000cf0:	005a      	lsls	r2, r3, #1
 8000cf2:	4909      	ldr	r1, [pc, #36]	@ (8000d18 <MqttConfigBeforeConnection+0xd0>)
 8000cf4:	4b09      	ldr	r3, [pc, #36]	@ (8000d1c <MqttConfigBeforeConnection+0xd4>)
 8000cf6:	0018      	movs	r0, r3
 8000cf8:	f002 f8e8 	bl	8002ecc <HAL_UART_Receive_IT>
	while (!responseReceived) {
 8000cfc:	4b08      	ldr	r3, [pc, #32]	@ (8000d20 <MqttConfigBeforeConnection+0xd8>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0ef      	beq.n	8000ce6 <MqttConfigBeforeConnection+0x9e>
		RESPONSE_BUFFER_SIZE);
	}
	responseReceived = 0;
 8000d06:	4b06      	ldr	r3, [pc, #24]	@ (8000d20 <MqttConfigBeforeConnection+0xd8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	701a      	strb	r2, [r3, #0]
}
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	46c0      	nop			@ (mov r8, r8)
 8000d14:	08006af8 	.word	0x08006af8
 8000d18:	20000140 	.word	0x20000140
 8000d1c:	200000ac 	.word	0x200000ac
 8000d20:	20000240 	.word	0x20000240
 8000d24:	08006b04 	.word	0x08006b04
 8000d28:	08006b10 	.word	0x08006b10
 8000d2c:	08006a3c 	.word	0x08006a3c

08000d30 <EnterSleepMode>:


void EnterSleepMode() {
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	SetNextAlarm();
 8000d34:	f000 f808 	bl	8000d48 <SetNextAlarm>
	 HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN1);
 8000d38:	2001      	movs	r0, #1
 8000d3a:	f000 fe2b 	bl	8001994 <HAL_PWR_EnableWakeUpPin>
	HAL_PWREx_EnterSHUTDOWNMode();
 8000d3e:	f000 fe5d 	bl	80019fc <HAL_PWREx_EnterSHUTDOWNMode>

}
 8000d42:	46c0      	nop			@ (mov r8, r8)
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <SetNextAlarm>:

void SetNextAlarm() {
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b094      	sub	sp, #80	@ 0x50
 8000d4c:	af00      	add	r7, sp, #0
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	RTC_AlarmTypeDef sAlarm;

// Obter o tempo e data atuais
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000d4e:	232c      	movs	r3, #44	@ 0x2c
 8000d50:	18f9      	adds	r1, r7, r3
 8000d52:	4b34      	ldr	r3, [pc, #208]	@ (8000e24 <SetNextAlarm+0xdc>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	0018      	movs	r0, r3
 8000d58:	f001 fc00 	bl	800255c <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000d5c:	2328      	movs	r3, #40	@ 0x28
 8000d5e:	18f9      	adds	r1, r7, r3
 8000d60:	4b30      	ldr	r3, [pc, #192]	@ (8000e24 <SetNextAlarm+0xdc>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	0018      	movs	r0, r3
 8000d66:	f001 fce7 	bl	8002738 <HAL_RTC_GetDate>

// Configurar o tempo para o próximo alarme
	uint32_t totalSeconds = ALARM_PERIOD_IN_SECONDS; // Definir o período em segundos
 8000d6a:	2378      	movs	r3, #120	@ 0x78
 8000d6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	uint32_t hours = totalSeconds / 3600;
 8000d6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d70:	22e1      	movs	r2, #225	@ 0xe1
 8000d72:	0111      	lsls	r1, r2, #4
 8000d74:	0018      	movs	r0, r3
 8000d76:	f7ff f9d9 	bl	800012c <__udivsi3>
 8000d7a:	0003      	movs	r3, r0
 8000d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
	uint32_t minutes = (totalSeconds % 3600) / 60;
 8000d7e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d80:	22e1      	movs	r2, #225	@ 0xe1
 8000d82:	0111      	lsls	r1, r2, #4
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fa57 	bl	8000238 <__aeabi_uidivmod>
 8000d8a:	000b      	movs	r3, r1
 8000d8c:	213c      	movs	r1, #60	@ 0x3c
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f7ff f9cc 	bl	800012c <__udivsi3>
 8000d94:	0003      	movs	r3, r0
 8000d96:	647b      	str	r3, [r7, #68]	@ 0x44
	uint32_t seconds = totalSeconds % 60;
 8000d98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d9a:	213c      	movs	r1, #60	@ 0x3c
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f7ff fa4b 	bl	8000238 <__aeabi_uidivmod>
 8000da2:	000b      	movs	r3, r1
 8000da4:	643b      	str	r3, [r7, #64]	@ 0x40

// Configurar os valores no alarme
	sAlarm.Alarm = RTC_ALARM_A;
 8000da6:	003b      	movs	r3, r7
 8000da8:	2280      	movs	r2, #128	@ 0x80
 8000daa:	0052      	lsls	r2, r2, #1
 8000dac:	625a      	str	r2, [r3, #36]	@ 0x24
	sAlarm.AlarmTime.Hours = hours;
 8000dae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	003b      	movs	r3, r7
 8000db4:	701a      	strb	r2, [r3, #0]
	sAlarm.AlarmTime.Minutes = minutes;
 8000db6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	003b      	movs	r3, r7
 8000dbc:	705a      	strb	r2, [r3, #1]
	sAlarm.AlarmTime.Seconds = seconds;
 8000dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	003b      	movs	r3, r7
 8000dc4:	709a      	strb	r2, [r3, #2]
	sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000dc6:	003b      	movs	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	60da      	str	r2, [r3, #12]
	sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000dcc:	003b      	movs	r3, r7
 8000dce:	2200      	movs	r2, #0
 8000dd0:	611a      	str	r2, [r3, #16]

	sAlarm.AlarmMask = RTC_ALARMMASK_DATEWEEKDAY; // Ignorar a data, repetir alarme diariamente
 8000dd2:	003b      	movs	r3, r7
 8000dd4:	2280      	movs	r2, #128	@ 0x80
 8000dd6:	0612      	lsls	r2, r2, #24
 8000dd8:	615a      	str	r2, [r3, #20]
	sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_NONE;
 8000dda:	003b      	movs	r3, r7
 8000ddc:	22f0      	movs	r2, #240	@ 0xf0
 8000dde:	0512      	lsls	r2, r2, #20
 8000de0:	619a      	str	r2, [r3, #24]
	sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000de2:	003b      	movs	r3, r7
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
	sAlarm.AlarmDateWeekDay = 1;  // Não utilizado devido à máscara
 8000de8:	003b      	movs	r3, r7
 8000dea:	2220      	movs	r2, #32
 8000dec:	2101      	movs	r1, #1
 8000dee:	5499      	strb	r1, [r3, r2]

// Desativar alarme anterior antes de configurar o novo
	HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8000df0:	2380      	movs	r3, #128	@ 0x80
 8000df2:	005a      	lsls	r2, r3, #1
 8000df4:	4b0b      	ldr	r3, [pc, #44]	@ (8000e24 <SetNextAlarm+0xdc>)
 8000df6:	0011      	movs	r1, r2
 8000df8:	0018      	movs	r0, r3
 8000dfa:	f001 fdd7 	bl	80029ac <HAL_RTC_DeactivateAlarm>

// Configurar novo alarme com interrupção
	if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BIN) != HAL_OK) {
 8000dfe:	0039      	movs	r1, r7
 8000e00:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <SetNextAlarm+0xdc>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	0018      	movs	r0, r3
 8000e06:	f001 fce5 	bl	80027d4 <HAL_RTC_SetAlarm_IT>
 8000e0a:	1e03      	subs	r3, r0, #0
 8000e0c:	d005      	beq.n	8000e1a <SetNextAlarm+0xd2>
		printf("Erro ao configurar o alarme RTC\n");
 8000e0e:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SetNextAlarm+0xe0>)
 8000e10:	0018      	movs	r0, r3
 8000e12:	f003 ff71 	bl	8004cf8 <puts>
		while (1)
 8000e16:	46c0      	nop			@ (mov r8, r8)
 8000e18:	e7fd      	b.n	8000e16 <SetNextAlarm+0xce>
			; // Travar em caso de erro crítico
	}


}
 8000e1a:	46c0      	nop			@ (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b014      	add	sp, #80	@ 0x50
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			@ (mov r8, r8)
 8000e24:	20000084 	.word	0x20000084
 8000e28:	08006b1c 	.word	0x08006b1c

08000e2c <InitFlags>:

void InitFlags() {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8000e30:	4b0a      	ldr	r3, [pc, #40]	@ (8000e5c <InitFlags+0x30>)
 8000e32:	691a      	ldr	r2, [r3, #16]
 8000e34:	2380      	movs	r3, #128	@ 0x80
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	401a      	ands	r2, r3
 8000e3a:	2380      	movs	r3, #128	@ 0x80
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d106      	bne.n	8000e50 <InitFlags+0x24>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8000e42:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <InitFlags+0x30>)
 8000e44:	4a06      	ldr	r2, [pc, #24]	@ (8000e60 <InitFlags+0x34>)
 8000e46:	619a      	str	r2, [r3, #24]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 8000e48:	2001      	movs	r0, #1
 8000e4a:	f000 fdc3 	bl	80019d4 <HAL_PWR_DisableWakeUpPin>
	} else {
		MX_RTC_Init();
	}

}
 8000e4e:	e001      	b.n	8000e54 <InitFlags+0x28>
		MX_RTC_Init();
 8000e50:	f7ff fa7a 	bl	8000348 <MX_RTC_Init>
}
 8000e54:	46c0      	nop			@ (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	40007000 	.word	0x40007000
 8000e60:	00010100 	.word	0x00010100

08000e64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e68:	b672      	cpsid	i
}
 8000e6a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	e7fd      	b.n	8000e6c <Error_Handler+0x8>

08000e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e76:	4b13      	ldr	r3, [pc, #76]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e7a:	4b12      	ldr	r3, [pc, #72]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	430a      	orrs	r2, r1
 8000e80:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e82:	4b10      	ldr	r3, [pc, #64]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e86:	2201      	movs	r2, #1
 8000e88:	4013      	ands	r3, r2
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e90:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000e92:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e94:	2180      	movs	r1, #128	@ 0x80
 8000e96:	0549      	lsls	r1, r1, #21
 8000e98:	430a      	orrs	r2, r1
 8000e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000e9c:	4b09      	ldr	r3, [pc, #36]	@ (8000ec4 <HAL_MspInit+0x54>)
 8000e9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ea0:	2380      	movs	r3, #128	@ 0x80
 8000ea2:	055b      	lsls	r3, r3, #21
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	603b      	str	r3, [r7, #0]
 8000ea8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	2100      	movs	r1, #0
 8000eae:	2004      	movs	r0, #4
 8000eb0:	f000 faf8 	bl	80014a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000eb4:	2004      	movs	r0, #4
 8000eb6:	f000 fb0a 	bl	80014ce <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eba:	46c0      	nop			@ (mov r8, r8)
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	b002      	add	sp, #8
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	46c0      	nop			@ (mov r8, r8)
 8000ec4:	40021000 	.word	0x40021000

08000ec8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b08b      	sub	sp, #44	@ 0x2c
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed0:	240c      	movs	r4, #12
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	231c      	movs	r3, #28
 8000ed8:	001a      	movs	r2, r3
 8000eda:	2100      	movs	r1, #0
 8000edc:	f004 f860 	bl	8004fa0 <memset>
  if(hrtc->Instance==RTC)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a19      	ldr	r2, [pc, #100]	@ (8000f4c <HAL_RTC_MspInit+0x84>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d12b      	bne.n	8000f42 <HAL_RTC_MspInit+0x7a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000eea:	193b      	adds	r3, r7, r4
 8000eec:	2240      	movs	r2, #64	@ 0x40
 8000eee:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ef0:	193b      	adds	r3, r7, r4
 8000ef2:	2280      	movs	r2, #128	@ 0x80
 8000ef4:	0092      	lsls	r2, r2, #2
 8000ef6:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	0018      	movs	r0, r3
 8000efc:	f001 f90c 	bl	8002118 <HAL_RCCEx_PeriphCLKConfig>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000f04:	f7ff ffae 	bl	8000e64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000f08:	4b11      	ldr	r3, [pc, #68]	@ (8000f50 <HAL_RTC_MspInit+0x88>)
 8000f0a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000f0c:	4b10      	ldr	r3, [pc, #64]	@ (8000f50 <HAL_RTC_MspInit+0x88>)
 8000f0e:	2180      	movs	r1, #128	@ 0x80
 8000f10:	0209      	lsls	r1, r1, #8
 8000f12:	430a      	orrs	r2, r1
 8000f14:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000f16:	4b0e      	ldr	r3, [pc, #56]	@ (8000f50 <HAL_RTC_MspInit+0x88>)
 8000f18:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <HAL_RTC_MspInit+0x88>)
 8000f1c:	2180      	movs	r1, #128	@ 0x80
 8000f1e:	00c9      	lsls	r1, r1, #3
 8000f20:	430a      	orrs	r2, r1
 8000f22:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f24:	4b0a      	ldr	r3, [pc, #40]	@ (8000f50 <HAL_RTC_MspInit+0x88>)
 8000f26:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f28:	2380      	movs	r3, #128	@ 0x80
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
 8000f30:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	2002      	movs	r0, #2
 8000f38:	f000 fab4 	bl	80014a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000f3c:	2002      	movs	r0, #2
 8000f3e:	f000 fac6 	bl	80014ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000f42:	46c0      	nop			@ (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b00b      	add	sp, #44	@ 0x2c
 8000f48:	bd90      	pop	{r4, r7, pc}
 8000f4a:	46c0      	nop			@ (mov r8, r8)
 8000f4c:	40002800 	.word	0x40002800
 8000f50:	40021000 	.word	0x40021000

08000f54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f54:	b590      	push	{r4, r7, lr}
 8000f56:	b08b      	sub	sp, #44	@ 0x2c
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	2414      	movs	r4, #20
 8000f5e:	193b      	adds	r3, r7, r4
 8000f60:	0018      	movs	r0, r3
 8000f62:	2314      	movs	r3, #20
 8000f64:	001a      	movs	r2, r3
 8000f66:	2100      	movs	r1, #0
 8000f68:	f004 f81a 	bl	8004fa0 <memset>
  if(huart->Instance==USART2)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a1f      	ldr	r2, [pc, #124]	@ (8000ff0 <HAL_UART_MspInit+0x9c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d138      	bne.n	8000fe8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f76:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f78:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f7a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f7c:	2180      	movs	r1, #128	@ 0x80
 8000f7e:	0289      	lsls	r1, r1, #10
 8000f80:	430a      	orrs	r2, r1
 8000f82:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000f84:	4b1b      	ldr	r3, [pc, #108]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000f88:	2380      	movs	r3, #128	@ 0x80
 8000f8a:	029b      	lsls	r3, r3, #10
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]
 8000f90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	4b18      	ldr	r3, [pc, #96]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000f96:	4b17      	ldr	r3, [pc, #92]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000f98:	2101      	movs	r1, #1
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8000f9e:	4b15      	ldr	r3, [pc, #84]	@ (8000ff4 <HAL_UART_MspInit+0xa0>)
 8000fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000faa:	0021      	movs	r1, r4
 8000fac:	187b      	adds	r3, r7, r1
 8000fae:	220c      	movs	r2, #12
 8000fb0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	2202      	movs	r2, #2
 8000fb6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	187b      	adds	r3, r7, r1
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000fc4:	187b      	adds	r3, r7, r1
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fca:	187a      	adds	r2, r7, r1
 8000fcc:	23a0      	movs	r3, #160	@ 0xa0
 8000fce:	05db      	lsls	r3, r3, #23
 8000fd0:	0011      	movs	r1, r2
 8000fd2:	0018      	movs	r0, r3
 8000fd4:	f000 fb74 	bl	80016c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	2100      	movs	r1, #0
 8000fdc:	201c      	movs	r0, #28
 8000fde:	f000 fa61 	bl	80014a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe2:	201c      	movs	r0, #28
 8000fe4:	f000 fa73 	bl	80014ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000fe8:	46c0      	nop			@ (mov r8, r8)
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b00b      	add	sp, #44	@ 0x2c
 8000fee:	bd90      	pop	{r4, r7, pc}
 8000ff0:	40004400 	.word	0x40004400
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ffc:	46c0      	nop			@ (mov r8, r8)
 8000ffe:	e7fd      	b.n	8000ffc <NMI_Handler+0x4>

08001000 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001004:	46c0      	nop			@ (mov r8, r8)
 8001006:	e7fd      	b.n	8001004 <HardFault_Handler+0x4>

08001008 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001016:	46c0      	nop			@ (mov r8, r8)
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001020:	f000 f954 	bl	80012cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupts through EXTI lines 19 and 21.
  */
void RTC_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001030:	4b03      	ldr	r3, [pc, #12]	@ (8001040 <RTC_IRQHandler+0x14>)
 8001032:	0018      	movs	r0, r3
 8001034:	f001 fd22 	bl	8002a7c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8001038:	46c0      	nop			@ (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			@ (mov r8, r8)
 8001040:	20000084 	.word	0x20000084

08001044 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001048:	46c0      	nop			@ (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <USART2_IRQHandler+0x14>)
 8001056:	0018      	movs	r0, r3
 8001058:	f001 ff90 	bl	8002f7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800105c:	46c0      	nop			@ (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	46c0      	nop			@ (mov r8, r8)
 8001064:	200000ac 	.word	0x200000ac

08001068 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b086      	sub	sp, #24
 800106c:	af00      	add	r7, sp, #0
 800106e:	60f8      	str	r0, [r7, #12]
 8001070:	60b9      	str	r1, [r7, #8]
 8001072:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]
 8001078:	e00a      	b.n	8001090 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107a:	e000      	b.n	800107e <_read+0x16>
 800107c:	bf00      	nop
 800107e:	0001      	movs	r1, r0
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	1c5a      	adds	r2, r3, #1
 8001084:	60ba      	str	r2, [r7, #8]
 8001086:	b2ca      	uxtb	r2, r1
 8001088:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	429a      	cmp	r2, r3
 8001096:	dbf0      	blt.n	800107a <_read+0x12>
  }

  return len;
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	b006      	add	sp, #24
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ae:	2300      	movs	r3, #0
 80010b0:	617b      	str	r3, [r7, #20]
 80010b2:	e009      	b.n	80010c8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	1c5a      	adds	r2, r3, #1
 80010b8:	60ba      	str	r2, [r7, #8]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	0018      	movs	r0, r3
 80010be:	e000      	b.n	80010c2 <_write+0x20>
 80010c0:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf1      	blt.n	80010b4 <_write+0x12>
  }
  return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b006      	add	sp, #24
 80010d8:	bd80      	pop	{r7, pc}

080010da <_close>:

int _close(int file)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	425b      	negs	r3, r3
}
 80010e6:	0018      	movs	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	b002      	add	sp, #8
 80010ec:	bd80      	pop	{r7, pc}

080010ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
 80010f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2280      	movs	r2, #128	@ 0x80
 80010fc:	0192      	lsls	r2, r2, #6
 80010fe:	605a      	str	r2, [r3, #4]
  return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	0018      	movs	r0, r3
 8001104:	46bd      	mov	sp, r7
 8001106:	b002      	add	sp, #8
 8001108:	bd80      	pop	{r7, pc}

0800110a <_isatty>:

int _isatty(int file)
{
 800110a:	b580      	push	{r7, lr}
 800110c:	b082      	sub	sp, #8
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001112:	2301      	movs	r3, #1
}
 8001114:	0018      	movs	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	b002      	add	sp, #8
 800111a:	bd80      	pop	{r7, pc}

0800111c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	60b9      	str	r1, [r7, #8]
 8001126:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001128:	2300      	movs	r3, #0
}
 800112a:	0018      	movs	r0, r3
 800112c:	46bd      	mov	sp, r7
 800112e:	b004      	add	sp, #16
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	@ (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	18d3      	adds	r3, r2, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f003 ff88 	bl	8005078 <__errno>
 8001168:	0003      	movs	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	2301      	movs	r3, #1
 8001170:	425b      	negs	r3, r3
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	18d2      	adds	r2, r2, r3
 8001182:	4b05      	ldr	r3, [pc, #20]	@ (8001198 <_sbrk+0x64>)
 8001184:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	0018      	movs	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	b006      	add	sp, #24
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20001800 	.word	0x20001800
 8001194:	00000400 	.word	0x00000400
 8001198:	20000244 	.word	0x20000244
 800119c:	20000398 	.word	0x20000398

080011a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80011a4:	4b03      	ldr	r3, [pc, #12]	@ (80011b4 <SystemInit+0x14>)
 80011a6:	2280      	movs	r2, #128	@ 0x80
 80011a8:	0512      	lsls	r2, r2, #20
 80011aa:	609a      	str	r2, [r3, #8]
#endif
}
 80011ac:	46c0      	nop			@ (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80011b8:	480d      	ldr	r0, [pc, #52]	@ (80011f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80011ba:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80011bc:	f7ff fff0 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80011c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80011c2:	e003      	b.n	80011cc <LoopCopyDataInit>

080011c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80011c4:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80011c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80011c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80011ca:	3104      	adds	r1, #4

080011cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80011cc:	480a      	ldr	r0, [pc, #40]	@ (80011f8 <LoopForever+0xa>)
  ldr r3, =_edata
 80011ce:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <LoopForever+0xe>)
  adds r2, r0, r1
 80011d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80011d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80011d4:	d3f6      	bcc.n	80011c4 <CopyDataInit>
  ldr r2, =_sbss
 80011d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001200 <LoopForever+0x12>)
  b LoopFillZerobss
 80011d8:	e002      	b.n	80011e0 <LoopFillZerobss>

080011da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80011da:	2300      	movs	r3, #0
  str  r3, [r2]
 80011dc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011de:	3204      	adds	r2, #4

080011e0 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <LoopForever+0x16>)
  cmp r2, r3
 80011e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80011e4:	d3f9      	bcc.n	80011da <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 80011e6:	f003 ff4d 	bl	8005084 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011ea:	f7ff f82b 	bl	8000244 <main>

080011ee <LoopForever>:

LoopForever:
    b LoopForever
 80011ee:	e7fe      	b.n	80011ee <LoopForever>
  ldr   r0, =_estack
 80011f0:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 80011f4:	08006d18 	.word	0x08006d18
  ldr r0, =_sdata
 80011f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80011fc:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8001200:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8001204:	20000398 	.word	0x20000398

08001208 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001208:	e7fe      	b.n	8001208 <ADC1_IRQHandler>

0800120a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	2200      	movs	r2, #0
 8001214:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001216:	2003      	movs	r0, #3
 8001218:	f000 f80e 	bl	8001238 <HAL_InitTick>
 800121c:	1e03      	subs	r3, r0, #0
 800121e:	d003      	beq.n	8001228 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001220:	1dfb      	adds	r3, r7, #7
 8001222:	2201      	movs	r2, #1
 8001224:	701a      	strb	r2, [r3, #0]
 8001226:	e001      	b.n	800122c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001228:	f7ff fe22 	bl	8000e70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	781b      	ldrb	r3, [r3, #0]
}
 8001230:	0018      	movs	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	b002      	add	sp, #8
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001238:	b590      	push	{r4, r7, lr}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001240:	230f      	movs	r3, #15
 8001242:	18fb      	adds	r3, r7, r3
 8001244:	2200      	movs	r2, #0
 8001246:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001248:	4b1d      	ldr	r3, [pc, #116]	@ (80012c0 <HAL_InitTick+0x88>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d02b      	beq.n	80012a8 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001250:	4b1c      	ldr	r3, [pc, #112]	@ (80012c4 <HAL_InitTick+0x8c>)
 8001252:	681c      	ldr	r4, [r3, #0]
 8001254:	4b1a      	ldr	r3, [pc, #104]	@ (80012c0 <HAL_InitTick+0x88>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	0019      	movs	r1, r3
 800125a:	23fa      	movs	r3, #250	@ 0xfa
 800125c:	0098      	lsls	r0, r3, #2
 800125e:	f7fe ff65 	bl	800012c <__udivsi3>
 8001262:	0003      	movs	r3, r0
 8001264:	0019      	movs	r1, r3
 8001266:	0020      	movs	r0, r4
 8001268:	f7fe ff60 	bl	800012c <__udivsi3>
 800126c:	0003      	movs	r3, r0
 800126e:	0018      	movs	r0, r3
 8001270:	f000 f93d 	bl	80014ee <HAL_SYSTICK_Config>
 8001274:	1e03      	subs	r3, r0, #0
 8001276:	d112      	bne.n	800129e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b03      	cmp	r3, #3
 800127c:	d80a      	bhi.n	8001294 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127e:	6879      	ldr	r1, [r7, #4]
 8001280:	2301      	movs	r3, #1
 8001282:	425b      	negs	r3, r3
 8001284:	2200      	movs	r2, #0
 8001286:	0018      	movs	r0, r3
 8001288:	f000 f90c 	bl	80014a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800128c:	4b0e      	ldr	r3, [pc, #56]	@ (80012c8 <HAL_InitTick+0x90>)
 800128e:	687a      	ldr	r2, [r7, #4]
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	e00d      	b.n	80012b0 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001294:	230f      	movs	r3, #15
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	2201      	movs	r2, #1
 800129a:	701a      	strb	r2, [r3, #0]
 800129c:	e008      	b.n	80012b0 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800129e:	230f      	movs	r3, #15
 80012a0:	18fb      	adds	r3, r7, r3
 80012a2:	2201      	movs	r2, #1
 80012a4:	701a      	strb	r2, [r3, #0]
 80012a6:	e003      	b.n	80012b0 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012a8:	230f      	movs	r3, #15
 80012aa:	18fb      	adds	r3, r7, r3
 80012ac:	2201      	movs	r2, #1
 80012ae:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80012b0:	230f      	movs	r3, #15
 80012b2:	18fb      	adds	r3, r7, r3
 80012b4:	781b      	ldrb	r3, [r3, #0]
}
 80012b6:	0018      	movs	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	b005      	add	sp, #20
 80012bc:	bd90      	pop	{r4, r7, pc}
 80012be:	46c0      	nop			@ (mov r8, r8)
 80012c0:	20000008 	.word	0x20000008
 80012c4:	20000000 	.word	0x20000000
 80012c8:	20000004 	.word	0x20000004

080012cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d0:	4b05      	ldr	r3, [pc, #20]	@ (80012e8 <HAL_IncTick+0x1c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	001a      	movs	r2, r3
 80012d6:	4b05      	ldr	r3, [pc, #20]	@ (80012ec <HAL_IncTick+0x20>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	18d2      	adds	r2, r2, r3
 80012dc:	4b03      	ldr	r3, [pc, #12]	@ (80012ec <HAL_IncTick+0x20>)
 80012de:	601a      	str	r2, [r3, #0]
}
 80012e0:	46c0      	nop			@ (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	46c0      	nop			@ (mov r8, r8)
 80012e8:	20000008 	.word	0x20000008
 80012ec:	20000248 	.word	0x20000248

080012f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  return uwTick;
 80012f4:	4b02      	ldr	r3, [pc, #8]	@ (8001300 <HAL_GetTick+0x10>)
 80012f6:	681b      	ldr	r3, [r3, #0]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	46c0      	nop			@ (mov r8, r8)
 8001300:	20000248 	.word	0x20000248

08001304 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800130c:	f7ff fff0 	bl	80012f0 <HAL_GetTick>
 8001310:	0003      	movs	r3, r0
 8001312:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	3301      	adds	r3, #1
 800131c:	d005      	beq.n	800132a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <HAL_Delay+0x44>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	001a      	movs	r2, r3
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	189b      	adds	r3, r3, r2
 8001328:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800132a:	46c0      	nop			@ (mov r8, r8)
 800132c:	f7ff ffe0 	bl	80012f0 <HAL_GetTick>
 8001330:	0002      	movs	r2, r0
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	68fa      	ldr	r2, [r7, #12]
 8001338:	429a      	cmp	r2, r3
 800133a:	d8f7      	bhi.n	800132c <HAL_Delay+0x28>
  {
  }
}
 800133c:	46c0      	nop			@ (mov r8, r8)
 800133e:	46c0      	nop			@ (mov r8, r8)
 8001340:	46bd      	mov	sp, r7
 8001342:	b004      	add	sp, #16
 8001344:	bd80      	pop	{r7, pc}
 8001346:	46c0      	nop			@ (mov r8, r8)
 8001348:	20000008 	.word	0x20000008

0800134c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	0002      	movs	r2, r0
 8001354:	1dfb      	adds	r3, r7, #7
 8001356:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001358:	1dfb      	adds	r3, r7, #7
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b7f      	cmp	r3, #127	@ 0x7f
 800135e:	d809      	bhi.n	8001374 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001360:	1dfb      	adds	r3, r7, #7
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	001a      	movs	r2, r3
 8001366:	231f      	movs	r3, #31
 8001368:	401a      	ands	r2, r3
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <__NVIC_EnableIRQ+0x30>)
 800136c:	2101      	movs	r1, #1
 800136e:	4091      	lsls	r1, r2
 8001370:	000a      	movs	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001374:	46c0      	nop			@ (mov r8, r8)
 8001376:	46bd      	mov	sp, r7
 8001378:	b002      	add	sp, #8
 800137a:	bd80      	pop	{r7, pc}
 800137c:	e000e100 	.word	0xe000e100

08001380 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001380:	b590      	push	{r4, r7, lr}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	0002      	movs	r2, r0
 8001388:	6039      	str	r1, [r7, #0]
 800138a:	1dfb      	adds	r3, r7, #7
 800138c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b7f      	cmp	r3, #127	@ 0x7f
 8001394:	d828      	bhi.n	80013e8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001396:	4a2f      	ldr	r2, [pc, #188]	@ (8001454 <__NVIC_SetPriority+0xd4>)
 8001398:	1dfb      	adds	r3, r7, #7
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	b25b      	sxtb	r3, r3
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	33c0      	adds	r3, #192	@ 0xc0
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	589b      	ldr	r3, [r3, r2]
 80013a6:	1dfa      	adds	r2, r7, #7
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	0011      	movs	r1, r2
 80013ac:	2203      	movs	r2, #3
 80013ae:	400a      	ands	r2, r1
 80013b0:	00d2      	lsls	r2, r2, #3
 80013b2:	21ff      	movs	r1, #255	@ 0xff
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	43d2      	mvns	r2, r2
 80013ba:	401a      	ands	r2, r3
 80013bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	019b      	lsls	r3, r3, #6
 80013c2:	22ff      	movs	r2, #255	@ 0xff
 80013c4:	401a      	ands	r2, r3
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	0018      	movs	r0, r3
 80013cc:	2303      	movs	r3, #3
 80013ce:	4003      	ands	r3, r0
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d4:	481f      	ldr	r0, [pc, #124]	@ (8001454 <__NVIC_SetPriority+0xd4>)
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	430a      	orrs	r2, r1
 80013e0:	33c0      	adds	r3, #192	@ 0xc0
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013e6:	e031      	b.n	800144c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001458 <__NVIC_SetPriority+0xd8>)
 80013ea:	1dfb      	adds	r3, r7, #7
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	0019      	movs	r1, r3
 80013f0:	230f      	movs	r3, #15
 80013f2:	400b      	ands	r3, r1
 80013f4:	3b08      	subs	r3, #8
 80013f6:	089b      	lsrs	r3, r3, #2
 80013f8:	3306      	adds	r3, #6
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	18d3      	adds	r3, r2, r3
 80013fe:	3304      	adds	r3, #4
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	1dfa      	adds	r2, r7, #7
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	0011      	movs	r1, r2
 8001408:	2203      	movs	r2, #3
 800140a:	400a      	ands	r2, r1
 800140c:	00d2      	lsls	r2, r2, #3
 800140e:	21ff      	movs	r1, #255	@ 0xff
 8001410:	4091      	lsls	r1, r2
 8001412:	000a      	movs	r2, r1
 8001414:	43d2      	mvns	r2, r2
 8001416:	401a      	ands	r2, r3
 8001418:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	019b      	lsls	r3, r3, #6
 800141e:	22ff      	movs	r2, #255	@ 0xff
 8001420:	401a      	ands	r2, r3
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	0018      	movs	r0, r3
 8001428:	2303      	movs	r3, #3
 800142a:	4003      	ands	r3, r0
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001430:	4809      	ldr	r0, [pc, #36]	@ (8001458 <__NVIC_SetPriority+0xd8>)
 8001432:	1dfb      	adds	r3, r7, #7
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	001c      	movs	r4, r3
 8001438:	230f      	movs	r3, #15
 800143a:	4023      	ands	r3, r4
 800143c:	3b08      	subs	r3, #8
 800143e:	089b      	lsrs	r3, r3, #2
 8001440:	430a      	orrs	r2, r1
 8001442:	3306      	adds	r3, #6
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	18c3      	adds	r3, r0, r3
 8001448:	3304      	adds	r3, #4
 800144a:	601a      	str	r2, [r3, #0]
}
 800144c:	46c0      	nop			@ (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b003      	add	sp, #12
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	e000e100 	.word	0xe000e100
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	2380      	movs	r3, #128	@ 0x80
 800146a:	045b      	lsls	r3, r3, #17
 800146c:	429a      	cmp	r2, r3
 800146e:	d301      	bcc.n	8001474 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001470:	2301      	movs	r3, #1
 8001472:	e010      	b.n	8001496 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001474:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <SysTick_Config+0x44>)
 8001476:	687a      	ldr	r2, [r7, #4]
 8001478:	3a01      	subs	r2, #1
 800147a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800147c:	2301      	movs	r3, #1
 800147e:	425b      	negs	r3, r3
 8001480:	2103      	movs	r1, #3
 8001482:	0018      	movs	r0, r3
 8001484:	f7ff ff7c 	bl	8001380 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001488:	4b05      	ldr	r3, [pc, #20]	@ (80014a0 <SysTick_Config+0x44>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800148e:	4b04      	ldr	r3, [pc, #16]	@ (80014a0 <SysTick_Config+0x44>)
 8001490:	2207      	movs	r2, #7
 8001492:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001494:	2300      	movs	r3, #0
}
 8001496:	0018      	movs	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	b002      	add	sp, #8
 800149c:	bd80      	pop	{r7, pc}
 800149e:	46c0      	nop			@ (mov r8, r8)
 80014a0:	e000e010 	.word	0xe000e010

080014a4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	210f      	movs	r1, #15
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	1c02      	adds	r2, r0, #0
 80014b4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80014b6:	68ba      	ldr	r2, [r7, #8]
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	b25b      	sxtb	r3, r3
 80014be:	0011      	movs	r1, r2
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ff5d 	bl	8001380 <__NVIC_SetPriority>
}
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	0002      	movs	r2, r0
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014da:	1dfb      	adds	r3, r7, #7
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	b25b      	sxtb	r3, r3
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff33 	bl	800134c <__NVIC_EnableIRQ>
}
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b002      	add	sp, #8
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	0018      	movs	r0, r3
 80014fa:	f7ff ffaf 	bl	800145c <SysTick_Config>
 80014fe:	0003      	movs	r3, r0
}
 8001500:	0018      	movs	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	b002      	add	sp, #8
 8001506:	bd80      	pop	{r7, pc}

08001508 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d101      	bne.n	800151a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e050      	b.n	80015bc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2225      	movs	r2, #37	@ 0x25
 800151e:	5c9b      	ldrb	r3, [r3, r2]
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d008      	beq.n	8001538 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2204      	movs	r2, #4
 800152a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2224      	movs	r2, #36	@ 0x24
 8001530:	2100      	movs	r1, #0
 8001532:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e041      	b.n	80015bc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	210e      	movs	r1, #14
 8001544:	438a      	bics	r2, r1
 8001546:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001552:	491c      	ldr	r1, [pc, #112]	@ (80015c4 <HAL_DMA_Abort+0xbc>)
 8001554:	400a      	ands	r2, r1
 8001556:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2101      	movs	r1, #1
 8001564:	438a      	bics	r2, r1
 8001566:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8001568:	4b17      	ldr	r3, [pc, #92]	@ (80015c8 <HAL_DMA_Abort+0xc0>)
 800156a:	6859      	ldr	r1, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001570:	221c      	movs	r2, #28
 8001572:	4013      	ands	r3, r2
 8001574:	2201      	movs	r2, #1
 8001576:	409a      	lsls	r2, r3
 8001578:	4b13      	ldr	r3, [pc, #76]	@ (80015c8 <HAL_DMA_Abort+0xc0>)
 800157a:	430a      	orrs	r2, r1
 800157c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001586:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800158c:	2b00      	cmp	r3, #0
 800158e:	d00c      	beq.n	80015aa <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800159a:	490a      	ldr	r1, [pc, #40]	@ (80015c4 <HAL_DMA_Abort+0xbc>)
 800159c:	400a      	ands	r2, r1
 800159e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80015a4:	687a      	ldr	r2, [r7, #4]
 80015a6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 80015a8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2225      	movs	r2, #37	@ 0x25
 80015ae:	2101      	movs	r1, #1
 80015b0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2224      	movs	r2, #36	@ 0x24
 80015b6:	2100      	movs	r1, #0
 80015b8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	fffffeff 	.word	0xfffffeff
 80015c8:	40020000 	.word	0x40020000

080015cc <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d4:	230f      	movs	r3, #15
 80015d6:	18fb      	adds	r3, r7, r3
 80015d8:	2200      	movs	r2, #0
 80015da:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2224      	movs	r2, #36	@ 0x24
 80015e0:	2100      	movs	r1, #0
 80015e2:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2224      	movs	r2, #36	@ 0x24
 80015e8:	5c9b      	ldrb	r3, [r3, r2]
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d101      	bne.n	80015f2 <HAL_DMA_Abort_IT+0x26>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e05e      	b.n	80016b0 <HAL_DMA_Abort_IT+0xe4>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2224      	movs	r2, #36	@ 0x24
 80015f6:	2101      	movs	r1, #1
 80015f8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2225      	movs	r2, #37	@ 0x25
 80015fe:	5c9b      	ldrb	r3, [r3, r2]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d007      	beq.n	8001616 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2204      	movs	r2, #4
 800160a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800160c:	230f      	movs	r3, #15
 800160e:	18fb      	adds	r3, r7, r3
 8001610:	2201      	movs	r2, #1
 8001612:	701a      	strb	r2, [r3, #0]
 8001614:	e049      	b.n	80016aa <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	210e      	movs	r1, #14
 8001622:	438a      	bics	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2101      	movs	r1, #1
 8001632:	438a      	bics	r2, r1
 8001634:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001640:	491d      	ldr	r1, [pc, #116]	@ (80016b8 <HAL_DMA_Abort_IT+0xec>)
 8001642:	400a      	ands	r2, r1
 8001644:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001646:	4b1d      	ldr	r3, [pc, #116]	@ (80016bc <HAL_DMA_Abort_IT+0xf0>)
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	221c      	movs	r2, #28
 8001650:	4013      	ands	r3, r2
 8001652:	2201      	movs	r2, #1
 8001654:	409a      	lsls	r2, r3
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_DMA_Abort_IT+0xf0>)
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001664:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800166a:	2b00      	cmp	r3, #0
 800166c:	d00c      	beq.n	8001688 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001678:	490f      	ldr	r1, [pc, #60]	@ (80016b8 <HAL_DMA_Abort_IT+0xec>)
 800167a:	400a      	ands	r2, r1
 800167c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001686:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2225      	movs	r2, #37	@ 0x25
 800168c:	2101      	movs	r1, #1
 800168e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2224      	movs	r2, #36	@ 0x24
 8001694:	2100      	movs	r1, #0
 8001696:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800169c:	2b00      	cmp	r3, #0
 800169e:	d004      	beq.n	80016aa <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80016a4:	687a      	ldr	r2, [r7, #4]
 80016a6:	0010      	movs	r0, r2
 80016a8:	4798      	blx	r3
    }
  }
  return status;
 80016aa:	230f      	movs	r3, #15
 80016ac:	18fb      	adds	r3, r7, r3
 80016ae:	781b      	ldrb	r3, [r3, #0]
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b004      	add	sp, #16
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	fffffeff 	.word	0xfffffeff
 80016bc:	40020000 	.word	0x40020000

080016c0 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80016ce:	e14d      	b.n	800196c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4091      	lsls	r1, r2
 80016da:	000a      	movs	r2, r1
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d100      	bne.n	80016e8 <HAL_GPIO_Init+0x28>
 80016e6:	e13e      	b.n	8001966 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d003      	beq.n	80016f8 <HAL_GPIO_Init+0x38>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b12      	cmp	r3, #18
 80016f6:	d125      	bne.n	8001744 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	08da      	lsrs	r2, r3, #3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3208      	adds	r2, #8
 8001700:	0092      	lsls	r2, r2, #2
 8001702:	58d3      	ldr	r3, [r2, r3]
 8001704:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	2207      	movs	r2, #7
 800170a:	4013      	ands	r3, r2
 800170c:	009b      	lsls	r3, r3, #2
 800170e:	220f      	movs	r2, #15
 8001710:	409a      	lsls	r2, r3
 8001712:	0013      	movs	r3, r2
 8001714:	43da      	mvns	r2, r3
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	4013      	ands	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	691b      	ldr	r3, [r3, #16]
 8001720:	220f      	movs	r2, #15
 8001722:	401a      	ands	r2, r3
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	2107      	movs	r1, #7
 8001728:	400b      	ands	r3, r1
 800172a:	009b      	lsls	r3, r3, #2
 800172c:	409a      	lsls	r2, r3
 800172e:	0013      	movs	r3, r2
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	4313      	orrs	r3, r2
 8001734:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001736:	693b      	ldr	r3, [r7, #16]
 8001738:	08da      	lsrs	r2, r3, #3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	3208      	adds	r2, #8
 800173e:	0092      	lsls	r2, r2, #2
 8001740:	6979      	ldr	r1, [r7, #20]
 8001742:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	2203      	movs	r2, #3
 8001750:	409a      	lsls	r2, r3
 8001752:	0013      	movs	r3, r2
 8001754:	43da      	mvns	r2, r3
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	2203      	movs	r2, #3
 8001762:	401a      	ands	r2, r3
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4313      	orrs	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d00b      	beq.n	8001798 <HAL_GPIO_Init+0xd8>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d007      	beq.n	8001798 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800178c:	2b11      	cmp	r3, #17
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	2b12      	cmp	r3, #18
 8001796:	d130      	bne.n	80017fa <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	005b      	lsls	r3, r3, #1
 80017a2:	2203      	movs	r2, #3
 80017a4:	409a      	lsls	r2, r3
 80017a6:	0013      	movs	r3, r2
 80017a8:	43da      	mvns	r2, r3
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	4013      	ands	r3, r2
 80017ae:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	68da      	ldr	r2, [r3, #12]
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	409a      	lsls	r2, r3
 80017ba:	0013      	movs	r3, r2
 80017bc:	697a      	ldr	r2, [r7, #20]
 80017be:	4313      	orrs	r3, r2
 80017c0:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	697a      	ldr	r2, [r7, #20]
 80017c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ce:	2201      	movs	r2, #1
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	409a      	lsls	r2, r3
 80017d4:	0013      	movs	r3, r2
 80017d6:	43da      	mvns	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	4013      	ands	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	2201      	movs	r2, #1
 80017e6:	401a      	ands	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	409a      	lsls	r2, r3
 80017ec:	0013      	movs	r3, r2
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d017      	beq.n	8001832 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	409a      	lsls	r2, r3
 8001810:	0013      	movs	r3, r2
 8001812:	43da      	mvns	r2, r3
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	4013      	ands	r3, r2
 8001818:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	697a      	ldr	r2, [r7, #20]
 8001828:	4313      	orrs	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	697a      	ldr	r2, [r7, #20]
 8001830:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	2380      	movs	r3, #128	@ 0x80
 8001838:	055b      	lsls	r3, r3, #21
 800183a:	4013      	ands	r3, r2
 800183c:	d100      	bne.n	8001840 <HAL_GPIO_Init+0x180>
 800183e:	e092      	b.n	8001966 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001840:	4a50      	ldr	r2, [pc, #320]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 8001842:	693b      	ldr	r3, [r7, #16]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3318      	adds	r3, #24
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	589b      	ldr	r3, [r3, r2]
 800184c:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	2203      	movs	r2, #3
 8001852:	4013      	ands	r3, r2
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	220f      	movs	r2, #15
 8001858:	409a      	lsls	r2, r3
 800185a:	0013      	movs	r3, r2
 800185c:	43da      	mvns	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	4013      	ands	r3, r2
 8001862:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	23a0      	movs	r3, #160	@ 0xa0
 8001868:	05db      	lsls	r3, r3, #23
 800186a:	429a      	cmp	r2, r3
 800186c:	d013      	beq.n	8001896 <HAL_GPIO_Init+0x1d6>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a45      	ldr	r2, [pc, #276]	@ (8001988 <HAL_GPIO_Init+0x2c8>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d00d      	beq.n	8001892 <HAL_GPIO_Init+0x1d2>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a44      	ldr	r2, [pc, #272]	@ (800198c <HAL_GPIO_Init+0x2cc>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d007      	beq.n	800188e <HAL_GPIO_Init+0x1ce>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a43      	ldr	r2, [pc, #268]	@ (8001990 <HAL_GPIO_Init+0x2d0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d101      	bne.n	800188a <HAL_GPIO_Init+0x1ca>
 8001886:	2305      	movs	r3, #5
 8001888:	e006      	b.n	8001898 <HAL_GPIO_Init+0x1d8>
 800188a:	2306      	movs	r3, #6
 800188c:	e004      	b.n	8001898 <HAL_GPIO_Init+0x1d8>
 800188e:	2302      	movs	r3, #2
 8001890:	e002      	b.n	8001898 <HAL_GPIO_Init+0x1d8>
 8001892:	2301      	movs	r3, #1
 8001894:	e000      	b.n	8001898 <HAL_GPIO_Init+0x1d8>
 8001896:	2300      	movs	r3, #0
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	2103      	movs	r1, #3
 800189c:	400a      	ands	r2, r1
 800189e:	00d2      	lsls	r2, r2, #3
 80018a0:	4093      	lsls	r3, r2
 80018a2:	697a      	ldr	r2, [r7, #20]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80018a8:	4936      	ldr	r1, [pc, #216]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	089b      	lsrs	r3, r3, #2
 80018ae:	3318      	adds	r3, #24
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	697a      	ldr	r2, [r7, #20]
 80018b4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80018b6:	4a33      	ldr	r2, [pc, #204]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	58d3      	ldr	r3, [r2, r3]
 80018bc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43da      	mvns	r2, r3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	4013      	ands	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	2380      	movs	r3, #128	@ 0x80
 80018ce:	025b      	lsls	r3, r3, #9
 80018d0:	4013      	ands	r3, r2
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 80018d4:	697a      	ldr	r2, [r7, #20]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80018dc:	4929      	ldr	r1, [pc, #164]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 80018de:	2280      	movs	r2, #128	@ 0x80
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80018e4:	4a27      	ldr	r2, [pc, #156]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 80018e6:	2384      	movs	r3, #132	@ 0x84
 80018e8:	58d3      	ldr	r3, [r2, r3]
 80018ea:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	43da      	mvns	r2, r3
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	4013      	ands	r3, r2
 80018f4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	2380      	movs	r3, #128	@ 0x80
 80018fc:	029b      	lsls	r3, r3, #10
 80018fe:	4013      	ands	r3, r2
 8001900:	d003      	beq.n	800190a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	4313      	orrs	r3, r2
 8001908:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800190a:	491e      	ldr	r1, [pc, #120]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 800190c:	2284      	movs	r2, #132	@ 0x84
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001912:	4b1c      	ldr	r3, [pc, #112]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43da      	mvns	r2, r3
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	4013      	ands	r3, r2
 8001920:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	2380      	movs	r3, #128	@ 0x80
 8001928:	035b      	lsls	r3, r3, #13
 800192a:	4013      	ands	r3, r2
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001936:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 8001938:	697a      	ldr	r2, [r7, #20]
 800193a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 800193c:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43da      	mvns	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4013      	ands	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	2380      	movs	r3, #128	@ 0x80
 8001952:	039b      	lsls	r3, r3, #14
 8001954:	4013      	ands	r3, r2
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001958:	697a      	ldr	r2, [r7, #20]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_GPIO_Init+0x2c4>)
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	3301      	adds	r3, #1
 800196a:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	40da      	lsrs	r2, r3
 8001974:	1e13      	subs	r3, r2, #0
 8001976:	d000      	beq.n	800197a <HAL_GPIO_Init+0x2ba>
 8001978:	e6aa      	b.n	80016d0 <HAL_GPIO_Init+0x10>
  }
}
 800197a:	46c0      	nop			@ (mov r8, r8)
 800197c:	46c0      	nop			@ (mov r8, r8)
 800197e:	46bd      	mov	sp, r7
 8001980:	b006      	add	sp, #24
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40021800 	.word	0x40021800
 8001988:	50000400 	.word	0x50000400
 800198c:	50000800 	.word	0x50000800
 8001990:	50001400 	.word	0x50001400

08001994 <HAL_PWR_EnableWakeUpPin>:
  * @note  PWR_WAKEUP_PINx and PWR_WAKEUP_PINx_HIGH are equivalent.
  * @note  (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_EnableWakeUpPin(uint32_t WakeUpPinPolarity)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinPolarity));

  /* Specifies the Wake-Up pin polarity for the event detection
    (rising or falling edge) */
  MODIFY_REG(PWR->CR4, (PWR_CR4_WP & WakeUpPinPolarity), (WakeUpPinPolarity >> PWR_WUP_POLARITY_SHIFT));
 800199c:	4b0c      	ldr	r3, [pc, #48]	@ (80019d0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	212f      	movs	r1, #47	@ 0x2f
 80019a4:	400a      	ands	r2, r1
 80019a6:	43d2      	mvns	r2, r2
 80019a8:	401a      	ands	r2, r3
 80019aa:	0011      	movs	r1, r2
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	0a1a      	lsrs	r2, r3, #8
 80019b0:	4b07      	ldr	r3, [pc, #28]	@ (80019d0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80019b2:	430a      	orrs	r2, r1
 80019b4:	60da      	str	r2, [r3, #12]

  /* Enable wake-up pin */
  SET_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinPolarity));
 80019b6:	4b06      	ldr	r3, [pc, #24]	@ (80019d0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80019b8:	6899      	ldr	r1, [r3, #8]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	222f      	movs	r2, #47	@ 0x2f
 80019be:	401a      	ands	r2, r3
 80019c0:	4b03      	ldr	r3, [pc, #12]	@ (80019d0 <HAL_PWR_EnableWakeUpPin+0x3c>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	609a      	str	r2, [r3, #8]
}
 80019c6:	46c0      	nop			@ (mov r8, r8)
 80019c8:	46bd      	mov	sp, r7
 80019ca:	b002      	add	sp, #8
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	40007000 	.word	0x40007000

080019d4 <HAL_PWR_DisableWakeUpPin>:
  *                PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5 (*), PWR_WAKEUP_PIN6
  * @note   (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 80019dc:	4b06      	ldr	r3, [pc, #24]	@ (80019f8 <HAL_PWR_DisableWakeUpPin+0x24>)
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	212f      	movs	r1, #47	@ 0x2f
 80019e4:	400b      	ands	r3, r1
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	4b03      	ldr	r3, [pc, #12]	@ (80019f8 <HAL_PWR_DisableWakeUpPin+0x24>)
 80019ea:	400a      	ands	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
}
 80019ee:	46c0      	nop			@ (mov r8, r8)
 80019f0:	46bd      	mov	sp, r7
 80019f2:	b002      	add	sp, #8
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	46c0      	nop			@ (mov r8, r8)
 80019f8:	40007000 	.word	0x40007000

080019fc <HAL_PWREx_EnterSHUTDOWNMode>:
  * @retval None

  * @retval None
  */
void HAL_PWREx_EnterSHUTDOWNMode(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* Set Shutdown mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_SHUTDOWN);
 8001a00:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2207      	movs	r2, #7
 8001a06:	4393      	bics	r3, r2
 8001a08:	001a      	movs	r2, r3
 8001a0a:	4b07      	ldr	r3, [pc, #28]	@ (8001a28 <HAL_PWREx_EnterSHUTDOWNMode+0x2c>)
 8001a0c:	2104      	movs	r1, #4
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8001a12:	4b06      	ldr	r3, [pc, #24]	@ (8001a2c <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001a14:	691a      	ldr	r2, [r3, #16]
 8001a16:	4b05      	ldr	r3, [pc, #20]	@ (8001a2c <HAL_PWREx_EnterSHUTDOWNMode+0x30>)
 8001a18:	2104      	movs	r1, #4
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	611a      	str	r2, [r3, #16]
#if defined ( __CC_ARM)
  __force_stores();
#endif /* __CC_ARM */

  /* Request Wait For Interrupt */
  __WFI();
 8001a1e:	bf30      	wfi
}
 8001a20:	46c0      	nop			@ (mov r8, r8)
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	46c0      	nop			@ (mov r8, r8)
 8001a28:	40007000 	.word	0x40007000
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d101      	bne.n	8001a42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e1d0      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	4013      	ands	r3, r2
 8001a4a:	d100      	bne.n	8001a4e <HAL_RCC_OscConfig+0x1e>
 8001a4c:	e069      	b.n	8001b22 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a4e:	4bc8      	ldr	r3, [pc, #800]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	2238      	movs	r2, #56	@ 0x38
 8001a54:	4013      	ands	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	2b08      	cmp	r3, #8
 8001a5c:	d105      	bne.n	8001a6a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d15d      	bne.n	8001b22 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e1bc      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	2380      	movs	r3, #128	@ 0x80
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	429a      	cmp	r2, r3
 8001a74:	d107      	bne.n	8001a86 <HAL_RCC_OscConfig+0x56>
 8001a76:	4bbe      	ldr	r3, [pc, #760]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	4bbd      	ldr	r3, [pc, #756]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001a7c:	2180      	movs	r1, #128	@ 0x80
 8001a7e:	0249      	lsls	r1, r1, #9
 8001a80:	430a      	orrs	r2, r1
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	e020      	b.n	8001ac8 <HAL_RCC_OscConfig+0x98>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	23a0      	movs	r3, #160	@ 0xa0
 8001a8c:	02db      	lsls	r3, r3, #11
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d10e      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x80>
 8001a92:	4bb7      	ldr	r3, [pc, #732]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	4bb6      	ldr	r3, [pc, #728]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001a98:	2180      	movs	r1, #128	@ 0x80
 8001a9a:	02c9      	lsls	r1, r1, #11
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	4bb3      	ldr	r3, [pc, #716]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	4bb2      	ldr	r3, [pc, #712]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001aa6:	2180      	movs	r1, #128	@ 0x80
 8001aa8:	0249      	lsls	r1, r1, #9
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x98>
 8001ab0:	4baf      	ldr	r3, [pc, #700]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4bae      	ldr	r3, [pc, #696]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001ab6:	49af      	ldr	r1, [pc, #700]	@ (8001d74 <HAL_RCC_OscConfig+0x344>)
 8001ab8:	400a      	ands	r2, r1
 8001aba:	601a      	str	r2, [r3, #0]
 8001abc:	4bac      	ldr	r3, [pc, #688]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4bab      	ldr	r3, [pc, #684]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001ac2:	49ad      	ldr	r1, [pc, #692]	@ (8001d78 <HAL_RCC_OscConfig+0x348>)
 8001ac4:	400a      	ands	r2, r1
 8001ac6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d014      	beq.n	8001afa <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad0:	f7ff fc0e 	bl	80012f0 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001ada:	f7ff fc09 	bl	80012f0 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	693b      	ldr	r3, [r7, #16]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	@ 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e17b      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aec:	4ba0      	ldr	r3, [pc, #640]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	029b      	lsls	r3, r3, #10
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0xaa>
 8001af8:	e013      	b.n	8001b22 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001afa:	f7ff fbf9 	bl	80012f0 <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b02:	e008      	b.n	8001b16 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001b04:	f7ff fbf4 	bl	80012f0 <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	2b64      	cmp	r3, #100	@ 0x64
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e166      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b16:	4b96      	ldr	r3, [pc, #600]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	2380      	movs	r3, #128	@ 0x80
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2202      	movs	r2, #2
 8001b28:	4013      	ands	r3, r2
 8001b2a:	d100      	bne.n	8001b2e <HAL_RCC_OscConfig+0xfe>
 8001b2c:	e086      	b.n	8001c3c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b2e:	4b90      	ldr	r3, [pc, #576]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	2238      	movs	r2, #56	@ 0x38
 8001b34:	4013      	ands	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d12f      	bne.n	8001b9e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d101      	bne.n	8001b4a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	e14c      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b4a:	4b89      	ldr	r3, [pc, #548]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	4a8b      	ldr	r2, [pc, #556]	@ (8001d7c <HAL_RCC_OscConfig+0x34c>)
 8001b50:	4013      	ands	r3, r2
 8001b52:	0019      	movs	r1, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	695b      	ldr	r3, [r3, #20]
 8001b58:	021a      	lsls	r2, r3, #8
 8001b5a:	4b85      	ldr	r3, [pc, #532]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d112      	bne.n	8001b8c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001b66:	4b82      	ldr	r3, [pc, #520]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a85      	ldr	r2, [pc, #532]	@ (8001d80 <HAL_RCC_OscConfig+0x350>)
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	0019      	movs	r1, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691a      	ldr	r2, [r3, #16]
 8001b74:	4b7e      	ldr	r3, [pc, #504]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001b76:	430a      	orrs	r2, r1
 8001b78:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001b7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	0adb      	lsrs	r3, r3, #11
 8001b80:	2207      	movs	r2, #7
 8001b82:	4013      	ands	r3, r2
 8001b84:	4a7f      	ldr	r2, [pc, #508]	@ (8001d84 <HAL_RCC_OscConfig+0x354>)
 8001b86:	40da      	lsrs	r2, r3
 8001b88:	4b7f      	ldr	r3, [pc, #508]	@ (8001d88 <HAL_RCC_OscConfig+0x358>)
 8001b8a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b8c:	4b7f      	ldr	r3, [pc, #508]	@ (8001d8c <HAL_RCC_OscConfig+0x35c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	0018      	movs	r0, r3
 8001b92:	f7ff fb51 	bl	8001238 <HAL_InitTick>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d050      	beq.n	8001c3c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e122      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d030      	beq.n	8001c08 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001ba6:	4b72      	ldr	r3, [pc, #456]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a75      	ldr	r2, [pc, #468]	@ (8001d80 <HAL_RCC_OscConfig+0x350>)
 8001bac:	4013      	ands	r3, r2
 8001bae:	0019      	movs	r1, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	691a      	ldr	r2, [r3, #16]
 8001bb4:	4b6e      	ldr	r3, [pc, #440]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001bb6:	430a      	orrs	r2, r1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001bba:	4b6d      	ldr	r3, [pc, #436]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	4b6c      	ldr	r3, [pc, #432]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001bc0:	2180      	movs	r1, #128	@ 0x80
 8001bc2:	0049      	lsls	r1, r1, #1
 8001bc4:	430a      	orrs	r2, r1
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb92 	bl	80012f0 <HAL_GetTick>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bd0:	e008      	b.n	8001be4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001bd2:	f7ff fb8d 	bl	80012f0 <HAL_GetTick>
 8001bd6:	0002      	movs	r2, r0
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d901      	bls.n	8001be4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001be0:	2303      	movs	r3, #3
 8001be2:	e0ff      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001be4:	4b62      	ldr	r3, [pc, #392]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2380      	movs	r3, #128	@ 0x80
 8001bea:	00db      	lsls	r3, r3, #3
 8001bec:	4013      	ands	r3, r2
 8001bee:	d0f0      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf0:	4b5f      	ldr	r3, [pc, #380]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	4a61      	ldr	r2, [pc, #388]	@ (8001d7c <HAL_RCC_OscConfig+0x34c>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	0019      	movs	r1, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	021a      	lsls	r2, r3, #8
 8001c00:	4b5b      	ldr	r3, [pc, #364]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001c02:	430a      	orrs	r2, r1
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	e019      	b.n	8001c3c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001c08:	4b59      	ldr	r3, [pc, #356]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	4b58      	ldr	r3, [pc, #352]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001c0e:	4960      	ldr	r1, [pc, #384]	@ (8001d90 <HAL_RCC_OscConfig+0x360>)
 8001c10:	400a      	ands	r2, r1
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fb6c 	bl	80012f0 <HAL_GetTick>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fb67 	bl	80012f0 <HAL_GetTick>
 8001c22:	0002      	movs	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e0d9      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c30:	4b4f      	ldr	r3, [pc, #316]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	2380      	movs	r3, #128	@ 0x80
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2208      	movs	r2, #8
 8001c42:	4013      	ands	r3, r2
 8001c44:	d042      	beq.n	8001ccc <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001c46:	4b4a      	ldr	r3, [pc, #296]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2238      	movs	r2, #56	@ 0x38
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	2b18      	cmp	r3, #24
 8001c50:	d105      	bne.n	8001c5e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d138      	bne.n	8001ccc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0c2      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d019      	beq.n	8001c9a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001c66:	4b42      	ldr	r3, [pc, #264]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001c68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c6a:	4b41      	ldr	r3, [pc, #260]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff fb3d 	bl	80012f0 <HAL_GetTick>
 8001c76:	0003      	movs	r3, r0
 8001c78:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001c7c:	f7ff fb38 	bl	80012f0 <HAL_GetTick>
 8001c80:	0002      	movs	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0aa      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001c8e:	4b38      	ldr	r3, [pc, #224]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c92:	2202      	movs	r2, #2
 8001c94:	4013      	ands	r3, r2
 8001c96:	d0f1      	beq.n	8001c7c <HAL_RCC_OscConfig+0x24c>
 8001c98:	e018      	b.n	8001ccc <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001c9a:	4b35      	ldr	r3, [pc, #212]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001c9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001c9e:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	438a      	bics	r2, r1
 8001ca4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca6:	f7ff fb23 	bl	80012f0 <HAL_GetTick>
 8001caa:	0003      	movs	r3, r0
 8001cac:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fb1e 	bl	80012f0 <HAL_GetTick>
 8001cb4:	0002      	movs	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e090      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001cc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	d1f1      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	d100      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x2a8>
 8001cd6:	e084      	b.n	8001de2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001cd8:	230f      	movs	r3, #15
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2200      	movs	r2, #0
 8001cde:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ce0:	4b23      	ldr	r3, [pc, #140]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	2238      	movs	r2, #56	@ 0x38
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	2b20      	cmp	r3, #32
 8001cea:	d106      	bne.n	8001cfa <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	689b      	ldr	r3, [r3, #8]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d000      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x2c6>
 8001cf4:	e075      	b.n	8001de2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e074      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d106      	bne.n	8001d10 <HAL_RCC_OscConfig+0x2e0>
 8001d02:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d04:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d06:	4b1a      	ldr	r3, [pc, #104]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d08:	2101      	movs	r1, #1
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d0e:	e01c      	b.n	8001d4a <HAL_RCC_OscConfig+0x31a>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d10c      	bne.n	8001d32 <HAL_RCC_OscConfig+0x302>
 8001d18:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d1a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d1c:	4b14      	ldr	r3, [pc, #80]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d1e:	2104      	movs	r1, #4
 8001d20:	430a      	orrs	r2, r1
 8001d22:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d24:	4b12      	ldr	r3, [pc, #72]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d30:	e00b      	b.n	8001d4a <HAL_RCC_OscConfig+0x31a>
 8001d32:	4b0f      	ldr	r3, [pc, #60]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d34:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d36:	4b0e      	ldr	r3, [pc, #56]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d38:	2101      	movs	r1, #1
 8001d3a:	438a      	bics	r2, r1
 8001d3c:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001d3e:	4b0c      	ldr	r3, [pc, #48]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001d42:	4b0b      	ldr	r3, [pc, #44]	@ (8001d70 <HAL_RCC_OscConfig+0x340>)
 8001d44:	2104      	movs	r1, #4
 8001d46:	438a      	bics	r2, r1
 8001d48:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	689b      	ldr	r3, [r3, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d028      	beq.n	8001da4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff facd 	bl	80012f0 <HAL_GetTick>
 8001d56:	0003      	movs	r3, r0
 8001d58:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d5a:	e01d      	b.n	8001d98 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5c:	f7ff fac8 	bl	80012f0 <HAL_GetTick>
 8001d60:	0002      	movs	r2, r0
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	4a0b      	ldr	r2, [pc, #44]	@ (8001d94 <HAL_RCC_OscConfig+0x364>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d915      	bls.n	8001d98 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e039      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
 8001d70:	40021000 	.word	0x40021000
 8001d74:	fffeffff 	.word	0xfffeffff
 8001d78:	fffbffff 	.word	0xfffbffff
 8001d7c:	ffff80ff 	.word	0xffff80ff
 8001d80:	ffffc7ff 	.word	0xffffc7ff
 8001d84:	02dc6c00 	.word	0x02dc6c00
 8001d88:	20000000 	.word	0x20000000
 8001d8c:	20000004 	.word	0x20000004
 8001d90:	fffffeff 	.word	0xfffffeff
 8001d94:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001d98:	4b14      	ldr	r3, [pc, #80]	@ (8001dec <HAL_RCC_OscConfig+0x3bc>)
 8001d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	4013      	ands	r3, r2
 8001da0:	d0dc      	beq.n	8001d5c <HAL_RCC_OscConfig+0x32c>
 8001da2:	e013      	b.n	8001dcc <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da4:	f7ff faa4 	bl	80012f0 <HAL_GetTick>
 8001da8:	0003      	movs	r3, r0
 8001daa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001dac:	e009      	b.n	8001dc2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dae:	f7ff fa9f 	bl	80012f0 <HAL_GetTick>
 8001db2:	0002      	movs	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	4a0d      	ldr	r2, [pc, #52]	@ (8001df0 <HAL_RCC_OscConfig+0x3c0>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e010      	b.n	8001de4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <HAL_RCC_OscConfig+0x3bc>)
 8001dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	4013      	ands	r3, r2
 8001dca:	d1f0      	bne.n	8001dae <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001dcc:	230f      	movs	r3, #15
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d105      	bne.n	8001de2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001dd6:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <HAL_RCC_OscConfig+0x3bc>)
 8001dd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001dda:	4b04      	ldr	r3, [pc, #16]	@ (8001dec <HAL_RCC_OscConfig+0x3bc>)
 8001ddc:	4905      	ldr	r1, [pc, #20]	@ (8001df4 <HAL_RCC_OscConfig+0x3c4>)
 8001dde:	400a      	ands	r2, r1
 8001de0:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	0018      	movs	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	b006      	add	sp, #24
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40021000 	.word	0x40021000
 8001df0:	00001388 	.word	0x00001388
 8001df4:	efffffff 	.word	0xefffffff

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0e9      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b76      	ldr	r3, [pc, #472]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2207      	movs	r2, #7
 8001e12:	4013      	ands	r3, r2
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d91e      	bls.n	8001e58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b73      	ldr	r3, [pc, #460]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2207      	movs	r2, #7
 8001e20:	4393      	bics	r3, r2
 8001e22:	0019      	movs	r1, r3
 8001e24:	4b70      	ldr	r3, [pc, #448]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e26:	683a      	ldr	r2, [r7, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e2c:	f7ff fa60 	bl	80012f0 <HAL_GetTick>
 8001e30:	0003      	movs	r3, r0
 8001e32:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e34:	e009      	b.n	8001e4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e36:	f7ff fa5b 	bl	80012f0 <HAL_GetTick>
 8001e3a:	0002      	movs	r2, r0
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	1ad3      	subs	r3, r2, r3
 8001e40:	4a6a      	ldr	r2, [pc, #424]	@ (8001fec <HAL_RCC_ClockConfig+0x1f4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e0ca      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e4a:	4b67      	ldr	r3, [pc, #412]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2207      	movs	r2, #7
 8001e50:	4013      	ands	r3, r2
 8001e52:	683a      	ldr	r2, [r7, #0]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d1ee      	bne.n	8001e36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	4013      	ands	r3, r2
 8001e60:	d017      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2204      	movs	r2, #4
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d008      	beq.n	8001e7e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001e6c:	4b60      	ldr	r3, [pc, #384]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	4a60      	ldr	r2, [pc, #384]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1fc>)
 8001e72:	401a      	ands	r2, r3
 8001e74:	4b5e      	ldr	r3, [pc, #376]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e76:	21b0      	movs	r1, #176	@ 0xb0
 8001e78:	0109      	lsls	r1, r1, #4
 8001e7a:	430a      	orrs	r2, r1
 8001e7c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7e:	4b5c      	ldr	r3, [pc, #368]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4a5d      	ldr	r2, [pc, #372]	@ (8001ff8 <HAL_RCC_ClockConfig+0x200>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	4b58      	ldr	r3, [pc, #352]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2201      	movs	r2, #1
 8001e98:	4013      	ands	r3, r2
 8001e9a:	d055      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001e9c:	4b54      	ldr	r3, [pc, #336]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	221c      	movs	r2, #28
 8001ea2:	4393      	bics	r3, r2
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	689a      	ldr	r2, [r3, #8]
 8001eaa:	4b51      	ldr	r3, [pc, #324]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb8:	4b4d      	ldr	r3, [pc, #308]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eba:	681a      	ldr	r2, [r3, #0]
 8001ebc:	2380      	movs	r3, #128	@ 0x80
 8001ebe:	029b      	lsls	r3, r3, #10
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d11f      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e08b      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed0:	4b47      	ldr	r3, [pc, #284]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	2380      	movs	r3, #128	@ 0x80
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d113      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e07f      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b03      	cmp	r3, #3
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001ee8:	4b41      	ldr	r3, [pc, #260]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001eea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001eec:	2202      	movs	r2, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d108      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e074      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001ef6:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e06d      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f04:	4b3a      	ldr	r3, [pc, #232]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2207      	movs	r2, #7
 8001f0a:	4393      	bics	r3, r2
 8001f0c:	0019      	movs	r1, r3
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	4b37      	ldr	r3, [pc, #220]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f14:	430a      	orrs	r2, r1
 8001f16:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f18:	f7ff f9ea 	bl	80012f0 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	e009      	b.n	8001f36 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7ff f9e5 	bl	80012f0 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	4a2f      	ldr	r2, [pc, #188]	@ (8001fec <HAL_RCC_ClockConfig+0x1f4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e054      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	4b2e      	ldr	r3, [pc, #184]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2238      	movs	r2, #56	@ 0x38
 8001f3c:	401a      	ands	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	429a      	cmp	r2, r3
 8001f46:	d1ec      	bne.n	8001f22 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f48:	4b27      	ldr	r3, [pc, #156]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2207      	movs	r2, #7
 8001f4e:	4013      	ands	r3, r2
 8001f50:	683a      	ldr	r2, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d21e      	bcs.n	8001f94 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f56:	4b24      	ldr	r3, [pc, #144]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2207      	movs	r2, #7
 8001f5c:	4393      	bics	r3, r2
 8001f5e:	0019      	movs	r1, r3
 8001f60:	4b21      	ldr	r3, [pc, #132]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	683a      	ldr	r2, [r7, #0]
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f68:	f7ff f9c2 	bl	80012f0 <HAL_GetTick>
 8001f6c:	0003      	movs	r3, r0
 8001f6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f70:	e009      	b.n	8001f86 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001f72:	f7ff f9bd 	bl	80012f0 <HAL_GetTick>
 8001f76:	0002      	movs	r2, r0
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001fec <HAL_RCC_ClockConfig+0x1f4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e02c      	b.n	8001fe0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001f86:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d1ee      	bne.n	8001f72 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2204      	movs	r2, #4
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d009      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001f9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	4a16      	ldr	r2, [pc, #88]	@ (8001ffc <HAL_RCC_ClockConfig+0x204>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	0019      	movs	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	691a      	ldr	r2, [r3, #16]
 8001fac:	4b10      	ldr	r3, [pc, #64]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fb2:	f000 f82b 	bl	800200c <HAL_RCC_GetSysClockFreq>
 8001fb6:	0001      	movs	r1, r0
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fba:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fbc:	0a1b      	lsrs	r3, r3, #8
 8001fbe:	220f      	movs	r2, #15
 8001fc0:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	@ (8002000 <HAL_RCC_ClockConfig+0x208>)
 8001fc4:	0092      	lsls	r2, r2, #2
 8001fc6:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001fc8:	221f      	movs	r2, #31
 8001fca:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001fcc:	000a      	movs	r2, r1
 8001fce:	40da      	lsrs	r2, r3
 8001fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8002004 <HAL_RCC_ClockConfig+0x20c>)
 8001fd2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002008 <HAL_RCC_ClockConfig+0x210>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff f92d 	bl	8001238 <HAL_InitTick>
 8001fde:	0003      	movs	r3, r0
}
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	b004      	add	sp, #16
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	40022000 	.word	0x40022000
 8001fec:	00001388 	.word	0x00001388
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	ffff84ff 	.word	0xffff84ff
 8001ff8:	fffff0ff 	.word	0xfffff0ff
 8001ffc:	ffff8fff 	.word	0xffff8fff
 8002000:	08006b48 	.word	0x08006b48
 8002004:	20000000 	.word	0x20000000
 8002008:	20000004 	.word	0x20000004

0800200c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8002012:	4b23      	ldr	r3, [pc, #140]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	089b      	lsrs	r3, r3, #2
 8002018:	2207      	movs	r2, #7
 800201a:	4013      	ands	r3, r2
 800201c:	3301      	adds	r3, #1
 800201e:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002020:	4b1f      	ldr	r3, [pc, #124]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2238      	movs	r2, #56	@ 0x38
 8002026:	4013      	ands	r3, r2
 8002028:	d10f      	bne.n	800204a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800202a:	4b1d      	ldr	r3, [pc, #116]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0adb      	lsrs	r3, r3, #11
 8002030:	2207      	movs	r2, #7
 8002032:	4013      	ands	r3, r2
 8002034:	2201      	movs	r2, #1
 8002036:	409a      	lsls	r2, r3
 8002038:	0013      	movs	r3, r2
 800203a:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4819      	ldr	r0, [pc, #100]	@ (80020a4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002040:	f7fe f874 	bl	800012c <__udivsi3>
 8002044:	0003      	movs	r3, r0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e01e      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800204a:	4b15      	ldr	r3, [pc, #84]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2238      	movs	r2, #56	@ 0x38
 8002050:	4013      	ands	r3, r2
 8002052:	2b08      	cmp	r3, #8
 8002054:	d102      	bne.n	800205c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002056:	4b14      	ldr	r3, [pc, #80]	@ (80020a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e015      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800205c:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2238      	movs	r2, #56	@ 0x38
 8002062:	4013      	ands	r3, r2
 8002064:	2b20      	cmp	r3, #32
 8002066:	d103      	bne.n	8002070 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002068:	2380      	movs	r3, #128	@ 0x80
 800206a:	021b      	lsls	r3, r3, #8
 800206c:	60fb      	str	r3, [r7, #12]
 800206e:	e00b      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002070:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	2238      	movs	r2, #56	@ 0x38
 8002076:	4013      	ands	r3, r2
 8002078:	2b18      	cmp	r3, #24
 800207a:	d103      	bne.n	8002084 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800207c:	23fa      	movs	r3, #250	@ 0xfa
 800207e:	01db      	lsls	r3, r3, #7
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	e001      	b.n	8002088 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8002088:	68b9      	ldr	r1, [r7, #8]
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f7fe f84e 	bl	800012c <__udivsi3>
 8002090:	0003      	movs	r3, r0
 8002092:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8002094:	68fb      	ldr	r3, [r7, #12]
}
 8002096:	0018      	movs	r0, r3
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	40021000 	.word	0x40021000
 80020a4:	02dc6c00 	.word	0x02dc6c00
 80020a8:	007a1200 	.word	0x007a1200

080020ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80020b0:	f7ff ffac 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80020b4:	0001      	movs	r1, r0
 80020b6:	4b09      	ldr	r3, [pc, #36]	@ (80020dc <HAL_RCC_GetHCLKFreq+0x30>)
 80020b8:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020ba:	0a1b      	lsrs	r3, r3, #8
 80020bc:	220f      	movs	r2, #15
 80020be:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80020c0:	4b07      	ldr	r3, [pc, #28]	@ (80020e0 <HAL_RCC_GetHCLKFreq+0x34>)
 80020c2:	0092      	lsls	r2, r2, #2
 80020c4:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80020c6:	221f      	movs	r2, #31
 80020c8:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80020ca:	000a      	movs	r2, r1
 80020cc:	40da      	lsrs	r2, r3
 80020ce:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <HAL_RCC_GetHCLKFreq+0x38>)
 80020d0:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80020d2:	4b04      	ldr	r3, [pc, #16]	@ (80020e4 <HAL_RCC_GetHCLKFreq+0x38>)
 80020d4:	681b      	ldr	r3, [r3, #0]
}
 80020d6:	0018      	movs	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	40021000 	.word	0x40021000
 80020e0:	08006b48 	.word	0x08006b48
 80020e4:	20000000 	.word	0x20000000

080020e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80020ec:	f7ff ffde 	bl	80020ac <HAL_RCC_GetHCLKFreq>
 80020f0:	0001      	movs	r1, r0
 80020f2:	4b07      	ldr	r3, [pc, #28]	@ (8002110 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	0b1b      	lsrs	r3, r3, #12
 80020f8:	2207      	movs	r2, #7
 80020fa:	401a      	ands	r2, r3
 80020fc:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80020fe:	0092      	lsls	r2, r2, #2
 8002100:	58d3      	ldr	r3, [r2, r3]
 8002102:	221f      	movs	r2, #31
 8002104:	4013      	ands	r3, r2
 8002106:	40d9      	lsrs	r1, r3
 8002108:	000b      	movs	r3, r1
}
 800210a:	0018      	movs	r0, r3
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000
 8002114:	08006b88 	.word	0x08006b88

08002118 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b086      	sub	sp, #24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002120:	2313      	movs	r3, #19
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002128:	2312      	movs	r3, #18
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2240      	movs	r2, #64	@ 0x40
 8002136:	4013      	ands	r3, r2
 8002138:	d100      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x24>
 800213a:	e079      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 800213c:	2011      	movs	r0, #17
 800213e:	183b      	adds	r3, r7, r0
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002144:	4b63      	ldr	r3, [pc, #396]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002146:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002148:	2380      	movs	r3, #128	@ 0x80
 800214a:	055b      	lsls	r3, r3, #21
 800214c:	4013      	ands	r3, r2
 800214e:	d110      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002150:	4b60      	ldr	r3, [pc, #384]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002152:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002154:	4b5f      	ldr	r3, [pc, #380]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002156:	2180      	movs	r1, #128	@ 0x80
 8002158:	0549      	lsls	r1, r1, #21
 800215a:	430a      	orrs	r2, r1
 800215c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800215e:	4b5d      	ldr	r3, [pc, #372]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002160:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002162:	2380      	movs	r3, #128	@ 0x80
 8002164:	055b      	lsls	r3, r3, #21
 8002166:	4013      	ands	r3, r2
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216c:	183b      	adds	r3, r7, r0
 800216e:	2201      	movs	r2, #1
 8002170:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002172:	4b58      	ldr	r3, [pc, #352]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002174:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002176:	23c0      	movs	r3, #192	@ 0xc0
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	4013      	ands	r3, r2
 800217c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d019      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	697a      	ldr	r2, [r7, #20]
 800218a:	429a      	cmp	r2, r3
 800218c:	d014      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800218e:	4b51      	ldr	r3, [pc, #324]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002192:	4a51      	ldr	r2, [pc, #324]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002194:	4013      	ands	r3, r2
 8002196:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002198:	4b4e      	ldr	r3, [pc, #312]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800219a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800219c:	4b4d      	ldr	r3, [pc, #308]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800219e:	2180      	movs	r1, #128	@ 0x80
 80021a0:	0249      	lsls	r1, r1, #9
 80021a2:	430a      	orrs	r2, r1
 80021a4:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021a6:	4b4b      	ldr	r3, [pc, #300]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80021aa:	4b4a      	ldr	r3, [pc, #296]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021ac:	494b      	ldr	r1, [pc, #300]	@ (80022dc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80021ae:	400a      	ands	r2, r1
 80021b0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80021b2:	4b48      	ldr	r3, [pc, #288]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2201      	movs	r2, #1
 80021bc:	4013      	ands	r3, r2
 80021be:	d016      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c0:	f7ff f896 	bl	80012f0 <HAL_GetTick>
 80021c4:	0003      	movs	r3, r0
 80021c6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021c8:	e00c      	b.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7ff f891 	bl	80012f0 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	4a42      	ldr	r2, [pc, #264]	@ (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d904      	bls.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80021da:	2313      	movs	r3, #19
 80021dc:	18fb      	adds	r3, r7, r3
 80021de:	2203      	movs	r2, #3
 80021e0:	701a      	strb	r2, [r3, #0]
          break;
 80021e2:	e004      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021e4:	4b3b      	ldr	r3, [pc, #236]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021e8:	2202      	movs	r2, #2
 80021ea:	4013      	ands	r3, r2
 80021ec:	d0ed      	beq.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80021ee:	2313      	movs	r3, #19
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021f8:	4b36      	ldr	r3, [pc, #216]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80021fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021fc:	4a36      	ldr	r2, [pc, #216]	@ (80022d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80021fe:	4013      	ands	r3, r2
 8002200:	0019      	movs	r1, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	699a      	ldr	r2, [r3, #24]
 8002206:	4b33      	ldr	r3, [pc, #204]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002208:	430a      	orrs	r2, r1
 800220a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800220c:	e005      	b.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800220e:	2312      	movs	r3, #18
 8002210:	18fb      	adds	r3, r7, r3
 8002212:	2213      	movs	r2, #19
 8002214:	18ba      	adds	r2, r7, r2
 8002216:	7812      	ldrb	r2, [r2, #0]
 8002218:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800221a:	2311      	movs	r3, #17
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b2b      	ldr	r3, [pc, #172]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002226:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002228:	4b2a      	ldr	r3, [pc, #168]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800222a:	492e      	ldr	r1, [pc, #184]	@ (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800222c:	400a      	ands	r2, r1
 800222e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2201      	movs	r2, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d009      	beq.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800223a:	4b26      	ldr	r3, [pc, #152]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800223c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800223e:	2203      	movs	r2, #3
 8002240:	4393      	bics	r3, r2
 8002242:	0019      	movs	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	4b22      	ldr	r3, [pc, #136]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800224a:	430a      	orrs	r2, r1
 800224c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2202      	movs	r2, #2
 8002254:	4013      	ands	r3, r2
 8002256:	d009      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002258:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	4a22      	ldr	r2, [pc, #136]	@ (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225e:	4013      	ands	r3, r2
 8002260:	0019      	movs	r1, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68da      	ldr	r2, [r3, #12]
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002268:	430a      	orrs	r2, r1
 800226a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2220      	movs	r2, #32
 8002272:	4013      	ands	r3, r2
 8002274:	d008      	beq.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002276:	4b17      	ldr	r3, [pc, #92]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	0899      	lsrs	r1, r3, #2
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695a      	ldr	r2, [r3, #20]
 8002282:	4b14      	ldr	r3, [pc, #80]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002284:	430a      	orrs	r2, r1
 8002286:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2204      	movs	r2, #4
 800228e:	4013      	ands	r3, r2
 8002290:	d009      	beq.n	80022a6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002292:	4b10      	ldr	r3, [pc, #64]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002294:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002296:	4a15      	ldr	r2, [pc, #84]	@ (80022ec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002298:	4013      	ands	r3, r2
 800229a:	0019      	movs	r1, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691a      	ldr	r2, [r3, #16]
 80022a0:	4b0c      	ldr	r3, [pc, #48]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022a2:	430a      	orrs	r2, r1
 80022a4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2280      	movs	r2, #128	@ 0x80
 80022ac:	4013      	ands	r3, r2
 80022ae:	d009      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80022b0:	4b08      	ldr	r3, [pc, #32]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	22e0      	movs	r2, #224	@ 0xe0
 80022b6:	4393      	bics	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	4b05      	ldr	r3, [pc, #20]	@ (80022d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]
  }
  return status;
 80022c4:	2312      	movs	r3, #18
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b006      	add	sp, #24
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	40021000 	.word	0x40021000
 80022d8:	fffffcff 	.word	0xfffffcff
 80022dc:	fffeffff 	.word	0xfffeffff
 80022e0:	00001388 	.word	0x00001388
 80022e4:	efffffff 	.word	0xefffffff
 80022e8:	ffffcfff 	.word	0xffffcfff
 80022ec:	ffff3fff 	.word	0xffff3fff

080022f0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80022f8:	230f      	movs	r3, #15
 80022fa:	18fb      	adds	r3, r7, r3
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d100      	bne.n	8002308 <HAL_RTC_Init+0x18>
 8002306:	e075      	b.n	80023f4 <HAL_RTC_Init+0x104>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2225      	movs	r2, #37	@ 0x25
 800230c:	5c9b      	ldrb	r3, [r3, r2]
 800230e:	b2db      	uxtb	r3, r3
 8002310:	2b00      	cmp	r3, #0
 8002312:	d107      	bne.n	8002324 <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2224      	movs	r2, #36	@ 0x24
 8002318:	2100      	movs	r1, #0
 800231a:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	0018      	movs	r0, r3
 8002320:	f7fe fdd2 	bl	8000ec8 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2225      	movs	r2, #37	@ 0x25
 8002328:	2102      	movs	r1, #2
 800232a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2210      	movs	r2, #16
 8002334:	4013      	ands	r3, r2
 8002336:	2b10      	cmp	r3, #16
 8002338:	d04f      	beq.n	80023da <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	22ca      	movs	r2, #202	@ 0xca
 8002340:	625a      	str	r2, [r3, #36]	@ 0x24
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2253      	movs	r2, #83	@ 0x53
 8002348:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800234a:	250f      	movs	r5, #15
 800234c:	197c      	adds	r4, r7, r5
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0018      	movs	r0, r3
 8002352:	f000 fbef 	bl	8002b34 <RTC_EnterInitMode>
 8002356:	0003      	movs	r3, r0
 8002358:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800235a:	0028      	movs	r0, r5
 800235c:	183b      	adds	r3, r7, r0
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d121      	bne.n	80023a8 <HAL_RTC_Init+0xb8>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL));
 8002364:	4b27      	ldr	r3, [pc, #156]	@ (8002404 <HAL_RTC_Init+0x114>)
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	4b26      	ldr	r3, [pc, #152]	@ (8002404 <HAL_RTC_Init+0x114>)
 800236a:	4927      	ldr	r1, [pc, #156]	@ (8002408 <HAL_RTC_Init+0x118>)
 800236c:	400a      	ands	r2, r1
 800236e:	619a      	str	r2, [r3, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8002370:	4b24      	ldr	r3, [pc, #144]	@ (8002404 <HAL_RTC_Init+0x114>)
 8002372:	6999      	ldr	r1, [r3, #24]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685a      	ldr	r2, [r3, #4]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	431a      	orrs	r2, r3
 8002384:	4b1f      	ldr	r3, [pc, #124]	@ (8002404 <HAL_RTC_Init+0x114>)
 8002386:	430a      	orrs	r2, r1
 8002388:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68d9      	ldr	r1, [r3, #12]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	041a      	lsls	r2, r3, #16
 8002394:	4b1b      	ldr	r3, [pc, #108]	@ (8002404 <HAL_RTC_Init+0x114>)
 8002396:	430a      	orrs	r2, r1
 8002398:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800239a:	183c      	adds	r4, r7, r0
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fc10 	bl	8002bc4 <RTC_ExitInitMode>
 80023a4:	0003      	movs	r3, r0
 80023a6:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 80023a8:	230f      	movs	r3, #15
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10e      	bne.n	80023d0 <HAL_RTC_Init+0xe0>
      {
        MODIFY_REG(RTC->CR, \
 80023b2:	4b14      	ldr	r3, [pc, #80]	@ (8002404 <HAL_RTC_Init+0x114>)
 80023b4:	699b      	ldr	r3, [r3, #24]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	08d9      	lsrs	r1, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1a      	ldr	r2, [r3, #32]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	431a      	orrs	r2, r3
 80023ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <HAL_RTC_Init+0x114>)
 80023cc:	430a      	orrs	r2, r1
 80023ce:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	22ff      	movs	r2, #255	@ 0xff
 80023d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80023d8:	e003      	b.n	80023e2 <HAL_RTC_Init+0xf2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80023da:	230f      	movs	r3, #15
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80023e2:	230f      	movs	r3, #15
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d103      	bne.n	80023f4 <HAL_RTC_Init+0x104>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2225      	movs	r2, #37	@ 0x25
 80023f0:	2101      	movs	r1, #1
 80023f2:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80023f4:	230f      	movs	r3, #15
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	781b      	ldrb	r3, [r3, #0]
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b004      	add	sp, #16
 8002400:	bdb0      	pop	{r4, r5, r7, pc}
 8002402:	46c0      	nop			@ (mov r8, r8)
 8002404:	40002800 	.word	0x40002800
 8002408:	ff8fffbf 	.word	0xff8fffbf

0800240c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800240c:	b5b0      	push	{r4, r5, r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2224      	movs	r2, #36	@ 0x24
 800241c:	5c9b      	ldrb	r3, [r3, r2]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d101      	bne.n	8002426 <HAL_RTC_SetTime+0x1a>
 8002422:	2302      	movs	r3, #2
 8002424:	e092      	b.n	800254c <HAL_RTC_SetTime+0x140>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2224      	movs	r2, #36	@ 0x24
 800242a:	2101      	movs	r1, #1
 800242c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2225      	movs	r2, #37	@ 0x25
 8002432:	2102      	movs	r1, #2
 8002434:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	22ca      	movs	r2, #202	@ 0xca
 800243c:	625a      	str	r2, [r3, #36]	@ 0x24
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2253      	movs	r2, #83	@ 0x53
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002446:	2513      	movs	r5, #19
 8002448:	197c      	adds	r4, r7, r5
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	0018      	movs	r0, r3
 800244e:	f000 fb71 	bl	8002b34 <RTC_EnterInitMode>
 8002452:	0003      	movs	r3, r0
 8002454:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002456:	197b      	adds	r3, r7, r5
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d162      	bne.n	8002524 <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d125      	bne.n	80024b0 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	699b      	ldr	r3, [r3, #24]
 800246a:	2240      	movs	r2, #64	@ 0x40
 800246c:	4013      	ands	r3, r2
 800246e:	d102      	bne.n	8002476 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2200      	movs	r2, #0
 8002474:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	0018      	movs	r0, r3
 800247c:	f000 fbe6 	bl	8002c4c <RTC_ByteToBcd2>
 8002480:	0003      	movs	r3, r0
 8002482:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	785b      	ldrb	r3, [r3, #1]
 8002488:	0018      	movs	r0, r3
 800248a:	f000 fbdf 	bl	8002c4c <RTC_ByteToBcd2>
 800248e:	0003      	movs	r3, r0
 8002490:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002492:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	789b      	ldrb	r3, [r3, #2]
 8002498:	0018      	movs	r0, r3
 800249a:	f000 fbd7 	bl	8002c4c <RTC_ByteToBcd2>
 800249e:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80024a0:	0022      	movs	r2, r4
 80024a2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	78db      	ldrb	r3, [r3, #3]
 80024a8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024aa:	4313      	orrs	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e017      	b.n	80024e0 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	2240      	movs	r2, #64	@ 0x40
 80024b8:	4013      	ands	r3, r2
 80024ba:	d102      	bne.n	80024c2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	2200      	movs	r2, #0
 80024c0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	785b      	ldrb	r3, [r3, #1]
 80024cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024ce:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80024d4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80024d6:	68bb      	ldr	r3, [r7, #8]
 80024d8:	78db      	ldrb	r3, [r3, #3]
 80024da:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	491b      	ldr	r1, [pc, #108]	@ (8002554 <HAL_RTC_SetTime+0x148>)
 80024e8:	400a      	ands	r2, r1
 80024ea:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	699a      	ldr	r2, [r3, #24]
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4918      	ldr	r1, [pc, #96]	@ (8002558 <HAL_RTC_SetTime+0x14c>)
 80024f8:	400a      	ands	r2, r1
 80024fa:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6999      	ldr	r1, [r3, #24]
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	68da      	ldr	r2, [r3, #12]
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	431a      	orrs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002514:	2313      	movs	r3, #19
 8002516:	18fc      	adds	r4, r7, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	0018      	movs	r0, r3
 800251c:	f000 fb52 	bl	8002bc4 <RTC_ExitInitMode>
 8002520:	0003      	movs	r3, r0
 8002522:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	22ff      	movs	r2, #255	@ 0xff
 800252a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800252c:	2313      	movs	r3, #19
 800252e:	18fb      	adds	r3, r7, r3
 8002530:	781b      	ldrb	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d103      	bne.n	800253e <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2225      	movs	r2, #37	@ 0x25
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	2224      	movs	r2, #36	@ 0x24
 8002542:	2100      	movs	r1, #0
 8002544:	5499      	strb	r1, [r3, r2]

  return status;
 8002546:	2313      	movs	r3, #19
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	781b      	ldrb	r3, [r3, #0]
}
 800254c:	0018      	movs	r0, r3
 800254e:	46bd      	mov	sp, r7
 8002550:	b006      	add	sp, #24
 8002552:	bdb0      	pop	{r4, r5, r7, pc}
 8002554:	007f7f7f 	.word	0x007f7f7f
 8002558:	fffbffff 	.word	0xfffbffff

0800255c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689a      	ldr	r2, [r3, #8]
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	045b      	lsls	r3, r3, #17
 800257a:	0c5a      	lsrs	r2, r3, #17
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a22      	ldr	r2, [pc, #136]	@ (8002610 <HAL_RTC_GetTime+0xb4>)
 8002588:	4013      	ands	r3, r2
 800258a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	b2db      	uxtb	r3, r3
 8002592:	223f      	movs	r2, #63	@ 0x3f
 8002594:	4013      	ands	r3, r2
 8002596:	b2da      	uxtb	r2, r3
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	0a1b      	lsrs	r3, r3, #8
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	227f      	movs	r2, #127	@ 0x7f
 80025a4:	4013      	ands	r3, r2
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	227f      	movs	r2, #127	@ 0x7f
 80025b2:	4013      	ands	r3, r2
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	0d9b      	lsrs	r3, r3, #22
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	2201      	movs	r2, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d11a      	bne.n	8002606 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	0018      	movs	r0, r3
 80025d6:	f000 fb61 	bl	8002c9c <RTC_Bcd2ToByte>
 80025da:	0003      	movs	r3, r0
 80025dc:	001a      	movs	r2, r3
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	0018      	movs	r0, r3
 80025e8:	f000 fb58 	bl	8002c9c <RTC_Bcd2ToByte>
 80025ec:	0003      	movs	r3, r0
 80025ee:	001a      	movs	r2, r3
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	789b      	ldrb	r3, [r3, #2]
 80025f8:	0018      	movs	r0, r3
 80025fa:	f000 fb4f 	bl	8002c9c <RTC_Bcd2ToByte>
 80025fe:	0003      	movs	r3, r0
 8002600:	001a      	movs	r2, r3
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	0018      	movs	r0, r3
 800260a:	46bd      	mov	sp, r7
 800260c:	b006      	add	sp, #24
 800260e:	bd80      	pop	{r7, pc}
 8002610:	007f7f7f 	.word	0x007f7f7f

08002614 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002614:	b5b0      	push	{r4, r5, r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2224      	movs	r2, #36	@ 0x24
 8002624:	5c9b      	ldrb	r3, [r3, r2]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_RTC_SetDate+0x1a>
 800262a:	2302      	movs	r3, #2
 800262c:	e07e      	b.n	800272c <HAL_RTC_SetDate+0x118>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2224      	movs	r2, #36	@ 0x24
 8002632:	2101      	movs	r1, #1
 8002634:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2225      	movs	r2, #37	@ 0x25
 800263a:	2102      	movs	r1, #2
 800263c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d10e      	bne.n	8002662 <HAL_RTC_SetDate+0x4e>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	001a      	movs	r2, r3
 800264a:	2310      	movs	r3, #16
 800264c:	4013      	ands	r3, r2
 800264e:	d008      	beq.n	8002662 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	785b      	ldrb	r3, [r3, #1]
 8002654:	2210      	movs	r2, #16
 8002656:	4393      	bics	r3, r2
 8002658:	b2db      	uxtb	r3, r3
 800265a:	330a      	adds	r3, #10
 800265c:	b2da      	uxtb	r2, r3
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d11c      	bne.n	80026a2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	78db      	ldrb	r3, [r3, #3]
 800266c:	0018      	movs	r0, r3
 800266e:	f000 faed 	bl	8002c4c <RTC_ByteToBcd2>
 8002672:	0003      	movs	r3, r0
 8002674:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	785b      	ldrb	r3, [r3, #1]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 fae6 	bl	8002c4c <RTC_ByteToBcd2>
 8002680:	0003      	movs	r3, r0
 8002682:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002684:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	789b      	ldrb	r3, [r3, #2]
 800268a:	0018      	movs	r0, r3
 800268c:	f000 fade 	bl	8002c4c <RTC_ByteToBcd2>
 8002690:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002692:	0022      	movs	r2, r4
 8002694:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	e00e      	b.n	80026c0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	78db      	ldrb	r3, [r3, #3]
 80026a6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	785b      	ldrb	r3, [r3, #1]
 80026ac:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80026ae:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80026b0:	68ba      	ldr	r2, [r7, #8]
 80026b2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80026b4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80026bc:	4313      	orrs	r3, r2
 80026be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	22ca      	movs	r2, #202	@ 0xca
 80026c6:	625a      	str	r2, [r3, #36]	@ 0x24
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2253      	movs	r2, #83	@ 0x53
 80026ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80026d0:	2513      	movs	r5, #19
 80026d2:	197c      	adds	r4, r7, r5
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 fa2c 	bl	8002b34 <RTC_EnterInitMode>
 80026dc:	0003      	movs	r3, r0
 80026de:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80026e0:	0028      	movs	r0, r5
 80026e2:	183b      	adds	r3, r7, r0
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10c      	bne.n	8002704 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	4910      	ldr	r1, [pc, #64]	@ (8002734 <HAL_RTC_SetDate+0x120>)
 80026f2:	400a      	ands	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80026f6:	183c      	adds	r4, r7, r0
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 fa62 	bl	8002bc4 <RTC_ExitInitMode>
 8002700:	0003      	movs	r3, r0
 8002702:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	22ff      	movs	r2, #255	@ 0xff
 800270a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 800270c:	2313      	movs	r3, #19
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d103      	bne.n	800271e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2225      	movs	r2, #37	@ 0x25
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2224      	movs	r2, #36	@ 0x24
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]

  return status;
 8002726:	2313      	movs	r3, #19
 8002728:	18fb      	adds	r3, r7, r3
 800272a:	781b      	ldrb	r3, [r3, #0]
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	b006      	add	sp, #24
 8002732:	bdb0      	pop	{r4, r5, r7, pc}
 8002734:	00ffff3f 	.word	0x00ffff3f

08002738 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(const RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a21      	ldr	r2, [pc, #132]	@ (80027d0 <HAL_RTC_GetDate+0x98>)
 800274c:	4013      	ands	r3, r2
 800274e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	0c1b      	lsrs	r3, r3, #16
 8002754:	b2da      	uxtb	r2, r3
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	0a1b      	lsrs	r3, r3, #8
 800275e:	b2db      	uxtb	r3, r3
 8002760:	221f      	movs	r2, #31
 8002762:	4013      	ands	r3, r2
 8002764:	b2da      	uxtb	r2, r3
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	b2db      	uxtb	r3, r3
 800276e:	223f      	movs	r2, #63	@ 0x3f
 8002770:	4013      	ands	r3, r2
 8002772:	b2da      	uxtb	r2, r3
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	0b5b      	lsrs	r3, r3, #13
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2207      	movs	r2, #7
 8002780:	4013      	ands	r3, r2
 8002782:	b2da      	uxtb	r2, r3
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11a      	bne.n	80027c4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	78db      	ldrb	r3, [r3, #3]
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fa82 	bl	8002c9c <RTC_Bcd2ToByte>
 8002798:	0003      	movs	r3, r0
 800279a:	001a      	movs	r2, r3
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	0018      	movs	r0, r3
 80027a6:	f000 fa79 	bl	8002c9c <RTC_Bcd2ToByte>
 80027aa:	0003      	movs	r3, r0
 80027ac:	001a      	movs	r2, r3
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	789b      	ldrb	r3, [r3, #2]
 80027b6:	0018      	movs	r0, r3
 80027b8:	f000 fa70 	bl	8002c9c <RTC_Bcd2ToByte>
 80027bc:	0003      	movs	r3, r0
 80027be:	001a      	movs	r2, r3
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80027c4:	2300      	movs	r3, #0
}
 80027c6:	0018      	movs	r0, r3
 80027c8:	46bd      	mov	sp, r7
 80027ca:	b006      	add	sp, #24
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	46c0      	nop			@ (mov r8, r8)
 80027d0:	00ffff3f 	.word	0x00ffff3f

080027d4 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b089      	sub	sp, #36	@ 0x24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	2224      	movs	r2, #36	@ 0x24
 80027e4:	5c9b      	ldrb	r3, [r3, r2]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d101      	bne.n	80027ee <HAL_RTC_SetAlarm_IT+0x1a>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e0d6      	b.n	800299c <HAL_RTC_SetAlarm_IT+0x1c8>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	2224      	movs	r2, #36	@ 0x24
 80027f2:	2101      	movs	r1, #1
 80027f4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2225      	movs	r2, #37	@ 0x25
 80027fa:	2102      	movs	r1, #2
 80027fc:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d136      	bne.n	8002872 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2240      	movs	r2, #64	@ 0x40
 800280c:	4013      	ands	r3, r2
 800280e:	d102      	bne.n	8002816 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2200      	movs	r2, #0
 8002814:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	0018      	movs	r0, r3
 800281c:	f000 fa16 	bl	8002c4c <RTC_ByteToBcd2>
 8002820:	0003      	movs	r3, r0
 8002822:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	785b      	ldrb	r3, [r3, #1]
 8002828:	0018      	movs	r0, r3
 800282a:	f000 fa0f 	bl	8002c4c <RTC_ByteToBcd2>
 800282e:	0003      	movs	r3, r0
 8002830:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002832:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	789b      	ldrb	r3, [r3, #2]
 8002838:	0018      	movs	r0, r3
 800283a:	f000 fa07 	bl	8002c4c <RTC_ByteToBcd2>
 800283e:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002840:	0022      	movs	r2, r4
 8002842:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	78db      	ldrb	r3, [r3, #3]
 8002848:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800284a:	431a      	orrs	r2, r3
 800284c:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	2220      	movs	r2, #32
 8002852:	5c9b      	ldrb	r3, [r3, r2]
 8002854:	0018      	movs	r0, r3
 8002856:	f000 f9f9 	bl	8002c4c <RTC_ByteToBcd2>
 800285a:	0003      	movs	r3, r0
 800285c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800285e:	0022      	movs	r2, r4
 8002860:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002866:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800286c:	4313      	orrs	r3, r2
 800286e:	61fb      	str	r3, [r7, #28]
 8002870:	e022      	b.n	80028b8 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2240      	movs	r2, #64	@ 0x40
 800287a:	4013      	ands	r3, r2
 800287c:	d102      	bne.n	8002884 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	2200      	movs	r2, #0
 8002882:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	785b      	ldrb	r3, [r3, #1]
 800288e:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002890:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002892:	68ba      	ldr	r2, [r7, #8]
 8002894:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002896:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	78db      	ldrb	r3, [r3, #3]
 800289c:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800289e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2120      	movs	r1, #32
 80028a4:	5c5b      	ldrb	r3, [r3, r1]
 80028a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80028a8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80028ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	685a      	ldr	r2, [r3, #4]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	699b      	ldr	r3, [r3, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	22ca      	movs	r2, #202	@ 0xca
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2253      	movs	r2, #83	@ 0x53
 80028d2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80028d8:	2380      	movs	r3, #128	@ 0x80
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	429a      	cmp	r2, r3
 80028de:	d147      	bne.n	8002970 <HAL_RTC_SetAlarm_IT+0x19c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	699a      	ldr	r2, [r3, #24]
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	492e      	ldr	r1, [pc, #184]	@ (80029a4 <HAL_RTC_SetAlarm_IT+0x1d0>)
 80028ec:	400a      	ands	r2, r1
 80028ee:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2201      	movs	r2, #1
 80028f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80028f8:	f7fe fcfa 	bl	80012f0 <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002900:	e016      	b.n	8002930 <HAL_RTC_SetAlarm_IT+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002902:	f7fe fcf5 	bl	80012f0 <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad2      	subs	r2, r2, r3
 800290c:	23fa      	movs	r3, #250	@ 0xfa
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	429a      	cmp	r2, r3
 8002912:	d90d      	bls.n	8002930 <HAL_RTC_SetAlarm_IT+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	22ff      	movs	r2, #255	@ 0xff
 800291a:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2225      	movs	r2, #37	@ 0x25
 8002920:	2103      	movs	r1, #3
 8002922:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2224      	movs	r2, #36	@ 0x24
 8002928:	2100      	movs	r1, #0
 800292a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e035      	b.n	800299c <HAL_RTC_SetAlarm_IT+0x1c8>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	4013      	ands	r3, r2
 800293a:	d0e2      	beq.n	8002902 <HAL_RTC_SetAlarm_IT+0x12e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	69ba      	ldr	r2, [r7, #24]
 800294a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699a      	ldr	r2, [r3, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2180      	movs	r1, #128	@ 0x80
 8002958:	0049      	lsls	r1, r1, #1
 800295a:	430a      	orrs	r2, r1
 800295c:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2180      	movs	r1, #128	@ 0x80
 800296a:	0149      	lsls	r1, r1, #5
 800296c:	430a      	orrs	r2, r1
 800296e:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8002970:	4a0d      	ldr	r2, [pc, #52]	@ (80029a8 <HAL_RTC_SetAlarm_IT+0x1d4>)
 8002972:	2380      	movs	r3, #128	@ 0x80
 8002974:	58d3      	ldr	r3, [r2, r3]
 8002976:	490c      	ldr	r1, [pc, #48]	@ (80029a8 <HAL_RTC_SetAlarm_IT+0x1d4>)
 8002978:	2280      	movs	r2, #128	@ 0x80
 800297a:	0312      	lsls	r2, r2, #12
 800297c:	4313      	orrs	r3, r2
 800297e:	2280      	movs	r2, #128	@ 0x80
 8002980:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	22ff      	movs	r2, #255	@ 0xff
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2225      	movs	r2, #37	@ 0x25
 800298e:	2101      	movs	r1, #1
 8002990:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2224      	movs	r2, #36	@ 0x24
 8002996:	2100      	movs	r1, #0
 8002998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	0018      	movs	r0, r3
 800299e:	46bd      	mov	sp, r7
 80029a0:	b009      	add	sp, #36	@ 0x24
 80029a2:	bd90      	pop	{r4, r7, pc}
 80029a4:	fffffeff 	.word	0xfffffeff
 80029a8:	40021800 	.word	0x40021800

080029ac <HAL_RTC_DeactivateAlarm>:
  *          This parameter can be one of the following values:
  *            @arg RTC_ALARM_A:  AlarmA
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2224      	movs	r2, #36	@ 0x24
 80029ba:	5c9b      	ldrb	r3, [r3, r2]
 80029bc:	2b01      	cmp	r3, #1
 80029be:	d101      	bne.n	80029c4 <HAL_RTC_DeactivateAlarm+0x18>
 80029c0:	2302      	movs	r3, #2
 80029c2:	e053      	b.n	8002a6c <HAL_RTC_DeactivateAlarm+0xc0>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2224      	movs	r2, #36	@ 0x24
 80029c8:	2101      	movs	r1, #1
 80029ca:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2225      	movs	r2, #37	@ 0x25
 80029d0:	2102      	movs	r1, #2
 80029d2:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	22ca      	movs	r2, #202	@ 0xca
 80029da:	625a      	str	r2, [r3, #36]	@ 0x24
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2253      	movs	r2, #83	@ 0x53
 80029e2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	2380      	movs	r3, #128	@ 0x80
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d131      	bne.n	8002a52 <HAL_RTC_DeactivateAlarm+0xa6>
  {
    /* AlarmA */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	699a      	ldr	r2, [r3, #24]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	491e      	ldr	r1, [pc, #120]	@ (8002a74 <HAL_RTC_DeactivateAlarm+0xc8>)
 80029fa:	400a      	ands	r2, r1
 80029fc:	619a      	str	r2, [r3, #24]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	699a      	ldr	r2, [r3, #24]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	491b      	ldr	r1, [pc, #108]	@ (8002a78 <HAL_RTC_DeactivateAlarm+0xcc>)
 8002a0a:	400a      	ands	r2, r1
 8002a0c:	619a      	str	r2, [r3, #24]

    tickstart = HAL_GetTick();
 8002a0e:	f7fe fc6f 	bl	80012f0 <HAL_GetTick>
 8002a12:	0003      	movs	r3, r0
 8002a14:	60fb      	str	r3, [r7, #12]

    /* Wait till RTC ALRxWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a16:	e016      	b.n	8002a46 <HAL_RTC_DeactivateAlarm+0x9a>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002a18:	f7fe fc6a 	bl	80012f0 <HAL_GetTick>
 8002a1c:	0002      	movs	r2, r0
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	1ad2      	subs	r2, r2, r3
 8002a22:	23fa      	movs	r3, #250	@ 0xfa
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d90d      	bls.n	8002a46 <HAL_RTC_DeactivateAlarm+0x9a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	22ff      	movs	r2, #255	@ 0xff
 8002a30:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2225      	movs	r2, #37	@ 0x25
 8002a36:	2103      	movs	r1, #3
 8002a38:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2224      	movs	r2, #36	@ 0x24
 8002a3e:	2100      	movs	r1, #0
 8002a40:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e012      	b.n	8002a6c <HAL_RTC_DeactivateAlarm+0xc0>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d0e2      	beq.n	8002a18 <HAL_RTC_DeactivateAlarm+0x6c>
      }
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	22ff      	movs	r2, #255	@ 0xff
 8002a58:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2225      	movs	r2, #37	@ 0x25
 8002a5e:	2101      	movs	r1, #1
 8002a60:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2224      	movs	r2, #36	@ 0x24
 8002a66:	2100      	movs	r1, #0
 8002a68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	0018      	movs	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	b004      	add	sp, #16
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	fffffeff 	.word	0xfffffeff
 8002a78:	ffffefff 	.word	0xffffefff

08002a7c <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	699a      	ldr	r2, [r3, #24]
 8002a8a:	2380      	movs	r3, #128	@ 0x80
 8002a8c:	015b      	lsls	r3, r3, #5
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d00d      	beq.n	8002aae <HAL_RTC_AlarmIRQHandler+0x32>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a98:	2201      	movs	r2, #1
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	d007      	beq.n	8002aae <HAL_RTC_AlarmIRQHandler+0x32>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f000 f808 	bl	8002abe <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2225      	movs	r2, #37	@ 0x25
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	5499      	strb	r1, [r3, r2]
}
 8002ab6:	46c0      	nop			@ (mov r8, r8)
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	b002      	add	sp, #8
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8002ac6:	46c0      	nop			@ (mov r8, r8)
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b002      	add	sp, #8
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8002ad8:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <HAL_RTC_WaitForSynchro+0x60>)
 8002ada:	68da      	ldr	r2, [r3, #12]
 8002adc:	4b14      	ldr	r3, [pc, #80]	@ (8002b30 <HAL_RTC_WaitForSynchro+0x60>)
 8002ade:	2120      	movs	r1, #32
 8002ae0:	438a      	bics	r2, r1
 8002ae2:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002ae4:	f7fe fc04 	bl	80012f0 <HAL_GetTick>
 8002ae8:	0003      	movs	r3, r0
 8002aea:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002aec:	e013      	b.n	8002b16 <HAL_RTC_WaitForSynchro+0x46>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002aee:	f7fe fbff 	bl	80012f0 <HAL_GetTick>
 8002af2:	0002      	movs	r2, r0
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	1ad2      	subs	r2, r2, r3
 8002af8:	23fa      	movs	r3, #250	@ 0xfa
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d90a      	bls.n	8002b16 <HAL_RTC_WaitForSynchro+0x46>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002b00:	4b0b      	ldr	r3, [pc, #44]	@ (8002b30 <HAL_RTC_WaitForSynchro+0x60>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	2220      	movs	r2, #32
 8002b06:	4013      	ands	r3, r2
 8002b08:	d10b      	bne.n	8002b22 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2225      	movs	r2, #37	@ 0x25
 8002b0e:	2103      	movs	r1, #3
 8002b10:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e007      	b.n	8002b26 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002b16:	4b06      	ldr	r3, [pc, #24]	@ (8002b30 <HAL_RTC_WaitForSynchro+0x60>)
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	d0e6      	beq.n	8002aee <HAL_RTC_WaitForSynchro+0x1e>
 8002b20:	e000      	b.n	8002b24 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8002b22:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 8002b24:	2300      	movs	r3, #0
}
 8002b26:	0018      	movs	r0, r3
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	b004      	add	sp, #16
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	46c0      	nop			@ (mov r8, r8)
 8002b30:	40002800 	.word	0x40002800

08002b34 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b3c:	230f      	movs	r3, #15
 8002b3e:	18fb      	adds	r3, r7, r3
 8002b40:	2200      	movs	r2, #0
 8002b42:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002b44:	4b1e      	ldr	r3, [pc, #120]	@ (8002bc0 <RTC_EnterInitMode+0x8c>)
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	2240      	movs	r2, #64	@ 0x40
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d130      	bne.n	8002bb0 <RTC_EnterInitMode+0x7c>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc0 <RTC_EnterInitMode+0x8c>)
 8002b50:	68da      	ldr	r2, [r3, #12]
 8002b52:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc0 <RTC_EnterInitMode+0x8c>)
 8002b54:	2180      	movs	r1, #128	@ 0x80
 8002b56:	430a      	orrs	r2, r1
 8002b58:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002b5a:	f7fe fbc9 	bl	80012f0 <HAL_GetTick>
 8002b5e:	0003      	movs	r3, r0
 8002b60:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b62:	e019      	b.n	8002b98 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002b64:	f7fe fbc4 	bl	80012f0 <HAL_GetTick>
 8002b68:	0002      	movs	r2, r0
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	1ad2      	subs	r2, r2, r3
 8002b6e:	200f      	movs	r0, #15
 8002b70:	183b      	adds	r3, r7, r0
 8002b72:	1839      	adds	r1, r7, r0
 8002b74:	7809      	ldrb	r1, [r1, #0]
 8002b76:	7019      	strb	r1, [r3, #0]
 8002b78:	23fa      	movs	r3, #250	@ 0xfa
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d90b      	bls.n	8002b98 <RTC_EnterInitMode+0x64>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002b80:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc0 <RTC_EnterInitMode+0x8c>)
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	2240      	movs	r2, #64	@ 0x40
 8002b86:	4013      	ands	r3, r2
 8002b88:	d111      	bne.n	8002bae <RTC_EnterInitMode+0x7a>
        {
          status = HAL_TIMEOUT;
 8002b8a:	183b      	adds	r3, r7, r0
 8002b8c:	2203      	movs	r2, #3
 8002b8e:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2225      	movs	r2, #37	@ 0x25
 8002b94:	2103      	movs	r1, #3
 8002b96:	5499      	strb	r1, [r3, r2]
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002b98:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <RTC_EnterInitMode+0x8c>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	2240      	movs	r2, #64	@ 0x40
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	d106      	bne.n	8002bb0 <RTC_EnterInitMode+0x7c>
 8002ba2:	230f      	movs	r3, #15
 8002ba4:	18fb      	adds	r3, r7, r3
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d1db      	bne.n	8002b64 <RTC_EnterInitMode+0x30>
 8002bac:	e000      	b.n	8002bb0 <RTC_EnterInitMode+0x7c>
        }
        else
        {
          break;
 8002bae:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return status;
 8002bb0:	230f      	movs	r3, #15
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	781b      	ldrb	r3, [r3, #0]
}
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	b004      	add	sp, #16
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	46c0      	nop			@ (mov r8, r8)
 8002bc0:	40002800 	.word	0x40002800

08002bc4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bcc:	240f      	movs	r4, #15
 8002bce:	193b      	adds	r3, r7, r4
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8002c48 <RTC_ExitInitMode+0x84>)
 8002bd6:	68da      	ldr	r2, [r3, #12]
 8002bd8:	4b1b      	ldr	r3, [pc, #108]	@ (8002c48 <RTC_ExitInitMode+0x84>)
 8002bda:	2180      	movs	r1, #128	@ 0x80
 8002bdc:	438a      	bics	r2, r1
 8002bde:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002be0:	4b19      	ldr	r3, [pc, #100]	@ (8002c48 <RTC_ExitInitMode+0x84>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	2220      	movs	r2, #32
 8002be6:	4013      	ands	r3, r2
 8002be8:	d10d      	bne.n	8002c06 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f7ff ff6f 	bl	8002ad0 <HAL_RTC_WaitForSynchro>
 8002bf2:	1e03      	subs	r3, r0, #0
 8002bf4:	d021      	beq.n	8002c3a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2225      	movs	r2, #37	@ 0x25
 8002bfa:	2103      	movs	r1, #3
 8002bfc:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002bfe:	193b      	adds	r3, r7, r4
 8002c00:	2203      	movs	r2, #3
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e019      	b.n	8002c3a <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c06:	4b10      	ldr	r3, [pc, #64]	@ (8002c48 <RTC_ExitInitMode+0x84>)
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002c48 <RTC_ExitInitMode+0x84>)
 8002c0c:	2120      	movs	r1, #32
 8002c0e:	438a      	bics	r2, r1
 8002c10:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7ff ff5b 	bl	8002ad0 <HAL_RTC_WaitForSynchro>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d007      	beq.n	8002c2e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2225      	movs	r2, #37	@ 0x25
 8002c22:	2103      	movs	r1, #3
 8002c24:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002c26:	230f      	movs	r3, #15
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2203      	movs	r2, #3
 8002c2c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002c2e:	4b06      	ldr	r3, [pc, #24]	@ (8002c48 <RTC_ExitInitMode+0x84>)
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	4b05      	ldr	r3, [pc, #20]	@ (8002c48 <RTC_ExitInitMode+0x84>)
 8002c34:	2120      	movs	r1, #32
 8002c36:	430a      	orrs	r2, r1
 8002c38:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002c3a:	230f      	movs	r3, #15
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	781b      	ldrb	r3, [r3, #0]
}
 8002c40:	0018      	movs	r0, r3
 8002c42:	46bd      	mov	sp, r7
 8002c44:	b005      	add	sp, #20
 8002c46:	bd90      	pop	{r4, r7, pc}
 8002c48:	40002800 	.word	0x40002800

08002c4c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	0002      	movs	r2, r0
 8002c54:	1dfb      	adds	r3, r7, #7
 8002c56:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002c5c:	230b      	movs	r3, #11
 8002c5e:	18fb      	adds	r3, r7, r3
 8002c60:	1dfa      	adds	r2, r7, #7
 8002c62:	7812      	ldrb	r2, [r2, #0]
 8002c64:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002c66:	e008      	b.n	8002c7a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	3301      	adds	r3, #1
 8002c6c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002c6e:	220b      	movs	r2, #11
 8002c70:	18bb      	adds	r3, r7, r2
 8002c72:	18ba      	adds	r2, r7, r2
 8002c74:	7812      	ldrb	r2, [r2, #0]
 8002c76:	3a0a      	subs	r2, #10
 8002c78:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002c7a:	210b      	movs	r1, #11
 8002c7c:	187b      	adds	r3, r7, r1
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b09      	cmp	r3, #9
 8002c82:	d8f1      	bhi.n	8002c68 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	187b      	adds	r3, r7, r1
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	b2db      	uxtb	r3, r3
}
 8002c94:	0018      	movs	r0, r3
 8002c96:	46bd      	mov	sp, r7
 8002c98:	b004      	add	sp, #16
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	0002      	movs	r2, r0
 8002ca4:	1dfb      	adds	r3, r7, #7
 8002ca6:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002ca8:	1dfb      	adds	r3, r7, #7
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	001a      	movs	r2, r3
 8002cb2:	0013      	movs	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	189b      	adds	r3, r3, r2
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	210f      	movs	r1, #15
 8002cc6:	400b      	ands	r3, r1
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	18d3      	adds	r3, r2, r3
 8002ccc:	b2db      	uxtb	r3, r3
}
 8002cce:	0018      	movs	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b004      	add	sp, #16
 8002cd4:	bd80      	pop	{r7, pc}
	...

08002cd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e046      	b.n	8002d78 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2288      	movs	r2, #136	@ 0x88
 8002cee:	589b      	ldr	r3, [r3, r2]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2284      	movs	r2, #132	@ 0x84
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7fe f928 	bl	8000f54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2288      	movs	r2, #136	@ 0x88
 8002d08:	2124      	movs	r1, #36	@ 0x24
 8002d0a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2101      	movs	r1, #1
 8002d18:	438a      	bics	r2, r1
 8002d1a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d003      	beq.n	8002d2c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	0018      	movs	r0, r3
 8002d28:	f000 fe10 	bl	800394c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	0018      	movs	r0, r3
 8002d30:	f000 fc8e 	bl	8003650 <UART_SetConfig>
 8002d34:	0003      	movs	r3, r0
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d101      	bne.n	8002d3e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e01c      	b.n	8002d78 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	490d      	ldr	r1, [pc, #52]	@ (8002d80 <HAL_UART_Init+0xa8>)
 8002d4a:	400a      	ands	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	212a      	movs	r1, #42	@ 0x2a
 8002d5a:	438a      	bics	r2, r1
 8002d5c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	2101      	movs	r1, #1
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f000 fe9f 	bl	8003ab4 <UART_CheckIdleState>
 8002d76:	0003      	movs	r3, r0
}
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	ffffb7ff 	.word	0xffffb7ff

08002d84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b08a      	sub	sp, #40	@ 0x28
 8002d88:	af02      	add	r7, sp, #8
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	1dbb      	adds	r3, r7, #6
 8002d92:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2288      	movs	r2, #136	@ 0x88
 8002d98:	589b      	ldr	r3, [r3, r2]
 8002d9a:	2b20      	cmp	r3, #32
 8002d9c:	d000      	beq.n	8002da0 <HAL_UART_Transmit+0x1c>
 8002d9e:	e090      	b.n	8002ec2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_UART_Transmit+0x2a>
 8002da6:	1dbb      	adds	r3, r7, #6
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d101      	bne.n	8002db2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e088      	b.n	8002ec4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	2380      	movs	r3, #128	@ 0x80
 8002db8:	015b      	lsls	r3, r3, #5
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d109      	bne.n	8002dd2 <HAL_UART_Transmit+0x4e>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d105      	bne.n	8002dd2 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4013      	ands	r3, r2
 8002dcc:	d001      	beq.n	8002dd2 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e078      	b.n	8002ec4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2290      	movs	r2, #144	@ 0x90
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2288      	movs	r2, #136	@ 0x88
 8002dde:	2121      	movs	r1, #33	@ 0x21
 8002de0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002de2:	f7fe fa85 	bl	80012f0 <HAL_GetTick>
 8002de6:	0003      	movs	r3, r0
 8002de8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1dba      	adds	r2, r7, #6
 8002dee:	2154      	movs	r1, #84	@ 0x54
 8002df0:	8812      	ldrh	r2, [r2, #0]
 8002df2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	1dba      	adds	r2, r7, #6
 8002df8:	2156      	movs	r1, #86	@ 0x56
 8002dfa:	8812      	ldrh	r2, [r2, #0]
 8002dfc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	2380      	movs	r3, #128	@ 0x80
 8002e04:	015b      	lsls	r3, r3, #5
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d108      	bne.n	8002e1c <HAL_UART_Transmit+0x98>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d104      	bne.n	8002e1c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	e003      	b.n	8002e24 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e20:	2300      	movs	r3, #0
 8002e22:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e24:	e030      	b.n	8002e88 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e26:	697a      	ldr	r2, [r7, #20]
 8002e28:	68f8      	ldr	r0, [r7, #12]
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	0013      	movs	r3, r2
 8002e30:	2200      	movs	r2, #0
 8002e32:	2180      	movs	r1, #128	@ 0x80
 8002e34:	f000 fee8 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8002e38:	1e03      	subs	r3, r0, #0
 8002e3a:	d005      	beq.n	8002e48 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2288      	movs	r2, #136	@ 0x88
 8002e40:	2120      	movs	r1, #32
 8002e42:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002e44:	2303      	movs	r3, #3
 8002e46:	e03d      	b.n	8002ec4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10b      	bne.n	8002e66 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e4e:	69bb      	ldr	r3, [r7, #24]
 8002e50:	881b      	ldrh	r3, [r3, #0]
 8002e52:	001a      	movs	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	05d2      	lsls	r2, r2, #23
 8002e5a:	0dd2      	lsrs	r2, r2, #23
 8002e5c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	3302      	adds	r3, #2
 8002e62:	61bb      	str	r3, [r7, #24]
 8002e64:	e007      	b.n	8002e76 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	781a      	ldrb	r2, [r3, #0]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	3301      	adds	r3, #1
 8002e74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2256      	movs	r2, #86	@ 0x56
 8002e7a:	5a9b      	ldrh	r3, [r3, r2]
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	b299      	uxth	r1, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2256      	movs	r2, #86	@ 0x56
 8002e86:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2256      	movs	r2, #86	@ 0x56
 8002e8c:	5a9b      	ldrh	r3, [r3, r2]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d1c8      	bne.n	8002e26 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e94:	697a      	ldr	r2, [r7, #20]
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	0013      	movs	r3, r2
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2140      	movs	r1, #64	@ 0x40
 8002ea2:	f000 feb1 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d005      	beq.n	8002eb6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2288      	movs	r2, #136	@ 0x88
 8002eae:	2120      	movs	r1, #32
 8002eb0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e006      	b.n	8002ec4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2288      	movs	r2, #136	@ 0x88
 8002eba:	2120      	movs	r1, #32
 8002ebc:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	e000      	b.n	8002ec4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002ec2:	2302      	movs	r3, #2
  }
}
 8002ec4:	0018      	movs	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	b008      	add	sp, #32
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	1dbb      	adds	r3, r7, #6
 8002ed8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	228c      	movs	r2, #140	@ 0x8c
 8002ede:	589b      	ldr	r3, [r3, r2]
 8002ee0:	2b20      	cmp	r3, #32
 8002ee2:	d145      	bne.n	8002f70 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d003      	beq.n	8002ef2 <HAL_UART_Receive_IT+0x26>
 8002eea:	1dbb      	adds	r3, r7, #6
 8002eec:	881b      	ldrh	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e03d      	b.n	8002f72 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689a      	ldr	r2, [r3, #8]
 8002efa:	2380      	movs	r3, #128	@ 0x80
 8002efc:	015b      	lsls	r3, r3, #5
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d109      	bne.n	8002f16 <HAL_UART_Receive_IT+0x4a>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d105      	bne.n	8002f16 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	4013      	ands	r3, r2
 8002f10:	d001      	beq.n	8002f16 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e02d      	b.n	8002f72 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	2380      	movs	r3, #128	@ 0x80
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	4013      	ands	r3, r2
 8002f28:	d019      	beq.n	8002f5e <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2e:	613b      	str	r3, [r7, #16]
  return(result);
 8002f30:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	2301      	movs	r3, #1
 8002f36:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	f383 8810 	msr	PRIMASK, r3
}
 8002f3e:	46c0      	nop			@ (mov r8, r8)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2180      	movs	r1, #128	@ 0x80
 8002f4c:	04c9      	lsls	r1, r1, #19
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	f383 8810 	msr	PRIMASK, r3
}
 8002f5c:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f5e:	1dbb      	adds	r3, r7, #6
 8002f60:	881a      	ldrh	r2, [r3, #0]
 8002f62:	68b9      	ldr	r1, [r7, #8]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	0018      	movs	r0, r3
 8002f68:	f000 febe 	bl	8003ce8 <UART_Start_Receive_IT>
 8002f6c:	0003      	movs	r3, r0
 8002f6e:	e000      	b.n	8002f72 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002f70:	2302      	movs	r3, #2
  }
}
 8002f72:	0018      	movs	r0, r3
 8002f74:	46bd      	mov	sp, r7
 8002f76:	b008      	add	sp, #32
 8002f78:	bd80      	pop	{r7, pc}
	...

08002f7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f7c:	b5b0      	push	{r4, r5, r7, lr}
 8002f7e:	b0aa      	sub	sp, #168	@ 0xa8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	22a4      	movs	r2, #164	@ 0xa4
 8002f8c:	18b9      	adds	r1, r7, r2
 8002f8e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	20a0      	movs	r0, #160	@ 0xa0
 8002f98:	1839      	adds	r1, r7, r0
 8002f9a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	249c      	movs	r4, #156	@ 0x9c
 8002fa4:	1939      	adds	r1, r7, r4
 8002fa6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002fa8:	0011      	movs	r1, r2
 8002faa:	18bb      	adds	r3, r7, r2
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4aa2      	ldr	r2, [pc, #648]	@ (8003238 <HAL_UART_IRQHandler+0x2bc>)
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2298      	movs	r2, #152	@ 0x98
 8002fb4:	18bd      	adds	r5, r7, r2
 8002fb6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002fb8:	18bb      	adds	r3, r7, r2
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d11a      	bne.n	8002ff6 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002fc0:	187b      	adds	r3, r7, r1
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	d015      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002fca:	183b      	adds	r3, r7, r0
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2220      	movs	r2, #32
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	d105      	bne.n	8002fe0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002fd4:	193b      	adds	r3, r7, r4
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	2380      	movs	r3, #128	@ 0x80
 8002fda:	055b      	lsls	r3, r3, #21
 8002fdc:	4013      	ands	r3, r2
 8002fde:	d00a      	beq.n	8002ff6 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d100      	bne.n	8002fea <HAL_UART_IRQHandler+0x6e>
 8002fe8:	e2fb      	b.n	80035e2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	0010      	movs	r0, r2
 8002ff2:	4798      	blx	r3
      }
      return;
 8002ff4:	e2f5      	b.n	80035e2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002ff6:	2398      	movs	r3, #152	@ 0x98
 8002ff8:	18fb      	adds	r3, r7, r3
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d100      	bne.n	8003002 <HAL_UART_IRQHandler+0x86>
 8003000:	e122      	b.n	8003248 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003002:	239c      	movs	r3, #156	@ 0x9c
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a8c      	ldr	r2, [pc, #560]	@ (800323c <HAL_UART_IRQHandler+0x2c0>)
 800300a:	4013      	ands	r3, r2
 800300c:	d106      	bne.n	800301c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800300e:	23a0      	movs	r3, #160	@ 0xa0
 8003010:	18fb      	adds	r3, r7, r3
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	4a8a      	ldr	r2, [pc, #552]	@ (8003240 <HAL_UART_IRQHandler+0x2c4>)
 8003016:	4013      	ands	r3, r2
 8003018:	d100      	bne.n	800301c <HAL_UART_IRQHandler+0xa0>
 800301a:	e115      	b.n	8003248 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800301c:	23a4      	movs	r3, #164	@ 0xa4
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2201      	movs	r2, #1
 8003024:	4013      	ands	r3, r2
 8003026:	d012      	beq.n	800304e <HAL_UART_IRQHandler+0xd2>
 8003028:	23a0      	movs	r3, #160	@ 0xa0
 800302a:	18fb      	adds	r3, r7, r3
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	2380      	movs	r3, #128	@ 0x80
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	4013      	ands	r3, r2
 8003034:	d00b      	beq.n	800304e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2201      	movs	r2, #1
 800303c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2290      	movs	r2, #144	@ 0x90
 8003042:	589b      	ldr	r3, [r3, r2]
 8003044:	2201      	movs	r2, #1
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2190      	movs	r1, #144	@ 0x90
 800304c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800304e:	23a4      	movs	r3, #164	@ 0xa4
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2202      	movs	r2, #2
 8003056:	4013      	ands	r3, r2
 8003058:	d011      	beq.n	800307e <HAL_UART_IRQHandler+0x102>
 800305a:	239c      	movs	r3, #156	@ 0x9c
 800305c:	18fb      	adds	r3, r7, r3
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2201      	movs	r2, #1
 8003062:	4013      	ands	r3, r2
 8003064:	d00b      	beq.n	800307e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2202      	movs	r2, #2
 800306c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2290      	movs	r2, #144	@ 0x90
 8003072:	589b      	ldr	r3, [r3, r2]
 8003074:	2204      	movs	r2, #4
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2190      	movs	r1, #144	@ 0x90
 800307c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800307e:	23a4      	movs	r3, #164	@ 0xa4
 8003080:	18fb      	adds	r3, r7, r3
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2204      	movs	r2, #4
 8003086:	4013      	ands	r3, r2
 8003088:	d011      	beq.n	80030ae <HAL_UART_IRQHandler+0x132>
 800308a:	239c      	movs	r3, #156	@ 0x9c
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2201      	movs	r2, #1
 8003092:	4013      	ands	r3, r2
 8003094:	d00b      	beq.n	80030ae <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2204      	movs	r2, #4
 800309c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2290      	movs	r2, #144	@ 0x90
 80030a2:	589b      	ldr	r3, [r3, r2]
 80030a4:	2202      	movs	r2, #2
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2190      	movs	r1, #144	@ 0x90
 80030ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030ae:	23a4      	movs	r3, #164	@ 0xa4
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2208      	movs	r2, #8
 80030b6:	4013      	ands	r3, r2
 80030b8:	d017      	beq.n	80030ea <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030ba:	23a0      	movs	r3, #160	@ 0xa0
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2220      	movs	r2, #32
 80030c2:	4013      	ands	r3, r2
 80030c4:	d105      	bne.n	80030d2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80030c6:	239c      	movs	r3, #156	@ 0x9c
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5b      	ldr	r2, [pc, #364]	@ (800323c <HAL_UART_IRQHandler+0x2c0>)
 80030ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80030d0:	d00b      	beq.n	80030ea <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2208      	movs	r2, #8
 80030d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2290      	movs	r2, #144	@ 0x90
 80030de:	589b      	ldr	r3, [r3, r2]
 80030e0:	2208      	movs	r2, #8
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2190      	movs	r1, #144	@ 0x90
 80030e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030ea:	23a4      	movs	r3, #164	@ 0xa4
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	2380      	movs	r3, #128	@ 0x80
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	4013      	ands	r3, r2
 80030f6:	d013      	beq.n	8003120 <HAL_UART_IRQHandler+0x1a4>
 80030f8:	23a0      	movs	r3, #160	@ 0xa0
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	@ 0x80
 8003100:	04db      	lsls	r3, r3, #19
 8003102:	4013      	ands	r3, r2
 8003104:	d00c      	beq.n	8003120 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	2280      	movs	r2, #128	@ 0x80
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2290      	movs	r2, #144	@ 0x90
 8003114:	589b      	ldr	r3, [r3, r2]
 8003116:	2220      	movs	r2, #32
 8003118:	431a      	orrs	r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2190      	movs	r1, #144	@ 0x90
 800311e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2290      	movs	r2, #144	@ 0x90
 8003124:	589b      	ldr	r3, [r3, r2]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d100      	bne.n	800312c <HAL_UART_IRQHandler+0x1b0>
 800312a:	e25c      	b.n	80035e6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800312c:	23a4      	movs	r3, #164	@ 0xa4
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2220      	movs	r2, #32
 8003134:	4013      	ands	r3, r2
 8003136:	d015      	beq.n	8003164 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003138:	23a0      	movs	r3, #160	@ 0xa0
 800313a:	18fb      	adds	r3, r7, r3
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2220      	movs	r2, #32
 8003140:	4013      	ands	r3, r2
 8003142:	d106      	bne.n	8003152 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003144:	239c      	movs	r3, #156	@ 0x9c
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	2380      	movs	r3, #128	@ 0x80
 800314c:	055b      	lsls	r3, r3, #21
 800314e:	4013      	ands	r3, r2
 8003150:	d008      	beq.n	8003164 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	0010      	movs	r0, r2
 8003162:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2290      	movs	r2, #144	@ 0x90
 8003168:	589b      	ldr	r3, [r3, r2]
 800316a:	2194      	movs	r1, #148	@ 0x94
 800316c:	187a      	adds	r2, r7, r1
 800316e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	4013      	ands	r3, r2
 800317a:	2b40      	cmp	r3, #64	@ 0x40
 800317c:	d004      	beq.n	8003188 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800317e:	187b      	adds	r3, r7, r1
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2228      	movs	r2, #40	@ 0x28
 8003184:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003186:	d04c      	beq.n	8003222 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	0018      	movs	r0, r3
 800318c:	f000 fed0 	bl	8003f30 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	2240      	movs	r2, #64	@ 0x40
 8003198:	4013      	ands	r3, r2
 800319a:	2b40      	cmp	r3, #64	@ 0x40
 800319c:	d13c      	bne.n	8003218 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800319e:	f3ef 8310 	mrs	r3, PRIMASK
 80031a2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80031a4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a6:	2090      	movs	r0, #144	@ 0x90
 80031a8:	183a      	adds	r2, r7, r0
 80031aa:	6013      	str	r3, [r2, #0]
 80031ac:	2301      	movs	r3, #1
 80031ae:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2140      	movs	r1, #64	@ 0x40
 80031c4:	438a      	bics	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
 80031c8:	183b      	adds	r3, r7, r0
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031d0:	f383 8810 	msr	PRIMASK, r3
}
 80031d4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2280      	movs	r2, #128	@ 0x80
 80031da:	589b      	ldr	r3, [r3, r2]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d016      	beq.n	800320e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2280      	movs	r2, #128	@ 0x80
 80031e4:	589b      	ldr	r3, [r3, r2]
 80031e6:	4a17      	ldr	r2, [pc, #92]	@ (8003244 <HAL_UART_IRQHandler+0x2c8>)
 80031e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2280      	movs	r2, #128	@ 0x80
 80031ee:	589b      	ldr	r3, [r3, r2]
 80031f0:	0018      	movs	r0, r3
 80031f2:	f7fe f9eb 	bl	80015cc <HAL_DMA_Abort_IT>
 80031f6:	1e03      	subs	r3, r0, #0
 80031f8:	d01c      	beq.n	8003234 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2280      	movs	r2, #128	@ 0x80
 80031fe:	589b      	ldr	r3, [r3, r2]
 8003200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	2180      	movs	r1, #128	@ 0x80
 8003206:	5852      	ldr	r2, [r2, r1]
 8003208:	0010      	movs	r0, r2
 800320a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	e012      	b.n	8003234 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	0018      	movs	r0, r3
 8003212:	f000 fa09 	bl	8003628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003216:	e00d      	b.n	8003234 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	0018      	movs	r0, r3
 800321c:	f000 fa04 	bl	8003628 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003220:	e008      	b.n	8003234 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	0018      	movs	r0, r3
 8003226:	f000 f9ff 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2290      	movs	r2, #144	@ 0x90
 800322e:	2100      	movs	r1, #0
 8003230:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003232:	e1d8      	b.n	80035e6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003234:	46c0      	nop			@ (mov r8, r8)
    return;
 8003236:	e1d6      	b.n	80035e6 <HAL_UART_IRQHandler+0x66a>
 8003238:	0000080f 	.word	0x0000080f
 800323c:	10000001 	.word	0x10000001
 8003240:	04000120 	.word	0x04000120
 8003244:	08003ffd 	.word	0x08003ffd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800324c:	2b01      	cmp	r3, #1
 800324e:	d000      	beq.n	8003252 <HAL_UART_IRQHandler+0x2d6>
 8003250:	e15d      	b.n	800350e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003252:	23a4      	movs	r3, #164	@ 0xa4
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2210      	movs	r2, #16
 800325a:	4013      	ands	r3, r2
 800325c:	d100      	bne.n	8003260 <HAL_UART_IRQHandler+0x2e4>
 800325e:	e156      	b.n	800350e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003260:	23a0      	movs	r3, #160	@ 0xa0
 8003262:	18fb      	adds	r3, r7, r3
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2210      	movs	r2, #16
 8003268:	4013      	ands	r3, r2
 800326a:	d100      	bne.n	800326e <HAL_UART_IRQHandler+0x2f2>
 800326c:	e14f      	b.n	800350e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2210      	movs	r2, #16
 8003274:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2240      	movs	r2, #64	@ 0x40
 800327e:	4013      	ands	r3, r2
 8003280:	2b40      	cmp	r3, #64	@ 0x40
 8003282:	d000      	beq.n	8003286 <HAL_UART_IRQHandler+0x30a>
 8003284:	e0c3      	b.n	800340e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2280      	movs	r2, #128	@ 0x80
 800328a:	589b      	ldr	r3, [r3, r2]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	217e      	movs	r1, #126	@ 0x7e
 8003292:	187b      	adds	r3, r7, r1
 8003294:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003296:	187b      	adds	r3, r7, r1
 8003298:	881b      	ldrh	r3, [r3, #0]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d100      	bne.n	80032a0 <HAL_UART_IRQHandler+0x324>
 800329e:	e097      	b.n	80033d0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	225c      	movs	r2, #92	@ 0x5c
 80032a4:	5a9b      	ldrh	r3, [r3, r2]
 80032a6:	187a      	adds	r2, r7, r1
 80032a8:	8812      	ldrh	r2, [r2, #0]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d300      	bcc.n	80032b0 <HAL_UART_IRQHandler+0x334>
 80032ae:	e08f      	b.n	80033d0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	187a      	adds	r2, r7, r1
 80032b4:	215e      	movs	r1, #94	@ 0x5e
 80032b6:	8812      	ldrh	r2, [r2, #0]
 80032b8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2280      	movs	r2, #128	@ 0x80
 80032be:	589b      	ldr	r3, [r3, r2]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2220      	movs	r2, #32
 80032c6:	4013      	ands	r3, r2
 80032c8:	d170      	bne.n	80033ac <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032ca:	f3ef 8310 	mrs	r3, PRIMASK
 80032ce:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80032d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80032d4:	2301      	movs	r3, #1
 80032d6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032da:	f383 8810 	msr	PRIMASK, r3
}
 80032de:	46c0      	nop			@ (mov r8, r8)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	49c4      	ldr	r1, [pc, #784]	@ (80035fc <HAL_UART_IRQHandler+0x680>)
 80032ec:	400a      	ands	r2, r1
 80032ee:	601a      	str	r2, [r3, #0]
 80032f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80032f2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032f6:	f383 8810 	msr	PRIMASK, r3
}
 80032fa:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003300:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003304:	677b      	str	r3, [r7, #116]	@ 0x74
 8003306:	2301      	movs	r3, #1
 8003308:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800330c:	f383 8810 	msr	PRIMASK, r3
}
 8003310:	46c0      	nop			@ (mov r8, r8)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689a      	ldr	r2, [r3, #8]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2101      	movs	r1, #1
 800331e:	438a      	bics	r2, r1
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003324:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003326:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003328:	f383 8810 	msr	PRIMASK, r3
}
 800332c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800332e:	f3ef 8310 	mrs	r3, PRIMASK
 8003332:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003334:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003336:	673b      	str	r3, [r7, #112]	@ 0x70
 8003338:	2301      	movs	r3, #1
 800333a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800333e:	f383 8810 	msr	PRIMASK, r3
}
 8003342:	46c0      	nop			@ (mov r8, r8)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	689a      	ldr	r2, [r3, #8]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2140      	movs	r1, #64	@ 0x40
 8003350:	438a      	bics	r2, r1
 8003352:	609a      	str	r2, [r3, #8]
 8003354:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003356:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003358:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800335a:	f383 8810 	msr	PRIMASK, r3
}
 800335e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	228c      	movs	r2, #140	@ 0x8c
 8003364:	2120      	movs	r1, #32
 8003366:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800336e:	f3ef 8310 	mrs	r3, PRIMASK
 8003372:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8003374:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003376:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003378:	2301      	movs	r3, #1
 800337a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800337c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800337e:	f383 8810 	msr	PRIMASK, r3
}
 8003382:	46c0      	nop			@ (mov r8, r8)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2110      	movs	r1, #16
 8003390:	438a      	bics	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
 8003394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003396:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003398:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800339a:	f383 8810 	msr	PRIMASK, r3
}
 800339e:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2280      	movs	r2, #128	@ 0x80
 80033a4:	589b      	ldr	r3, [r3, r2]
 80033a6:	0018      	movs	r0, r3
 80033a8:	f7fe f8ae 	bl	8001508 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	225c      	movs	r2, #92	@ 0x5c
 80033b6:	5a9a      	ldrh	r2, [r3, r2]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	215e      	movs	r1, #94	@ 0x5e
 80033bc:	5a5b      	ldrh	r3, [r3, r1]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	0011      	movs	r1, r2
 80033c8:	0018      	movs	r0, r3
 80033ca:	f000 f935 	bl	8003638 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80033ce:	e10c      	b.n	80035ea <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	225c      	movs	r2, #92	@ 0x5c
 80033d4:	5a9b      	ldrh	r3, [r3, r2]
 80033d6:	227e      	movs	r2, #126	@ 0x7e
 80033d8:	18ba      	adds	r2, r7, r2
 80033da:	8812      	ldrh	r2, [r2, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d000      	beq.n	80033e2 <HAL_UART_IRQHandler+0x466>
 80033e0:	e103      	b.n	80035ea <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2280      	movs	r2, #128	@ 0x80
 80033e6:	589b      	ldr	r3, [r3, r2]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2220      	movs	r2, #32
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b20      	cmp	r3, #32
 80033f2:	d000      	beq.n	80033f6 <HAL_UART_IRQHandler+0x47a>
 80033f4:	e0f9      	b.n	80035ea <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2202      	movs	r2, #2
 80033fa:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	225c      	movs	r2, #92	@ 0x5c
 8003400:	5a9a      	ldrh	r2, [r3, r2]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	0011      	movs	r1, r2
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f916 	bl	8003638 <HAL_UARTEx_RxEventCallback>
      return;
 800340c:	e0ed      	b.n	80035ea <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	225c      	movs	r2, #92	@ 0x5c
 8003412:	5a99      	ldrh	r1, [r3, r2]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	225e      	movs	r2, #94	@ 0x5e
 8003418:	5a9b      	ldrh	r3, [r3, r2]
 800341a:	b29a      	uxth	r2, r3
 800341c:	208e      	movs	r0, #142	@ 0x8e
 800341e:	183b      	adds	r3, r7, r0
 8003420:	1a8a      	subs	r2, r1, r2
 8003422:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	225e      	movs	r2, #94	@ 0x5e
 8003428:	5a9b      	ldrh	r3, [r3, r2]
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d100      	bne.n	8003432 <HAL_UART_IRQHandler+0x4b6>
 8003430:	e0dd      	b.n	80035ee <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8003432:	183b      	adds	r3, r7, r0
 8003434:	881b      	ldrh	r3, [r3, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d100      	bne.n	800343c <HAL_UART_IRQHandler+0x4c0>
 800343a:	e0d8      	b.n	80035ee <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800343c:	f3ef 8310 	mrs	r3, PRIMASK
 8003440:	60fb      	str	r3, [r7, #12]
  return(result);
 8003442:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003444:	2488      	movs	r4, #136	@ 0x88
 8003446:	193a      	adds	r2, r7, r4
 8003448:	6013      	str	r3, [r2, #0]
 800344a:	2301      	movs	r3, #1
 800344c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	f383 8810 	msr	PRIMASK, r3
}
 8003454:	46c0      	nop			@ (mov r8, r8)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4967      	ldr	r1, [pc, #412]	@ (8003600 <HAL_UART_IRQHandler+0x684>)
 8003462:	400a      	ands	r2, r1
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	193b      	adds	r3, r7, r4
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	697b      	ldr	r3, [r7, #20]
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003474:	f3ef 8310 	mrs	r3, PRIMASK
 8003478:	61bb      	str	r3, [r7, #24]
  return(result);
 800347a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800347c:	2484      	movs	r4, #132	@ 0x84
 800347e:	193a      	adds	r2, r7, r4
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	2301      	movs	r3, #1
 8003484:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			@ (mov r8, r8)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	495a      	ldr	r1, [pc, #360]	@ (8003604 <HAL_UART_IRQHandler+0x688>)
 800349a:	400a      	ands	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
 800349e:	193b      	adds	r3, r7, r4
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	f383 8810 	msr	PRIMASK, r3
}
 80034aa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	228c      	movs	r2, #140	@ 0x8c
 80034b0:	2120      	movs	r1, #32
 80034b2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034c0:	f3ef 8310 	mrs	r3, PRIMASK
 80034c4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034c8:	2480      	movs	r4, #128	@ 0x80
 80034ca:	193a      	adds	r2, r7, r4
 80034cc:	6013      	str	r3, [r2, #0]
 80034ce:	2301      	movs	r3, #1
 80034d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d4:	f383 8810 	msr	PRIMASK, r3
}
 80034d8:	46c0      	nop			@ (mov r8, r8)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2110      	movs	r1, #16
 80034e6:	438a      	bics	r2, r1
 80034e8:	601a      	str	r2, [r3, #0]
 80034ea:	193b      	adds	r3, r7, r4
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034fe:	183b      	adds	r3, r7, r0
 8003500:	881a      	ldrh	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	0011      	movs	r1, r2
 8003506:	0018      	movs	r0, r3
 8003508:	f000 f896 	bl	8003638 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800350c:	e06f      	b.n	80035ee <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800350e:	23a4      	movs	r3, #164	@ 0xa4
 8003510:	18fb      	adds	r3, r7, r3
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	2380      	movs	r3, #128	@ 0x80
 8003516:	035b      	lsls	r3, r3, #13
 8003518:	4013      	ands	r3, r2
 800351a:	d010      	beq.n	800353e <HAL_UART_IRQHandler+0x5c2>
 800351c:	239c      	movs	r3, #156	@ 0x9c
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	2380      	movs	r3, #128	@ 0x80
 8003524:	03db      	lsls	r3, r3, #15
 8003526:	4013      	ands	r3, r2
 8003528:	d009      	beq.n	800353e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	2280      	movs	r2, #128	@ 0x80
 8003530:	0352      	lsls	r2, r2, #13
 8003532:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	0018      	movs	r0, r3
 8003538:	f001 fa9c 	bl	8004a74 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800353c:	e05a      	b.n	80035f4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800353e:	23a4      	movs	r3, #164	@ 0xa4
 8003540:	18fb      	adds	r3, r7, r3
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2280      	movs	r2, #128	@ 0x80
 8003546:	4013      	ands	r3, r2
 8003548:	d016      	beq.n	8003578 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800354a:	23a0      	movs	r3, #160	@ 0xa0
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2280      	movs	r2, #128	@ 0x80
 8003552:	4013      	ands	r3, r2
 8003554:	d106      	bne.n	8003564 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003556:	239c      	movs	r3, #156	@ 0x9c
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	2380      	movs	r3, #128	@ 0x80
 800355e:	041b      	lsls	r3, r3, #16
 8003560:	4013      	ands	r3, r2
 8003562:	d009      	beq.n	8003578 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003568:	2b00      	cmp	r3, #0
 800356a:	d042      	beq.n	80035f2 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	0010      	movs	r0, r2
 8003574:	4798      	blx	r3
    }
    return;
 8003576:	e03c      	b.n	80035f2 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003578:	23a4      	movs	r3, #164	@ 0xa4
 800357a:	18fb      	adds	r3, r7, r3
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2240      	movs	r2, #64	@ 0x40
 8003580:	4013      	ands	r3, r2
 8003582:	d00a      	beq.n	800359a <HAL_UART_IRQHandler+0x61e>
 8003584:	23a0      	movs	r3, #160	@ 0xa0
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	2240      	movs	r2, #64	@ 0x40
 800358c:	4013      	ands	r3, r2
 800358e:	d004      	beq.n	800359a <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	0018      	movs	r0, r3
 8003594:	f000 fd49 	bl	800402a <UART_EndTransmit_IT>
    return;
 8003598:	e02c      	b.n	80035f4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800359a:	23a4      	movs	r3, #164	@ 0xa4
 800359c:	18fb      	adds	r3, r7, r3
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	2380      	movs	r3, #128	@ 0x80
 80035a2:	041b      	lsls	r3, r3, #16
 80035a4:	4013      	ands	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <HAL_UART_IRQHandler+0x644>
 80035a8:	23a0      	movs	r3, #160	@ 0xa0
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	2380      	movs	r3, #128	@ 0x80
 80035b0:	05db      	lsls	r3, r3, #23
 80035b2:	4013      	ands	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	0018      	movs	r0, r3
 80035ba:	f001 fa6b 	bl	8004a94 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035be:	e019      	b.n	80035f4 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80035c0:	23a4      	movs	r3, #164	@ 0xa4
 80035c2:	18fb      	adds	r3, r7, r3
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	2380      	movs	r3, #128	@ 0x80
 80035c8:	045b      	lsls	r3, r3, #17
 80035ca:	4013      	ands	r3, r2
 80035cc:	d012      	beq.n	80035f4 <HAL_UART_IRQHandler+0x678>
 80035ce:	23a0      	movs	r3, #160	@ 0xa0
 80035d0:	18fb      	adds	r3, r7, r3
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	da0d      	bge.n	80035f4 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	0018      	movs	r0, r3
 80035dc:	f001 fa52 	bl	8004a84 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80035e0:	e008      	b.n	80035f4 <HAL_UART_IRQHandler+0x678>
      return;
 80035e2:	46c0      	nop			@ (mov r8, r8)
 80035e4:	e006      	b.n	80035f4 <HAL_UART_IRQHandler+0x678>
    return;
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	e004      	b.n	80035f4 <HAL_UART_IRQHandler+0x678>
      return;
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	e002      	b.n	80035f4 <HAL_UART_IRQHandler+0x678>
      return;
 80035ee:	46c0      	nop			@ (mov r8, r8)
 80035f0:	e000      	b.n	80035f4 <HAL_UART_IRQHandler+0x678>
    return;
 80035f2:	46c0      	nop			@ (mov r8, r8)
  }
}
 80035f4:	46bd      	mov	sp, r7
 80035f6:	b02a      	add	sp, #168	@ 0xa8
 80035f8:	bdb0      	pop	{r4, r5, r7, pc}
 80035fa:	46c0      	nop			@ (mov r8, r8)
 80035fc:	fffffeff 	.word	0xfffffeff
 8003600:	fffffedf 	.word	0xfffffedf
 8003604:	effffffe 	.word	0xeffffffe

08003608 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b082      	sub	sp, #8
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003610:	46c0      	nop			@ (mov r8, r8)
 8003612:	46bd      	mov	sp, r7
 8003614:	b002      	add	sp, #8
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003620:	46c0      	nop			@ (mov r8, r8)
 8003622:	46bd      	mov	sp, r7
 8003624:	b002      	add	sp, #8
 8003626:	bd80      	pop	{r7, pc}

08003628 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003630:	46c0      	nop			@ (mov r8, r8)
 8003632:	46bd      	mov	sp, r7
 8003634:	b002      	add	sp, #8
 8003636:	bd80      	pop	{r7, pc}

08003638 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
 8003640:	000a      	movs	r2, r1
 8003642:	1cbb      	adds	r3, r7, #2
 8003644:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b002      	add	sp, #8
 800364c:	bd80      	pop	{r7, pc}
	...

08003650 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b088      	sub	sp, #32
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003658:	231e      	movs	r3, #30
 800365a:	18fb      	adds	r3, r7, r3
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	689a      	ldr	r2, [r3, #8]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	431a      	orrs	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	431a      	orrs	r2, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	4313      	orrs	r3, r2
 8003676:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4aab      	ldr	r2, [pc, #684]	@ (800392c <UART_SetConfig+0x2dc>)
 8003680:	4013      	ands	r3, r2
 8003682:	0019      	movs	r1, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	697a      	ldr	r2, [r7, #20]
 800368a:	430a      	orrs	r2, r1
 800368c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4aa6      	ldr	r2, [pc, #664]	@ (8003930 <UART_SetConfig+0x2e0>)
 8003696:	4013      	ands	r3, r2
 8003698:	0019      	movs	r1, r3
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68da      	ldr	r2, [r3, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	430a      	orrs	r2, r1
 80036a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4a9d      	ldr	r2, [pc, #628]	@ (8003934 <UART_SetConfig+0x2e4>)
 80036be:	4013      	ands	r3, r2
 80036c0:	0019      	movs	r1, r3
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	430a      	orrs	r2, r1
 80036ca:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d2:	220f      	movs	r2, #15
 80036d4:	4393      	bics	r3, r2
 80036d6:	0019      	movs	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	430a      	orrs	r2, r1
 80036e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a93      	ldr	r2, [pc, #588]	@ (8003938 <UART_SetConfig+0x2e8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d127      	bne.n	800373e <UART_SetConfig+0xee>
 80036ee:	4b93      	ldr	r3, [pc, #588]	@ (800393c <UART_SetConfig+0x2ec>)
 80036f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036f2:	2203      	movs	r2, #3
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b03      	cmp	r3, #3
 80036f8:	d017      	beq.n	800372a <UART_SetConfig+0xda>
 80036fa:	d81b      	bhi.n	8003734 <UART_SetConfig+0xe4>
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d00a      	beq.n	8003716 <UART_SetConfig+0xc6>
 8003700:	d818      	bhi.n	8003734 <UART_SetConfig+0xe4>
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <UART_SetConfig+0xbc>
 8003706:	2b01      	cmp	r3, #1
 8003708:	d00a      	beq.n	8003720 <UART_SetConfig+0xd0>
 800370a:	e013      	b.n	8003734 <UART_SetConfig+0xe4>
 800370c:	231f      	movs	r3, #31
 800370e:	18fb      	adds	r3, r7, r3
 8003710:	2200      	movs	r2, #0
 8003712:	701a      	strb	r2, [r3, #0]
 8003714:	e021      	b.n	800375a <UART_SetConfig+0x10a>
 8003716:	231f      	movs	r3, #31
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2202      	movs	r2, #2
 800371c:	701a      	strb	r2, [r3, #0]
 800371e:	e01c      	b.n	800375a <UART_SetConfig+0x10a>
 8003720:	231f      	movs	r3, #31
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2204      	movs	r2, #4
 8003726:	701a      	strb	r2, [r3, #0]
 8003728:	e017      	b.n	800375a <UART_SetConfig+0x10a>
 800372a:	231f      	movs	r3, #31
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2208      	movs	r2, #8
 8003730:	701a      	strb	r2, [r3, #0]
 8003732:	e012      	b.n	800375a <UART_SetConfig+0x10a>
 8003734:	231f      	movs	r3, #31
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2210      	movs	r2, #16
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	e00d      	b.n	800375a <UART_SetConfig+0x10a>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7f      	ldr	r2, [pc, #508]	@ (8003940 <UART_SetConfig+0x2f0>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d104      	bne.n	8003752 <UART_SetConfig+0x102>
 8003748:	231f      	movs	r3, #31
 800374a:	18fb      	adds	r3, r7, r3
 800374c:	2200      	movs	r2, #0
 800374e:	701a      	strb	r2, [r3, #0]
 8003750:	e003      	b.n	800375a <UART_SetConfig+0x10a>
 8003752:	231f      	movs	r3, #31
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2210      	movs	r2, #16
 8003758:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69da      	ldr	r2, [r3, #28]
 800375e:	2380      	movs	r3, #128	@ 0x80
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	429a      	cmp	r2, r3
 8003764:	d000      	beq.n	8003768 <UART_SetConfig+0x118>
 8003766:	e06f      	b.n	8003848 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003768:	231f      	movs	r3, #31
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b08      	cmp	r3, #8
 8003770:	d01f      	beq.n	80037b2 <UART_SetConfig+0x162>
 8003772:	dc22      	bgt.n	80037ba <UART_SetConfig+0x16a>
 8003774:	2b04      	cmp	r3, #4
 8003776:	d017      	beq.n	80037a8 <UART_SetConfig+0x158>
 8003778:	dc1f      	bgt.n	80037ba <UART_SetConfig+0x16a>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <UART_SetConfig+0x134>
 800377e:	2b02      	cmp	r3, #2
 8003780:	d005      	beq.n	800378e <UART_SetConfig+0x13e>
 8003782:	e01a      	b.n	80037ba <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003784:	f7fe fcb0 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8003788:	0003      	movs	r3, r0
 800378a:	61bb      	str	r3, [r7, #24]
        break;
 800378c:	e01c      	b.n	80037c8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800378e:	4b6b      	ldr	r3, [pc, #428]	@ (800393c <UART_SetConfig+0x2ec>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	095b      	lsrs	r3, r3, #5
 8003794:	2207      	movs	r2, #7
 8003796:	4013      	ands	r3, r2
 8003798:	3301      	adds	r3, #1
 800379a:	0019      	movs	r1, r3
 800379c:	4869      	ldr	r0, [pc, #420]	@ (8003944 <UART_SetConfig+0x2f4>)
 800379e:	f7fc fcc5 	bl	800012c <__udivsi3>
 80037a2:	0003      	movs	r3, r0
 80037a4:	61bb      	str	r3, [r7, #24]
        break;
 80037a6:	e00f      	b.n	80037c8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80037a8:	f7fe fc30 	bl	800200c <HAL_RCC_GetSysClockFreq>
 80037ac:	0003      	movs	r3, r0
 80037ae:	61bb      	str	r3, [r7, #24]
        break;
 80037b0:	e00a      	b.n	80037c8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80037b2:	2380      	movs	r3, #128	@ 0x80
 80037b4:	021b      	lsls	r3, r3, #8
 80037b6:	61bb      	str	r3, [r7, #24]
        break;
 80037b8:	e006      	b.n	80037c8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80037ba:	2300      	movs	r3, #0
 80037bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80037be:	231e      	movs	r3, #30
 80037c0:	18fb      	adds	r3, r7, r3
 80037c2:	2201      	movs	r2, #1
 80037c4:	701a      	strb	r2, [r3, #0]
        break;
 80037c6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d100      	bne.n	80037d0 <UART_SetConfig+0x180>
 80037ce:	e097      	b.n	8003900 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003948 <UART_SetConfig+0x2f8>)
 80037d6:	0052      	lsls	r2, r2, #1
 80037d8:	5ad3      	ldrh	r3, [r2, r3]
 80037da:	0019      	movs	r1, r3
 80037dc:	69b8      	ldr	r0, [r7, #24]
 80037de:	f7fc fca5 	bl	800012c <__udivsi3>
 80037e2:	0003      	movs	r3, r0
 80037e4:	005a      	lsls	r2, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	18d2      	adds	r2, r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	0019      	movs	r1, r3
 80037f4:	0010      	movs	r0, r2
 80037f6:	f7fc fc99 	bl	800012c <__udivsi3>
 80037fa:	0003      	movs	r3, r0
 80037fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	2b0f      	cmp	r3, #15
 8003802:	d91c      	bls.n	800383e <UART_SetConfig+0x1ee>
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	2380      	movs	r3, #128	@ 0x80
 8003808:	025b      	lsls	r3, r3, #9
 800380a:	429a      	cmp	r2, r3
 800380c:	d217      	bcs.n	800383e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	b29a      	uxth	r2, r3
 8003812:	200e      	movs	r0, #14
 8003814:	183b      	adds	r3, r7, r0
 8003816:	210f      	movs	r1, #15
 8003818:	438a      	bics	r2, r1
 800381a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	085b      	lsrs	r3, r3, #1
 8003820:	b29b      	uxth	r3, r3
 8003822:	2207      	movs	r2, #7
 8003824:	4013      	ands	r3, r2
 8003826:	b299      	uxth	r1, r3
 8003828:	183b      	adds	r3, r7, r0
 800382a:	183a      	adds	r2, r7, r0
 800382c:	8812      	ldrh	r2, [r2, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	183a      	adds	r2, r7, r0
 8003838:	8812      	ldrh	r2, [r2, #0]
 800383a:	60da      	str	r2, [r3, #12]
 800383c:	e060      	b.n	8003900 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800383e:	231e      	movs	r3, #30
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e05b      	b.n	8003900 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003848:	231f      	movs	r3, #31
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b08      	cmp	r3, #8
 8003850:	d01f      	beq.n	8003892 <UART_SetConfig+0x242>
 8003852:	dc22      	bgt.n	800389a <UART_SetConfig+0x24a>
 8003854:	2b04      	cmp	r3, #4
 8003856:	d017      	beq.n	8003888 <UART_SetConfig+0x238>
 8003858:	dc1f      	bgt.n	800389a <UART_SetConfig+0x24a>
 800385a:	2b00      	cmp	r3, #0
 800385c:	d002      	beq.n	8003864 <UART_SetConfig+0x214>
 800385e:	2b02      	cmp	r3, #2
 8003860:	d005      	beq.n	800386e <UART_SetConfig+0x21e>
 8003862:	e01a      	b.n	800389a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7fe fc40 	bl	80020e8 <HAL_RCC_GetPCLK1Freq>
 8003868:	0003      	movs	r3, r0
 800386a:	61bb      	str	r3, [r7, #24]
        break;
 800386c:	e01c      	b.n	80038a8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800386e:	4b33      	ldr	r3, [pc, #204]	@ (800393c <UART_SetConfig+0x2ec>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	095b      	lsrs	r3, r3, #5
 8003874:	2207      	movs	r2, #7
 8003876:	4013      	ands	r3, r2
 8003878:	3301      	adds	r3, #1
 800387a:	0019      	movs	r1, r3
 800387c:	4831      	ldr	r0, [pc, #196]	@ (8003944 <UART_SetConfig+0x2f4>)
 800387e:	f7fc fc55 	bl	800012c <__udivsi3>
 8003882:	0003      	movs	r3, r0
 8003884:	61bb      	str	r3, [r7, #24]
        break;
 8003886:	e00f      	b.n	80038a8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003888:	f7fe fbc0 	bl	800200c <HAL_RCC_GetSysClockFreq>
 800388c:	0003      	movs	r3, r0
 800388e:	61bb      	str	r3, [r7, #24]
        break;
 8003890:	e00a      	b.n	80038a8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003892:	2380      	movs	r3, #128	@ 0x80
 8003894:	021b      	lsls	r3, r3, #8
 8003896:	61bb      	str	r3, [r7, #24]
        break;
 8003898:	e006      	b.n	80038a8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800389e:	231e      	movs	r3, #30
 80038a0:	18fb      	adds	r3, r7, r3
 80038a2:	2201      	movs	r2, #1
 80038a4:	701a      	strb	r2, [r3, #0]
        break;
 80038a6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d028      	beq.n	8003900 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80038b2:	4b25      	ldr	r3, [pc, #148]	@ (8003948 <UART_SetConfig+0x2f8>)
 80038b4:	0052      	lsls	r2, r2, #1
 80038b6:	5ad3      	ldrh	r3, [r2, r3]
 80038b8:	0019      	movs	r1, r3
 80038ba:	69b8      	ldr	r0, [r7, #24]
 80038bc:	f7fc fc36 	bl	800012c <__udivsi3>
 80038c0:	0003      	movs	r3, r0
 80038c2:	001a      	movs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	18d2      	adds	r2, r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	0019      	movs	r1, r3
 80038d2:	0010      	movs	r0, r2
 80038d4:	f7fc fc2a 	bl	800012c <__udivsi3>
 80038d8:	0003      	movs	r3, r0
 80038da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	2b0f      	cmp	r3, #15
 80038e0:	d90a      	bls.n	80038f8 <UART_SetConfig+0x2a8>
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	2380      	movs	r3, #128	@ 0x80
 80038e6:	025b      	lsls	r3, r3, #9
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d205      	bcs.n	80038f8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	b29a      	uxth	r2, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60da      	str	r2, [r3, #12]
 80038f6:	e003      	b.n	8003900 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80038f8:	231e      	movs	r3, #30
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	2201      	movs	r2, #1
 80038fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	226a      	movs	r2, #106	@ 0x6a
 8003904:	2101      	movs	r1, #1
 8003906:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2268      	movs	r2, #104	@ 0x68
 800390c:	2101      	movs	r1, #1
 800390e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800391c:	231e      	movs	r3, #30
 800391e:	18fb      	adds	r3, r7, r3
 8003920:	781b      	ldrb	r3, [r3, #0]
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b008      	add	sp, #32
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	cfff69f3 	.word	0xcfff69f3
 8003930:	ffffcfff 	.word	0xffffcfff
 8003934:	11fff4ff 	.word	0x11fff4ff
 8003938:	40013800 	.word	0x40013800
 800393c:	40021000 	.word	0x40021000
 8003940:	40004400 	.word	0x40004400
 8003944:	02dc6c00 	.word	0x02dc6c00
 8003948:	08006ba8 	.word	0x08006ba8

0800394c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b082      	sub	sp, #8
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003958:	2208      	movs	r2, #8
 800395a:	4013      	ands	r3, r2
 800395c:	d00b      	beq.n	8003976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	4a4a      	ldr	r2, [pc, #296]	@ (8003a90 <UART_AdvFeatureConfig+0x144>)
 8003966:	4013      	ands	r3, r2
 8003968:	0019      	movs	r1, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800397a:	2201      	movs	r2, #1
 800397c:	4013      	ands	r3, r2
 800397e:	d00b      	beq.n	8003998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4a43      	ldr	r2, [pc, #268]	@ (8003a94 <UART_AdvFeatureConfig+0x148>)
 8003988:	4013      	ands	r3, r2
 800398a:	0019      	movs	r1, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	430a      	orrs	r2, r1
 8003996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399c:	2202      	movs	r2, #2
 800399e:	4013      	ands	r3, r2
 80039a0:	d00b      	beq.n	80039ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003a98 <UART_AdvFeatureConfig+0x14c>)
 80039aa:	4013      	ands	r3, r2
 80039ac:	0019      	movs	r1, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039be:	2204      	movs	r2, #4
 80039c0:	4013      	ands	r3, r2
 80039c2:	d00b      	beq.n	80039dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	4a34      	ldr	r2, [pc, #208]	@ (8003a9c <UART_AdvFeatureConfig+0x150>)
 80039cc:	4013      	ands	r3, r2
 80039ce:	0019      	movs	r1, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	430a      	orrs	r2, r1
 80039da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	2210      	movs	r2, #16
 80039e2:	4013      	ands	r3, r2
 80039e4:	d00b      	beq.n	80039fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa0 <UART_AdvFeatureConfig+0x154>)
 80039ee:	4013      	ands	r3, r2
 80039f0:	0019      	movs	r1, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a02:	2220      	movs	r2, #32
 8003a04:	4013      	ands	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	4a25      	ldr	r2, [pc, #148]	@ (8003aa4 <UART_AdvFeatureConfig+0x158>)
 8003a10:	4013      	ands	r3, r2
 8003a12:	0019      	movs	r1, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a24:	2240      	movs	r2, #64	@ 0x40
 8003a26:	4013      	ands	r3, r2
 8003a28:	d01d      	beq.n	8003a66 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa8 <UART_AdvFeatureConfig+0x15c>)
 8003a32:	4013      	ands	r3, r2
 8003a34:	0019      	movs	r1, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a46:	2380      	movs	r3, #128	@ 0x80
 8003a48:	035b      	lsls	r3, r3, #13
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d10b      	bne.n	8003a66 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	4a15      	ldr	r2, [pc, #84]	@ (8003aac <UART_AdvFeatureConfig+0x160>)
 8003a56:	4013      	ands	r3, r2
 8003a58:	0019      	movs	r1, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6a:	2280      	movs	r2, #128	@ 0x80
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	d00b      	beq.n	8003a88 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab0 <UART_AdvFeatureConfig+0x164>)
 8003a78:	4013      	ands	r3, r2
 8003a7a:	0019      	movs	r1, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	605a      	str	r2, [r3, #4]
  }
}
 8003a88:	46c0      	nop			@ (mov r8, r8)
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	b002      	add	sp, #8
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	ffff7fff 	.word	0xffff7fff
 8003a94:	fffdffff 	.word	0xfffdffff
 8003a98:	fffeffff 	.word	0xfffeffff
 8003a9c:	fffbffff 	.word	0xfffbffff
 8003aa0:	ffffefff 	.word	0xffffefff
 8003aa4:	ffffdfff 	.word	0xffffdfff
 8003aa8:	ffefffff 	.word	0xffefffff
 8003aac:	ff9fffff 	.word	0xff9fffff
 8003ab0:	fff7ffff 	.word	0xfff7ffff

08003ab4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b092      	sub	sp, #72	@ 0x48
 8003ab8:	af02      	add	r7, sp, #8
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2290      	movs	r2, #144	@ 0x90
 8003ac0:	2100      	movs	r1, #0
 8003ac2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ac4:	f7fd fc14 	bl	80012f0 <HAL_GetTick>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2208      	movs	r2, #8
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	2b08      	cmp	r3, #8
 8003ad8:	d12d      	bne.n	8003b36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003adc:	2280      	movs	r2, #128	@ 0x80
 8003ade:	0391      	lsls	r1, r2, #14
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4a47      	ldr	r2, [pc, #284]	@ (8003c00 <UART_CheckIdleState+0x14c>)
 8003ae4:	9200      	str	r2, [sp, #0]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f000 f88e 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003aec:	1e03      	subs	r3, r0, #0
 8003aee:	d022      	beq.n	8003b36 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003af0:	f3ef 8310 	mrs	r3, PRIMASK
 8003af4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003af8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003afa:	2301      	movs	r3, #1
 8003afc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b00:	f383 8810 	msr	PRIMASK, r3
}
 8003b04:	46c0      	nop			@ (mov r8, r8)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2180      	movs	r1, #128	@ 0x80
 8003b12:	438a      	bics	r2, r1
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b1c:	f383 8810 	msr	PRIMASK, r3
}
 8003b20:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2288      	movs	r2, #136	@ 0x88
 8003b26:	2120      	movs	r1, #32
 8003b28:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2284      	movs	r2, #132	@ 0x84
 8003b2e:	2100      	movs	r1, #0
 8003b30:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b32:	2303      	movs	r3, #3
 8003b34:	e060      	b.n	8003bf8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	4013      	ands	r3, r2
 8003b40:	2b04      	cmp	r3, #4
 8003b42:	d146      	bne.n	8003bd2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b46:	2280      	movs	r2, #128	@ 0x80
 8003b48:	03d1      	lsls	r1, r2, #15
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	4a2c      	ldr	r2, [pc, #176]	@ (8003c00 <UART_CheckIdleState+0x14c>)
 8003b4e:	9200      	str	r2, [sp, #0]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f000 f859 	bl	8003c08 <UART_WaitOnFlagUntilTimeout>
 8003b56:	1e03      	subs	r3, r0, #0
 8003b58:	d03b      	beq.n	8003bd2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b5e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b60:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003b62:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b64:	2301      	movs	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	f383 8810 	msr	PRIMASK, r3
}
 8003b6e:	46c0      	nop			@ (mov r8, r8)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4922      	ldr	r1, [pc, #136]	@ (8003c04 <UART_CheckIdleState+0x150>)
 8003b7c:	400a      	ands	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
 8003b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f383 8810 	msr	PRIMASK, r3
}
 8003b8a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8003b90:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b92:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b96:	2301      	movs	r3, #1
 8003b98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ba0:	46c0      	nop			@ (mov r8, r8)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	2101      	movs	r1, #1
 8003bae:	438a      	bics	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bb6:	6a3b      	ldr	r3, [r7, #32]
 8003bb8:	f383 8810 	msr	PRIMASK, r3
}
 8003bbc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	228c      	movs	r2, #140	@ 0x8c
 8003bc2:	2120      	movs	r1, #32
 8003bc4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2284      	movs	r2, #132	@ 0x84
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e012      	b.n	8003bf8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2288      	movs	r2, #136	@ 0x88
 8003bd6:	2120      	movs	r1, #32
 8003bd8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	228c      	movs	r2, #140	@ 0x8c
 8003bde:	2120      	movs	r1, #32
 8003be0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2284      	movs	r2, #132	@ 0x84
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	0018      	movs	r0, r3
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	b010      	add	sp, #64	@ 0x40
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	01ffffff 	.word	0x01ffffff
 8003c04:	fffffedf 	.word	0xfffffedf

08003c08 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b084      	sub	sp, #16
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	1dfb      	adds	r3, r7, #7
 8003c16:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c18:	e051      	b.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	d04e      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	f7fd fb66 	bl	80012f0 <HAL_GetTick>
 8003c24:	0002      	movs	r2, r0
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003c30:	69bb      	ldr	r3, [r7, #24]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e051      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2204      	movs	r2, #4
 8003c42:	4013      	ands	r3, r2
 8003c44:	d03b      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b80      	cmp	r3, #128	@ 0x80
 8003c4a:	d038      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb6>
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	2b40      	cmp	r3, #64	@ 0x40
 8003c50:	d035      	beq.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69db      	ldr	r3, [r3, #28]
 8003c58:	2208      	movs	r2, #8
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	2b08      	cmp	r3, #8
 8003c5e:	d111      	bne.n	8003c84 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2208      	movs	r2, #8
 8003c66:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f000 f960 	bl	8003f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2290      	movs	r2, #144	@ 0x90
 8003c74:	2108      	movs	r1, #8
 8003c76:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2284      	movs	r2, #132	@ 0x84
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e02c      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	69da      	ldr	r2, [r3, #28]
 8003c8a:	2380      	movs	r3, #128	@ 0x80
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	401a      	ands	r2, r3
 8003c90:	2380      	movs	r3, #128	@ 0x80
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d112      	bne.n	8003cbe <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	2280      	movs	r2, #128	@ 0x80
 8003c9e:	0112      	lsls	r2, r2, #4
 8003ca0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f000 f943 	bl	8003f30 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	2290      	movs	r2, #144	@ 0x90
 8003cae:	2120      	movs	r1, #32
 8003cb0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2284      	movs	r2, #132	@ 0x84
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e00f      	b.n	8003cde <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	68ba      	ldr	r2, [r7, #8]
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	1ad3      	subs	r3, r2, r3
 8003ccc:	425a      	negs	r2, r3
 8003cce:	4153      	adcs	r3, r2
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	001a      	movs	r2, r3
 8003cd4:	1dfb      	adds	r3, r7, #7
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d09e      	beq.n	8003c1a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b098      	sub	sp, #96	@ 0x60
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	1dbb      	adds	r3, r7, #6
 8003cf4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1dba      	adds	r2, r7, #6
 8003d00:	215c      	movs	r1, #92	@ 0x5c
 8003d02:	8812      	ldrh	r2, [r2, #0]
 8003d04:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	1dba      	adds	r2, r7, #6
 8003d0a:	215e      	movs	r1, #94	@ 0x5e
 8003d0c:	8812      	ldrh	r2, [r2, #0]
 8003d0e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	2380      	movs	r3, #128	@ 0x80
 8003d1c:	015b      	lsls	r3, r3, #5
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d10d      	bne.n	8003d3e <UART_Start_Receive_IT+0x56>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d104      	bne.n	8003d34 <UART_Start_Receive_IT+0x4c>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2260      	movs	r2, #96	@ 0x60
 8003d2e:	497b      	ldr	r1, [pc, #492]	@ (8003f1c <UART_Start_Receive_IT+0x234>)
 8003d30:	5299      	strh	r1, [r3, r2]
 8003d32:	e02e      	b.n	8003d92 <UART_Start_Receive_IT+0xaa>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2260      	movs	r2, #96	@ 0x60
 8003d38:	21ff      	movs	r1, #255	@ 0xff
 8003d3a:	5299      	strh	r1, [r3, r2]
 8003d3c:	e029      	b.n	8003d92 <UART_Start_Receive_IT+0xaa>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10d      	bne.n	8003d62 <UART_Start_Receive_IT+0x7a>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d104      	bne.n	8003d58 <UART_Start_Receive_IT+0x70>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2260      	movs	r2, #96	@ 0x60
 8003d52:	21ff      	movs	r1, #255	@ 0xff
 8003d54:	5299      	strh	r1, [r3, r2]
 8003d56:	e01c      	b.n	8003d92 <UART_Start_Receive_IT+0xaa>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2260      	movs	r2, #96	@ 0x60
 8003d5c:	217f      	movs	r1, #127	@ 0x7f
 8003d5e:	5299      	strh	r1, [r3, r2]
 8003d60:	e017      	b.n	8003d92 <UART_Start_Receive_IT+0xaa>
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	689a      	ldr	r2, [r3, #8]
 8003d66:	2380      	movs	r3, #128	@ 0x80
 8003d68:	055b      	lsls	r3, r3, #21
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d10d      	bne.n	8003d8a <UART_Start_Receive_IT+0xa2>
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	691b      	ldr	r3, [r3, #16]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d104      	bne.n	8003d80 <UART_Start_Receive_IT+0x98>
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2260      	movs	r2, #96	@ 0x60
 8003d7a:	217f      	movs	r1, #127	@ 0x7f
 8003d7c:	5299      	strh	r1, [r3, r2]
 8003d7e:	e008      	b.n	8003d92 <UART_Start_Receive_IT+0xaa>
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2260      	movs	r2, #96	@ 0x60
 8003d84:	213f      	movs	r1, #63	@ 0x3f
 8003d86:	5299      	strh	r1, [r3, r2]
 8003d88:	e003      	b.n	8003d92 <UART_Start_Receive_IT+0xaa>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2260      	movs	r2, #96	@ 0x60
 8003d8e:	2100      	movs	r1, #0
 8003d90:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2290      	movs	r2, #144	@ 0x90
 8003d96:	2100      	movs	r1, #0
 8003d98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	228c      	movs	r2, #140	@ 0x8c
 8003d9e:	2122      	movs	r1, #34	@ 0x22
 8003da0:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003da2:	f3ef 8310 	mrs	r3, PRIMASK
 8003da6:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8003da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003dac:	2301      	movs	r3, #1
 8003dae:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003db2:	f383 8810 	msr	PRIMASK, r3
}
 8003db6:	46c0      	nop			@ (mov r8, r8)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689a      	ldr	r2, [r3, #8]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2101      	movs	r1, #1
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003dca:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dce:	f383 8810 	msr	PRIMASK, r3
}
 8003dd2:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003dd8:	2380      	movs	r3, #128	@ 0x80
 8003dda:	059b      	lsls	r3, r3, #22
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d150      	bne.n	8003e82 <UART_Start_Receive_IT+0x19a>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2268      	movs	r2, #104	@ 0x68
 8003de4:	5a9b      	ldrh	r3, [r3, r2]
 8003de6:	1dba      	adds	r2, r7, #6
 8003de8:	8812      	ldrh	r2, [r2, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d349      	bcc.n	8003e82 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	2380      	movs	r3, #128	@ 0x80
 8003df4:	015b      	lsls	r3, r3, #5
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d107      	bne.n	8003e0a <UART_Start_Receive_IT+0x122>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d103      	bne.n	8003e0a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a46      	ldr	r2, [pc, #280]	@ (8003f20 <UART_Start_Receive_IT+0x238>)
 8003e06:	675a      	str	r2, [r3, #116]	@ 0x74
 8003e08:	e002      	b.n	8003e10 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4a45      	ldr	r2, [pc, #276]	@ (8003f24 <UART_Start_Receive_IT+0x23c>)
 8003e0e:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	691b      	ldr	r3, [r3, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d019      	beq.n	8003e4c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e18:	f3ef 8310 	mrs	r3, PRIMASK
 8003e1c:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8003e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e20:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e22:	2301      	movs	r3, #1
 8003e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e28:	f383 8810 	msr	PRIMASK, r3
}
 8003e2c:	46c0      	nop			@ (mov r8, r8)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	2180      	movs	r1, #128	@ 0x80
 8003e3a:	0049      	lsls	r1, r1, #1
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]
 8003e40:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e44:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e46:	f383 8810 	msr	PRIMASK, r3
}
 8003e4a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e50:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8003e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003e54:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e56:	2301      	movs	r3, #1
 8003e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5c:	f383 8810 	msr	PRIMASK, r3
}
 8003e60:	46c0      	nop			@ (mov r8, r8)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	689a      	ldr	r2, [r3, #8]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2180      	movs	r1, #128	@ 0x80
 8003e6e:	0549      	lsls	r1, r1, #21
 8003e70:	430a      	orrs	r2, r1
 8003e72:	609a      	str	r2, [r3, #8]
 8003e74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003e76:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e7a:	f383 8810 	msr	PRIMASK, r3
}
 8003e7e:	46c0      	nop			@ (mov r8, r8)
 8003e80:	e047      	b.n	8003f12 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	689a      	ldr	r2, [r3, #8]
 8003e86:	2380      	movs	r3, #128	@ 0x80
 8003e88:	015b      	lsls	r3, r3, #5
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d107      	bne.n	8003e9e <UART_Start_Receive_IT+0x1b6>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d103      	bne.n	8003e9e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a23      	ldr	r2, [pc, #140]	@ (8003f28 <UART_Start_Receive_IT+0x240>)
 8003e9a:	675a      	str	r2, [r3, #116]	@ 0x74
 8003e9c:	e002      	b.n	8003ea4 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a22      	ldr	r2, [pc, #136]	@ (8003f2c <UART_Start_Receive_IT+0x244>)
 8003ea2:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d019      	beq.n	8003ee0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003eac:	f3ef 8310 	mrs	r3, PRIMASK
 8003eb0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003eb2:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003eb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eba:	6a3b      	ldr	r3, [r7, #32]
 8003ebc:	f383 8810 	msr	PRIMASK, r3
}
 8003ec0:	46c0      	nop			@ (mov r8, r8)
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	681a      	ldr	r2, [r3, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	2190      	movs	r1, #144	@ 0x90
 8003ece:	0049      	lsls	r1, r1, #1
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	601a      	str	r2, [r3, #0]
 8003ed4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ed6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003eda:	f383 8810 	msr	PRIMASK, r3
}
 8003ede:	e018      	b.n	8003f12 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ee0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ee4:	613b      	str	r3, [r7, #16]
  return(result);
 8003ee6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8003eea:	2301      	movs	r3, #1
 8003eec:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	f383 8810 	msr	PRIMASK, r3
}
 8003ef4:	46c0      	nop			@ (mov r8, r8)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2120      	movs	r1, #32
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]
 8003f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	f383 8810 	msr	PRIMASK, r3
}
 8003f10:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	0018      	movs	r0, r3
 8003f16:	46bd      	mov	sp, r7
 8003f18:	b018      	add	sp, #96	@ 0x60
 8003f1a:	bd80      	pop	{r7, pc}
 8003f1c:	000001ff 	.word	0x000001ff
 8003f20:	08004729 	.word	0x08004729
 8003f24:	080043f5 	.word	0x080043f5
 8003f28:	0800423d 	.word	0x0800423d
 8003f2c:	08004085 	.word	0x08004085

08003f30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b08e      	sub	sp, #56	@ 0x38
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f38:	f3ef 8310 	mrs	r3, PRIMASK
 8003f3c:	617b      	str	r3, [r7, #20]
  return(result);
 8003f3e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f42:	2301      	movs	r3, #1
 8003f44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	f383 8810 	msr	PRIMASK, r3
}
 8003f4c:	46c0      	nop			@ (mov r8, r8)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4926      	ldr	r1, [pc, #152]	@ (8003ff4 <UART_EndRxTransfer+0xc4>)
 8003f5a:	400a      	ands	r2, r1
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f383 8810 	msr	PRIMASK, r3
}
 8003f68:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6e:	623b      	str	r3, [r7, #32]
  return(result);
 8003f70:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003f72:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f74:	2301      	movs	r3, #1
 8003f76:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f7a:	f383 8810 	msr	PRIMASK, r3
}
 8003f7e:	46c0      	nop			@ (mov r8, r8)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	689a      	ldr	r2, [r3, #8]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	491b      	ldr	r1, [pc, #108]	@ (8003ff8 <UART_EndRxTransfer+0xc8>)
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f92:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d118      	bne.n	8003fd6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003fa4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8003faa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fae:	2301      	movs	r3, #1
 8003fb0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f383 8810 	msr	PRIMASK, r3
}
 8003fb8:	46c0      	nop			@ (mov r8, r8)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2110      	movs	r1, #16
 8003fc6:	438a      	bics	r2, r1
 8003fc8:	601a      	str	r2, [r3, #0]
 8003fca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fcc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f383 8810 	msr	PRIMASK, r3
}
 8003fd4:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	228c      	movs	r2, #140	@ 0x8c
 8003fda:	2120      	movs	r1, #32
 8003fdc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003fea:	46c0      	nop			@ (mov r8, r8)
 8003fec:	46bd      	mov	sp, r7
 8003fee:	b00e      	add	sp, #56	@ 0x38
 8003ff0:	bd80      	pop	{r7, pc}
 8003ff2:	46c0      	nop			@ (mov r8, r8)
 8003ff4:	fffffedf 	.word	0xfffffedf
 8003ff8:	effffffe 	.word	0xeffffffe

08003ffc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004008:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	225e      	movs	r2, #94	@ 0x5e
 800400e:	2100      	movs	r1, #0
 8004010:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2256      	movs	r2, #86	@ 0x56
 8004016:	2100      	movs	r1, #0
 8004018:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	0018      	movs	r0, r3
 800401e:	f7ff fb03 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004022:	46c0      	nop			@ (mov r8, r8)
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bd80      	pop	{r7, pc}

0800402a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b086      	sub	sp, #24
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004032:	f3ef 8310 	mrs	r3, PRIMASK
 8004036:	60bb      	str	r3, [r7, #8]
  return(result);
 8004038:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800403a:	617b      	str	r3, [r7, #20]
 800403c:	2301      	movs	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f383 8810 	msr	PRIMASK, r3
}
 8004046:	46c0      	nop			@ (mov r8, r8)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2140      	movs	r1, #64	@ 0x40
 8004054:	438a      	bics	r2, r1
 8004056:	601a      	str	r2, [r3, #0]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	f383 8810 	msr	PRIMASK, r3
}
 8004062:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2288      	movs	r2, #136	@ 0x88
 8004068:	2120      	movs	r1, #32
 800406a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	0018      	movs	r0, r3
 8004076:	f7ff fac7 	bl	8003608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800407a:	46c0      	nop			@ (mov r8, r8)
 800407c:	46bd      	mov	sp, r7
 800407e:	b006      	add	sp, #24
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b094      	sub	sp, #80	@ 0x50
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800408c:	204e      	movs	r0, #78	@ 0x4e
 800408e:	183b      	adds	r3, r7, r0
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	2160      	movs	r1, #96	@ 0x60
 8004094:	5a52      	ldrh	r2, [r2, r1]
 8004096:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	228c      	movs	r2, #140	@ 0x8c
 800409c:	589b      	ldr	r3, [r3, r2]
 800409e:	2b22      	cmp	r3, #34	@ 0x22
 80040a0:	d000      	beq.n	80040a4 <UART_RxISR_8BIT+0x20>
 80040a2:	e0ba      	b.n	800421a <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040aa:	214c      	movs	r1, #76	@ 0x4c
 80040ac:	187b      	adds	r3, r7, r1
 80040ae:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040b0:	187b      	adds	r3, r7, r1
 80040b2:	881b      	ldrh	r3, [r3, #0]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	183b      	adds	r3, r7, r0
 80040b8:	881b      	ldrh	r3, [r3, #0]
 80040ba:	b2d9      	uxtb	r1, r3
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c0:	400a      	ands	r2, r1
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	225e      	movs	r2, #94	@ 0x5e
 80040d4:	5a9b      	ldrh	r3, [r3, r2]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	3b01      	subs	r3, #1
 80040da:	b299      	uxth	r1, r3
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	225e      	movs	r2, #94	@ 0x5e
 80040e0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	225e      	movs	r2, #94	@ 0x5e
 80040e6:	5a9b      	ldrh	r3, [r3, r2]
 80040e8:	b29b      	uxth	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d000      	beq.n	80040f0 <UART_RxISR_8BIT+0x6c>
 80040ee:	e09c      	b.n	800422a <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80040f0:	f3ef 8310 	mrs	r3, PRIMASK
 80040f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80040f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040fa:	2301      	movs	r3, #1
 80040fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004100:	f383 8810 	msr	PRIMASK, r3
}
 8004104:	46c0      	nop			@ (mov r8, r8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4948      	ldr	r1, [pc, #288]	@ (8004234 <UART_RxISR_8BIT+0x1b0>)
 8004112:	400a      	ands	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004118:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411c:	f383 8810 	msr	PRIMASK, r3
}
 8004120:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004122:	f3ef 8310 	mrs	r3, PRIMASK
 8004126:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800412a:	647b      	str	r3, [r7, #68]	@ 0x44
 800412c:	2301      	movs	r3, #1
 800412e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004132:	f383 8810 	msr	PRIMASK, r3
}
 8004136:	46c0      	nop			@ (mov r8, r8)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689a      	ldr	r2, [r3, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2101      	movs	r1, #1
 8004144:	438a      	bics	r2, r1
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800414a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800414c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800414e:	f383 8810 	msr	PRIMASK, r3
}
 8004152:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	228c      	movs	r2, #140	@ 0x8c
 8004158:	2120      	movs	r1, #32
 800415a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685a      	ldr	r2, [r3, #4]
 800416e:	2380      	movs	r3, #128	@ 0x80
 8004170:	041b      	lsls	r3, r3, #16
 8004172:	4013      	ands	r3, r2
 8004174:	d018      	beq.n	80041a8 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004176:	f3ef 8310 	mrs	r3, PRIMASK
 800417a:	61bb      	str	r3, [r7, #24]
  return(result);
 800417c:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800417e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004180:	2301      	movs	r3, #1
 8004182:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f383 8810 	msr	PRIMASK, r3
}
 800418a:	46c0      	nop			@ (mov r8, r8)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4928      	ldr	r1, [pc, #160]	@ (8004238 <UART_RxISR_8BIT+0x1b4>)
 8004198:	400a      	ands	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800419e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d12f      	bne.n	8004210 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80041b6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ba:	60fb      	str	r3, [r7, #12]
  return(result);
 80041bc:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041c0:	2301      	movs	r3, #1
 80041c2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	693b      	ldr	r3, [r7, #16]
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			@ (mov r8, r8)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2110      	movs	r1, #16
 80041d8:	438a      	bics	r2, r1
 80041da:	601a      	str	r2, [r3, #0]
 80041dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f383 8810 	msr	PRIMASK, r3
}
 80041e6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69db      	ldr	r3, [r3, #28]
 80041ee:	2210      	movs	r2, #16
 80041f0:	4013      	ands	r3, r2
 80041f2:	2b10      	cmp	r3, #16
 80041f4:	d103      	bne.n	80041fe <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2210      	movs	r2, #16
 80041fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	225c      	movs	r2, #92	@ 0x5c
 8004202:	5a9a      	ldrh	r2, [r3, r2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	0011      	movs	r1, r2
 8004208:	0018      	movs	r0, r3
 800420a:	f7ff fa15 	bl	8003638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800420e:	e00c      	b.n	800422a <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	0018      	movs	r0, r3
 8004214:	f7ff fa00 	bl	8003618 <HAL_UART_RxCpltCallback>
}
 8004218:	e007      	b.n	800422a <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699a      	ldr	r2, [r3, #24]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2108      	movs	r1, #8
 8004226:	430a      	orrs	r2, r1
 8004228:	619a      	str	r2, [r3, #24]
}
 800422a:	46c0      	nop			@ (mov r8, r8)
 800422c:	46bd      	mov	sp, r7
 800422e:	b014      	add	sp, #80	@ 0x50
 8004230:	bd80      	pop	{r7, pc}
 8004232:	46c0      	nop			@ (mov r8, r8)
 8004234:	fffffedf 	.word	0xfffffedf
 8004238:	fbffffff 	.word	0xfbffffff

0800423c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b094      	sub	sp, #80	@ 0x50
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004244:	204e      	movs	r0, #78	@ 0x4e
 8004246:	183b      	adds	r3, r7, r0
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	2160      	movs	r1, #96	@ 0x60
 800424c:	5a52      	ldrh	r2, [r2, r1]
 800424e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	228c      	movs	r2, #140	@ 0x8c
 8004254:	589b      	ldr	r3, [r3, r2]
 8004256:	2b22      	cmp	r3, #34	@ 0x22
 8004258:	d000      	beq.n	800425c <UART_RxISR_16BIT+0x20>
 800425a:	e0ba      	b.n	80043d2 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004262:	214c      	movs	r1, #76	@ 0x4c
 8004264:	187b      	adds	r3, r7, r1
 8004266:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800426c:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800426e:	187b      	adds	r3, r7, r1
 8004270:	183a      	adds	r2, r7, r0
 8004272:	881b      	ldrh	r3, [r3, #0]
 8004274:	8812      	ldrh	r2, [r2, #0]
 8004276:	4013      	ands	r3, r2
 8004278:	b29a      	uxth	r2, r3
 800427a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800427c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004282:	1c9a      	adds	r2, r3, #2
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	225e      	movs	r2, #94	@ 0x5e
 800428c:	5a9b      	ldrh	r3, [r3, r2]
 800428e:	b29b      	uxth	r3, r3
 8004290:	3b01      	subs	r3, #1
 8004292:	b299      	uxth	r1, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	225e      	movs	r2, #94	@ 0x5e
 8004298:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	225e      	movs	r2, #94	@ 0x5e
 800429e:	5a9b      	ldrh	r3, [r3, r2]
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d000      	beq.n	80042a8 <UART_RxISR_16BIT+0x6c>
 80042a6:	e09c      	b.n	80043e2 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042a8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ac:	623b      	str	r3, [r7, #32]
  return(result);
 80042ae:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80042b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042b2:	2301      	movs	r3, #1
 80042b4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b8:	f383 8810 	msr	PRIMASK, r3
}
 80042bc:	46c0      	nop			@ (mov r8, r8)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4948      	ldr	r1, [pc, #288]	@ (80043ec <UART_RxISR_16BIT+0x1b0>)
 80042ca:	400a      	ands	r2, r1
 80042cc:	601a      	str	r2, [r3, #0]
 80042ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042d4:	f383 8810 	msr	PRIMASK, r3
}
 80042d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042da:	f3ef 8310 	mrs	r3, PRIMASK
 80042de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80042e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80042e4:	2301      	movs	r3, #1
 80042e6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042ea:	f383 8810 	msr	PRIMASK, r3
}
 80042ee:	46c0      	nop			@ (mov r8, r8)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689a      	ldr	r2, [r3, #8]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2101      	movs	r1, #1
 80042fc:	438a      	bics	r2, r1
 80042fe:	609a      	str	r2, [r3, #8]
 8004300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004302:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004306:	f383 8810 	msr	PRIMASK, r3
}
 800430a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	228c      	movs	r2, #140	@ 0x8c
 8004310:	2120      	movs	r1, #32
 8004312:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	685a      	ldr	r2, [r3, #4]
 8004326:	2380      	movs	r3, #128	@ 0x80
 8004328:	041b      	lsls	r3, r3, #16
 800432a:	4013      	ands	r3, r2
 800432c:	d018      	beq.n	8004360 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800432e:	f3ef 8310 	mrs	r3, PRIMASK
 8004332:	617b      	str	r3, [r7, #20]
  return(result);
 8004334:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004336:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004338:	2301      	movs	r3, #1
 800433a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	f383 8810 	msr	PRIMASK, r3
}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4928      	ldr	r1, [pc, #160]	@ (80043f0 <UART_RxISR_16BIT+0x1b4>)
 8004350:	400a      	ands	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004356:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004358:	69fb      	ldr	r3, [r7, #28]
 800435a:	f383 8810 	msr	PRIMASK, r3
}
 800435e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d12f      	bne.n	80043c8 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800436e:	f3ef 8310 	mrs	r3, PRIMASK
 8004372:	60bb      	str	r3, [r7, #8]
  return(result);
 8004374:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004376:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004378:	2301      	movs	r3, #1
 800437a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f383 8810 	msr	PRIMASK, r3
}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2110      	movs	r1, #16
 8004390:	438a      	bics	r2, r1
 8004392:	601a      	str	r2, [r3, #0]
 8004394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004396:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f383 8810 	msr	PRIMASK, r3
}
 800439e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	2210      	movs	r2, #16
 80043a8:	4013      	ands	r3, r2
 80043aa:	2b10      	cmp	r3, #16
 80043ac:	d103      	bne.n	80043b6 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2210      	movs	r2, #16
 80043b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	225c      	movs	r2, #92	@ 0x5c
 80043ba:	5a9a      	ldrh	r2, [r3, r2]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	0011      	movs	r1, r2
 80043c0:	0018      	movs	r0, r3
 80043c2:	f7ff f939 	bl	8003638 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043c6:	e00c      	b.n	80043e2 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	0018      	movs	r0, r3
 80043cc:	f7ff f924 	bl	8003618 <HAL_UART_RxCpltCallback>
}
 80043d0:	e007      	b.n	80043e2 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	699a      	ldr	r2, [r3, #24]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	2108      	movs	r1, #8
 80043de:	430a      	orrs	r2, r1
 80043e0:	619a      	str	r2, [r3, #24]
}
 80043e2:	46c0      	nop			@ (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b014      	add	sp, #80	@ 0x50
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	46c0      	nop			@ (mov r8, r8)
 80043ec:	fffffedf 	.word	0xfffffedf
 80043f0:	fbffffff 	.word	0xfbffffff

080043f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b0a0      	sub	sp, #128	@ 0x80
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80043fc:	237a      	movs	r3, #122	@ 0x7a
 80043fe:	18fb      	adds	r3, r7, r3
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	2160      	movs	r1, #96	@ 0x60
 8004404:	5a52      	ldrh	r2, [r2, r1]
 8004406:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	689b      	ldr	r3, [r3, #8]
 800441e:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	228c      	movs	r2, #140	@ 0x8c
 8004424:	589b      	ldr	r3, [r3, r2]
 8004426:	2b22      	cmp	r3, #34	@ 0x22
 8004428:	d000      	beq.n	800442c <UART_RxISR_8BIT_FIFOEN+0x38>
 800442a:	e166      	b.n	80046fa <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800442c:	236e      	movs	r3, #110	@ 0x6e
 800442e:	18fb      	adds	r3, r7, r3
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	2168      	movs	r1, #104	@ 0x68
 8004434:	5a52      	ldrh	r2, [r2, r1]
 8004436:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004438:	e10d      	b.n	8004656 <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004440:	216c      	movs	r1, #108	@ 0x6c
 8004442:	187b      	adds	r3, r7, r1
 8004444:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004446:	187b      	adds	r3, r7, r1
 8004448:	881b      	ldrh	r3, [r3, #0]
 800444a:	b2da      	uxtb	r2, r3
 800444c:	237a      	movs	r3, #122	@ 0x7a
 800444e:	18fb      	adds	r3, r7, r3
 8004450:	881b      	ldrh	r3, [r3, #0]
 8004452:	b2d9      	uxtb	r1, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004458:	400a      	ands	r2, r1
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004462:	1c5a      	adds	r2, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	225e      	movs	r2, #94	@ 0x5e
 800446c:	5a9b      	ldrh	r3, [r3, r2]
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b299      	uxth	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	225e      	movs	r2, #94	@ 0x5e
 8004478:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69db      	ldr	r3, [r3, #28]
 8004480:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004482:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004484:	2207      	movs	r2, #7
 8004486:	4013      	ands	r3, r2
 8004488:	d049      	beq.n	800451e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800448a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800448c:	2201      	movs	r2, #1
 800448e:	4013      	ands	r3, r2
 8004490:	d010      	beq.n	80044b4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8004492:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004494:	2380      	movs	r3, #128	@ 0x80
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	4013      	ands	r3, r2
 800449a:	d00b      	beq.n	80044b4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2201      	movs	r2, #1
 80044a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2290      	movs	r2, #144	@ 0x90
 80044a8:	589b      	ldr	r3, [r3, r2]
 80044aa:	2201      	movs	r2, #1
 80044ac:	431a      	orrs	r2, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2190      	movs	r1, #144	@ 0x90
 80044b2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044b6:	2202      	movs	r2, #2
 80044b8:	4013      	ands	r3, r2
 80044ba:	d00f      	beq.n	80044dc <UART_RxISR_8BIT_FIFOEN+0xe8>
 80044bc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044be:	2201      	movs	r2, #1
 80044c0:	4013      	ands	r3, r2
 80044c2:	d00b      	beq.n	80044dc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2202      	movs	r2, #2
 80044ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2290      	movs	r2, #144	@ 0x90
 80044d0:	589b      	ldr	r3, [r3, r2]
 80044d2:	2204      	movs	r2, #4
 80044d4:	431a      	orrs	r2, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2190      	movs	r1, #144	@ 0x90
 80044da:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044dc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80044de:	2204      	movs	r2, #4
 80044e0:	4013      	ands	r3, r2
 80044e2:	d00f      	beq.n	8004504 <UART_RxISR_8BIT_FIFOEN+0x110>
 80044e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80044e6:	2201      	movs	r2, #1
 80044e8:	4013      	ands	r3, r2
 80044ea:	d00b      	beq.n	8004504 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	2204      	movs	r2, #4
 80044f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2290      	movs	r2, #144	@ 0x90
 80044f8:	589b      	ldr	r3, [r3, r2]
 80044fa:	2202      	movs	r2, #2
 80044fc:	431a      	orrs	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2190      	movs	r1, #144	@ 0x90
 8004502:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2290      	movs	r2, #144	@ 0x90
 8004508:	589b      	ldr	r3, [r3, r2]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d007      	beq.n	800451e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f7ff f889 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2290      	movs	r2, #144	@ 0x90
 800451a:	2100      	movs	r1, #0
 800451c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	225e      	movs	r2, #94	@ 0x5e
 8004522:	5a9b      	ldrh	r3, [r3, r2]
 8004524:	b29b      	uxth	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d000      	beq.n	800452c <UART_RxISR_8BIT_FIFOEN+0x138>
 800452a:	e094      	b.n	8004656 <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800452c:	f3ef 8310 	mrs	r3, PRIMASK
 8004530:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8004532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004534:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004536:	2301      	movs	r3, #1
 8004538:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800453c:	f383 8810 	msr	PRIMASK, r3
}
 8004540:	46c0      	nop			@ (mov r8, r8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4971      	ldr	r1, [pc, #452]	@ (8004714 <UART_RxISR_8BIT_FIFOEN+0x320>)
 800454e:	400a      	ands	r2, r1
 8004550:	601a      	str	r2, [r3, #0]
 8004552:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004554:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004556:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004558:	f383 8810 	msr	PRIMASK, r3
}
 800455c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800455e:	f3ef 8310 	mrs	r3, PRIMASK
 8004562:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8004564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004566:	667b      	str	r3, [r7, #100]	@ 0x64
 8004568:	2301      	movs	r3, #1
 800456a:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800456c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800456e:	f383 8810 	msr	PRIMASK, r3
}
 8004572:	46c0      	nop			@ (mov r8, r8)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4966      	ldr	r1, [pc, #408]	@ (8004718 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8004580:	400a      	ands	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
 8004584:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004586:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800458a:	f383 8810 	msr	PRIMASK, r3
}
 800458e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	228c      	movs	r2, #140	@ 0x8c
 8004594:	2120      	movs	r1, #32
 8004596:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	685a      	ldr	r2, [r3, #4]
 80045aa:	2380      	movs	r3, #128	@ 0x80
 80045ac:	041b      	lsls	r3, r3, #16
 80045ae:	4013      	ands	r3, r2
 80045b0:	d018      	beq.n	80045e4 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045b2:	f3ef 8310 	mrs	r3, PRIMASK
 80045b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80045b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80045ba:	663b      	str	r3, [r7, #96]	@ 0x60
 80045bc:	2301      	movs	r3, #1
 80045be:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045c2:	f383 8810 	msr	PRIMASK, r3
}
 80045c6:	46c0      	nop			@ (mov r8, r8)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4952      	ldr	r1, [pc, #328]	@ (800471c <UART_RxISR_8BIT_FIFOEN+0x328>)
 80045d4:	400a      	ands	r2, r1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80045da:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045de:	f383 8810 	msr	PRIMASK, r3
}
 80045e2:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d12f      	bne.n	800464c <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80045f2:	f3ef 8310 	mrs	r3, PRIMASK
 80045f6:	623b      	str	r3, [r7, #32]
  return(result);
 80045f8:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80045fc:	2301      	movs	r3, #1
 80045fe:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	f383 8810 	msr	PRIMASK, r3
}
 8004606:	46c0      	nop			@ (mov r8, r8)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	2110      	movs	r1, #16
 8004614:	438a      	bics	r2, r1
 8004616:	601a      	str	r2, [r3, #0]
 8004618:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800461a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800461c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800461e:	f383 8810 	msr	PRIMASK, r3
}
 8004622:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	2210      	movs	r2, #16
 800462c:	4013      	ands	r3, r2
 800462e:	2b10      	cmp	r3, #16
 8004630:	d103      	bne.n	800463a <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2210      	movs	r2, #16
 8004638:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	225c      	movs	r2, #92	@ 0x5c
 800463e:	5a9a      	ldrh	r2, [r3, r2]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	0011      	movs	r1, r2
 8004644:	0018      	movs	r0, r3
 8004646:	f7fe fff7 	bl	8003638 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 800464a:	e00e      	b.n	800466a <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	0018      	movs	r0, r3
 8004650:	f7fe ffe2 	bl	8003618 <HAL_UART_RxCpltCallback>
        break;
 8004654:	e009      	b.n	800466a <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004656:	236e      	movs	r3, #110	@ 0x6e
 8004658:	18fb      	adds	r3, r7, r3
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d004      	beq.n	800466a <UART_RxISR_8BIT_FIFOEN+0x276>
 8004660:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004662:	2220      	movs	r2, #32
 8004664:	4013      	ands	r3, r2
 8004666:	d000      	beq.n	800466a <UART_RxISR_8BIT_FIFOEN+0x276>
 8004668:	e6e7      	b.n	800443a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800466a:	205a      	movs	r0, #90	@ 0x5a
 800466c:	183b      	adds	r3, r7, r0
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	215e      	movs	r1, #94	@ 0x5e
 8004672:	5a52      	ldrh	r2, [r2, r1]
 8004674:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8004676:	0001      	movs	r1, r0
 8004678:	187b      	adds	r3, r7, r1
 800467a:	881b      	ldrh	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d044      	beq.n	800470a <UART_RxISR_8BIT_FIFOEN+0x316>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2268      	movs	r2, #104	@ 0x68
 8004684:	5a9b      	ldrh	r3, [r3, r2]
 8004686:	187a      	adds	r2, r7, r1
 8004688:	8812      	ldrh	r2, [r2, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d23d      	bcs.n	800470a <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800468e:	f3ef 8310 	mrs	r3, PRIMASK
 8004692:	60bb      	str	r3, [r7, #8]
  return(result);
 8004694:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004696:	657b      	str	r3, [r7, #84]	@ 0x54
 8004698:	2301      	movs	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f383 8810 	msr	PRIMASK, r3
}
 80046a2:	46c0      	nop			@ (mov r8, r8)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	689a      	ldr	r2, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	491c      	ldr	r1, [pc, #112]	@ (8004720 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
 80046b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f383 8810 	msr	PRIMASK, r3
}
 80046be:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a18      	ldr	r2, [pc, #96]	@ (8004724 <UART_RxISR_8BIT_FIFOEN+0x330>)
 80046c4:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046c6:	f3ef 8310 	mrs	r3, PRIMASK
 80046ca:	617b      	str	r3, [r7, #20]
  return(result);
 80046cc:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80046ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80046d0:	2301      	movs	r3, #1
 80046d2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046d4:	69bb      	ldr	r3, [r7, #24]
 80046d6:	f383 8810 	msr	PRIMASK, r3
}
 80046da:	46c0      	nop			@ (mov r8, r8)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2120      	movs	r1, #32
 80046e8:	430a      	orrs	r2, r1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f383 8810 	msr	PRIMASK, r3
}
 80046f6:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046f8:	e007      	b.n	800470a <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	699a      	ldr	r2, [r3, #24]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2108      	movs	r1, #8
 8004706:	430a      	orrs	r2, r1
 8004708:	619a      	str	r2, [r3, #24]
}
 800470a:	46c0      	nop			@ (mov r8, r8)
 800470c:	46bd      	mov	sp, r7
 800470e:	b020      	add	sp, #128	@ 0x80
 8004710:	bd80      	pop	{r7, pc}
 8004712:	46c0      	nop			@ (mov r8, r8)
 8004714:	fffffeff 	.word	0xfffffeff
 8004718:	effffffe 	.word	0xeffffffe
 800471c:	fbffffff 	.word	0xfbffffff
 8004720:	efffffff 	.word	0xefffffff
 8004724:	08004085 	.word	0x08004085

08004728 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b0a2      	sub	sp, #136	@ 0x88
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8004730:	2382      	movs	r3, #130	@ 0x82
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	2160      	movs	r1, #96	@ 0x60
 8004738:	5a52      	ldrh	r2, [r2, r1]
 800473a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	69db      	ldr	r3, [r3, #28]
 8004742:	2284      	movs	r2, #132	@ 0x84
 8004744:	18ba      	adds	r2, r7, r2
 8004746:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	228c      	movs	r2, #140	@ 0x8c
 800475c:	589b      	ldr	r3, [r3, r2]
 800475e:	2b22      	cmp	r3, #34	@ 0x22
 8004760:	d000      	beq.n	8004764 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8004762:	e170      	b.n	8004a46 <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004764:	2376      	movs	r3, #118	@ 0x76
 8004766:	18fb      	adds	r3, r7, r3
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	2168      	movs	r1, #104	@ 0x68
 800476c:	5a52      	ldrh	r2, [r2, r1]
 800476e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004770:	e115      	b.n	800499e <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004778:	2174      	movs	r1, #116	@ 0x74
 800477a:	187b      	adds	r3, r7, r1
 800477c:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004782:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8004784:	187b      	adds	r3, r7, r1
 8004786:	2282      	movs	r2, #130	@ 0x82
 8004788:	18ba      	adds	r2, r7, r2
 800478a:	881b      	ldrh	r3, [r3, #0]
 800478c:	8812      	ldrh	r2, [r2, #0]
 800478e:	4013      	ands	r3, r2
 8004790:	b29a      	uxth	r2, r3
 8004792:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004794:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800479a:	1c9a      	adds	r2, r3, #2
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	225e      	movs	r2, #94	@ 0x5e
 80047a4:	5a9b      	ldrh	r3, [r3, r2]
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	3b01      	subs	r3, #1
 80047aa:	b299      	uxth	r1, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	225e      	movs	r2, #94	@ 0x5e
 80047b0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	69db      	ldr	r3, [r3, #28]
 80047b8:	2184      	movs	r1, #132	@ 0x84
 80047ba:	187a      	adds	r2, r7, r1
 80047bc:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80047be:	187b      	adds	r3, r7, r1
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2207      	movs	r2, #7
 80047c4:	4013      	ands	r3, r2
 80047c6:	d04e      	beq.n	8004866 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047c8:	187b      	adds	r3, r7, r1
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2201      	movs	r2, #1
 80047ce:	4013      	ands	r3, r2
 80047d0:	d010      	beq.n	80047f4 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80047d2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80047d4:	2380      	movs	r3, #128	@ 0x80
 80047d6:	005b      	lsls	r3, r3, #1
 80047d8:	4013      	ands	r3, r2
 80047da:	d00b      	beq.n	80047f4 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	2201      	movs	r2, #1
 80047e2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2290      	movs	r2, #144	@ 0x90
 80047e8:	589b      	ldr	r3, [r3, r2]
 80047ea:	2201      	movs	r2, #1
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2190      	movs	r1, #144	@ 0x90
 80047f2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047f4:	2384      	movs	r3, #132	@ 0x84
 80047f6:	18fb      	adds	r3, r7, r3
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2202      	movs	r2, #2
 80047fc:	4013      	ands	r3, r2
 80047fe:	d00f      	beq.n	8004820 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004800:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004802:	2201      	movs	r2, #1
 8004804:	4013      	ands	r3, r2
 8004806:	d00b      	beq.n	8004820 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2202      	movs	r2, #2
 800480e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2290      	movs	r2, #144	@ 0x90
 8004814:	589b      	ldr	r3, [r3, r2]
 8004816:	2204      	movs	r2, #4
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2190      	movs	r1, #144	@ 0x90
 800481e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004820:	2384      	movs	r3, #132	@ 0x84
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2204      	movs	r2, #4
 8004828:	4013      	ands	r3, r2
 800482a:	d00f      	beq.n	800484c <UART_RxISR_16BIT_FIFOEN+0x124>
 800482c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800482e:	2201      	movs	r2, #1
 8004830:	4013      	ands	r3, r2
 8004832:	d00b      	beq.n	800484c <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2204      	movs	r2, #4
 800483a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2290      	movs	r2, #144	@ 0x90
 8004840:	589b      	ldr	r3, [r3, r2]
 8004842:	2202      	movs	r2, #2
 8004844:	431a      	orrs	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2190      	movs	r1, #144	@ 0x90
 800484a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2290      	movs	r2, #144	@ 0x90
 8004850:	589b      	ldr	r3, [r3, r2]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	0018      	movs	r0, r3
 800485a:	f7fe fee5 	bl	8003628 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2290      	movs	r2, #144	@ 0x90
 8004862:	2100      	movs	r1, #0
 8004864:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	225e      	movs	r2, #94	@ 0x5e
 800486a:	5a9b      	ldrh	r3, [r3, r2]
 800486c:	b29b      	uxth	r3, r3
 800486e:	2b00      	cmp	r3, #0
 8004870:	d000      	beq.n	8004874 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8004872:	e094      	b.n	800499e <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004874:	f3ef 8310 	mrs	r3, PRIMASK
 8004878:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800487a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800487c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800487e:	2301      	movs	r3, #1
 8004880:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004884:	f383 8810 	msr	PRIMASK, r3
}
 8004888:	46c0      	nop			@ (mov r8, r8)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4972      	ldr	r1, [pc, #456]	@ (8004a60 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8004896:	400a      	ands	r2, r1
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800489c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800489e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048a0:	f383 8810 	msr	PRIMASK, r3
}
 80048a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048a6:	f3ef 8310 	mrs	r3, PRIMASK
 80048aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80048ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048ae:	66bb      	str	r3, [r7, #104]	@ 0x68
 80048b0:	2301      	movs	r3, #1
 80048b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048b6:	f383 8810 	msr	PRIMASK, r3
}
 80048ba:	46c0      	nop			@ (mov r8, r8)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4967      	ldr	r1, [pc, #412]	@ (8004a64 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 80048c8:	400a      	ands	r2, r1
 80048ca:	609a      	str	r2, [r3, #8]
 80048cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048ce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048d2:	f383 8810 	msr	PRIMASK, r3
}
 80048d6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	228c      	movs	r2, #140	@ 0x8c
 80048dc:	2120      	movs	r1, #32
 80048de:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685a      	ldr	r2, [r3, #4]
 80048f2:	2380      	movs	r3, #128	@ 0x80
 80048f4:	041b      	lsls	r3, r3, #16
 80048f6:	4013      	ands	r3, r2
 80048f8:	d018      	beq.n	800492c <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048fa:	f3ef 8310 	mrs	r3, PRIMASK
 80048fe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004902:	667b      	str	r3, [r7, #100]	@ 0x64
 8004904:	2301      	movs	r3, #1
 8004906:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004908:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490a:	f383 8810 	msr	PRIMASK, r3
}
 800490e:	46c0      	nop			@ (mov r8, r8)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4953      	ldr	r1, [pc, #332]	@ (8004a68 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800491c:	400a      	ands	r2, r1
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004922:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004926:	f383 8810 	msr	PRIMASK, r3
}
 800492a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004930:	2b01      	cmp	r3, #1
 8004932:	d12f      	bne.n	8004994 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800493a:	f3ef 8310 	mrs	r3, PRIMASK
 800493e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004942:	663b      	str	r3, [r7, #96]	@ 0x60
 8004944:	2301      	movs	r3, #1
 8004946:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800494a:	f383 8810 	msr	PRIMASK, r3
}
 800494e:	46c0      	nop			@ (mov r8, r8)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2110      	movs	r1, #16
 800495c:	438a      	bics	r2, r1
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004962:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004966:	f383 8810 	msr	PRIMASK, r3
}
 800496a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	69db      	ldr	r3, [r3, #28]
 8004972:	2210      	movs	r2, #16
 8004974:	4013      	ands	r3, r2
 8004976:	2b10      	cmp	r3, #16
 8004978:	d103      	bne.n	8004982 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2210      	movs	r2, #16
 8004980:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	225c      	movs	r2, #92	@ 0x5c
 8004986:	5a9a      	ldrh	r2, [r3, r2]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	0011      	movs	r1, r2
 800498c:	0018      	movs	r0, r3
 800498e:	f7fe fe53 	bl	8003638 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8004992:	e010      	b.n	80049b6 <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	0018      	movs	r0, r3
 8004998:	f7fe fe3e 	bl	8003618 <HAL_UART_RxCpltCallback>
        break;
 800499c:	e00b      	b.n	80049b6 <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800499e:	2376      	movs	r3, #118	@ 0x76
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d006      	beq.n	80049b6 <UART_RxISR_16BIT_FIFOEN+0x28e>
 80049a8:	2384      	movs	r3, #132	@ 0x84
 80049aa:	18fb      	adds	r3, r7, r3
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	2220      	movs	r2, #32
 80049b0:	4013      	ands	r3, r2
 80049b2:	d000      	beq.n	80049b6 <UART_RxISR_16BIT_FIFOEN+0x28e>
 80049b4:	e6dd      	b.n	8004772 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80049b6:	205e      	movs	r0, #94	@ 0x5e
 80049b8:	183b      	adds	r3, r7, r0
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	215e      	movs	r1, #94	@ 0x5e
 80049be:	5a52      	ldrh	r2, [r2, r1]
 80049c0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80049c2:	0001      	movs	r1, r0
 80049c4:	187b      	adds	r3, r7, r1
 80049c6:	881b      	ldrh	r3, [r3, #0]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d044      	beq.n	8004a56 <UART_RxISR_16BIT_FIFOEN+0x32e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2268      	movs	r2, #104	@ 0x68
 80049d0:	5a9b      	ldrh	r3, [r3, r2]
 80049d2:	187a      	adds	r2, r7, r1
 80049d4:	8812      	ldrh	r2, [r2, #0]
 80049d6:	429a      	cmp	r2, r3
 80049d8:	d23d      	bcs.n	8004a56 <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80049da:	f3ef 8310 	mrs	r3, PRIMASK
 80049de:	60fb      	str	r3, [r7, #12]
  return(result);
 80049e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80049e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80049e4:	2301      	movs	r3, #1
 80049e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f383 8810 	msr	PRIMASK, r3
}
 80049ee:	46c0      	nop			@ (mov r8, r8)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	491c      	ldr	r1, [pc, #112]	@ (8004a6c <UART_RxISR_16BIT_FIFOEN+0x344>)
 80049fc:	400a      	ands	r2, r1
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a02:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	f383 8810 	msr	PRIMASK, r3
}
 8004a0a:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a18      	ldr	r2, [pc, #96]	@ (8004a70 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8004a10:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a12:	f3ef 8310 	mrs	r3, PRIMASK
 8004a16:	61bb      	str	r3, [r7, #24]
  return(result);
 8004a18:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	f383 8810 	msr	PRIMASK, r3
}
 8004a26:	46c0      	nop			@ (mov r8, r8)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681a      	ldr	r2, [r3, #0]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2120      	movs	r1, #32
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
 8004a38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004a3a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	f383 8810 	msr	PRIMASK, r3
}
 8004a42:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a44:	e007      	b.n	8004a56 <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	699a      	ldr	r2, [r3, #24]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2108      	movs	r1, #8
 8004a52:	430a      	orrs	r2, r1
 8004a54:	619a      	str	r2, [r3, #24]
}
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	b022      	add	sp, #136	@ 0x88
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	46c0      	nop			@ (mov r8, r8)
 8004a60:	fffffeff 	.word	0xfffffeff
 8004a64:	effffffe 	.word	0xeffffffe
 8004a68:	fbffffff 	.word	0xfbffffff
 8004a6c:	efffffff 	.word	0xefffffff
 8004a70:	0800423d 	.word	0x0800423d

08004a74 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a7c:	46c0      	nop			@ (mov r8, r8)
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b002      	add	sp, #8
 8004a82:	bd80      	pop	{r7, pc}

08004a84 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004a8c:	46c0      	nop			@ (mov r8, r8)
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b002      	add	sp, #8
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b082      	sub	sp, #8
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004a9c:	46c0      	nop			@ (mov r8, r8)
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	b002      	add	sp, #8
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <std>:
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	0004      	movs	r4, r0
 8004aaa:	6003      	str	r3, [r0, #0]
 8004aac:	6043      	str	r3, [r0, #4]
 8004aae:	6083      	str	r3, [r0, #8]
 8004ab0:	8181      	strh	r1, [r0, #12]
 8004ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ab4:	81c2      	strh	r2, [r0, #14]
 8004ab6:	6103      	str	r3, [r0, #16]
 8004ab8:	6143      	str	r3, [r0, #20]
 8004aba:	6183      	str	r3, [r0, #24]
 8004abc:	0019      	movs	r1, r3
 8004abe:	2208      	movs	r2, #8
 8004ac0:	305c      	adds	r0, #92	@ 0x5c
 8004ac2:	f000 fa6d 	bl	8004fa0 <memset>
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	@ (8004af4 <std+0x50>)
 8004ac8:	6224      	str	r4, [r4, #32]
 8004aca:	6263      	str	r3, [r4, #36]	@ 0x24
 8004acc:	4b0a      	ldr	r3, [pc, #40]	@ (8004af8 <std+0x54>)
 8004ace:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8004afc <std+0x58>)
 8004ad2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8004b00 <std+0x5c>)
 8004ad6:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8004b04 <std+0x60>)
 8004ada:	429c      	cmp	r4, r3
 8004adc:	d005      	beq.n	8004aea <std+0x46>
 8004ade:	4b0a      	ldr	r3, [pc, #40]	@ (8004b08 <std+0x64>)
 8004ae0:	429c      	cmp	r4, r3
 8004ae2:	d002      	beq.n	8004aea <std+0x46>
 8004ae4:	4b09      	ldr	r3, [pc, #36]	@ (8004b0c <std+0x68>)
 8004ae6:	429c      	cmp	r4, r3
 8004ae8:	d103      	bne.n	8004af2 <std+0x4e>
 8004aea:	0020      	movs	r0, r4
 8004aec:	3058      	adds	r0, #88	@ 0x58
 8004aee:	f000 faed 	bl	80050cc <__retarget_lock_init_recursive>
 8004af2:	bd10      	pop	{r4, pc}
 8004af4:	08004dc5 	.word	0x08004dc5
 8004af8:	08004df1 	.word	0x08004df1
 8004afc:	08004e29 	.word	0x08004e29
 8004b00:	08004e55 	.word	0x08004e55
 8004b04:	2000024c 	.word	0x2000024c
 8004b08:	200002b4 	.word	0x200002b4
 8004b0c:	2000031c 	.word	0x2000031c

08004b10 <stdio_exit_handler>:
 8004b10:	b510      	push	{r4, lr}
 8004b12:	4a03      	ldr	r2, [pc, #12]	@ (8004b20 <stdio_exit_handler+0x10>)
 8004b14:	4903      	ldr	r1, [pc, #12]	@ (8004b24 <stdio_exit_handler+0x14>)
 8004b16:	4804      	ldr	r0, [pc, #16]	@ (8004b28 <stdio_exit_handler+0x18>)
 8004b18:	f000 f86c 	bl	8004bf4 <_fwalk_sglue>
 8004b1c:	bd10      	pop	{r4, pc}
 8004b1e:	46c0      	nop			@ (mov r8, r8)
 8004b20:	2000000c 	.word	0x2000000c
 8004b24:	08006255 	.word	0x08006255
 8004b28:	2000001c 	.word	0x2000001c

08004b2c <cleanup_stdio>:
 8004b2c:	6841      	ldr	r1, [r0, #4]
 8004b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <cleanup_stdio+0x30>)
 8004b30:	b510      	push	{r4, lr}
 8004b32:	0004      	movs	r4, r0
 8004b34:	4299      	cmp	r1, r3
 8004b36:	d001      	beq.n	8004b3c <cleanup_stdio+0x10>
 8004b38:	f001 fb8c 	bl	8006254 <_fflush_r>
 8004b3c:	68a1      	ldr	r1, [r4, #8]
 8004b3e:	4b08      	ldr	r3, [pc, #32]	@ (8004b60 <cleanup_stdio+0x34>)
 8004b40:	4299      	cmp	r1, r3
 8004b42:	d002      	beq.n	8004b4a <cleanup_stdio+0x1e>
 8004b44:	0020      	movs	r0, r4
 8004b46:	f001 fb85 	bl	8006254 <_fflush_r>
 8004b4a:	68e1      	ldr	r1, [r4, #12]
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <cleanup_stdio+0x38>)
 8004b4e:	4299      	cmp	r1, r3
 8004b50:	d002      	beq.n	8004b58 <cleanup_stdio+0x2c>
 8004b52:	0020      	movs	r0, r4
 8004b54:	f001 fb7e 	bl	8006254 <_fflush_r>
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	46c0      	nop			@ (mov r8, r8)
 8004b5c:	2000024c 	.word	0x2000024c
 8004b60:	200002b4 	.word	0x200002b4
 8004b64:	2000031c 	.word	0x2000031c

08004b68 <global_stdio_init.part.0>:
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	4b09      	ldr	r3, [pc, #36]	@ (8004b90 <global_stdio_init.part.0+0x28>)
 8004b6c:	4a09      	ldr	r2, [pc, #36]	@ (8004b94 <global_stdio_init.part.0+0x2c>)
 8004b6e:	2104      	movs	r1, #4
 8004b70:	601a      	str	r2, [r3, #0]
 8004b72:	4809      	ldr	r0, [pc, #36]	@ (8004b98 <global_stdio_init.part.0+0x30>)
 8004b74:	2200      	movs	r2, #0
 8004b76:	f7ff ff95 	bl	8004aa4 <std>
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	2109      	movs	r1, #9
 8004b7e:	4807      	ldr	r0, [pc, #28]	@ (8004b9c <global_stdio_init.part.0+0x34>)
 8004b80:	f7ff ff90 	bl	8004aa4 <std>
 8004b84:	2202      	movs	r2, #2
 8004b86:	2112      	movs	r1, #18
 8004b88:	4805      	ldr	r0, [pc, #20]	@ (8004ba0 <global_stdio_init.part.0+0x38>)
 8004b8a:	f7ff ff8b 	bl	8004aa4 <std>
 8004b8e:	bd10      	pop	{r4, pc}
 8004b90:	20000384 	.word	0x20000384
 8004b94:	08004b11 	.word	0x08004b11
 8004b98:	2000024c 	.word	0x2000024c
 8004b9c:	200002b4 	.word	0x200002b4
 8004ba0:	2000031c 	.word	0x2000031c

08004ba4 <__sfp_lock_acquire>:
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4802      	ldr	r0, [pc, #8]	@ (8004bb0 <__sfp_lock_acquire+0xc>)
 8004ba8:	f000 fa91 	bl	80050ce <__retarget_lock_acquire_recursive>
 8004bac:	bd10      	pop	{r4, pc}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	2000038d 	.word	0x2000038d

08004bb4 <__sfp_lock_release>:
 8004bb4:	b510      	push	{r4, lr}
 8004bb6:	4802      	ldr	r0, [pc, #8]	@ (8004bc0 <__sfp_lock_release+0xc>)
 8004bb8:	f000 fa8a 	bl	80050d0 <__retarget_lock_release_recursive>
 8004bbc:	bd10      	pop	{r4, pc}
 8004bbe:	46c0      	nop			@ (mov r8, r8)
 8004bc0:	2000038d 	.word	0x2000038d

08004bc4 <__sinit>:
 8004bc4:	b510      	push	{r4, lr}
 8004bc6:	0004      	movs	r4, r0
 8004bc8:	f7ff ffec 	bl	8004ba4 <__sfp_lock_acquire>
 8004bcc:	6a23      	ldr	r3, [r4, #32]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d002      	beq.n	8004bd8 <__sinit+0x14>
 8004bd2:	f7ff ffef 	bl	8004bb4 <__sfp_lock_release>
 8004bd6:	bd10      	pop	{r4, pc}
 8004bd8:	4b04      	ldr	r3, [pc, #16]	@ (8004bec <__sinit+0x28>)
 8004bda:	6223      	str	r3, [r4, #32]
 8004bdc:	4b04      	ldr	r3, [pc, #16]	@ (8004bf0 <__sinit+0x2c>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1f6      	bne.n	8004bd2 <__sinit+0xe>
 8004be4:	f7ff ffc0 	bl	8004b68 <global_stdio_init.part.0>
 8004be8:	e7f3      	b.n	8004bd2 <__sinit+0xe>
 8004bea:	46c0      	nop			@ (mov r8, r8)
 8004bec:	08004b2d 	.word	0x08004b2d
 8004bf0:	20000384 	.word	0x20000384

08004bf4 <_fwalk_sglue>:
 8004bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004bf6:	0014      	movs	r4, r2
 8004bf8:	2600      	movs	r6, #0
 8004bfa:	9000      	str	r0, [sp, #0]
 8004bfc:	9101      	str	r1, [sp, #4]
 8004bfe:	68a5      	ldr	r5, [r4, #8]
 8004c00:	6867      	ldr	r7, [r4, #4]
 8004c02:	3f01      	subs	r7, #1
 8004c04:	d504      	bpl.n	8004c10 <_fwalk_sglue+0x1c>
 8004c06:	6824      	ldr	r4, [r4, #0]
 8004c08:	2c00      	cmp	r4, #0
 8004c0a:	d1f8      	bne.n	8004bfe <_fwalk_sglue+0xa>
 8004c0c:	0030      	movs	r0, r6
 8004c0e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004c10:	89ab      	ldrh	r3, [r5, #12]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d908      	bls.n	8004c28 <_fwalk_sglue+0x34>
 8004c16:	220e      	movs	r2, #14
 8004c18:	5eab      	ldrsh	r3, [r5, r2]
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	d004      	beq.n	8004c28 <_fwalk_sglue+0x34>
 8004c1e:	0029      	movs	r1, r5
 8004c20:	9800      	ldr	r0, [sp, #0]
 8004c22:	9b01      	ldr	r3, [sp, #4]
 8004c24:	4798      	blx	r3
 8004c26:	4306      	orrs	r6, r0
 8004c28:	3568      	adds	r5, #104	@ 0x68
 8004c2a:	e7ea      	b.n	8004c02 <_fwalk_sglue+0xe>

08004c2c <iprintf>:
 8004c2c:	b40f      	push	{r0, r1, r2, r3}
 8004c2e:	b507      	push	{r0, r1, r2, lr}
 8004c30:	4905      	ldr	r1, [pc, #20]	@ (8004c48 <iprintf+0x1c>)
 8004c32:	ab04      	add	r3, sp, #16
 8004c34:	6808      	ldr	r0, [r1, #0]
 8004c36:	cb04      	ldmia	r3!, {r2}
 8004c38:	6881      	ldr	r1, [r0, #8]
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	f000 fe8a 	bl	8005954 <_vfiprintf_r>
 8004c40:	b003      	add	sp, #12
 8004c42:	bc08      	pop	{r3}
 8004c44:	b004      	add	sp, #16
 8004c46:	4718      	bx	r3
 8004c48:	20000018 	.word	0x20000018

08004c4c <_puts_r>:
 8004c4c:	6a03      	ldr	r3, [r0, #32]
 8004c4e:	b570      	push	{r4, r5, r6, lr}
 8004c50:	0005      	movs	r5, r0
 8004c52:	000e      	movs	r6, r1
 8004c54:	6884      	ldr	r4, [r0, #8]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <_puts_r+0x12>
 8004c5a:	f7ff ffb3 	bl	8004bc4 <__sinit>
 8004c5e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c60:	07db      	lsls	r3, r3, #31
 8004c62:	d405      	bmi.n	8004c70 <_puts_r+0x24>
 8004c64:	89a3      	ldrh	r3, [r4, #12]
 8004c66:	059b      	lsls	r3, r3, #22
 8004c68:	d402      	bmi.n	8004c70 <_puts_r+0x24>
 8004c6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c6c:	f000 fa2f 	bl	80050ce <__retarget_lock_acquire_recursive>
 8004c70:	89a3      	ldrh	r3, [r4, #12]
 8004c72:	071b      	lsls	r3, r3, #28
 8004c74:	d502      	bpl.n	8004c7c <_puts_r+0x30>
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d11f      	bne.n	8004cbc <_puts_r+0x70>
 8004c7c:	0021      	movs	r1, r4
 8004c7e:	0028      	movs	r0, r5
 8004c80:	f000 f930 	bl	8004ee4 <__swsetup_r>
 8004c84:	2800      	cmp	r0, #0
 8004c86:	d019      	beq.n	8004cbc <_puts_r+0x70>
 8004c88:	2501      	movs	r5, #1
 8004c8a:	426d      	negs	r5, r5
 8004c8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004c8e:	07db      	lsls	r3, r3, #31
 8004c90:	d405      	bmi.n	8004c9e <_puts_r+0x52>
 8004c92:	89a3      	ldrh	r3, [r4, #12]
 8004c94:	059b      	lsls	r3, r3, #22
 8004c96:	d402      	bmi.n	8004c9e <_puts_r+0x52>
 8004c98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004c9a:	f000 fa19 	bl	80050d0 <__retarget_lock_release_recursive>
 8004c9e:	0028      	movs	r0, r5
 8004ca0:	bd70      	pop	{r4, r5, r6, pc}
 8004ca2:	3601      	adds	r6, #1
 8004ca4:	60a3      	str	r3, [r4, #8]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	da04      	bge.n	8004cb4 <_puts_r+0x68>
 8004caa:	69a2      	ldr	r2, [r4, #24]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	dc16      	bgt.n	8004cde <_puts_r+0x92>
 8004cb0:	290a      	cmp	r1, #10
 8004cb2:	d014      	beq.n	8004cde <_puts_r+0x92>
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	1c5a      	adds	r2, r3, #1
 8004cb8:	6022      	str	r2, [r4, #0]
 8004cba:	7019      	strb	r1, [r3, #0]
 8004cbc:	68a3      	ldr	r3, [r4, #8]
 8004cbe:	7831      	ldrb	r1, [r6, #0]
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	2900      	cmp	r1, #0
 8004cc4:	d1ed      	bne.n	8004ca2 <_puts_r+0x56>
 8004cc6:	60a3      	str	r3, [r4, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	da0f      	bge.n	8004cec <_puts_r+0xa0>
 8004ccc:	0022      	movs	r2, r4
 8004cce:	0028      	movs	r0, r5
 8004cd0:	310a      	adds	r1, #10
 8004cd2:	f000 f8c5 	bl	8004e60 <__swbuf_r>
 8004cd6:	3001      	adds	r0, #1
 8004cd8:	d0d6      	beq.n	8004c88 <_puts_r+0x3c>
 8004cda:	250a      	movs	r5, #10
 8004cdc:	e7d6      	b.n	8004c8c <_puts_r+0x40>
 8004cde:	0022      	movs	r2, r4
 8004ce0:	0028      	movs	r0, r5
 8004ce2:	f000 f8bd 	bl	8004e60 <__swbuf_r>
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d1e8      	bne.n	8004cbc <_puts_r+0x70>
 8004cea:	e7cd      	b.n	8004c88 <_puts_r+0x3c>
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	6022      	str	r2, [r4, #0]
 8004cf2:	220a      	movs	r2, #10
 8004cf4:	701a      	strb	r2, [r3, #0]
 8004cf6:	e7f0      	b.n	8004cda <_puts_r+0x8e>

08004cf8 <puts>:
 8004cf8:	b510      	push	{r4, lr}
 8004cfa:	4b03      	ldr	r3, [pc, #12]	@ (8004d08 <puts+0x10>)
 8004cfc:	0001      	movs	r1, r0
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	f7ff ffa4 	bl	8004c4c <_puts_r>
 8004d04:	bd10      	pop	{r4, pc}
 8004d06:	46c0      	nop			@ (mov r8, r8)
 8004d08:	20000018 	.word	0x20000018

08004d0c <sniprintf>:
 8004d0c:	b40c      	push	{r2, r3}
 8004d0e:	b530      	push	{r4, r5, lr}
 8004d10:	4b17      	ldr	r3, [pc, #92]	@ (8004d70 <sniprintf+0x64>)
 8004d12:	000c      	movs	r4, r1
 8004d14:	681d      	ldr	r5, [r3, #0]
 8004d16:	b09d      	sub	sp, #116	@ 0x74
 8004d18:	2900      	cmp	r1, #0
 8004d1a:	da08      	bge.n	8004d2e <sniprintf+0x22>
 8004d1c:	238b      	movs	r3, #139	@ 0x8b
 8004d1e:	2001      	movs	r0, #1
 8004d20:	602b      	str	r3, [r5, #0]
 8004d22:	4240      	negs	r0, r0
 8004d24:	b01d      	add	sp, #116	@ 0x74
 8004d26:	bc30      	pop	{r4, r5}
 8004d28:	bc08      	pop	{r3}
 8004d2a:	b002      	add	sp, #8
 8004d2c:	4718      	bx	r3
 8004d2e:	2382      	movs	r3, #130	@ 0x82
 8004d30:	466a      	mov	r2, sp
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	8293      	strh	r3, [r2, #20]
 8004d36:	2300      	movs	r3, #0
 8004d38:	9002      	str	r0, [sp, #8]
 8004d3a:	9006      	str	r0, [sp, #24]
 8004d3c:	4299      	cmp	r1, r3
 8004d3e:	d000      	beq.n	8004d42 <sniprintf+0x36>
 8004d40:	1e4b      	subs	r3, r1, #1
 8004d42:	9304      	str	r3, [sp, #16]
 8004d44:	9307      	str	r3, [sp, #28]
 8004d46:	2301      	movs	r3, #1
 8004d48:	466a      	mov	r2, sp
 8004d4a:	425b      	negs	r3, r3
 8004d4c:	82d3      	strh	r3, [r2, #22]
 8004d4e:	0028      	movs	r0, r5
 8004d50:	ab21      	add	r3, sp, #132	@ 0x84
 8004d52:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8004d54:	a902      	add	r1, sp, #8
 8004d56:	9301      	str	r3, [sp, #4]
 8004d58:	f000 fb18 	bl	800538c <_svfiprintf_r>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	da01      	bge.n	8004d64 <sniprintf+0x58>
 8004d60:	238b      	movs	r3, #139	@ 0x8b
 8004d62:	602b      	str	r3, [r5, #0]
 8004d64:	2c00      	cmp	r4, #0
 8004d66:	d0dd      	beq.n	8004d24 <sniprintf+0x18>
 8004d68:	2200      	movs	r2, #0
 8004d6a:	9b02      	ldr	r3, [sp, #8]
 8004d6c:	701a      	strb	r2, [r3, #0]
 8004d6e:	e7d9      	b.n	8004d24 <sniprintf+0x18>
 8004d70:	20000018 	.word	0x20000018

08004d74 <siscanf>:
 8004d74:	b40e      	push	{r1, r2, r3}
 8004d76:	b530      	push	{r4, r5, lr}
 8004d78:	2381      	movs	r3, #129	@ 0x81
 8004d7a:	b09c      	sub	sp, #112	@ 0x70
 8004d7c:	466a      	mov	r2, sp
 8004d7e:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004d80:	009b      	lsls	r3, r3, #2
 8004d82:	cc20      	ldmia	r4!, {r5}
 8004d84:	8293      	strh	r3, [r2, #20]
 8004d86:	9002      	str	r0, [sp, #8]
 8004d88:	9006      	str	r0, [sp, #24]
 8004d8a:	f7fb f9bd 	bl	8000108 <strlen>
 8004d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8004dbc <siscanf+0x48>)
 8004d90:	466a      	mov	r2, sp
 8004d92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d94:	2300      	movs	r3, #0
 8004d96:	9003      	str	r0, [sp, #12]
 8004d98:	9007      	str	r0, [sp, #28]
 8004d9a:	4809      	ldr	r0, [pc, #36]	@ (8004dc0 <siscanf+0x4c>)
 8004d9c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d9e:	9314      	str	r3, [sp, #80]	@ 0x50
 8004da0:	3b01      	subs	r3, #1
 8004da2:	82d3      	strh	r3, [r2, #22]
 8004da4:	a902      	add	r1, sp, #8
 8004da6:	0023      	movs	r3, r4
 8004da8:	002a      	movs	r2, r5
 8004daa:	6800      	ldr	r0, [r0, #0]
 8004dac:	9401      	str	r4, [sp, #4]
 8004dae:	f000 fc47 	bl	8005640 <__ssvfiscanf_r>
 8004db2:	b01c      	add	sp, #112	@ 0x70
 8004db4:	bc30      	pop	{r4, r5}
 8004db6:	bc08      	pop	{r3}
 8004db8:	b003      	add	sp, #12
 8004dba:	4718      	bx	r3
 8004dbc:	08004ded 	.word	0x08004ded
 8004dc0:	20000018 	.word	0x20000018

08004dc4 <__sread>:
 8004dc4:	b570      	push	{r4, r5, r6, lr}
 8004dc6:	000c      	movs	r4, r1
 8004dc8:	250e      	movs	r5, #14
 8004dca:	5f49      	ldrsh	r1, [r1, r5]
 8004dcc:	f000 f92c 	bl	8005028 <_read_r>
 8004dd0:	2800      	cmp	r0, #0
 8004dd2:	db03      	blt.n	8004ddc <__sread+0x18>
 8004dd4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8004dd6:	181b      	adds	r3, r3, r0
 8004dd8:	6563      	str	r3, [r4, #84]	@ 0x54
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	4a02      	ldr	r2, [pc, #8]	@ (8004de8 <__sread+0x24>)
 8004de0:	4013      	ands	r3, r2
 8004de2:	81a3      	strh	r3, [r4, #12]
 8004de4:	e7f9      	b.n	8004dda <__sread+0x16>
 8004de6:	46c0      	nop			@ (mov r8, r8)
 8004de8:	ffffefff 	.word	0xffffefff

08004dec <__seofread>:
 8004dec:	2000      	movs	r0, #0
 8004dee:	4770      	bx	lr

08004df0 <__swrite>:
 8004df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df2:	001f      	movs	r7, r3
 8004df4:	898b      	ldrh	r3, [r1, #12]
 8004df6:	0005      	movs	r5, r0
 8004df8:	000c      	movs	r4, r1
 8004dfa:	0016      	movs	r6, r2
 8004dfc:	05db      	lsls	r3, r3, #23
 8004dfe:	d505      	bpl.n	8004e0c <__swrite+0x1c>
 8004e00:	230e      	movs	r3, #14
 8004e02:	5ec9      	ldrsh	r1, [r1, r3]
 8004e04:	2200      	movs	r2, #0
 8004e06:	2302      	movs	r3, #2
 8004e08:	f000 f8fa 	bl	8005000 <_lseek_r>
 8004e0c:	89a3      	ldrh	r3, [r4, #12]
 8004e0e:	4a05      	ldr	r2, [pc, #20]	@ (8004e24 <__swrite+0x34>)
 8004e10:	0028      	movs	r0, r5
 8004e12:	4013      	ands	r3, r2
 8004e14:	81a3      	strh	r3, [r4, #12]
 8004e16:	0032      	movs	r2, r6
 8004e18:	230e      	movs	r3, #14
 8004e1a:	5ee1      	ldrsh	r1, [r4, r3]
 8004e1c:	003b      	movs	r3, r7
 8004e1e:	f000 f917 	bl	8005050 <_write_r>
 8004e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e24:	ffffefff 	.word	0xffffefff

08004e28 <__sseek>:
 8004e28:	b570      	push	{r4, r5, r6, lr}
 8004e2a:	000c      	movs	r4, r1
 8004e2c:	250e      	movs	r5, #14
 8004e2e:	5f49      	ldrsh	r1, [r1, r5]
 8004e30:	f000 f8e6 	bl	8005000 <_lseek_r>
 8004e34:	89a3      	ldrh	r3, [r4, #12]
 8004e36:	1c42      	adds	r2, r0, #1
 8004e38:	d103      	bne.n	8004e42 <__sseek+0x1a>
 8004e3a:	4a05      	ldr	r2, [pc, #20]	@ (8004e50 <__sseek+0x28>)
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	81a3      	strh	r3, [r4, #12]
 8004e40:	bd70      	pop	{r4, r5, r6, pc}
 8004e42:	2280      	movs	r2, #128	@ 0x80
 8004e44:	0152      	lsls	r2, r2, #5
 8004e46:	4313      	orrs	r3, r2
 8004e48:	81a3      	strh	r3, [r4, #12]
 8004e4a:	6560      	str	r0, [r4, #84]	@ 0x54
 8004e4c:	e7f8      	b.n	8004e40 <__sseek+0x18>
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	ffffefff 	.word	0xffffefff

08004e54 <__sclose>:
 8004e54:	b510      	push	{r4, lr}
 8004e56:	230e      	movs	r3, #14
 8004e58:	5ec9      	ldrsh	r1, [r1, r3]
 8004e5a:	f000 f8bf 	bl	8004fdc <_close_r>
 8004e5e:	bd10      	pop	{r4, pc}

08004e60 <__swbuf_r>:
 8004e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e62:	0006      	movs	r6, r0
 8004e64:	000d      	movs	r5, r1
 8004e66:	0014      	movs	r4, r2
 8004e68:	2800      	cmp	r0, #0
 8004e6a:	d004      	beq.n	8004e76 <__swbuf_r+0x16>
 8004e6c:	6a03      	ldr	r3, [r0, #32]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <__swbuf_r+0x16>
 8004e72:	f7ff fea7 	bl	8004bc4 <__sinit>
 8004e76:	69a3      	ldr	r3, [r4, #24]
 8004e78:	60a3      	str	r3, [r4, #8]
 8004e7a:	89a3      	ldrh	r3, [r4, #12]
 8004e7c:	071b      	lsls	r3, r3, #28
 8004e7e:	d502      	bpl.n	8004e86 <__swbuf_r+0x26>
 8004e80:	6923      	ldr	r3, [r4, #16]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d109      	bne.n	8004e9a <__swbuf_r+0x3a>
 8004e86:	0021      	movs	r1, r4
 8004e88:	0030      	movs	r0, r6
 8004e8a:	f000 f82b 	bl	8004ee4 <__swsetup_r>
 8004e8e:	2800      	cmp	r0, #0
 8004e90:	d003      	beq.n	8004e9a <__swbuf_r+0x3a>
 8004e92:	2501      	movs	r5, #1
 8004e94:	426d      	negs	r5, r5
 8004e96:	0028      	movs	r0, r5
 8004e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e9a:	6923      	ldr	r3, [r4, #16]
 8004e9c:	6820      	ldr	r0, [r4, #0]
 8004e9e:	b2ef      	uxtb	r7, r5
 8004ea0:	1ac0      	subs	r0, r0, r3
 8004ea2:	6963      	ldr	r3, [r4, #20]
 8004ea4:	b2ed      	uxtb	r5, r5
 8004ea6:	4283      	cmp	r3, r0
 8004ea8:	dc05      	bgt.n	8004eb6 <__swbuf_r+0x56>
 8004eaa:	0021      	movs	r1, r4
 8004eac:	0030      	movs	r0, r6
 8004eae:	f001 f9d1 	bl	8006254 <_fflush_r>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	d1ed      	bne.n	8004e92 <__swbuf_r+0x32>
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	3001      	adds	r0, #1
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	60a3      	str	r3, [r4, #8]
 8004ebe:	6823      	ldr	r3, [r4, #0]
 8004ec0:	1c5a      	adds	r2, r3, #1
 8004ec2:	6022      	str	r2, [r4, #0]
 8004ec4:	701f      	strb	r7, [r3, #0]
 8004ec6:	6963      	ldr	r3, [r4, #20]
 8004ec8:	4283      	cmp	r3, r0
 8004eca:	d004      	beq.n	8004ed6 <__swbuf_r+0x76>
 8004ecc:	89a3      	ldrh	r3, [r4, #12]
 8004ece:	07db      	lsls	r3, r3, #31
 8004ed0:	d5e1      	bpl.n	8004e96 <__swbuf_r+0x36>
 8004ed2:	2d0a      	cmp	r5, #10
 8004ed4:	d1df      	bne.n	8004e96 <__swbuf_r+0x36>
 8004ed6:	0021      	movs	r1, r4
 8004ed8:	0030      	movs	r0, r6
 8004eda:	f001 f9bb 	bl	8006254 <_fflush_r>
 8004ede:	2800      	cmp	r0, #0
 8004ee0:	d0d9      	beq.n	8004e96 <__swbuf_r+0x36>
 8004ee2:	e7d6      	b.n	8004e92 <__swbuf_r+0x32>

08004ee4 <__swsetup_r>:
 8004ee4:	4b2d      	ldr	r3, [pc, #180]	@ (8004f9c <__swsetup_r+0xb8>)
 8004ee6:	b570      	push	{r4, r5, r6, lr}
 8004ee8:	0005      	movs	r5, r0
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	000c      	movs	r4, r1
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d004      	beq.n	8004efc <__swsetup_r+0x18>
 8004ef2:	6a03      	ldr	r3, [r0, #32]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <__swsetup_r+0x18>
 8004ef8:	f7ff fe64 	bl	8004bc4 <__sinit>
 8004efc:	230c      	movs	r3, #12
 8004efe:	5ee2      	ldrsh	r2, [r4, r3]
 8004f00:	0713      	lsls	r3, r2, #28
 8004f02:	d423      	bmi.n	8004f4c <__swsetup_r+0x68>
 8004f04:	06d3      	lsls	r3, r2, #27
 8004f06:	d407      	bmi.n	8004f18 <__swsetup_r+0x34>
 8004f08:	2309      	movs	r3, #9
 8004f0a:	602b      	str	r3, [r5, #0]
 8004f0c:	2340      	movs	r3, #64	@ 0x40
 8004f0e:	2001      	movs	r0, #1
 8004f10:	4313      	orrs	r3, r2
 8004f12:	81a3      	strh	r3, [r4, #12]
 8004f14:	4240      	negs	r0, r0
 8004f16:	e03a      	b.n	8004f8e <__swsetup_r+0xaa>
 8004f18:	0752      	lsls	r2, r2, #29
 8004f1a:	d513      	bpl.n	8004f44 <__swsetup_r+0x60>
 8004f1c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004f1e:	2900      	cmp	r1, #0
 8004f20:	d008      	beq.n	8004f34 <__swsetup_r+0x50>
 8004f22:	0023      	movs	r3, r4
 8004f24:	3344      	adds	r3, #68	@ 0x44
 8004f26:	4299      	cmp	r1, r3
 8004f28:	d002      	beq.n	8004f30 <__swsetup_r+0x4c>
 8004f2a:	0028      	movs	r0, r5
 8004f2c:	f000 f8d2 	bl	80050d4 <_free_r>
 8004f30:	2300      	movs	r3, #0
 8004f32:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f34:	2224      	movs	r2, #36	@ 0x24
 8004f36:	89a3      	ldrh	r3, [r4, #12]
 8004f38:	4393      	bics	r3, r2
 8004f3a:	81a3      	strh	r3, [r4, #12]
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	6063      	str	r3, [r4, #4]
 8004f40:	6923      	ldr	r3, [r4, #16]
 8004f42:	6023      	str	r3, [r4, #0]
 8004f44:	2308      	movs	r3, #8
 8004f46:	89a2      	ldrh	r2, [r4, #12]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	81a3      	strh	r3, [r4, #12]
 8004f4c:	6923      	ldr	r3, [r4, #16]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10b      	bne.n	8004f6a <__swsetup_r+0x86>
 8004f52:	21a0      	movs	r1, #160	@ 0xa0
 8004f54:	2280      	movs	r2, #128	@ 0x80
 8004f56:	89a3      	ldrh	r3, [r4, #12]
 8004f58:	0089      	lsls	r1, r1, #2
 8004f5a:	0092      	lsls	r2, r2, #2
 8004f5c:	400b      	ands	r3, r1
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d003      	beq.n	8004f6a <__swsetup_r+0x86>
 8004f62:	0021      	movs	r1, r4
 8004f64:	0028      	movs	r0, r5
 8004f66:	f001 f9cb 	bl	8006300 <__smakebuf_r>
 8004f6a:	230c      	movs	r3, #12
 8004f6c:	5ee2      	ldrsh	r2, [r4, r3]
 8004f6e:	2101      	movs	r1, #1
 8004f70:	0013      	movs	r3, r2
 8004f72:	400b      	ands	r3, r1
 8004f74:	420a      	tst	r2, r1
 8004f76:	d00b      	beq.n	8004f90 <__swsetup_r+0xac>
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60a3      	str	r3, [r4, #8]
 8004f7c:	6963      	ldr	r3, [r4, #20]
 8004f7e:	425b      	negs	r3, r3
 8004f80:	61a3      	str	r3, [r4, #24]
 8004f82:	2000      	movs	r0, #0
 8004f84:	6923      	ldr	r3, [r4, #16]
 8004f86:	4283      	cmp	r3, r0
 8004f88:	d101      	bne.n	8004f8e <__swsetup_r+0xaa>
 8004f8a:	0613      	lsls	r3, r2, #24
 8004f8c:	d4be      	bmi.n	8004f0c <__swsetup_r+0x28>
 8004f8e:	bd70      	pop	{r4, r5, r6, pc}
 8004f90:	0791      	lsls	r1, r2, #30
 8004f92:	d400      	bmi.n	8004f96 <__swsetup_r+0xb2>
 8004f94:	6963      	ldr	r3, [r4, #20]
 8004f96:	60a3      	str	r3, [r4, #8]
 8004f98:	e7f3      	b.n	8004f82 <__swsetup_r+0x9e>
 8004f9a:	46c0      	nop			@ (mov r8, r8)
 8004f9c:	20000018 	.word	0x20000018

08004fa0 <memset>:
 8004fa0:	0003      	movs	r3, r0
 8004fa2:	1882      	adds	r2, r0, r2
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d100      	bne.n	8004faa <memset+0xa>
 8004fa8:	4770      	bx	lr
 8004faa:	7019      	strb	r1, [r3, #0]
 8004fac:	3301      	adds	r3, #1
 8004fae:	e7f9      	b.n	8004fa4 <memset+0x4>

08004fb0 <strstr>:
 8004fb0:	780a      	ldrb	r2, [r1, #0]
 8004fb2:	b530      	push	{r4, r5, lr}
 8004fb4:	2a00      	cmp	r2, #0
 8004fb6:	d10c      	bne.n	8004fd2 <strstr+0x22>
 8004fb8:	bd30      	pop	{r4, r5, pc}
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d108      	bne.n	8004fd0 <strstr+0x20>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	5ccc      	ldrb	r4, [r1, r3]
 8004fc2:	2c00      	cmp	r4, #0
 8004fc4:	d0f8      	beq.n	8004fb8 <strstr+0x8>
 8004fc6:	5cc5      	ldrb	r5, [r0, r3]
 8004fc8:	42a5      	cmp	r5, r4
 8004fca:	d101      	bne.n	8004fd0 <strstr+0x20>
 8004fcc:	3301      	adds	r3, #1
 8004fce:	e7f7      	b.n	8004fc0 <strstr+0x10>
 8004fd0:	3001      	adds	r0, #1
 8004fd2:	7803      	ldrb	r3, [r0, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d1f0      	bne.n	8004fba <strstr+0xa>
 8004fd8:	0018      	movs	r0, r3
 8004fda:	e7ed      	b.n	8004fb8 <strstr+0x8>

08004fdc <_close_r>:
 8004fdc:	2300      	movs	r3, #0
 8004fde:	b570      	push	{r4, r5, r6, lr}
 8004fe0:	4d06      	ldr	r5, [pc, #24]	@ (8004ffc <_close_r+0x20>)
 8004fe2:	0004      	movs	r4, r0
 8004fe4:	0008      	movs	r0, r1
 8004fe6:	602b      	str	r3, [r5, #0]
 8004fe8:	f7fc f877 	bl	80010da <_close>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d103      	bne.n	8004ff8 <_close_r+0x1c>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d000      	beq.n	8004ff8 <_close_r+0x1c>
 8004ff6:	6023      	str	r3, [r4, #0]
 8004ff8:	bd70      	pop	{r4, r5, r6, pc}
 8004ffa:	46c0      	nop			@ (mov r8, r8)
 8004ffc:	20000388 	.word	0x20000388

08005000 <_lseek_r>:
 8005000:	b570      	push	{r4, r5, r6, lr}
 8005002:	0004      	movs	r4, r0
 8005004:	0008      	movs	r0, r1
 8005006:	0011      	movs	r1, r2
 8005008:	001a      	movs	r2, r3
 800500a:	2300      	movs	r3, #0
 800500c:	4d05      	ldr	r5, [pc, #20]	@ (8005024 <_lseek_r+0x24>)
 800500e:	602b      	str	r3, [r5, #0]
 8005010:	f7fc f884 	bl	800111c <_lseek>
 8005014:	1c43      	adds	r3, r0, #1
 8005016:	d103      	bne.n	8005020 <_lseek_r+0x20>
 8005018:	682b      	ldr	r3, [r5, #0]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d000      	beq.n	8005020 <_lseek_r+0x20>
 800501e:	6023      	str	r3, [r4, #0]
 8005020:	bd70      	pop	{r4, r5, r6, pc}
 8005022:	46c0      	nop			@ (mov r8, r8)
 8005024:	20000388 	.word	0x20000388

08005028 <_read_r>:
 8005028:	b570      	push	{r4, r5, r6, lr}
 800502a:	0004      	movs	r4, r0
 800502c:	0008      	movs	r0, r1
 800502e:	0011      	movs	r1, r2
 8005030:	001a      	movs	r2, r3
 8005032:	2300      	movs	r3, #0
 8005034:	4d05      	ldr	r5, [pc, #20]	@ (800504c <_read_r+0x24>)
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	f7fc f816 	bl	8001068 <_read>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d103      	bne.n	8005048 <_read_r+0x20>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d000      	beq.n	8005048 <_read_r+0x20>
 8005046:	6023      	str	r3, [r4, #0]
 8005048:	bd70      	pop	{r4, r5, r6, pc}
 800504a:	46c0      	nop			@ (mov r8, r8)
 800504c:	20000388 	.word	0x20000388

08005050 <_write_r>:
 8005050:	b570      	push	{r4, r5, r6, lr}
 8005052:	0004      	movs	r4, r0
 8005054:	0008      	movs	r0, r1
 8005056:	0011      	movs	r1, r2
 8005058:	001a      	movs	r2, r3
 800505a:	2300      	movs	r3, #0
 800505c:	4d05      	ldr	r5, [pc, #20]	@ (8005074 <_write_r+0x24>)
 800505e:	602b      	str	r3, [r5, #0]
 8005060:	f7fc f81f 	bl	80010a2 <_write>
 8005064:	1c43      	adds	r3, r0, #1
 8005066:	d103      	bne.n	8005070 <_write_r+0x20>
 8005068:	682b      	ldr	r3, [r5, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d000      	beq.n	8005070 <_write_r+0x20>
 800506e:	6023      	str	r3, [r4, #0]
 8005070:	bd70      	pop	{r4, r5, r6, pc}
 8005072:	46c0      	nop			@ (mov r8, r8)
 8005074:	20000388 	.word	0x20000388

08005078 <__errno>:
 8005078:	4b01      	ldr	r3, [pc, #4]	@ (8005080 <__errno+0x8>)
 800507a:	6818      	ldr	r0, [r3, #0]
 800507c:	4770      	bx	lr
 800507e:	46c0      	nop			@ (mov r8, r8)
 8005080:	20000018 	.word	0x20000018

08005084 <__libc_init_array>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	2600      	movs	r6, #0
 8005088:	4c0c      	ldr	r4, [pc, #48]	@ (80050bc <__libc_init_array+0x38>)
 800508a:	4d0d      	ldr	r5, [pc, #52]	@ (80050c0 <__libc_init_array+0x3c>)
 800508c:	1b64      	subs	r4, r4, r5
 800508e:	10a4      	asrs	r4, r4, #2
 8005090:	42a6      	cmp	r6, r4
 8005092:	d109      	bne.n	80050a8 <__libc_init_array+0x24>
 8005094:	2600      	movs	r6, #0
 8005096:	f001 fb95 	bl	80067c4 <_init>
 800509a:	4c0a      	ldr	r4, [pc, #40]	@ (80050c4 <__libc_init_array+0x40>)
 800509c:	4d0a      	ldr	r5, [pc, #40]	@ (80050c8 <__libc_init_array+0x44>)
 800509e:	1b64      	subs	r4, r4, r5
 80050a0:	10a4      	asrs	r4, r4, #2
 80050a2:	42a6      	cmp	r6, r4
 80050a4:	d105      	bne.n	80050b2 <__libc_init_array+0x2e>
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
 80050a8:	00b3      	lsls	r3, r6, #2
 80050aa:	58eb      	ldr	r3, [r5, r3]
 80050ac:	4798      	blx	r3
 80050ae:	3601      	adds	r6, #1
 80050b0:	e7ee      	b.n	8005090 <__libc_init_array+0xc>
 80050b2:	00b3      	lsls	r3, r6, #2
 80050b4:	58eb      	ldr	r3, [r5, r3]
 80050b6:	4798      	blx	r3
 80050b8:	3601      	adds	r6, #1
 80050ba:	e7f2      	b.n	80050a2 <__libc_init_array+0x1e>
 80050bc:	08006d10 	.word	0x08006d10
 80050c0:	08006d10 	.word	0x08006d10
 80050c4:	08006d14 	.word	0x08006d14
 80050c8:	08006d10 	.word	0x08006d10

080050cc <__retarget_lock_init_recursive>:
 80050cc:	4770      	bx	lr

080050ce <__retarget_lock_acquire_recursive>:
 80050ce:	4770      	bx	lr

080050d0 <__retarget_lock_release_recursive>:
 80050d0:	4770      	bx	lr
	...

080050d4 <_free_r>:
 80050d4:	b570      	push	{r4, r5, r6, lr}
 80050d6:	0005      	movs	r5, r0
 80050d8:	1e0c      	subs	r4, r1, #0
 80050da:	d010      	beq.n	80050fe <_free_r+0x2a>
 80050dc:	3c04      	subs	r4, #4
 80050de:	6823      	ldr	r3, [r4, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	da00      	bge.n	80050e6 <_free_r+0x12>
 80050e4:	18e4      	adds	r4, r4, r3
 80050e6:	0028      	movs	r0, r5
 80050e8:	f000 f8e0 	bl	80052ac <__malloc_lock>
 80050ec:	4a1d      	ldr	r2, [pc, #116]	@ (8005164 <_free_r+0x90>)
 80050ee:	6813      	ldr	r3, [r2, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d105      	bne.n	8005100 <_free_r+0x2c>
 80050f4:	6063      	str	r3, [r4, #4]
 80050f6:	6014      	str	r4, [r2, #0]
 80050f8:	0028      	movs	r0, r5
 80050fa:	f000 f8df 	bl	80052bc <__malloc_unlock>
 80050fe:	bd70      	pop	{r4, r5, r6, pc}
 8005100:	42a3      	cmp	r3, r4
 8005102:	d908      	bls.n	8005116 <_free_r+0x42>
 8005104:	6820      	ldr	r0, [r4, #0]
 8005106:	1821      	adds	r1, r4, r0
 8005108:	428b      	cmp	r3, r1
 800510a:	d1f3      	bne.n	80050f4 <_free_r+0x20>
 800510c:	6819      	ldr	r1, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	1809      	adds	r1, r1, r0
 8005112:	6021      	str	r1, [r4, #0]
 8005114:	e7ee      	b.n	80050f4 <_free_r+0x20>
 8005116:	001a      	movs	r2, r3
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d001      	beq.n	8005122 <_free_r+0x4e>
 800511e:	42a3      	cmp	r3, r4
 8005120:	d9f9      	bls.n	8005116 <_free_r+0x42>
 8005122:	6811      	ldr	r1, [r2, #0]
 8005124:	1850      	adds	r0, r2, r1
 8005126:	42a0      	cmp	r0, r4
 8005128:	d10b      	bne.n	8005142 <_free_r+0x6e>
 800512a:	6820      	ldr	r0, [r4, #0]
 800512c:	1809      	adds	r1, r1, r0
 800512e:	1850      	adds	r0, r2, r1
 8005130:	6011      	str	r1, [r2, #0]
 8005132:	4283      	cmp	r3, r0
 8005134:	d1e0      	bne.n	80050f8 <_free_r+0x24>
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	1841      	adds	r1, r0, r1
 800513c:	6011      	str	r1, [r2, #0]
 800513e:	6053      	str	r3, [r2, #4]
 8005140:	e7da      	b.n	80050f8 <_free_r+0x24>
 8005142:	42a0      	cmp	r0, r4
 8005144:	d902      	bls.n	800514c <_free_r+0x78>
 8005146:	230c      	movs	r3, #12
 8005148:	602b      	str	r3, [r5, #0]
 800514a:	e7d5      	b.n	80050f8 <_free_r+0x24>
 800514c:	6820      	ldr	r0, [r4, #0]
 800514e:	1821      	adds	r1, r4, r0
 8005150:	428b      	cmp	r3, r1
 8005152:	d103      	bne.n	800515c <_free_r+0x88>
 8005154:	6819      	ldr	r1, [r3, #0]
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	1809      	adds	r1, r1, r0
 800515a:	6021      	str	r1, [r4, #0]
 800515c:	6063      	str	r3, [r4, #4]
 800515e:	6054      	str	r4, [r2, #4]
 8005160:	e7ca      	b.n	80050f8 <_free_r+0x24>
 8005162:	46c0      	nop			@ (mov r8, r8)
 8005164:	20000394 	.word	0x20000394

08005168 <sbrk_aligned>:
 8005168:	b570      	push	{r4, r5, r6, lr}
 800516a:	4e0f      	ldr	r6, [pc, #60]	@ (80051a8 <sbrk_aligned+0x40>)
 800516c:	000d      	movs	r5, r1
 800516e:	6831      	ldr	r1, [r6, #0]
 8005170:	0004      	movs	r4, r0
 8005172:	2900      	cmp	r1, #0
 8005174:	d102      	bne.n	800517c <sbrk_aligned+0x14>
 8005176:	f001 f9b3 	bl	80064e0 <_sbrk_r>
 800517a:	6030      	str	r0, [r6, #0]
 800517c:	0029      	movs	r1, r5
 800517e:	0020      	movs	r0, r4
 8005180:	f001 f9ae 	bl	80064e0 <_sbrk_r>
 8005184:	1c43      	adds	r3, r0, #1
 8005186:	d103      	bne.n	8005190 <sbrk_aligned+0x28>
 8005188:	2501      	movs	r5, #1
 800518a:	426d      	negs	r5, r5
 800518c:	0028      	movs	r0, r5
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	2303      	movs	r3, #3
 8005192:	1cc5      	adds	r5, r0, #3
 8005194:	439d      	bics	r5, r3
 8005196:	42a8      	cmp	r0, r5
 8005198:	d0f8      	beq.n	800518c <sbrk_aligned+0x24>
 800519a:	1a29      	subs	r1, r5, r0
 800519c:	0020      	movs	r0, r4
 800519e:	f001 f99f 	bl	80064e0 <_sbrk_r>
 80051a2:	3001      	adds	r0, #1
 80051a4:	d1f2      	bne.n	800518c <sbrk_aligned+0x24>
 80051a6:	e7ef      	b.n	8005188 <sbrk_aligned+0x20>
 80051a8:	20000390 	.word	0x20000390

080051ac <_malloc_r>:
 80051ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80051ae:	2203      	movs	r2, #3
 80051b0:	1ccb      	adds	r3, r1, #3
 80051b2:	4393      	bics	r3, r2
 80051b4:	3308      	adds	r3, #8
 80051b6:	0005      	movs	r5, r0
 80051b8:	001f      	movs	r7, r3
 80051ba:	2b0c      	cmp	r3, #12
 80051bc:	d234      	bcs.n	8005228 <_malloc_r+0x7c>
 80051be:	270c      	movs	r7, #12
 80051c0:	42b9      	cmp	r1, r7
 80051c2:	d833      	bhi.n	800522c <_malloc_r+0x80>
 80051c4:	0028      	movs	r0, r5
 80051c6:	f000 f871 	bl	80052ac <__malloc_lock>
 80051ca:	4e37      	ldr	r6, [pc, #220]	@ (80052a8 <_malloc_r+0xfc>)
 80051cc:	6833      	ldr	r3, [r6, #0]
 80051ce:	001c      	movs	r4, r3
 80051d0:	2c00      	cmp	r4, #0
 80051d2:	d12f      	bne.n	8005234 <_malloc_r+0x88>
 80051d4:	0039      	movs	r1, r7
 80051d6:	0028      	movs	r0, r5
 80051d8:	f7ff ffc6 	bl	8005168 <sbrk_aligned>
 80051dc:	0004      	movs	r4, r0
 80051de:	1c43      	adds	r3, r0, #1
 80051e0:	d15f      	bne.n	80052a2 <_malloc_r+0xf6>
 80051e2:	6834      	ldr	r4, [r6, #0]
 80051e4:	9400      	str	r4, [sp, #0]
 80051e6:	9b00      	ldr	r3, [sp, #0]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d14a      	bne.n	8005282 <_malloc_r+0xd6>
 80051ec:	2c00      	cmp	r4, #0
 80051ee:	d052      	beq.n	8005296 <_malloc_r+0xea>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	0028      	movs	r0, r5
 80051f4:	18e3      	adds	r3, r4, r3
 80051f6:	9900      	ldr	r1, [sp, #0]
 80051f8:	9301      	str	r3, [sp, #4]
 80051fa:	f001 f971 	bl	80064e0 <_sbrk_r>
 80051fe:	9b01      	ldr	r3, [sp, #4]
 8005200:	4283      	cmp	r3, r0
 8005202:	d148      	bne.n	8005296 <_malloc_r+0xea>
 8005204:	6823      	ldr	r3, [r4, #0]
 8005206:	0028      	movs	r0, r5
 8005208:	1aff      	subs	r7, r7, r3
 800520a:	0039      	movs	r1, r7
 800520c:	f7ff ffac 	bl	8005168 <sbrk_aligned>
 8005210:	3001      	adds	r0, #1
 8005212:	d040      	beq.n	8005296 <_malloc_r+0xea>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	19db      	adds	r3, r3, r7
 8005218:	6023      	str	r3, [r4, #0]
 800521a:	6833      	ldr	r3, [r6, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	2a00      	cmp	r2, #0
 8005220:	d133      	bne.n	800528a <_malloc_r+0xde>
 8005222:	9b00      	ldr	r3, [sp, #0]
 8005224:	6033      	str	r3, [r6, #0]
 8005226:	e019      	b.n	800525c <_malloc_r+0xb0>
 8005228:	2b00      	cmp	r3, #0
 800522a:	dac9      	bge.n	80051c0 <_malloc_r+0x14>
 800522c:	230c      	movs	r3, #12
 800522e:	602b      	str	r3, [r5, #0]
 8005230:	2000      	movs	r0, #0
 8005232:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005234:	6821      	ldr	r1, [r4, #0]
 8005236:	1bc9      	subs	r1, r1, r7
 8005238:	d420      	bmi.n	800527c <_malloc_r+0xd0>
 800523a:	290b      	cmp	r1, #11
 800523c:	d90a      	bls.n	8005254 <_malloc_r+0xa8>
 800523e:	19e2      	adds	r2, r4, r7
 8005240:	6027      	str	r7, [r4, #0]
 8005242:	42a3      	cmp	r3, r4
 8005244:	d104      	bne.n	8005250 <_malloc_r+0xa4>
 8005246:	6032      	str	r2, [r6, #0]
 8005248:	6863      	ldr	r3, [r4, #4]
 800524a:	6011      	str	r1, [r2, #0]
 800524c:	6053      	str	r3, [r2, #4]
 800524e:	e005      	b.n	800525c <_malloc_r+0xb0>
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	e7f9      	b.n	8005248 <_malloc_r+0x9c>
 8005254:	6862      	ldr	r2, [r4, #4]
 8005256:	42a3      	cmp	r3, r4
 8005258:	d10e      	bne.n	8005278 <_malloc_r+0xcc>
 800525a:	6032      	str	r2, [r6, #0]
 800525c:	0028      	movs	r0, r5
 800525e:	f000 f82d 	bl	80052bc <__malloc_unlock>
 8005262:	0020      	movs	r0, r4
 8005264:	2207      	movs	r2, #7
 8005266:	300b      	adds	r0, #11
 8005268:	1d23      	adds	r3, r4, #4
 800526a:	4390      	bics	r0, r2
 800526c:	1ac2      	subs	r2, r0, r3
 800526e:	4298      	cmp	r0, r3
 8005270:	d0df      	beq.n	8005232 <_malloc_r+0x86>
 8005272:	1a1b      	subs	r3, r3, r0
 8005274:	50a3      	str	r3, [r4, r2]
 8005276:	e7dc      	b.n	8005232 <_malloc_r+0x86>
 8005278:	605a      	str	r2, [r3, #4]
 800527a:	e7ef      	b.n	800525c <_malloc_r+0xb0>
 800527c:	0023      	movs	r3, r4
 800527e:	6864      	ldr	r4, [r4, #4]
 8005280:	e7a6      	b.n	80051d0 <_malloc_r+0x24>
 8005282:	9c00      	ldr	r4, [sp, #0]
 8005284:	6863      	ldr	r3, [r4, #4]
 8005286:	9300      	str	r3, [sp, #0]
 8005288:	e7ad      	b.n	80051e6 <_malloc_r+0x3a>
 800528a:	001a      	movs	r2, r3
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	42a3      	cmp	r3, r4
 8005290:	d1fb      	bne.n	800528a <_malloc_r+0xde>
 8005292:	2300      	movs	r3, #0
 8005294:	e7da      	b.n	800524c <_malloc_r+0xa0>
 8005296:	230c      	movs	r3, #12
 8005298:	0028      	movs	r0, r5
 800529a:	602b      	str	r3, [r5, #0]
 800529c:	f000 f80e 	bl	80052bc <__malloc_unlock>
 80052a0:	e7c6      	b.n	8005230 <_malloc_r+0x84>
 80052a2:	6007      	str	r7, [r0, #0]
 80052a4:	e7da      	b.n	800525c <_malloc_r+0xb0>
 80052a6:	46c0      	nop			@ (mov r8, r8)
 80052a8:	20000394 	.word	0x20000394

080052ac <__malloc_lock>:
 80052ac:	b510      	push	{r4, lr}
 80052ae:	4802      	ldr	r0, [pc, #8]	@ (80052b8 <__malloc_lock+0xc>)
 80052b0:	f7ff ff0d 	bl	80050ce <__retarget_lock_acquire_recursive>
 80052b4:	bd10      	pop	{r4, pc}
 80052b6:	46c0      	nop			@ (mov r8, r8)
 80052b8:	2000038c 	.word	0x2000038c

080052bc <__malloc_unlock>:
 80052bc:	b510      	push	{r4, lr}
 80052be:	4802      	ldr	r0, [pc, #8]	@ (80052c8 <__malloc_unlock+0xc>)
 80052c0:	f7ff ff06 	bl	80050d0 <__retarget_lock_release_recursive>
 80052c4:	bd10      	pop	{r4, pc}
 80052c6:	46c0      	nop			@ (mov r8, r8)
 80052c8:	2000038c 	.word	0x2000038c

080052cc <__ssputs_r>:
 80052cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052ce:	688e      	ldr	r6, [r1, #8]
 80052d0:	b085      	sub	sp, #20
 80052d2:	001f      	movs	r7, r3
 80052d4:	000c      	movs	r4, r1
 80052d6:	680b      	ldr	r3, [r1, #0]
 80052d8:	9002      	str	r0, [sp, #8]
 80052da:	9203      	str	r2, [sp, #12]
 80052dc:	42be      	cmp	r6, r7
 80052de:	d830      	bhi.n	8005342 <__ssputs_r+0x76>
 80052e0:	210c      	movs	r1, #12
 80052e2:	5e62      	ldrsh	r2, [r4, r1]
 80052e4:	2190      	movs	r1, #144	@ 0x90
 80052e6:	00c9      	lsls	r1, r1, #3
 80052e8:	420a      	tst	r2, r1
 80052ea:	d028      	beq.n	800533e <__ssputs_r+0x72>
 80052ec:	2003      	movs	r0, #3
 80052ee:	6921      	ldr	r1, [r4, #16]
 80052f0:	1a5b      	subs	r3, r3, r1
 80052f2:	9301      	str	r3, [sp, #4]
 80052f4:	6963      	ldr	r3, [r4, #20]
 80052f6:	4343      	muls	r3, r0
 80052f8:	9801      	ldr	r0, [sp, #4]
 80052fa:	0fdd      	lsrs	r5, r3, #31
 80052fc:	18ed      	adds	r5, r5, r3
 80052fe:	1c7b      	adds	r3, r7, #1
 8005300:	181b      	adds	r3, r3, r0
 8005302:	106d      	asrs	r5, r5, #1
 8005304:	42ab      	cmp	r3, r5
 8005306:	d900      	bls.n	800530a <__ssputs_r+0x3e>
 8005308:	001d      	movs	r5, r3
 800530a:	0552      	lsls	r2, r2, #21
 800530c:	d528      	bpl.n	8005360 <__ssputs_r+0x94>
 800530e:	0029      	movs	r1, r5
 8005310:	9802      	ldr	r0, [sp, #8]
 8005312:	f7ff ff4b 	bl	80051ac <_malloc_r>
 8005316:	1e06      	subs	r6, r0, #0
 8005318:	d02c      	beq.n	8005374 <__ssputs_r+0xa8>
 800531a:	9a01      	ldr	r2, [sp, #4]
 800531c:	6921      	ldr	r1, [r4, #16]
 800531e:	f001 f8fc 	bl	800651a <memcpy>
 8005322:	89a2      	ldrh	r2, [r4, #12]
 8005324:	4b18      	ldr	r3, [pc, #96]	@ (8005388 <__ssputs_r+0xbc>)
 8005326:	401a      	ands	r2, r3
 8005328:	2380      	movs	r3, #128	@ 0x80
 800532a:	4313      	orrs	r3, r2
 800532c:	81a3      	strh	r3, [r4, #12]
 800532e:	9b01      	ldr	r3, [sp, #4]
 8005330:	6126      	str	r6, [r4, #16]
 8005332:	18f6      	adds	r6, r6, r3
 8005334:	6026      	str	r6, [r4, #0]
 8005336:	003e      	movs	r6, r7
 8005338:	6165      	str	r5, [r4, #20]
 800533a:	1aed      	subs	r5, r5, r3
 800533c:	60a5      	str	r5, [r4, #8]
 800533e:	42be      	cmp	r6, r7
 8005340:	d900      	bls.n	8005344 <__ssputs_r+0x78>
 8005342:	003e      	movs	r6, r7
 8005344:	0032      	movs	r2, r6
 8005346:	9903      	ldr	r1, [sp, #12]
 8005348:	6820      	ldr	r0, [r4, #0]
 800534a:	f001 f891 	bl	8006470 <memmove>
 800534e:	2000      	movs	r0, #0
 8005350:	68a3      	ldr	r3, [r4, #8]
 8005352:	1b9b      	subs	r3, r3, r6
 8005354:	60a3      	str	r3, [r4, #8]
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	199b      	adds	r3, r3, r6
 800535a:	6023      	str	r3, [r4, #0]
 800535c:	b005      	add	sp, #20
 800535e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005360:	002a      	movs	r2, r5
 8005362:	9802      	ldr	r0, [sp, #8]
 8005364:	f001 f8e2 	bl	800652c <_realloc_r>
 8005368:	1e06      	subs	r6, r0, #0
 800536a:	d1e0      	bne.n	800532e <__ssputs_r+0x62>
 800536c:	6921      	ldr	r1, [r4, #16]
 800536e:	9802      	ldr	r0, [sp, #8]
 8005370:	f7ff feb0 	bl	80050d4 <_free_r>
 8005374:	230c      	movs	r3, #12
 8005376:	2001      	movs	r0, #1
 8005378:	9a02      	ldr	r2, [sp, #8]
 800537a:	4240      	negs	r0, r0
 800537c:	6013      	str	r3, [r2, #0]
 800537e:	89a2      	ldrh	r2, [r4, #12]
 8005380:	3334      	adds	r3, #52	@ 0x34
 8005382:	4313      	orrs	r3, r2
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	e7e9      	b.n	800535c <__ssputs_r+0x90>
 8005388:	fffffb7f 	.word	0xfffffb7f

0800538c <_svfiprintf_r>:
 800538c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800538e:	b0a1      	sub	sp, #132	@ 0x84
 8005390:	9003      	str	r0, [sp, #12]
 8005392:	001d      	movs	r5, r3
 8005394:	898b      	ldrh	r3, [r1, #12]
 8005396:	000f      	movs	r7, r1
 8005398:	0016      	movs	r6, r2
 800539a:	061b      	lsls	r3, r3, #24
 800539c:	d511      	bpl.n	80053c2 <_svfiprintf_r+0x36>
 800539e:	690b      	ldr	r3, [r1, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10e      	bne.n	80053c2 <_svfiprintf_r+0x36>
 80053a4:	2140      	movs	r1, #64	@ 0x40
 80053a6:	f7ff ff01 	bl	80051ac <_malloc_r>
 80053aa:	6038      	str	r0, [r7, #0]
 80053ac:	6138      	str	r0, [r7, #16]
 80053ae:	2800      	cmp	r0, #0
 80053b0:	d105      	bne.n	80053be <_svfiprintf_r+0x32>
 80053b2:	230c      	movs	r3, #12
 80053b4:	9a03      	ldr	r2, [sp, #12]
 80053b6:	6013      	str	r3, [r2, #0]
 80053b8:	2001      	movs	r0, #1
 80053ba:	4240      	negs	r0, r0
 80053bc:	e0cf      	b.n	800555e <_svfiprintf_r+0x1d2>
 80053be:	2340      	movs	r3, #64	@ 0x40
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	2300      	movs	r3, #0
 80053c4:	ac08      	add	r4, sp, #32
 80053c6:	6163      	str	r3, [r4, #20]
 80053c8:	3320      	adds	r3, #32
 80053ca:	7663      	strb	r3, [r4, #25]
 80053cc:	3310      	adds	r3, #16
 80053ce:	76a3      	strb	r3, [r4, #26]
 80053d0:	9507      	str	r5, [sp, #28]
 80053d2:	0035      	movs	r5, r6
 80053d4:	782b      	ldrb	r3, [r5, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <_svfiprintf_r+0x52>
 80053da:	2b25      	cmp	r3, #37	@ 0x25
 80053dc:	d148      	bne.n	8005470 <_svfiprintf_r+0xe4>
 80053de:	1bab      	subs	r3, r5, r6
 80053e0:	9305      	str	r3, [sp, #20]
 80053e2:	42b5      	cmp	r5, r6
 80053e4:	d00b      	beq.n	80053fe <_svfiprintf_r+0x72>
 80053e6:	0032      	movs	r2, r6
 80053e8:	0039      	movs	r1, r7
 80053ea:	9803      	ldr	r0, [sp, #12]
 80053ec:	f7ff ff6e 	bl	80052cc <__ssputs_r>
 80053f0:	3001      	adds	r0, #1
 80053f2:	d100      	bne.n	80053f6 <_svfiprintf_r+0x6a>
 80053f4:	e0ae      	b.n	8005554 <_svfiprintf_r+0x1c8>
 80053f6:	6963      	ldr	r3, [r4, #20]
 80053f8:	9a05      	ldr	r2, [sp, #20]
 80053fa:	189b      	adds	r3, r3, r2
 80053fc:	6163      	str	r3, [r4, #20]
 80053fe:	782b      	ldrb	r3, [r5, #0]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d100      	bne.n	8005406 <_svfiprintf_r+0x7a>
 8005404:	e0a6      	b.n	8005554 <_svfiprintf_r+0x1c8>
 8005406:	2201      	movs	r2, #1
 8005408:	2300      	movs	r3, #0
 800540a:	4252      	negs	r2, r2
 800540c:	6062      	str	r2, [r4, #4]
 800540e:	a904      	add	r1, sp, #16
 8005410:	3254      	adds	r2, #84	@ 0x54
 8005412:	1852      	adds	r2, r2, r1
 8005414:	1c6e      	adds	r6, r5, #1
 8005416:	6023      	str	r3, [r4, #0]
 8005418:	60e3      	str	r3, [r4, #12]
 800541a:	60a3      	str	r3, [r4, #8]
 800541c:	7013      	strb	r3, [r2, #0]
 800541e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005420:	4b54      	ldr	r3, [pc, #336]	@ (8005574 <_svfiprintf_r+0x1e8>)
 8005422:	2205      	movs	r2, #5
 8005424:	0018      	movs	r0, r3
 8005426:	7831      	ldrb	r1, [r6, #0]
 8005428:	9305      	str	r3, [sp, #20]
 800542a:	f001 f86b 	bl	8006504 <memchr>
 800542e:	1c75      	adds	r5, r6, #1
 8005430:	2800      	cmp	r0, #0
 8005432:	d11f      	bne.n	8005474 <_svfiprintf_r+0xe8>
 8005434:	6822      	ldr	r2, [r4, #0]
 8005436:	06d3      	lsls	r3, r2, #27
 8005438:	d504      	bpl.n	8005444 <_svfiprintf_r+0xb8>
 800543a:	2353      	movs	r3, #83	@ 0x53
 800543c:	a904      	add	r1, sp, #16
 800543e:	185b      	adds	r3, r3, r1
 8005440:	2120      	movs	r1, #32
 8005442:	7019      	strb	r1, [r3, #0]
 8005444:	0713      	lsls	r3, r2, #28
 8005446:	d504      	bpl.n	8005452 <_svfiprintf_r+0xc6>
 8005448:	2353      	movs	r3, #83	@ 0x53
 800544a:	a904      	add	r1, sp, #16
 800544c:	185b      	adds	r3, r3, r1
 800544e:	212b      	movs	r1, #43	@ 0x2b
 8005450:	7019      	strb	r1, [r3, #0]
 8005452:	7833      	ldrb	r3, [r6, #0]
 8005454:	2b2a      	cmp	r3, #42	@ 0x2a
 8005456:	d016      	beq.n	8005486 <_svfiprintf_r+0xfa>
 8005458:	0035      	movs	r5, r6
 800545a:	2100      	movs	r1, #0
 800545c:	200a      	movs	r0, #10
 800545e:	68e3      	ldr	r3, [r4, #12]
 8005460:	782a      	ldrb	r2, [r5, #0]
 8005462:	1c6e      	adds	r6, r5, #1
 8005464:	3a30      	subs	r2, #48	@ 0x30
 8005466:	2a09      	cmp	r2, #9
 8005468:	d950      	bls.n	800550c <_svfiprintf_r+0x180>
 800546a:	2900      	cmp	r1, #0
 800546c:	d111      	bne.n	8005492 <_svfiprintf_r+0x106>
 800546e:	e017      	b.n	80054a0 <_svfiprintf_r+0x114>
 8005470:	3501      	adds	r5, #1
 8005472:	e7af      	b.n	80053d4 <_svfiprintf_r+0x48>
 8005474:	9b05      	ldr	r3, [sp, #20]
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	1ac0      	subs	r0, r0, r3
 800547a:	2301      	movs	r3, #1
 800547c:	4083      	lsls	r3, r0
 800547e:	4313      	orrs	r3, r2
 8005480:	002e      	movs	r6, r5
 8005482:	6023      	str	r3, [r4, #0]
 8005484:	e7cc      	b.n	8005420 <_svfiprintf_r+0x94>
 8005486:	9b07      	ldr	r3, [sp, #28]
 8005488:	1d19      	adds	r1, r3, #4
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	9107      	str	r1, [sp, #28]
 800548e:	2b00      	cmp	r3, #0
 8005490:	db01      	blt.n	8005496 <_svfiprintf_r+0x10a>
 8005492:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005494:	e004      	b.n	80054a0 <_svfiprintf_r+0x114>
 8005496:	425b      	negs	r3, r3
 8005498:	60e3      	str	r3, [r4, #12]
 800549a:	2302      	movs	r3, #2
 800549c:	4313      	orrs	r3, r2
 800549e:	6023      	str	r3, [r4, #0]
 80054a0:	782b      	ldrb	r3, [r5, #0]
 80054a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80054a4:	d10c      	bne.n	80054c0 <_svfiprintf_r+0x134>
 80054a6:	786b      	ldrb	r3, [r5, #1]
 80054a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80054aa:	d134      	bne.n	8005516 <_svfiprintf_r+0x18a>
 80054ac:	9b07      	ldr	r3, [sp, #28]
 80054ae:	3502      	adds	r5, #2
 80054b0:	1d1a      	adds	r2, r3, #4
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	9207      	str	r2, [sp, #28]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	da01      	bge.n	80054be <_svfiprintf_r+0x132>
 80054ba:	2301      	movs	r3, #1
 80054bc:	425b      	negs	r3, r3
 80054be:	9309      	str	r3, [sp, #36]	@ 0x24
 80054c0:	4e2d      	ldr	r6, [pc, #180]	@ (8005578 <_svfiprintf_r+0x1ec>)
 80054c2:	2203      	movs	r2, #3
 80054c4:	0030      	movs	r0, r6
 80054c6:	7829      	ldrb	r1, [r5, #0]
 80054c8:	f001 f81c 	bl	8006504 <memchr>
 80054cc:	2800      	cmp	r0, #0
 80054ce:	d006      	beq.n	80054de <_svfiprintf_r+0x152>
 80054d0:	2340      	movs	r3, #64	@ 0x40
 80054d2:	1b80      	subs	r0, r0, r6
 80054d4:	4083      	lsls	r3, r0
 80054d6:	6822      	ldr	r2, [r4, #0]
 80054d8:	3501      	adds	r5, #1
 80054da:	4313      	orrs	r3, r2
 80054dc:	6023      	str	r3, [r4, #0]
 80054de:	7829      	ldrb	r1, [r5, #0]
 80054e0:	2206      	movs	r2, #6
 80054e2:	4826      	ldr	r0, [pc, #152]	@ (800557c <_svfiprintf_r+0x1f0>)
 80054e4:	1c6e      	adds	r6, r5, #1
 80054e6:	7621      	strb	r1, [r4, #24]
 80054e8:	f001 f80c 	bl	8006504 <memchr>
 80054ec:	2800      	cmp	r0, #0
 80054ee:	d038      	beq.n	8005562 <_svfiprintf_r+0x1d6>
 80054f0:	4b23      	ldr	r3, [pc, #140]	@ (8005580 <_svfiprintf_r+0x1f4>)
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d122      	bne.n	800553c <_svfiprintf_r+0x1b0>
 80054f6:	2207      	movs	r2, #7
 80054f8:	9b07      	ldr	r3, [sp, #28]
 80054fa:	3307      	adds	r3, #7
 80054fc:	4393      	bics	r3, r2
 80054fe:	3308      	adds	r3, #8
 8005500:	9307      	str	r3, [sp, #28]
 8005502:	6963      	ldr	r3, [r4, #20]
 8005504:	9a04      	ldr	r2, [sp, #16]
 8005506:	189b      	adds	r3, r3, r2
 8005508:	6163      	str	r3, [r4, #20]
 800550a:	e762      	b.n	80053d2 <_svfiprintf_r+0x46>
 800550c:	4343      	muls	r3, r0
 800550e:	0035      	movs	r5, r6
 8005510:	2101      	movs	r1, #1
 8005512:	189b      	adds	r3, r3, r2
 8005514:	e7a4      	b.n	8005460 <_svfiprintf_r+0xd4>
 8005516:	2300      	movs	r3, #0
 8005518:	200a      	movs	r0, #10
 800551a:	0019      	movs	r1, r3
 800551c:	3501      	adds	r5, #1
 800551e:	6063      	str	r3, [r4, #4]
 8005520:	782a      	ldrb	r2, [r5, #0]
 8005522:	1c6e      	adds	r6, r5, #1
 8005524:	3a30      	subs	r2, #48	@ 0x30
 8005526:	2a09      	cmp	r2, #9
 8005528:	d903      	bls.n	8005532 <_svfiprintf_r+0x1a6>
 800552a:	2b00      	cmp	r3, #0
 800552c:	d0c8      	beq.n	80054c0 <_svfiprintf_r+0x134>
 800552e:	9109      	str	r1, [sp, #36]	@ 0x24
 8005530:	e7c6      	b.n	80054c0 <_svfiprintf_r+0x134>
 8005532:	4341      	muls	r1, r0
 8005534:	0035      	movs	r5, r6
 8005536:	2301      	movs	r3, #1
 8005538:	1889      	adds	r1, r1, r2
 800553a:	e7f1      	b.n	8005520 <_svfiprintf_r+0x194>
 800553c:	aa07      	add	r2, sp, #28
 800553e:	9200      	str	r2, [sp, #0]
 8005540:	0021      	movs	r1, r4
 8005542:	003a      	movs	r2, r7
 8005544:	4b0f      	ldr	r3, [pc, #60]	@ (8005584 <_svfiprintf_r+0x1f8>)
 8005546:	9803      	ldr	r0, [sp, #12]
 8005548:	e000      	b.n	800554c <_svfiprintf_r+0x1c0>
 800554a:	bf00      	nop
 800554c:	9004      	str	r0, [sp, #16]
 800554e:	9b04      	ldr	r3, [sp, #16]
 8005550:	3301      	adds	r3, #1
 8005552:	d1d6      	bne.n	8005502 <_svfiprintf_r+0x176>
 8005554:	89bb      	ldrh	r3, [r7, #12]
 8005556:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005558:	065b      	lsls	r3, r3, #25
 800555a:	d500      	bpl.n	800555e <_svfiprintf_r+0x1d2>
 800555c:	e72c      	b.n	80053b8 <_svfiprintf_r+0x2c>
 800555e:	b021      	add	sp, #132	@ 0x84
 8005560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005562:	aa07      	add	r2, sp, #28
 8005564:	9200      	str	r2, [sp, #0]
 8005566:	0021      	movs	r1, r4
 8005568:	003a      	movs	r2, r7
 800556a:	4b06      	ldr	r3, [pc, #24]	@ (8005584 <_svfiprintf_r+0x1f8>)
 800556c:	9803      	ldr	r0, [sp, #12]
 800556e:	f000 fb7d 	bl	8005c6c <_printf_i>
 8005572:	e7eb      	b.n	800554c <_svfiprintf_r+0x1c0>
 8005574:	08006bc0 	.word	0x08006bc0
 8005578:	08006bc6 	.word	0x08006bc6
 800557c:	08006bca 	.word	0x08006bca
 8005580:	00000000 	.word	0x00000000
 8005584:	080052cd 	.word	0x080052cd

08005588 <_sungetc_r>:
 8005588:	b570      	push	{r4, r5, r6, lr}
 800558a:	0014      	movs	r4, r2
 800558c:	1c4b      	adds	r3, r1, #1
 800558e:	d103      	bne.n	8005598 <_sungetc_r+0x10>
 8005590:	2501      	movs	r5, #1
 8005592:	426d      	negs	r5, r5
 8005594:	0028      	movs	r0, r5
 8005596:	bd70      	pop	{r4, r5, r6, pc}
 8005598:	8993      	ldrh	r3, [r2, #12]
 800559a:	2220      	movs	r2, #32
 800559c:	4393      	bics	r3, r2
 800559e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80055a0:	81a3      	strh	r3, [r4, #12]
 80055a2:	b2ce      	uxtb	r6, r1
 80055a4:	6863      	ldr	r3, [r4, #4]
 80055a6:	b2cd      	uxtb	r5, r1
 80055a8:	2a00      	cmp	r2, #0
 80055aa:	d010      	beq.n	80055ce <_sungetc_r+0x46>
 80055ac:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80055ae:	429a      	cmp	r2, r3
 80055b0:	dd07      	ble.n	80055c2 <_sungetc_r+0x3a>
 80055b2:	6823      	ldr	r3, [r4, #0]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	6023      	str	r3, [r4, #0]
 80055b8:	701e      	strb	r6, [r3, #0]
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	3301      	adds	r3, #1
 80055be:	6063      	str	r3, [r4, #4]
 80055c0:	e7e8      	b.n	8005594 <_sungetc_r+0xc>
 80055c2:	0021      	movs	r1, r4
 80055c4:	f000 ff16 	bl	80063f4 <__submore>
 80055c8:	2800      	cmp	r0, #0
 80055ca:	d0f2      	beq.n	80055b2 <_sungetc_r+0x2a>
 80055cc:	e7e0      	b.n	8005590 <_sungetc_r+0x8>
 80055ce:	6921      	ldr	r1, [r4, #16]
 80055d0:	6822      	ldr	r2, [r4, #0]
 80055d2:	2900      	cmp	r1, #0
 80055d4:	d007      	beq.n	80055e6 <_sungetc_r+0x5e>
 80055d6:	4291      	cmp	r1, r2
 80055d8:	d205      	bcs.n	80055e6 <_sungetc_r+0x5e>
 80055da:	1e51      	subs	r1, r2, #1
 80055dc:	7808      	ldrb	r0, [r1, #0]
 80055de:	42a8      	cmp	r0, r5
 80055e0:	d101      	bne.n	80055e6 <_sungetc_r+0x5e>
 80055e2:	6021      	str	r1, [r4, #0]
 80055e4:	e7ea      	b.n	80055bc <_sungetc_r+0x34>
 80055e6:	6423      	str	r3, [r4, #64]	@ 0x40
 80055e8:	0023      	movs	r3, r4
 80055ea:	3344      	adds	r3, #68	@ 0x44
 80055ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80055ee:	2303      	movs	r3, #3
 80055f0:	63a3      	str	r3, [r4, #56]	@ 0x38
 80055f2:	0023      	movs	r3, r4
 80055f4:	3346      	adds	r3, #70	@ 0x46
 80055f6:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80055f8:	701e      	strb	r6, [r3, #0]
 80055fa:	6023      	str	r3, [r4, #0]
 80055fc:	2301      	movs	r3, #1
 80055fe:	e7de      	b.n	80055be <_sungetc_r+0x36>

08005600 <__ssrefill_r>:
 8005600:	b510      	push	{r4, lr}
 8005602:	000c      	movs	r4, r1
 8005604:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005606:	2900      	cmp	r1, #0
 8005608:	d00e      	beq.n	8005628 <__ssrefill_r+0x28>
 800560a:	0023      	movs	r3, r4
 800560c:	3344      	adds	r3, #68	@ 0x44
 800560e:	4299      	cmp	r1, r3
 8005610:	d001      	beq.n	8005616 <__ssrefill_r+0x16>
 8005612:	f7ff fd5f 	bl	80050d4 <_free_r>
 8005616:	2000      	movs	r0, #0
 8005618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800561a:	6360      	str	r0, [r4, #52]	@ 0x34
 800561c:	6063      	str	r3, [r4, #4]
 800561e:	4283      	cmp	r3, r0
 8005620:	d002      	beq.n	8005628 <__ssrefill_r+0x28>
 8005622:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005624:	6023      	str	r3, [r4, #0]
 8005626:	bd10      	pop	{r4, pc}
 8005628:	6923      	ldr	r3, [r4, #16]
 800562a:	2001      	movs	r0, #1
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	2300      	movs	r3, #0
 8005630:	89a2      	ldrh	r2, [r4, #12]
 8005632:	6063      	str	r3, [r4, #4]
 8005634:	3320      	adds	r3, #32
 8005636:	4313      	orrs	r3, r2
 8005638:	81a3      	strh	r3, [r4, #12]
 800563a:	4240      	negs	r0, r0
 800563c:	e7f3      	b.n	8005626 <__ssrefill_r+0x26>
	...

08005640 <__ssvfiscanf_r>:
 8005640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005642:	4caa      	ldr	r4, [pc, #680]	@ (80058ec <__ssvfiscanf_r+0x2ac>)
 8005644:	44a5      	add	sp, r4
 8005646:	000c      	movs	r4, r1
 8005648:	2100      	movs	r1, #0
 800564a:	9001      	str	r0, [sp, #4]
 800564c:	20be      	movs	r0, #190	@ 0xbe
 800564e:	9146      	str	r1, [sp, #280]	@ 0x118
 8005650:	9147      	str	r1, [sp, #284]	@ 0x11c
 8005652:	a903      	add	r1, sp, #12
 8005654:	9148      	str	r1, [sp, #288]	@ 0x120
 8005656:	49a6      	ldr	r1, [pc, #664]	@ (80058f0 <__ssvfiscanf_r+0x2b0>)
 8005658:	0040      	lsls	r0, r0, #1
 800565a:	ad43      	add	r5, sp, #268	@ 0x10c
 800565c:	5029      	str	r1, [r5, r0]
 800565e:	49a5      	ldr	r1, [pc, #660]	@ (80058f4 <__ssvfiscanf_r+0x2b4>)
 8005660:	3004      	adds	r0, #4
 8005662:	ad43      	add	r5, sp, #268	@ 0x10c
 8005664:	5029      	str	r1, [r5, r0]
 8005666:	9302      	str	r3, [sp, #8]
 8005668:	7813      	ldrb	r3, [r2, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d100      	bne.n	8005670 <__ssvfiscanf_r+0x30>
 800566e:	e13a      	b.n	80058e6 <__ssvfiscanf_r+0x2a6>
 8005670:	2108      	movs	r1, #8
 8005672:	2708      	movs	r7, #8
 8005674:	4ea0      	ldr	r6, [pc, #640]	@ (80058f8 <__ssvfiscanf_r+0x2b8>)
 8005676:	1c55      	adds	r5, r2, #1
 8005678:	5cf0      	ldrb	r0, [r6, r3]
 800567a:	4001      	ands	r1, r0
 800567c:	4238      	tst	r0, r7
 800567e:	d01c      	beq.n	80056ba <__ssvfiscanf_r+0x7a>
 8005680:	6863      	ldr	r3, [r4, #4]
 8005682:	2b00      	cmp	r3, #0
 8005684:	dd0f      	ble.n	80056a6 <__ssvfiscanf_r+0x66>
 8005686:	6823      	ldr	r3, [r4, #0]
 8005688:	781a      	ldrb	r2, [r3, #0]
 800568a:	5cb2      	ldrb	r2, [r6, r2]
 800568c:	423a      	tst	r2, r7
 800568e:	d101      	bne.n	8005694 <__ssvfiscanf_r+0x54>
 8005690:	002a      	movs	r2, r5
 8005692:	e7e9      	b.n	8005668 <__ssvfiscanf_r+0x28>
 8005694:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8005696:	3301      	adds	r3, #1
 8005698:	3201      	adds	r2, #1
 800569a:	9247      	str	r2, [sp, #284]	@ 0x11c
 800569c:	6862      	ldr	r2, [r4, #4]
 800569e:	6023      	str	r3, [r4, #0]
 80056a0:	3a01      	subs	r2, #1
 80056a2:	6062      	str	r2, [r4, #4]
 80056a4:	e7ec      	b.n	8005680 <__ssvfiscanf_r+0x40>
 80056a6:	22c0      	movs	r2, #192	@ 0xc0
 80056a8:	ab43      	add	r3, sp, #268	@ 0x10c
 80056aa:	0052      	lsls	r2, r2, #1
 80056ac:	0021      	movs	r1, r4
 80056ae:	589b      	ldr	r3, [r3, r2]
 80056b0:	9801      	ldr	r0, [sp, #4]
 80056b2:	4798      	blx	r3
 80056b4:	2800      	cmp	r0, #0
 80056b6:	d0e6      	beq.n	8005686 <__ssvfiscanf_r+0x46>
 80056b8:	e7ea      	b.n	8005690 <__ssvfiscanf_r+0x50>
 80056ba:	001e      	movs	r6, r3
 80056bc:	2b25      	cmp	r3, #37	@ 0x25
 80056be:	d160      	bne.n	8005782 <__ssvfiscanf_r+0x142>
 80056c0:	9145      	str	r1, [sp, #276]	@ 0x114
 80056c2:	9143      	str	r1, [sp, #268]	@ 0x10c
 80056c4:	7853      	ldrb	r3, [r2, #1]
 80056c6:	2b2a      	cmp	r3, #42	@ 0x2a
 80056c8:	d102      	bne.n	80056d0 <__ssvfiscanf_r+0x90>
 80056ca:	3b1a      	subs	r3, #26
 80056cc:	9343      	str	r3, [sp, #268]	@ 0x10c
 80056ce:	1c95      	adds	r5, r2, #2
 80056d0:	002e      	movs	r6, r5
 80056d2:	220a      	movs	r2, #10
 80056d4:	7831      	ldrb	r1, [r6, #0]
 80056d6:	1c75      	adds	r5, r6, #1
 80056d8:	000b      	movs	r3, r1
 80056da:	3b30      	subs	r3, #48	@ 0x30
 80056dc:	2b09      	cmp	r3, #9
 80056de:	d91d      	bls.n	800571c <__ssvfiscanf_r+0xdc>
 80056e0:	4f86      	ldr	r7, [pc, #536]	@ (80058fc <__ssvfiscanf_r+0x2bc>)
 80056e2:	2203      	movs	r2, #3
 80056e4:	0038      	movs	r0, r7
 80056e6:	f000 ff0d 	bl	8006504 <memchr>
 80056ea:	2800      	cmp	r0, #0
 80056ec:	d006      	beq.n	80056fc <__ssvfiscanf_r+0xbc>
 80056ee:	2301      	movs	r3, #1
 80056f0:	1bc0      	subs	r0, r0, r7
 80056f2:	4083      	lsls	r3, r0
 80056f4:	002e      	movs	r6, r5
 80056f6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80056f8:	4313      	orrs	r3, r2
 80056fa:	9343      	str	r3, [sp, #268]	@ 0x10c
 80056fc:	1c75      	adds	r5, r6, #1
 80056fe:	7836      	ldrb	r6, [r6, #0]
 8005700:	2e78      	cmp	r6, #120	@ 0x78
 8005702:	d806      	bhi.n	8005712 <__ssvfiscanf_r+0xd2>
 8005704:	2e57      	cmp	r6, #87	@ 0x57
 8005706:	d810      	bhi.n	800572a <__ssvfiscanf_r+0xea>
 8005708:	2e25      	cmp	r6, #37	@ 0x25
 800570a:	d03a      	beq.n	8005782 <__ssvfiscanf_r+0x142>
 800570c:	d834      	bhi.n	8005778 <__ssvfiscanf_r+0x138>
 800570e:	2e00      	cmp	r6, #0
 8005710:	d055      	beq.n	80057be <__ssvfiscanf_r+0x17e>
 8005712:	2303      	movs	r3, #3
 8005714:	9349      	str	r3, [sp, #292]	@ 0x124
 8005716:	3307      	adds	r3, #7
 8005718:	9344      	str	r3, [sp, #272]	@ 0x110
 800571a:	e069      	b.n	80057f0 <__ssvfiscanf_r+0x1b0>
 800571c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800571e:	002e      	movs	r6, r5
 8005720:	4353      	muls	r3, r2
 8005722:	3b30      	subs	r3, #48	@ 0x30
 8005724:	185b      	adds	r3, r3, r1
 8005726:	9345      	str	r3, [sp, #276]	@ 0x114
 8005728:	e7d4      	b.n	80056d4 <__ssvfiscanf_r+0x94>
 800572a:	0030      	movs	r0, r6
 800572c:	3858      	subs	r0, #88	@ 0x58
 800572e:	2820      	cmp	r0, #32
 8005730:	d8ef      	bhi.n	8005712 <__ssvfiscanf_r+0xd2>
 8005732:	f7fa fcf1 	bl	8000118 <__gnu_thumb1_case_shi>
 8005736:	004b      	.short	0x004b
 8005738:	ffeeffee 	.word	0xffeeffee
 800573c:	ffee007d 	.word	0xffee007d
 8005740:	ffeeffee 	.word	0xffeeffee
 8005744:	ffeeffee 	.word	0xffeeffee
 8005748:	ffeeffee 	.word	0xffeeffee
 800574c:	007b0088 	.word	0x007b0088
 8005750:	00240024 	.word	0x00240024
 8005754:	ffee0024 	.word	0xffee0024
 8005758:	ffee0055 	.word	0xffee0055
 800575c:	ffeeffee 	.word	0xffeeffee
 8005760:	0090ffee 	.word	0x0090ffee
 8005764:	00470059 	.word	0x00470059
 8005768:	ffeeffee 	.word	0xffeeffee
 800576c:	ffee008e 	.word	0xffee008e
 8005770:	ffee007b 	.word	0xffee007b
 8005774:	004bffee 	.word	0x004bffee
 8005778:	3e45      	subs	r6, #69	@ 0x45
 800577a:	2e02      	cmp	r6, #2
 800577c:	d8c9      	bhi.n	8005712 <__ssvfiscanf_r+0xd2>
 800577e:	2305      	movs	r3, #5
 8005780:	e035      	b.n	80057ee <__ssvfiscanf_r+0x1ae>
 8005782:	6863      	ldr	r3, [r4, #4]
 8005784:	2b00      	cmp	r3, #0
 8005786:	dd0d      	ble.n	80057a4 <__ssvfiscanf_r+0x164>
 8005788:	6823      	ldr	r3, [r4, #0]
 800578a:	781a      	ldrb	r2, [r3, #0]
 800578c:	42b2      	cmp	r2, r6
 800578e:	d000      	beq.n	8005792 <__ssvfiscanf_r+0x152>
 8005790:	e0a9      	b.n	80058e6 <__ssvfiscanf_r+0x2a6>
 8005792:	3301      	adds	r3, #1
 8005794:	6862      	ldr	r2, [r4, #4]
 8005796:	6023      	str	r3, [r4, #0]
 8005798:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800579a:	3a01      	subs	r2, #1
 800579c:	3301      	adds	r3, #1
 800579e:	6062      	str	r2, [r4, #4]
 80057a0:	9347      	str	r3, [sp, #284]	@ 0x11c
 80057a2:	e775      	b.n	8005690 <__ssvfiscanf_r+0x50>
 80057a4:	23c0      	movs	r3, #192	@ 0xc0
 80057a6:	aa43      	add	r2, sp, #268	@ 0x10c
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	0021      	movs	r1, r4
 80057ac:	58d3      	ldr	r3, [r2, r3]
 80057ae:	9801      	ldr	r0, [sp, #4]
 80057b0:	4798      	blx	r3
 80057b2:	2800      	cmp	r0, #0
 80057b4:	d0e8      	beq.n	8005788 <__ssvfiscanf_r+0x148>
 80057b6:	9846      	ldr	r0, [sp, #280]	@ 0x118
 80057b8:	2800      	cmp	r0, #0
 80057ba:	d000      	beq.n	80057be <__ssvfiscanf_r+0x17e>
 80057bc:	e08b      	b.n	80058d6 <__ssvfiscanf_r+0x296>
 80057be:	2001      	movs	r0, #1
 80057c0:	4240      	negs	r0, r0
 80057c2:	e08c      	b.n	80058de <__ssvfiscanf_r+0x29e>
 80057c4:	2320      	movs	r3, #32
 80057c6:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80057c8:	4313      	orrs	r3, r2
 80057ca:	9343      	str	r3, [sp, #268]	@ 0x10c
 80057cc:	2380      	movs	r3, #128	@ 0x80
 80057ce:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4313      	orrs	r3, r2
 80057d4:	9343      	str	r3, [sp, #268]	@ 0x10c
 80057d6:	2310      	movs	r3, #16
 80057d8:	9344      	str	r3, [sp, #272]	@ 0x110
 80057da:	2e6e      	cmp	r6, #110	@ 0x6e
 80057dc:	d902      	bls.n	80057e4 <__ssvfiscanf_r+0x1a4>
 80057de:	e005      	b.n	80057ec <__ssvfiscanf_r+0x1ac>
 80057e0:	2300      	movs	r3, #0
 80057e2:	9344      	str	r3, [sp, #272]	@ 0x110
 80057e4:	2303      	movs	r3, #3
 80057e6:	e002      	b.n	80057ee <__ssvfiscanf_r+0x1ae>
 80057e8:	2308      	movs	r3, #8
 80057ea:	9344      	str	r3, [sp, #272]	@ 0x110
 80057ec:	2304      	movs	r3, #4
 80057ee:	9349      	str	r3, [sp, #292]	@ 0x124
 80057f0:	6863      	ldr	r3, [r4, #4]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	dd3e      	ble.n	8005874 <__ssvfiscanf_r+0x234>
 80057f6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80057f8:	065b      	lsls	r3, r3, #25
 80057fa:	d408      	bmi.n	800580e <__ssvfiscanf_r+0x1ce>
 80057fc:	27c0      	movs	r7, #192	@ 0xc0
 80057fe:	2608      	movs	r6, #8
 8005800:	007f      	lsls	r7, r7, #1
 8005802:	6823      	ldr	r3, [r4, #0]
 8005804:	493c      	ldr	r1, [pc, #240]	@ (80058f8 <__ssvfiscanf_r+0x2b8>)
 8005806:	781a      	ldrb	r2, [r3, #0]
 8005808:	5c8a      	ldrb	r2, [r1, r2]
 800580a:	4232      	tst	r2, r6
 800580c:	d13c      	bne.n	8005888 <__ssvfiscanf_r+0x248>
 800580e:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8005810:	2b02      	cmp	r3, #2
 8005812:	dc4c      	bgt.n	80058ae <__ssvfiscanf_r+0x26e>
 8005814:	0022      	movs	r2, r4
 8005816:	9801      	ldr	r0, [sp, #4]
 8005818:	ab02      	add	r3, sp, #8
 800581a:	a943      	add	r1, sp, #268	@ 0x10c
 800581c:	f000 fb34 	bl	8005e88 <_scanf_chars>
 8005820:	2801      	cmp	r0, #1
 8005822:	d060      	beq.n	80058e6 <__ssvfiscanf_r+0x2a6>
 8005824:	2802      	cmp	r0, #2
 8005826:	d000      	beq.n	800582a <__ssvfiscanf_r+0x1ea>
 8005828:	e732      	b.n	8005690 <__ssvfiscanf_r+0x50>
 800582a:	e7c4      	b.n	80057b6 <__ssvfiscanf_r+0x176>
 800582c:	230a      	movs	r3, #10
 800582e:	e7d3      	b.n	80057d8 <__ssvfiscanf_r+0x198>
 8005830:	0029      	movs	r1, r5
 8005832:	a803      	add	r0, sp, #12
 8005834:	f000 fda5 	bl	8006382 <__sccl>
 8005838:	2340      	movs	r3, #64	@ 0x40
 800583a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800583c:	0005      	movs	r5, r0
 800583e:	4313      	orrs	r3, r2
 8005840:	9343      	str	r3, [sp, #268]	@ 0x10c
 8005842:	2301      	movs	r3, #1
 8005844:	e7d3      	b.n	80057ee <__ssvfiscanf_r+0x1ae>
 8005846:	2340      	movs	r3, #64	@ 0x40
 8005848:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 800584a:	4313      	orrs	r3, r2
 800584c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800584e:	2300      	movs	r3, #0
 8005850:	e7cd      	b.n	80057ee <__ssvfiscanf_r+0x1ae>
 8005852:	2302      	movs	r3, #2
 8005854:	e7cb      	b.n	80057ee <__ssvfiscanf_r+0x1ae>
 8005856:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8005858:	06d3      	lsls	r3, r2, #27
 800585a:	d500      	bpl.n	800585e <__ssvfiscanf_r+0x21e>
 800585c:	e718      	b.n	8005690 <__ssvfiscanf_r+0x50>
 800585e:	9b02      	ldr	r3, [sp, #8]
 8005860:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8005862:	1d18      	adds	r0, r3, #4
 8005864:	9002      	str	r0, [sp, #8]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	07d6      	lsls	r6, r2, #31
 800586a:	d501      	bpl.n	8005870 <__ssvfiscanf_r+0x230>
 800586c:	8019      	strh	r1, [r3, #0]
 800586e:	e70f      	b.n	8005690 <__ssvfiscanf_r+0x50>
 8005870:	6019      	str	r1, [r3, #0]
 8005872:	e70d      	b.n	8005690 <__ssvfiscanf_r+0x50>
 8005874:	23c0      	movs	r3, #192	@ 0xc0
 8005876:	aa43      	add	r2, sp, #268	@ 0x10c
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	0021      	movs	r1, r4
 800587c:	58d3      	ldr	r3, [r2, r3]
 800587e:	9801      	ldr	r0, [sp, #4]
 8005880:	4798      	blx	r3
 8005882:	2800      	cmp	r0, #0
 8005884:	d0b7      	beq.n	80057f6 <__ssvfiscanf_r+0x1b6>
 8005886:	e796      	b.n	80057b6 <__ssvfiscanf_r+0x176>
 8005888:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800588a:	3201      	adds	r2, #1
 800588c:	9247      	str	r2, [sp, #284]	@ 0x11c
 800588e:	6862      	ldr	r2, [r4, #4]
 8005890:	3a01      	subs	r2, #1
 8005892:	6062      	str	r2, [r4, #4]
 8005894:	2a00      	cmp	r2, #0
 8005896:	dd02      	ble.n	800589e <__ssvfiscanf_r+0x25e>
 8005898:	3301      	adds	r3, #1
 800589a:	6023      	str	r3, [r4, #0]
 800589c:	e7b1      	b.n	8005802 <__ssvfiscanf_r+0x1c2>
 800589e:	ab43      	add	r3, sp, #268	@ 0x10c
 80058a0:	0021      	movs	r1, r4
 80058a2:	59db      	ldr	r3, [r3, r7]
 80058a4:	9801      	ldr	r0, [sp, #4]
 80058a6:	4798      	blx	r3
 80058a8:	2800      	cmp	r0, #0
 80058aa:	d0aa      	beq.n	8005802 <__ssvfiscanf_r+0x1c2>
 80058ac:	e783      	b.n	80057b6 <__ssvfiscanf_r+0x176>
 80058ae:	2b04      	cmp	r3, #4
 80058b0:	dc06      	bgt.n	80058c0 <__ssvfiscanf_r+0x280>
 80058b2:	0022      	movs	r2, r4
 80058b4:	9801      	ldr	r0, [sp, #4]
 80058b6:	ab02      	add	r3, sp, #8
 80058b8:	a943      	add	r1, sp, #268	@ 0x10c
 80058ba:	f000 fb45 	bl	8005f48 <_scanf_i>
 80058be:	e7af      	b.n	8005820 <__ssvfiscanf_r+0x1e0>
 80058c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005900 <__ssvfiscanf_r+0x2c0>)
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d100      	bne.n	80058c8 <__ssvfiscanf_r+0x288>
 80058c6:	e6e3      	b.n	8005690 <__ssvfiscanf_r+0x50>
 80058c8:	0022      	movs	r2, r4
 80058ca:	9801      	ldr	r0, [sp, #4]
 80058cc:	ab02      	add	r3, sp, #8
 80058ce:	a943      	add	r1, sp, #268	@ 0x10c
 80058d0:	e000      	b.n	80058d4 <__ssvfiscanf_r+0x294>
 80058d2:	bf00      	nop
 80058d4:	e7a4      	b.n	8005820 <__ssvfiscanf_r+0x1e0>
 80058d6:	89a3      	ldrh	r3, [r4, #12]
 80058d8:	065b      	lsls	r3, r3, #25
 80058da:	d500      	bpl.n	80058de <__ssvfiscanf_r+0x29e>
 80058dc:	e76f      	b.n	80057be <__ssvfiscanf_r+0x17e>
 80058de:	23a5      	movs	r3, #165	@ 0xa5
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	449d      	add	sp, r3
 80058e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80058e6:	9846      	ldr	r0, [sp, #280]	@ 0x118
 80058e8:	e7f9      	b.n	80058de <__ssvfiscanf_r+0x29e>
 80058ea:	46c0      	nop			@ (mov r8, r8)
 80058ec:	fffffd6c 	.word	0xfffffd6c
 80058f0:	08005589 	.word	0x08005589
 80058f4:	08005601 	.word	0x08005601
 80058f8:	08006c0f 	.word	0x08006c0f
 80058fc:	08006bc6 	.word	0x08006bc6
 8005900:	00000000 	.word	0x00000000

08005904 <__sfputc_r>:
 8005904:	6893      	ldr	r3, [r2, #8]
 8005906:	b510      	push	{r4, lr}
 8005908:	3b01      	subs	r3, #1
 800590a:	6093      	str	r3, [r2, #8]
 800590c:	2b00      	cmp	r3, #0
 800590e:	da04      	bge.n	800591a <__sfputc_r+0x16>
 8005910:	6994      	ldr	r4, [r2, #24]
 8005912:	42a3      	cmp	r3, r4
 8005914:	db07      	blt.n	8005926 <__sfputc_r+0x22>
 8005916:	290a      	cmp	r1, #10
 8005918:	d005      	beq.n	8005926 <__sfputc_r+0x22>
 800591a:	6813      	ldr	r3, [r2, #0]
 800591c:	1c58      	adds	r0, r3, #1
 800591e:	6010      	str	r0, [r2, #0]
 8005920:	7019      	strb	r1, [r3, #0]
 8005922:	0008      	movs	r0, r1
 8005924:	bd10      	pop	{r4, pc}
 8005926:	f7ff fa9b 	bl	8004e60 <__swbuf_r>
 800592a:	0001      	movs	r1, r0
 800592c:	e7f9      	b.n	8005922 <__sfputc_r+0x1e>

0800592e <__sfputs_r>:
 800592e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005930:	0006      	movs	r6, r0
 8005932:	000f      	movs	r7, r1
 8005934:	0014      	movs	r4, r2
 8005936:	18d5      	adds	r5, r2, r3
 8005938:	42ac      	cmp	r4, r5
 800593a:	d101      	bne.n	8005940 <__sfputs_r+0x12>
 800593c:	2000      	movs	r0, #0
 800593e:	e007      	b.n	8005950 <__sfputs_r+0x22>
 8005940:	7821      	ldrb	r1, [r4, #0]
 8005942:	003a      	movs	r2, r7
 8005944:	0030      	movs	r0, r6
 8005946:	f7ff ffdd 	bl	8005904 <__sfputc_r>
 800594a:	3401      	adds	r4, #1
 800594c:	1c43      	adds	r3, r0, #1
 800594e:	d1f3      	bne.n	8005938 <__sfputs_r+0xa>
 8005950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005954 <_vfiprintf_r>:
 8005954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005956:	b0a1      	sub	sp, #132	@ 0x84
 8005958:	000f      	movs	r7, r1
 800595a:	0015      	movs	r5, r2
 800595c:	001e      	movs	r6, r3
 800595e:	9003      	str	r0, [sp, #12]
 8005960:	2800      	cmp	r0, #0
 8005962:	d004      	beq.n	800596e <_vfiprintf_r+0x1a>
 8005964:	6a03      	ldr	r3, [r0, #32]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <_vfiprintf_r+0x1a>
 800596a:	f7ff f92b 	bl	8004bc4 <__sinit>
 800596e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005970:	07db      	lsls	r3, r3, #31
 8005972:	d405      	bmi.n	8005980 <_vfiprintf_r+0x2c>
 8005974:	89bb      	ldrh	r3, [r7, #12]
 8005976:	059b      	lsls	r3, r3, #22
 8005978:	d402      	bmi.n	8005980 <_vfiprintf_r+0x2c>
 800597a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800597c:	f7ff fba7 	bl	80050ce <__retarget_lock_acquire_recursive>
 8005980:	89bb      	ldrh	r3, [r7, #12]
 8005982:	071b      	lsls	r3, r3, #28
 8005984:	d502      	bpl.n	800598c <_vfiprintf_r+0x38>
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d113      	bne.n	80059b4 <_vfiprintf_r+0x60>
 800598c:	0039      	movs	r1, r7
 800598e:	9803      	ldr	r0, [sp, #12]
 8005990:	f7ff faa8 	bl	8004ee4 <__swsetup_r>
 8005994:	2800      	cmp	r0, #0
 8005996:	d00d      	beq.n	80059b4 <_vfiprintf_r+0x60>
 8005998:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800599a:	07db      	lsls	r3, r3, #31
 800599c:	d503      	bpl.n	80059a6 <_vfiprintf_r+0x52>
 800599e:	2001      	movs	r0, #1
 80059a0:	4240      	negs	r0, r0
 80059a2:	b021      	add	sp, #132	@ 0x84
 80059a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059a6:	89bb      	ldrh	r3, [r7, #12]
 80059a8:	059b      	lsls	r3, r3, #22
 80059aa:	d4f8      	bmi.n	800599e <_vfiprintf_r+0x4a>
 80059ac:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80059ae:	f7ff fb8f 	bl	80050d0 <__retarget_lock_release_recursive>
 80059b2:	e7f4      	b.n	800599e <_vfiprintf_r+0x4a>
 80059b4:	2300      	movs	r3, #0
 80059b6:	ac08      	add	r4, sp, #32
 80059b8:	6163      	str	r3, [r4, #20]
 80059ba:	3320      	adds	r3, #32
 80059bc:	7663      	strb	r3, [r4, #25]
 80059be:	3310      	adds	r3, #16
 80059c0:	76a3      	strb	r3, [r4, #26]
 80059c2:	9607      	str	r6, [sp, #28]
 80059c4:	002e      	movs	r6, r5
 80059c6:	7833      	ldrb	r3, [r6, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d001      	beq.n	80059d0 <_vfiprintf_r+0x7c>
 80059cc:	2b25      	cmp	r3, #37	@ 0x25
 80059ce:	d148      	bne.n	8005a62 <_vfiprintf_r+0x10e>
 80059d0:	1b73      	subs	r3, r6, r5
 80059d2:	9305      	str	r3, [sp, #20]
 80059d4:	42ae      	cmp	r6, r5
 80059d6:	d00b      	beq.n	80059f0 <_vfiprintf_r+0x9c>
 80059d8:	002a      	movs	r2, r5
 80059da:	0039      	movs	r1, r7
 80059dc:	9803      	ldr	r0, [sp, #12]
 80059de:	f7ff ffa6 	bl	800592e <__sfputs_r>
 80059e2:	3001      	adds	r0, #1
 80059e4:	d100      	bne.n	80059e8 <_vfiprintf_r+0x94>
 80059e6:	e0ae      	b.n	8005b46 <_vfiprintf_r+0x1f2>
 80059e8:	6963      	ldr	r3, [r4, #20]
 80059ea:	9a05      	ldr	r2, [sp, #20]
 80059ec:	189b      	adds	r3, r3, r2
 80059ee:	6163      	str	r3, [r4, #20]
 80059f0:	7833      	ldrb	r3, [r6, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d100      	bne.n	80059f8 <_vfiprintf_r+0xa4>
 80059f6:	e0a6      	b.n	8005b46 <_vfiprintf_r+0x1f2>
 80059f8:	2201      	movs	r2, #1
 80059fa:	2300      	movs	r3, #0
 80059fc:	4252      	negs	r2, r2
 80059fe:	6062      	str	r2, [r4, #4]
 8005a00:	a904      	add	r1, sp, #16
 8005a02:	3254      	adds	r2, #84	@ 0x54
 8005a04:	1852      	adds	r2, r2, r1
 8005a06:	1c75      	adds	r5, r6, #1
 8005a08:	6023      	str	r3, [r4, #0]
 8005a0a:	60e3      	str	r3, [r4, #12]
 8005a0c:	60a3      	str	r3, [r4, #8]
 8005a0e:	7013      	strb	r3, [r2, #0]
 8005a10:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005a12:	4b59      	ldr	r3, [pc, #356]	@ (8005b78 <_vfiprintf_r+0x224>)
 8005a14:	2205      	movs	r2, #5
 8005a16:	0018      	movs	r0, r3
 8005a18:	7829      	ldrb	r1, [r5, #0]
 8005a1a:	9305      	str	r3, [sp, #20]
 8005a1c:	f000 fd72 	bl	8006504 <memchr>
 8005a20:	1c6e      	adds	r6, r5, #1
 8005a22:	2800      	cmp	r0, #0
 8005a24:	d11f      	bne.n	8005a66 <_vfiprintf_r+0x112>
 8005a26:	6822      	ldr	r2, [r4, #0]
 8005a28:	06d3      	lsls	r3, r2, #27
 8005a2a:	d504      	bpl.n	8005a36 <_vfiprintf_r+0xe2>
 8005a2c:	2353      	movs	r3, #83	@ 0x53
 8005a2e:	a904      	add	r1, sp, #16
 8005a30:	185b      	adds	r3, r3, r1
 8005a32:	2120      	movs	r1, #32
 8005a34:	7019      	strb	r1, [r3, #0]
 8005a36:	0713      	lsls	r3, r2, #28
 8005a38:	d504      	bpl.n	8005a44 <_vfiprintf_r+0xf0>
 8005a3a:	2353      	movs	r3, #83	@ 0x53
 8005a3c:	a904      	add	r1, sp, #16
 8005a3e:	185b      	adds	r3, r3, r1
 8005a40:	212b      	movs	r1, #43	@ 0x2b
 8005a42:	7019      	strb	r1, [r3, #0]
 8005a44:	782b      	ldrb	r3, [r5, #0]
 8005a46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a48:	d016      	beq.n	8005a78 <_vfiprintf_r+0x124>
 8005a4a:	002e      	movs	r6, r5
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	200a      	movs	r0, #10
 8005a50:	68e3      	ldr	r3, [r4, #12]
 8005a52:	7832      	ldrb	r2, [r6, #0]
 8005a54:	1c75      	adds	r5, r6, #1
 8005a56:	3a30      	subs	r2, #48	@ 0x30
 8005a58:	2a09      	cmp	r2, #9
 8005a5a:	d950      	bls.n	8005afe <_vfiprintf_r+0x1aa>
 8005a5c:	2900      	cmp	r1, #0
 8005a5e:	d111      	bne.n	8005a84 <_vfiprintf_r+0x130>
 8005a60:	e017      	b.n	8005a92 <_vfiprintf_r+0x13e>
 8005a62:	3601      	adds	r6, #1
 8005a64:	e7af      	b.n	80059c6 <_vfiprintf_r+0x72>
 8005a66:	9b05      	ldr	r3, [sp, #20]
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	1ac0      	subs	r0, r0, r3
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	4083      	lsls	r3, r0
 8005a70:	4313      	orrs	r3, r2
 8005a72:	0035      	movs	r5, r6
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	e7cc      	b.n	8005a12 <_vfiprintf_r+0xbe>
 8005a78:	9b07      	ldr	r3, [sp, #28]
 8005a7a:	1d19      	adds	r1, r3, #4
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	9107      	str	r1, [sp, #28]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	db01      	blt.n	8005a88 <_vfiprintf_r+0x134>
 8005a84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a86:	e004      	b.n	8005a92 <_vfiprintf_r+0x13e>
 8005a88:	425b      	negs	r3, r3
 8005a8a:	60e3      	str	r3, [r4, #12]
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	6023      	str	r3, [r4, #0]
 8005a92:	7833      	ldrb	r3, [r6, #0]
 8005a94:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a96:	d10c      	bne.n	8005ab2 <_vfiprintf_r+0x15e>
 8005a98:	7873      	ldrb	r3, [r6, #1]
 8005a9a:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a9c:	d134      	bne.n	8005b08 <_vfiprintf_r+0x1b4>
 8005a9e:	9b07      	ldr	r3, [sp, #28]
 8005aa0:	3602      	adds	r6, #2
 8005aa2:	1d1a      	adds	r2, r3, #4
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	9207      	str	r2, [sp, #28]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	da01      	bge.n	8005ab0 <_vfiprintf_r+0x15c>
 8005aac:	2301      	movs	r3, #1
 8005aae:	425b      	negs	r3, r3
 8005ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ab2:	4d32      	ldr	r5, [pc, #200]	@ (8005b7c <_vfiprintf_r+0x228>)
 8005ab4:	2203      	movs	r2, #3
 8005ab6:	0028      	movs	r0, r5
 8005ab8:	7831      	ldrb	r1, [r6, #0]
 8005aba:	f000 fd23 	bl	8006504 <memchr>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d006      	beq.n	8005ad0 <_vfiprintf_r+0x17c>
 8005ac2:	2340      	movs	r3, #64	@ 0x40
 8005ac4:	1b40      	subs	r0, r0, r5
 8005ac6:	4083      	lsls	r3, r0
 8005ac8:	6822      	ldr	r2, [r4, #0]
 8005aca:	3601      	adds	r6, #1
 8005acc:	4313      	orrs	r3, r2
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	7831      	ldrb	r1, [r6, #0]
 8005ad2:	2206      	movs	r2, #6
 8005ad4:	482a      	ldr	r0, [pc, #168]	@ (8005b80 <_vfiprintf_r+0x22c>)
 8005ad6:	1c75      	adds	r5, r6, #1
 8005ad8:	7621      	strb	r1, [r4, #24]
 8005ada:	f000 fd13 	bl	8006504 <memchr>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d040      	beq.n	8005b64 <_vfiprintf_r+0x210>
 8005ae2:	4b28      	ldr	r3, [pc, #160]	@ (8005b84 <_vfiprintf_r+0x230>)
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d122      	bne.n	8005b2e <_vfiprintf_r+0x1da>
 8005ae8:	2207      	movs	r2, #7
 8005aea:	9b07      	ldr	r3, [sp, #28]
 8005aec:	3307      	adds	r3, #7
 8005aee:	4393      	bics	r3, r2
 8005af0:	3308      	adds	r3, #8
 8005af2:	9307      	str	r3, [sp, #28]
 8005af4:	6963      	ldr	r3, [r4, #20]
 8005af6:	9a04      	ldr	r2, [sp, #16]
 8005af8:	189b      	adds	r3, r3, r2
 8005afa:	6163      	str	r3, [r4, #20]
 8005afc:	e762      	b.n	80059c4 <_vfiprintf_r+0x70>
 8005afe:	4343      	muls	r3, r0
 8005b00:	002e      	movs	r6, r5
 8005b02:	2101      	movs	r1, #1
 8005b04:	189b      	adds	r3, r3, r2
 8005b06:	e7a4      	b.n	8005a52 <_vfiprintf_r+0xfe>
 8005b08:	2300      	movs	r3, #0
 8005b0a:	200a      	movs	r0, #10
 8005b0c:	0019      	movs	r1, r3
 8005b0e:	3601      	adds	r6, #1
 8005b10:	6063      	str	r3, [r4, #4]
 8005b12:	7832      	ldrb	r2, [r6, #0]
 8005b14:	1c75      	adds	r5, r6, #1
 8005b16:	3a30      	subs	r2, #48	@ 0x30
 8005b18:	2a09      	cmp	r2, #9
 8005b1a:	d903      	bls.n	8005b24 <_vfiprintf_r+0x1d0>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0c8      	beq.n	8005ab2 <_vfiprintf_r+0x15e>
 8005b20:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b22:	e7c6      	b.n	8005ab2 <_vfiprintf_r+0x15e>
 8005b24:	4341      	muls	r1, r0
 8005b26:	002e      	movs	r6, r5
 8005b28:	2301      	movs	r3, #1
 8005b2a:	1889      	adds	r1, r1, r2
 8005b2c:	e7f1      	b.n	8005b12 <_vfiprintf_r+0x1be>
 8005b2e:	aa07      	add	r2, sp, #28
 8005b30:	9200      	str	r2, [sp, #0]
 8005b32:	0021      	movs	r1, r4
 8005b34:	003a      	movs	r2, r7
 8005b36:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <_vfiprintf_r+0x234>)
 8005b38:	9803      	ldr	r0, [sp, #12]
 8005b3a:	e000      	b.n	8005b3e <_vfiprintf_r+0x1ea>
 8005b3c:	bf00      	nop
 8005b3e:	9004      	str	r0, [sp, #16]
 8005b40:	9b04      	ldr	r3, [sp, #16]
 8005b42:	3301      	adds	r3, #1
 8005b44:	d1d6      	bne.n	8005af4 <_vfiprintf_r+0x1a0>
 8005b46:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b48:	07db      	lsls	r3, r3, #31
 8005b4a:	d405      	bmi.n	8005b58 <_vfiprintf_r+0x204>
 8005b4c:	89bb      	ldrh	r3, [r7, #12]
 8005b4e:	059b      	lsls	r3, r3, #22
 8005b50:	d402      	bmi.n	8005b58 <_vfiprintf_r+0x204>
 8005b52:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005b54:	f7ff fabc 	bl	80050d0 <__retarget_lock_release_recursive>
 8005b58:	89bb      	ldrh	r3, [r7, #12]
 8005b5a:	065b      	lsls	r3, r3, #25
 8005b5c:	d500      	bpl.n	8005b60 <_vfiprintf_r+0x20c>
 8005b5e:	e71e      	b.n	800599e <_vfiprintf_r+0x4a>
 8005b60:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8005b62:	e71e      	b.n	80059a2 <_vfiprintf_r+0x4e>
 8005b64:	aa07      	add	r2, sp, #28
 8005b66:	9200      	str	r2, [sp, #0]
 8005b68:	0021      	movs	r1, r4
 8005b6a:	003a      	movs	r2, r7
 8005b6c:	4b06      	ldr	r3, [pc, #24]	@ (8005b88 <_vfiprintf_r+0x234>)
 8005b6e:	9803      	ldr	r0, [sp, #12]
 8005b70:	f000 f87c 	bl	8005c6c <_printf_i>
 8005b74:	e7e3      	b.n	8005b3e <_vfiprintf_r+0x1ea>
 8005b76:	46c0      	nop			@ (mov r8, r8)
 8005b78:	08006bc0 	.word	0x08006bc0
 8005b7c:	08006bc6 	.word	0x08006bc6
 8005b80:	08006bca 	.word	0x08006bca
 8005b84:	00000000 	.word	0x00000000
 8005b88:	0800592f 	.word	0x0800592f

08005b8c <_printf_common>:
 8005b8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b8e:	0016      	movs	r6, r2
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	688a      	ldr	r2, [r1, #8]
 8005b94:	690b      	ldr	r3, [r1, #16]
 8005b96:	000c      	movs	r4, r1
 8005b98:	9000      	str	r0, [sp, #0]
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	da00      	bge.n	8005ba0 <_printf_common+0x14>
 8005b9e:	0013      	movs	r3, r2
 8005ba0:	0022      	movs	r2, r4
 8005ba2:	6033      	str	r3, [r6, #0]
 8005ba4:	3243      	adds	r2, #67	@ 0x43
 8005ba6:	7812      	ldrb	r2, [r2, #0]
 8005ba8:	2a00      	cmp	r2, #0
 8005baa:	d001      	beq.n	8005bb0 <_printf_common+0x24>
 8005bac:	3301      	adds	r3, #1
 8005bae:	6033      	str	r3, [r6, #0]
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	069b      	lsls	r3, r3, #26
 8005bb4:	d502      	bpl.n	8005bbc <_printf_common+0x30>
 8005bb6:	6833      	ldr	r3, [r6, #0]
 8005bb8:	3302      	adds	r3, #2
 8005bba:	6033      	str	r3, [r6, #0]
 8005bbc:	6822      	ldr	r2, [r4, #0]
 8005bbe:	2306      	movs	r3, #6
 8005bc0:	0015      	movs	r5, r2
 8005bc2:	401d      	ands	r5, r3
 8005bc4:	421a      	tst	r2, r3
 8005bc6:	d027      	beq.n	8005c18 <_printf_common+0x8c>
 8005bc8:	0023      	movs	r3, r4
 8005bca:	3343      	adds	r3, #67	@ 0x43
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	1e5a      	subs	r2, r3, #1
 8005bd0:	4193      	sbcs	r3, r2
 8005bd2:	6822      	ldr	r2, [r4, #0]
 8005bd4:	0692      	lsls	r2, r2, #26
 8005bd6:	d430      	bmi.n	8005c3a <_printf_common+0xae>
 8005bd8:	0022      	movs	r2, r4
 8005bda:	9901      	ldr	r1, [sp, #4]
 8005bdc:	9800      	ldr	r0, [sp, #0]
 8005bde:	9d08      	ldr	r5, [sp, #32]
 8005be0:	3243      	adds	r2, #67	@ 0x43
 8005be2:	47a8      	blx	r5
 8005be4:	3001      	adds	r0, #1
 8005be6:	d025      	beq.n	8005c34 <_printf_common+0xa8>
 8005be8:	2206      	movs	r2, #6
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	2500      	movs	r5, #0
 8005bee:	4013      	ands	r3, r2
 8005bf0:	2b04      	cmp	r3, #4
 8005bf2:	d105      	bne.n	8005c00 <_printf_common+0x74>
 8005bf4:	6833      	ldr	r3, [r6, #0]
 8005bf6:	68e5      	ldr	r5, [r4, #12]
 8005bf8:	1aed      	subs	r5, r5, r3
 8005bfa:	43eb      	mvns	r3, r5
 8005bfc:	17db      	asrs	r3, r3, #31
 8005bfe:	401d      	ands	r5, r3
 8005c00:	68a3      	ldr	r3, [r4, #8]
 8005c02:	6922      	ldr	r2, [r4, #16]
 8005c04:	4293      	cmp	r3, r2
 8005c06:	dd01      	ble.n	8005c0c <_printf_common+0x80>
 8005c08:	1a9b      	subs	r3, r3, r2
 8005c0a:	18ed      	adds	r5, r5, r3
 8005c0c:	2600      	movs	r6, #0
 8005c0e:	42b5      	cmp	r5, r6
 8005c10:	d120      	bne.n	8005c54 <_printf_common+0xc8>
 8005c12:	2000      	movs	r0, #0
 8005c14:	e010      	b.n	8005c38 <_printf_common+0xac>
 8005c16:	3501      	adds	r5, #1
 8005c18:	68e3      	ldr	r3, [r4, #12]
 8005c1a:	6832      	ldr	r2, [r6, #0]
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	42ab      	cmp	r3, r5
 8005c20:	ddd2      	ble.n	8005bc8 <_printf_common+0x3c>
 8005c22:	0022      	movs	r2, r4
 8005c24:	2301      	movs	r3, #1
 8005c26:	9901      	ldr	r1, [sp, #4]
 8005c28:	9800      	ldr	r0, [sp, #0]
 8005c2a:	9f08      	ldr	r7, [sp, #32]
 8005c2c:	3219      	adds	r2, #25
 8005c2e:	47b8      	blx	r7
 8005c30:	3001      	adds	r0, #1
 8005c32:	d1f0      	bne.n	8005c16 <_printf_common+0x8a>
 8005c34:	2001      	movs	r0, #1
 8005c36:	4240      	negs	r0, r0
 8005c38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c3a:	2030      	movs	r0, #48	@ 0x30
 8005c3c:	18e1      	adds	r1, r4, r3
 8005c3e:	3143      	adds	r1, #67	@ 0x43
 8005c40:	7008      	strb	r0, [r1, #0]
 8005c42:	0021      	movs	r1, r4
 8005c44:	1c5a      	adds	r2, r3, #1
 8005c46:	3145      	adds	r1, #69	@ 0x45
 8005c48:	7809      	ldrb	r1, [r1, #0]
 8005c4a:	18a2      	adds	r2, r4, r2
 8005c4c:	3243      	adds	r2, #67	@ 0x43
 8005c4e:	3302      	adds	r3, #2
 8005c50:	7011      	strb	r1, [r2, #0]
 8005c52:	e7c1      	b.n	8005bd8 <_printf_common+0x4c>
 8005c54:	0022      	movs	r2, r4
 8005c56:	2301      	movs	r3, #1
 8005c58:	9901      	ldr	r1, [sp, #4]
 8005c5a:	9800      	ldr	r0, [sp, #0]
 8005c5c:	9f08      	ldr	r7, [sp, #32]
 8005c5e:	321a      	adds	r2, #26
 8005c60:	47b8      	blx	r7
 8005c62:	3001      	adds	r0, #1
 8005c64:	d0e6      	beq.n	8005c34 <_printf_common+0xa8>
 8005c66:	3601      	adds	r6, #1
 8005c68:	e7d1      	b.n	8005c0e <_printf_common+0x82>
	...

08005c6c <_printf_i>:
 8005c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c6e:	b08b      	sub	sp, #44	@ 0x2c
 8005c70:	9206      	str	r2, [sp, #24]
 8005c72:	000a      	movs	r2, r1
 8005c74:	3243      	adds	r2, #67	@ 0x43
 8005c76:	9307      	str	r3, [sp, #28]
 8005c78:	9005      	str	r0, [sp, #20]
 8005c7a:	9203      	str	r2, [sp, #12]
 8005c7c:	7e0a      	ldrb	r2, [r1, #24]
 8005c7e:	000c      	movs	r4, r1
 8005c80:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005c82:	2a78      	cmp	r2, #120	@ 0x78
 8005c84:	d809      	bhi.n	8005c9a <_printf_i+0x2e>
 8005c86:	2a62      	cmp	r2, #98	@ 0x62
 8005c88:	d80b      	bhi.n	8005ca2 <_printf_i+0x36>
 8005c8a:	2a00      	cmp	r2, #0
 8005c8c:	d100      	bne.n	8005c90 <_printf_i+0x24>
 8005c8e:	e0bc      	b.n	8005e0a <_printf_i+0x19e>
 8005c90:	497b      	ldr	r1, [pc, #492]	@ (8005e80 <_printf_i+0x214>)
 8005c92:	9104      	str	r1, [sp, #16]
 8005c94:	2a58      	cmp	r2, #88	@ 0x58
 8005c96:	d100      	bne.n	8005c9a <_printf_i+0x2e>
 8005c98:	e090      	b.n	8005dbc <_printf_i+0x150>
 8005c9a:	0025      	movs	r5, r4
 8005c9c:	3542      	adds	r5, #66	@ 0x42
 8005c9e:	702a      	strb	r2, [r5, #0]
 8005ca0:	e022      	b.n	8005ce8 <_printf_i+0x7c>
 8005ca2:	0010      	movs	r0, r2
 8005ca4:	3863      	subs	r0, #99	@ 0x63
 8005ca6:	2815      	cmp	r0, #21
 8005ca8:	d8f7      	bhi.n	8005c9a <_printf_i+0x2e>
 8005caa:	f7fa fa35 	bl	8000118 <__gnu_thumb1_case_shi>
 8005cae:	0016      	.short	0x0016
 8005cb0:	fff6001f 	.word	0xfff6001f
 8005cb4:	fff6fff6 	.word	0xfff6fff6
 8005cb8:	001ffff6 	.word	0x001ffff6
 8005cbc:	fff6fff6 	.word	0xfff6fff6
 8005cc0:	fff6fff6 	.word	0xfff6fff6
 8005cc4:	003600a1 	.word	0x003600a1
 8005cc8:	fff60080 	.word	0xfff60080
 8005ccc:	00b2fff6 	.word	0x00b2fff6
 8005cd0:	0036fff6 	.word	0x0036fff6
 8005cd4:	fff6fff6 	.word	0xfff6fff6
 8005cd8:	0084      	.short	0x0084
 8005cda:	0025      	movs	r5, r4
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	3542      	adds	r5, #66	@ 0x42
 8005ce0:	1d11      	adds	r1, r2, #4
 8005ce2:	6019      	str	r1, [r3, #0]
 8005ce4:	6813      	ldr	r3, [r2, #0]
 8005ce6:	702b      	strb	r3, [r5, #0]
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e0a0      	b.n	8005e2e <_printf_i+0x1c2>
 8005cec:	6818      	ldr	r0, [r3, #0]
 8005cee:	6809      	ldr	r1, [r1, #0]
 8005cf0:	1d02      	adds	r2, r0, #4
 8005cf2:	060d      	lsls	r5, r1, #24
 8005cf4:	d50b      	bpl.n	8005d0e <_printf_i+0xa2>
 8005cf6:	6806      	ldr	r6, [r0, #0]
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	2e00      	cmp	r6, #0
 8005cfc:	da03      	bge.n	8005d06 <_printf_i+0x9a>
 8005cfe:	232d      	movs	r3, #45	@ 0x2d
 8005d00:	9a03      	ldr	r2, [sp, #12]
 8005d02:	4276      	negs	r6, r6
 8005d04:	7013      	strb	r3, [r2, #0]
 8005d06:	4b5e      	ldr	r3, [pc, #376]	@ (8005e80 <_printf_i+0x214>)
 8005d08:	270a      	movs	r7, #10
 8005d0a:	9304      	str	r3, [sp, #16]
 8005d0c:	e018      	b.n	8005d40 <_printf_i+0xd4>
 8005d0e:	6806      	ldr	r6, [r0, #0]
 8005d10:	601a      	str	r2, [r3, #0]
 8005d12:	0649      	lsls	r1, r1, #25
 8005d14:	d5f1      	bpl.n	8005cfa <_printf_i+0x8e>
 8005d16:	b236      	sxth	r6, r6
 8005d18:	e7ef      	b.n	8005cfa <_printf_i+0x8e>
 8005d1a:	6808      	ldr	r0, [r1, #0]
 8005d1c:	6819      	ldr	r1, [r3, #0]
 8005d1e:	c940      	ldmia	r1!, {r6}
 8005d20:	0605      	lsls	r5, r0, #24
 8005d22:	d402      	bmi.n	8005d2a <_printf_i+0xbe>
 8005d24:	0640      	lsls	r0, r0, #25
 8005d26:	d500      	bpl.n	8005d2a <_printf_i+0xbe>
 8005d28:	b2b6      	uxth	r6, r6
 8005d2a:	6019      	str	r1, [r3, #0]
 8005d2c:	4b54      	ldr	r3, [pc, #336]	@ (8005e80 <_printf_i+0x214>)
 8005d2e:	270a      	movs	r7, #10
 8005d30:	9304      	str	r3, [sp, #16]
 8005d32:	2a6f      	cmp	r2, #111	@ 0x6f
 8005d34:	d100      	bne.n	8005d38 <_printf_i+0xcc>
 8005d36:	3f02      	subs	r7, #2
 8005d38:	0023      	movs	r3, r4
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	3343      	adds	r3, #67	@ 0x43
 8005d3e:	701a      	strb	r2, [r3, #0]
 8005d40:	6863      	ldr	r3, [r4, #4]
 8005d42:	60a3      	str	r3, [r4, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	db03      	blt.n	8005d50 <_printf_i+0xe4>
 8005d48:	2104      	movs	r1, #4
 8005d4a:	6822      	ldr	r2, [r4, #0]
 8005d4c:	438a      	bics	r2, r1
 8005d4e:	6022      	str	r2, [r4, #0]
 8005d50:	2e00      	cmp	r6, #0
 8005d52:	d102      	bne.n	8005d5a <_printf_i+0xee>
 8005d54:	9d03      	ldr	r5, [sp, #12]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00c      	beq.n	8005d74 <_printf_i+0x108>
 8005d5a:	9d03      	ldr	r5, [sp, #12]
 8005d5c:	0030      	movs	r0, r6
 8005d5e:	0039      	movs	r1, r7
 8005d60:	f7fa fa6a 	bl	8000238 <__aeabi_uidivmod>
 8005d64:	9b04      	ldr	r3, [sp, #16]
 8005d66:	3d01      	subs	r5, #1
 8005d68:	5c5b      	ldrb	r3, [r3, r1]
 8005d6a:	702b      	strb	r3, [r5, #0]
 8005d6c:	0033      	movs	r3, r6
 8005d6e:	0006      	movs	r6, r0
 8005d70:	429f      	cmp	r7, r3
 8005d72:	d9f3      	bls.n	8005d5c <_printf_i+0xf0>
 8005d74:	2f08      	cmp	r7, #8
 8005d76:	d109      	bne.n	8005d8c <_printf_i+0x120>
 8005d78:	6823      	ldr	r3, [r4, #0]
 8005d7a:	07db      	lsls	r3, r3, #31
 8005d7c:	d506      	bpl.n	8005d8c <_printf_i+0x120>
 8005d7e:	6862      	ldr	r2, [r4, #4]
 8005d80:	6923      	ldr	r3, [r4, #16]
 8005d82:	429a      	cmp	r2, r3
 8005d84:	dc02      	bgt.n	8005d8c <_printf_i+0x120>
 8005d86:	2330      	movs	r3, #48	@ 0x30
 8005d88:	3d01      	subs	r5, #1
 8005d8a:	702b      	strb	r3, [r5, #0]
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	1b5b      	subs	r3, r3, r5
 8005d90:	6123      	str	r3, [r4, #16]
 8005d92:	9b07      	ldr	r3, [sp, #28]
 8005d94:	0021      	movs	r1, r4
 8005d96:	9300      	str	r3, [sp, #0]
 8005d98:	9805      	ldr	r0, [sp, #20]
 8005d9a:	9b06      	ldr	r3, [sp, #24]
 8005d9c:	aa09      	add	r2, sp, #36	@ 0x24
 8005d9e:	f7ff fef5 	bl	8005b8c <_printf_common>
 8005da2:	3001      	adds	r0, #1
 8005da4:	d148      	bne.n	8005e38 <_printf_i+0x1cc>
 8005da6:	2001      	movs	r0, #1
 8005da8:	4240      	negs	r0, r0
 8005daa:	b00b      	add	sp, #44	@ 0x2c
 8005dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005dae:	2220      	movs	r2, #32
 8005db0:	6809      	ldr	r1, [r1, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	6022      	str	r2, [r4, #0]
 8005db6:	2278      	movs	r2, #120	@ 0x78
 8005db8:	4932      	ldr	r1, [pc, #200]	@ (8005e84 <_printf_i+0x218>)
 8005dba:	9104      	str	r1, [sp, #16]
 8005dbc:	0021      	movs	r1, r4
 8005dbe:	3145      	adds	r1, #69	@ 0x45
 8005dc0:	700a      	strb	r2, [r1, #0]
 8005dc2:	6819      	ldr	r1, [r3, #0]
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	c940      	ldmia	r1!, {r6}
 8005dc8:	0610      	lsls	r0, r2, #24
 8005dca:	d402      	bmi.n	8005dd2 <_printf_i+0x166>
 8005dcc:	0650      	lsls	r0, r2, #25
 8005dce:	d500      	bpl.n	8005dd2 <_printf_i+0x166>
 8005dd0:	b2b6      	uxth	r6, r6
 8005dd2:	6019      	str	r1, [r3, #0]
 8005dd4:	07d3      	lsls	r3, r2, #31
 8005dd6:	d502      	bpl.n	8005dde <_printf_i+0x172>
 8005dd8:	2320      	movs	r3, #32
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	2e00      	cmp	r6, #0
 8005de0:	d001      	beq.n	8005de6 <_printf_i+0x17a>
 8005de2:	2710      	movs	r7, #16
 8005de4:	e7a8      	b.n	8005d38 <_printf_i+0xcc>
 8005de6:	2220      	movs	r2, #32
 8005de8:	6823      	ldr	r3, [r4, #0]
 8005dea:	4393      	bics	r3, r2
 8005dec:	6023      	str	r3, [r4, #0]
 8005dee:	e7f8      	b.n	8005de2 <_printf_i+0x176>
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	680d      	ldr	r5, [r1, #0]
 8005df4:	1d10      	adds	r0, r2, #4
 8005df6:	6949      	ldr	r1, [r1, #20]
 8005df8:	6018      	str	r0, [r3, #0]
 8005dfa:	6813      	ldr	r3, [r2, #0]
 8005dfc:	062e      	lsls	r6, r5, #24
 8005dfe:	d501      	bpl.n	8005e04 <_printf_i+0x198>
 8005e00:	6019      	str	r1, [r3, #0]
 8005e02:	e002      	b.n	8005e0a <_printf_i+0x19e>
 8005e04:	066d      	lsls	r5, r5, #25
 8005e06:	d5fb      	bpl.n	8005e00 <_printf_i+0x194>
 8005e08:	8019      	strh	r1, [r3, #0]
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	9d03      	ldr	r5, [sp, #12]
 8005e0e:	6123      	str	r3, [r4, #16]
 8005e10:	e7bf      	b.n	8005d92 <_printf_i+0x126>
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	1d11      	adds	r1, r2, #4
 8005e16:	6019      	str	r1, [r3, #0]
 8005e18:	6815      	ldr	r5, [r2, #0]
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	0028      	movs	r0, r5
 8005e1e:	6862      	ldr	r2, [r4, #4]
 8005e20:	f000 fb70 	bl	8006504 <memchr>
 8005e24:	2800      	cmp	r0, #0
 8005e26:	d001      	beq.n	8005e2c <_printf_i+0x1c0>
 8005e28:	1b40      	subs	r0, r0, r5
 8005e2a:	6060      	str	r0, [r4, #4]
 8005e2c:	6863      	ldr	r3, [r4, #4]
 8005e2e:	6123      	str	r3, [r4, #16]
 8005e30:	2300      	movs	r3, #0
 8005e32:	9a03      	ldr	r2, [sp, #12]
 8005e34:	7013      	strb	r3, [r2, #0]
 8005e36:	e7ac      	b.n	8005d92 <_printf_i+0x126>
 8005e38:	002a      	movs	r2, r5
 8005e3a:	6923      	ldr	r3, [r4, #16]
 8005e3c:	9906      	ldr	r1, [sp, #24]
 8005e3e:	9805      	ldr	r0, [sp, #20]
 8005e40:	9d07      	ldr	r5, [sp, #28]
 8005e42:	47a8      	blx	r5
 8005e44:	3001      	adds	r0, #1
 8005e46:	d0ae      	beq.n	8005da6 <_printf_i+0x13a>
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	079b      	lsls	r3, r3, #30
 8005e4c:	d415      	bmi.n	8005e7a <_printf_i+0x20e>
 8005e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e50:	68e0      	ldr	r0, [r4, #12]
 8005e52:	4298      	cmp	r0, r3
 8005e54:	daa9      	bge.n	8005daa <_printf_i+0x13e>
 8005e56:	0018      	movs	r0, r3
 8005e58:	e7a7      	b.n	8005daa <_printf_i+0x13e>
 8005e5a:	0022      	movs	r2, r4
 8005e5c:	2301      	movs	r3, #1
 8005e5e:	9906      	ldr	r1, [sp, #24]
 8005e60:	9805      	ldr	r0, [sp, #20]
 8005e62:	9e07      	ldr	r6, [sp, #28]
 8005e64:	3219      	adds	r2, #25
 8005e66:	47b0      	blx	r6
 8005e68:	3001      	adds	r0, #1
 8005e6a:	d09c      	beq.n	8005da6 <_printf_i+0x13a>
 8005e6c:	3501      	adds	r5, #1
 8005e6e:	68e3      	ldr	r3, [r4, #12]
 8005e70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005e72:	1a9b      	subs	r3, r3, r2
 8005e74:	42ab      	cmp	r3, r5
 8005e76:	dcf0      	bgt.n	8005e5a <_printf_i+0x1ee>
 8005e78:	e7e9      	b.n	8005e4e <_printf_i+0x1e2>
 8005e7a:	2500      	movs	r5, #0
 8005e7c:	e7f7      	b.n	8005e6e <_printf_i+0x202>
 8005e7e:	46c0      	nop			@ (mov r8, r8)
 8005e80:	08006bd1 	.word	0x08006bd1
 8005e84:	08006be2 	.word	0x08006be2

08005e88 <_scanf_chars>:
 8005e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e8a:	0015      	movs	r5, r2
 8005e8c:	688a      	ldr	r2, [r1, #8]
 8005e8e:	000c      	movs	r4, r1
 8005e90:	9001      	str	r0, [sp, #4]
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	d104      	bne.n	8005ea0 <_scanf_chars+0x18>
 8005e96:	698a      	ldr	r2, [r1, #24]
 8005e98:	2a00      	cmp	r2, #0
 8005e9a:	d117      	bne.n	8005ecc <_scanf_chars+0x44>
 8005e9c:	3201      	adds	r2, #1
 8005e9e:	60a2      	str	r2, [r4, #8]
 8005ea0:	6822      	ldr	r2, [r4, #0]
 8005ea2:	06d2      	lsls	r2, r2, #27
 8005ea4:	d403      	bmi.n	8005eae <_scanf_chars+0x26>
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	1d11      	adds	r1, r2, #4
 8005eaa:	6019      	str	r1, [r3, #0]
 8005eac:	6817      	ldr	r7, [r2, #0]
 8005eae:	2600      	movs	r6, #0
 8005eb0:	69a0      	ldr	r0, [r4, #24]
 8005eb2:	2800      	cmp	r0, #0
 8005eb4:	d016      	beq.n	8005ee4 <_scanf_chars+0x5c>
 8005eb6:	2801      	cmp	r0, #1
 8005eb8:	d10b      	bne.n	8005ed2 <_scanf_chars+0x4a>
 8005eba:	682b      	ldr	r3, [r5, #0]
 8005ebc:	6962      	ldr	r2, [r4, #20]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	5cd3      	ldrb	r3, [r2, r3]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10e      	bne.n	8005ee4 <_scanf_chars+0x5c>
 8005ec6:	2e00      	cmp	r6, #0
 8005ec8:	d03b      	beq.n	8005f42 <_scanf_chars+0xba>
 8005eca:	e029      	b.n	8005f20 <_scanf_chars+0x98>
 8005ecc:	2201      	movs	r2, #1
 8005ece:	4252      	negs	r2, r2
 8005ed0:	e7e5      	b.n	8005e9e <_scanf_chars+0x16>
 8005ed2:	2802      	cmp	r0, #2
 8005ed4:	d124      	bne.n	8005f20 <_scanf_chars+0x98>
 8005ed6:	682b      	ldr	r3, [r5, #0]
 8005ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8005f44 <_scanf_chars+0xbc>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	5cd3      	ldrb	r3, [r2, r3]
 8005ede:	2208      	movs	r2, #8
 8005ee0:	4213      	tst	r3, r2
 8005ee2:	d11d      	bne.n	8005f20 <_scanf_chars+0x98>
 8005ee4:	2210      	movs	r2, #16
 8005ee6:	6823      	ldr	r3, [r4, #0]
 8005ee8:	3601      	adds	r6, #1
 8005eea:	4213      	tst	r3, r2
 8005eec:	d103      	bne.n	8005ef6 <_scanf_chars+0x6e>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	703b      	strb	r3, [r7, #0]
 8005ef4:	3701      	adds	r7, #1
 8005ef6:	682a      	ldr	r2, [r5, #0]
 8005ef8:	686b      	ldr	r3, [r5, #4]
 8005efa:	3201      	adds	r2, #1
 8005efc:	602a      	str	r2, [r5, #0]
 8005efe:	68a2      	ldr	r2, [r4, #8]
 8005f00:	3b01      	subs	r3, #1
 8005f02:	3a01      	subs	r2, #1
 8005f04:	606b      	str	r3, [r5, #4]
 8005f06:	60a2      	str	r2, [r4, #8]
 8005f08:	2a00      	cmp	r2, #0
 8005f0a:	d009      	beq.n	8005f20 <_scanf_chars+0x98>
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	dccf      	bgt.n	8005eb0 <_scanf_chars+0x28>
 8005f10:	23c0      	movs	r3, #192	@ 0xc0
 8005f12:	005b      	lsls	r3, r3, #1
 8005f14:	0029      	movs	r1, r5
 8005f16:	58e3      	ldr	r3, [r4, r3]
 8005f18:	9801      	ldr	r0, [sp, #4]
 8005f1a:	4798      	blx	r3
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d0c7      	beq.n	8005eb0 <_scanf_chars+0x28>
 8005f20:	6822      	ldr	r2, [r4, #0]
 8005f22:	2310      	movs	r3, #16
 8005f24:	0011      	movs	r1, r2
 8005f26:	4019      	ands	r1, r3
 8005f28:	421a      	tst	r2, r3
 8005f2a:	d106      	bne.n	8005f3a <_scanf_chars+0xb2>
 8005f2c:	68e3      	ldr	r3, [r4, #12]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	60e3      	str	r3, [r4, #12]
 8005f32:	69a3      	ldr	r3, [r4, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d000      	beq.n	8005f3a <_scanf_chars+0xb2>
 8005f38:	7039      	strb	r1, [r7, #0]
 8005f3a:	2000      	movs	r0, #0
 8005f3c:	6923      	ldr	r3, [r4, #16]
 8005f3e:	199b      	adds	r3, r3, r6
 8005f40:	6123      	str	r3, [r4, #16]
 8005f42:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005f44:	08006c0f 	.word	0x08006c0f

08005f48 <_scanf_i>:
 8005f48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f4a:	b08b      	sub	sp, #44	@ 0x2c
 8005f4c:	9301      	str	r3, [sp, #4]
 8005f4e:	4b78      	ldr	r3, [pc, #480]	@ (8006130 <_scanf_i+0x1e8>)
 8005f50:	0016      	movs	r6, r2
 8005f52:	9004      	str	r0, [sp, #16]
 8005f54:	aa07      	add	r2, sp, #28
 8005f56:	cba1      	ldmia	r3!, {r0, r5, r7}
 8005f58:	c2a1      	stmia	r2!, {r0, r5, r7}
 8005f5a:	4a76      	ldr	r2, [pc, #472]	@ (8006134 <_scanf_i+0x1ec>)
 8005f5c:	698b      	ldr	r3, [r1, #24]
 8005f5e:	000c      	movs	r4, r1
 8005f60:	9205      	str	r2, [sp, #20]
 8005f62:	2b03      	cmp	r3, #3
 8005f64:	d101      	bne.n	8005f6a <_scanf_i+0x22>
 8005f66:	4b74      	ldr	r3, [pc, #464]	@ (8006138 <_scanf_i+0x1f0>)
 8005f68:	9305      	str	r3, [sp, #20]
 8005f6a:	22ae      	movs	r2, #174	@ 0xae
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	68a3      	ldr	r3, [r4, #8]
 8005f70:	0052      	lsls	r2, r2, #1
 8005f72:	1e59      	subs	r1, r3, #1
 8005f74:	9003      	str	r0, [sp, #12]
 8005f76:	4291      	cmp	r1, r2
 8005f78:	d905      	bls.n	8005f86 <_scanf_i+0x3e>
 8005f7a:	3b5e      	subs	r3, #94	@ 0x5e
 8005f7c:	3bff      	subs	r3, #255	@ 0xff
 8005f7e:	9303      	str	r3, [sp, #12]
 8005f80:	235e      	movs	r3, #94	@ 0x5e
 8005f82:	33ff      	adds	r3, #255	@ 0xff
 8005f84:	60a3      	str	r3, [r4, #8]
 8005f86:	0023      	movs	r3, r4
 8005f88:	331c      	adds	r3, #28
 8005f8a:	9300      	str	r3, [sp, #0]
 8005f8c:	23d0      	movs	r3, #208	@ 0xd0
 8005f8e:	2700      	movs	r7, #0
 8005f90:	6822      	ldr	r2, [r4, #0]
 8005f92:	011b      	lsls	r3, r3, #4
 8005f94:	4313      	orrs	r3, r2
 8005f96:	6023      	str	r3, [r4, #0]
 8005f98:	9b00      	ldr	r3, [sp, #0]
 8005f9a:	9302      	str	r3, [sp, #8]
 8005f9c:	6833      	ldr	r3, [r6, #0]
 8005f9e:	a807      	add	r0, sp, #28
 8005fa0:	7819      	ldrb	r1, [r3, #0]
 8005fa2:	00bb      	lsls	r3, r7, #2
 8005fa4:	2202      	movs	r2, #2
 8005fa6:	5818      	ldr	r0, [r3, r0]
 8005fa8:	f000 faac 	bl	8006504 <memchr>
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d029      	beq.n	8006004 <_scanf_i+0xbc>
 8005fb0:	2f01      	cmp	r7, #1
 8005fb2:	d15e      	bne.n	8006072 <_scanf_i+0x12a>
 8005fb4:	6863      	ldr	r3, [r4, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d106      	bne.n	8005fc8 <_scanf_i+0x80>
 8005fba:	3308      	adds	r3, #8
 8005fbc:	6822      	ldr	r2, [r4, #0]
 8005fbe:	6063      	str	r3, [r4, #4]
 8005fc0:	33f9      	adds	r3, #249	@ 0xf9
 8005fc2:	33ff      	adds	r3, #255	@ 0xff
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	6023      	str	r3, [r4, #0]
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	4a5c      	ldr	r2, [pc, #368]	@ (800613c <_scanf_i+0x1f4>)
 8005fcc:	4013      	ands	r3, r2
 8005fce:	6023      	str	r3, [r4, #0]
 8005fd0:	68a3      	ldr	r3, [r4, #8]
 8005fd2:	1e5a      	subs	r2, r3, #1
 8005fd4:	60a2      	str	r2, [r4, #8]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d014      	beq.n	8006004 <_scanf_i+0xbc>
 8005fda:	6833      	ldr	r3, [r6, #0]
 8005fdc:	1c5a      	adds	r2, r3, #1
 8005fde:	6032      	str	r2, [r6, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	9a02      	ldr	r2, [sp, #8]
 8005fe4:	7013      	strb	r3, [r2, #0]
 8005fe6:	6873      	ldr	r3, [r6, #4]
 8005fe8:	1c55      	adds	r5, r2, #1
 8005fea:	3b01      	subs	r3, #1
 8005fec:	6073      	str	r3, [r6, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	dc07      	bgt.n	8006002 <_scanf_i+0xba>
 8005ff2:	23c0      	movs	r3, #192	@ 0xc0
 8005ff4:	005b      	lsls	r3, r3, #1
 8005ff6:	0031      	movs	r1, r6
 8005ff8:	58e3      	ldr	r3, [r4, r3]
 8005ffa:	9804      	ldr	r0, [sp, #16]
 8005ffc:	4798      	blx	r3
 8005ffe:	2800      	cmp	r0, #0
 8006000:	d17e      	bne.n	8006100 <_scanf_i+0x1b8>
 8006002:	9502      	str	r5, [sp, #8]
 8006004:	3701      	adds	r7, #1
 8006006:	2f03      	cmp	r7, #3
 8006008:	d1c8      	bne.n	8005f9c <_scanf_i+0x54>
 800600a:	6863      	ldr	r3, [r4, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d101      	bne.n	8006014 <_scanf_i+0xcc>
 8006010:	330a      	adds	r3, #10
 8006012:	6063      	str	r3, [r4, #4]
 8006014:	2700      	movs	r7, #0
 8006016:	6863      	ldr	r3, [r4, #4]
 8006018:	4949      	ldr	r1, [pc, #292]	@ (8006140 <_scanf_i+0x1f8>)
 800601a:	6960      	ldr	r0, [r4, #20]
 800601c:	1ac9      	subs	r1, r1, r3
 800601e:	f000 f9b0 	bl	8006382 <__sccl>
 8006022:	9d02      	ldr	r5, [sp, #8]
 8006024:	68a3      	ldr	r3, [r4, #8]
 8006026:	6820      	ldr	r0, [r4, #0]
 8006028:	9302      	str	r3, [sp, #8]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d03f      	beq.n	80060ae <_scanf_i+0x166>
 800602e:	6831      	ldr	r1, [r6, #0]
 8006030:	6963      	ldr	r3, [r4, #20]
 8006032:	780a      	ldrb	r2, [r1, #0]
 8006034:	5c9b      	ldrb	r3, [r3, r2]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d039      	beq.n	80060ae <_scanf_i+0x166>
 800603a:	2a30      	cmp	r2, #48	@ 0x30
 800603c:	d128      	bne.n	8006090 <_scanf_i+0x148>
 800603e:	2380      	movs	r3, #128	@ 0x80
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	4218      	tst	r0, r3
 8006044:	d024      	beq.n	8006090 <_scanf_i+0x148>
 8006046:	9b03      	ldr	r3, [sp, #12]
 8006048:	3701      	adds	r7, #1
 800604a:	2b00      	cmp	r3, #0
 800604c:	d005      	beq.n	800605a <_scanf_i+0x112>
 800604e:	001a      	movs	r2, r3
 8006050:	9b02      	ldr	r3, [sp, #8]
 8006052:	3a01      	subs	r2, #1
 8006054:	3301      	adds	r3, #1
 8006056:	9203      	str	r2, [sp, #12]
 8006058:	60a3      	str	r3, [r4, #8]
 800605a:	6873      	ldr	r3, [r6, #4]
 800605c:	3b01      	subs	r3, #1
 800605e:	6073      	str	r3, [r6, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	dd1c      	ble.n	800609e <_scanf_i+0x156>
 8006064:	6833      	ldr	r3, [r6, #0]
 8006066:	3301      	adds	r3, #1
 8006068:	6033      	str	r3, [r6, #0]
 800606a:	68a3      	ldr	r3, [r4, #8]
 800606c:	3b01      	subs	r3, #1
 800606e:	60a3      	str	r3, [r4, #8]
 8006070:	e7d8      	b.n	8006024 <_scanf_i+0xdc>
 8006072:	2f02      	cmp	r7, #2
 8006074:	d1ac      	bne.n	8005fd0 <_scanf_i+0x88>
 8006076:	23c0      	movs	r3, #192	@ 0xc0
 8006078:	2180      	movs	r1, #128	@ 0x80
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	00db      	lsls	r3, r3, #3
 800607e:	4013      	ands	r3, r2
 8006080:	0089      	lsls	r1, r1, #2
 8006082:	428b      	cmp	r3, r1
 8006084:	d1c1      	bne.n	800600a <_scanf_i+0xc2>
 8006086:	2310      	movs	r3, #16
 8006088:	6063      	str	r3, [r4, #4]
 800608a:	33f0      	adds	r3, #240	@ 0xf0
 800608c:	4313      	orrs	r3, r2
 800608e:	e79e      	b.n	8005fce <_scanf_i+0x86>
 8006090:	4b2c      	ldr	r3, [pc, #176]	@ (8006144 <_scanf_i+0x1fc>)
 8006092:	4003      	ands	r3, r0
 8006094:	6023      	str	r3, [r4, #0]
 8006096:	780b      	ldrb	r3, [r1, #0]
 8006098:	702b      	strb	r3, [r5, #0]
 800609a:	3501      	adds	r5, #1
 800609c:	e7dd      	b.n	800605a <_scanf_i+0x112>
 800609e:	23c0      	movs	r3, #192	@ 0xc0
 80060a0:	005b      	lsls	r3, r3, #1
 80060a2:	0031      	movs	r1, r6
 80060a4:	58e3      	ldr	r3, [r4, r3]
 80060a6:	9804      	ldr	r0, [sp, #16]
 80060a8:	4798      	blx	r3
 80060aa:	2800      	cmp	r0, #0
 80060ac:	d0dd      	beq.n	800606a <_scanf_i+0x122>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	05db      	lsls	r3, r3, #23
 80060b2:	d50e      	bpl.n	80060d2 <_scanf_i+0x18a>
 80060b4:	9b00      	ldr	r3, [sp, #0]
 80060b6:	429d      	cmp	r5, r3
 80060b8:	d907      	bls.n	80060ca <_scanf_i+0x182>
 80060ba:	23be      	movs	r3, #190	@ 0xbe
 80060bc:	3d01      	subs	r5, #1
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	0032      	movs	r2, r6
 80060c2:	7829      	ldrb	r1, [r5, #0]
 80060c4:	58e3      	ldr	r3, [r4, r3]
 80060c6:	9804      	ldr	r0, [sp, #16]
 80060c8:	4798      	blx	r3
 80060ca:	9b00      	ldr	r3, [sp, #0]
 80060cc:	2001      	movs	r0, #1
 80060ce:	429d      	cmp	r5, r3
 80060d0:	d029      	beq.n	8006126 <_scanf_i+0x1de>
 80060d2:	6821      	ldr	r1, [r4, #0]
 80060d4:	2310      	movs	r3, #16
 80060d6:	000a      	movs	r2, r1
 80060d8:	401a      	ands	r2, r3
 80060da:	4219      	tst	r1, r3
 80060dc:	d11c      	bne.n	8006118 <_scanf_i+0x1d0>
 80060de:	702a      	strb	r2, [r5, #0]
 80060e0:	6863      	ldr	r3, [r4, #4]
 80060e2:	9900      	ldr	r1, [sp, #0]
 80060e4:	9804      	ldr	r0, [sp, #16]
 80060e6:	9e05      	ldr	r6, [sp, #20]
 80060e8:	47b0      	blx	r6
 80060ea:	9b01      	ldr	r3, [sp, #4]
 80060ec:	6822      	ldr	r2, [r4, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	0691      	lsls	r1, r2, #26
 80060f2:	d507      	bpl.n	8006104 <_scanf_i+0x1bc>
 80060f4:	9901      	ldr	r1, [sp, #4]
 80060f6:	1d1a      	adds	r2, r3, #4
 80060f8:	600a      	str	r2, [r1, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6018      	str	r0, [r3, #0]
 80060fe:	e008      	b.n	8006112 <_scanf_i+0x1ca>
 8006100:	2700      	movs	r7, #0
 8006102:	e7d4      	b.n	80060ae <_scanf_i+0x166>
 8006104:	1d19      	adds	r1, r3, #4
 8006106:	07d6      	lsls	r6, r2, #31
 8006108:	d50f      	bpl.n	800612a <_scanf_i+0x1e2>
 800610a:	9a01      	ldr	r2, [sp, #4]
 800610c:	6011      	str	r1, [r2, #0]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	8018      	strh	r0, [r3, #0]
 8006112:	68e3      	ldr	r3, [r4, #12]
 8006114:	3301      	adds	r3, #1
 8006116:	60e3      	str	r3, [r4, #12]
 8006118:	2000      	movs	r0, #0
 800611a:	9b00      	ldr	r3, [sp, #0]
 800611c:	1aed      	subs	r5, r5, r3
 800611e:	6923      	ldr	r3, [r4, #16]
 8006120:	19ed      	adds	r5, r5, r7
 8006122:	195b      	adds	r3, r3, r5
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	b00b      	add	sp, #44	@ 0x2c
 8006128:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800612a:	9a01      	ldr	r2, [sp, #4]
 800612c:	6011      	str	r1, [r2, #0]
 800612e:	e7e4      	b.n	80060fa <_scanf_i+0x1b2>
 8006130:	08006b3c 	.word	0x08006b3c
 8006134:	080067ad 	.word	0x080067ad
 8006138:	080066a1 	.word	0x080066a1
 800613c:	fffffaff 	.word	0xfffffaff
 8006140:	08006c03 	.word	0x08006c03
 8006144:	fffff6ff 	.word	0xfffff6ff

08006148 <__sflush_r>:
 8006148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800614a:	220c      	movs	r2, #12
 800614c:	5e8b      	ldrsh	r3, [r1, r2]
 800614e:	0005      	movs	r5, r0
 8006150:	000c      	movs	r4, r1
 8006152:	071a      	lsls	r2, r3, #28
 8006154:	d456      	bmi.n	8006204 <__sflush_r+0xbc>
 8006156:	684a      	ldr	r2, [r1, #4]
 8006158:	2a00      	cmp	r2, #0
 800615a:	dc02      	bgt.n	8006162 <__sflush_r+0x1a>
 800615c:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800615e:	2a00      	cmp	r2, #0
 8006160:	dd4e      	ble.n	8006200 <__sflush_r+0xb8>
 8006162:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006164:	2f00      	cmp	r7, #0
 8006166:	d04b      	beq.n	8006200 <__sflush_r+0xb8>
 8006168:	2200      	movs	r2, #0
 800616a:	2080      	movs	r0, #128	@ 0x80
 800616c:	682e      	ldr	r6, [r5, #0]
 800616e:	602a      	str	r2, [r5, #0]
 8006170:	001a      	movs	r2, r3
 8006172:	0140      	lsls	r0, r0, #5
 8006174:	6a21      	ldr	r1, [r4, #32]
 8006176:	4002      	ands	r2, r0
 8006178:	4203      	tst	r3, r0
 800617a:	d033      	beq.n	80061e4 <__sflush_r+0x9c>
 800617c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800617e:	89a3      	ldrh	r3, [r4, #12]
 8006180:	075b      	lsls	r3, r3, #29
 8006182:	d506      	bpl.n	8006192 <__sflush_r+0x4a>
 8006184:	6863      	ldr	r3, [r4, #4]
 8006186:	1ad2      	subs	r2, r2, r3
 8006188:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <__sflush_r+0x4a>
 800618e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006190:	1ad2      	subs	r2, r2, r3
 8006192:	2300      	movs	r3, #0
 8006194:	0028      	movs	r0, r5
 8006196:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006198:	6a21      	ldr	r1, [r4, #32]
 800619a:	47b8      	blx	r7
 800619c:	89a2      	ldrh	r2, [r4, #12]
 800619e:	1c43      	adds	r3, r0, #1
 80061a0:	d106      	bne.n	80061b0 <__sflush_r+0x68>
 80061a2:	6829      	ldr	r1, [r5, #0]
 80061a4:	291d      	cmp	r1, #29
 80061a6:	d846      	bhi.n	8006236 <__sflush_r+0xee>
 80061a8:	4b29      	ldr	r3, [pc, #164]	@ (8006250 <__sflush_r+0x108>)
 80061aa:	410b      	asrs	r3, r1
 80061ac:	07db      	lsls	r3, r3, #31
 80061ae:	d442      	bmi.n	8006236 <__sflush_r+0xee>
 80061b0:	2300      	movs	r3, #0
 80061b2:	6063      	str	r3, [r4, #4]
 80061b4:	6923      	ldr	r3, [r4, #16]
 80061b6:	6023      	str	r3, [r4, #0]
 80061b8:	04d2      	lsls	r2, r2, #19
 80061ba:	d505      	bpl.n	80061c8 <__sflush_r+0x80>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <__sflush_r+0x7e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d100      	bne.n	80061c8 <__sflush_r+0x80>
 80061c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80061c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80061ca:	602e      	str	r6, [r5, #0]
 80061cc:	2900      	cmp	r1, #0
 80061ce:	d017      	beq.n	8006200 <__sflush_r+0xb8>
 80061d0:	0023      	movs	r3, r4
 80061d2:	3344      	adds	r3, #68	@ 0x44
 80061d4:	4299      	cmp	r1, r3
 80061d6:	d002      	beq.n	80061de <__sflush_r+0x96>
 80061d8:	0028      	movs	r0, r5
 80061da:	f7fe ff7b 	bl	80050d4 <_free_r>
 80061de:	2300      	movs	r3, #0
 80061e0:	6363      	str	r3, [r4, #52]	@ 0x34
 80061e2:	e00d      	b.n	8006200 <__sflush_r+0xb8>
 80061e4:	2301      	movs	r3, #1
 80061e6:	0028      	movs	r0, r5
 80061e8:	47b8      	blx	r7
 80061ea:	0002      	movs	r2, r0
 80061ec:	1c43      	adds	r3, r0, #1
 80061ee:	d1c6      	bne.n	800617e <__sflush_r+0x36>
 80061f0:	682b      	ldr	r3, [r5, #0]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d0c3      	beq.n	800617e <__sflush_r+0x36>
 80061f6:	2b1d      	cmp	r3, #29
 80061f8:	d001      	beq.n	80061fe <__sflush_r+0xb6>
 80061fa:	2b16      	cmp	r3, #22
 80061fc:	d11a      	bne.n	8006234 <__sflush_r+0xec>
 80061fe:	602e      	str	r6, [r5, #0]
 8006200:	2000      	movs	r0, #0
 8006202:	e01e      	b.n	8006242 <__sflush_r+0xfa>
 8006204:	690e      	ldr	r6, [r1, #16]
 8006206:	2e00      	cmp	r6, #0
 8006208:	d0fa      	beq.n	8006200 <__sflush_r+0xb8>
 800620a:	680f      	ldr	r7, [r1, #0]
 800620c:	600e      	str	r6, [r1, #0]
 800620e:	1bba      	subs	r2, r7, r6
 8006210:	9201      	str	r2, [sp, #4]
 8006212:	2200      	movs	r2, #0
 8006214:	079b      	lsls	r3, r3, #30
 8006216:	d100      	bne.n	800621a <__sflush_r+0xd2>
 8006218:	694a      	ldr	r2, [r1, #20]
 800621a:	60a2      	str	r2, [r4, #8]
 800621c:	9b01      	ldr	r3, [sp, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	ddee      	ble.n	8006200 <__sflush_r+0xb8>
 8006222:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006224:	0032      	movs	r2, r6
 8006226:	001f      	movs	r7, r3
 8006228:	0028      	movs	r0, r5
 800622a:	9b01      	ldr	r3, [sp, #4]
 800622c:	6a21      	ldr	r1, [r4, #32]
 800622e:	47b8      	blx	r7
 8006230:	2800      	cmp	r0, #0
 8006232:	dc07      	bgt.n	8006244 <__sflush_r+0xfc>
 8006234:	89a2      	ldrh	r2, [r4, #12]
 8006236:	2340      	movs	r3, #64	@ 0x40
 8006238:	2001      	movs	r0, #1
 800623a:	4313      	orrs	r3, r2
 800623c:	b21b      	sxth	r3, r3
 800623e:	81a3      	strh	r3, [r4, #12]
 8006240:	4240      	negs	r0, r0
 8006242:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006244:	9b01      	ldr	r3, [sp, #4]
 8006246:	1836      	adds	r6, r6, r0
 8006248:	1a1b      	subs	r3, r3, r0
 800624a:	9301      	str	r3, [sp, #4]
 800624c:	e7e6      	b.n	800621c <__sflush_r+0xd4>
 800624e:	46c0      	nop			@ (mov r8, r8)
 8006250:	dfbffffe 	.word	0xdfbffffe

08006254 <_fflush_r>:
 8006254:	690b      	ldr	r3, [r1, #16]
 8006256:	b570      	push	{r4, r5, r6, lr}
 8006258:	0005      	movs	r5, r0
 800625a:	000c      	movs	r4, r1
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <_fflush_r+0x12>
 8006260:	2500      	movs	r5, #0
 8006262:	0028      	movs	r0, r5
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	2800      	cmp	r0, #0
 8006268:	d004      	beq.n	8006274 <_fflush_r+0x20>
 800626a:	6a03      	ldr	r3, [r0, #32]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d101      	bne.n	8006274 <_fflush_r+0x20>
 8006270:	f7fe fca8 	bl	8004bc4 <__sinit>
 8006274:	220c      	movs	r2, #12
 8006276:	5ea3      	ldrsh	r3, [r4, r2]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f1      	beq.n	8006260 <_fflush_r+0xc>
 800627c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800627e:	07d2      	lsls	r2, r2, #31
 8006280:	d404      	bmi.n	800628c <_fflush_r+0x38>
 8006282:	059b      	lsls	r3, r3, #22
 8006284:	d402      	bmi.n	800628c <_fflush_r+0x38>
 8006286:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006288:	f7fe ff21 	bl	80050ce <__retarget_lock_acquire_recursive>
 800628c:	0028      	movs	r0, r5
 800628e:	0021      	movs	r1, r4
 8006290:	f7ff ff5a 	bl	8006148 <__sflush_r>
 8006294:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006296:	0005      	movs	r5, r0
 8006298:	07db      	lsls	r3, r3, #31
 800629a:	d4e2      	bmi.n	8006262 <_fflush_r+0xe>
 800629c:	89a3      	ldrh	r3, [r4, #12]
 800629e:	059b      	lsls	r3, r3, #22
 80062a0:	d4df      	bmi.n	8006262 <_fflush_r+0xe>
 80062a2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80062a4:	f7fe ff14 	bl	80050d0 <__retarget_lock_release_recursive>
 80062a8:	e7db      	b.n	8006262 <_fflush_r+0xe>
	...

080062ac <__swhatbuf_r>:
 80062ac:	b570      	push	{r4, r5, r6, lr}
 80062ae:	000e      	movs	r6, r1
 80062b0:	001d      	movs	r5, r3
 80062b2:	230e      	movs	r3, #14
 80062b4:	5ec9      	ldrsh	r1, [r1, r3]
 80062b6:	0014      	movs	r4, r2
 80062b8:	b096      	sub	sp, #88	@ 0x58
 80062ba:	2900      	cmp	r1, #0
 80062bc:	da0c      	bge.n	80062d8 <__swhatbuf_r+0x2c>
 80062be:	89b2      	ldrh	r2, [r6, #12]
 80062c0:	2380      	movs	r3, #128	@ 0x80
 80062c2:	0011      	movs	r1, r2
 80062c4:	4019      	ands	r1, r3
 80062c6:	421a      	tst	r2, r3
 80062c8:	d114      	bne.n	80062f4 <__swhatbuf_r+0x48>
 80062ca:	2380      	movs	r3, #128	@ 0x80
 80062cc:	00db      	lsls	r3, r3, #3
 80062ce:	2000      	movs	r0, #0
 80062d0:	6029      	str	r1, [r5, #0]
 80062d2:	6023      	str	r3, [r4, #0]
 80062d4:	b016      	add	sp, #88	@ 0x58
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	466a      	mov	r2, sp
 80062da:	f000 f8dd 	bl	8006498 <_fstat_r>
 80062de:	2800      	cmp	r0, #0
 80062e0:	dbed      	blt.n	80062be <__swhatbuf_r+0x12>
 80062e2:	23f0      	movs	r3, #240	@ 0xf0
 80062e4:	9901      	ldr	r1, [sp, #4]
 80062e6:	021b      	lsls	r3, r3, #8
 80062e8:	4019      	ands	r1, r3
 80062ea:	4b04      	ldr	r3, [pc, #16]	@ (80062fc <__swhatbuf_r+0x50>)
 80062ec:	18c9      	adds	r1, r1, r3
 80062ee:	424b      	negs	r3, r1
 80062f0:	4159      	adcs	r1, r3
 80062f2:	e7ea      	b.n	80062ca <__swhatbuf_r+0x1e>
 80062f4:	2100      	movs	r1, #0
 80062f6:	2340      	movs	r3, #64	@ 0x40
 80062f8:	e7e9      	b.n	80062ce <__swhatbuf_r+0x22>
 80062fa:	46c0      	nop			@ (mov r8, r8)
 80062fc:	ffffe000 	.word	0xffffe000

08006300 <__smakebuf_r>:
 8006300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006302:	2602      	movs	r6, #2
 8006304:	898b      	ldrh	r3, [r1, #12]
 8006306:	0005      	movs	r5, r0
 8006308:	000c      	movs	r4, r1
 800630a:	b085      	sub	sp, #20
 800630c:	4233      	tst	r3, r6
 800630e:	d007      	beq.n	8006320 <__smakebuf_r+0x20>
 8006310:	0023      	movs	r3, r4
 8006312:	3347      	adds	r3, #71	@ 0x47
 8006314:	6023      	str	r3, [r4, #0]
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	2301      	movs	r3, #1
 800631a:	6163      	str	r3, [r4, #20]
 800631c:	b005      	add	sp, #20
 800631e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006320:	ab03      	add	r3, sp, #12
 8006322:	aa02      	add	r2, sp, #8
 8006324:	f7ff ffc2 	bl	80062ac <__swhatbuf_r>
 8006328:	9f02      	ldr	r7, [sp, #8]
 800632a:	9001      	str	r0, [sp, #4]
 800632c:	0039      	movs	r1, r7
 800632e:	0028      	movs	r0, r5
 8006330:	f7fe ff3c 	bl	80051ac <_malloc_r>
 8006334:	2800      	cmp	r0, #0
 8006336:	d108      	bne.n	800634a <__smakebuf_r+0x4a>
 8006338:	220c      	movs	r2, #12
 800633a:	5ea3      	ldrsh	r3, [r4, r2]
 800633c:	059a      	lsls	r2, r3, #22
 800633e:	d4ed      	bmi.n	800631c <__smakebuf_r+0x1c>
 8006340:	2203      	movs	r2, #3
 8006342:	4393      	bics	r3, r2
 8006344:	431e      	orrs	r6, r3
 8006346:	81a6      	strh	r6, [r4, #12]
 8006348:	e7e2      	b.n	8006310 <__smakebuf_r+0x10>
 800634a:	2380      	movs	r3, #128	@ 0x80
 800634c:	89a2      	ldrh	r2, [r4, #12]
 800634e:	6020      	str	r0, [r4, #0]
 8006350:	4313      	orrs	r3, r2
 8006352:	81a3      	strh	r3, [r4, #12]
 8006354:	9b03      	ldr	r3, [sp, #12]
 8006356:	6120      	str	r0, [r4, #16]
 8006358:	6167      	str	r7, [r4, #20]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d00c      	beq.n	8006378 <__smakebuf_r+0x78>
 800635e:	0028      	movs	r0, r5
 8006360:	230e      	movs	r3, #14
 8006362:	5ee1      	ldrsh	r1, [r4, r3]
 8006364:	f000 f8aa 	bl	80064bc <_isatty_r>
 8006368:	2800      	cmp	r0, #0
 800636a:	d005      	beq.n	8006378 <__smakebuf_r+0x78>
 800636c:	2303      	movs	r3, #3
 800636e:	89a2      	ldrh	r2, [r4, #12]
 8006370:	439a      	bics	r2, r3
 8006372:	3b02      	subs	r3, #2
 8006374:	4313      	orrs	r3, r2
 8006376:	81a3      	strh	r3, [r4, #12]
 8006378:	89a3      	ldrh	r3, [r4, #12]
 800637a:	9a01      	ldr	r2, [sp, #4]
 800637c:	4313      	orrs	r3, r2
 800637e:	81a3      	strh	r3, [r4, #12]
 8006380:	e7cc      	b.n	800631c <__smakebuf_r+0x1c>

08006382 <__sccl>:
 8006382:	b570      	push	{r4, r5, r6, lr}
 8006384:	780b      	ldrb	r3, [r1, #0]
 8006386:	0004      	movs	r4, r0
 8006388:	2b5e      	cmp	r3, #94	@ 0x5e
 800638a:	d018      	beq.n	80063be <__sccl+0x3c>
 800638c:	2200      	movs	r2, #0
 800638e:	1c4d      	adds	r5, r1, #1
 8006390:	0021      	movs	r1, r4
 8006392:	1c60      	adds	r0, r4, #1
 8006394:	30ff      	adds	r0, #255	@ 0xff
 8006396:	700a      	strb	r2, [r1, #0]
 8006398:	3101      	adds	r1, #1
 800639a:	4281      	cmp	r1, r0
 800639c:	d1fb      	bne.n	8006396 <__sccl+0x14>
 800639e:	1e68      	subs	r0, r5, #1
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d00b      	beq.n	80063bc <__sccl+0x3a>
 80063a4:	2101      	movs	r1, #1
 80063a6:	404a      	eors	r2, r1
 80063a8:	0028      	movs	r0, r5
 80063aa:	54e2      	strb	r2, [r4, r3]
 80063ac:	7801      	ldrb	r1, [r0, #0]
 80063ae:	1c45      	adds	r5, r0, #1
 80063b0:	292d      	cmp	r1, #45	@ 0x2d
 80063b2:	d00a      	beq.n	80063ca <__sccl+0x48>
 80063b4:	295d      	cmp	r1, #93	@ 0x5d
 80063b6:	d01b      	beq.n	80063f0 <__sccl+0x6e>
 80063b8:	2900      	cmp	r1, #0
 80063ba:	d104      	bne.n	80063c6 <__sccl+0x44>
 80063bc:	bd70      	pop	{r4, r5, r6, pc}
 80063be:	2201      	movs	r2, #1
 80063c0:	784b      	ldrb	r3, [r1, #1]
 80063c2:	1c8d      	adds	r5, r1, #2
 80063c4:	e7e4      	b.n	8006390 <__sccl+0xe>
 80063c6:	000b      	movs	r3, r1
 80063c8:	e7ee      	b.n	80063a8 <__sccl+0x26>
 80063ca:	7846      	ldrb	r6, [r0, #1]
 80063cc:	2e5d      	cmp	r6, #93	@ 0x5d
 80063ce:	d0fa      	beq.n	80063c6 <__sccl+0x44>
 80063d0:	42b3      	cmp	r3, r6
 80063d2:	dcf8      	bgt.n	80063c6 <__sccl+0x44>
 80063d4:	0019      	movs	r1, r3
 80063d6:	3002      	adds	r0, #2
 80063d8:	3101      	adds	r1, #1
 80063da:	5462      	strb	r2, [r4, r1]
 80063dc:	428e      	cmp	r6, r1
 80063de:	dcfb      	bgt.n	80063d8 <__sccl+0x56>
 80063e0:	2100      	movs	r1, #0
 80063e2:	1c5d      	adds	r5, r3, #1
 80063e4:	42b3      	cmp	r3, r6
 80063e6:	da01      	bge.n	80063ec <__sccl+0x6a>
 80063e8:	1af1      	subs	r1, r6, r3
 80063ea:	3901      	subs	r1, #1
 80063ec:	186b      	adds	r3, r5, r1
 80063ee:	e7dd      	b.n	80063ac <__sccl+0x2a>
 80063f0:	0028      	movs	r0, r5
 80063f2:	e7e3      	b.n	80063bc <__sccl+0x3a>

080063f4 <__submore>:
 80063f4:	000b      	movs	r3, r1
 80063f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063f8:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 80063fa:	3344      	adds	r3, #68	@ 0x44
 80063fc:	000c      	movs	r4, r1
 80063fe:	429d      	cmp	r5, r3
 8006400:	d11c      	bne.n	800643c <__submore+0x48>
 8006402:	2680      	movs	r6, #128	@ 0x80
 8006404:	00f6      	lsls	r6, r6, #3
 8006406:	0031      	movs	r1, r6
 8006408:	f7fe fed0 	bl	80051ac <_malloc_r>
 800640c:	2800      	cmp	r0, #0
 800640e:	d102      	bne.n	8006416 <__submore+0x22>
 8006410:	2001      	movs	r0, #1
 8006412:	4240      	negs	r0, r0
 8006414:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006416:	0023      	movs	r3, r4
 8006418:	6360      	str	r0, [r4, #52]	@ 0x34
 800641a:	63a6      	str	r6, [r4, #56]	@ 0x38
 800641c:	3346      	adds	r3, #70	@ 0x46
 800641e:	781a      	ldrb	r2, [r3, #0]
 8006420:	4b10      	ldr	r3, [pc, #64]	@ (8006464 <__submore+0x70>)
 8006422:	54c2      	strb	r2, [r0, r3]
 8006424:	0023      	movs	r3, r4
 8006426:	3345      	adds	r3, #69	@ 0x45
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	4b0f      	ldr	r3, [pc, #60]	@ (8006468 <__submore+0x74>)
 800642c:	54c2      	strb	r2, [r0, r3]
 800642e:	782a      	ldrb	r2, [r5, #0]
 8006430:	4b0e      	ldr	r3, [pc, #56]	@ (800646c <__submore+0x78>)
 8006432:	54c2      	strb	r2, [r0, r3]
 8006434:	18c0      	adds	r0, r0, r3
 8006436:	6020      	str	r0, [r4, #0]
 8006438:	2000      	movs	r0, #0
 800643a:	e7eb      	b.n	8006414 <__submore+0x20>
 800643c:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 800643e:	0029      	movs	r1, r5
 8006440:	0073      	lsls	r3, r6, #1
 8006442:	001a      	movs	r2, r3
 8006444:	9301      	str	r3, [sp, #4]
 8006446:	f000 f871 	bl	800652c <_realloc_r>
 800644a:	1e05      	subs	r5, r0, #0
 800644c:	d0e0      	beq.n	8006410 <__submore+0x1c>
 800644e:	1987      	adds	r7, r0, r6
 8006450:	0001      	movs	r1, r0
 8006452:	0032      	movs	r2, r6
 8006454:	0038      	movs	r0, r7
 8006456:	f000 f860 	bl	800651a <memcpy>
 800645a:	9b01      	ldr	r3, [sp, #4]
 800645c:	6027      	str	r7, [r4, #0]
 800645e:	6365      	str	r5, [r4, #52]	@ 0x34
 8006460:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006462:	e7e9      	b.n	8006438 <__submore+0x44>
 8006464:	000003ff 	.word	0x000003ff
 8006468:	000003fe 	.word	0x000003fe
 800646c:	000003fd 	.word	0x000003fd

08006470 <memmove>:
 8006470:	b510      	push	{r4, lr}
 8006472:	4288      	cmp	r0, r1
 8006474:	d806      	bhi.n	8006484 <memmove+0x14>
 8006476:	2300      	movs	r3, #0
 8006478:	429a      	cmp	r2, r3
 800647a:	d008      	beq.n	800648e <memmove+0x1e>
 800647c:	5ccc      	ldrb	r4, [r1, r3]
 800647e:	54c4      	strb	r4, [r0, r3]
 8006480:	3301      	adds	r3, #1
 8006482:	e7f9      	b.n	8006478 <memmove+0x8>
 8006484:	188b      	adds	r3, r1, r2
 8006486:	4298      	cmp	r0, r3
 8006488:	d2f5      	bcs.n	8006476 <memmove+0x6>
 800648a:	3a01      	subs	r2, #1
 800648c:	d200      	bcs.n	8006490 <memmove+0x20>
 800648e:	bd10      	pop	{r4, pc}
 8006490:	5c8b      	ldrb	r3, [r1, r2]
 8006492:	5483      	strb	r3, [r0, r2]
 8006494:	e7f9      	b.n	800648a <memmove+0x1a>
	...

08006498 <_fstat_r>:
 8006498:	2300      	movs	r3, #0
 800649a:	b570      	push	{r4, r5, r6, lr}
 800649c:	4d06      	ldr	r5, [pc, #24]	@ (80064b8 <_fstat_r+0x20>)
 800649e:	0004      	movs	r4, r0
 80064a0:	0008      	movs	r0, r1
 80064a2:	0011      	movs	r1, r2
 80064a4:	602b      	str	r3, [r5, #0]
 80064a6:	f7fa fe22 	bl	80010ee <_fstat>
 80064aa:	1c43      	adds	r3, r0, #1
 80064ac:	d103      	bne.n	80064b6 <_fstat_r+0x1e>
 80064ae:	682b      	ldr	r3, [r5, #0]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d000      	beq.n	80064b6 <_fstat_r+0x1e>
 80064b4:	6023      	str	r3, [r4, #0]
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
 80064b8:	20000388 	.word	0x20000388

080064bc <_isatty_r>:
 80064bc:	2300      	movs	r3, #0
 80064be:	b570      	push	{r4, r5, r6, lr}
 80064c0:	4d06      	ldr	r5, [pc, #24]	@ (80064dc <_isatty_r+0x20>)
 80064c2:	0004      	movs	r4, r0
 80064c4:	0008      	movs	r0, r1
 80064c6:	602b      	str	r3, [r5, #0]
 80064c8:	f7fa fe1f 	bl	800110a <_isatty>
 80064cc:	1c43      	adds	r3, r0, #1
 80064ce:	d103      	bne.n	80064d8 <_isatty_r+0x1c>
 80064d0:	682b      	ldr	r3, [r5, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d000      	beq.n	80064d8 <_isatty_r+0x1c>
 80064d6:	6023      	str	r3, [r4, #0]
 80064d8:	bd70      	pop	{r4, r5, r6, pc}
 80064da:	46c0      	nop			@ (mov r8, r8)
 80064dc:	20000388 	.word	0x20000388

080064e0 <_sbrk_r>:
 80064e0:	2300      	movs	r3, #0
 80064e2:	b570      	push	{r4, r5, r6, lr}
 80064e4:	4d06      	ldr	r5, [pc, #24]	@ (8006500 <_sbrk_r+0x20>)
 80064e6:	0004      	movs	r4, r0
 80064e8:	0008      	movs	r0, r1
 80064ea:	602b      	str	r3, [r5, #0]
 80064ec:	f7fa fe22 	bl	8001134 <_sbrk>
 80064f0:	1c43      	adds	r3, r0, #1
 80064f2:	d103      	bne.n	80064fc <_sbrk_r+0x1c>
 80064f4:	682b      	ldr	r3, [r5, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d000      	beq.n	80064fc <_sbrk_r+0x1c>
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	bd70      	pop	{r4, r5, r6, pc}
 80064fe:	46c0      	nop			@ (mov r8, r8)
 8006500:	20000388 	.word	0x20000388

08006504 <memchr>:
 8006504:	b2c9      	uxtb	r1, r1
 8006506:	1882      	adds	r2, r0, r2
 8006508:	4290      	cmp	r0, r2
 800650a:	d101      	bne.n	8006510 <memchr+0xc>
 800650c:	2000      	movs	r0, #0
 800650e:	4770      	bx	lr
 8006510:	7803      	ldrb	r3, [r0, #0]
 8006512:	428b      	cmp	r3, r1
 8006514:	d0fb      	beq.n	800650e <memchr+0xa>
 8006516:	3001      	adds	r0, #1
 8006518:	e7f6      	b.n	8006508 <memchr+0x4>

0800651a <memcpy>:
 800651a:	2300      	movs	r3, #0
 800651c:	b510      	push	{r4, lr}
 800651e:	429a      	cmp	r2, r3
 8006520:	d100      	bne.n	8006524 <memcpy+0xa>
 8006522:	bd10      	pop	{r4, pc}
 8006524:	5ccc      	ldrb	r4, [r1, r3]
 8006526:	54c4      	strb	r4, [r0, r3]
 8006528:	3301      	adds	r3, #1
 800652a:	e7f8      	b.n	800651e <memcpy+0x4>

0800652c <_realloc_r>:
 800652c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800652e:	0006      	movs	r6, r0
 8006530:	000c      	movs	r4, r1
 8006532:	0015      	movs	r5, r2
 8006534:	2900      	cmp	r1, #0
 8006536:	d105      	bne.n	8006544 <_realloc_r+0x18>
 8006538:	0011      	movs	r1, r2
 800653a:	f7fe fe37 	bl	80051ac <_malloc_r>
 800653e:	0004      	movs	r4, r0
 8006540:	0020      	movs	r0, r4
 8006542:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006544:	2a00      	cmp	r2, #0
 8006546:	d103      	bne.n	8006550 <_realloc_r+0x24>
 8006548:	f7fe fdc4 	bl	80050d4 <_free_r>
 800654c:	2400      	movs	r4, #0
 800654e:	e7f7      	b.n	8006540 <_realloc_r+0x14>
 8006550:	f000 f930 	bl	80067b4 <_malloc_usable_size_r>
 8006554:	0007      	movs	r7, r0
 8006556:	4285      	cmp	r5, r0
 8006558:	d802      	bhi.n	8006560 <_realloc_r+0x34>
 800655a:	0843      	lsrs	r3, r0, #1
 800655c:	42ab      	cmp	r3, r5
 800655e:	d3ef      	bcc.n	8006540 <_realloc_r+0x14>
 8006560:	0029      	movs	r1, r5
 8006562:	0030      	movs	r0, r6
 8006564:	f7fe fe22 	bl	80051ac <_malloc_r>
 8006568:	9001      	str	r0, [sp, #4]
 800656a:	2800      	cmp	r0, #0
 800656c:	d0ee      	beq.n	800654c <_realloc_r+0x20>
 800656e:	002a      	movs	r2, r5
 8006570:	42bd      	cmp	r5, r7
 8006572:	d900      	bls.n	8006576 <_realloc_r+0x4a>
 8006574:	003a      	movs	r2, r7
 8006576:	0021      	movs	r1, r4
 8006578:	9801      	ldr	r0, [sp, #4]
 800657a:	f7ff ffce 	bl	800651a <memcpy>
 800657e:	0021      	movs	r1, r4
 8006580:	0030      	movs	r0, r6
 8006582:	f7fe fda7 	bl	80050d4 <_free_r>
 8006586:	9c01      	ldr	r4, [sp, #4]
 8006588:	e7da      	b.n	8006540 <_realloc_r+0x14>
	...

0800658c <_strtol_l.constprop.0>:
 800658c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800658e:	b085      	sub	sp, #20
 8006590:	0017      	movs	r7, r2
 8006592:	001e      	movs	r6, r3
 8006594:	9003      	str	r0, [sp, #12]
 8006596:	9101      	str	r1, [sp, #4]
 8006598:	2b24      	cmp	r3, #36	@ 0x24
 800659a:	d844      	bhi.n	8006626 <_strtol_l.constprop.0+0x9a>
 800659c:	000c      	movs	r4, r1
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d041      	beq.n	8006626 <_strtol_l.constprop.0+0x9a>
 80065a2:	4b3d      	ldr	r3, [pc, #244]	@ (8006698 <_strtol_l.constprop.0+0x10c>)
 80065a4:	2208      	movs	r2, #8
 80065a6:	469c      	mov	ip, r3
 80065a8:	0023      	movs	r3, r4
 80065aa:	4661      	mov	r1, ip
 80065ac:	781d      	ldrb	r5, [r3, #0]
 80065ae:	3401      	adds	r4, #1
 80065b0:	5d48      	ldrb	r0, [r1, r5]
 80065b2:	0001      	movs	r1, r0
 80065b4:	4011      	ands	r1, r2
 80065b6:	4210      	tst	r0, r2
 80065b8:	d1f6      	bne.n	80065a8 <_strtol_l.constprop.0+0x1c>
 80065ba:	2d2d      	cmp	r5, #45	@ 0x2d
 80065bc:	d13a      	bne.n	8006634 <_strtol_l.constprop.0+0xa8>
 80065be:	7825      	ldrb	r5, [r4, #0]
 80065c0:	1c9c      	adds	r4, r3, #2
 80065c2:	2301      	movs	r3, #1
 80065c4:	9300      	str	r3, [sp, #0]
 80065c6:	2210      	movs	r2, #16
 80065c8:	0033      	movs	r3, r6
 80065ca:	4393      	bics	r3, r2
 80065cc:	d109      	bne.n	80065e2 <_strtol_l.constprop.0+0x56>
 80065ce:	2d30      	cmp	r5, #48	@ 0x30
 80065d0:	d136      	bne.n	8006640 <_strtol_l.constprop.0+0xb4>
 80065d2:	2120      	movs	r1, #32
 80065d4:	7823      	ldrb	r3, [r4, #0]
 80065d6:	438b      	bics	r3, r1
 80065d8:	2b58      	cmp	r3, #88	@ 0x58
 80065da:	d131      	bne.n	8006640 <_strtol_l.constprop.0+0xb4>
 80065dc:	0016      	movs	r6, r2
 80065de:	7865      	ldrb	r5, [r4, #1]
 80065e0:	3402      	adds	r4, #2
 80065e2:	4a2e      	ldr	r2, [pc, #184]	@ (800669c <_strtol_l.constprop.0+0x110>)
 80065e4:	9b00      	ldr	r3, [sp, #0]
 80065e6:	4694      	mov	ip, r2
 80065e8:	4463      	add	r3, ip
 80065ea:	0031      	movs	r1, r6
 80065ec:	0018      	movs	r0, r3
 80065ee:	9302      	str	r3, [sp, #8]
 80065f0:	f7f9 fe22 	bl	8000238 <__aeabi_uidivmod>
 80065f4:	2200      	movs	r2, #0
 80065f6:	4684      	mov	ip, r0
 80065f8:	0010      	movs	r0, r2
 80065fa:	002b      	movs	r3, r5
 80065fc:	3b30      	subs	r3, #48	@ 0x30
 80065fe:	2b09      	cmp	r3, #9
 8006600:	d825      	bhi.n	800664e <_strtol_l.constprop.0+0xc2>
 8006602:	001d      	movs	r5, r3
 8006604:	42ae      	cmp	r6, r5
 8006606:	dd31      	ble.n	800666c <_strtol_l.constprop.0+0xe0>
 8006608:	1c53      	adds	r3, r2, #1
 800660a:	d009      	beq.n	8006620 <_strtol_l.constprop.0+0x94>
 800660c:	2201      	movs	r2, #1
 800660e:	4252      	negs	r2, r2
 8006610:	4584      	cmp	ip, r0
 8006612:	d305      	bcc.n	8006620 <_strtol_l.constprop.0+0x94>
 8006614:	d101      	bne.n	800661a <_strtol_l.constprop.0+0x8e>
 8006616:	42a9      	cmp	r1, r5
 8006618:	db25      	blt.n	8006666 <_strtol_l.constprop.0+0xda>
 800661a:	2201      	movs	r2, #1
 800661c:	4370      	muls	r0, r6
 800661e:	1828      	adds	r0, r5, r0
 8006620:	7825      	ldrb	r5, [r4, #0]
 8006622:	3401      	adds	r4, #1
 8006624:	e7e9      	b.n	80065fa <_strtol_l.constprop.0+0x6e>
 8006626:	f7fe fd27 	bl	8005078 <__errno>
 800662a:	2316      	movs	r3, #22
 800662c:	6003      	str	r3, [r0, #0]
 800662e:	2000      	movs	r0, #0
 8006630:	b005      	add	sp, #20
 8006632:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006634:	9100      	str	r1, [sp, #0]
 8006636:	2d2b      	cmp	r5, #43	@ 0x2b
 8006638:	d1c5      	bne.n	80065c6 <_strtol_l.constprop.0+0x3a>
 800663a:	7825      	ldrb	r5, [r4, #0]
 800663c:	1c9c      	adds	r4, r3, #2
 800663e:	e7c2      	b.n	80065c6 <_strtol_l.constprop.0+0x3a>
 8006640:	2e00      	cmp	r6, #0
 8006642:	d1ce      	bne.n	80065e2 <_strtol_l.constprop.0+0x56>
 8006644:	3608      	adds	r6, #8
 8006646:	2d30      	cmp	r5, #48	@ 0x30
 8006648:	d0cb      	beq.n	80065e2 <_strtol_l.constprop.0+0x56>
 800664a:	3602      	adds	r6, #2
 800664c:	e7c9      	b.n	80065e2 <_strtol_l.constprop.0+0x56>
 800664e:	002b      	movs	r3, r5
 8006650:	3b41      	subs	r3, #65	@ 0x41
 8006652:	2b19      	cmp	r3, #25
 8006654:	d801      	bhi.n	800665a <_strtol_l.constprop.0+0xce>
 8006656:	3d37      	subs	r5, #55	@ 0x37
 8006658:	e7d4      	b.n	8006604 <_strtol_l.constprop.0+0x78>
 800665a:	002b      	movs	r3, r5
 800665c:	3b61      	subs	r3, #97	@ 0x61
 800665e:	2b19      	cmp	r3, #25
 8006660:	d804      	bhi.n	800666c <_strtol_l.constprop.0+0xe0>
 8006662:	3d57      	subs	r5, #87	@ 0x57
 8006664:	e7ce      	b.n	8006604 <_strtol_l.constprop.0+0x78>
 8006666:	2201      	movs	r2, #1
 8006668:	4252      	negs	r2, r2
 800666a:	e7d9      	b.n	8006620 <_strtol_l.constprop.0+0x94>
 800666c:	1c53      	adds	r3, r2, #1
 800666e:	d108      	bne.n	8006682 <_strtol_l.constprop.0+0xf6>
 8006670:	2322      	movs	r3, #34	@ 0x22
 8006672:	9a03      	ldr	r2, [sp, #12]
 8006674:	9802      	ldr	r0, [sp, #8]
 8006676:	6013      	str	r3, [r2, #0]
 8006678:	2f00      	cmp	r7, #0
 800667a:	d0d9      	beq.n	8006630 <_strtol_l.constprop.0+0xa4>
 800667c:	1e63      	subs	r3, r4, #1
 800667e:	9301      	str	r3, [sp, #4]
 8006680:	e007      	b.n	8006692 <_strtol_l.constprop.0+0x106>
 8006682:	9b00      	ldr	r3, [sp, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d000      	beq.n	800668a <_strtol_l.constprop.0+0xfe>
 8006688:	4240      	negs	r0, r0
 800668a:	2f00      	cmp	r7, #0
 800668c:	d0d0      	beq.n	8006630 <_strtol_l.constprop.0+0xa4>
 800668e:	2a00      	cmp	r2, #0
 8006690:	d1f4      	bne.n	800667c <_strtol_l.constprop.0+0xf0>
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	603b      	str	r3, [r7, #0]
 8006696:	e7cb      	b.n	8006630 <_strtol_l.constprop.0+0xa4>
 8006698:	08006c0f 	.word	0x08006c0f
 800669c:	7fffffff 	.word	0x7fffffff

080066a0 <_strtol_r>:
 80066a0:	b510      	push	{r4, lr}
 80066a2:	f7ff ff73 	bl	800658c <_strtol_l.constprop.0>
 80066a6:	bd10      	pop	{r4, pc}

080066a8 <_strtoul_l.constprop.0>:
 80066a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066aa:	001e      	movs	r6, r3
 80066ac:	4b3e      	ldr	r3, [pc, #248]	@ (80067a8 <_strtoul_l.constprop.0+0x100>)
 80066ae:	0017      	movs	r7, r2
 80066b0:	000c      	movs	r4, r1
 80066b2:	469c      	mov	ip, r3
 80066b4:	2208      	movs	r2, #8
 80066b6:	b085      	sub	sp, #20
 80066b8:	9003      	str	r0, [sp, #12]
 80066ba:	9100      	str	r1, [sp, #0]
 80066bc:	0023      	movs	r3, r4
 80066be:	4661      	mov	r1, ip
 80066c0:	781d      	ldrb	r5, [r3, #0]
 80066c2:	3401      	adds	r4, #1
 80066c4:	5d48      	ldrb	r0, [r1, r5]
 80066c6:	0001      	movs	r1, r0
 80066c8:	4011      	ands	r1, r2
 80066ca:	4210      	tst	r0, r2
 80066cc:	d1f6      	bne.n	80066bc <_strtoul_l.constprop.0+0x14>
 80066ce:	2d2d      	cmp	r5, #45	@ 0x2d
 80066d0:	d137      	bne.n	8006742 <_strtoul_l.constprop.0+0x9a>
 80066d2:	7825      	ldrb	r5, [r4, #0]
 80066d4:	1c9c      	adds	r4, r3, #2
 80066d6:	2301      	movs	r3, #1
 80066d8:	9302      	str	r3, [sp, #8]
 80066da:	2210      	movs	r2, #16
 80066dc:	0033      	movs	r3, r6
 80066de:	4393      	bics	r3, r2
 80066e0:	d109      	bne.n	80066f6 <_strtoul_l.constprop.0+0x4e>
 80066e2:	2d30      	cmp	r5, #48	@ 0x30
 80066e4:	d133      	bne.n	800674e <_strtoul_l.constprop.0+0xa6>
 80066e6:	2120      	movs	r1, #32
 80066e8:	7823      	ldrb	r3, [r4, #0]
 80066ea:	438b      	bics	r3, r1
 80066ec:	2b58      	cmp	r3, #88	@ 0x58
 80066ee:	d12e      	bne.n	800674e <_strtoul_l.constprop.0+0xa6>
 80066f0:	0016      	movs	r6, r2
 80066f2:	7865      	ldrb	r5, [r4, #1]
 80066f4:	3402      	adds	r4, #2
 80066f6:	2001      	movs	r0, #1
 80066f8:	0031      	movs	r1, r6
 80066fa:	4240      	negs	r0, r0
 80066fc:	f7f9 fd16 	bl	800012c <__udivsi3>
 8006700:	9001      	str	r0, [sp, #4]
 8006702:	2001      	movs	r0, #1
 8006704:	0031      	movs	r1, r6
 8006706:	4240      	negs	r0, r0
 8006708:	f7f9 fd96 	bl	8000238 <__aeabi_uidivmod>
 800670c:	2300      	movs	r3, #0
 800670e:	2201      	movs	r2, #1
 8006710:	0018      	movs	r0, r3
 8006712:	4694      	mov	ip, r2
 8006714:	002a      	movs	r2, r5
 8006716:	3a30      	subs	r2, #48	@ 0x30
 8006718:	2a09      	cmp	r2, #9
 800671a:	d81f      	bhi.n	800675c <_strtoul_l.constprop.0+0xb4>
 800671c:	0015      	movs	r5, r2
 800671e:	42ae      	cmp	r6, r5
 8006720:	dd2b      	ble.n	800677a <_strtoul_l.constprop.0+0xd2>
 8006722:	1c5a      	adds	r2, r3, #1
 8006724:	d00a      	beq.n	800673c <_strtoul_l.constprop.0+0x94>
 8006726:	2301      	movs	r3, #1
 8006728:	9a01      	ldr	r2, [sp, #4]
 800672a:	425b      	negs	r3, r3
 800672c:	4282      	cmp	r2, r0
 800672e:	d305      	bcc.n	800673c <_strtoul_l.constprop.0+0x94>
 8006730:	d101      	bne.n	8006736 <_strtoul_l.constprop.0+0x8e>
 8006732:	42a9      	cmp	r1, r5
 8006734:	db1e      	blt.n	8006774 <_strtoul_l.constprop.0+0xcc>
 8006736:	4663      	mov	r3, ip
 8006738:	4370      	muls	r0, r6
 800673a:	1828      	adds	r0, r5, r0
 800673c:	7825      	ldrb	r5, [r4, #0]
 800673e:	3401      	adds	r4, #1
 8006740:	e7e8      	b.n	8006714 <_strtoul_l.constprop.0+0x6c>
 8006742:	9102      	str	r1, [sp, #8]
 8006744:	2d2b      	cmp	r5, #43	@ 0x2b
 8006746:	d1c8      	bne.n	80066da <_strtoul_l.constprop.0+0x32>
 8006748:	7825      	ldrb	r5, [r4, #0]
 800674a:	1c9c      	adds	r4, r3, #2
 800674c:	e7c5      	b.n	80066da <_strtoul_l.constprop.0+0x32>
 800674e:	2e00      	cmp	r6, #0
 8006750:	d1d1      	bne.n	80066f6 <_strtoul_l.constprop.0+0x4e>
 8006752:	3608      	adds	r6, #8
 8006754:	2d30      	cmp	r5, #48	@ 0x30
 8006756:	d0ce      	beq.n	80066f6 <_strtoul_l.constprop.0+0x4e>
 8006758:	3602      	adds	r6, #2
 800675a:	e7cc      	b.n	80066f6 <_strtoul_l.constprop.0+0x4e>
 800675c:	002a      	movs	r2, r5
 800675e:	3a41      	subs	r2, #65	@ 0x41
 8006760:	2a19      	cmp	r2, #25
 8006762:	d801      	bhi.n	8006768 <_strtoul_l.constprop.0+0xc0>
 8006764:	3d37      	subs	r5, #55	@ 0x37
 8006766:	e7da      	b.n	800671e <_strtoul_l.constprop.0+0x76>
 8006768:	002a      	movs	r2, r5
 800676a:	3a61      	subs	r2, #97	@ 0x61
 800676c:	2a19      	cmp	r2, #25
 800676e:	d804      	bhi.n	800677a <_strtoul_l.constprop.0+0xd2>
 8006770:	3d57      	subs	r5, #87	@ 0x57
 8006772:	e7d4      	b.n	800671e <_strtoul_l.constprop.0+0x76>
 8006774:	2301      	movs	r3, #1
 8006776:	425b      	negs	r3, r3
 8006778:	e7e0      	b.n	800673c <_strtoul_l.constprop.0+0x94>
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	d107      	bne.n	800678e <_strtoul_l.constprop.0+0xe6>
 800677e:	2222      	movs	r2, #34	@ 0x22
 8006780:	9903      	ldr	r1, [sp, #12]
 8006782:	0018      	movs	r0, r3
 8006784:	600a      	str	r2, [r1, #0]
 8006786:	2f00      	cmp	r7, #0
 8006788:	d109      	bne.n	800679e <_strtoul_l.constprop.0+0xf6>
 800678a:	b005      	add	sp, #20
 800678c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800678e:	9a02      	ldr	r2, [sp, #8]
 8006790:	2a00      	cmp	r2, #0
 8006792:	d000      	beq.n	8006796 <_strtoul_l.constprop.0+0xee>
 8006794:	4240      	negs	r0, r0
 8006796:	2f00      	cmp	r7, #0
 8006798:	d0f7      	beq.n	800678a <_strtoul_l.constprop.0+0xe2>
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <_strtoul_l.constprop.0+0xfa>
 800679e:	1e63      	subs	r3, r4, #1
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	9b00      	ldr	r3, [sp, #0]
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	e7f0      	b.n	800678a <_strtoul_l.constprop.0+0xe2>
 80067a8:	08006c0f 	.word	0x08006c0f

080067ac <_strtoul_r>:
 80067ac:	b510      	push	{r4, lr}
 80067ae:	f7ff ff7b 	bl	80066a8 <_strtoul_l.constprop.0>
 80067b2:	bd10      	pop	{r4, pc}

080067b4 <_malloc_usable_size_r>:
 80067b4:	1f0b      	subs	r3, r1, #4
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	1f18      	subs	r0, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da01      	bge.n	80067c2 <_malloc_usable_size_r+0xe>
 80067be:	580b      	ldr	r3, [r1, r0]
 80067c0:	18c0      	adds	r0, r0, r3
 80067c2:	4770      	bx	lr

080067c4 <_init>:
 80067c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067c6:	46c0      	nop			@ (mov r8, r8)
 80067c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ca:	bc08      	pop	{r3}
 80067cc:	469e      	mov	lr, r3
 80067ce:	4770      	bx	lr

080067d0 <_fini>:
 80067d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d2:	46c0      	nop			@ (mov r8, r8)
 80067d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d6:	bc08      	pop	{r3}
 80067d8:	469e      	mov	lr, r3
 80067da:	4770      	bx	lr
