
QuectelBg95Stm32C0Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000051e4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000704  080052a4  080052a4  000062a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059a8  080059a8  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  080059a8  080059a8  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059a8  080059a8  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059a8  080059a8  000069a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059ac  080059ac  000069ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080059b0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000068  08005a18  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08005a18  00007294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cea1  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002141  00000000  00000000  00013f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a28  00000000  00000000  00016078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c3  00000000  00000000  00016aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014291  00000000  00000000  00017263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d47e  00000000  00000000  0002b4f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00079470  00000000  00000000  00038972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b1de2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e88  00000000  00000000  000b1e28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b4cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800528c 	.word	0x0800528c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	0800528c 	.word	0x0800528c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800024a:	f000 fd28 	bl	8000c9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800024e:	f000 f833 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000252:	f000 f94f 	bl	80004f4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000256:	f000 f875 	bl	8000344 <MX_RTC_Init>
  MX_USART2_UART_Init();
 800025a:	f000 f917 	bl	800048c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //configurando rtc apos reset
  	__HAL_RCC_PWR_CLK_ENABLE();
 800025e:	4b14      	ldr	r3, [pc, #80]	@ (80002b0 <main+0x6c>)
 8000260:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000262:	4b13      	ldr	r3, [pc, #76]	@ (80002b0 <main+0x6c>)
 8000264:	2180      	movs	r1, #128	@ 0x80
 8000266:	0549      	lsls	r1, r1, #21
 8000268:	430a      	orrs	r2, r1
 800026a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800026c:	4b10      	ldr	r3, [pc, #64]	@ (80002b0 <main+0x6c>)
 800026e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000270:	2380      	movs	r3, #128	@ 0x80
 8000272:	055b      	lsls	r3, r3, #21
 8000274:	4013      	ands	r3, r2
 8000276:	607b      	str	r3, [r7, #4]
 8000278:	687b      	ldr	r3, [r7, #4]
  	__HAL_RCC_RTC_ENABLE();
 800027a:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <main+0x6c>)
 800027c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800027e:	4b0c      	ldr	r3, [pc, #48]	@ (80002b0 <main+0x6c>)
 8000280:	2180      	movs	r1, #128	@ 0x80
 8000282:	0209      	lsls	r1, r1, #8
 8000284:	430a      	orrs	r2, r1
 8000286:	65da      	str	r2, [r3, #92]	@ 0x5c
  	InitFlags();
 8000288:	f000 fb1a 	bl	80008c0 <InitFlags>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		InitialConfigBg95();
 800028c:	f000 f96a 	bl	8000564 <InitialConfigBg95>
		ConfigPdpContext();
 8000290:	f000 fa76 	bl	8000780 <ConfigPdpContext>
		ActivePdp();
 8000294:	f000 fac6 	bl	8000824 <ActivePdp>
		ConfigMqttContext();
 8000298:	f000 faa6 	bl	80007e8 <ConfigMqttContext>
		MqttConfigBeforeConnection();
 800029c:	f000 faf2 	bl	8000884 <MqttConfigBeforeConnection>
		MqttConnectAndSubscribe();
 80002a0:	f000 fad8 	bl	8000854 <MqttConnectAndSubscribe>
		HAL_Delay(10000);
 80002a4:	4b03      	ldr	r3, [pc, #12]	@ (80002b4 <main+0x70>)
 80002a6:	0018      	movs	r0, r3
 80002a8:	f000 fd76 	bl	8000d98 <HAL_Delay>
		InitialConfigBg95();
 80002ac:	46c0      	nop			@ (mov r8, r8)
 80002ae:	e7ed      	b.n	800028c <main+0x48>
 80002b0:	40021000 	.word	0x40021000
 80002b4:	00002710 	.word	0x00002710

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b590      	push	{r4, r7, lr}
 80002ba:	b08d      	sub	sp, #52	@ 0x34
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	2414      	movs	r4, #20
 80002c0:	193b      	adds	r3, r7, r4
 80002c2:	0018      	movs	r0, r3
 80002c4:	231c      	movs	r3, #28
 80002c6:	001a      	movs	r2, r3
 80002c8:	2100      	movs	r1, #0
 80002ca:	f003 fbcd 	bl	8003a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ce:	003b      	movs	r3, r7
 80002d0:	0018      	movs	r0, r3
 80002d2:	2314      	movs	r3, #20
 80002d4:	001a      	movs	r2, r3
 80002d6:	2100      	movs	r1, #0
 80002d8:	f003 fbc6 	bl	8003a68 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002dc:	193b      	adds	r3, r7, r4
 80002de:	220a      	movs	r2, #10
 80002e0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e2:	193b      	adds	r3, r7, r4
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0052      	lsls	r2, r2, #1
 80002e8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002ea:	193b      	adds	r3, r7, r4
 80002ec:	2200      	movs	r2, #0
 80002ee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002f0:	193b      	adds	r3, r7, r4
 80002f2:	2240      	movs	r2, #64	@ 0x40
 80002f4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002f6:	193b      	adds	r3, r7, r4
 80002f8:	2201      	movs	r2, #1
 80002fa:	619a      	str	r2, [r3, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	193b      	adds	r3, r7, r4
 80002fe:	0018      	movs	r0, r3
 8000300:	f001 f8a6 	bl	8001450 <HAL_RCC_OscConfig>
 8000304:	1e03      	subs	r3, r0, #0
 8000306:	d001      	beq.n	800030c <SystemClock_Config+0x54>
  {
    Error_Handler();
 8000308:	f000 faf6 	bl	80008f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030c:	003b      	movs	r3, r7
 800030e:	2207      	movs	r2, #7
 8000310:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000312:	003b      	movs	r3, r7
 8000314:	2200      	movs	r2, #0
 8000316:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	003b      	movs	r3, r7
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800031e:	003b      	movs	r3, r7
 8000320:	2200      	movs	r2, #0
 8000322:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000324:	003b      	movs	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032a:	003b      	movs	r3, r7
 800032c:	2101      	movs	r1, #1
 800032e:	0018      	movs	r0, r3
 8000330:	f001 fa72 	bl	8001818 <HAL_RCC_ClockConfig>
 8000334:	1e03      	subs	r3, r0, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000338:	f000 fade 	bl	80008f8 <Error_Handler>
  }
}
 800033c:	46c0      	nop			@ (mov r8, r8)
 800033e:	46bd      	mov	sp, r7
 8000340:	b00d      	add	sp, #52	@ 0x34
 8000342:	bd90      	pop	{r4, r7, pc}

08000344 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	@ 0x40
 8000348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800034a:	232c      	movs	r3, #44	@ 0x2c
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	0018      	movs	r0, r3
 8000350:	2314      	movs	r3, #20
 8000352:	001a      	movs	r2, r3
 8000354:	2100      	movs	r1, #0
 8000356:	f003 fb87 	bl	8003a68 <memset>
  RTC_DateTypeDef sDate = {0};
 800035a:	2328      	movs	r3, #40	@ 0x28
 800035c:	18fb      	adds	r3, r7, r3
 800035e:	2200      	movs	r2, #0
 8000360:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000362:	003b      	movs	r3, r7
 8000364:	0018      	movs	r0, r3
 8000366:	2328      	movs	r3, #40	@ 0x28
 8000368:	001a      	movs	r2, r3
 800036a:	2100      	movs	r1, #0
 800036c:	f003 fb7c 	bl	8003a68 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000370:	4b44      	ldr	r3, [pc, #272]	@ (8000484 <MX_RTC_Init+0x140>)
 8000372:	4a45      	ldr	r2, [pc, #276]	@ (8000488 <MX_RTC_Init+0x144>)
 8000374:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000376:	4b43      	ldr	r3, [pc, #268]	@ (8000484 <MX_RTC_Init+0x140>)
 8000378:	2200      	movs	r2, #0
 800037a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800037c:	4b41      	ldr	r3, [pc, #260]	@ (8000484 <MX_RTC_Init+0x140>)
 800037e:	227f      	movs	r2, #127	@ 0x7f
 8000380:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000382:	4b40      	ldr	r3, [pc, #256]	@ (8000484 <MX_RTC_Init+0x140>)
 8000384:	22ff      	movs	r2, #255	@ 0xff
 8000386:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000388:	4b3e      	ldr	r3, [pc, #248]	@ (8000484 <MX_RTC_Init+0x140>)
 800038a:	2200      	movs	r2, #0
 800038c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800038e:	4b3d      	ldr	r3, [pc, #244]	@ (8000484 <MX_RTC_Init+0x140>)
 8000390:	2200      	movs	r2, #0
 8000392:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000394:	4b3b      	ldr	r3, [pc, #236]	@ (8000484 <MX_RTC_Init+0x140>)
 8000396:	2200      	movs	r2, #0
 8000398:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800039a:	4b3a      	ldr	r3, [pc, #232]	@ (8000484 <MX_RTC_Init+0x140>)
 800039c:	2280      	movs	r2, #128	@ 0x80
 800039e:	05d2      	lsls	r2, r2, #23
 80003a0:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80003a2:	4b38      	ldr	r3, [pc, #224]	@ (8000484 <MX_RTC_Init+0x140>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80003a8:	4b36      	ldr	r3, [pc, #216]	@ (8000484 <MX_RTC_Init+0x140>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 fcb0 	bl	8001d10 <HAL_RTC_Init>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80003b4:	f000 faa0 	bl	80008f8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003b8:	212c      	movs	r1, #44	@ 0x2c
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2200      	movs	r2, #0
 80003be:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003c0:	187b      	adds	r3, r7, r1
 80003c2:	2200      	movs	r2, #0
 80003c4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003c6:	187b      	adds	r3, r7, r1
 80003c8:	2200      	movs	r2, #0
 80003ca:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80003cc:	187b      	adds	r3, r7, r1
 80003ce:	2200      	movs	r2, #0
 80003d0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003d2:	187b      	adds	r3, r7, r1
 80003d4:	2200      	movs	r2, #0
 80003d6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003d8:	187b      	adds	r3, r7, r1
 80003da:	2200      	movs	r2, #0
 80003dc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003de:	1879      	adds	r1, r7, r1
 80003e0:	4b28      	ldr	r3, [pc, #160]	@ (8000484 <MX_RTC_Init+0x140>)
 80003e2:	2201      	movs	r2, #1
 80003e4:	0018      	movs	r0, r3
 80003e6:	f001 fd21 	bl	8001e2c <HAL_RTC_SetTime>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80003ee:	f000 fa83 	bl	80008f8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003f2:	2128      	movs	r1, #40	@ 0x28
 80003f4:	187b      	adds	r3, r7, r1
 80003f6:	2201      	movs	r2, #1
 80003f8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003fa:	187b      	adds	r3, r7, r1
 80003fc:	2201      	movs	r2, #1
 80003fe:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 8000400:	187b      	adds	r3, r7, r1
 8000402:	2201      	movs	r2, #1
 8000404:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000406:	187b      	adds	r3, r7, r1
 8000408:	2200      	movs	r2, #0
 800040a:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800040c:	1879      	adds	r1, r7, r1
 800040e:	4b1d      	ldr	r3, [pc, #116]	@ (8000484 <MX_RTC_Init+0x140>)
 8000410:	2201      	movs	r2, #1
 8000412:	0018      	movs	r0, r3
 8000414:	f001 fdb2 	bl	8001f7c <HAL_RTC_SetDate>
 8000418:	1e03      	subs	r3, r0, #0
 800041a:	d001      	beq.n	8000420 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800041c:	f000 fa6c 	bl	80008f8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000420:	003b      	movs	r3, r7
 8000422:	2200      	movs	r2, #0
 8000424:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000426:	003b      	movs	r3, r7
 8000428:	2200      	movs	r2, #0
 800042a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800042c:	003b      	movs	r3, r7
 800042e:	2200      	movs	r2, #0
 8000430:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000432:	003b      	movs	r3, r7
 8000434:	2200      	movs	r2, #0
 8000436:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000438:	003b      	movs	r3, r7
 800043a:	2200      	movs	r2, #0
 800043c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800043e:	003b      	movs	r3, r7
 8000440:	2200      	movs	r2, #0
 8000442:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000444:	003b      	movs	r3, r7
 8000446:	2200      	movs	r2, #0
 8000448:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800044a:	003b      	movs	r3, r7
 800044c:	2200      	movs	r2, #0
 800044e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000450:	003b      	movs	r3, r7
 8000452:	2200      	movs	r2, #0
 8000454:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000456:	003b      	movs	r3, r7
 8000458:	2220      	movs	r2, #32
 800045a:	2101      	movs	r1, #1
 800045c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800045e:	003b      	movs	r3, r7
 8000460:	2280      	movs	r2, #128	@ 0x80
 8000462:	0052      	lsls	r2, r2, #1
 8000464:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000466:	0039      	movs	r1, r7
 8000468:	4b06      	ldr	r3, [pc, #24]	@ (8000484 <MX_RTC_Init+0x140>)
 800046a:	2201      	movs	r2, #1
 800046c:	0018      	movs	r0, r3
 800046e:	f001 fe17 	bl	80020a0 <HAL_RTC_SetAlarm_IT>
 8000472:	1e03      	subs	r3, r0, #0
 8000474:	d001      	beq.n	800047a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8000476:	f000 fa3f 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800047a:	46c0      	nop			@ (mov r8, r8)
 800047c:	46bd      	mov	sp, r7
 800047e:	b010      	add	sp, #64	@ 0x40
 8000480:	bd80      	pop	{r7, pc}
 8000482:	46c0      	nop			@ (mov r8, r8)
 8000484:	20000084 	.word	0x20000084
 8000488:	40002800 	.word	0x40002800

0800048c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000490:	4b16      	ldr	r3, [pc, #88]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 8000492:	4a17      	ldr	r2, [pc, #92]	@ (80004f0 <MX_USART2_UART_Init+0x64>)
 8000494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000496:	4b15      	ldr	r3, [pc, #84]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 8000498:	22e1      	movs	r2, #225	@ 0xe1
 800049a:	0252      	lsls	r2, r2, #9
 800049c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b13      	ldr	r3, [pc, #76]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b11      	ldr	r3, [pc, #68]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b10      	ldr	r3, [pc, #64]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b0e      	ldr	r3, [pc, #56]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b0d      	ldr	r3, [pc, #52]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b0b      	ldr	r3, [pc, #44]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c2:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004c8:	4b08      	ldr	r3, [pc, #32]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004ce:	4b07      	ldr	r3, [pc, #28]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d4:	4b05      	ldr	r3, [pc, #20]	@ (80004ec <MX_USART2_UART_Init+0x60>)
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 ffde 	bl	8002498 <HAL_UART_Init>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004e0:	f000 fa0a 	bl	80008f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004e4:	46c0      	nop			@ (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	46c0      	nop			@ (mov r8, r8)
 80004ec:	200000ac 	.word	0x200000ac
 80004f0:	40004400 	.word	0x40004400

080004f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <MX_GPIO_Init+0x40>)
 80004fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000500:	2104      	movs	r1, #4
 8000502:	430a      	orrs	r2, r1
 8000504:	635a      	str	r2, [r3, #52]	@ 0x34
 8000506:	4b0b      	ldr	r3, [pc, #44]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800050a:	2204      	movs	r2, #4
 800050c:	4013      	ands	r3, r2
 800050e:	607b      	str	r3, [r7, #4]
 8000510:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000512:	4b08      	ldr	r3, [pc, #32]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000514:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000516:	4b07      	ldr	r3, [pc, #28]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	635a      	str	r2, [r3, #52]	@ 0x34
 800051e:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <MX_GPIO_Init+0x40>)
 8000520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000522:	2201      	movs	r2, #1
 8000524:	4013      	ands	r3, r2
 8000526:	603b      	str	r3, [r7, #0]
 8000528:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800052a:	46c0      	nop			@ (mov r8, r8)
 800052c:	46bd      	mov	sp, r7
 800052e:	b002      	add	sp, #8
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			@ (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <sendATCommand>:

/* USER CODE BEGIN 4 */
void sendATCommand(char* command) {
 8000538:	b580      	push	{r7, lr}
 800053a:	b082      	sub	sp, #8
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)command, strlen(command), HAL_MAX_DELAY);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	0018      	movs	r0, r3
 8000544:	f7ff fde0 	bl	8000108 <strlen>
 8000548:	0003      	movs	r3, r0
 800054a:	b29a      	uxth	r2, r3
 800054c:	2301      	movs	r3, #1
 800054e:	425b      	negs	r3, r3
 8000550:	6879      	ldr	r1, [r7, #4]
 8000552:	4803      	ldr	r0, [pc, #12]	@ (8000560 <sendATCommand+0x28>)
 8000554:	f001 fff6 	bl	8002544 <HAL_UART_Transmit>
}
 8000558:	46c0      	nop			@ (mov r8, r8)
 800055a:	46bd      	mov	sp, r7
 800055c:	b002      	add	sp, #8
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200000ac 	.word	0x200000ac

08000564 <InitialConfigBg95>:
void receiveResponse(char* buffer, uint16_t bufferSize) {
    HAL_UART_Receive(&huart2, (uint8_t*)buffer, bufferSize, HAL_MAX_DELAY);
}


void InitialConfigBg95() {
 8000564:	b5b0      	push	{r4, r5, r7, lr}
 8000566:	b0c4      	sub	sp, #272	@ 0x110
 8000568:	af00      	add	r7, sp, #0
    char command[128];    // Buffer para os comandos AT

    // Transmitir os comandos AT pela UART2

    // Comando AT+CCID
    sendATCommand("AT+CCID\r\n");
 800056a:	4b62      	ldr	r3, [pc, #392]	@ (80006f4 <InitialConfigBg95+0x190>)
 800056c:	0018      	movs	r0, r3
 800056e:	f7ff ffe3 	bl	8000538 <sendATCommand>
   // HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+CCID: %s\n", response);
 8000572:	2490      	movs	r4, #144	@ 0x90
 8000574:	193a      	adds	r2, r7, r4
 8000576:	4b60      	ldr	r3, [pc, #384]	@ (80006f8 <InitialConfigBg95+0x194>)
 8000578:	0011      	movs	r1, r2
 800057a:	0018      	movs	r0, r3
 800057c:	f003 f8ba 	bl	80036f4 <iprintf>

    // Comando AT+CIMI
    sendATCommand("AT+CIMI\r\n");
 8000580:	4b5e      	ldr	r3, [pc, #376]	@ (80006fc <InitialConfigBg95+0x198>)
 8000582:	0018      	movs	r0, r3
 8000584:	f7ff ffd8 	bl	8000538 <sendATCommand>
 //   HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+CIMI: %s\n", response);
 8000588:	193a      	adds	r2, r7, r4
 800058a:	4b5d      	ldr	r3, [pc, #372]	@ (8000700 <InitialConfigBg95+0x19c>)
 800058c:	0011      	movs	r1, r2
 800058e:	0018      	movs	r0, r3
 8000590:	f003 f8b0 	bl	80036f4 <iprintf>

    // Comando AT+CFUN=0
    sendATCommand("AT+CFUN=0\r\n");
 8000594:	4b5b      	ldr	r3, [pc, #364]	@ (8000704 <InitialConfigBg95+0x1a0>)
 8000596:	0018      	movs	r0, r3
 8000598:	f7ff ffce 	bl	8000538 <sendATCommand>
   // HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+CFUN=0: %s\n", response);
 800059c:	193a      	adds	r2, r7, r4
 800059e:	4b5a      	ldr	r3, [pc, #360]	@ (8000708 <InitialConfigBg95+0x1a4>)
 80005a0:	0011      	movs	r1, r2
 80005a2:	0018      	movs	r0, r3
 80005a4:	f003 f8a6 	bl	80036f4 <iprintf>

    // Comando AT+QCFG="nwscanmode",0,1
    sendATCommand("AT+QCFG=\"nwscanmode\",0,1\r\n");
 80005a8:	4b58      	ldr	r3, [pc, #352]	@ (800070c <InitialConfigBg95+0x1a8>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f7ff ffc4 	bl	8000538 <sendATCommand>
   // HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+QCFG=\"nwscanmode\": %s\n", response);
 80005b0:	193a      	adds	r2, r7, r4
 80005b2:	4b57      	ldr	r3, [pc, #348]	@ (8000710 <InitialConfigBg95+0x1ac>)
 80005b4:	0011      	movs	r1, r2
 80005b6:	0018      	movs	r0, r3
 80005b8:	f003 f89c 	bl	80036f4 <iprintf>

    // Comando AT+QCFG="nwscanseq",020103,1
    sendATCommand("AT+QCFG=\"nwscanseq\",020103,1\r\n");
 80005bc:	4b55      	ldr	r3, [pc, #340]	@ (8000714 <InitialConfigBg95+0x1b0>)
 80005be:	0018      	movs	r0, r3
 80005c0:	f7ff ffba 	bl	8000538 <sendATCommand>
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+QCFG=\"nwscanseq\": %s\n", response);
 80005c4:	193a      	adds	r2, r7, r4
 80005c6:	4b54      	ldr	r3, [pc, #336]	@ (8000718 <InitialConfigBg95+0x1b4>)
 80005c8:	0011      	movs	r1, r2
 80005ca:	0018      	movs	r0, r3
 80005cc:	f003 f892 	bl	80036f4 <iprintf>

    // Comando AT+QCFG="band",0,0
    sendATCommand("AT+QCFG=\"band\",0,0\r\n");
 80005d0:	4b52      	ldr	r3, [pc, #328]	@ (800071c <InitialConfigBg95+0x1b8>)
 80005d2:	0018      	movs	r0, r3
 80005d4:	f7ff ffb0 	bl	8000538 <sendATCommand>
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+QCFG=\"band\": %s\n", response);
 80005d8:	193a      	adds	r2, r7, r4
 80005da:	4b51      	ldr	r3, [pc, #324]	@ (8000720 <InitialConfigBg95+0x1bc>)
 80005dc:	0011      	movs	r1, r2
 80005de:	0018      	movs	r0, r3
 80005e0:	f003 f888 	bl	80036f4 <iprintf>

    // Comando AT+COPS=0
    sendATCommand("AT+COPS=0\r\n");
 80005e4:	4b4f      	ldr	r3, [pc, #316]	@ (8000724 <InitialConfigBg95+0x1c0>)
 80005e6:	0018      	movs	r0, r3
 80005e8:	f7ff ffa6 	bl	8000538 <sendATCommand>
    //HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+COPS=0: %s\n", response);
 80005ec:	193a      	adds	r2, r7, r4
 80005ee:	4b4e      	ldr	r3, [pc, #312]	@ (8000728 <InitialConfigBg95+0x1c4>)
 80005f0:	0011      	movs	r1, r2
 80005f2:	0018      	movs	r0, r3
 80005f4:	f003 f87e 	bl	80036f4 <iprintf>

    // Configurar o APN, username e password para a Vivo
    sendATCommand("AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"datatem\",\"datatem\"\r\n");
 80005f8:	4b4c      	ldr	r3, [pc, #304]	@ (800072c <InitialConfigBg95+0x1c8>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f7ff ff9c 	bl	8000538 <sendATCommand>
   // HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+CGDCONT: %s\n", response);
 8000600:	193a      	adds	r2, r7, r4
 8000602:	4b4b      	ldr	r3, [pc, #300]	@ (8000730 <InitialConfigBg95+0x1cc>)
 8000604:	0011      	movs	r1, r2
 8000606:	0018      	movs	r0, r3
 8000608:	f003 f874 	bl	80036f4 <iprintf>

    // Comando AT+CFUN=1
    sendATCommand("AT+CFUN=1\r\n");
 800060c:	4b49      	ldr	r3, [pc, #292]	@ (8000734 <InitialConfigBg95+0x1d0>)
 800060e:	0018      	movs	r0, r3
 8000610:	f7ff ff92 	bl	8000538 <sendATCommand>
    //HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+CFUN=1: %s\n", response);
 8000614:	193a      	adds	r2, r7, r4
 8000616:	4b48      	ldr	r3, [pc, #288]	@ (8000738 <InitialConfigBg95+0x1d4>)
 8000618:	0011      	movs	r1, r2
 800061a:	0018      	movs	r0, r3
 800061c:	f003 f86a 	bl	80036f4 <iprintf>

    // Comando AT+CREG=1;+CGREG=1;+CEREG=1
    sendATCommand("AT+CREG=1;+CGREG=1;+CEREG=1\r\n");
 8000620:	4b46      	ldr	r3, [pc, #280]	@ (800073c <InitialConfigBg95+0x1d8>)
 8000622:	0018      	movs	r0, r3
 8000624:	f7ff ff88 	bl	8000538 <sendATCommand>
   // HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+CREG=1;+CGREG=1;+CEREG=1: %s\n", response);
 8000628:	193a      	adds	r2, r7, r4
 800062a:	4b45      	ldr	r3, [pc, #276]	@ (8000740 <InitialConfigBg95+0x1dc>)
 800062c:	0011      	movs	r1, r2
 800062e:	0018      	movs	r0, r3
 8000630:	f003 f860 	bl	80036f4 <iprintf>

    // Comando AT+COPS?
    sendATCommand("AT+COPS?\r\n");
 8000634:	4b43      	ldr	r3, [pc, #268]	@ (8000744 <InitialConfigBg95+0x1e0>)
 8000636:	0018      	movs	r0, r3
 8000638:	f7ff ff7e 	bl	8000538 <sendATCommand>
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+COPS?: %s\n", response);
 800063c:	193a      	adds	r2, r7, r4
 800063e:	4b42      	ldr	r3, [pc, #264]	@ (8000748 <InitialConfigBg95+0x1e4>)
 8000640:	0011      	movs	r1, r2
 8000642:	0018      	movs	r0, r3
 8000644:	f003 f856 	bl	80036f4 <iprintf>

    // Comando AT+QCSQ
    sendATCommand("AT+QCSQ\r\n");
 8000648:	4b40      	ldr	r3, [pc, #256]	@ (800074c <InitialConfigBg95+0x1e8>)
 800064a:	0018      	movs	r0, r3
 800064c:	f7ff ff74 	bl	8000538 <sendATCommand>
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+QCSQ: %s\n", response);
 8000650:	193a      	adds	r2, r7, r4
 8000652:	4b3f      	ldr	r3, [pc, #252]	@ (8000750 <InitialConfigBg95+0x1ec>)
 8000654:	0011      	movs	r1, r2
 8000656:	0018      	movs	r0, r3
 8000658:	f003 f84c 	bl	80036f4 <iprintf>

    // Comando AT+CREG?;+CEREG?;+CGREG?
    sendATCommand("AT+CREG?;+CEREG?;+CGREG?\r\n");
 800065c:	4b3d      	ldr	r3, [pc, #244]	@ (8000754 <InitialConfigBg95+0x1f0>)
 800065e:	0018      	movs	r0, r3
 8000660:	f7ff ff6a 	bl	8000538 <sendATCommand>
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+CREG?;+CEREG?;+CGREG?: %s\n", response);
 8000664:	193a      	adds	r2, r7, r4
 8000666:	4b3c      	ldr	r3, [pc, #240]	@ (8000758 <InitialConfigBg95+0x1f4>)
 8000668:	0011      	movs	r1, r2
 800066a:	0018      	movs	r0, r3
 800066c:	f003 f842 	bl	80036f4 <iprintf>

    // Comando AT+CGATT=1 (Conectar à rede)
    sendATCommand("AT+CGATT=1\r\n");
 8000670:	4b3a      	ldr	r3, [pc, #232]	@ (800075c <InitialConfigBg95+0x1f8>)
 8000672:	0018      	movs	r0, r3
 8000674:	f7ff ff60 	bl	8000538 <sendATCommand>
   // HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+CGATT=1: %s\n", response);
 8000678:	193a      	adds	r2, r7, r4
 800067a:	4b39      	ldr	r3, [pc, #228]	@ (8000760 <InitialConfigBg95+0x1fc>)
 800067c:	0011      	movs	r1, r2
 800067e:	0018      	movs	r0, r3
 8000680:	f003 f838 	bl	80036f4 <iprintf>

    // Verificar o endereço IP alocado
    sendATCommand("AT+CGPADDR\r\n");
 8000684:	4b37      	ldr	r3, [pc, #220]	@ (8000764 <InitialConfigBg95+0x200>)
 8000686:	0018      	movs	r0, r3
 8000688:	f7ff ff56 	bl	8000538 <sendATCommand>
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+CGPADDR: %s\n", response);
 800068c:	193a      	adds	r2, r7, r4
 800068e:	4b36      	ldr	r3, [pc, #216]	@ (8000768 <InitialConfigBg95+0x204>)
 8000690:	0011      	movs	r1, r2
 8000692:	0018      	movs	r0, r3
 8000694:	f003 f82e 	bl	80036f4 <iprintf>

    // Extrair o endereço IP da resposta
    if (sscanf(response, "+CGPADDR: 1,\"%15[^\"]", ip) == 1) {
 8000698:	2580      	movs	r5, #128	@ 0x80
 800069a:	197a      	adds	r2, r7, r5
 800069c:	4933      	ldr	r1, [pc, #204]	@ (800076c <InitialConfigBg95+0x208>)
 800069e:	193b      	adds	r3, r7, r4
 80006a0:	0018      	movs	r0, r3
 80006a2:	f003 f8cb 	bl	800383c <siscanf>
 80006a6:	0003      	movs	r3, r0
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d106      	bne.n	80006ba <InitialConfigBg95+0x156>
        printf("Endereço IP alocado: %s\n", ip); // Exibir o IP
 80006ac:	197a      	adds	r2, r7, r5
 80006ae:	4b30      	ldr	r3, [pc, #192]	@ (8000770 <InitialConfigBg95+0x20c>)
 80006b0:	0011      	movs	r1, r2
 80006b2:	0018      	movs	r0, r3
 80006b4:	f003 f81e 	bl	80036f4 <iprintf>
 80006b8:	e003      	b.n	80006c2 <InitialConfigBg95+0x15e>
    } else {
        printf("Falha ao obter o endereço IP.\n");
 80006ba:	4b2e      	ldr	r3, [pc, #184]	@ (8000774 <InitialConfigBg95+0x210>)
 80006bc:	0018      	movs	r0, r3
 80006be:	f003 f87f 	bl	80037c0 <puts>
    }

    // Realizar um teste de ping com o IP obtido
    snprintf(command, sizeof(command), "AT+QPING=1,\"%s\"\r\n", ip);
 80006c2:	2380      	movs	r3, #128	@ 0x80
 80006c4:	18fb      	adds	r3, r7, r3
 80006c6:	4a2c      	ldr	r2, [pc, #176]	@ (8000778 <InitialConfigBg95+0x214>)
 80006c8:	0038      	movs	r0, r7
 80006ca:	2180      	movs	r1, #128	@ 0x80
 80006cc:	f003 f882 	bl	80037d4 <sniprintf>
    sendATCommand(command);
 80006d0:	003b      	movs	r3, r7
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ff30 	bl	8000538 <sendATCommand>
    HAL_Delay(10);
 80006d8:	200a      	movs	r0, #10
 80006da:	f000 fb5d 	bl	8000d98 <HAL_Delay>
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    printf("Resposta AT+QPING: %s\n", response);
 80006de:	2390      	movs	r3, #144	@ 0x90
 80006e0:	18fa      	adds	r2, r7, r3
 80006e2:	4b26      	ldr	r3, [pc, #152]	@ (800077c <InitialConfigBg95+0x218>)
 80006e4:	0011      	movs	r1, r2
 80006e6:	0018      	movs	r0, r3
 80006e8:	f003 f804 	bl	80036f4 <iprintf>
}
 80006ec:	46c0      	nop			@ (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	b044      	add	sp, #272	@ 0x110
 80006f2:	bdb0      	pop	{r4, r5, r7, pc}
 80006f4:	080052a4 	.word	0x080052a4
 80006f8:	080052b0 	.word	0x080052b0
 80006fc:	080052c8 	.word	0x080052c8
 8000700:	080052d4 	.word	0x080052d4
 8000704:	080052ec 	.word	0x080052ec
 8000708:	080052f8 	.word	0x080052f8
 800070c:	08005310 	.word	0x08005310
 8000710:	0800532c 	.word	0x0800532c
 8000714:	08005350 	.word	0x08005350
 8000718:	08005370 	.word	0x08005370
 800071c:	08005394 	.word	0x08005394
 8000720:	080053ac 	.word	0x080053ac
 8000724:	080053cc 	.word	0x080053cc
 8000728:	080053d8 	.word	0x080053d8
 800072c:	080053f0 	.word	0x080053f0
 8000730:	0800542c 	.word	0x0800542c
 8000734:	08005448 	.word	0x08005448
 8000738:	08005454 	.word	0x08005454
 800073c:	0800546c 	.word	0x0800546c
 8000740:	0800548c 	.word	0x0800548c
 8000744:	080054b8 	.word	0x080054b8
 8000748:	080054c4 	.word	0x080054c4
 800074c:	080054dc 	.word	0x080054dc
 8000750:	080054e8 	.word	0x080054e8
 8000754:	08005500 	.word	0x08005500
 8000758:	0800551c 	.word	0x0800551c
 800075c:	08005544 	.word	0x08005544
 8000760:	08005554 	.word	0x08005554
 8000764:	08005570 	.word	0x08005570
 8000768:	08005580 	.word	0x08005580
 800076c:	0800559c 	.word	0x0800559c
 8000770:	080055b4 	.word	0x080055b4
 8000774:	080055d0 	.word	0x080055d0
 8000778:	080055f0 	.word	0x080055f0
 800077c:	08005604 	.word	0x08005604

08000780 <ConfigPdpContext>:


void ConfigPdpContext() {
 8000780:	b580      	push	{r7, lr}
 8000782:	b0e0      	sub	sp, #384	@ 0x180
 8000784:	af00      	add	r7, sp, #0
    char command[128];
    char response[256];

    // Configurar APN com o contexto CID 1, com login e senha
    snprintf(command, sizeof(command), "AT+CGDCONT=1,\"IP\",\"inlog.vivo.com.br\",\"\",0,0\r\n");
 8000786:	4a13      	ldr	r2, [pc, #76]	@ (80007d4 <ConfigPdpContext+0x54>)
 8000788:	1c7b      	adds	r3, r7, #1
 800078a:	33ff      	adds	r3, #255	@ 0xff
 800078c:	2180      	movs	r1, #128	@ 0x80
 800078e:	0018      	movs	r0, r3
 8000790:	f003 f820 	bl	80037d4 <sniprintf>
    sendATCommand(command);
 8000794:	1c7b      	adds	r3, r7, #1
 8000796:	33ff      	adds	r3, #255	@ 0xff
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fecd 	bl	8000538 <sendATCommand>

    // Ativar o contexto PDP
    sendATCommand("AT+CGACT=1,1\r\n");
 800079e:	4b0e      	ldr	r3, [pc, #56]	@ (80007d8 <ConfigPdpContext+0x58>)
 80007a0:	0018      	movs	r0, r3
 80007a2:	f7ff fec9 	bl	8000538 <sendATCommand>

    // Verificar se o contexto PDP está ativo
    sendATCommand("AT+CGPADDR=1\r\n");
 80007a6:	4b0d      	ldr	r3, [pc, #52]	@ (80007dc <ConfigPdpContext+0x5c>)
 80007a8:	0018      	movs	r0, r3
 80007aa:	f7ff fec5 	bl	8000538 <sendATCommand>

    // Receber a resposta e verificar se contém o IP
  //  HAL_UART_Receive(&huart2, (uint8_t*)response, sizeof(response), HAL_MAX_DELAY);
    if (strstr(response, "0.0.0.0") == NULL) {
 80007ae:	4a0c      	ldr	r2, [pc, #48]	@ (80007e0 <ConfigPdpContext+0x60>)
 80007b0:	003b      	movs	r3, r7
 80007b2:	0011      	movs	r1, r2
 80007b4:	0018      	movs	r0, r3
 80007b6:	f003 f95f 	bl	8003a78 <strstr>
 80007ba:	1e03      	subs	r3, r0, #0
 80007bc:	d106      	bne.n	80007cc <ConfigPdpContext+0x4c>
        // Contexto PDP ativado com sucesso, IP foi alocado corretamente
        snprintf(command, sizeof(command), "PDP context ativado com sucesso. APN: inlog.vivo.com.br, IP: %s\r\n", response);
 80007be:	003b      	movs	r3, r7
 80007c0:	4a08      	ldr	r2, [pc, #32]	@ (80007e4 <ConfigPdpContext+0x64>)
 80007c2:	1c78      	adds	r0, r7, #1
 80007c4:	30ff      	adds	r0, #255	@ 0xff
 80007c6:	2180      	movs	r1, #128	@ 0x80
 80007c8:	f003 f804 	bl	80037d4 <sniprintf>
       // sendATCommand(command); // Transmitir a mensagem de sucesso pela UART
    } else {
        // Erro ao ativar o contexto PDP
        //sendATCommand("Erro ao ativar o contexto PDP\r\n");
    }
}
 80007cc:	46c0      	nop			@ (mov r8, r8)
 80007ce:	46bd      	mov	sp, r7
 80007d0:	b060      	add	sp, #384	@ 0x180
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	0800561c 	.word	0x0800561c
 80007d8:	0800564c 	.word	0x0800564c
 80007dc:	0800565c 	.word	0x0800565c
 80007e0:	0800566c 	.word	0x0800566c
 80007e4:	08005674 	.word	0x08005674

080007e8 <ConfigMqttContext>:


void ConfigMqttContext() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
    // Configurar a versão MQTT como 3.1.1
    sendATCommand("AT+QMTCFG=\"version\",0,4\r\n");
 80007ec:	4b09      	ldr	r3, [pc, #36]	@ (8000814 <ConfigMqttContext+0x2c>)
 80007ee:	0018      	movs	r0, r3
 80007f0:	f7ff fea2 	bl	8000538 <sendATCommand>
    // Associar o contexto PDP ao cliente MQTT
    sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 80007f4:	4b08      	ldr	r3, [pc, #32]	@ (8000818 <ConfigMqttContext+0x30>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f7ff fe9e 	bl	8000538 <sendATCommand>
    // Habilitar SSL para o cliente MQTT
    sendATCommand("AT+QMTCFG=\"ssl\",0,1,0\r\n");
 80007fc:	4b07      	ldr	r3, [pc, #28]	@ (800081c <ConfigMqttContext+0x34>)
 80007fe:	0018      	movs	r0, r3
 8000800:	f7ff fe9a 	bl	8000538 <sendATCommand>
    // Configurar keepalive para 3600 segundos
    sendATCommand("AT+QMTCFG=\"keepalive\",0,3600\r\n");
 8000804:	4b06      	ldr	r3, [pc, #24]	@ (8000820 <ConfigMqttContext+0x38>)
 8000806:	0018      	movs	r0, r3
 8000808:	f7ff fe96 	bl	8000538 <sendATCommand>
    // Configurar o "Will Message" do MQTT
   // sendATCommand("AT+QMTCFG=\"will\",0,1,0,1,\"/test/will\",\"Client disconnected unexpectedly\"\r\n");
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	46c0      	nop			@ (mov r8, r8)
 8000814:	080056b8 	.word	0x080056b8
 8000818:	080056d4 	.word	0x080056d4
 800081c:	080056f0 	.word	0x080056f0
 8000820:	08005708 	.word	0x08005708

08000824 <ActivePdp>:

void ActivePdp() {
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
    // Verificar se o APN está configurado corretamente
    sendATCommand("AT+CGDCONT?\r\n");
 8000828:	4b07      	ldr	r3, [pc, #28]	@ (8000848 <ActivePdp+0x24>)
 800082a:	0018      	movs	r0, r3
 800082c:	f7ff fe84 	bl	8000538 <sendATCommand>
    // Ativar o contexto PDP
    sendATCommand("AT+CGACT=1,1\r\n");
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <ActivePdp+0x28>)
 8000832:	0018      	movs	r0, r3
 8000834:	f7ff fe80 	bl	8000538 <sendATCommand>
    // Verificar se um endereço IP foi atribuído
    sendATCommand("AT+CGPADDR=1\r\n");
 8000838:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <ActivePdp+0x2c>)
 800083a:	0018      	movs	r0, r3
 800083c:	f7ff fe7c 	bl	8000538 <sendATCommand>
}
 8000840:	46c0      	nop			@ (mov r8, r8)
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	46c0      	nop			@ (mov r8, r8)
 8000848:	08005728 	.word	0x08005728
 800084c:	0800564c 	.word	0x0800564c
 8000850:	0800565c 	.word	0x0800565c

08000854 <MqttConnectAndSubscribe>:
void MqttConnectAndSubscribe() {
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
    // Conectar ao broker MQTT
    sendATCommand("AT+QMTOPEN=0,1883\r\n");
 8000858:	4b07      	ldr	r3, [pc, #28]	@ (8000878 <MqttConnectAndSubscribe+0x24>)
 800085a:	0018      	movs	r0, r3
 800085c:	f7ff fe6c 	bl	8000538 <sendATCommand>
    // Conectar ao broker MQTT com ID e credenciais
    sendATCommand("AT+QMTCONN=0,\"1\",\"pixtest\",\"pixtest\"\r\n");
 8000860:	4b06      	ldr	r3, [pc, #24]	@ (800087c <MqttConnectAndSubscribe+0x28>)
 8000862:	0018      	movs	r0, r3
 8000864:	f7ff fe68 	bl	8000538 <sendATCommand>
    // Inscrever-se no tópico desejado
    sendATCommand("AT+QMTSUB=0,\"pixtest\",1\r\n");
 8000868:	4b05      	ldr	r3, [pc, #20]	@ (8000880 <MqttConnectAndSubscribe+0x2c>)
 800086a:	0018      	movs	r0, r3
 800086c:	f7ff fe64 	bl	8000538 <sendATCommand>
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	46c0      	nop			@ (mov r8, r8)
 8000878:	08005738 	.word	0x08005738
 800087c:	0800574c 	.word	0x0800574c
 8000880:	08005774 	.word	0x08005774

08000884 <MqttConfigBeforeConnection>:

void MqttConfigBeforeConnection() {
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

    // Verificar se o dispositivo está registrado na rede
    sendATCommand("AT+CREG?\r\n");
 8000888:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MqttConfigBeforeConnection+0x2c>)
 800088a:	0018      	movs	r0, r3
 800088c:	f7ff fe54 	bl	8000538 <sendATCommand>
    // Verificar o status do contexto PDP
    sendATCommand("AT+CGACT?\r\n");
 8000890:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MqttConfigBeforeConnection+0x30>)
 8000892:	0018      	movs	r0, r3
 8000894:	f7ff fe50 	bl	8000538 <sendATCommand>
    // Verificar a qualidade do sinal
    sendATCommand("AT+CSQ\r\n");
 8000898:	4b07      	ldr	r3, [pc, #28]	@ (80008b8 <MqttConfigBeforeConnection+0x34>)
 800089a:	0018      	movs	r0, r3
 800089c:	f7ff fe4c 	bl	8000538 <sendATCommand>
    // Configurar o cntexto PDP para o canal MQTT
    sendATCommand("AT+QMTCFG=\"pdpcid\",0,1\r\n");
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MqttConfigBeforeConnection+0x38>)
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff fe48 	bl	8000538 <sendATCommand>
}
 80008a8:	46c0      	nop			@ (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			@ (mov r8, r8)
 80008b0:	08005790 	.word	0x08005790
 80008b4:	0800579c 	.word	0x0800579c
 80008b8:	080057a8 	.word	0x080057a8
 80008bc:	080056d4 	.word	0x080056d4

080008c0 <InitFlags>:
	}


}

void InitFlags() {
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 80008c4:	4b0a      	ldr	r3, [pc, #40]	@ (80008f0 <InitFlags+0x30>)
 80008c6:	691a      	ldr	r2, [r3, #16]
 80008c8:	2380      	movs	r3, #128	@ 0x80
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	401a      	ands	r2, r3
 80008ce:	2380      	movs	r3, #128	@ 0x80
 80008d0:	005b      	lsls	r3, r3, #1
 80008d2:	429a      	cmp	r2, r3
 80008d4:	d106      	bne.n	80008e4 <InitFlags+0x24>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 80008d6:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <InitFlags+0x30>)
 80008d8:	4a06      	ldr	r2, [pc, #24]	@ (80008f4 <InitFlags+0x34>)
 80008da:	619a      	str	r2, [r3, #24]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 80008dc:	2001      	movs	r0, #1
 80008de:	f000 fda3 	bl	8001428 <HAL_PWR_DisableWakeUpPin>
	} else {
		MX_RTC_Init();
	}

}
 80008e2:	e001      	b.n	80008e8 <InitFlags+0x28>
		MX_RTC_Init();
 80008e4:	f7ff fd2e 	bl	8000344 <MX_RTC_Init>
}
 80008e8:	46c0      	nop			@ (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	46c0      	nop			@ (mov r8, r8)
 80008f0:	40007000 	.word	0x40007000
 80008f4:	00010100 	.word	0x00010100

080008f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000900:	46c0      	nop			@ (mov r8, r8)
 8000902:	e7fd      	b.n	8000900 <Error_Handler+0x8>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b082      	sub	sp, #8
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	4b13      	ldr	r3, [pc, #76]	@ (8000958 <HAL_MspInit+0x54>)
 800090c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800090e:	4b12      	ldr	r3, [pc, #72]	@ (8000958 <HAL_MspInit+0x54>)
 8000910:	2101      	movs	r1, #1
 8000912:	430a      	orrs	r2, r1
 8000914:	641a      	str	r2, [r3, #64]	@ 0x40
 8000916:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <HAL_MspInit+0x54>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800091a:	2201      	movs	r2, #1
 800091c:	4013      	ands	r3, r2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	4b0d      	ldr	r3, [pc, #52]	@ (8000958 <HAL_MspInit+0x54>)
 8000924:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000926:	4b0c      	ldr	r3, [pc, #48]	@ (8000958 <HAL_MspInit+0x54>)
 8000928:	2180      	movs	r1, #128	@ 0x80
 800092a:	0549      	lsls	r1, r1, #21
 800092c:	430a      	orrs	r2, r1
 800092e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000930:	4b09      	ldr	r3, [pc, #36]	@ (8000958 <HAL_MspInit+0x54>)
 8000932:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000934:	2380      	movs	r3, #128	@ 0x80
 8000936:	055b      	lsls	r3, r3, #21
 8000938:	4013      	ands	r3, r2
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800093e:	2200      	movs	r2, #0
 8000940:	2100      	movs	r1, #0
 8000942:	2004      	movs	r0, #4
 8000944:	f000 faf8 	bl	8000f38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000948:	2004      	movs	r0, #4
 800094a:	f000 fb0a 	bl	8000f62 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	46c0      	nop			@ (mov r8, r8)
 8000950:	46bd      	mov	sp, r7
 8000952:	b002      	add	sp, #8
 8000954:	bd80      	pop	{r7, pc}
 8000956:	46c0      	nop			@ (mov r8, r8)
 8000958:	40021000 	.word	0x40021000

0800095c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b08b      	sub	sp, #44	@ 0x2c
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	240c      	movs	r4, #12
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	231c      	movs	r3, #28
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f003 f87a 	bl	8003a68 <memset>
  if(hrtc->Instance==RTC)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a19      	ldr	r2, [pc, #100]	@ (80009e0 <HAL_RTC_MspInit+0x84>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d12b      	bne.n	80009d6 <HAL_RTC_MspInit+0x7a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2240      	movs	r2, #64	@ 0x40
 8000982:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000984:	193b      	adds	r3, r7, r4
 8000986:	2280      	movs	r2, #128	@ 0x80
 8000988:	0092      	lsls	r2, r2, #2
 800098a:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	193b      	adds	r3, r7, r4
 800098e:	0018      	movs	r0, r3
 8000990:	f001 f8d2 	bl	8001b38 <HAL_RCCEx_PeriphCLKConfig>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000998:	f7ff ffae 	bl	80008f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800099c:	4b11      	ldr	r3, [pc, #68]	@ (80009e4 <HAL_RTC_MspInit+0x88>)
 800099e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80009a0:	4b10      	ldr	r3, [pc, #64]	@ (80009e4 <HAL_RTC_MspInit+0x88>)
 80009a2:	2180      	movs	r1, #128	@ 0x80
 80009a4:	0209      	lsls	r1, r1, #8
 80009a6:	430a      	orrs	r2, r1
 80009a8:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80009aa:	4b0e      	ldr	r3, [pc, #56]	@ (80009e4 <HAL_RTC_MspInit+0x88>)
 80009ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009ae:	4b0d      	ldr	r3, [pc, #52]	@ (80009e4 <HAL_RTC_MspInit+0x88>)
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	00c9      	lsls	r1, r1, #3
 80009b4:	430a      	orrs	r2, r1
 80009b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009b8:	4b0a      	ldr	r3, [pc, #40]	@ (80009e4 <HAL_RTC_MspInit+0x88>)
 80009ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009bc:	2380      	movs	r3, #128	@ 0x80
 80009be:	00db      	lsls	r3, r3, #3
 80009c0:	4013      	ands	r3, r2
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 80009c6:	2200      	movs	r2, #0
 80009c8:	2100      	movs	r1, #0
 80009ca:	2002      	movs	r0, #2
 80009cc:	f000 fab4 	bl	8000f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 80009d0:	2002      	movs	r0, #2
 80009d2:	f000 fac6 	bl	8000f62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 80009d6:	46c0      	nop			@ (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b00b      	add	sp, #44	@ 0x2c
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	40002800 	.word	0x40002800
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b08b      	sub	sp, #44	@ 0x2c
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	2414      	movs	r4, #20
 80009f2:	193b      	adds	r3, r7, r4
 80009f4:	0018      	movs	r0, r3
 80009f6:	2314      	movs	r3, #20
 80009f8:	001a      	movs	r2, r3
 80009fa:	2100      	movs	r1, #0
 80009fc:	f003 f834 	bl	8003a68 <memset>
  if(huart->Instance==USART2)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4a1f      	ldr	r2, [pc, #124]	@ (8000a84 <HAL_UART_MspInit+0x9c>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d138      	bne.n	8000a7c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <HAL_UART_MspInit+0xa0>)
 8000a0c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000a88 <HAL_UART_MspInit+0xa0>)
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	0289      	lsls	r1, r1, #10
 8000a14:	430a      	orrs	r2, r1
 8000a16:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000a18:	4b1b      	ldr	r3, [pc, #108]	@ (8000a88 <HAL_UART_MspInit+0xa0>)
 8000a1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000a1c:	2380      	movs	r3, #128	@ 0x80
 8000a1e:	029b      	lsls	r3, r3, #10
 8000a20:	4013      	ands	r3, r2
 8000a22:	613b      	str	r3, [r7, #16]
 8000a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a26:	4b18      	ldr	r3, [pc, #96]	@ (8000a88 <HAL_UART_MspInit+0xa0>)
 8000a28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a2a:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <HAL_UART_MspInit+0xa0>)
 8000a2c:	2101      	movs	r1, #1
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a32:	4b15      	ldr	r3, [pc, #84]	@ (8000a88 <HAL_UART_MspInit+0xa0>)
 8000a34:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a36:	2201      	movs	r2, #1
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a3e:	0021      	movs	r1, r4
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	220c      	movs	r2, #12
 8000a44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2202      	movs	r2, #2
 8000a4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	187a      	adds	r2, r7, r1
 8000a60:	23a0      	movs	r3, #160	@ 0xa0
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	0011      	movs	r1, r2
 8000a66:	0018      	movs	r0, r3
 8000a68:	f000 fb74 	bl	8001154 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2100      	movs	r1, #0
 8000a70:	201c      	movs	r0, #28
 8000a72:	f000 fa61 	bl	8000f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a76:	201c      	movs	r0, #28
 8000a78:	f000 fa73 	bl	8000f62 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a7c:	46c0      	nop			@ (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	b00b      	add	sp, #44	@ 0x2c
 8000a82:	bd90      	pop	{r4, r7, pc}
 8000a84:	40004400 	.word	0x40004400
 8000a88:	40021000 	.word	0x40021000

08000a8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a90:	46c0      	nop			@ (mov r8, r8)
 8000a92:	e7fd      	b.n	8000a90 <NMI_Handler+0x4>

08000a94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a98:	46c0      	nop			@ (mov r8, r8)
 8000a9a:	e7fd      	b.n	8000a98 <HardFault_Handler+0x4>

08000a9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000aa0:	46c0      	nop			@ (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aaa:	46c0      	nop			@ (mov r8, r8)
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ab4:	f000 f954 	bl	8000d60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ab8:	46c0      	nop			@ (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupts through EXTI lines 19 and 21.
  */
void RTC_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000ac4:	4b03      	ldr	r3, [pc, #12]	@ (8000ad4 <RTC_IRQHandler+0x14>)
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	f001 fbd6 	bl	8002278 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 8000acc:	46c0      	nop			@ (mov r8, r8)
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	46c0      	nop			@ (mov r8, r8)
 8000ad4:	20000084 	.word	0x20000084

08000ad8 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000adc:	46c0      	nop			@ (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ae8:	4b03      	ldr	r3, [pc, #12]	@ (8000af8 <USART2_IRQHandler+0x14>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f001 fdce 	bl	800268c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000af0:	46c0      	nop			@ (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			@ (mov r8, r8)
 8000af8:	200000ac 	.word	0x200000ac

08000afc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b086      	sub	sp, #24
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]
 8000b0c:	e00a      	b.n	8000b24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b0e:	e000      	b.n	8000b12 <_read+0x16>
 8000b10:	bf00      	nop
 8000b12:	0001      	movs	r1, r0
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	1c5a      	adds	r2, r3, #1
 8000b18:	60ba      	str	r2, [r7, #8]
 8000b1a:	b2ca      	uxtb	r2, r1
 8000b1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b1e:	697b      	ldr	r3, [r7, #20]
 8000b20:	3301      	adds	r3, #1
 8000b22:	617b      	str	r3, [r7, #20]
 8000b24:	697a      	ldr	r2, [r7, #20]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	dbf0      	blt.n	8000b0e <_read+0x12>
  }

  return len;
 8000b2c:	687b      	ldr	r3, [r7, #4]
}
 8000b2e:	0018      	movs	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b006      	add	sp, #24
 8000b34:	bd80      	pop	{r7, pc}

08000b36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b086      	sub	sp, #24
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	60f8      	str	r0, [r7, #12]
 8000b3e:	60b9      	str	r1, [r7, #8]
 8000b40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b42:	2300      	movs	r3, #0
 8000b44:	617b      	str	r3, [r7, #20]
 8000b46:	e009      	b.n	8000b5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	60ba      	str	r2, [r7, #8]
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	0018      	movs	r0, r3
 8000b52:	e000      	b.n	8000b56 <_write+0x20>
 8000b54:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	617b      	str	r3, [r7, #20]
 8000b5c:	697a      	ldr	r2, [r7, #20]
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	429a      	cmp	r2, r3
 8000b62:	dbf1      	blt.n	8000b48 <_write+0x12>
  }
  return len;
 8000b64:	687b      	ldr	r3, [r7, #4]
}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b006      	add	sp, #24
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <_close>:

int _close(int file)
{
 8000b6e:	b580      	push	{r7, lr}
 8000b70:	b082      	sub	sp, #8
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b76:	2301      	movs	r3, #1
 8000b78:	425b      	negs	r3, r3
}
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	b002      	add	sp, #8
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
 8000b8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	0192      	lsls	r2, r2, #6
 8000b92:	605a      	str	r2, [r3, #4]
  return 0;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	0018      	movs	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}

08000b9e <_isatty>:

int _isatty(int file)
{
 8000b9e:	b580      	push	{r7, lr}
 8000ba0:	b082      	sub	sp, #8
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	0018      	movs	r0, r3
 8000baa:	46bd      	mov	sp, r7
 8000bac:	b002      	add	sp, #8
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b084      	sub	sp, #16
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b004      	add	sp, #16
 8000bc4:	bd80      	pop	{r7, pc}
	...

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	18d3      	adds	r3, r2, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f002 ffa2 	bl	8003b40 <__errno>
 8000bfc:	0003      	movs	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	2301      	movs	r3, #1
 8000c04:	425b      	negs	r3, r3
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	18d2      	adds	r2, r2, r3
 8000c16:	4b05      	ldr	r3, [pc, #20]	@ (8000c2c <_sbrk+0x64>)
 8000c18:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	b006      	add	sp, #24
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20001800 	.word	0x20001800
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000140 	.word	0x20000140
 8000c30:	20000298 	.word	0x20000298

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c38:	4b03      	ldr	r3, [pc, #12]	@ (8000c48 <SystemInit+0x14>)
 8000c3a:	2280      	movs	r2, #128	@ 0x80
 8000c3c:	0512      	lsls	r2, r2, #20
 8000c3e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c40:	46c0      	nop			@ (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			@ (mov r8, r8)
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c4c:	480d      	ldr	r0, [pc, #52]	@ (8000c84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c4e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c50:	f7ff fff0 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c54:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c56:	e003      	b.n	8000c60 <LoopCopyDataInit>

08000c58 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c58:	4b0b      	ldr	r3, [pc, #44]	@ (8000c88 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000c5a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c5c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c5e:	3104      	adds	r1, #4

08000c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c60:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <LoopForever+0xa>)
  ldr r3, =_edata
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <LoopForever+0xe>)
  adds r2, r0, r1
 8000c64:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c66:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c68:	d3f6      	bcc.n	8000c58 <CopyDataInit>
  ldr r2, =_sbss
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c94 <LoopForever+0x12>)
  b LoopFillZerobss
 8000c6c:	e002      	b.n	8000c74 <LoopFillZerobss>

08000c6e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c6e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c70:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c72:	3204      	adds	r2, #4

08000c74 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000c74:	4b08      	ldr	r3, [pc, #32]	@ (8000c98 <LoopForever+0x16>)
  cmp r2, r3
 8000c76:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c78:	d3f9      	bcc.n	8000c6e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c7a:	f002 ff67 	bl	8003b4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c7e:	f7ff fae1 	bl	8000244 <main>

08000c82 <LoopForever>:

LoopForever:
    b LoopForever
 8000c82:	e7fe      	b.n	8000c82 <LoopForever>
  ldr   r0, =_estack
 8000c84:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000c88:	080059b0 	.word	0x080059b0
  ldr r0, =_sdata
 8000c8c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c90:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8000c94:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8000c98:	20000294 	.word	0x20000294

08000c9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c9c:	e7fe      	b.n	8000c9c <ADC1_IRQHandler>

08000c9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b082      	sub	sp, #8
 8000ca2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000caa:	2003      	movs	r0, #3
 8000cac:	f000 f80e 	bl	8000ccc <HAL_InitTick>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000cb4:	1dfb      	adds	r3, r7, #7
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	e001      	b.n	8000cc0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cbc:	f7ff fe22 	bl	8000904 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cc0:	1dfb      	adds	r3, r7, #7
 8000cc2:	781b      	ldrb	r3, [r3, #0]
}
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	b002      	add	sp, #8
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b085      	sub	sp, #20
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000cdc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <HAL_InitTick+0x88>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d02b      	beq.n	8000d3c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <HAL_InitTick+0x8c>)
 8000ce6:	681c      	ldr	r4, [r3, #0]
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <HAL_InitTick+0x88>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	0019      	movs	r1, r3
 8000cee:	23fa      	movs	r3, #250	@ 0xfa
 8000cf0:	0098      	lsls	r0, r3, #2
 8000cf2:	f7ff fa1b 	bl	800012c <__udivsi3>
 8000cf6:	0003      	movs	r3, r0
 8000cf8:	0019      	movs	r1, r3
 8000cfa:	0020      	movs	r0, r4
 8000cfc:	f7ff fa16 	bl	800012c <__udivsi3>
 8000d00:	0003      	movs	r3, r0
 8000d02:	0018      	movs	r0, r3
 8000d04:	f000 f93d 	bl	8000f82 <HAL_SYSTICK_Config>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d112      	bne.n	8000d32 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b03      	cmp	r3, #3
 8000d10:	d80a      	bhi.n	8000d28 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d12:	6879      	ldr	r1, [r7, #4]
 8000d14:	2301      	movs	r3, #1
 8000d16:	425b      	negs	r3, r3
 8000d18:	2200      	movs	r2, #0
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 f90c 	bl	8000f38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	@ (8000d5c <HAL_InitTick+0x90>)
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	601a      	str	r2, [r3, #0]
 8000d26:	e00d      	b.n	8000d44 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d28:	230f      	movs	r3, #15
 8000d2a:	18fb      	adds	r3, r7, r3
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	701a      	strb	r2, [r3, #0]
 8000d30:	e008      	b.n	8000d44 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d32:	230f      	movs	r3, #15
 8000d34:	18fb      	adds	r3, r7, r3
 8000d36:	2201      	movs	r2, #1
 8000d38:	701a      	strb	r2, [r3, #0]
 8000d3a:	e003      	b.n	8000d44 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	2201      	movs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d44:	230f      	movs	r3, #15
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	781b      	ldrb	r3, [r3, #0]
}
 8000d4a:	0018      	movs	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	b005      	add	sp, #20
 8000d50:	bd90      	pop	{r4, r7, pc}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	20000008 	.word	0x20000008
 8000d58:	20000000 	.word	0x20000000
 8000d5c:	20000004 	.word	0x20000004

08000d60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d64:	4b05      	ldr	r3, [pc, #20]	@ (8000d7c <HAL_IncTick+0x1c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	001a      	movs	r2, r3
 8000d6a:	4b05      	ldr	r3, [pc, #20]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	18d2      	adds	r2, r2, r3
 8000d70:	4b03      	ldr	r3, [pc, #12]	@ (8000d80 <HAL_IncTick+0x20>)
 8000d72:	601a      	str	r2, [r3, #0]
}
 8000d74:	46c0      	nop			@ (mov r8, r8)
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			@ (mov r8, r8)
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000144 	.word	0x20000144

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b02      	ldr	r3, [pc, #8]	@ (8000d94 <HAL_GetTick+0x10>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			@ (mov r8, r8)
 8000d94:	20000144 	.word	0x20000144

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff fff0 	bl	8000d84 <HAL_GetTick>
 8000da4:	0003      	movs	r3, r0
 8000da6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	@ (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	001a      	movs	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	189b      	adds	r3, r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dbe:	46c0      	nop			@ (mov r8, r8)
 8000dc0:	f7ff ffe0 	bl	8000d84 <HAL_GetTick>
 8000dc4:	0002      	movs	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	46c0      	nop			@ (mov r8, r8)
 8000dd2:	46c0      	nop			@ (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b004      	add	sp, #16
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	20000008 	.word	0x20000008

08000de0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	0002      	movs	r2, r0
 8000de8:	1dfb      	adds	r3, r7, #7
 8000dea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000df2:	d809      	bhi.n	8000e08 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df4:	1dfb      	adds	r3, r7, #7
 8000df6:	781b      	ldrb	r3, [r3, #0]
 8000df8:	001a      	movs	r2, r3
 8000dfa:	231f      	movs	r3, #31
 8000dfc:	401a      	ands	r2, r3
 8000dfe:	4b04      	ldr	r3, [pc, #16]	@ (8000e10 <__NVIC_EnableIRQ+0x30>)
 8000e00:	2101      	movs	r1, #1
 8000e02:	4091      	lsls	r1, r2
 8000e04:	000a      	movs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000e08:	46c0      	nop			@ (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b002      	add	sp, #8
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	e000e100 	.word	0xe000e100

08000e14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	0002      	movs	r2, r0
 8000e1c:	6039      	str	r1, [r7, #0]
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e22:	1dfb      	adds	r3, r7, #7
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	2b7f      	cmp	r3, #127	@ 0x7f
 8000e28:	d828      	bhi.n	8000e7c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e2a:	4a2f      	ldr	r2, [pc, #188]	@ (8000ee8 <__NVIC_SetPriority+0xd4>)
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	089b      	lsrs	r3, r3, #2
 8000e34:	33c0      	adds	r3, #192	@ 0xc0
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	589b      	ldr	r3, [r3, r2]
 8000e3a:	1dfa      	adds	r2, r7, #7
 8000e3c:	7812      	ldrb	r2, [r2, #0]
 8000e3e:	0011      	movs	r1, r2
 8000e40:	2203      	movs	r2, #3
 8000e42:	400a      	ands	r2, r1
 8000e44:	00d2      	lsls	r2, r2, #3
 8000e46:	21ff      	movs	r1, #255	@ 0xff
 8000e48:	4091      	lsls	r1, r2
 8000e4a:	000a      	movs	r2, r1
 8000e4c:	43d2      	mvns	r2, r2
 8000e4e:	401a      	ands	r2, r3
 8000e50:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	019b      	lsls	r3, r3, #6
 8000e56:	22ff      	movs	r2, #255	@ 0xff
 8000e58:	401a      	ands	r2, r3
 8000e5a:	1dfb      	adds	r3, r7, #7
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	0018      	movs	r0, r3
 8000e60:	2303      	movs	r3, #3
 8000e62:	4003      	ands	r3, r0
 8000e64:	00db      	lsls	r3, r3, #3
 8000e66:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e68:	481f      	ldr	r0, [pc, #124]	@ (8000ee8 <__NVIC_SetPriority+0xd4>)
 8000e6a:	1dfb      	adds	r3, r7, #7
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	b25b      	sxtb	r3, r3
 8000e70:	089b      	lsrs	r3, r3, #2
 8000e72:	430a      	orrs	r2, r1
 8000e74:	33c0      	adds	r3, #192	@ 0xc0
 8000e76:	009b      	lsls	r3, r3, #2
 8000e78:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e7a:	e031      	b.n	8000ee0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eec <__NVIC_SetPriority+0xd8>)
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	0019      	movs	r1, r3
 8000e84:	230f      	movs	r3, #15
 8000e86:	400b      	ands	r3, r1
 8000e88:	3b08      	subs	r3, #8
 8000e8a:	089b      	lsrs	r3, r3, #2
 8000e8c:	3306      	adds	r3, #6
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	18d3      	adds	r3, r2, r3
 8000e92:	3304      	adds	r3, #4
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1dfa      	adds	r2, r7, #7
 8000e98:	7812      	ldrb	r2, [r2, #0]
 8000e9a:	0011      	movs	r1, r2
 8000e9c:	2203      	movs	r2, #3
 8000e9e:	400a      	ands	r2, r1
 8000ea0:	00d2      	lsls	r2, r2, #3
 8000ea2:	21ff      	movs	r1, #255	@ 0xff
 8000ea4:	4091      	lsls	r1, r2
 8000ea6:	000a      	movs	r2, r1
 8000ea8:	43d2      	mvns	r2, r2
 8000eaa:	401a      	ands	r2, r3
 8000eac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	019b      	lsls	r3, r3, #6
 8000eb2:	22ff      	movs	r2, #255	@ 0xff
 8000eb4:	401a      	ands	r2, r3
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	0018      	movs	r0, r3
 8000ebc:	2303      	movs	r3, #3
 8000ebe:	4003      	ands	r3, r0
 8000ec0:	00db      	lsls	r3, r3, #3
 8000ec2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ec4:	4809      	ldr	r0, [pc, #36]	@ (8000eec <__NVIC_SetPriority+0xd8>)
 8000ec6:	1dfb      	adds	r3, r7, #7
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	001c      	movs	r4, r3
 8000ecc:	230f      	movs	r3, #15
 8000ece:	4023      	ands	r3, r4
 8000ed0:	3b08      	subs	r3, #8
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	430a      	orrs	r2, r1
 8000ed6:	3306      	adds	r3, #6
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	18c3      	adds	r3, r0, r3
 8000edc:	3304      	adds	r3, #4
 8000ede:	601a      	str	r2, [r3, #0]
}
 8000ee0:	46c0      	nop			@ (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b003      	add	sp, #12
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	e000e100 	.word	0xe000e100
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	1e5a      	subs	r2, r3, #1
 8000efc:	2380      	movs	r3, #128	@ 0x80
 8000efe:	045b      	lsls	r3, r3, #17
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d301      	bcc.n	8000f08 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f04:	2301      	movs	r3, #1
 8000f06:	e010      	b.n	8000f2a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f08:	4b0a      	ldr	r3, [pc, #40]	@ (8000f34 <SysTick_Config+0x44>)
 8000f0a:	687a      	ldr	r2, [r7, #4]
 8000f0c:	3a01      	subs	r2, #1
 8000f0e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f10:	2301      	movs	r3, #1
 8000f12:	425b      	negs	r3, r3
 8000f14:	2103      	movs	r1, #3
 8000f16:	0018      	movs	r0, r3
 8000f18:	f7ff ff7c 	bl	8000e14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f1c:	4b05      	ldr	r3, [pc, #20]	@ (8000f34 <SysTick_Config+0x44>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f22:	4b04      	ldr	r3, [pc, #16]	@ (8000f34 <SysTick_Config+0x44>)
 8000f24:	2207      	movs	r2, #7
 8000f26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	0018      	movs	r0, r3
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	b002      	add	sp, #8
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	46c0      	nop			@ (mov r8, r8)
 8000f34:	e000e010 	.word	0xe000e010

08000f38 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b084      	sub	sp, #16
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
 8000f42:	210f      	movs	r1, #15
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	1c02      	adds	r2, r0, #0
 8000f48:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	187b      	adds	r3, r7, r1
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	b25b      	sxtb	r3, r3
 8000f52:	0011      	movs	r1, r2
 8000f54:	0018      	movs	r0, r3
 8000f56:	f7ff ff5d 	bl	8000e14 <__NVIC_SetPriority>
}
 8000f5a:	46c0      	nop			@ (mov r8, r8)
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	b004      	add	sp, #16
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	b082      	sub	sp, #8
 8000f66:	af00      	add	r7, sp, #0
 8000f68:	0002      	movs	r2, r0
 8000f6a:	1dfb      	adds	r3, r7, #7
 8000f6c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	0018      	movs	r0, r3
 8000f76:	f7ff ff33 	bl	8000de0 <__NVIC_EnableIRQ>
}
 8000f7a:	46c0      	nop			@ (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	b002      	add	sp, #8
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b082      	sub	sp, #8
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ffaf 	bl	8000ef0 <SysTick_Config>
 8000f92:	0003      	movs	r3, r0
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b002      	add	sp, #8
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d101      	bne.n	8000fae <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000faa:	2301      	movs	r3, #1
 8000fac:	e050      	b.n	8001050 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2225      	movs	r2, #37	@ 0x25
 8000fb2:	5c9b      	ldrb	r3, [r3, r2]
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b02      	cmp	r3, #2
 8000fb8:	d008      	beq.n	8000fcc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	2204      	movs	r2, #4
 8000fbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2224      	movs	r2, #36	@ 0x24
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e041      	b.n	8001050 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	681a      	ldr	r2, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	210e      	movs	r1, #14
 8000fd8:	438a      	bics	r2, r1
 8000fda:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	491c      	ldr	r1, [pc, #112]	@ (8001058 <HAL_DMA_Abort+0xbc>)
 8000fe8:	400a      	ands	r2, r1
 8000fea:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	2101      	movs	r1, #1
 8000ff8:	438a      	bics	r2, r1
 8000ffa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000ffc:	4b17      	ldr	r3, [pc, #92]	@ (800105c <HAL_DMA_Abort+0xc0>)
 8000ffe:	6859      	ldr	r1, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	221c      	movs	r2, #28
 8001006:	4013      	ands	r3, r2
 8001008:	2201      	movs	r2, #1
 800100a:	409a      	lsls	r2, r3
 800100c:	4b13      	ldr	r3, [pc, #76]	@ (800105c <HAL_DMA_Abort+0xc0>)
 800100e:	430a      	orrs	r2, r1
 8001010:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001016:	687a      	ldr	r2, [r7, #4]
 8001018:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800101a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001020:	2b00      	cmp	r3, #0
 8001022:	d00c      	beq.n	800103e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001028:	681a      	ldr	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800102e:	490a      	ldr	r1, [pc, #40]	@ (8001058 <HAL_DMA_Abort+0xbc>)
 8001030:	400a      	ands	r2, r1
 8001032:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001038:	687a      	ldr	r2, [r7, #4]
 800103a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800103c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2225      	movs	r2, #37	@ 0x25
 8001042:	2101      	movs	r1, #1
 8001044:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2224      	movs	r2, #36	@ 0x24
 800104a:	2100      	movs	r1, #0
 800104c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800104e:	2300      	movs	r3, #0
}
 8001050:	0018      	movs	r0, r3
 8001052:	46bd      	mov	sp, r7
 8001054:	b002      	add	sp, #8
 8001056:	bd80      	pop	{r7, pc}
 8001058:	fffffeff 	.word	0xfffffeff
 800105c:	40020000 	.word	0x40020000

08001060 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001068:	230f      	movs	r3, #15
 800106a:	18fb      	adds	r3, r7, r3
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2224      	movs	r2, #36	@ 0x24
 8001074:	2100      	movs	r1, #0
 8001076:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2224      	movs	r2, #36	@ 0x24
 800107c:	5c9b      	ldrb	r3, [r3, r2]
 800107e:	2b01      	cmp	r3, #1
 8001080:	d101      	bne.n	8001086 <HAL_DMA_Abort_IT+0x26>
 8001082:	2302      	movs	r3, #2
 8001084:	e05e      	b.n	8001144 <HAL_DMA_Abort_IT+0xe4>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2224      	movs	r2, #36	@ 0x24
 800108a:	2101      	movs	r1, #1
 800108c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2225      	movs	r2, #37	@ 0x25
 8001092:	5c9b      	ldrb	r3, [r3, r2]
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d007      	beq.n	80010aa <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2204      	movs	r2, #4
 800109e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80010a0:	230f      	movs	r3, #15
 80010a2:	18fb      	adds	r3, r7, r3
 80010a4:	2201      	movs	r2, #1
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e049      	b.n	800113e <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	210e      	movs	r1, #14
 80010b6:	438a      	bics	r2, r1
 80010b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2101      	movs	r1, #1
 80010c6:	438a      	bics	r2, r1
 80010c8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d4:	491d      	ldr	r1, [pc, #116]	@ (800114c <HAL_DMA_Abort_IT+0xec>)
 80010d6:	400a      	ands	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80010da:	4b1d      	ldr	r3, [pc, #116]	@ (8001150 <HAL_DMA_Abort_IT+0xf0>)
 80010dc:	6859      	ldr	r1, [r3, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	221c      	movs	r2, #28
 80010e4:	4013      	ands	r3, r2
 80010e6:	2201      	movs	r2, #1
 80010e8:	409a      	lsls	r2, r3
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <HAL_DMA_Abort_IT+0xf0>)
 80010ec:	430a      	orrs	r2, r1
 80010ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80010f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d00c      	beq.n	800111c <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800110c:	490f      	ldr	r1, [pc, #60]	@ (800114c <HAL_DMA_Abort_IT+0xec>)
 800110e:	400a      	ands	r2, r1
 8001110:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800111a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2225      	movs	r2, #37	@ 0x25
 8001120:	2101      	movs	r1, #1
 8001122:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2224      	movs	r2, #36	@ 0x24
 8001128:	2100      	movs	r1, #0
 800112a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001130:	2b00      	cmp	r3, #0
 8001132:	d004      	beq.n	800113e <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001138:	687a      	ldr	r2, [r7, #4]
 800113a:	0010      	movs	r0, r2
 800113c:	4798      	blx	r3
    }
  }
  return status;
 800113e:	230f      	movs	r3, #15
 8001140:	18fb      	adds	r3, r7, r3
 8001142:	781b      	ldrb	r3, [r3, #0]
}
 8001144:	0018      	movs	r0, r3
 8001146:	46bd      	mov	sp, r7
 8001148:	b004      	add	sp, #16
 800114a:	bd80      	pop	{r7, pc}
 800114c:	fffffeff 	.word	0xfffffeff
 8001150:	40020000 	.word	0x40020000

08001154 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b086      	sub	sp, #24
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800115e:	2300      	movs	r3, #0
 8001160:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001162:	e14d      	b.n	8001400 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2101      	movs	r1, #1
 800116a:	693a      	ldr	r2, [r7, #16]
 800116c:	4091      	lsls	r1, r2
 800116e:	000a      	movs	r2, r1
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d100      	bne.n	800117c <HAL_GPIO_Init+0x28>
 800117a:	e13e      	b.n	80013fa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x38>
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b12      	cmp	r3, #18
 800118a:	d125      	bne.n	80011d8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	08da      	lsrs	r2, r3, #3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	3208      	adds	r2, #8
 8001194:	0092      	lsls	r2, r2, #2
 8001196:	58d3      	ldr	r3, [r2, r3]
 8001198:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	2207      	movs	r2, #7
 800119e:	4013      	ands	r3, r2
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	220f      	movs	r2, #15
 80011a4:	409a      	lsls	r2, r3
 80011a6:	0013      	movs	r3, r2
 80011a8:	43da      	mvns	r2, r3
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	4013      	ands	r3, r2
 80011ae:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	220f      	movs	r2, #15
 80011b6:	401a      	ands	r2, r3
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	2107      	movs	r1, #7
 80011bc:	400b      	ands	r3, r1
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	409a      	lsls	r2, r3
 80011c2:	0013      	movs	r3, r2
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	08da      	lsrs	r2, r3, #3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3208      	adds	r2, #8
 80011d2:	0092      	lsls	r2, r2, #2
 80011d4:	6979      	ldr	r1, [r7, #20]
 80011d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	2203      	movs	r2, #3
 80011e4:	409a      	lsls	r2, r3
 80011e6:	0013      	movs	r3, r2
 80011e8:	43da      	mvns	r2, r3
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	4013      	ands	r3, r2
 80011ee:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	2203      	movs	r2, #3
 80011f6:	401a      	ands	r2, r3
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	409a      	lsls	r2, r3
 80011fe:	0013      	movs	r3, r2
 8001200:	697a      	ldr	r2, [r7, #20]
 8001202:	4313      	orrs	r3, r2
 8001204:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	2b01      	cmp	r3, #1
 8001212:	d00b      	beq.n	800122c <HAL_GPIO_Init+0xd8>
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	2b02      	cmp	r3, #2
 800121a:	d007      	beq.n	800122c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001220:	2b11      	cmp	r3, #17
 8001222:	d003      	beq.n	800122c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b12      	cmp	r3, #18
 800122a:	d130      	bne.n	800128e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	409a      	lsls	r2, r3
 800123a:	0013      	movs	r3, r2
 800123c:	43da      	mvns	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	4013      	ands	r3, r2
 8001242:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	68da      	ldr	r2, [r3, #12]
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	409a      	lsls	r2, r3
 800124e:	0013      	movs	r3, r2
 8001250:	697a      	ldr	r2, [r7, #20]
 8001252:	4313      	orrs	r3, r2
 8001254:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001262:	2201      	movs	r2, #1
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	409a      	lsls	r2, r3
 8001268:	0013      	movs	r3, r2
 800126a:	43da      	mvns	r2, r3
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	4013      	ands	r3, r2
 8001270:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	091b      	lsrs	r3, r3, #4
 8001278:	2201      	movs	r2, #1
 800127a:	401a      	ands	r2, r3
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	409a      	lsls	r2, r3
 8001280:	0013      	movs	r3, r2
 8001282:	697a      	ldr	r2, [r7, #20]
 8001284:	4313      	orrs	r3, r2
 8001286:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	697a      	ldr	r2, [r7, #20]
 800128c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	2b03      	cmp	r3, #3
 8001294:	d017      	beq.n	80012c6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
 800129a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	2203      	movs	r2, #3
 80012a2:	409a      	lsls	r2, r3
 80012a4:	0013      	movs	r3, r2
 80012a6:	43da      	mvns	r2, r3
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	4013      	ands	r3, r2
 80012ac:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	0013      	movs	r3, r2
 80012ba:	697a      	ldr	r2, [r7, #20]
 80012bc:	4313      	orrs	r3, r2
 80012be:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685a      	ldr	r2, [r3, #4]
 80012ca:	2380      	movs	r3, #128	@ 0x80
 80012cc:	055b      	lsls	r3, r3, #21
 80012ce:	4013      	ands	r3, r2
 80012d0:	d100      	bne.n	80012d4 <HAL_GPIO_Init+0x180>
 80012d2:	e092      	b.n	80013fa <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80012d4:	4a50      	ldr	r2, [pc, #320]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3318      	adds	r3, #24
 80012dc:	009b      	lsls	r3, r3, #2
 80012de:	589b      	ldr	r3, [r3, r2]
 80012e0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	2203      	movs	r2, #3
 80012e6:	4013      	ands	r3, r2
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	220f      	movs	r2, #15
 80012ec:	409a      	lsls	r2, r3
 80012ee:	0013      	movs	r3, r2
 80012f0:	43da      	mvns	r2, r3
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	4013      	ands	r3, r2
 80012f6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	23a0      	movs	r3, #160	@ 0xa0
 80012fc:	05db      	lsls	r3, r3, #23
 80012fe:	429a      	cmp	r2, r3
 8001300:	d013      	beq.n	800132a <HAL_GPIO_Init+0x1d6>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a45      	ldr	r2, [pc, #276]	@ (800141c <HAL_GPIO_Init+0x2c8>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d00d      	beq.n	8001326 <HAL_GPIO_Init+0x1d2>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a44      	ldr	r2, [pc, #272]	@ (8001420 <HAL_GPIO_Init+0x2cc>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d007      	beq.n	8001322 <HAL_GPIO_Init+0x1ce>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a43      	ldr	r2, [pc, #268]	@ (8001424 <HAL_GPIO_Init+0x2d0>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d101      	bne.n	800131e <HAL_GPIO_Init+0x1ca>
 800131a:	2305      	movs	r3, #5
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x1d8>
 800131e:	2306      	movs	r3, #6
 8001320:	e004      	b.n	800132c <HAL_GPIO_Init+0x1d8>
 8001322:	2302      	movs	r3, #2
 8001324:	e002      	b.n	800132c <HAL_GPIO_Init+0x1d8>
 8001326:	2301      	movs	r3, #1
 8001328:	e000      	b.n	800132c <HAL_GPIO_Init+0x1d8>
 800132a:	2300      	movs	r3, #0
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	2103      	movs	r1, #3
 8001330:	400a      	ands	r2, r1
 8001332:	00d2      	lsls	r2, r2, #3
 8001334:	4093      	lsls	r3, r2
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	4313      	orrs	r3, r2
 800133a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800133c:	4936      	ldr	r1, [pc, #216]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	089b      	lsrs	r3, r3, #2
 8001342:	3318      	adds	r3, #24
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800134a:	4a33      	ldr	r2, [pc, #204]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 800134c:	2380      	movs	r3, #128	@ 0x80
 800134e:	58d3      	ldr	r3, [r2, r3]
 8001350:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	43da      	mvns	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	4013      	ands	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	2380      	movs	r3, #128	@ 0x80
 8001362:	025b      	lsls	r3, r3, #9
 8001364:	4013      	ands	r3, r2
 8001366:	d003      	beq.n	8001370 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	4313      	orrs	r3, r2
 800136e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001370:	4929      	ldr	r1, [pc, #164]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 8001372:	2280      	movs	r2, #128	@ 0x80
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001378:	4a27      	ldr	r2, [pc, #156]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 800137a:	2384      	movs	r3, #132	@ 0x84
 800137c:	58d3      	ldr	r3, [r2, r3]
 800137e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	43da      	mvns	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	4013      	ands	r3, r2
 8001388:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	685a      	ldr	r2, [r3, #4]
 800138e:	2380      	movs	r3, #128	@ 0x80
 8001390:	029b      	lsls	r3, r3, #10
 8001392:	4013      	ands	r3, r2
 8001394:	d003      	beq.n	800139e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	4313      	orrs	r3, r2
 800139c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800139e:	491e      	ldr	r1, [pc, #120]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 80013a0:	2284      	movs	r2, #132	@ 0x84
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43da      	mvns	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	4013      	ands	r3, r2
 80013b4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	2380      	movs	r3, #128	@ 0x80
 80013bc:	035b      	lsls	r3, r3, #13
 80013be:	4013      	ands	r3, r2
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80013ca:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 80013cc:	697a      	ldr	r2, [r7, #20]
 80013ce:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43da      	mvns	r2, r3
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4013      	ands	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685a      	ldr	r2, [r3, #4]
 80013e4:	2380      	movs	r3, #128	@ 0x80
 80013e6:	039b      	lsls	r3, r3, #14
 80013e8:	4013      	ands	r3, r2
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <HAL_GPIO_Init+0x2c4>)
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	3301      	adds	r3, #1
 80013fe:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	40da      	lsrs	r2, r3
 8001408:	1e13      	subs	r3, r2, #0
 800140a:	d000      	beq.n	800140e <HAL_GPIO_Init+0x2ba>
 800140c:	e6aa      	b.n	8001164 <HAL_GPIO_Init+0x10>
  }
}
 800140e:	46c0      	nop			@ (mov r8, r8)
 8001410:	46c0      	nop			@ (mov r8, r8)
 8001412:	46bd      	mov	sp, r7
 8001414:	b006      	add	sp, #24
 8001416:	bd80      	pop	{r7, pc}
 8001418:	40021800 	.word	0x40021800
 800141c:	50000400 	.word	0x50000400
 8001420:	50000800 	.word	0x50000800
 8001424:	50001400 	.word	0x50001400

08001428 <HAL_PWR_DisableWakeUpPin>:
  *                PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5 (*), PWR_WAKEUP_PIN6
  * @note   (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8001430:	4b06      	ldr	r3, [pc, #24]	@ (800144c <HAL_PWR_DisableWakeUpPin+0x24>)
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	212f      	movs	r1, #47	@ 0x2f
 8001438:	400b      	ands	r3, r1
 800143a:	43d9      	mvns	r1, r3
 800143c:	4b03      	ldr	r3, [pc, #12]	@ (800144c <HAL_PWR_DisableWakeUpPin+0x24>)
 800143e:	400a      	ands	r2, r1
 8001440:	609a      	str	r2, [r3, #8]
}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	46bd      	mov	sp, r7
 8001446:	b002      	add	sp, #8
 8001448:	bd80      	pop	{r7, pc}
 800144a:	46c0      	nop			@ (mov r8, r8)
 800144c:	40007000 	.word	0x40007000

08001450 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b086      	sub	sp, #24
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d101      	bne.n	8001462 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e1d0      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x1e>
 800146c:	e069      	b.n	8001542 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146e:	4bc8      	ldr	r3, [pc, #800]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2238      	movs	r2, #56	@ 0x38
 8001474:	4013      	ands	r3, r2
 8001476:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b08      	cmp	r3, #8
 800147c:	d105      	bne.n	800148a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d15d      	bne.n	8001542 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e1bc      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	2380      	movs	r3, #128	@ 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	429a      	cmp	r2, r3
 8001494:	d107      	bne.n	80014a6 <HAL_RCC_OscConfig+0x56>
 8001496:	4bbe      	ldr	r3, [pc, #760]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4bbd      	ldr	r3, [pc, #756]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800149c:	2180      	movs	r1, #128	@ 0x80
 800149e:	0249      	lsls	r1, r1, #9
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	e020      	b.n	80014e8 <HAL_RCC_OscConfig+0x98>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	23a0      	movs	r3, #160	@ 0xa0
 80014ac:	02db      	lsls	r3, r3, #11
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d10e      	bne.n	80014d0 <HAL_RCC_OscConfig+0x80>
 80014b2:	4bb7      	ldr	r3, [pc, #732]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	4bb6      	ldr	r3, [pc, #728]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80014b8:	2180      	movs	r1, #128	@ 0x80
 80014ba:	02c9      	lsls	r1, r1, #11
 80014bc:	430a      	orrs	r2, r1
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	4bb3      	ldr	r3, [pc, #716]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	4bb2      	ldr	r3, [pc, #712]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80014c6:	2180      	movs	r1, #128	@ 0x80
 80014c8:	0249      	lsls	r1, r1, #9
 80014ca:	430a      	orrs	r2, r1
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	e00b      	b.n	80014e8 <HAL_RCC_OscConfig+0x98>
 80014d0:	4baf      	ldr	r3, [pc, #700]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4bae      	ldr	r3, [pc, #696]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80014d6:	49af      	ldr	r1, [pc, #700]	@ (8001794 <HAL_RCC_OscConfig+0x344>)
 80014d8:	400a      	ands	r2, r1
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	4bac      	ldr	r3, [pc, #688]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4bab      	ldr	r3, [pc, #684]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80014e2:	49ad      	ldr	r1, [pc, #692]	@ (8001798 <HAL_RCC_OscConfig+0x348>)
 80014e4:	400a      	ands	r2, r1
 80014e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d014      	beq.n	800151a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f0:	f7ff fc48 	bl	8000d84 <HAL_GetTick>
 80014f4:	0003      	movs	r3, r0
 80014f6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80014fa:	f7ff fc43 	bl	8000d84 <HAL_GetTick>
 80014fe:	0002      	movs	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b64      	cmp	r3, #100	@ 0x64
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e17b      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800150c:	4ba0      	ldr	r3, [pc, #640]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	2380      	movs	r3, #128	@ 0x80
 8001512:	029b      	lsls	r3, r3, #10
 8001514:	4013      	ands	r3, r2
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0xaa>
 8001518:	e013      	b.n	8001542 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800151a:	f7ff fc33 	bl	8000d84 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001524:	f7ff fc2e 	bl	8000d84 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b64      	cmp	r3, #100	@ 0x64
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e166      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001536:	4b96      	ldr	r3, [pc, #600]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	2380      	movs	r3, #128	@ 0x80
 800153c:	029b      	lsls	r3, r3, #10
 800153e:	4013      	ands	r3, r2
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	2202      	movs	r2, #2
 8001548:	4013      	ands	r3, r2
 800154a:	d100      	bne.n	800154e <HAL_RCC_OscConfig+0xfe>
 800154c:	e086      	b.n	800165c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800154e:	4b90      	ldr	r3, [pc, #576]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	2238      	movs	r2, #56	@ 0x38
 8001554:	4013      	ands	r3, r2
 8001556:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d12f      	bne.n	80015be <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e14c      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156a:	4b89      	ldr	r3, [pc, #548]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	4a8b      	ldr	r2, [pc, #556]	@ (800179c <HAL_RCC_OscConfig+0x34c>)
 8001570:	4013      	ands	r3, r2
 8001572:	0019      	movs	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	695b      	ldr	r3, [r3, #20]
 8001578:	021a      	lsls	r2, r3, #8
 800157a:	4b85      	ldr	r3, [pc, #532]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800157c:	430a      	orrs	r2, r1
 800157e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d112      	bne.n	80015ac <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001586:	4b82      	ldr	r3, [pc, #520]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a85      	ldr	r2, [pc, #532]	@ (80017a0 <HAL_RCC_OscConfig+0x350>)
 800158c:	4013      	ands	r3, r2
 800158e:	0019      	movs	r1, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	4b7e      	ldr	r3, [pc, #504]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800159a:	4b7d      	ldr	r3, [pc, #500]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	0adb      	lsrs	r3, r3, #11
 80015a0:	2207      	movs	r2, #7
 80015a2:	4013      	ands	r3, r2
 80015a4:	4a7f      	ldr	r2, [pc, #508]	@ (80017a4 <HAL_RCC_OscConfig+0x354>)
 80015a6:	40da      	lsrs	r2, r3
 80015a8:	4b7f      	ldr	r3, [pc, #508]	@ (80017a8 <HAL_RCC_OscConfig+0x358>)
 80015aa:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80015ac:	4b7f      	ldr	r3, [pc, #508]	@ (80017ac <HAL_RCC_OscConfig+0x35c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	0018      	movs	r0, r3
 80015b2:	f7ff fb8b 	bl	8000ccc <HAL_InitTick>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d050      	beq.n	800165c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e122      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d030      	beq.n	8001628 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80015c6:	4b72      	ldr	r3, [pc, #456]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a75      	ldr	r2, [pc, #468]	@ (80017a0 <HAL_RCC_OscConfig+0x350>)
 80015cc:	4013      	ands	r3, r2
 80015ce:	0019      	movs	r1, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	4b6e      	ldr	r3, [pc, #440]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80015d6:	430a      	orrs	r2, r1
 80015d8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80015da:	4b6d      	ldr	r3, [pc, #436]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	4b6c      	ldr	r3, [pc, #432]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80015e0:	2180      	movs	r1, #128	@ 0x80
 80015e2:	0049      	lsls	r1, r1, #1
 80015e4:	430a      	orrs	r2, r1
 80015e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fbcc 	bl	8000d84 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80015f2:	f7ff fbc7 	bl	8000d84 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0ff      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001604:	4b62      	ldr	r3, [pc, #392]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	2380      	movs	r3, #128	@ 0x80
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4013      	ands	r3, r2
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001610:	4b5f      	ldr	r3, [pc, #380]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	4a61      	ldr	r2, [pc, #388]	@ (800179c <HAL_RCC_OscConfig+0x34c>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	695b      	ldr	r3, [r3, #20]
 800161e:	021a      	lsls	r2, r3, #8
 8001620:	4b5b      	ldr	r3, [pc, #364]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	e019      	b.n	800165c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001628:	4b59      	ldr	r3, [pc, #356]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	4b58      	ldr	r3, [pc, #352]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800162e:	4960      	ldr	r1, [pc, #384]	@ (80017b0 <HAL_RCC_OscConfig+0x360>)
 8001630:	400a      	ands	r2, r1
 8001632:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fba6 	bl	8000d84 <HAL_GetTick>
 8001638:	0003      	movs	r3, r0
 800163a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800163e:	f7ff fba1 	bl	8000d84 <HAL_GetTick>
 8001642:	0002      	movs	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e0d9      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001650:	4b4f      	ldr	r3, [pc, #316]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	2380      	movs	r3, #128	@ 0x80
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	4013      	ands	r3, r2
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2208      	movs	r2, #8
 8001662:	4013      	ands	r3, r2
 8001664:	d042      	beq.n	80016ec <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001666:	4b4a      	ldr	r3, [pc, #296]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2238      	movs	r2, #56	@ 0x38
 800166c:	4013      	ands	r3, r2
 800166e:	2b18      	cmp	r3, #24
 8001670:	d105      	bne.n	800167e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d138      	bne.n	80016ec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e0c2      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d019      	beq.n	80016ba <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001686:	4b42      	ldr	r3, [pc, #264]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001688:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800168a:	4b41      	ldr	r3, [pc, #260]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800168c:	2101      	movs	r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001692:	f7ff fb77 	bl	8000d84 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800169c:	f7ff fb72 	bl	8000d84 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e0aa      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80016ae:	4b38      	ldr	r3, [pc, #224]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80016b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016b2:	2202      	movs	r2, #2
 80016b4:	4013      	ands	r3, r2
 80016b6:	d0f1      	beq.n	800169c <HAL_RCC_OscConfig+0x24c>
 80016b8:	e018      	b.n	80016ec <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80016ba:	4b35      	ldr	r3, [pc, #212]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80016bc:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80016be:	4b34      	ldr	r3, [pc, #208]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80016c0:	2101      	movs	r1, #1
 80016c2:	438a      	bics	r2, r1
 80016c4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016c6:	f7ff fb5d 	bl	8000d84 <HAL_GetTick>
 80016ca:	0003      	movs	r3, r0
 80016cc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80016ce:	e008      	b.n	80016e2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80016d0:	f7ff fb58 	bl	8000d84 <HAL_GetTick>
 80016d4:	0002      	movs	r2, r0
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	1ad3      	subs	r3, r2, r3
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d901      	bls.n	80016e2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80016de:	2303      	movs	r3, #3
 80016e0:	e090      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80016e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 80016e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80016e6:	2202      	movs	r2, #2
 80016e8:	4013      	ands	r3, r2
 80016ea:	d1f1      	bne.n	80016d0 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2204      	movs	r2, #4
 80016f2:	4013      	ands	r3, r2
 80016f4:	d100      	bne.n	80016f8 <HAL_RCC_OscConfig+0x2a8>
 80016f6:	e084      	b.n	8001802 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f8:	230f      	movs	r3, #15
 80016fa:	18fb      	adds	r3, r7, r3
 80016fc:	2200      	movs	r2, #0
 80016fe:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001700:	4b23      	ldr	r3, [pc, #140]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	2238      	movs	r2, #56	@ 0x38
 8001706:	4013      	ands	r3, r2
 8001708:	2b20      	cmp	r3, #32
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d000      	beq.n	8001716 <HAL_RCC_OscConfig+0x2c6>
 8001714:	e075      	b.n	8001802 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e074      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d106      	bne.n	8001730 <HAL_RCC_OscConfig+0x2e0>
 8001722:	4b1b      	ldr	r3, [pc, #108]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001724:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001726:	4b1a      	ldr	r3, [pc, #104]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001728:	2101      	movs	r1, #1
 800172a:	430a      	orrs	r2, r1
 800172c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800172e:	e01c      	b.n	800176a <HAL_RCC_OscConfig+0x31a>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	2b05      	cmp	r3, #5
 8001736:	d10c      	bne.n	8001752 <HAL_RCC_OscConfig+0x302>
 8001738:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800173a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800173c:	4b14      	ldr	r3, [pc, #80]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800173e:	2104      	movs	r1, #4
 8001740:	430a      	orrs	r2, r1
 8001742:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001746:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001748:	4b11      	ldr	r3, [pc, #68]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 800174a:	2101      	movs	r1, #1
 800174c:	430a      	orrs	r2, r1
 800174e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001750:	e00b      	b.n	800176a <HAL_RCC_OscConfig+0x31a>
 8001752:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001754:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001756:	4b0e      	ldr	r3, [pc, #56]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001758:	2101      	movs	r1, #1
 800175a:	438a      	bics	r2, r1
 800175c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800175e:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001760:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001762:	4b0b      	ldr	r3, [pc, #44]	@ (8001790 <HAL_RCC_OscConfig+0x340>)
 8001764:	2104      	movs	r1, #4
 8001766:	438a      	bics	r2, r1
 8001768:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d028      	beq.n	80017c4 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001772:	f7ff fb07 	bl	8000d84 <HAL_GetTick>
 8001776:	0003      	movs	r3, r0
 8001778:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800177a:	e01d      	b.n	80017b8 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800177c:	f7ff fb02 	bl	8000d84 <HAL_GetTick>
 8001780:	0002      	movs	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	4a0b      	ldr	r2, [pc, #44]	@ (80017b4 <HAL_RCC_OscConfig+0x364>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d915      	bls.n	80017b8 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e039      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
 8001790:	40021000 	.word	0x40021000
 8001794:	fffeffff 	.word	0xfffeffff
 8001798:	fffbffff 	.word	0xfffbffff
 800179c:	ffff80ff 	.word	0xffff80ff
 80017a0:	ffffc7ff 	.word	0xffffc7ff
 80017a4:	02dc6c00 	.word	0x02dc6c00
 80017a8:	20000000 	.word	0x20000000
 80017ac:	20000004 	.word	0x20000004
 80017b0:	fffffeff 	.word	0xfffffeff
 80017b4:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017b8:	4b14      	ldr	r3, [pc, #80]	@ (800180c <HAL_RCC_OscConfig+0x3bc>)
 80017ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017bc:	2202      	movs	r2, #2
 80017be:	4013      	ands	r3, r2
 80017c0:	d0dc      	beq.n	800177c <HAL_RCC_OscConfig+0x32c>
 80017c2:	e013      	b.n	80017ec <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c4:	f7ff fade 	bl	8000d84 <HAL_GetTick>
 80017c8:	0003      	movs	r3, r0
 80017ca:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80017cc:	e009      	b.n	80017e2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ce:	f7ff fad9 	bl	8000d84 <HAL_GetTick>
 80017d2:	0002      	movs	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	4a0d      	ldr	r2, [pc, #52]	@ (8001810 <HAL_RCC_OscConfig+0x3c0>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d901      	bls.n	80017e2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80017de:	2303      	movs	r3, #3
 80017e0:	e010      	b.n	8001804 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80017e2:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <HAL_RCC_OscConfig+0x3bc>)
 80017e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e6:	2202      	movs	r2, #2
 80017e8:	4013      	ands	r3, r2
 80017ea:	d1f0      	bne.n	80017ce <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80017ec:	230f      	movs	r3, #15
 80017ee:	18fb      	adds	r3, r7, r3
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d105      	bne.n	8001802 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80017f6:	4b05      	ldr	r3, [pc, #20]	@ (800180c <HAL_RCC_OscConfig+0x3bc>)
 80017f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017fa:	4b04      	ldr	r3, [pc, #16]	@ (800180c <HAL_RCC_OscConfig+0x3bc>)
 80017fc:	4905      	ldr	r1, [pc, #20]	@ (8001814 <HAL_RCC_OscConfig+0x3c4>)
 80017fe:	400a      	ands	r2, r1
 8001800:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b006      	add	sp, #24
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40021000 	.word	0x40021000
 8001810:	00001388 	.word	0x00001388
 8001814:	efffffff 	.word	0xefffffff

08001818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
 8001820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	e0e9      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800182c:	4b76      	ldr	r3, [pc, #472]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2207      	movs	r2, #7
 8001832:	4013      	ands	r3, r2
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d91e      	bls.n	8001878 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b73      	ldr	r3, [pc, #460]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2207      	movs	r2, #7
 8001840:	4393      	bics	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 8001846:	683a      	ldr	r2, [r7, #0]
 8001848:	430a      	orrs	r2, r1
 800184a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800184c:	f7ff fa9a 	bl	8000d84 <HAL_GetTick>
 8001850:	0003      	movs	r3, r0
 8001852:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001854:	e009      	b.n	800186a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001856:	f7ff fa95 	bl	8000d84 <HAL_GetTick>
 800185a:	0002      	movs	r2, r0
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	4a6a      	ldr	r2, [pc, #424]	@ (8001a0c <HAL_RCC_ClockConfig+0x1f4>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d901      	bls.n	800186a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e0ca      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800186a:	4b67      	ldr	r3, [pc, #412]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2207      	movs	r2, #7
 8001870:	4013      	ands	r3, r2
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d1ee      	bne.n	8001856 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2202      	movs	r2, #2
 800187e:	4013      	ands	r3, r2
 8001880:	d017      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2204      	movs	r2, #4
 8001888:	4013      	ands	r3, r2
 800188a:	d008      	beq.n	800189e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800188c:	4b60      	ldr	r3, [pc, #384]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	4a60      	ldr	r2, [pc, #384]	@ (8001a14 <HAL_RCC_ClockConfig+0x1fc>)
 8001892:	401a      	ands	r2, r3
 8001894:	4b5e      	ldr	r3, [pc, #376]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 8001896:	21b0      	movs	r1, #176	@ 0xb0
 8001898:	0109      	lsls	r1, r1, #4
 800189a:	430a      	orrs	r2, r1
 800189c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800189e:	4b5c      	ldr	r3, [pc, #368]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	4a5d      	ldr	r2, [pc, #372]	@ (8001a18 <HAL_RCC_ClockConfig+0x200>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	4b58      	ldr	r3, [pc, #352]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4013      	ands	r3, r2
 80018ba:	d055      	beq.n	8001968 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80018bc:	4b54      	ldr	r3, [pc, #336]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	221c      	movs	r2, #28
 80018c2:	4393      	bics	r3, r2
 80018c4:	0019      	movs	r1, r3
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	4b51      	ldr	r3, [pc, #324]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80018cc:	430a      	orrs	r2, r1
 80018ce:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d107      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d8:	4b4d      	ldr	r3, [pc, #308]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	2380      	movs	r3, #128	@ 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	4013      	ands	r3, r2
 80018e2:	d11f      	bne.n	8001924 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e08b      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d107      	bne.n	8001900 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f0:	4b47      	ldr	r3, [pc, #284]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80018f2:	681a      	ldr	r2, [r3, #0]
 80018f4:	2380      	movs	r3, #128	@ 0x80
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4013      	ands	r3, r2
 80018fa:	d113      	bne.n	8001924 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e07f      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b03      	cmp	r3, #3
 8001906:	d106      	bne.n	8001916 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001908:	4b41      	ldr	r3, [pc, #260]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 800190a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800190c:	2202      	movs	r2, #2
 800190e:	4013      	ands	r3, r2
 8001910:	d108      	bne.n	8001924 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e074      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001916:	4b3e      	ldr	r3, [pc, #248]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 8001918:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800191a:	2202      	movs	r2, #2
 800191c:	4013      	ands	r3, r2
 800191e:	d101      	bne.n	8001924 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e06d      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001924:	4b3a      	ldr	r3, [pc, #232]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2207      	movs	r2, #7
 800192a:	4393      	bics	r3, r2
 800192c:	0019      	movs	r1, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	4b37      	ldr	r3, [pc, #220]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 8001934:	430a      	orrs	r2, r1
 8001936:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001938:	f7ff fa24 	bl	8000d84 <HAL_GetTick>
 800193c:	0003      	movs	r3, r0
 800193e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001940:	e009      	b.n	8001956 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001942:	f7ff fa1f 	bl	8000d84 <HAL_GetTick>
 8001946:	0002      	movs	r2, r0
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	4a2f      	ldr	r2, [pc, #188]	@ (8001a0c <HAL_RCC_ClockConfig+0x1f4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e054      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	2238      	movs	r2, #56	@ 0x38
 800195c:	401a      	ands	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	429a      	cmp	r2, r3
 8001966:	d1ec      	bne.n	8001942 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2207      	movs	r2, #7
 800196e:	4013      	ands	r3, r2
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d21e      	bcs.n	80019b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b24      	ldr	r3, [pc, #144]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2207      	movs	r2, #7
 800197c:	4393      	bics	r3, r2
 800197e:	0019      	movs	r1, r3
 8001980:	4b21      	ldr	r3, [pc, #132]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001988:	f7ff f9fc 	bl	8000d84 <HAL_GetTick>
 800198c:	0003      	movs	r3, r0
 800198e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001990:	e009      	b.n	80019a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001992:	f7ff f9f7 	bl	8000d84 <HAL_GetTick>
 8001996:	0002      	movs	r2, r0
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	4a1b      	ldr	r2, [pc, #108]	@ (8001a0c <HAL_RCC_ClockConfig+0x1f4>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e02c      	b.n	8001a00 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80019a6:	4b18      	ldr	r3, [pc, #96]	@ (8001a08 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2207      	movs	r2, #7
 80019ac:	4013      	ands	r3, r2
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d1ee      	bne.n	8001992 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2204      	movs	r2, #4
 80019ba:	4013      	ands	r3, r2
 80019bc:	d009      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	4a16      	ldr	r2, [pc, #88]	@ (8001a1c <HAL_RCC_ClockConfig+0x204>)
 80019c4:	4013      	ands	r3, r2
 80019c6:	0019      	movs	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691a      	ldr	r2, [r3, #16]
 80019cc:	4b10      	ldr	r3, [pc, #64]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80019d2:	f000 f82b 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 80019d6:	0001      	movs	r1, r0
 80019d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001a10 <HAL_RCC_ClockConfig+0x1f8>)
 80019da:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019dc:	0a1b      	lsrs	r3, r3, #8
 80019de:	220f      	movs	r2, #15
 80019e0:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80019e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001a20 <HAL_RCC_ClockConfig+0x208>)
 80019e4:	0092      	lsls	r2, r2, #2
 80019e6:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80019e8:	221f      	movs	r2, #31
 80019ea:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80019ec:	000a      	movs	r2, r1
 80019ee:	40da      	lsrs	r2, r3
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <HAL_RCC_ClockConfig+0x20c>)
 80019f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80019f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a28 <HAL_RCC_ClockConfig+0x210>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff f967 	bl	8000ccc <HAL_InitTick>
 80019fe:	0003      	movs	r3, r0
}
 8001a00:	0018      	movs	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	b004      	add	sp, #16
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	00001388 	.word	0x00001388
 8001a10:	40021000 	.word	0x40021000
 8001a14:	ffff84ff 	.word	0xffff84ff
 8001a18:	fffff0ff 	.word	0xfffff0ff
 8001a1c:	ffff8fff 	.word	0xffff8fff
 8001a20:	080057e0 	.word	0x080057e0
 8001a24:	20000000 	.word	0x20000000
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 8001a32:	4b23      	ldr	r3, [pc, #140]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	2207      	movs	r2, #7
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001a40:	4b1f      	ldr	r3, [pc, #124]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	2238      	movs	r2, #56	@ 0x38
 8001a46:	4013      	ands	r3, r2
 8001a48:	d10f      	bne.n	8001a6a <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	0adb      	lsrs	r3, r3, #11
 8001a50:	2207      	movs	r2, #7
 8001a52:	4013      	ands	r3, r2
 8001a54:	2201      	movs	r2, #1
 8001a56:	409a      	lsls	r2, r3
 8001a58:	0013      	movs	r3, r2
 8001a5a:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	4819      	ldr	r0, [pc, #100]	@ (8001ac4 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a60:	f7fe fb64 	bl	800012c <__udivsi3>
 8001a64:	0003      	movs	r3, r0
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	e01e      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a6a:	4b15      	ldr	r3, [pc, #84]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2238      	movs	r2, #56	@ 0x38
 8001a70:	4013      	ands	r3, r2
 8001a72:	2b08      	cmp	r3, #8
 8001a74:	d102      	bne.n	8001a7c <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a76:	4b14      	ldr	r3, [pc, #80]	@ (8001ac8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	e015      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2238      	movs	r2, #56	@ 0x38
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b20      	cmp	r3, #32
 8001a86:	d103      	bne.n	8001a90 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001a88:	2380      	movs	r3, #128	@ 0x80
 8001a8a:	021b      	lsls	r3, r3, #8
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	e00b      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001a90:	4b0b      	ldr	r3, [pc, #44]	@ (8001ac0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2238      	movs	r2, #56	@ 0x38
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b18      	cmp	r3, #24
 8001a9a:	d103      	bne.n	8001aa4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001a9c:	23fa      	movs	r3, #250	@ 0xfa
 8001a9e:	01db      	lsls	r3, r3, #7
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	e001      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	68f8      	ldr	r0, [r7, #12]
 8001aac:	f7fe fb3e 	bl	800012c <__udivsi3>
 8001ab0:	0003      	movs	r3, r0
 8001ab2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
}
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	b004      	add	sp, #16
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	46c0      	nop			@ (mov r8, r8)
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	02dc6c00 	.word	0x02dc6c00
 8001ac8:	007a1200 	.word	0x007a1200

08001acc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001ad0:	f7ff ffac 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8001ad4:	0001      	movs	r1, r0
 8001ad6:	4b09      	ldr	r3, [pc, #36]	@ (8001afc <HAL_RCC_GetHCLKFreq+0x30>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	220f      	movs	r2, #15
 8001ade:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001ae0:	4b07      	ldr	r3, [pc, #28]	@ (8001b00 <HAL_RCC_GetHCLKFreq+0x34>)
 8001ae2:	0092      	lsls	r2, r2, #2
 8001ae4:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ae6:	221f      	movs	r2, #31
 8001ae8:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001aea:	000a      	movs	r2, r1
 8001aec:	40da      	lsrs	r2, r3
 8001aee:	4b05      	ldr	r3, [pc, #20]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x38>)
 8001af0:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001af2:	4b04      	ldr	r3, [pc, #16]	@ (8001b04 <HAL_RCC_GetHCLKFreq+0x38>)
 8001af4:	681b      	ldr	r3, [r3, #0]
}
 8001af6:	0018      	movs	r0, r3
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40021000 	.word	0x40021000
 8001b00:	080057e0 	.word	0x080057e0
 8001b04:	20000000 	.word	0x20000000

08001b08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001b0c:	f7ff ffde 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8001b10:	0001      	movs	r1, r0
 8001b12:	4b07      	ldr	r3, [pc, #28]	@ (8001b30 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	0b1b      	lsrs	r3, r3, #12
 8001b18:	2207      	movs	r2, #7
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	4b05      	ldr	r3, [pc, #20]	@ (8001b34 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001b1e:	0092      	lsls	r2, r2, #2
 8001b20:	58d3      	ldr	r3, [r2, r3]
 8001b22:	221f      	movs	r2, #31
 8001b24:	4013      	ands	r3, r2
 8001b26:	40d9      	lsrs	r1, r3
 8001b28:	000b      	movs	r3, r1
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40021000 	.word	0x40021000
 8001b34:	08005820 	.word	0x08005820

08001b38 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b086      	sub	sp, #24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001b40:	2313      	movs	r3, #19
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001b48:	2312      	movs	r3, #18
 8001b4a:	18fb      	adds	r3, r7, r3
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2240      	movs	r2, #64	@ 0x40
 8001b56:	4013      	ands	r3, r2
 8001b58:	d100      	bne.n	8001b5c <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001b5a:	e079      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5c:	2011      	movs	r0, #17
 8001b5e:	183b      	adds	r3, r7, r0
 8001b60:	2200      	movs	r2, #0
 8001b62:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b64:	4b63      	ldr	r3, [pc, #396]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	055b      	lsls	r3, r3, #21
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	d110      	bne.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b70:	4b60      	ldr	r3, [pc, #384]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b74:	4b5f      	ldr	r3, [pc, #380]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b76:	2180      	movs	r1, #128	@ 0x80
 8001b78:	0549      	lsls	r1, r1, #21
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b7e:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b82:	2380      	movs	r3, #128	@ 0x80
 8001b84:	055b      	lsls	r3, r3, #21
 8001b86:	4013      	ands	r3, r2
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8c:	183b      	adds	r3, r7, r0
 8001b8e:	2201      	movs	r2, #1
 8001b90:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001b92:	4b58      	ldr	r3, [pc, #352]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b94:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001b96:	23c0      	movs	r3, #192	@ 0xc0
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d019      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	697a      	ldr	r2, [r7, #20]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d014      	beq.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001bae:	4b51      	ldr	r3, [pc, #324]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bb2:	4a51      	ldr	r2, [pc, #324]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bb8:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001bba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bbc:	4b4d      	ldr	r3, [pc, #308]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001bbe:	2180      	movs	r1, #128	@ 0x80
 8001bc0:	0249      	lsls	r1, r1, #9
 8001bc2:	430a      	orrs	r2, r1
 8001bc4:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bc6:	4b4b      	ldr	r3, [pc, #300]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001bc8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001bca:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001bcc:	494b      	ldr	r1, [pc, #300]	@ (8001cfc <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001bce:	400a      	ands	r2, r1
 8001bd0:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001bd2:	4b48      	ldr	r3, [pc, #288]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	4013      	ands	r3, r2
 8001bde:	d016      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff f8d0 	bl	8000d84 <HAL_GetTick>
 8001be4:	0003      	movs	r3, r0
 8001be6:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001be8:	e00c      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bea:	f7ff f8cb 	bl	8000d84 <HAL_GetTick>
 8001bee:	0002      	movs	r2, r0
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	4a42      	ldr	r2, [pc, #264]	@ (8001d00 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d904      	bls.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001bfa:	2313      	movs	r3, #19
 8001bfc:	18fb      	adds	r3, r7, r3
 8001bfe:	2203      	movs	r2, #3
 8001c00:	701a      	strb	r2, [r3, #0]
          break;
 8001c02:	e004      	b.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c04:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c08:	2202      	movs	r2, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d0ed      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001c0e:	2313      	movs	r3, #19
 8001c10:	18fb      	adds	r3, r7, r3
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d10a      	bne.n	8001c2e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c18:	4b36      	ldr	r3, [pc, #216]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c1c:	4a36      	ldr	r2, [pc, #216]	@ (8001cf8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	0019      	movs	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699a      	ldr	r2, [r3, #24]
 8001c26:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001c2c:	e005      	b.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c2e:	2312      	movs	r3, #18
 8001c30:	18fb      	adds	r3, r7, r3
 8001c32:	2213      	movs	r2, #19
 8001c34:	18ba      	adds	r2, r7, r2
 8001c36:	7812      	ldrb	r2, [r2, #0]
 8001c38:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c3a:	2311      	movs	r3, #17
 8001c3c:	18fb      	adds	r3, r7, r3
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d105      	bne.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c44:	4b2b      	ldr	r3, [pc, #172]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c48:	4b2a      	ldr	r3, [pc, #168]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c4a:	492e      	ldr	r1, [pc, #184]	@ (8001d04 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001c4c:	400a      	ands	r2, r1
 8001c4e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4013      	ands	r3, r2
 8001c58:	d009      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c5a:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c5e:	2203      	movs	r2, #3
 8001c60:	4393      	bics	r3, r2
 8001c62:	0019      	movs	r1, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	4b22      	ldr	r3, [pc, #136]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	2202      	movs	r2, #2
 8001c74:	4013      	ands	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c78:	4b1e      	ldr	r3, [pc, #120]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c7c:	4a22      	ldr	r2, [pc, #136]	@ (8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	4013      	ands	r3, r2
 8001c80:	0019      	movs	r1, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68da      	ldr	r2, [r3, #12]
 8001c86:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2220      	movs	r2, #32
 8001c92:	4013      	ands	r3, r2
 8001c94:	d008      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001c96:	4b17      	ldr	r3, [pc, #92]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	0899      	lsrs	r1, r3, #2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	4b14      	ldr	r3, [pc, #80]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2204      	movs	r2, #4
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d009      	beq.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001cb2:	4b10      	ldr	r3, [pc, #64]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cb6:	4a15      	ldr	r2, [pc, #84]	@ (8001d0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cb8:	4013      	ands	r3, r2
 8001cba:	0019      	movs	r1, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691a      	ldr	r2, [r3, #16]
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2280      	movs	r2, #128	@ 0x80
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d009      	beq.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001cd0:	4b08      	ldr	r3, [pc, #32]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	22e0      	movs	r2, #224	@ 0xe0
 8001cd6:	4393      	bics	r3, r2
 8001cd8:	0019      	movs	r1, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4b05      	ldr	r3, [pc, #20]	@ (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001ce4:	2312      	movs	r3, #18
 8001ce6:	18fb      	adds	r3, r7, r3
 8001ce8:	781b      	ldrb	r3, [r3, #0]
}
 8001cea:	0018      	movs	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	b006      	add	sp, #24
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	46c0      	nop			@ (mov r8, r8)
 8001cf4:	40021000 	.word	0x40021000
 8001cf8:	fffffcff 	.word	0xfffffcff
 8001cfc:	fffeffff 	.word	0xfffeffff
 8001d00:	00001388 	.word	0x00001388
 8001d04:	efffffff 	.word	0xefffffff
 8001d08:	ffffcfff 	.word	0xffffcfff
 8001d0c:	ffff3fff 	.word	0xffff3fff

08001d10 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d10:	b5b0      	push	{r4, r5, r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d18:	230f      	movs	r3, #15
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d100      	bne.n	8001d28 <HAL_RTC_Init+0x18>
 8001d26:	e075      	b.n	8001e14 <HAL_RTC_Init+0x104>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2225      	movs	r2, #37	@ 0x25
 8001d2c:	5c9b      	ldrb	r3, [r3, r2]
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d107      	bne.n	8001d44 <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2224      	movs	r2, #36	@ 0x24
 8001d38:	2100      	movs	r1, #0
 8001d3a:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	0018      	movs	r0, r3
 8001d40:	f7fe fe0c 	bl	800095c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2225      	movs	r2, #37	@ 0x25
 8001d48:	2102      	movs	r1, #2
 8001d4a:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2210      	movs	r2, #16
 8001d54:	4013      	ands	r3, r2
 8001d56:	2b10      	cmp	r3, #16
 8001d58:	d04f      	beq.n	8001dfa <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	22ca      	movs	r2, #202	@ 0xca
 8001d60:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2253      	movs	r2, #83	@ 0x53
 8001d68:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8001d6a:	250f      	movs	r5, #15
 8001d6c:	197c      	adds	r4, r7, r5
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 fadd 	bl	8002330 <RTC_EnterInitMode>
 8001d76:	0003      	movs	r3, r0
 8001d78:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8001d7a:	0028      	movs	r0, r5
 8001d7c:	183b      	adds	r3, r7, r0
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d121      	bne.n	8001dc8 <HAL_RTC_Init+0xb8>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL));
 8001d84:	4b27      	ldr	r3, [pc, #156]	@ (8001e24 <HAL_RTC_Init+0x114>)
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	4b26      	ldr	r3, [pc, #152]	@ (8001e24 <HAL_RTC_Init+0x114>)
 8001d8a:	4927      	ldr	r1, [pc, #156]	@ (8001e28 <HAL_RTC_Init+0x118>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	619a      	str	r2, [r3, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8001d90:	4b24      	ldr	r3, [pc, #144]	@ (8001e24 <HAL_RTC_Init+0x114>)
 8001d92:	6999      	ldr	r1, [r3, #24]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685a      	ldr	r2, [r3, #4]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	699b      	ldr	r3, [r3, #24]
 8001da2:	431a      	orrs	r2, r3
 8001da4:	4b1f      	ldr	r3, [pc, #124]	@ (8001e24 <HAL_RTC_Init+0x114>)
 8001da6:	430a      	orrs	r2, r1
 8001da8:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68d9      	ldr	r1, [r3, #12]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	041a      	lsls	r2, r3, #16
 8001db4:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <HAL_RTC_Init+0x114>)
 8001db6:	430a      	orrs	r2, r1
 8001db8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8001dba:	183c      	adds	r4, r7, r0
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 fafe 	bl	80023c0 <RTC_ExitInitMode>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8001dc8:	230f      	movs	r3, #15
 8001dca:	18fb      	adds	r3, r7, r3
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10e      	bne.n	8001df0 <HAL_RTC_Init+0xe0>
      {
        MODIFY_REG(RTC->CR, \
 8001dd2:	4b14      	ldr	r3, [pc, #80]	@ (8001e24 <HAL_RTC_Init+0x114>)
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	08d9      	lsrs	r1, r3, #3
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a1a      	ldr	r2, [r3, #32]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	69db      	ldr	r3, [r3, #28]
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	431a      	orrs	r2, r3
 8001dea:	4b0e      	ldr	r3, [pc, #56]	@ (8001e24 <HAL_RTC_Init+0x114>)
 8001dec:	430a      	orrs	r2, r1
 8001dee:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	22ff      	movs	r2, #255	@ 0xff
 8001df6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001df8:	e003      	b.n	8001e02 <HAL_RTC_Init+0xf2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8001dfa:	230f      	movs	r3, #15
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8001e02:	230f      	movs	r3, #15
 8001e04:	18fb      	adds	r3, r7, r3
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d103      	bne.n	8001e14 <HAL_RTC_Init+0x104>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2225      	movs	r2, #37	@ 0x25
 8001e10:	2101      	movs	r1, #1
 8001e12:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8001e14:	230f      	movs	r3, #15
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	781b      	ldrb	r3, [r3, #0]
}
 8001e1a:	0018      	movs	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	b004      	add	sp, #16
 8001e20:	bdb0      	pop	{r4, r5, r7, pc}
 8001e22:	46c0      	nop			@ (mov r8, r8)
 8001e24:	40002800 	.word	0x40002800
 8001e28:	ff8fffbf 	.word	0xff8fffbf

08001e2c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001e2c:	b5b0      	push	{r4, r5, r7, lr}
 8001e2e:	b086      	sub	sp, #24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	60b9      	str	r1, [r7, #8]
 8001e36:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2224      	movs	r2, #36	@ 0x24
 8001e3c:	5c9b      	ldrb	r3, [r3, r2]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d101      	bne.n	8001e46 <HAL_RTC_SetTime+0x1a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	e092      	b.n	8001f6c <HAL_RTC_SetTime+0x140>
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2224      	movs	r2, #36	@ 0x24
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2225      	movs	r2, #37	@ 0x25
 8001e52:	2102      	movs	r1, #2
 8001e54:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	22ca      	movs	r2, #202	@ 0xca
 8001e5c:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2253      	movs	r2, #83	@ 0x53
 8001e64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001e66:	2513      	movs	r5, #19
 8001e68:	197c      	adds	r4, r7, r5
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f000 fa5f 	bl	8002330 <RTC_EnterInitMode>
 8001e72:	0003      	movs	r3, r0
 8001e74:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001e76:	197b      	adds	r3, r7, r5
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d162      	bne.n	8001f44 <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d125      	bne.n	8001ed0 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	2240      	movs	r2, #64	@ 0x40
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d102      	bne.n	8001e96 <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	2200      	movs	r2, #0
 8001e94:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f000 fad4 	bl	8002448 <RTC_ByteToBcd2>
 8001ea0:	0003      	movs	r3, r0
 8001ea2:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	785b      	ldrb	r3, [r3, #1]
 8001ea8:	0018      	movs	r0, r3
 8001eaa:	f000 facd 	bl	8002448 <RTC_ByteToBcd2>
 8001eae:	0003      	movs	r3, r0
 8001eb0:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001eb2:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	789b      	ldrb	r3, [r3, #2]
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f000 fac5 	bl	8002448 <RTC_ByteToBcd2>
 8001ebe:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ec0:	0022      	movs	r2, r4
 8001ec2:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	78db      	ldrb	r3, [r3, #3]
 8001ec8:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	e017      	b.n	8001f00 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	2240      	movs	r2, #64	@ 0x40
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d102      	bne.n	8001ee2 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	785b      	ldrb	r3, [r3, #1]
 8001eec:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001eee:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001ef0:	68ba      	ldr	r2, [r7, #8]
 8001ef2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ef4:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	78db      	ldrb	r3, [r3, #3]
 8001efa:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	491b      	ldr	r1, [pc, #108]	@ (8001f74 <HAL_RTC_SetTime+0x148>)
 8001f08:	400a      	ands	r2, r1
 8001f0a:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4918      	ldr	r1, [pc, #96]	@ (8001f78 <HAL_RTC_SetTime+0x14c>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6999      	ldr	r1, [r3, #24]
 8001f22:	68bb      	ldr	r3, [r7, #8]
 8001f24:	68da      	ldr	r2, [r3, #12]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	430a      	orrs	r2, r1
 8001f32:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001f34:	2313      	movs	r3, #19
 8001f36:	18fc      	adds	r4, r7, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f000 fa40 	bl	80023c0 <RTC_ExitInitMode>
 8001f40:	0003      	movs	r3, r0
 8001f42:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	22ff      	movs	r2, #255	@ 0xff
 8001f4a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001f4c:	2313      	movs	r3, #19
 8001f4e:	18fb      	adds	r3, r7, r3
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d103      	bne.n	8001f5e <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2225      	movs	r2, #37	@ 0x25
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2224      	movs	r2, #36	@ 0x24
 8001f62:	2100      	movs	r1, #0
 8001f64:	5499      	strb	r1, [r3, r2]

  return status;
 8001f66:	2313      	movs	r3, #19
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	781b      	ldrb	r3, [r3, #0]
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b006      	add	sp, #24
 8001f72:	bdb0      	pop	{r4, r5, r7, pc}
 8001f74:	007f7f7f 	.word	0x007f7f7f
 8001f78:	fffbffff 	.word	0xfffbffff

08001f7c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001f7c:	b5b0      	push	{r4, r5, r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2224      	movs	r2, #36	@ 0x24
 8001f8c:	5c9b      	ldrb	r3, [r3, r2]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d101      	bne.n	8001f96 <HAL_RTC_SetDate+0x1a>
 8001f92:	2302      	movs	r3, #2
 8001f94:	e07e      	b.n	8002094 <HAL_RTC_SetDate+0x118>
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2224      	movs	r2, #36	@ 0x24
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2225      	movs	r2, #37	@ 0x25
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10e      	bne.n	8001fca <HAL_RTC_SetDate+0x4e>
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	785b      	ldrb	r3, [r3, #1]
 8001fb0:	001a      	movs	r2, r3
 8001fb2:	2310      	movs	r3, #16
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d008      	beq.n	8001fca <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	785b      	ldrb	r3, [r3, #1]
 8001fbc:	2210      	movs	r2, #16
 8001fbe:	4393      	bics	r3, r2
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	330a      	adds	r3, #10
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d11c      	bne.n	800200a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	78db      	ldrb	r3, [r3, #3]
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	f000 fa37 	bl	8002448 <RTC_ByteToBcd2>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	785b      	ldrb	r3, [r3, #1]
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f000 fa30 	bl	8002448 <RTC_ByteToBcd2>
 8001fe8:	0003      	movs	r3, r0
 8001fea:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001fec:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	789b      	ldrb	r3, [r3, #2]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f000 fa28 	bl	8002448 <RTC_ByteToBcd2>
 8001ff8:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001ffa:	0022      	movs	r2, r4
 8001ffc:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002004:	4313      	orrs	r3, r2
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e00e      	b.n	8002028 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	78db      	ldrb	r3, [r3, #3]
 800200e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	785b      	ldrb	r3, [r3, #1]
 8002014:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002016:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800201c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002024:	4313      	orrs	r3, r2
 8002026:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	22ca      	movs	r2, #202	@ 0xca
 800202e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2253      	movs	r2, #83	@ 0x53
 8002036:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002038:	2513      	movs	r5, #19
 800203a:	197c      	adds	r4, r7, r5
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	0018      	movs	r0, r3
 8002040:	f000 f976 	bl	8002330 <RTC_EnterInitMode>
 8002044:	0003      	movs	r3, r0
 8002046:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002048:	0028      	movs	r0, r5
 800204a:	183b      	adds	r3, r7, r0
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d10c      	bne.n	800206c <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	697a      	ldr	r2, [r7, #20]
 8002058:	4910      	ldr	r1, [pc, #64]	@ (800209c <HAL_RTC_SetDate+0x120>)
 800205a:	400a      	ands	r2, r1
 800205c:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800205e:	183c      	adds	r4, r7, r0
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	0018      	movs	r0, r3
 8002064:	f000 f9ac 	bl	80023c0 <RTC_ExitInitMode>
 8002068:	0003      	movs	r3, r0
 800206a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	22ff      	movs	r2, #255	@ 0xff
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002074:	2313      	movs	r3, #19
 8002076:	18fb      	adds	r3, r7, r3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d103      	bne.n	8002086 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2225      	movs	r2, #37	@ 0x25
 8002082:	2101      	movs	r1, #1
 8002084:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2224      	movs	r2, #36	@ 0x24
 800208a:	2100      	movs	r1, #0
 800208c:	5499      	strb	r1, [r3, r2]

  return status;
 800208e:	2313      	movs	r3, #19
 8002090:	18fb      	adds	r3, r7, r3
 8002092:	781b      	ldrb	r3, [r3, #0]
}
 8002094:	0018      	movs	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	b006      	add	sp, #24
 800209a:	bdb0      	pop	{r4, r5, r7, pc}
 800209c:	00ffff3f 	.word	0x00ffff3f

080020a0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80020a0:	b590      	push	{r4, r7, lr}
 80020a2:	b089      	sub	sp, #36	@ 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2224      	movs	r2, #36	@ 0x24
 80020b0:	5c9b      	ldrb	r3, [r3, r2]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_RTC_SetAlarm_IT+0x1a>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e0d6      	b.n	8002268 <HAL_RTC_SetAlarm_IT+0x1c8>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2224      	movs	r2, #36	@ 0x24
 80020be:	2101      	movs	r1, #1
 80020c0:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2225      	movs	r2, #37	@ 0x25
 80020c6:	2102      	movs	r1, #2
 80020c8:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d136      	bne.n	800213e <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2240      	movs	r2, #64	@ 0x40
 80020d8:	4013      	ands	r3, r2
 80020da:	d102      	bne.n	80020e2 <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2200      	movs	r2, #0
 80020e0:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 f9ae 	bl	8002448 <RTC_ByteToBcd2>
 80020ec:	0003      	movs	r3, r0
 80020ee:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	785b      	ldrb	r3, [r3, #1]
 80020f4:	0018      	movs	r0, r3
 80020f6:	f000 f9a7 	bl	8002448 <RTC_ByteToBcd2>
 80020fa:	0003      	movs	r3, r0
 80020fc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80020fe:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	789b      	ldrb	r3, [r3, #2]
 8002104:	0018      	movs	r0, r3
 8002106:	f000 f99f 	bl	8002448 <RTC_ByteToBcd2>
 800210a:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800210c:	0022      	movs	r2, r4
 800210e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	78db      	ldrb	r3, [r3, #3]
 8002114:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8002116:	431a      	orrs	r2, r3
 8002118:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2220      	movs	r2, #32
 800211e:	5c9b      	ldrb	r3, [r3, r2]
 8002120:	0018      	movs	r0, r3
 8002122:	f000 f991 	bl	8002448 <RTC_ByteToBcd2>
 8002126:	0003      	movs	r3, r0
 8002128:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800212a:	0022      	movs	r2, r4
 800212c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8002132:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002138:	4313      	orrs	r3, r2
 800213a:	61fb      	str	r3, [r7, #28]
 800213c:	e022      	b.n	8002184 <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	2240      	movs	r2, #64	@ 0x40
 8002146:	4013      	ands	r3, r2
 8002148:	d102      	bne.n	8002150 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	2200      	movs	r2, #0
 800214e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	785b      	ldrb	r3, [r3, #1]
 800215a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800215c:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8002162:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	78db      	ldrb	r3, [r3, #3]
 8002168:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800216a:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	2120      	movs	r1, #32
 8002170:	5c5b      	ldrb	r3, [r3, r1]
 8002172:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8002174:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800217a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8002180:	4313      	orrs	r3, r2
 8002182:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	685a      	ldr	r2, [r3, #4]
 8002188:	68bb      	ldr	r3, [r7, #8]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	22ca      	movs	r2, #202	@ 0xca
 8002196:	625a      	str	r2, [r3, #36]	@ 0x24
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	2253      	movs	r2, #83	@ 0x53
 800219e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021a4:	2380      	movs	r3, #128	@ 0x80
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d147      	bne.n	800223c <HAL_RTC_SetAlarm_IT+0x19c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	699a      	ldr	r2, [r3, #24]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	492e      	ldr	r1, [pc, #184]	@ (8002270 <HAL_RTC_SetAlarm_IT+0x1d0>)
 80021b8:	400a      	ands	r2, r1
 80021ba:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2201      	movs	r2, #1
 80021c2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 80021c4:	f7fe fdde 	bl	8000d84 <HAL_GetTick>
 80021c8:	0003      	movs	r3, r0
 80021ca:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80021cc:	e016      	b.n	80021fc <HAL_RTC_SetAlarm_IT+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021ce:	f7fe fdd9 	bl	8000d84 <HAL_GetTick>
 80021d2:	0002      	movs	r2, r0
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1ad2      	subs	r2, r2, r3
 80021d8:	23fa      	movs	r3, #250	@ 0xfa
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	429a      	cmp	r2, r3
 80021de:	d90d      	bls.n	80021fc <HAL_RTC_SetAlarm_IT+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	22ff      	movs	r2, #255	@ 0xff
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2225      	movs	r2, #37	@ 0x25
 80021ec:	2103      	movs	r1, #3
 80021ee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2224      	movs	r2, #36	@ 0x24
 80021f4:	2100      	movs	r1, #0
 80021f6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e035      	b.n	8002268 <HAL_RTC_SetAlarm_IT+0x1c8>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	2201      	movs	r2, #1
 8002204:	4013      	ands	r3, r2
 8002206:	d0e2      	beq.n	80021ce <HAL_RTC_SetAlarm_IT+0x12e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	699a      	ldr	r2, [r3, #24]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2180      	movs	r1, #128	@ 0x80
 8002224:	0049      	lsls	r1, r1, #1
 8002226:	430a      	orrs	r2, r1
 8002228:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	699a      	ldr	r2, [r3, #24]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2180      	movs	r1, #128	@ 0x80
 8002236:	0149      	lsls	r1, r1, #5
 8002238:	430a      	orrs	r2, r1
 800223a:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 800223c:	4a0d      	ldr	r2, [pc, #52]	@ (8002274 <HAL_RTC_SetAlarm_IT+0x1d4>)
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	58d3      	ldr	r3, [r2, r3]
 8002242:	490c      	ldr	r1, [pc, #48]	@ (8002274 <HAL_RTC_SetAlarm_IT+0x1d4>)
 8002244:	2280      	movs	r2, #128	@ 0x80
 8002246:	0312      	lsls	r2, r2, #12
 8002248:	4313      	orrs	r3, r2
 800224a:	2280      	movs	r2, #128	@ 0x80
 800224c:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	22ff      	movs	r2, #255	@ 0xff
 8002254:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2225      	movs	r2, #37	@ 0x25
 800225a:	2101      	movs	r1, #1
 800225c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2224      	movs	r2, #36	@ 0x24
 8002262:	2100      	movs	r1, #0
 8002264:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b009      	add	sp, #36	@ 0x24
 800226e:	bd90      	pop	{r4, r7, pc}
 8002270:	fffffeff 	.word	0xfffffeff
 8002274:	40021800 	.word	0x40021800

08002278 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	699a      	ldr	r2, [r3, #24]
 8002286:	2380      	movs	r3, #128	@ 0x80
 8002288:	015b      	lsls	r3, r3, #5
 800228a:	4013      	ands	r3, r2
 800228c:	d00d      	beq.n	80022aa <HAL_RTC_AlarmIRQHandler+0x32>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002294:	2201      	movs	r2, #1
 8002296:	4013      	ands	r3, r2
 8002298:	d007      	beq.n	80022aa <HAL_RTC_AlarmIRQHandler+0x32>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2201      	movs	r2, #1
 80022a0:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	0018      	movs	r0, r3
 80022a6:	f000 f808 	bl	80022ba <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2225      	movs	r2, #37	@ 0x25
 80022ae:	2101      	movs	r1, #1
 80022b0:	5499      	strb	r1, [r3, r2]
}
 80022b2:	46c0      	nop			@ (mov r8, r8)
 80022b4:	46bd      	mov	sp, r7
 80022b6:	b002      	add	sp, #8
 80022b8:	bd80      	pop	{r7, pc}

080022ba <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80022ba:	b580      	push	{r7, lr}
 80022bc:	b082      	sub	sp, #8
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80022c2:	46c0      	nop			@ (mov r8, r8)
 80022c4:	46bd      	mov	sp, r7
 80022c6:	b002      	add	sp, #8
 80022c8:	bd80      	pop	{r7, pc}
	...

080022cc <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 80022d4:	4b15      	ldr	r3, [pc, #84]	@ (800232c <HAL_RTC_WaitForSynchro+0x60>)
 80022d6:	68da      	ldr	r2, [r3, #12]
 80022d8:	4b14      	ldr	r3, [pc, #80]	@ (800232c <HAL_RTC_WaitForSynchro+0x60>)
 80022da:	2120      	movs	r1, #32
 80022dc:	438a      	bics	r2, r1
 80022de:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 80022e0:	f7fe fd50 	bl	8000d84 <HAL_GetTick>
 80022e4:	0003      	movs	r3, r0
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80022e8:	e013      	b.n	8002312 <HAL_RTC_WaitForSynchro+0x46>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80022ea:	f7fe fd4b 	bl	8000d84 <HAL_GetTick>
 80022ee:	0002      	movs	r2, r0
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1ad2      	subs	r2, r2, r3
 80022f4:	23fa      	movs	r3, #250	@ 0xfa
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d90a      	bls.n	8002312 <HAL_RTC_WaitForSynchro+0x46>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 80022fc:	4b0b      	ldr	r3, [pc, #44]	@ (800232c <HAL_RTC_WaitForSynchro+0x60>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	2220      	movs	r2, #32
 8002302:	4013      	ands	r3, r2
 8002304:	d10b      	bne.n	800231e <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2225      	movs	r2, #37	@ 0x25
 800230a:	2103      	movs	r1, #3
 800230c:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e007      	b.n	8002322 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8002312:	4b06      	ldr	r3, [pc, #24]	@ (800232c <HAL_RTC_WaitForSynchro+0x60>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	2220      	movs	r2, #32
 8002318:	4013      	ands	r3, r2
 800231a:	d0e6      	beq.n	80022ea <HAL_RTC_WaitForSynchro+0x1e>
 800231c:	e000      	b.n	8002320 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800231e:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	0018      	movs	r0, r3
 8002324:	46bd      	mov	sp, r7
 8002326:	b004      	add	sp, #16
 8002328:	bd80      	pop	{r7, pc}
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	40002800 	.word	0x40002800

08002330 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002338:	230f      	movs	r3, #15
 800233a:	18fb      	adds	r3, r7, r3
 800233c:	2200      	movs	r2, #0
 800233e:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8002340:	4b1e      	ldr	r3, [pc, #120]	@ (80023bc <RTC_EnterInitMode+0x8c>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	2240      	movs	r2, #64	@ 0x40
 8002346:	4013      	ands	r3, r2
 8002348:	d130      	bne.n	80023ac <RTC_EnterInitMode+0x7c>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800234a:	4b1c      	ldr	r3, [pc, #112]	@ (80023bc <RTC_EnterInitMode+0x8c>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	4b1b      	ldr	r3, [pc, #108]	@ (80023bc <RTC_EnterInitMode+0x8c>)
 8002350:	2180      	movs	r1, #128	@ 0x80
 8002352:	430a      	orrs	r2, r1
 8002354:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002356:	f7fe fd15 	bl	8000d84 <HAL_GetTick>
 800235a:	0003      	movs	r3, r0
 800235c:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800235e:	e019      	b.n	8002394 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002360:	f7fe fd10 	bl	8000d84 <HAL_GetTick>
 8002364:	0002      	movs	r2, r0
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	1ad2      	subs	r2, r2, r3
 800236a:	200f      	movs	r0, #15
 800236c:	183b      	adds	r3, r7, r0
 800236e:	1839      	adds	r1, r7, r0
 8002370:	7809      	ldrb	r1, [r1, #0]
 8002372:	7019      	strb	r1, [r3, #0]
 8002374:	23fa      	movs	r3, #250	@ 0xfa
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d90b      	bls.n	8002394 <RTC_EnterInitMode+0x64>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800237c:	4b0f      	ldr	r3, [pc, #60]	@ (80023bc <RTC_EnterInitMode+0x8c>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2240      	movs	r2, #64	@ 0x40
 8002382:	4013      	ands	r3, r2
 8002384:	d111      	bne.n	80023aa <RTC_EnterInitMode+0x7a>
        {
          status = HAL_TIMEOUT;
 8002386:	183b      	adds	r3, r7, r0
 8002388:	2203      	movs	r2, #3
 800238a:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2225      	movs	r2, #37	@ 0x25
 8002390:	2103      	movs	r1, #3
 8002392:	5499      	strb	r1, [r3, r2]
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002394:	4b09      	ldr	r3, [pc, #36]	@ (80023bc <RTC_EnterInitMode+0x8c>)
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2240      	movs	r2, #64	@ 0x40
 800239a:	4013      	ands	r3, r2
 800239c:	d106      	bne.n	80023ac <RTC_EnterInitMode+0x7c>
 800239e:	230f      	movs	r3, #15
 80023a0:	18fb      	adds	r3, r7, r3
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	2b03      	cmp	r3, #3
 80023a6:	d1db      	bne.n	8002360 <RTC_EnterInitMode+0x30>
 80023a8:	e000      	b.n	80023ac <RTC_EnterInitMode+0x7c>
        }
        else
        {
          break;
 80023aa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return status;
 80023ac:	230f      	movs	r3, #15
 80023ae:	18fb      	adds	r3, r7, r3
 80023b0:	781b      	ldrb	r3, [r3, #0]
}
 80023b2:	0018      	movs	r0, r3
 80023b4:	46bd      	mov	sp, r7
 80023b6:	b004      	add	sp, #16
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	46c0      	nop			@ (mov r8, r8)
 80023bc:	40002800 	.word	0x40002800

080023c0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	b085      	sub	sp, #20
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023c8:	240f      	movs	r4, #15
 80023ca:	193b      	adds	r3, r7, r4
 80023cc:	2200      	movs	r2, #0
 80023ce:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80023d0:	4b1c      	ldr	r3, [pc, #112]	@ (8002444 <RTC_ExitInitMode+0x84>)
 80023d2:	68da      	ldr	r2, [r3, #12]
 80023d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002444 <RTC_ExitInitMode+0x84>)
 80023d6:	2180      	movs	r1, #128	@ 0x80
 80023d8:	438a      	bics	r2, r1
 80023da:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80023dc:	4b19      	ldr	r3, [pc, #100]	@ (8002444 <RTC_ExitInitMode+0x84>)
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	2220      	movs	r2, #32
 80023e2:	4013      	ands	r3, r2
 80023e4:	d10d      	bne.n	8002402 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	0018      	movs	r0, r3
 80023ea:	f7ff ff6f 	bl	80022cc <HAL_RTC_WaitForSynchro>
 80023ee:	1e03      	subs	r3, r0, #0
 80023f0:	d021      	beq.n	8002436 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2225      	movs	r2, #37	@ 0x25
 80023f6:	2103      	movs	r1, #3
 80023f8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80023fa:	193b      	adds	r3, r7, r4
 80023fc:	2203      	movs	r2, #3
 80023fe:	701a      	strb	r2, [r3, #0]
 8002400:	e019      	b.n	8002436 <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002402:	4b10      	ldr	r3, [pc, #64]	@ (8002444 <RTC_ExitInitMode+0x84>)
 8002404:	699a      	ldr	r2, [r3, #24]
 8002406:	4b0f      	ldr	r3, [pc, #60]	@ (8002444 <RTC_ExitInitMode+0x84>)
 8002408:	2120      	movs	r1, #32
 800240a:	438a      	bics	r2, r1
 800240c:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff ff5b 	bl	80022cc <HAL_RTC_WaitForSynchro>
 8002416:	1e03      	subs	r3, r0, #0
 8002418:	d007      	beq.n	800242a <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2225      	movs	r2, #37	@ 0x25
 800241e:	2103      	movs	r1, #3
 8002420:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002422:	230f      	movs	r3, #15
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	2203      	movs	r2, #3
 8002428:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800242a:	4b06      	ldr	r3, [pc, #24]	@ (8002444 <RTC_ExitInitMode+0x84>)
 800242c:	699a      	ldr	r2, [r3, #24]
 800242e:	4b05      	ldr	r3, [pc, #20]	@ (8002444 <RTC_ExitInitMode+0x84>)
 8002430:	2120      	movs	r1, #32
 8002432:	430a      	orrs	r2, r1
 8002434:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002436:	230f      	movs	r3, #15
 8002438:	18fb      	adds	r3, r7, r3
 800243a:	781b      	ldrb	r3, [r3, #0]
}
 800243c:	0018      	movs	r0, r3
 800243e:	46bd      	mov	sp, r7
 8002440:	b005      	add	sp, #20
 8002442:	bd90      	pop	{r4, r7, pc}
 8002444:	40002800 	.word	0x40002800

08002448 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	0002      	movs	r2, r0
 8002450:	1dfb      	adds	r3, r7, #7
 8002452:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002458:	230b      	movs	r3, #11
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	1dfa      	adds	r2, r7, #7
 800245e:	7812      	ldrb	r2, [r2, #0]
 8002460:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002462:	e008      	b.n	8002476 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	3301      	adds	r3, #1
 8002468:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 800246a:	220b      	movs	r2, #11
 800246c:	18bb      	adds	r3, r7, r2
 800246e:	18ba      	adds	r2, r7, r2
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	3a0a      	subs	r2, #10
 8002474:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002476:	210b      	movs	r1, #11
 8002478:	187b      	adds	r3, r7, r1
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	2b09      	cmp	r3, #9
 800247e:	d8f1      	bhi.n	8002464 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	b2da      	uxtb	r2, r3
 8002488:	187b      	adds	r3, r7, r1
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	4313      	orrs	r3, r2
 800248e:	b2db      	uxtb	r3, r3
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b004      	add	sp, #16
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e046      	b.n	8002538 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2288      	movs	r2, #136	@ 0x88
 80024ae:	589b      	ldr	r3, [r3, r2]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d107      	bne.n	80024c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2284      	movs	r2, #132	@ 0x84
 80024b8:	2100      	movs	r1, #0
 80024ba:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	0018      	movs	r0, r3
 80024c0:	f7fe fa92 	bl	80009e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2288      	movs	r2, #136	@ 0x88
 80024c8:	2124      	movs	r1, #36	@ 0x24
 80024ca:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2101      	movs	r1, #1
 80024d8:	438a      	bics	r2, r1
 80024da:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d003      	beq.n	80024ec <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 fdb0 	bl	800304c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f000 fc2e 	bl	8002d50 <UART_SetConfig>
 80024f4:	0003      	movs	r3, r0
 80024f6:	2b01      	cmp	r3, #1
 80024f8:	d101      	bne.n	80024fe <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	e01c      	b.n	8002538 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	490d      	ldr	r1, [pc, #52]	@ (8002540 <HAL_UART_Init+0xa8>)
 800250a:	400a      	ands	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	212a      	movs	r1, #42	@ 0x2a
 800251a:	438a      	bics	r2, r1
 800251c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2101      	movs	r1, #1
 800252a:	430a      	orrs	r2, r1
 800252c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	0018      	movs	r0, r3
 8002532:	f000 fe3f 	bl	80031b4 <UART_CheckIdleState>
 8002536:	0003      	movs	r3, r0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}
 8002540:	ffffb7ff 	.word	0xffffb7ff

08002544 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	@ 0x28
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	603b      	str	r3, [r7, #0]
 8002550:	1dbb      	adds	r3, r7, #6
 8002552:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2288      	movs	r2, #136	@ 0x88
 8002558:	589b      	ldr	r3, [r3, r2]
 800255a:	2b20      	cmp	r3, #32
 800255c:	d000      	beq.n	8002560 <HAL_UART_Transmit+0x1c>
 800255e:	e090      	b.n	8002682 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_UART_Transmit+0x2a>
 8002566:	1dbb      	adds	r3, r7, #6
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e088      	b.n	8002684 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	689a      	ldr	r2, [r3, #8]
 8002576:	2380      	movs	r3, #128	@ 0x80
 8002578:	015b      	lsls	r3, r3, #5
 800257a:	429a      	cmp	r2, r3
 800257c:	d109      	bne.n	8002592 <HAL_UART_Transmit+0x4e>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d105      	bne.n	8002592 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2201      	movs	r2, #1
 800258a:	4013      	ands	r3, r2
 800258c:	d001      	beq.n	8002592 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e078      	b.n	8002684 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2290      	movs	r2, #144	@ 0x90
 8002596:	2100      	movs	r1, #0
 8002598:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2288      	movs	r2, #136	@ 0x88
 800259e:	2121      	movs	r1, #33	@ 0x21
 80025a0:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80025a2:	f7fe fbef 	bl	8000d84 <HAL_GetTick>
 80025a6:	0003      	movs	r3, r0
 80025a8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	1dba      	adds	r2, r7, #6
 80025ae:	2154      	movs	r1, #84	@ 0x54
 80025b0:	8812      	ldrh	r2, [r2, #0]
 80025b2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	1dba      	adds	r2, r7, #6
 80025b8:	2156      	movs	r1, #86	@ 0x56
 80025ba:	8812      	ldrh	r2, [r2, #0]
 80025bc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	689a      	ldr	r2, [r3, #8]
 80025c2:	2380      	movs	r3, #128	@ 0x80
 80025c4:	015b      	lsls	r3, r3, #5
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d108      	bne.n	80025dc <HAL_UART_Transmit+0x98>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	691b      	ldr	r3, [r3, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d104      	bne.n	80025dc <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	61bb      	str	r3, [r7, #24]
 80025da:	e003      	b.n	80025e4 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80025e4:	e030      	b.n	8002648 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	0013      	movs	r3, r2
 80025f0:	2200      	movs	r2, #0
 80025f2:	2180      	movs	r1, #128	@ 0x80
 80025f4:	f000 fe88 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 80025f8:	1e03      	subs	r3, r0, #0
 80025fa:	d005      	beq.n	8002608 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2288      	movs	r2, #136	@ 0x88
 8002600:	2120      	movs	r1, #32
 8002602:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e03d      	b.n	8002684 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10b      	bne.n	8002626 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	881b      	ldrh	r3, [r3, #0]
 8002612:	001a      	movs	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	05d2      	lsls	r2, r2, #23
 800261a:	0dd2      	lsrs	r2, r2, #23
 800261c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	3302      	adds	r3, #2
 8002622:	61bb      	str	r3, [r7, #24]
 8002624:	e007      	b.n	8002636 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	3301      	adds	r3, #1
 8002634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2256      	movs	r2, #86	@ 0x56
 800263a:	5a9b      	ldrh	r3, [r3, r2]
 800263c:	b29b      	uxth	r3, r3
 800263e:	3b01      	subs	r3, #1
 8002640:	b299      	uxth	r1, r3
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2256      	movs	r2, #86	@ 0x56
 8002646:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2256      	movs	r2, #86	@ 0x56
 800264c:	5a9b      	ldrh	r3, [r3, r2]
 800264e:	b29b      	uxth	r3, r3
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1c8      	bne.n	80025e6 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002654:	697a      	ldr	r2, [r7, #20]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	9300      	str	r3, [sp, #0]
 800265c:	0013      	movs	r3, r2
 800265e:	2200      	movs	r2, #0
 8002660:	2140      	movs	r1, #64	@ 0x40
 8002662:	f000 fe51 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 8002666:	1e03      	subs	r3, r0, #0
 8002668:	d005      	beq.n	8002676 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2288      	movs	r2, #136	@ 0x88
 800266e:	2120      	movs	r1, #32
 8002670:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e006      	b.n	8002684 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2288      	movs	r2, #136	@ 0x88
 800267a:	2120      	movs	r1, #32
 800267c:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800267e:	2300      	movs	r3, #0
 8002680:	e000      	b.n	8002684 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002682:	2302      	movs	r3, #2
  }
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b008      	add	sp, #32
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800268c:	b5b0      	push	{r4, r5, r7, lr}
 800268e:	b0aa      	sub	sp, #168	@ 0xa8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	22a4      	movs	r2, #164	@ 0xa4
 800269c:	18b9      	adds	r1, r7, r2
 800269e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	20a0      	movs	r0, #160	@ 0xa0
 80026a8:	1839      	adds	r1, r7, r0
 80026aa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	249c      	movs	r4, #156	@ 0x9c
 80026b4:	1939      	adds	r1, r7, r4
 80026b6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80026b8:	0011      	movs	r1, r2
 80026ba:	18bb      	adds	r3, r7, r2
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4aa2      	ldr	r2, [pc, #648]	@ (8002948 <HAL_UART_IRQHandler+0x2bc>)
 80026c0:	4013      	ands	r3, r2
 80026c2:	2298      	movs	r2, #152	@ 0x98
 80026c4:	18bd      	adds	r5, r7, r2
 80026c6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80026c8:	18bb      	adds	r3, r7, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d11a      	bne.n	8002706 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80026d0:	187b      	adds	r3, r7, r1
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2220      	movs	r2, #32
 80026d6:	4013      	ands	r3, r2
 80026d8:	d015      	beq.n	8002706 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80026da:	183b      	adds	r3, r7, r0
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2220      	movs	r2, #32
 80026e0:	4013      	ands	r3, r2
 80026e2:	d105      	bne.n	80026f0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80026e4:	193b      	adds	r3, r7, r4
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2380      	movs	r3, #128	@ 0x80
 80026ea:	055b      	lsls	r3, r3, #21
 80026ec:	4013      	ands	r3, r2
 80026ee:	d00a      	beq.n	8002706 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d100      	bne.n	80026fa <HAL_UART_IRQHandler+0x6e>
 80026f8:	e2fb      	b.n	8002cf2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	0010      	movs	r0, r2
 8002702:	4798      	blx	r3
      }
      return;
 8002704:	e2f5      	b.n	8002cf2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002706:	2398      	movs	r3, #152	@ 0x98
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d100      	bne.n	8002712 <HAL_UART_IRQHandler+0x86>
 8002710:	e122      	b.n	8002958 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002712:	239c      	movs	r3, #156	@ 0x9c
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a8c      	ldr	r2, [pc, #560]	@ (800294c <HAL_UART_IRQHandler+0x2c0>)
 800271a:	4013      	ands	r3, r2
 800271c:	d106      	bne.n	800272c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800271e:	23a0      	movs	r3, #160	@ 0xa0
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a8a      	ldr	r2, [pc, #552]	@ (8002950 <HAL_UART_IRQHandler+0x2c4>)
 8002726:	4013      	ands	r3, r2
 8002728:	d100      	bne.n	800272c <HAL_UART_IRQHandler+0xa0>
 800272a:	e115      	b.n	8002958 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800272c:	23a4      	movs	r3, #164	@ 0xa4
 800272e:	18fb      	adds	r3, r7, r3
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	2201      	movs	r2, #1
 8002734:	4013      	ands	r3, r2
 8002736:	d012      	beq.n	800275e <HAL_UART_IRQHandler+0xd2>
 8002738:	23a0      	movs	r3, #160	@ 0xa0
 800273a:	18fb      	adds	r3, r7, r3
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	@ 0x80
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4013      	ands	r3, r2
 8002744:	d00b      	beq.n	800275e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	2201      	movs	r2, #1
 800274c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2290      	movs	r2, #144	@ 0x90
 8002752:	589b      	ldr	r3, [r3, r2]
 8002754:	2201      	movs	r2, #1
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2190      	movs	r1, #144	@ 0x90
 800275c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800275e:	23a4      	movs	r3, #164	@ 0xa4
 8002760:	18fb      	adds	r3, r7, r3
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2202      	movs	r2, #2
 8002766:	4013      	ands	r3, r2
 8002768:	d011      	beq.n	800278e <HAL_UART_IRQHandler+0x102>
 800276a:	239c      	movs	r3, #156	@ 0x9c
 800276c:	18fb      	adds	r3, r7, r3
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2201      	movs	r2, #1
 8002772:	4013      	ands	r3, r2
 8002774:	d00b      	beq.n	800278e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2202      	movs	r2, #2
 800277c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2290      	movs	r2, #144	@ 0x90
 8002782:	589b      	ldr	r3, [r3, r2]
 8002784:	2204      	movs	r2, #4
 8002786:	431a      	orrs	r2, r3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2190      	movs	r1, #144	@ 0x90
 800278c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800278e:	23a4      	movs	r3, #164	@ 0xa4
 8002790:	18fb      	adds	r3, r7, r3
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2204      	movs	r2, #4
 8002796:	4013      	ands	r3, r2
 8002798:	d011      	beq.n	80027be <HAL_UART_IRQHandler+0x132>
 800279a:	239c      	movs	r3, #156	@ 0x9c
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2201      	movs	r2, #1
 80027a2:	4013      	ands	r3, r2
 80027a4:	d00b      	beq.n	80027be <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2204      	movs	r2, #4
 80027ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2290      	movs	r2, #144	@ 0x90
 80027b2:	589b      	ldr	r3, [r3, r2]
 80027b4:	2202      	movs	r2, #2
 80027b6:	431a      	orrs	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2190      	movs	r1, #144	@ 0x90
 80027bc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80027be:	23a4      	movs	r3, #164	@ 0xa4
 80027c0:	18fb      	adds	r3, r7, r3
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2208      	movs	r2, #8
 80027c6:	4013      	ands	r3, r2
 80027c8:	d017      	beq.n	80027fa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027ca:	23a0      	movs	r3, #160	@ 0xa0
 80027cc:	18fb      	adds	r3, r7, r3
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2220      	movs	r2, #32
 80027d2:	4013      	ands	r3, r2
 80027d4:	d105      	bne.n	80027e2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80027d6:	239c      	movs	r3, #156	@ 0x9c
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a5b      	ldr	r2, [pc, #364]	@ (800294c <HAL_UART_IRQHandler+0x2c0>)
 80027de:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80027e0:	d00b      	beq.n	80027fa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2208      	movs	r2, #8
 80027e8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2290      	movs	r2, #144	@ 0x90
 80027ee:	589b      	ldr	r3, [r3, r2]
 80027f0:	2208      	movs	r2, #8
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2190      	movs	r1, #144	@ 0x90
 80027f8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80027fa:	23a4      	movs	r3, #164	@ 0xa4
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	2380      	movs	r3, #128	@ 0x80
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	4013      	ands	r3, r2
 8002806:	d013      	beq.n	8002830 <HAL_UART_IRQHandler+0x1a4>
 8002808:	23a0      	movs	r3, #160	@ 0xa0
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	2380      	movs	r3, #128	@ 0x80
 8002810:	04db      	lsls	r3, r3, #19
 8002812:	4013      	ands	r3, r2
 8002814:	d00c      	beq.n	8002830 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2280      	movs	r2, #128	@ 0x80
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2290      	movs	r2, #144	@ 0x90
 8002824:	589b      	ldr	r3, [r3, r2]
 8002826:	2220      	movs	r2, #32
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2190      	movs	r1, #144	@ 0x90
 800282e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2290      	movs	r2, #144	@ 0x90
 8002834:	589b      	ldr	r3, [r3, r2]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d100      	bne.n	800283c <HAL_UART_IRQHandler+0x1b0>
 800283a:	e25c      	b.n	8002cf6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800283c:	23a4      	movs	r3, #164	@ 0xa4
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2220      	movs	r2, #32
 8002844:	4013      	ands	r3, r2
 8002846:	d015      	beq.n	8002874 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002848:	23a0      	movs	r3, #160	@ 0xa0
 800284a:	18fb      	adds	r3, r7, r3
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2220      	movs	r2, #32
 8002850:	4013      	ands	r3, r2
 8002852:	d106      	bne.n	8002862 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002854:	239c      	movs	r3, #156	@ 0x9c
 8002856:	18fb      	adds	r3, r7, r3
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	2380      	movs	r3, #128	@ 0x80
 800285c:	055b      	lsls	r3, r3, #21
 800285e:	4013      	ands	r3, r2
 8002860:	d008      	beq.n	8002874 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	0010      	movs	r0, r2
 8002872:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2290      	movs	r2, #144	@ 0x90
 8002878:	589b      	ldr	r3, [r3, r2]
 800287a:	2194      	movs	r1, #148	@ 0x94
 800287c:	187a      	adds	r2, r7, r1
 800287e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2240      	movs	r2, #64	@ 0x40
 8002888:	4013      	ands	r3, r2
 800288a:	2b40      	cmp	r3, #64	@ 0x40
 800288c:	d004      	beq.n	8002898 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800288e:	187b      	adds	r3, r7, r1
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	2228      	movs	r2, #40	@ 0x28
 8002894:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002896:	d04c      	beq.n	8002932 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	0018      	movs	r0, r3
 800289c:	f000 fda4 	bl	80033e8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2240      	movs	r2, #64	@ 0x40
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b40      	cmp	r3, #64	@ 0x40
 80028ac:	d13c      	bne.n	8002928 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028ae:	f3ef 8310 	mrs	r3, PRIMASK
 80028b2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80028b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80028b6:	2090      	movs	r0, #144	@ 0x90
 80028b8:	183a      	adds	r2, r7, r0
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	2301      	movs	r3, #1
 80028be:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80028c2:	f383 8810 	msr	PRIMASK, r3
}
 80028c6:	46c0      	nop			@ (mov r8, r8)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689a      	ldr	r2, [r3, #8]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2140      	movs	r1, #64	@ 0x40
 80028d4:	438a      	bics	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
 80028d8:	183b      	adds	r3, r7, r0
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80028e0:	f383 8810 	msr	PRIMASK, r3
}
 80028e4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	589b      	ldr	r3, [r3, r2]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d016      	beq.n	800291e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2280      	movs	r2, #128	@ 0x80
 80028f4:	589b      	ldr	r3, [r3, r2]
 80028f6:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <HAL_UART_IRQHandler+0x2c8>)
 80028f8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2280      	movs	r2, #128	@ 0x80
 80028fe:	589b      	ldr	r3, [r3, r2]
 8002900:	0018      	movs	r0, r3
 8002902:	f7fe fbad 	bl	8001060 <HAL_DMA_Abort_IT>
 8002906:	1e03      	subs	r3, r0, #0
 8002908:	d01c      	beq.n	8002944 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2280      	movs	r2, #128	@ 0x80
 800290e:	589b      	ldr	r3, [r3, r2]
 8002910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	2180      	movs	r1, #128	@ 0x80
 8002916:	5852      	ldr	r2, [r2, r1]
 8002918:	0010      	movs	r0, r2
 800291a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800291c:	e012      	b.n	8002944 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	0018      	movs	r0, r3
 8002922:	f000 fa01 	bl	8002d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002926:	e00d      	b.n	8002944 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	0018      	movs	r0, r3
 800292c:	f000 f9fc 	bl	8002d28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002930:	e008      	b.n	8002944 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	0018      	movs	r0, r3
 8002936:	f000 f9f7 	bl	8002d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2290      	movs	r2, #144	@ 0x90
 800293e:	2100      	movs	r1, #0
 8002940:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002942:	e1d8      	b.n	8002cf6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002944:	46c0      	nop			@ (mov r8, r8)
    return;
 8002946:	e1d6      	b.n	8002cf6 <HAL_UART_IRQHandler+0x66a>
 8002948:	0000080f 	.word	0x0000080f
 800294c:	10000001 	.word	0x10000001
 8002950:	04000120 	.word	0x04000120
 8002954:	080034b5 	.word	0x080034b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d000      	beq.n	8002962 <HAL_UART_IRQHandler+0x2d6>
 8002960:	e15d      	b.n	8002c1e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002962:	23a4      	movs	r3, #164	@ 0xa4
 8002964:	18fb      	adds	r3, r7, r3
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2210      	movs	r2, #16
 800296a:	4013      	ands	r3, r2
 800296c:	d100      	bne.n	8002970 <HAL_UART_IRQHandler+0x2e4>
 800296e:	e156      	b.n	8002c1e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002970:	23a0      	movs	r3, #160	@ 0xa0
 8002972:	18fb      	adds	r3, r7, r3
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2210      	movs	r2, #16
 8002978:	4013      	ands	r3, r2
 800297a:	d100      	bne.n	800297e <HAL_UART_IRQHandler+0x2f2>
 800297c:	e14f      	b.n	8002c1e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2210      	movs	r2, #16
 8002984:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2240      	movs	r2, #64	@ 0x40
 800298e:	4013      	ands	r3, r2
 8002990:	2b40      	cmp	r3, #64	@ 0x40
 8002992:	d000      	beq.n	8002996 <HAL_UART_IRQHandler+0x30a>
 8002994:	e0c3      	b.n	8002b1e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2280      	movs	r2, #128	@ 0x80
 800299a:	589b      	ldr	r3, [r3, r2]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	217e      	movs	r1, #126	@ 0x7e
 80029a2:	187b      	adds	r3, r7, r1
 80029a4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80029a6:	187b      	adds	r3, r7, r1
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d100      	bne.n	80029b0 <HAL_UART_IRQHandler+0x324>
 80029ae:	e097      	b.n	8002ae0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	225c      	movs	r2, #92	@ 0x5c
 80029b4:	5a9b      	ldrh	r3, [r3, r2]
 80029b6:	187a      	adds	r2, r7, r1
 80029b8:	8812      	ldrh	r2, [r2, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d300      	bcc.n	80029c0 <HAL_UART_IRQHandler+0x334>
 80029be:	e08f      	b.n	8002ae0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	187a      	adds	r2, r7, r1
 80029c4:	215e      	movs	r1, #94	@ 0x5e
 80029c6:	8812      	ldrh	r2, [r2, #0]
 80029c8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2280      	movs	r2, #128	@ 0x80
 80029ce:	589b      	ldr	r3, [r3, r2]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2220      	movs	r2, #32
 80029d6:	4013      	ands	r3, r2
 80029d8:	d170      	bne.n	8002abc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80029da:	f3ef 8310 	mrs	r3, PRIMASK
 80029de:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80029e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80029e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80029e4:	2301      	movs	r3, #1
 80029e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80029e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ea:	f383 8810 	msr	PRIMASK, r3
}
 80029ee:	46c0      	nop			@ (mov r8, r8)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	49c4      	ldr	r1, [pc, #784]	@ (8002d0c <HAL_UART_IRQHandler+0x680>)
 80029fc:	400a      	ands	r2, r1
 80029fe:	601a      	str	r2, [r3, #0]
 8002a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002a02:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a06:	f383 8810 	msr	PRIMASK, r3
}
 8002a0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002a10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a14:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a16:	2301      	movs	r3, #1
 8002a18:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a1c:	f383 8810 	msr	PRIMASK, r3
}
 8002a20:	46c0      	nop			@ (mov r8, r8)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2101      	movs	r1, #1
 8002a2e:	438a      	bics	r2, r1
 8002a30:	609a      	str	r2, [r3, #8]
 8002a32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a34:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a38:	f383 8810 	msr	PRIMASK, r3
}
 8002a3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a42:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002a44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a46:	673b      	str	r3, [r7, #112]	@ 0x70
 8002a48:	2301      	movs	r3, #1
 8002a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a4e:	f383 8810 	msr	PRIMASK, r3
}
 8002a52:	46c0      	nop			@ (mov r8, r8)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2140      	movs	r1, #64	@ 0x40
 8002a60:	438a      	bics	r2, r1
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002a66:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a6a:	f383 8810 	msr	PRIMASK, r3
}
 8002a6e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	228c      	movs	r2, #140	@ 0x8c
 8002a74:	2120      	movs	r1, #32
 8002a76:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002a82:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002a84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002a88:	2301      	movs	r3, #1
 8002a8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a8e:	f383 8810 	msr	PRIMASK, r3
}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2110      	movs	r1, #16
 8002aa0:	438a      	bics	r2, r1
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002aa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002aa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aaa:	f383 8810 	msr	PRIMASK, r3
}
 8002aae:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2280      	movs	r2, #128	@ 0x80
 8002ab4:	589b      	ldr	r3, [r3, r2]
 8002ab6:	0018      	movs	r0, r3
 8002ab8:	f7fe fa70 	bl	8000f9c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	225c      	movs	r2, #92	@ 0x5c
 8002ac6:	5a9a      	ldrh	r2, [r3, r2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	215e      	movs	r1, #94	@ 0x5e
 8002acc:	5a5b      	ldrh	r3, [r3, r1]
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	b29a      	uxth	r2, r3
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0011      	movs	r1, r2
 8002ad8:	0018      	movs	r0, r3
 8002ada:	f000 f92d 	bl	8002d38 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002ade:	e10c      	b.n	8002cfa <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	225c      	movs	r2, #92	@ 0x5c
 8002ae4:	5a9b      	ldrh	r3, [r3, r2]
 8002ae6:	227e      	movs	r2, #126	@ 0x7e
 8002ae8:	18ba      	adds	r2, r7, r2
 8002aea:	8812      	ldrh	r2, [r2, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d000      	beq.n	8002af2 <HAL_UART_IRQHandler+0x466>
 8002af0:	e103      	b.n	8002cfa <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2280      	movs	r2, #128	@ 0x80
 8002af6:	589b      	ldr	r3, [r3, r2]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2220      	movs	r2, #32
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b20      	cmp	r3, #32
 8002b02:	d000      	beq.n	8002b06 <HAL_UART_IRQHandler+0x47a>
 8002b04:	e0f9      	b.n	8002cfa <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2202      	movs	r2, #2
 8002b0a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	225c      	movs	r2, #92	@ 0x5c
 8002b10:	5a9a      	ldrh	r2, [r3, r2]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	0011      	movs	r1, r2
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 f90e 	bl	8002d38 <HAL_UARTEx_RxEventCallback>
      return;
 8002b1c:	e0ed      	b.n	8002cfa <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	225c      	movs	r2, #92	@ 0x5c
 8002b22:	5a99      	ldrh	r1, [r3, r2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	225e      	movs	r2, #94	@ 0x5e
 8002b28:	5a9b      	ldrh	r3, [r3, r2]
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	208e      	movs	r0, #142	@ 0x8e
 8002b2e:	183b      	adds	r3, r7, r0
 8002b30:	1a8a      	subs	r2, r1, r2
 8002b32:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	225e      	movs	r2, #94	@ 0x5e
 8002b38:	5a9b      	ldrh	r3, [r3, r2]
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d100      	bne.n	8002b42 <HAL_UART_IRQHandler+0x4b6>
 8002b40:	e0dd      	b.n	8002cfe <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8002b42:	183b      	adds	r3, r7, r0
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d100      	bne.n	8002b4c <HAL_UART_IRQHandler+0x4c0>
 8002b4a:	e0d8      	b.n	8002cfe <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8002b50:	60fb      	str	r3, [r7, #12]
  return(result);
 8002b52:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002b54:	2488      	movs	r4, #136	@ 0x88
 8002b56:	193a      	adds	r2, r7, r4
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f383 8810 	msr	PRIMASK, r3
}
 8002b64:	46c0      	nop			@ (mov r8, r8)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4967      	ldr	r1, [pc, #412]	@ (8002d10 <HAL_UART_IRQHandler+0x684>)
 8002b72:	400a      	ands	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]
 8002b76:	193b      	adds	r3, r7, r4
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f383 8810 	msr	PRIMASK, r3
}
 8002b82:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002b84:	f3ef 8310 	mrs	r3, PRIMASK
 8002b88:	61bb      	str	r3, [r7, #24]
  return(result);
 8002b8a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002b8c:	2484      	movs	r4, #132	@ 0x84
 8002b8e:	193a      	adds	r2, r7, r4
 8002b90:	6013      	str	r3, [r2, #0]
 8002b92:	2301      	movs	r3, #1
 8002b94:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	f383 8810 	msr	PRIMASK, r3
}
 8002b9c:	46c0      	nop			@ (mov r8, r8)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	689a      	ldr	r2, [r3, #8]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	495a      	ldr	r1, [pc, #360]	@ (8002d14 <HAL_UART_IRQHandler+0x688>)
 8002baa:	400a      	ands	r2, r1
 8002bac:	609a      	str	r2, [r3, #8]
 8002bae:	193b      	adds	r3, r7, r4
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002bb4:	6a3b      	ldr	r3, [r7, #32]
 8002bb6:	f383 8810 	msr	PRIMASK, r3
}
 8002bba:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	228c      	movs	r2, #140	@ 0x8c
 8002bc0:	2120      	movs	r1, #32
 8002bc2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bd8:	2480      	movs	r4, #128	@ 0x80
 8002bda:	193a      	adds	r2, r7, r4
 8002bdc:	6013      	str	r3, [r2, #0]
 8002bde:	2301      	movs	r3, #1
 8002be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002be4:	f383 8810 	msr	PRIMASK, r3
}
 8002be8:	46c0      	nop			@ (mov r8, r8)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2110      	movs	r1, #16
 8002bf6:	438a      	bics	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
 8002bfa:	193b      	adds	r3, r7, r4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002c00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c02:	f383 8810 	msr	PRIMASK, r3
}
 8002c06:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2202      	movs	r2, #2
 8002c0c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c0e:	183b      	adds	r3, r7, r0
 8002c10:	881a      	ldrh	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	0011      	movs	r1, r2
 8002c16:	0018      	movs	r0, r3
 8002c18:	f000 f88e 	bl	8002d38 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c1c:	e06f      	b.n	8002cfe <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002c1e:	23a4      	movs	r3, #164	@ 0xa4
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	2380      	movs	r3, #128	@ 0x80
 8002c26:	035b      	lsls	r3, r3, #13
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d010      	beq.n	8002c4e <HAL_UART_IRQHandler+0x5c2>
 8002c2c:	239c      	movs	r3, #156	@ 0x9c
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	2380      	movs	r3, #128	@ 0x80
 8002c34:	03db      	lsls	r3, r3, #15
 8002c36:	4013      	ands	r3, r2
 8002c38:	d009      	beq.n	8002c4e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	2280      	movs	r2, #128	@ 0x80
 8002c40:	0352      	lsls	r2, r2, #13
 8002c42:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	0018      	movs	r0, r3
 8002c48:	f000 fc77 	bl	800353a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002c4c:	e05a      	b.n	8002d04 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002c4e:	23a4      	movs	r3, #164	@ 0xa4
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2280      	movs	r2, #128	@ 0x80
 8002c56:	4013      	ands	r3, r2
 8002c58:	d016      	beq.n	8002c88 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002c5a:	23a0      	movs	r3, #160	@ 0xa0
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2280      	movs	r2, #128	@ 0x80
 8002c62:	4013      	ands	r3, r2
 8002c64:	d106      	bne.n	8002c74 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002c66:	239c      	movs	r3, #156	@ 0x9c
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	2380      	movs	r3, #128	@ 0x80
 8002c6e:	041b      	lsls	r3, r3, #16
 8002c70:	4013      	ands	r3, r2
 8002c72:	d009      	beq.n	8002c88 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d042      	beq.n	8002d02 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	0010      	movs	r0, r2
 8002c84:	4798      	blx	r3
    }
    return;
 8002c86:	e03c      	b.n	8002d02 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c88:	23a4      	movs	r3, #164	@ 0xa4
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2240      	movs	r2, #64	@ 0x40
 8002c90:	4013      	ands	r3, r2
 8002c92:	d00a      	beq.n	8002caa <HAL_UART_IRQHandler+0x61e>
 8002c94:	23a0      	movs	r3, #160	@ 0xa0
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2240      	movs	r2, #64	@ 0x40
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d004      	beq.n	8002caa <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	0018      	movs	r0, r3
 8002ca4:	f000 fc1d 	bl	80034e2 <UART_EndTransmit_IT>
    return;
 8002ca8:	e02c      	b.n	8002d04 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002caa:	23a4      	movs	r3, #164	@ 0xa4
 8002cac:	18fb      	adds	r3, r7, r3
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	@ 0x80
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x644>
 8002cb8:	23a0      	movs	r3, #160	@ 0xa0
 8002cba:	18fb      	adds	r3, r7, r3
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	2380      	movs	r3, #128	@ 0x80
 8002cc0:	05db      	lsls	r3, r3, #23
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	d004      	beq.n	8002cd0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	0018      	movs	r0, r3
 8002cca:	f000 fc46 	bl	800355a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cce:	e019      	b.n	8002d04 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002cd0:	23a4      	movs	r3, #164	@ 0xa4
 8002cd2:	18fb      	adds	r3, r7, r3
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	2380      	movs	r3, #128	@ 0x80
 8002cd8:	045b      	lsls	r3, r3, #17
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d012      	beq.n	8002d04 <HAL_UART_IRQHandler+0x678>
 8002cde:	23a0      	movs	r3, #160	@ 0xa0
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	da0d      	bge.n	8002d04 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	0018      	movs	r0, r3
 8002cec:	f000 fc2d 	bl	800354a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002cf0:	e008      	b.n	8002d04 <HAL_UART_IRQHandler+0x678>
      return;
 8002cf2:	46c0      	nop			@ (mov r8, r8)
 8002cf4:	e006      	b.n	8002d04 <HAL_UART_IRQHandler+0x678>
    return;
 8002cf6:	46c0      	nop			@ (mov r8, r8)
 8002cf8:	e004      	b.n	8002d04 <HAL_UART_IRQHandler+0x678>
      return;
 8002cfa:	46c0      	nop			@ (mov r8, r8)
 8002cfc:	e002      	b.n	8002d04 <HAL_UART_IRQHandler+0x678>
      return;
 8002cfe:	46c0      	nop			@ (mov r8, r8)
 8002d00:	e000      	b.n	8002d04 <HAL_UART_IRQHandler+0x678>
    return;
 8002d02:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b02a      	add	sp, #168	@ 0xa8
 8002d08:	bdb0      	pop	{r4, r5, r7, pc}
 8002d0a:	46c0      	nop			@ (mov r8, r8)
 8002d0c:	fffffeff 	.word	0xfffffeff
 8002d10:	fffffedf 	.word	0xfffffedf
 8002d14:	effffffe 	.word	0xeffffffe

08002d18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002d20:	46c0      	nop			@ (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b002      	add	sp, #8
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002d30:	46c0      	nop			@ (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b002      	add	sp, #8
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	000a      	movs	r2, r1
 8002d42:	1cbb      	adds	r3, r7, #2
 8002d44:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d58:	231e      	movs	r3, #30
 8002d5a:	18fb      	adds	r3, r7, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4aab      	ldr	r2, [pc, #684]	@ (800302c <UART_SetConfig+0x2dc>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	4aa6      	ldr	r2, [pc, #664]	@ (8003030 <UART_SetConfig+0x2e0>)
 8002d96:	4013      	ands	r3, r2
 8002d98:	0019      	movs	r1, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a9d      	ldr	r2, [pc, #628]	@ (8003034 <UART_SetConfig+0x2e4>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	0019      	movs	r1, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	430a      	orrs	r2, r1
 8002dca:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd2:	220f      	movs	r2, #15
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	0019      	movs	r1, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a93      	ldr	r2, [pc, #588]	@ (8003038 <UART_SetConfig+0x2e8>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d127      	bne.n	8002e3e <UART_SetConfig+0xee>
 8002dee:	4b93      	ldr	r3, [pc, #588]	@ (800303c <UART_SetConfig+0x2ec>)
 8002df0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002df2:	2203      	movs	r2, #3
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b03      	cmp	r3, #3
 8002df8:	d017      	beq.n	8002e2a <UART_SetConfig+0xda>
 8002dfa:	d81b      	bhi.n	8002e34 <UART_SetConfig+0xe4>
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d00a      	beq.n	8002e16 <UART_SetConfig+0xc6>
 8002e00:	d818      	bhi.n	8002e34 <UART_SetConfig+0xe4>
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d002      	beq.n	8002e0c <UART_SetConfig+0xbc>
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d00a      	beq.n	8002e20 <UART_SetConfig+0xd0>
 8002e0a:	e013      	b.n	8002e34 <UART_SetConfig+0xe4>
 8002e0c:	231f      	movs	r3, #31
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
 8002e14:	e021      	b.n	8002e5a <UART_SetConfig+0x10a>
 8002e16:	231f      	movs	r3, #31
 8002e18:	18fb      	adds	r3, r7, r3
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e01c      	b.n	8002e5a <UART_SetConfig+0x10a>
 8002e20:	231f      	movs	r3, #31
 8002e22:	18fb      	adds	r3, r7, r3
 8002e24:	2204      	movs	r2, #4
 8002e26:	701a      	strb	r2, [r3, #0]
 8002e28:	e017      	b.n	8002e5a <UART_SetConfig+0x10a>
 8002e2a:	231f      	movs	r3, #31
 8002e2c:	18fb      	adds	r3, r7, r3
 8002e2e:	2208      	movs	r2, #8
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e012      	b.n	8002e5a <UART_SetConfig+0x10a>
 8002e34:	231f      	movs	r3, #31
 8002e36:	18fb      	adds	r3, r7, r3
 8002e38:	2210      	movs	r2, #16
 8002e3a:	701a      	strb	r2, [r3, #0]
 8002e3c:	e00d      	b.n	8002e5a <UART_SetConfig+0x10a>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a7f      	ldr	r2, [pc, #508]	@ (8003040 <UART_SetConfig+0x2f0>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d104      	bne.n	8002e52 <UART_SetConfig+0x102>
 8002e48:	231f      	movs	r3, #31
 8002e4a:	18fb      	adds	r3, r7, r3
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
 8002e50:	e003      	b.n	8002e5a <UART_SetConfig+0x10a>
 8002e52:	231f      	movs	r3, #31
 8002e54:	18fb      	adds	r3, r7, r3
 8002e56:	2210      	movs	r2, #16
 8002e58:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69da      	ldr	r2, [r3, #28]
 8002e5e:	2380      	movs	r3, #128	@ 0x80
 8002e60:	021b      	lsls	r3, r3, #8
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d000      	beq.n	8002e68 <UART_SetConfig+0x118>
 8002e66:	e06f      	b.n	8002f48 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002e68:	231f      	movs	r3, #31
 8002e6a:	18fb      	adds	r3, r7, r3
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d01f      	beq.n	8002eb2 <UART_SetConfig+0x162>
 8002e72:	dc22      	bgt.n	8002eba <UART_SetConfig+0x16a>
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d017      	beq.n	8002ea8 <UART_SetConfig+0x158>
 8002e78:	dc1f      	bgt.n	8002eba <UART_SetConfig+0x16a>
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <UART_SetConfig+0x134>
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d005      	beq.n	8002e8e <UART_SetConfig+0x13e>
 8002e82:	e01a      	b.n	8002eba <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e84:	f7fe fe40 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002e88:	0003      	movs	r3, r0
 8002e8a:	61bb      	str	r3, [r7, #24]
        break;
 8002e8c:	e01c      	b.n	8002ec8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002e8e:	4b6b      	ldr	r3, [pc, #428]	@ (800303c <UART_SetConfig+0x2ec>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2207      	movs	r2, #7
 8002e96:	4013      	ands	r3, r2
 8002e98:	3301      	adds	r3, #1
 8002e9a:	0019      	movs	r1, r3
 8002e9c:	4869      	ldr	r0, [pc, #420]	@ (8003044 <UART_SetConfig+0x2f4>)
 8002e9e:	f7fd f945 	bl	800012c <__udivsi3>
 8002ea2:	0003      	movs	r3, r0
 8002ea4:	61bb      	str	r3, [r7, #24]
        break;
 8002ea6:	e00f      	b.n	8002ec8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea8:	f7fe fdc0 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8002eac:	0003      	movs	r3, r0
 8002eae:	61bb      	str	r3, [r7, #24]
        break;
 8002eb0:	e00a      	b.n	8002ec8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002eb2:	2380      	movs	r3, #128	@ 0x80
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	61bb      	str	r3, [r7, #24]
        break;
 8002eb8:	e006      	b.n	8002ec8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002ebe:	231e      	movs	r3, #30
 8002ec0:	18fb      	adds	r3, r7, r3
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	701a      	strb	r2, [r3, #0]
        break;
 8002ec6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002ec8:	69bb      	ldr	r3, [r7, #24]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d100      	bne.n	8002ed0 <UART_SetConfig+0x180>
 8002ece:	e097      	b.n	8003000 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8003048 <UART_SetConfig+0x2f8>)
 8002ed6:	0052      	lsls	r2, r2, #1
 8002ed8:	5ad3      	ldrh	r3, [r2, r3]
 8002eda:	0019      	movs	r1, r3
 8002edc:	69b8      	ldr	r0, [r7, #24]
 8002ede:	f7fd f925 	bl	800012c <__udivsi3>
 8002ee2:	0003      	movs	r3, r0
 8002ee4:	005a      	lsls	r2, r3, #1
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	085b      	lsrs	r3, r3, #1
 8002eec:	18d2      	adds	r2, r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	0019      	movs	r1, r3
 8002ef4:	0010      	movs	r0, r2
 8002ef6:	f7fd f919 	bl	800012c <__udivsi3>
 8002efa:	0003      	movs	r3, r0
 8002efc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	2b0f      	cmp	r3, #15
 8002f02:	d91c      	bls.n	8002f3e <UART_SetConfig+0x1ee>
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	2380      	movs	r3, #128	@ 0x80
 8002f08:	025b      	lsls	r3, r3, #9
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d217      	bcs.n	8002f3e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	200e      	movs	r0, #14
 8002f14:	183b      	adds	r3, r7, r0
 8002f16:	210f      	movs	r1, #15
 8002f18:	438a      	bics	r2, r1
 8002f1a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	085b      	lsrs	r3, r3, #1
 8002f20:	b29b      	uxth	r3, r3
 8002f22:	2207      	movs	r2, #7
 8002f24:	4013      	ands	r3, r2
 8002f26:	b299      	uxth	r1, r3
 8002f28:	183b      	adds	r3, r7, r0
 8002f2a:	183a      	adds	r2, r7, r0
 8002f2c:	8812      	ldrh	r2, [r2, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	183a      	adds	r2, r7, r0
 8002f38:	8812      	ldrh	r2, [r2, #0]
 8002f3a:	60da      	str	r2, [r3, #12]
 8002f3c:	e060      	b.n	8003000 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f3e:	231e      	movs	r3, #30
 8002f40:	18fb      	adds	r3, r7, r3
 8002f42:	2201      	movs	r2, #1
 8002f44:	701a      	strb	r2, [r3, #0]
 8002f46:	e05b      	b.n	8003000 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002f48:	231f      	movs	r3, #31
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d01f      	beq.n	8002f92 <UART_SetConfig+0x242>
 8002f52:	dc22      	bgt.n	8002f9a <UART_SetConfig+0x24a>
 8002f54:	2b04      	cmp	r3, #4
 8002f56:	d017      	beq.n	8002f88 <UART_SetConfig+0x238>
 8002f58:	dc1f      	bgt.n	8002f9a <UART_SetConfig+0x24a>
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d002      	beq.n	8002f64 <UART_SetConfig+0x214>
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d005      	beq.n	8002f6e <UART_SetConfig+0x21e>
 8002f62:	e01a      	b.n	8002f9a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f64:	f7fe fdd0 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	61bb      	str	r3, [r7, #24]
        break;
 8002f6c:	e01c      	b.n	8002fa8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002f6e:	4b33      	ldr	r3, [pc, #204]	@ (800303c <UART_SetConfig+0x2ec>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	095b      	lsrs	r3, r3, #5
 8002f74:	2207      	movs	r2, #7
 8002f76:	4013      	ands	r3, r2
 8002f78:	3301      	adds	r3, #1
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	4831      	ldr	r0, [pc, #196]	@ (8003044 <UART_SetConfig+0x2f4>)
 8002f7e:	f7fd f8d5 	bl	800012c <__udivsi3>
 8002f82:	0003      	movs	r3, r0
 8002f84:	61bb      	str	r3, [r7, #24]
        break;
 8002f86:	e00f      	b.n	8002fa8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f88:	f7fe fd50 	bl	8001a2c <HAL_RCC_GetSysClockFreq>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	61bb      	str	r3, [r7, #24]
        break;
 8002f90:	e00a      	b.n	8002fa8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	61bb      	str	r3, [r7, #24]
        break;
 8002f98:	e006      	b.n	8002fa8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f9e:	231e      	movs	r3, #30
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	701a      	strb	r2, [r3, #0]
        break;
 8002fa6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d028      	beq.n	8003000 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002fb2:	4b25      	ldr	r3, [pc, #148]	@ (8003048 <UART_SetConfig+0x2f8>)
 8002fb4:	0052      	lsls	r2, r2, #1
 8002fb6:	5ad3      	ldrh	r3, [r2, r3]
 8002fb8:	0019      	movs	r1, r3
 8002fba:	69b8      	ldr	r0, [r7, #24]
 8002fbc:	f7fd f8b6 	bl	800012c <__udivsi3>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	001a      	movs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	085b      	lsrs	r3, r3, #1
 8002fca:	18d2      	adds	r2, r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	0010      	movs	r0, r2
 8002fd4:	f7fd f8aa 	bl	800012c <__udivsi3>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	2b0f      	cmp	r3, #15
 8002fe0:	d90a      	bls.n	8002ff8 <UART_SetConfig+0x2a8>
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	2380      	movs	r3, #128	@ 0x80
 8002fe6:	025b      	lsls	r3, r3, #9
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d205      	bcs.n	8002ff8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	e003      	b.n	8003000 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002ff8:	231e      	movs	r3, #30
 8002ffa:	18fb      	adds	r3, r7, r3
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	226a      	movs	r2, #106	@ 0x6a
 8003004:	2101      	movs	r1, #1
 8003006:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2268      	movs	r2, #104	@ 0x68
 800300c:	2101      	movs	r1, #1
 800300e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800301c:	231e      	movs	r3, #30
 800301e:	18fb      	adds	r3, r7, r3
 8003020:	781b      	ldrb	r3, [r3, #0]
}
 8003022:	0018      	movs	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	b008      	add	sp, #32
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			@ (mov r8, r8)
 800302c:	cfff69f3 	.word	0xcfff69f3
 8003030:	ffffcfff 	.word	0xffffcfff
 8003034:	11fff4ff 	.word	0x11fff4ff
 8003038:	40013800 	.word	0x40013800
 800303c:	40021000 	.word	0x40021000
 8003040:	40004400 	.word	0x40004400
 8003044:	02dc6c00 	.word	0x02dc6c00
 8003048:	08005840 	.word	0x08005840

0800304c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003058:	2208      	movs	r2, #8
 800305a:	4013      	ands	r3, r2
 800305c:	d00b      	beq.n	8003076 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	4a4a      	ldr	r2, [pc, #296]	@ (8003190 <UART_AdvFeatureConfig+0x144>)
 8003066:	4013      	ands	r3, r2
 8003068:	0019      	movs	r1, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	430a      	orrs	r2, r1
 8003074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307a:	2201      	movs	r2, #1
 800307c:	4013      	ands	r3, r2
 800307e:	d00b      	beq.n	8003098 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	4a43      	ldr	r2, [pc, #268]	@ (8003194 <UART_AdvFeatureConfig+0x148>)
 8003088:	4013      	ands	r3, r2
 800308a:	0019      	movs	r1, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	430a      	orrs	r2, r1
 8003096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309c:	2202      	movs	r2, #2
 800309e:	4013      	ands	r3, r2
 80030a0:	d00b      	beq.n	80030ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003198 <UART_AdvFeatureConfig+0x14c>)
 80030aa:	4013      	ands	r3, r2
 80030ac:	0019      	movs	r1, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030be:	2204      	movs	r2, #4
 80030c0:	4013      	ands	r3, r2
 80030c2:	d00b      	beq.n	80030dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	4a34      	ldr	r2, [pc, #208]	@ (800319c <UART_AdvFeatureConfig+0x150>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	2210      	movs	r2, #16
 80030e2:	4013      	ands	r3, r2
 80030e4:	d00b      	beq.n	80030fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	4a2c      	ldr	r2, [pc, #176]	@ (80031a0 <UART_AdvFeatureConfig+0x154>)
 80030ee:	4013      	ands	r3, r2
 80030f0:	0019      	movs	r1, r3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003102:	2220      	movs	r2, #32
 8003104:	4013      	ands	r3, r2
 8003106:	d00b      	beq.n	8003120 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	4a25      	ldr	r2, [pc, #148]	@ (80031a4 <UART_AdvFeatureConfig+0x158>)
 8003110:	4013      	ands	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	430a      	orrs	r2, r1
 800311e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003124:	2240      	movs	r2, #64	@ 0x40
 8003126:	4013      	ands	r3, r2
 8003128:	d01d      	beq.n	8003166 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a1d      	ldr	r2, [pc, #116]	@ (80031a8 <UART_AdvFeatureConfig+0x15c>)
 8003132:	4013      	ands	r3, r2
 8003134:	0019      	movs	r1, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003146:	2380      	movs	r3, #128	@ 0x80
 8003148:	035b      	lsls	r3, r3, #13
 800314a:	429a      	cmp	r2, r3
 800314c:	d10b      	bne.n	8003166 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	4a15      	ldr	r2, [pc, #84]	@ (80031ac <UART_AdvFeatureConfig+0x160>)
 8003156:	4013      	ands	r3, r2
 8003158:	0019      	movs	r1, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	430a      	orrs	r2, r1
 8003164:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800316a:	2280      	movs	r2, #128	@ 0x80
 800316c:	4013      	ands	r3, r2
 800316e:	d00b      	beq.n	8003188 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	4a0e      	ldr	r2, [pc, #56]	@ (80031b0 <UART_AdvFeatureConfig+0x164>)
 8003178:	4013      	ands	r3, r2
 800317a:	0019      	movs	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	430a      	orrs	r2, r1
 8003186:	605a      	str	r2, [r3, #4]
  }
}
 8003188:	46c0      	nop			@ (mov r8, r8)
 800318a:	46bd      	mov	sp, r7
 800318c:	b002      	add	sp, #8
 800318e:	bd80      	pop	{r7, pc}
 8003190:	ffff7fff 	.word	0xffff7fff
 8003194:	fffdffff 	.word	0xfffdffff
 8003198:	fffeffff 	.word	0xfffeffff
 800319c:	fffbffff 	.word	0xfffbffff
 80031a0:	ffffefff 	.word	0xffffefff
 80031a4:	ffffdfff 	.word	0xffffdfff
 80031a8:	ffefffff 	.word	0xffefffff
 80031ac:	ff9fffff 	.word	0xff9fffff
 80031b0:	fff7ffff 	.word	0xfff7ffff

080031b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b092      	sub	sp, #72	@ 0x48
 80031b8:	af02      	add	r7, sp, #8
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2290      	movs	r2, #144	@ 0x90
 80031c0:	2100      	movs	r1, #0
 80031c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031c4:	f7fd fdde 	bl	8000d84 <HAL_GetTick>
 80031c8:	0003      	movs	r3, r0
 80031ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	2208      	movs	r2, #8
 80031d4:	4013      	ands	r3, r2
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d12d      	bne.n	8003236 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031dc:	2280      	movs	r2, #128	@ 0x80
 80031de:	0391      	lsls	r1, r2, #14
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	4a47      	ldr	r2, [pc, #284]	@ (8003300 <UART_CheckIdleState+0x14c>)
 80031e4:	9200      	str	r2, [sp, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f000 f88e 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 80031ec:	1e03      	subs	r3, r0, #0
 80031ee:	d022      	beq.n	8003236 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031f0:	f3ef 8310 	mrs	r3, PRIMASK
 80031f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80031f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80031f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80031fa:	2301      	movs	r3, #1
 80031fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003200:	f383 8810 	msr	PRIMASK, r3
}
 8003204:	46c0      	nop			@ (mov r8, r8)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2180      	movs	r1, #128	@ 0x80
 8003212:	438a      	bics	r2, r1
 8003214:	601a      	str	r2, [r3, #0]
 8003216:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003218:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800321c:	f383 8810 	msr	PRIMASK, r3
}
 8003220:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2288      	movs	r2, #136	@ 0x88
 8003226:	2120      	movs	r1, #32
 8003228:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2284      	movs	r2, #132	@ 0x84
 800322e:	2100      	movs	r1, #0
 8003230:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e060      	b.n	80032f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	4013      	ands	r3, r2
 8003240:	2b04      	cmp	r3, #4
 8003242:	d146      	bne.n	80032d2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003244:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003246:	2280      	movs	r2, #128	@ 0x80
 8003248:	03d1      	lsls	r1, r2, #15
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4a2c      	ldr	r2, [pc, #176]	@ (8003300 <UART_CheckIdleState+0x14c>)
 800324e:	9200      	str	r2, [sp, #0]
 8003250:	2200      	movs	r2, #0
 8003252:	f000 f859 	bl	8003308 <UART_WaitOnFlagUntilTimeout>
 8003256:	1e03      	subs	r3, r0, #0
 8003258:	d03b      	beq.n	80032d2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800325a:	f3ef 8310 	mrs	r3, PRIMASK
 800325e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003260:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003262:	637b      	str	r3, [r7, #52]	@ 0x34
 8003264:	2301      	movs	r3, #1
 8003266:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	f383 8810 	msr	PRIMASK, r3
}
 800326e:	46c0      	nop			@ (mov r8, r8)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4922      	ldr	r1, [pc, #136]	@ (8003304 <UART_CheckIdleState+0x150>)
 800327c:	400a      	ands	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003282:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f383 8810 	msr	PRIMASK, r3
}
 800328a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800328c:	f3ef 8310 	mrs	r3, PRIMASK
 8003290:	61bb      	str	r3, [r7, #24]
  return(result);
 8003292:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003294:	633b      	str	r3, [r7, #48]	@ 0x30
 8003296:	2301      	movs	r3, #1
 8003298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	689a      	ldr	r2, [r3, #8]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	438a      	bics	r2, r1
 80032b0:	609a      	str	r2, [r3, #8]
 80032b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	f383 8810 	msr	PRIMASK, r3
}
 80032bc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	228c      	movs	r2, #140	@ 0x8c
 80032c2:	2120      	movs	r1, #32
 80032c4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2284      	movs	r2, #132	@ 0x84
 80032ca:	2100      	movs	r1, #0
 80032cc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e012      	b.n	80032f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2288      	movs	r2, #136	@ 0x88
 80032d6:	2120      	movs	r1, #32
 80032d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	228c      	movs	r2, #140	@ 0x8c
 80032de:	2120      	movs	r1, #32
 80032e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2284      	movs	r2, #132	@ 0x84
 80032f2:	2100      	movs	r1, #0
 80032f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	0018      	movs	r0, r3
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b010      	add	sp, #64	@ 0x40
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	01ffffff 	.word	0x01ffffff
 8003304:	fffffedf 	.word	0xfffffedf

08003308 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	1dfb      	adds	r3, r7, #7
 8003316:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003318:	e051      	b.n	80033be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	3301      	adds	r3, #1
 800331e:	d04e      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003320:	f7fd fd30 	bl	8000d84 <HAL_GetTick>
 8003324:	0002      	movs	r2, r0
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	429a      	cmp	r2, r3
 800332e:	d302      	bcc.n	8003336 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d101      	bne.n	800333a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e051      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2204      	movs	r2, #4
 8003342:	4013      	ands	r3, r2
 8003344:	d03b      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0xb6>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2b80      	cmp	r3, #128	@ 0x80
 800334a:	d038      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0xb6>
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	2b40      	cmp	r3, #64	@ 0x40
 8003350:	d035      	beq.n	80033be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69db      	ldr	r3, [r3, #28]
 8003358:	2208      	movs	r2, #8
 800335a:	4013      	ands	r3, r2
 800335c:	2b08      	cmp	r3, #8
 800335e:	d111      	bne.n	8003384 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2208      	movs	r2, #8
 8003366:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	0018      	movs	r0, r3
 800336c:	f000 f83c 	bl	80033e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2290      	movs	r2, #144	@ 0x90
 8003374:	2108      	movs	r1, #8
 8003376:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2284      	movs	r2, #132	@ 0x84
 800337c:	2100      	movs	r1, #0
 800337e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e02c      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	69da      	ldr	r2, [r3, #28]
 800338a:	2380      	movs	r3, #128	@ 0x80
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	401a      	ands	r2, r3
 8003390:	2380      	movs	r3, #128	@ 0x80
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	429a      	cmp	r2, r3
 8003396:	d112      	bne.n	80033be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2280      	movs	r2, #128	@ 0x80
 800339e:	0112      	lsls	r2, r2, #4
 80033a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 f81f 	bl	80033e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2290      	movs	r2, #144	@ 0x90
 80033ae:	2120      	movs	r1, #32
 80033b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2284      	movs	r2, #132	@ 0x84
 80033b6:	2100      	movs	r1, #0
 80033b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e00f      	b.n	80033de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	69db      	ldr	r3, [r3, #28]
 80033c4:	68ba      	ldr	r2, [r7, #8]
 80033c6:	4013      	ands	r3, r2
 80033c8:	68ba      	ldr	r2, [r7, #8]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	425a      	negs	r2, r3
 80033ce:	4153      	adcs	r3, r2
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	001a      	movs	r2, r3
 80033d4:	1dfb      	adds	r3, r7, #7
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d09e      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	0018      	movs	r0, r3
 80033e0:	46bd      	mov	sp, r7
 80033e2:	b004      	add	sp, #16
 80033e4:	bd80      	pop	{r7, pc}
	...

080033e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b08e      	sub	sp, #56	@ 0x38
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033f0:	f3ef 8310 	mrs	r3, PRIMASK
 80033f4:	617b      	str	r3, [r7, #20]
  return(result);
 80033f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80033f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80033fa:	2301      	movs	r3, #1
 80033fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f383 8810 	msr	PRIMASK, r3
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4926      	ldr	r1, [pc, #152]	@ (80034ac <UART_EndRxTransfer+0xc4>)
 8003412:	400a      	ands	r2, r1
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003418:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f383 8810 	msr	PRIMASK, r3
}
 8003420:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003422:	f3ef 8310 	mrs	r3, PRIMASK
 8003426:	623b      	str	r3, [r7, #32]
  return(result);
 8003428:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800342a:	633b      	str	r3, [r7, #48]	@ 0x30
 800342c:	2301      	movs	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003432:	f383 8810 	msr	PRIMASK, r3
}
 8003436:	46c0      	nop			@ (mov r8, r8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689a      	ldr	r2, [r3, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	491b      	ldr	r1, [pc, #108]	@ (80034b0 <UART_EndRxTransfer+0xc8>)
 8003444:	400a      	ands	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344e:	f383 8810 	msr	PRIMASK, r3
}
 8003452:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d118      	bne.n	800348e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800345c:	f3ef 8310 	mrs	r3, PRIMASK
 8003460:	60bb      	str	r3, [r7, #8]
  return(result);
 8003462:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003466:	2301      	movs	r3, #1
 8003468:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f383 8810 	msr	PRIMASK, r3
}
 8003470:	46c0      	nop			@ (mov r8, r8)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	2110      	movs	r1, #16
 800347e:	438a      	bics	r2, r1
 8003480:	601a      	str	r2, [r3, #0]
 8003482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003484:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	f383 8810 	msr	PRIMASK, r3
}
 800348c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	228c      	movs	r2, #140	@ 0x8c
 8003492:	2120      	movs	r1, #32
 8003494:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80034a2:	46c0      	nop			@ (mov r8, r8)
 80034a4:	46bd      	mov	sp, r7
 80034a6:	b00e      	add	sp, #56	@ 0x38
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	46c0      	nop			@ (mov r8, r8)
 80034ac:	fffffedf 	.word	0xfffffedf
 80034b0:	effffffe 	.word	0xeffffffe

080034b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	225e      	movs	r2, #94	@ 0x5e
 80034c6:	2100      	movs	r1, #0
 80034c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2256      	movs	r2, #86	@ 0x56
 80034ce:	2100      	movs	r1, #0
 80034d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	0018      	movs	r0, r3
 80034d6:	f7ff fc27 	bl	8002d28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034da:	46c0      	nop			@ (mov r8, r8)
 80034dc:	46bd      	mov	sp, r7
 80034de:	b004      	add	sp, #16
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034ea:	f3ef 8310 	mrs	r3, PRIMASK
 80034ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80034f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034f2:	617b      	str	r3, [r7, #20]
 80034f4:	2301      	movs	r3, #1
 80034f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f383 8810 	msr	PRIMASK, r3
}
 80034fe:	46c0      	nop			@ (mov r8, r8)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2140      	movs	r1, #64	@ 0x40
 800350c:	438a      	bics	r2, r1
 800350e:	601a      	str	r2, [r3, #0]
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	f383 8810 	msr	PRIMASK, r3
}
 800351a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2288      	movs	r2, #136	@ 0x88
 8003520:	2120      	movs	r1, #32
 8003522:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	0018      	movs	r0, r3
 800352e:	f7ff fbf3 	bl	8002d18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003532:	46c0      	nop			@ (mov r8, r8)
 8003534:	46bd      	mov	sp, r7
 8003536:	b006      	add	sp, #24
 8003538:	bd80      	pop	{r7, pc}

0800353a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800353a:	b580      	push	{r7, lr}
 800353c:	b082      	sub	sp, #8
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003542:	46c0      	nop			@ (mov r8, r8)
 8003544:	46bd      	mov	sp, r7
 8003546:	b002      	add	sp, #8
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b082      	sub	sp, #8
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003552:	46c0      	nop			@ (mov r8, r8)
 8003554:	46bd      	mov	sp, r7
 8003556:	b002      	add	sp, #8
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
	...

0800356c <std>:
 800356c:	2300      	movs	r3, #0
 800356e:	b510      	push	{r4, lr}
 8003570:	0004      	movs	r4, r0
 8003572:	6003      	str	r3, [r0, #0]
 8003574:	6043      	str	r3, [r0, #4]
 8003576:	6083      	str	r3, [r0, #8]
 8003578:	8181      	strh	r1, [r0, #12]
 800357a:	6643      	str	r3, [r0, #100]	@ 0x64
 800357c:	81c2      	strh	r2, [r0, #14]
 800357e:	6103      	str	r3, [r0, #16]
 8003580:	6143      	str	r3, [r0, #20]
 8003582:	6183      	str	r3, [r0, #24]
 8003584:	0019      	movs	r1, r3
 8003586:	2208      	movs	r2, #8
 8003588:	305c      	adds	r0, #92	@ 0x5c
 800358a:	f000 fa6d 	bl	8003a68 <memset>
 800358e:	4b0b      	ldr	r3, [pc, #44]	@ (80035bc <std+0x50>)
 8003590:	6224      	str	r4, [r4, #32]
 8003592:	6263      	str	r3, [r4, #36]	@ 0x24
 8003594:	4b0a      	ldr	r3, [pc, #40]	@ (80035c0 <std+0x54>)
 8003596:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003598:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <std+0x58>)
 800359a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800359c:	4b0a      	ldr	r3, [pc, #40]	@ (80035c8 <std+0x5c>)
 800359e:	6323      	str	r3, [r4, #48]	@ 0x30
 80035a0:	4b0a      	ldr	r3, [pc, #40]	@ (80035cc <std+0x60>)
 80035a2:	429c      	cmp	r4, r3
 80035a4:	d005      	beq.n	80035b2 <std+0x46>
 80035a6:	4b0a      	ldr	r3, [pc, #40]	@ (80035d0 <std+0x64>)
 80035a8:	429c      	cmp	r4, r3
 80035aa:	d002      	beq.n	80035b2 <std+0x46>
 80035ac:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <std+0x68>)
 80035ae:	429c      	cmp	r4, r3
 80035b0:	d103      	bne.n	80035ba <std+0x4e>
 80035b2:	0020      	movs	r0, r4
 80035b4:	3058      	adds	r0, #88	@ 0x58
 80035b6:	f000 faed 	bl	8003b94 <__retarget_lock_init_recursive>
 80035ba:	bd10      	pop	{r4, pc}
 80035bc:	0800388d 	.word	0x0800388d
 80035c0:	080038b9 	.word	0x080038b9
 80035c4:	080038f1 	.word	0x080038f1
 80035c8:	0800391d 	.word	0x0800391d
 80035cc:	20000148 	.word	0x20000148
 80035d0:	200001b0 	.word	0x200001b0
 80035d4:	20000218 	.word	0x20000218

080035d8 <stdio_exit_handler>:
 80035d8:	b510      	push	{r4, lr}
 80035da:	4a03      	ldr	r2, [pc, #12]	@ (80035e8 <stdio_exit_handler+0x10>)
 80035dc:	4903      	ldr	r1, [pc, #12]	@ (80035ec <stdio_exit_handler+0x14>)
 80035de:	4804      	ldr	r0, [pc, #16]	@ (80035f0 <stdio_exit_handler+0x18>)
 80035e0:	f000 f86c 	bl	80036bc <_fwalk_sglue>
 80035e4:	bd10      	pop	{r4, pc}
 80035e6:	46c0      	nop			@ (mov r8, r8)
 80035e8:	2000000c 	.word	0x2000000c
 80035ec:	08004d1d 	.word	0x08004d1d
 80035f0:	2000001c 	.word	0x2000001c

080035f4 <cleanup_stdio>:
 80035f4:	6841      	ldr	r1, [r0, #4]
 80035f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003624 <cleanup_stdio+0x30>)
 80035f8:	b510      	push	{r4, lr}
 80035fa:	0004      	movs	r4, r0
 80035fc:	4299      	cmp	r1, r3
 80035fe:	d001      	beq.n	8003604 <cleanup_stdio+0x10>
 8003600:	f001 fb8c 	bl	8004d1c <_fflush_r>
 8003604:	68a1      	ldr	r1, [r4, #8]
 8003606:	4b08      	ldr	r3, [pc, #32]	@ (8003628 <cleanup_stdio+0x34>)
 8003608:	4299      	cmp	r1, r3
 800360a:	d002      	beq.n	8003612 <cleanup_stdio+0x1e>
 800360c:	0020      	movs	r0, r4
 800360e:	f001 fb85 	bl	8004d1c <_fflush_r>
 8003612:	68e1      	ldr	r1, [r4, #12]
 8003614:	4b05      	ldr	r3, [pc, #20]	@ (800362c <cleanup_stdio+0x38>)
 8003616:	4299      	cmp	r1, r3
 8003618:	d002      	beq.n	8003620 <cleanup_stdio+0x2c>
 800361a:	0020      	movs	r0, r4
 800361c:	f001 fb7e 	bl	8004d1c <_fflush_r>
 8003620:	bd10      	pop	{r4, pc}
 8003622:	46c0      	nop			@ (mov r8, r8)
 8003624:	20000148 	.word	0x20000148
 8003628:	200001b0 	.word	0x200001b0
 800362c:	20000218 	.word	0x20000218

08003630 <global_stdio_init.part.0>:
 8003630:	b510      	push	{r4, lr}
 8003632:	4b09      	ldr	r3, [pc, #36]	@ (8003658 <global_stdio_init.part.0+0x28>)
 8003634:	4a09      	ldr	r2, [pc, #36]	@ (800365c <global_stdio_init.part.0+0x2c>)
 8003636:	2104      	movs	r1, #4
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	4809      	ldr	r0, [pc, #36]	@ (8003660 <global_stdio_init.part.0+0x30>)
 800363c:	2200      	movs	r2, #0
 800363e:	f7ff ff95 	bl	800356c <std>
 8003642:	2201      	movs	r2, #1
 8003644:	2109      	movs	r1, #9
 8003646:	4807      	ldr	r0, [pc, #28]	@ (8003664 <global_stdio_init.part.0+0x34>)
 8003648:	f7ff ff90 	bl	800356c <std>
 800364c:	2202      	movs	r2, #2
 800364e:	2112      	movs	r1, #18
 8003650:	4805      	ldr	r0, [pc, #20]	@ (8003668 <global_stdio_init.part.0+0x38>)
 8003652:	f7ff ff8b 	bl	800356c <std>
 8003656:	bd10      	pop	{r4, pc}
 8003658:	20000280 	.word	0x20000280
 800365c:	080035d9 	.word	0x080035d9
 8003660:	20000148 	.word	0x20000148
 8003664:	200001b0 	.word	0x200001b0
 8003668:	20000218 	.word	0x20000218

0800366c <__sfp_lock_acquire>:
 800366c:	b510      	push	{r4, lr}
 800366e:	4802      	ldr	r0, [pc, #8]	@ (8003678 <__sfp_lock_acquire+0xc>)
 8003670:	f000 fa91 	bl	8003b96 <__retarget_lock_acquire_recursive>
 8003674:	bd10      	pop	{r4, pc}
 8003676:	46c0      	nop			@ (mov r8, r8)
 8003678:	20000289 	.word	0x20000289

0800367c <__sfp_lock_release>:
 800367c:	b510      	push	{r4, lr}
 800367e:	4802      	ldr	r0, [pc, #8]	@ (8003688 <__sfp_lock_release+0xc>)
 8003680:	f000 fa8a 	bl	8003b98 <__retarget_lock_release_recursive>
 8003684:	bd10      	pop	{r4, pc}
 8003686:	46c0      	nop			@ (mov r8, r8)
 8003688:	20000289 	.word	0x20000289

0800368c <__sinit>:
 800368c:	b510      	push	{r4, lr}
 800368e:	0004      	movs	r4, r0
 8003690:	f7ff ffec 	bl	800366c <__sfp_lock_acquire>
 8003694:	6a23      	ldr	r3, [r4, #32]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <__sinit+0x14>
 800369a:	f7ff ffef 	bl	800367c <__sfp_lock_release>
 800369e:	bd10      	pop	{r4, pc}
 80036a0:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <__sinit+0x28>)
 80036a2:	6223      	str	r3, [r4, #32]
 80036a4:	4b04      	ldr	r3, [pc, #16]	@ (80036b8 <__sinit+0x2c>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f6      	bne.n	800369a <__sinit+0xe>
 80036ac:	f7ff ffc0 	bl	8003630 <global_stdio_init.part.0>
 80036b0:	e7f3      	b.n	800369a <__sinit+0xe>
 80036b2:	46c0      	nop			@ (mov r8, r8)
 80036b4:	080035f5 	.word	0x080035f5
 80036b8:	20000280 	.word	0x20000280

080036bc <_fwalk_sglue>:
 80036bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036be:	0014      	movs	r4, r2
 80036c0:	2600      	movs	r6, #0
 80036c2:	9000      	str	r0, [sp, #0]
 80036c4:	9101      	str	r1, [sp, #4]
 80036c6:	68a5      	ldr	r5, [r4, #8]
 80036c8:	6867      	ldr	r7, [r4, #4]
 80036ca:	3f01      	subs	r7, #1
 80036cc:	d504      	bpl.n	80036d8 <_fwalk_sglue+0x1c>
 80036ce:	6824      	ldr	r4, [r4, #0]
 80036d0:	2c00      	cmp	r4, #0
 80036d2:	d1f8      	bne.n	80036c6 <_fwalk_sglue+0xa>
 80036d4:	0030      	movs	r0, r6
 80036d6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80036d8:	89ab      	ldrh	r3, [r5, #12]
 80036da:	2b01      	cmp	r3, #1
 80036dc:	d908      	bls.n	80036f0 <_fwalk_sglue+0x34>
 80036de:	220e      	movs	r2, #14
 80036e0:	5eab      	ldrsh	r3, [r5, r2]
 80036e2:	3301      	adds	r3, #1
 80036e4:	d004      	beq.n	80036f0 <_fwalk_sglue+0x34>
 80036e6:	0029      	movs	r1, r5
 80036e8:	9800      	ldr	r0, [sp, #0]
 80036ea:	9b01      	ldr	r3, [sp, #4]
 80036ec:	4798      	blx	r3
 80036ee:	4306      	orrs	r6, r0
 80036f0:	3568      	adds	r5, #104	@ 0x68
 80036f2:	e7ea      	b.n	80036ca <_fwalk_sglue+0xe>

080036f4 <iprintf>:
 80036f4:	b40f      	push	{r0, r1, r2, r3}
 80036f6:	b507      	push	{r0, r1, r2, lr}
 80036f8:	4905      	ldr	r1, [pc, #20]	@ (8003710 <iprintf+0x1c>)
 80036fa:	ab04      	add	r3, sp, #16
 80036fc:	6808      	ldr	r0, [r1, #0]
 80036fe:	cb04      	ldmia	r3!, {r2}
 8003700:	6881      	ldr	r1, [r0, #8]
 8003702:	9301      	str	r3, [sp, #4]
 8003704:	f000 fe8a 	bl	800441c <_vfiprintf_r>
 8003708:	b003      	add	sp, #12
 800370a:	bc08      	pop	{r3}
 800370c:	b004      	add	sp, #16
 800370e:	4718      	bx	r3
 8003710:	20000018 	.word	0x20000018

08003714 <_puts_r>:
 8003714:	6a03      	ldr	r3, [r0, #32]
 8003716:	b570      	push	{r4, r5, r6, lr}
 8003718:	0005      	movs	r5, r0
 800371a:	000e      	movs	r6, r1
 800371c:	6884      	ldr	r4, [r0, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d101      	bne.n	8003726 <_puts_r+0x12>
 8003722:	f7ff ffb3 	bl	800368c <__sinit>
 8003726:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003728:	07db      	lsls	r3, r3, #31
 800372a:	d405      	bmi.n	8003738 <_puts_r+0x24>
 800372c:	89a3      	ldrh	r3, [r4, #12]
 800372e:	059b      	lsls	r3, r3, #22
 8003730:	d402      	bmi.n	8003738 <_puts_r+0x24>
 8003732:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003734:	f000 fa2f 	bl	8003b96 <__retarget_lock_acquire_recursive>
 8003738:	89a3      	ldrh	r3, [r4, #12]
 800373a:	071b      	lsls	r3, r3, #28
 800373c:	d502      	bpl.n	8003744 <_puts_r+0x30>
 800373e:	6923      	ldr	r3, [r4, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11f      	bne.n	8003784 <_puts_r+0x70>
 8003744:	0021      	movs	r1, r4
 8003746:	0028      	movs	r0, r5
 8003748:	f000 f930 	bl	80039ac <__swsetup_r>
 800374c:	2800      	cmp	r0, #0
 800374e:	d019      	beq.n	8003784 <_puts_r+0x70>
 8003750:	2501      	movs	r5, #1
 8003752:	426d      	negs	r5, r5
 8003754:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003756:	07db      	lsls	r3, r3, #31
 8003758:	d405      	bmi.n	8003766 <_puts_r+0x52>
 800375a:	89a3      	ldrh	r3, [r4, #12]
 800375c:	059b      	lsls	r3, r3, #22
 800375e:	d402      	bmi.n	8003766 <_puts_r+0x52>
 8003760:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003762:	f000 fa19 	bl	8003b98 <__retarget_lock_release_recursive>
 8003766:	0028      	movs	r0, r5
 8003768:	bd70      	pop	{r4, r5, r6, pc}
 800376a:	3601      	adds	r6, #1
 800376c:	60a3      	str	r3, [r4, #8]
 800376e:	2b00      	cmp	r3, #0
 8003770:	da04      	bge.n	800377c <_puts_r+0x68>
 8003772:	69a2      	ldr	r2, [r4, #24]
 8003774:	429a      	cmp	r2, r3
 8003776:	dc16      	bgt.n	80037a6 <_puts_r+0x92>
 8003778:	290a      	cmp	r1, #10
 800377a:	d014      	beq.n	80037a6 <_puts_r+0x92>
 800377c:	6823      	ldr	r3, [r4, #0]
 800377e:	1c5a      	adds	r2, r3, #1
 8003780:	6022      	str	r2, [r4, #0]
 8003782:	7019      	strb	r1, [r3, #0]
 8003784:	68a3      	ldr	r3, [r4, #8]
 8003786:	7831      	ldrb	r1, [r6, #0]
 8003788:	3b01      	subs	r3, #1
 800378a:	2900      	cmp	r1, #0
 800378c:	d1ed      	bne.n	800376a <_puts_r+0x56>
 800378e:	60a3      	str	r3, [r4, #8]
 8003790:	2b00      	cmp	r3, #0
 8003792:	da0f      	bge.n	80037b4 <_puts_r+0xa0>
 8003794:	0022      	movs	r2, r4
 8003796:	0028      	movs	r0, r5
 8003798:	310a      	adds	r1, #10
 800379a:	f000 f8c5 	bl	8003928 <__swbuf_r>
 800379e:	3001      	adds	r0, #1
 80037a0:	d0d6      	beq.n	8003750 <_puts_r+0x3c>
 80037a2:	250a      	movs	r5, #10
 80037a4:	e7d6      	b.n	8003754 <_puts_r+0x40>
 80037a6:	0022      	movs	r2, r4
 80037a8:	0028      	movs	r0, r5
 80037aa:	f000 f8bd 	bl	8003928 <__swbuf_r>
 80037ae:	3001      	adds	r0, #1
 80037b0:	d1e8      	bne.n	8003784 <_puts_r+0x70>
 80037b2:	e7cd      	b.n	8003750 <_puts_r+0x3c>
 80037b4:	6823      	ldr	r3, [r4, #0]
 80037b6:	1c5a      	adds	r2, r3, #1
 80037b8:	6022      	str	r2, [r4, #0]
 80037ba:	220a      	movs	r2, #10
 80037bc:	701a      	strb	r2, [r3, #0]
 80037be:	e7f0      	b.n	80037a2 <_puts_r+0x8e>

080037c0 <puts>:
 80037c0:	b510      	push	{r4, lr}
 80037c2:	4b03      	ldr	r3, [pc, #12]	@ (80037d0 <puts+0x10>)
 80037c4:	0001      	movs	r1, r0
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	f7ff ffa4 	bl	8003714 <_puts_r>
 80037cc:	bd10      	pop	{r4, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	20000018 	.word	0x20000018

080037d4 <sniprintf>:
 80037d4:	b40c      	push	{r2, r3}
 80037d6:	b530      	push	{r4, r5, lr}
 80037d8:	4b17      	ldr	r3, [pc, #92]	@ (8003838 <sniprintf+0x64>)
 80037da:	000c      	movs	r4, r1
 80037dc:	681d      	ldr	r5, [r3, #0]
 80037de:	b09d      	sub	sp, #116	@ 0x74
 80037e0:	2900      	cmp	r1, #0
 80037e2:	da08      	bge.n	80037f6 <sniprintf+0x22>
 80037e4:	238b      	movs	r3, #139	@ 0x8b
 80037e6:	2001      	movs	r0, #1
 80037e8:	602b      	str	r3, [r5, #0]
 80037ea:	4240      	negs	r0, r0
 80037ec:	b01d      	add	sp, #116	@ 0x74
 80037ee:	bc30      	pop	{r4, r5}
 80037f0:	bc08      	pop	{r3}
 80037f2:	b002      	add	sp, #8
 80037f4:	4718      	bx	r3
 80037f6:	2382      	movs	r3, #130	@ 0x82
 80037f8:	466a      	mov	r2, sp
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	8293      	strh	r3, [r2, #20]
 80037fe:	2300      	movs	r3, #0
 8003800:	9002      	str	r0, [sp, #8]
 8003802:	9006      	str	r0, [sp, #24]
 8003804:	4299      	cmp	r1, r3
 8003806:	d000      	beq.n	800380a <sniprintf+0x36>
 8003808:	1e4b      	subs	r3, r1, #1
 800380a:	9304      	str	r3, [sp, #16]
 800380c:	9307      	str	r3, [sp, #28]
 800380e:	2301      	movs	r3, #1
 8003810:	466a      	mov	r2, sp
 8003812:	425b      	negs	r3, r3
 8003814:	82d3      	strh	r3, [r2, #22]
 8003816:	0028      	movs	r0, r5
 8003818:	ab21      	add	r3, sp, #132	@ 0x84
 800381a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800381c:	a902      	add	r1, sp, #8
 800381e:	9301      	str	r3, [sp, #4]
 8003820:	f000 fb18 	bl	8003e54 <_svfiprintf_r>
 8003824:	1c43      	adds	r3, r0, #1
 8003826:	da01      	bge.n	800382c <sniprintf+0x58>
 8003828:	238b      	movs	r3, #139	@ 0x8b
 800382a:	602b      	str	r3, [r5, #0]
 800382c:	2c00      	cmp	r4, #0
 800382e:	d0dd      	beq.n	80037ec <sniprintf+0x18>
 8003830:	2200      	movs	r2, #0
 8003832:	9b02      	ldr	r3, [sp, #8]
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e7d9      	b.n	80037ec <sniprintf+0x18>
 8003838:	20000018 	.word	0x20000018

0800383c <siscanf>:
 800383c:	b40e      	push	{r1, r2, r3}
 800383e:	b530      	push	{r4, r5, lr}
 8003840:	2381      	movs	r3, #129	@ 0x81
 8003842:	b09c      	sub	sp, #112	@ 0x70
 8003844:	466a      	mov	r2, sp
 8003846:	ac1f      	add	r4, sp, #124	@ 0x7c
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	cc20      	ldmia	r4!, {r5}
 800384c:	8293      	strh	r3, [r2, #20]
 800384e:	9002      	str	r0, [sp, #8]
 8003850:	9006      	str	r0, [sp, #24]
 8003852:	f7fc fc59 	bl	8000108 <strlen>
 8003856:	4b0b      	ldr	r3, [pc, #44]	@ (8003884 <siscanf+0x48>)
 8003858:	466a      	mov	r2, sp
 800385a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800385c:	2300      	movs	r3, #0
 800385e:	9003      	str	r0, [sp, #12]
 8003860:	9007      	str	r0, [sp, #28]
 8003862:	4809      	ldr	r0, [pc, #36]	@ (8003888 <siscanf+0x4c>)
 8003864:	930f      	str	r3, [sp, #60]	@ 0x3c
 8003866:	9314      	str	r3, [sp, #80]	@ 0x50
 8003868:	3b01      	subs	r3, #1
 800386a:	82d3      	strh	r3, [r2, #22]
 800386c:	a902      	add	r1, sp, #8
 800386e:	0023      	movs	r3, r4
 8003870:	002a      	movs	r2, r5
 8003872:	6800      	ldr	r0, [r0, #0]
 8003874:	9401      	str	r4, [sp, #4]
 8003876:	f000 fc47 	bl	8004108 <__ssvfiscanf_r>
 800387a:	b01c      	add	sp, #112	@ 0x70
 800387c:	bc30      	pop	{r4, r5}
 800387e:	bc08      	pop	{r3}
 8003880:	b003      	add	sp, #12
 8003882:	4718      	bx	r3
 8003884:	080038b5 	.word	0x080038b5
 8003888:	20000018 	.word	0x20000018

0800388c <__sread>:
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	000c      	movs	r4, r1
 8003890:	250e      	movs	r5, #14
 8003892:	5f49      	ldrsh	r1, [r1, r5]
 8003894:	f000 f92c 	bl	8003af0 <_read_r>
 8003898:	2800      	cmp	r0, #0
 800389a:	db03      	blt.n	80038a4 <__sread+0x18>
 800389c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800389e:	181b      	adds	r3, r3, r0
 80038a0:	6563      	str	r3, [r4, #84]	@ 0x54
 80038a2:	bd70      	pop	{r4, r5, r6, pc}
 80038a4:	89a3      	ldrh	r3, [r4, #12]
 80038a6:	4a02      	ldr	r2, [pc, #8]	@ (80038b0 <__sread+0x24>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	81a3      	strh	r3, [r4, #12]
 80038ac:	e7f9      	b.n	80038a2 <__sread+0x16>
 80038ae:	46c0      	nop			@ (mov r8, r8)
 80038b0:	ffffefff 	.word	0xffffefff

080038b4 <__seofread>:
 80038b4:	2000      	movs	r0, #0
 80038b6:	4770      	bx	lr

080038b8 <__swrite>:
 80038b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ba:	001f      	movs	r7, r3
 80038bc:	898b      	ldrh	r3, [r1, #12]
 80038be:	0005      	movs	r5, r0
 80038c0:	000c      	movs	r4, r1
 80038c2:	0016      	movs	r6, r2
 80038c4:	05db      	lsls	r3, r3, #23
 80038c6:	d505      	bpl.n	80038d4 <__swrite+0x1c>
 80038c8:	230e      	movs	r3, #14
 80038ca:	5ec9      	ldrsh	r1, [r1, r3]
 80038cc:	2200      	movs	r2, #0
 80038ce:	2302      	movs	r3, #2
 80038d0:	f000 f8fa 	bl	8003ac8 <_lseek_r>
 80038d4:	89a3      	ldrh	r3, [r4, #12]
 80038d6:	4a05      	ldr	r2, [pc, #20]	@ (80038ec <__swrite+0x34>)
 80038d8:	0028      	movs	r0, r5
 80038da:	4013      	ands	r3, r2
 80038dc:	81a3      	strh	r3, [r4, #12]
 80038de:	0032      	movs	r2, r6
 80038e0:	230e      	movs	r3, #14
 80038e2:	5ee1      	ldrsh	r1, [r4, r3]
 80038e4:	003b      	movs	r3, r7
 80038e6:	f000 f917 	bl	8003b18 <_write_r>
 80038ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80038ec:	ffffefff 	.word	0xffffefff

080038f0 <__sseek>:
 80038f0:	b570      	push	{r4, r5, r6, lr}
 80038f2:	000c      	movs	r4, r1
 80038f4:	250e      	movs	r5, #14
 80038f6:	5f49      	ldrsh	r1, [r1, r5]
 80038f8:	f000 f8e6 	bl	8003ac8 <_lseek_r>
 80038fc:	89a3      	ldrh	r3, [r4, #12]
 80038fe:	1c42      	adds	r2, r0, #1
 8003900:	d103      	bne.n	800390a <__sseek+0x1a>
 8003902:	4a05      	ldr	r2, [pc, #20]	@ (8003918 <__sseek+0x28>)
 8003904:	4013      	ands	r3, r2
 8003906:	81a3      	strh	r3, [r4, #12]
 8003908:	bd70      	pop	{r4, r5, r6, pc}
 800390a:	2280      	movs	r2, #128	@ 0x80
 800390c:	0152      	lsls	r2, r2, #5
 800390e:	4313      	orrs	r3, r2
 8003910:	81a3      	strh	r3, [r4, #12]
 8003912:	6560      	str	r0, [r4, #84]	@ 0x54
 8003914:	e7f8      	b.n	8003908 <__sseek+0x18>
 8003916:	46c0      	nop			@ (mov r8, r8)
 8003918:	ffffefff 	.word	0xffffefff

0800391c <__sclose>:
 800391c:	b510      	push	{r4, lr}
 800391e:	230e      	movs	r3, #14
 8003920:	5ec9      	ldrsh	r1, [r1, r3]
 8003922:	f000 f8bf 	bl	8003aa4 <_close_r>
 8003926:	bd10      	pop	{r4, pc}

08003928 <__swbuf_r>:
 8003928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800392a:	0006      	movs	r6, r0
 800392c:	000d      	movs	r5, r1
 800392e:	0014      	movs	r4, r2
 8003930:	2800      	cmp	r0, #0
 8003932:	d004      	beq.n	800393e <__swbuf_r+0x16>
 8003934:	6a03      	ldr	r3, [r0, #32]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <__swbuf_r+0x16>
 800393a:	f7ff fea7 	bl	800368c <__sinit>
 800393e:	69a3      	ldr	r3, [r4, #24]
 8003940:	60a3      	str	r3, [r4, #8]
 8003942:	89a3      	ldrh	r3, [r4, #12]
 8003944:	071b      	lsls	r3, r3, #28
 8003946:	d502      	bpl.n	800394e <__swbuf_r+0x26>
 8003948:	6923      	ldr	r3, [r4, #16]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d109      	bne.n	8003962 <__swbuf_r+0x3a>
 800394e:	0021      	movs	r1, r4
 8003950:	0030      	movs	r0, r6
 8003952:	f000 f82b 	bl	80039ac <__swsetup_r>
 8003956:	2800      	cmp	r0, #0
 8003958:	d003      	beq.n	8003962 <__swbuf_r+0x3a>
 800395a:	2501      	movs	r5, #1
 800395c:	426d      	negs	r5, r5
 800395e:	0028      	movs	r0, r5
 8003960:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003962:	6923      	ldr	r3, [r4, #16]
 8003964:	6820      	ldr	r0, [r4, #0]
 8003966:	b2ef      	uxtb	r7, r5
 8003968:	1ac0      	subs	r0, r0, r3
 800396a:	6963      	ldr	r3, [r4, #20]
 800396c:	b2ed      	uxtb	r5, r5
 800396e:	4283      	cmp	r3, r0
 8003970:	dc05      	bgt.n	800397e <__swbuf_r+0x56>
 8003972:	0021      	movs	r1, r4
 8003974:	0030      	movs	r0, r6
 8003976:	f001 f9d1 	bl	8004d1c <_fflush_r>
 800397a:	2800      	cmp	r0, #0
 800397c:	d1ed      	bne.n	800395a <__swbuf_r+0x32>
 800397e:	68a3      	ldr	r3, [r4, #8]
 8003980:	3001      	adds	r0, #1
 8003982:	3b01      	subs	r3, #1
 8003984:	60a3      	str	r3, [r4, #8]
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	1c5a      	adds	r2, r3, #1
 800398a:	6022      	str	r2, [r4, #0]
 800398c:	701f      	strb	r7, [r3, #0]
 800398e:	6963      	ldr	r3, [r4, #20]
 8003990:	4283      	cmp	r3, r0
 8003992:	d004      	beq.n	800399e <__swbuf_r+0x76>
 8003994:	89a3      	ldrh	r3, [r4, #12]
 8003996:	07db      	lsls	r3, r3, #31
 8003998:	d5e1      	bpl.n	800395e <__swbuf_r+0x36>
 800399a:	2d0a      	cmp	r5, #10
 800399c:	d1df      	bne.n	800395e <__swbuf_r+0x36>
 800399e:	0021      	movs	r1, r4
 80039a0:	0030      	movs	r0, r6
 80039a2:	f001 f9bb 	bl	8004d1c <_fflush_r>
 80039a6:	2800      	cmp	r0, #0
 80039a8:	d0d9      	beq.n	800395e <__swbuf_r+0x36>
 80039aa:	e7d6      	b.n	800395a <__swbuf_r+0x32>

080039ac <__swsetup_r>:
 80039ac:	4b2d      	ldr	r3, [pc, #180]	@ (8003a64 <__swsetup_r+0xb8>)
 80039ae:	b570      	push	{r4, r5, r6, lr}
 80039b0:	0005      	movs	r5, r0
 80039b2:	6818      	ldr	r0, [r3, #0]
 80039b4:	000c      	movs	r4, r1
 80039b6:	2800      	cmp	r0, #0
 80039b8:	d004      	beq.n	80039c4 <__swsetup_r+0x18>
 80039ba:	6a03      	ldr	r3, [r0, #32]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <__swsetup_r+0x18>
 80039c0:	f7ff fe64 	bl	800368c <__sinit>
 80039c4:	230c      	movs	r3, #12
 80039c6:	5ee2      	ldrsh	r2, [r4, r3]
 80039c8:	0713      	lsls	r3, r2, #28
 80039ca:	d423      	bmi.n	8003a14 <__swsetup_r+0x68>
 80039cc:	06d3      	lsls	r3, r2, #27
 80039ce:	d407      	bmi.n	80039e0 <__swsetup_r+0x34>
 80039d0:	2309      	movs	r3, #9
 80039d2:	602b      	str	r3, [r5, #0]
 80039d4:	2340      	movs	r3, #64	@ 0x40
 80039d6:	2001      	movs	r0, #1
 80039d8:	4313      	orrs	r3, r2
 80039da:	81a3      	strh	r3, [r4, #12]
 80039dc:	4240      	negs	r0, r0
 80039de:	e03a      	b.n	8003a56 <__swsetup_r+0xaa>
 80039e0:	0752      	lsls	r2, r2, #29
 80039e2:	d513      	bpl.n	8003a0c <__swsetup_r+0x60>
 80039e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039e6:	2900      	cmp	r1, #0
 80039e8:	d008      	beq.n	80039fc <__swsetup_r+0x50>
 80039ea:	0023      	movs	r3, r4
 80039ec:	3344      	adds	r3, #68	@ 0x44
 80039ee:	4299      	cmp	r1, r3
 80039f0:	d002      	beq.n	80039f8 <__swsetup_r+0x4c>
 80039f2:	0028      	movs	r0, r5
 80039f4:	f000 f8d2 	bl	8003b9c <_free_r>
 80039f8:	2300      	movs	r3, #0
 80039fa:	6363      	str	r3, [r4, #52]	@ 0x34
 80039fc:	2224      	movs	r2, #36	@ 0x24
 80039fe:	89a3      	ldrh	r3, [r4, #12]
 8003a00:	4393      	bics	r3, r2
 8003a02:	81a3      	strh	r3, [r4, #12]
 8003a04:	2300      	movs	r3, #0
 8003a06:	6063      	str	r3, [r4, #4]
 8003a08:	6923      	ldr	r3, [r4, #16]
 8003a0a:	6023      	str	r3, [r4, #0]
 8003a0c:	2308      	movs	r3, #8
 8003a0e:	89a2      	ldrh	r2, [r4, #12]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	81a3      	strh	r3, [r4, #12]
 8003a14:	6923      	ldr	r3, [r4, #16]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10b      	bne.n	8003a32 <__swsetup_r+0x86>
 8003a1a:	21a0      	movs	r1, #160	@ 0xa0
 8003a1c:	2280      	movs	r2, #128	@ 0x80
 8003a1e:	89a3      	ldrh	r3, [r4, #12]
 8003a20:	0089      	lsls	r1, r1, #2
 8003a22:	0092      	lsls	r2, r2, #2
 8003a24:	400b      	ands	r3, r1
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d003      	beq.n	8003a32 <__swsetup_r+0x86>
 8003a2a:	0021      	movs	r1, r4
 8003a2c:	0028      	movs	r0, r5
 8003a2e:	f001 f9cb 	bl	8004dc8 <__smakebuf_r>
 8003a32:	230c      	movs	r3, #12
 8003a34:	5ee2      	ldrsh	r2, [r4, r3]
 8003a36:	2101      	movs	r1, #1
 8003a38:	0013      	movs	r3, r2
 8003a3a:	400b      	ands	r3, r1
 8003a3c:	420a      	tst	r2, r1
 8003a3e:	d00b      	beq.n	8003a58 <__swsetup_r+0xac>
 8003a40:	2300      	movs	r3, #0
 8003a42:	60a3      	str	r3, [r4, #8]
 8003a44:	6963      	ldr	r3, [r4, #20]
 8003a46:	425b      	negs	r3, r3
 8003a48:	61a3      	str	r3, [r4, #24]
 8003a4a:	2000      	movs	r0, #0
 8003a4c:	6923      	ldr	r3, [r4, #16]
 8003a4e:	4283      	cmp	r3, r0
 8003a50:	d101      	bne.n	8003a56 <__swsetup_r+0xaa>
 8003a52:	0613      	lsls	r3, r2, #24
 8003a54:	d4be      	bmi.n	80039d4 <__swsetup_r+0x28>
 8003a56:	bd70      	pop	{r4, r5, r6, pc}
 8003a58:	0791      	lsls	r1, r2, #30
 8003a5a:	d400      	bmi.n	8003a5e <__swsetup_r+0xb2>
 8003a5c:	6963      	ldr	r3, [r4, #20]
 8003a5e:	60a3      	str	r3, [r4, #8]
 8003a60:	e7f3      	b.n	8003a4a <__swsetup_r+0x9e>
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	20000018 	.word	0x20000018

08003a68 <memset>:
 8003a68:	0003      	movs	r3, r0
 8003a6a:	1882      	adds	r2, r0, r2
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <memset+0xa>
 8003a70:	4770      	bx	lr
 8003a72:	7019      	strb	r1, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	e7f9      	b.n	8003a6c <memset+0x4>

08003a78 <strstr>:
 8003a78:	780a      	ldrb	r2, [r1, #0]
 8003a7a:	b530      	push	{r4, r5, lr}
 8003a7c:	2a00      	cmp	r2, #0
 8003a7e:	d10c      	bne.n	8003a9a <strstr+0x22>
 8003a80:	bd30      	pop	{r4, r5, pc}
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d108      	bne.n	8003a98 <strstr+0x20>
 8003a86:	2301      	movs	r3, #1
 8003a88:	5ccc      	ldrb	r4, [r1, r3]
 8003a8a:	2c00      	cmp	r4, #0
 8003a8c:	d0f8      	beq.n	8003a80 <strstr+0x8>
 8003a8e:	5cc5      	ldrb	r5, [r0, r3]
 8003a90:	42a5      	cmp	r5, r4
 8003a92:	d101      	bne.n	8003a98 <strstr+0x20>
 8003a94:	3301      	adds	r3, #1
 8003a96:	e7f7      	b.n	8003a88 <strstr+0x10>
 8003a98:	3001      	adds	r0, #1
 8003a9a:	7803      	ldrb	r3, [r0, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1f0      	bne.n	8003a82 <strstr+0xa>
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	e7ed      	b.n	8003a80 <strstr+0x8>

08003aa4 <_close_r>:
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	b570      	push	{r4, r5, r6, lr}
 8003aa8:	4d06      	ldr	r5, [pc, #24]	@ (8003ac4 <_close_r+0x20>)
 8003aaa:	0004      	movs	r4, r0
 8003aac:	0008      	movs	r0, r1
 8003aae:	602b      	str	r3, [r5, #0]
 8003ab0:	f7fd f85d 	bl	8000b6e <_close>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d103      	bne.n	8003ac0 <_close_r+0x1c>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d000      	beq.n	8003ac0 <_close_r+0x1c>
 8003abe:	6023      	str	r3, [r4, #0]
 8003ac0:	bd70      	pop	{r4, r5, r6, pc}
 8003ac2:	46c0      	nop			@ (mov r8, r8)
 8003ac4:	20000284 	.word	0x20000284

08003ac8 <_lseek_r>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	0004      	movs	r4, r0
 8003acc:	0008      	movs	r0, r1
 8003ace:	0011      	movs	r1, r2
 8003ad0:	001a      	movs	r2, r3
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	4d05      	ldr	r5, [pc, #20]	@ (8003aec <_lseek_r+0x24>)
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	f7fd f86a 	bl	8000bb0 <_lseek>
 8003adc:	1c43      	adds	r3, r0, #1
 8003ade:	d103      	bne.n	8003ae8 <_lseek_r+0x20>
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d000      	beq.n	8003ae8 <_lseek_r+0x20>
 8003ae6:	6023      	str	r3, [r4, #0]
 8003ae8:	bd70      	pop	{r4, r5, r6, pc}
 8003aea:	46c0      	nop			@ (mov r8, r8)
 8003aec:	20000284 	.word	0x20000284

08003af0 <_read_r>:
 8003af0:	b570      	push	{r4, r5, r6, lr}
 8003af2:	0004      	movs	r4, r0
 8003af4:	0008      	movs	r0, r1
 8003af6:	0011      	movs	r1, r2
 8003af8:	001a      	movs	r2, r3
 8003afa:	2300      	movs	r3, #0
 8003afc:	4d05      	ldr	r5, [pc, #20]	@ (8003b14 <_read_r+0x24>)
 8003afe:	602b      	str	r3, [r5, #0]
 8003b00:	f7fc fffc 	bl	8000afc <_read>
 8003b04:	1c43      	adds	r3, r0, #1
 8003b06:	d103      	bne.n	8003b10 <_read_r+0x20>
 8003b08:	682b      	ldr	r3, [r5, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d000      	beq.n	8003b10 <_read_r+0x20>
 8003b0e:	6023      	str	r3, [r4, #0]
 8003b10:	bd70      	pop	{r4, r5, r6, pc}
 8003b12:	46c0      	nop			@ (mov r8, r8)
 8003b14:	20000284 	.word	0x20000284

08003b18 <_write_r>:
 8003b18:	b570      	push	{r4, r5, r6, lr}
 8003b1a:	0004      	movs	r4, r0
 8003b1c:	0008      	movs	r0, r1
 8003b1e:	0011      	movs	r1, r2
 8003b20:	001a      	movs	r2, r3
 8003b22:	2300      	movs	r3, #0
 8003b24:	4d05      	ldr	r5, [pc, #20]	@ (8003b3c <_write_r+0x24>)
 8003b26:	602b      	str	r3, [r5, #0]
 8003b28:	f7fd f805 	bl	8000b36 <_write>
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	d103      	bne.n	8003b38 <_write_r+0x20>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d000      	beq.n	8003b38 <_write_r+0x20>
 8003b36:	6023      	str	r3, [r4, #0]
 8003b38:	bd70      	pop	{r4, r5, r6, pc}
 8003b3a:	46c0      	nop			@ (mov r8, r8)
 8003b3c:	20000284 	.word	0x20000284

08003b40 <__errno>:
 8003b40:	4b01      	ldr	r3, [pc, #4]	@ (8003b48 <__errno+0x8>)
 8003b42:	6818      	ldr	r0, [r3, #0]
 8003b44:	4770      	bx	lr
 8003b46:	46c0      	nop			@ (mov r8, r8)
 8003b48:	20000018 	.word	0x20000018

08003b4c <__libc_init_array>:
 8003b4c:	b570      	push	{r4, r5, r6, lr}
 8003b4e:	2600      	movs	r6, #0
 8003b50:	4c0c      	ldr	r4, [pc, #48]	@ (8003b84 <__libc_init_array+0x38>)
 8003b52:	4d0d      	ldr	r5, [pc, #52]	@ (8003b88 <__libc_init_array+0x3c>)
 8003b54:	1b64      	subs	r4, r4, r5
 8003b56:	10a4      	asrs	r4, r4, #2
 8003b58:	42a6      	cmp	r6, r4
 8003b5a:	d109      	bne.n	8003b70 <__libc_init_array+0x24>
 8003b5c:	2600      	movs	r6, #0
 8003b5e:	f001 fb95 	bl	800528c <_init>
 8003b62:	4c0a      	ldr	r4, [pc, #40]	@ (8003b8c <__libc_init_array+0x40>)
 8003b64:	4d0a      	ldr	r5, [pc, #40]	@ (8003b90 <__libc_init_array+0x44>)
 8003b66:	1b64      	subs	r4, r4, r5
 8003b68:	10a4      	asrs	r4, r4, #2
 8003b6a:	42a6      	cmp	r6, r4
 8003b6c:	d105      	bne.n	8003b7a <__libc_init_array+0x2e>
 8003b6e:	bd70      	pop	{r4, r5, r6, pc}
 8003b70:	00b3      	lsls	r3, r6, #2
 8003b72:	58eb      	ldr	r3, [r5, r3]
 8003b74:	4798      	blx	r3
 8003b76:	3601      	adds	r6, #1
 8003b78:	e7ee      	b.n	8003b58 <__libc_init_array+0xc>
 8003b7a:	00b3      	lsls	r3, r6, #2
 8003b7c:	58eb      	ldr	r3, [r5, r3]
 8003b7e:	4798      	blx	r3
 8003b80:	3601      	adds	r6, #1
 8003b82:	e7f2      	b.n	8003b6a <__libc_init_array+0x1e>
 8003b84:	080059a8 	.word	0x080059a8
 8003b88:	080059a8 	.word	0x080059a8
 8003b8c:	080059ac 	.word	0x080059ac
 8003b90:	080059a8 	.word	0x080059a8

08003b94 <__retarget_lock_init_recursive>:
 8003b94:	4770      	bx	lr

08003b96 <__retarget_lock_acquire_recursive>:
 8003b96:	4770      	bx	lr

08003b98 <__retarget_lock_release_recursive>:
 8003b98:	4770      	bx	lr
	...

08003b9c <_free_r>:
 8003b9c:	b570      	push	{r4, r5, r6, lr}
 8003b9e:	0005      	movs	r5, r0
 8003ba0:	1e0c      	subs	r4, r1, #0
 8003ba2:	d010      	beq.n	8003bc6 <_free_r+0x2a>
 8003ba4:	3c04      	subs	r4, #4
 8003ba6:	6823      	ldr	r3, [r4, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	da00      	bge.n	8003bae <_free_r+0x12>
 8003bac:	18e4      	adds	r4, r4, r3
 8003bae:	0028      	movs	r0, r5
 8003bb0:	f000 f8e0 	bl	8003d74 <__malloc_lock>
 8003bb4:	4a1d      	ldr	r2, [pc, #116]	@ (8003c2c <_free_r+0x90>)
 8003bb6:	6813      	ldr	r3, [r2, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <_free_r+0x2c>
 8003bbc:	6063      	str	r3, [r4, #4]
 8003bbe:	6014      	str	r4, [r2, #0]
 8003bc0:	0028      	movs	r0, r5
 8003bc2:	f000 f8df 	bl	8003d84 <__malloc_unlock>
 8003bc6:	bd70      	pop	{r4, r5, r6, pc}
 8003bc8:	42a3      	cmp	r3, r4
 8003bca:	d908      	bls.n	8003bde <_free_r+0x42>
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	1821      	adds	r1, r4, r0
 8003bd0:	428b      	cmp	r3, r1
 8003bd2:	d1f3      	bne.n	8003bbc <_free_r+0x20>
 8003bd4:	6819      	ldr	r1, [r3, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	1809      	adds	r1, r1, r0
 8003bda:	6021      	str	r1, [r4, #0]
 8003bdc:	e7ee      	b.n	8003bbc <_free_r+0x20>
 8003bde:	001a      	movs	r2, r3
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <_free_r+0x4e>
 8003be6:	42a3      	cmp	r3, r4
 8003be8:	d9f9      	bls.n	8003bde <_free_r+0x42>
 8003bea:	6811      	ldr	r1, [r2, #0]
 8003bec:	1850      	adds	r0, r2, r1
 8003bee:	42a0      	cmp	r0, r4
 8003bf0:	d10b      	bne.n	8003c0a <_free_r+0x6e>
 8003bf2:	6820      	ldr	r0, [r4, #0]
 8003bf4:	1809      	adds	r1, r1, r0
 8003bf6:	1850      	adds	r0, r2, r1
 8003bf8:	6011      	str	r1, [r2, #0]
 8003bfa:	4283      	cmp	r3, r0
 8003bfc:	d1e0      	bne.n	8003bc0 <_free_r+0x24>
 8003bfe:	6818      	ldr	r0, [r3, #0]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	1841      	adds	r1, r0, r1
 8003c04:	6011      	str	r1, [r2, #0]
 8003c06:	6053      	str	r3, [r2, #4]
 8003c08:	e7da      	b.n	8003bc0 <_free_r+0x24>
 8003c0a:	42a0      	cmp	r0, r4
 8003c0c:	d902      	bls.n	8003c14 <_free_r+0x78>
 8003c0e:	230c      	movs	r3, #12
 8003c10:	602b      	str	r3, [r5, #0]
 8003c12:	e7d5      	b.n	8003bc0 <_free_r+0x24>
 8003c14:	6820      	ldr	r0, [r4, #0]
 8003c16:	1821      	adds	r1, r4, r0
 8003c18:	428b      	cmp	r3, r1
 8003c1a:	d103      	bne.n	8003c24 <_free_r+0x88>
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	1809      	adds	r1, r1, r0
 8003c22:	6021      	str	r1, [r4, #0]
 8003c24:	6063      	str	r3, [r4, #4]
 8003c26:	6054      	str	r4, [r2, #4]
 8003c28:	e7ca      	b.n	8003bc0 <_free_r+0x24>
 8003c2a:	46c0      	nop			@ (mov r8, r8)
 8003c2c:	20000290 	.word	0x20000290

08003c30 <sbrk_aligned>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	4e0f      	ldr	r6, [pc, #60]	@ (8003c70 <sbrk_aligned+0x40>)
 8003c34:	000d      	movs	r5, r1
 8003c36:	6831      	ldr	r1, [r6, #0]
 8003c38:	0004      	movs	r4, r0
 8003c3a:	2900      	cmp	r1, #0
 8003c3c:	d102      	bne.n	8003c44 <sbrk_aligned+0x14>
 8003c3e:	f001 f9b3 	bl	8004fa8 <_sbrk_r>
 8003c42:	6030      	str	r0, [r6, #0]
 8003c44:	0029      	movs	r1, r5
 8003c46:	0020      	movs	r0, r4
 8003c48:	f001 f9ae 	bl	8004fa8 <_sbrk_r>
 8003c4c:	1c43      	adds	r3, r0, #1
 8003c4e:	d103      	bne.n	8003c58 <sbrk_aligned+0x28>
 8003c50:	2501      	movs	r5, #1
 8003c52:	426d      	negs	r5, r5
 8003c54:	0028      	movs	r0, r5
 8003c56:	bd70      	pop	{r4, r5, r6, pc}
 8003c58:	2303      	movs	r3, #3
 8003c5a:	1cc5      	adds	r5, r0, #3
 8003c5c:	439d      	bics	r5, r3
 8003c5e:	42a8      	cmp	r0, r5
 8003c60:	d0f8      	beq.n	8003c54 <sbrk_aligned+0x24>
 8003c62:	1a29      	subs	r1, r5, r0
 8003c64:	0020      	movs	r0, r4
 8003c66:	f001 f99f 	bl	8004fa8 <_sbrk_r>
 8003c6a:	3001      	adds	r0, #1
 8003c6c:	d1f2      	bne.n	8003c54 <sbrk_aligned+0x24>
 8003c6e:	e7ef      	b.n	8003c50 <sbrk_aligned+0x20>
 8003c70:	2000028c 	.word	0x2000028c

08003c74 <_malloc_r>:
 8003c74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003c76:	2203      	movs	r2, #3
 8003c78:	1ccb      	adds	r3, r1, #3
 8003c7a:	4393      	bics	r3, r2
 8003c7c:	3308      	adds	r3, #8
 8003c7e:	0005      	movs	r5, r0
 8003c80:	001f      	movs	r7, r3
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d234      	bcs.n	8003cf0 <_malloc_r+0x7c>
 8003c86:	270c      	movs	r7, #12
 8003c88:	42b9      	cmp	r1, r7
 8003c8a:	d833      	bhi.n	8003cf4 <_malloc_r+0x80>
 8003c8c:	0028      	movs	r0, r5
 8003c8e:	f000 f871 	bl	8003d74 <__malloc_lock>
 8003c92:	4e37      	ldr	r6, [pc, #220]	@ (8003d70 <_malloc_r+0xfc>)
 8003c94:	6833      	ldr	r3, [r6, #0]
 8003c96:	001c      	movs	r4, r3
 8003c98:	2c00      	cmp	r4, #0
 8003c9a:	d12f      	bne.n	8003cfc <_malloc_r+0x88>
 8003c9c:	0039      	movs	r1, r7
 8003c9e:	0028      	movs	r0, r5
 8003ca0:	f7ff ffc6 	bl	8003c30 <sbrk_aligned>
 8003ca4:	0004      	movs	r4, r0
 8003ca6:	1c43      	adds	r3, r0, #1
 8003ca8:	d15f      	bne.n	8003d6a <_malloc_r+0xf6>
 8003caa:	6834      	ldr	r4, [r6, #0]
 8003cac:	9400      	str	r4, [sp, #0]
 8003cae:	9b00      	ldr	r3, [sp, #0]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d14a      	bne.n	8003d4a <_malloc_r+0xd6>
 8003cb4:	2c00      	cmp	r4, #0
 8003cb6:	d052      	beq.n	8003d5e <_malloc_r+0xea>
 8003cb8:	6823      	ldr	r3, [r4, #0]
 8003cba:	0028      	movs	r0, r5
 8003cbc:	18e3      	adds	r3, r4, r3
 8003cbe:	9900      	ldr	r1, [sp, #0]
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	f001 f971 	bl	8004fa8 <_sbrk_r>
 8003cc6:	9b01      	ldr	r3, [sp, #4]
 8003cc8:	4283      	cmp	r3, r0
 8003cca:	d148      	bne.n	8003d5e <_malloc_r+0xea>
 8003ccc:	6823      	ldr	r3, [r4, #0]
 8003cce:	0028      	movs	r0, r5
 8003cd0:	1aff      	subs	r7, r7, r3
 8003cd2:	0039      	movs	r1, r7
 8003cd4:	f7ff ffac 	bl	8003c30 <sbrk_aligned>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d040      	beq.n	8003d5e <_malloc_r+0xea>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	19db      	adds	r3, r3, r7
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	6833      	ldr	r3, [r6, #0]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	2a00      	cmp	r2, #0
 8003ce8:	d133      	bne.n	8003d52 <_malloc_r+0xde>
 8003cea:	9b00      	ldr	r3, [sp, #0]
 8003cec:	6033      	str	r3, [r6, #0]
 8003cee:	e019      	b.n	8003d24 <_malloc_r+0xb0>
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	dac9      	bge.n	8003c88 <_malloc_r+0x14>
 8003cf4:	230c      	movs	r3, #12
 8003cf6:	602b      	str	r3, [r5, #0]
 8003cf8:	2000      	movs	r0, #0
 8003cfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003cfc:	6821      	ldr	r1, [r4, #0]
 8003cfe:	1bc9      	subs	r1, r1, r7
 8003d00:	d420      	bmi.n	8003d44 <_malloc_r+0xd0>
 8003d02:	290b      	cmp	r1, #11
 8003d04:	d90a      	bls.n	8003d1c <_malloc_r+0xa8>
 8003d06:	19e2      	adds	r2, r4, r7
 8003d08:	6027      	str	r7, [r4, #0]
 8003d0a:	42a3      	cmp	r3, r4
 8003d0c:	d104      	bne.n	8003d18 <_malloc_r+0xa4>
 8003d0e:	6032      	str	r2, [r6, #0]
 8003d10:	6863      	ldr	r3, [r4, #4]
 8003d12:	6011      	str	r1, [r2, #0]
 8003d14:	6053      	str	r3, [r2, #4]
 8003d16:	e005      	b.n	8003d24 <_malloc_r+0xb0>
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	e7f9      	b.n	8003d10 <_malloc_r+0x9c>
 8003d1c:	6862      	ldr	r2, [r4, #4]
 8003d1e:	42a3      	cmp	r3, r4
 8003d20:	d10e      	bne.n	8003d40 <_malloc_r+0xcc>
 8003d22:	6032      	str	r2, [r6, #0]
 8003d24:	0028      	movs	r0, r5
 8003d26:	f000 f82d 	bl	8003d84 <__malloc_unlock>
 8003d2a:	0020      	movs	r0, r4
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	300b      	adds	r0, #11
 8003d30:	1d23      	adds	r3, r4, #4
 8003d32:	4390      	bics	r0, r2
 8003d34:	1ac2      	subs	r2, r0, r3
 8003d36:	4298      	cmp	r0, r3
 8003d38:	d0df      	beq.n	8003cfa <_malloc_r+0x86>
 8003d3a:	1a1b      	subs	r3, r3, r0
 8003d3c:	50a3      	str	r3, [r4, r2]
 8003d3e:	e7dc      	b.n	8003cfa <_malloc_r+0x86>
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	e7ef      	b.n	8003d24 <_malloc_r+0xb0>
 8003d44:	0023      	movs	r3, r4
 8003d46:	6864      	ldr	r4, [r4, #4]
 8003d48:	e7a6      	b.n	8003c98 <_malloc_r+0x24>
 8003d4a:	9c00      	ldr	r4, [sp, #0]
 8003d4c:	6863      	ldr	r3, [r4, #4]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	e7ad      	b.n	8003cae <_malloc_r+0x3a>
 8003d52:	001a      	movs	r2, r3
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	42a3      	cmp	r3, r4
 8003d58:	d1fb      	bne.n	8003d52 <_malloc_r+0xde>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	e7da      	b.n	8003d14 <_malloc_r+0xa0>
 8003d5e:	230c      	movs	r3, #12
 8003d60:	0028      	movs	r0, r5
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	f000 f80e 	bl	8003d84 <__malloc_unlock>
 8003d68:	e7c6      	b.n	8003cf8 <_malloc_r+0x84>
 8003d6a:	6007      	str	r7, [r0, #0]
 8003d6c:	e7da      	b.n	8003d24 <_malloc_r+0xb0>
 8003d6e:	46c0      	nop			@ (mov r8, r8)
 8003d70:	20000290 	.word	0x20000290

08003d74 <__malloc_lock>:
 8003d74:	b510      	push	{r4, lr}
 8003d76:	4802      	ldr	r0, [pc, #8]	@ (8003d80 <__malloc_lock+0xc>)
 8003d78:	f7ff ff0d 	bl	8003b96 <__retarget_lock_acquire_recursive>
 8003d7c:	bd10      	pop	{r4, pc}
 8003d7e:	46c0      	nop			@ (mov r8, r8)
 8003d80:	20000288 	.word	0x20000288

08003d84 <__malloc_unlock>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	4802      	ldr	r0, [pc, #8]	@ (8003d90 <__malloc_unlock+0xc>)
 8003d88:	f7ff ff06 	bl	8003b98 <__retarget_lock_release_recursive>
 8003d8c:	bd10      	pop	{r4, pc}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	20000288 	.word	0x20000288

08003d94 <__ssputs_r>:
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	688e      	ldr	r6, [r1, #8]
 8003d98:	b085      	sub	sp, #20
 8003d9a:	001f      	movs	r7, r3
 8003d9c:	000c      	movs	r4, r1
 8003d9e:	680b      	ldr	r3, [r1, #0]
 8003da0:	9002      	str	r0, [sp, #8]
 8003da2:	9203      	str	r2, [sp, #12]
 8003da4:	42be      	cmp	r6, r7
 8003da6:	d830      	bhi.n	8003e0a <__ssputs_r+0x76>
 8003da8:	210c      	movs	r1, #12
 8003daa:	5e62      	ldrsh	r2, [r4, r1]
 8003dac:	2190      	movs	r1, #144	@ 0x90
 8003dae:	00c9      	lsls	r1, r1, #3
 8003db0:	420a      	tst	r2, r1
 8003db2:	d028      	beq.n	8003e06 <__ssputs_r+0x72>
 8003db4:	2003      	movs	r0, #3
 8003db6:	6921      	ldr	r1, [r4, #16]
 8003db8:	1a5b      	subs	r3, r3, r1
 8003dba:	9301      	str	r3, [sp, #4]
 8003dbc:	6963      	ldr	r3, [r4, #20]
 8003dbe:	4343      	muls	r3, r0
 8003dc0:	9801      	ldr	r0, [sp, #4]
 8003dc2:	0fdd      	lsrs	r5, r3, #31
 8003dc4:	18ed      	adds	r5, r5, r3
 8003dc6:	1c7b      	adds	r3, r7, #1
 8003dc8:	181b      	adds	r3, r3, r0
 8003dca:	106d      	asrs	r5, r5, #1
 8003dcc:	42ab      	cmp	r3, r5
 8003dce:	d900      	bls.n	8003dd2 <__ssputs_r+0x3e>
 8003dd0:	001d      	movs	r5, r3
 8003dd2:	0552      	lsls	r2, r2, #21
 8003dd4:	d528      	bpl.n	8003e28 <__ssputs_r+0x94>
 8003dd6:	0029      	movs	r1, r5
 8003dd8:	9802      	ldr	r0, [sp, #8]
 8003dda:	f7ff ff4b 	bl	8003c74 <_malloc_r>
 8003dde:	1e06      	subs	r6, r0, #0
 8003de0:	d02c      	beq.n	8003e3c <__ssputs_r+0xa8>
 8003de2:	9a01      	ldr	r2, [sp, #4]
 8003de4:	6921      	ldr	r1, [r4, #16]
 8003de6:	f001 f8fc 	bl	8004fe2 <memcpy>
 8003dea:	89a2      	ldrh	r2, [r4, #12]
 8003dec:	4b18      	ldr	r3, [pc, #96]	@ (8003e50 <__ssputs_r+0xbc>)
 8003dee:	401a      	ands	r2, r3
 8003df0:	2380      	movs	r3, #128	@ 0x80
 8003df2:	4313      	orrs	r3, r2
 8003df4:	81a3      	strh	r3, [r4, #12]
 8003df6:	9b01      	ldr	r3, [sp, #4]
 8003df8:	6126      	str	r6, [r4, #16]
 8003dfa:	18f6      	adds	r6, r6, r3
 8003dfc:	6026      	str	r6, [r4, #0]
 8003dfe:	003e      	movs	r6, r7
 8003e00:	6165      	str	r5, [r4, #20]
 8003e02:	1aed      	subs	r5, r5, r3
 8003e04:	60a5      	str	r5, [r4, #8]
 8003e06:	42be      	cmp	r6, r7
 8003e08:	d900      	bls.n	8003e0c <__ssputs_r+0x78>
 8003e0a:	003e      	movs	r6, r7
 8003e0c:	0032      	movs	r2, r6
 8003e0e:	9903      	ldr	r1, [sp, #12]
 8003e10:	6820      	ldr	r0, [r4, #0]
 8003e12:	f001 f891 	bl	8004f38 <memmove>
 8003e16:	2000      	movs	r0, #0
 8003e18:	68a3      	ldr	r3, [r4, #8]
 8003e1a:	1b9b      	subs	r3, r3, r6
 8003e1c:	60a3      	str	r3, [r4, #8]
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	199b      	adds	r3, r3, r6
 8003e22:	6023      	str	r3, [r4, #0]
 8003e24:	b005      	add	sp, #20
 8003e26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e28:	002a      	movs	r2, r5
 8003e2a:	9802      	ldr	r0, [sp, #8]
 8003e2c:	f001 f8e2 	bl	8004ff4 <_realloc_r>
 8003e30:	1e06      	subs	r6, r0, #0
 8003e32:	d1e0      	bne.n	8003df6 <__ssputs_r+0x62>
 8003e34:	6921      	ldr	r1, [r4, #16]
 8003e36:	9802      	ldr	r0, [sp, #8]
 8003e38:	f7ff feb0 	bl	8003b9c <_free_r>
 8003e3c:	230c      	movs	r3, #12
 8003e3e:	2001      	movs	r0, #1
 8003e40:	9a02      	ldr	r2, [sp, #8]
 8003e42:	4240      	negs	r0, r0
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	89a2      	ldrh	r2, [r4, #12]
 8003e48:	3334      	adds	r3, #52	@ 0x34
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	81a3      	strh	r3, [r4, #12]
 8003e4e:	e7e9      	b.n	8003e24 <__ssputs_r+0x90>
 8003e50:	fffffb7f 	.word	0xfffffb7f

08003e54 <_svfiprintf_r>:
 8003e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e56:	b0a1      	sub	sp, #132	@ 0x84
 8003e58:	9003      	str	r0, [sp, #12]
 8003e5a:	001d      	movs	r5, r3
 8003e5c:	898b      	ldrh	r3, [r1, #12]
 8003e5e:	000f      	movs	r7, r1
 8003e60:	0016      	movs	r6, r2
 8003e62:	061b      	lsls	r3, r3, #24
 8003e64:	d511      	bpl.n	8003e8a <_svfiprintf_r+0x36>
 8003e66:	690b      	ldr	r3, [r1, #16]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d10e      	bne.n	8003e8a <_svfiprintf_r+0x36>
 8003e6c:	2140      	movs	r1, #64	@ 0x40
 8003e6e:	f7ff ff01 	bl	8003c74 <_malloc_r>
 8003e72:	6038      	str	r0, [r7, #0]
 8003e74:	6138      	str	r0, [r7, #16]
 8003e76:	2800      	cmp	r0, #0
 8003e78:	d105      	bne.n	8003e86 <_svfiprintf_r+0x32>
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	9a03      	ldr	r2, [sp, #12]
 8003e7e:	6013      	str	r3, [r2, #0]
 8003e80:	2001      	movs	r0, #1
 8003e82:	4240      	negs	r0, r0
 8003e84:	e0cf      	b.n	8004026 <_svfiprintf_r+0x1d2>
 8003e86:	2340      	movs	r3, #64	@ 0x40
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	ac08      	add	r4, sp, #32
 8003e8e:	6163      	str	r3, [r4, #20]
 8003e90:	3320      	adds	r3, #32
 8003e92:	7663      	strb	r3, [r4, #25]
 8003e94:	3310      	adds	r3, #16
 8003e96:	76a3      	strb	r3, [r4, #26]
 8003e98:	9507      	str	r5, [sp, #28]
 8003e9a:	0035      	movs	r5, r6
 8003e9c:	782b      	ldrb	r3, [r5, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <_svfiprintf_r+0x52>
 8003ea2:	2b25      	cmp	r3, #37	@ 0x25
 8003ea4:	d148      	bne.n	8003f38 <_svfiprintf_r+0xe4>
 8003ea6:	1bab      	subs	r3, r5, r6
 8003ea8:	9305      	str	r3, [sp, #20]
 8003eaa:	42b5      	cmp	r5, r6
 8003eac:	d00b      	beq.n	8003ec6 <_svfiprintf_r+0x72>
 8003eae:	0032      	movs	r2, r6
 8003eb0:	0039      	movs	r1, r7
 8003eb2:	9803      	ldr	r0, [sp, #12]
 8003eb4:	f7ff ff6e 	bl	8003d94 <__ssputs_r>
 8003eb8:	3001      	adds	r0, #1
 8003eba:	d100      	bne.n	8003ebe <_svfiprintf_r+0x6a>
 8003ebc:	e0ae      	b.n	800401c <_svfiprintf_r+0x1c8>
 8003ebe:	6963      	ldr	r3, [r4, #20]
 8003ec0:	9a05      	ldr	r2, [sp, #20]
 8003ec2:	189b      	adds	r3, r3, r2
 8003ec4:	6163      	str	r3, [r4, #20]
 8003ec6:	782b      	ldrb	r3, [r5, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d100      	bne.n	8003ece <_svfiprintf_r+0x7a>
 8003ecc:	e0a6      	b.n	800401c <_svfiprintf_r+0x1c8>
 8003ece:	2201      	movs	r2, #1
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	4252      	negs	r2, r2
 8003ed4:	6062      	str	r2, [r4, #4]
 8003ed6:	a904      	add	r1, sp, #16
 8003ed8:	3254      	adds	r2, #84	@ 0x54
 8003eda:	1852      	adds	r2, r2, r1
 8003edc:	1c6e      	adds	r6, r5, #1
 8003ede:	6023      	str	r3, [r4, #0]
 8003ee0:	60e3      	str	r3, [r4, #12]
 8003ee2:	60a3      	str	r3, [r4, #8]
 8003ee4:	7013      	strb	r3, [r2, #0]
 8003ee6:	65a3      	str	r3, [r4, #88]	@ 0x58
 8003ee8:	4b54      	ldr	r3, [pc, #336]	@ (800403c <_svfiprintf_r+0x1e8>)
 8003eea:	2205      	movs	r2, #5
 8003eec:	0018      	movs	r0, r3
 8003eee:	7831      	ldrb	r1, [r6, #0]
 8003ef0:	9305      	str	r3, [sp, #20]
 8003ef2:	f001 f86b 	bl	8004fcc <memchr>
 8003ef6:	1c75      	adds	r5, r6, #1
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	d11f      	bne.n	8003f3c <_svfiprintf_r+0xe8>
 8003efc:	6822      	ldr	r2, [r4, #0]
 8003efe:	06d3      	lsls	r3, r2, #27
 8003f00:	d504      	bpl.n	8003f0c <_svfiprintf_r+0xb8>
 8003f02:	2353      	movs	r3, #83	@ 0x53
 8003f04:	a904      	add	r1, sp, #16
 8003f06:	185b      	adds	r3, r3, r1
 8003f08:	2120      	movs	r1, #32
 8003f0a:	7019      	strb	r1, [r3, #0]
 8003f0c:	0713      	lsls	r3, r2, #28
 8003f0e:	d504      	bpl.n	8003f1a <_svfiprintf_r+0xc6>
 8003f10:	2353      	movs	r3, #83	@ 0x53
 8003f12:	a904      	add	r1, sp, #16
 8003f14:	185b      	adds	r3, r3, r1
 8003f16:	212b      	movs	r1, #43	@ 0x2b
 8003f18:	7019      	strb	r1, [r3, #0]
 8003f1a:	7833      	ldrb	r3, [r6, #0]
 8003f1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f1e:	d016      	beq.n	8003f4e <_svfiprintf_r+0xfa>
 8003f20:	0035      	movs	r5, r6
 8003f22:	2100      	movs	r1, #0
 8003f24:	200a      	movs	r0, #10
 8003f26:	68e3      	ldr	r3, [r4, #12]
 8003f28:	782a      	ldrb	r2, [r5, #0]
 8003f2a:	1c6e      	adds	r6, r5, #1
 8003f2c:	3a30      	subs	r2, #48	@ 0x30
 8003f2e:	2a09      	cmp	r2, #9
 8003f30:	d950      	bls.n	8003fd4 <_svfiprintf_r+0x180>
 8003f32:	2900      	cmp	r1, #0
 8003f34:	d111      	bne.n	8003f5a <_svfiprintf_r+0x106>
 8003f36:	e017      	b.n	8003f68 <_svfiprintf_r+0x114>
 8003f38:	3501      	adds	r5, #1
 8003f3a:	e7af      	b.n	8003e9c <_svfiprintf_r+0x48>
 8003f3c:	9b05      	ldr	r3, [sp, #20]
 8003f3e:	6822      	ldr	r2, [r4, #0]
 8003f40:	1ac0      	subs	r0, r0, r3
 8003f42:	2301      	movs	r3, #1
 8003f44:	4083      	lsls	r3, r0
 8003f46:	4313      	orrs	r3, r2
 8003f48:	002e      	movs	r6, r5
 8003f4a:	6023      	str	r3, [r4, #0]
 8003f4c:	e7cc      	b.n	8003ee8 <_svfiprintf_r+0x94>
 8003f4e:	9b07      	ldr	r3, [sp, #28]
 8003f50:	1d19      	adds	r1, r3, #4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	9107      	str	r1, [sp, #28]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	db01      	blt.n	8003f5e <_svfiprintf_r+0x10a>
 8003f5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8003f5c:	e004      	b.n	8003f68 <_svfiprintf_r+0x114>
 8003f5e:	425b      	negs	r3, r3
 8003f60:	60e3      	str	r3, [r4, #12]
 8003f62:	2302      	movs	r3, #2
 8003f64:	4313      	orrs	r3, r2
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	782b      	ldrb	r3, [r5, #0]
 8003f6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8003f6c:	d10c      	bne.n	8003f88 <_svfiprintf_r+0x134>
 8003f6e:	786b      	ldrb	r3, [r5, #1]
 8003f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8003f72:	d134      	bne.n	8003fde <_svfiprintf_r+0x18a>
 8003f74:	9b07      	ldr	r3, [sp, #28]
 8003f76:	3502      	adds	r5, #2
 8003f78:	1d1a      	adds	r2, r3, #4
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	9207      	str	r2, [sp, #28]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	da01      	bge.n	8003f86 <_svfiprintf_r+0x132>
 8003f82:	2301      	movs	r3, #1
 8003f84:	425b      	negs	r3, r3
 8003f86:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f88:	4e2d      	ldr	r6, [pc, #180]	@ (8004040 <_svfiprintf_r+0x1ec>)
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	0030      	movs	r0, r6
 8003f8e:	7829      	ldrb	r1, [r5, #0]
 8003f90:	f001 f81c 	bl	8004fcc <memchr>
 8003f94:	2800      	cmp	r0, #0
 8003f96:	d006      	beq.n	8003fa6 <_svfiprintf_r+0x152>
 8003f98:	2340      	movs	r3, #64	@ 0x40
 8003f9a:	1b80      	subs	r0, r0, r6
 8003f9c:	4083      	lsls	r3, r0
 8003f9e:	6822      	ldr	r2, [r4, #0]
 8003fa0:	3501      	adds	r5, #1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	7829      	ldrb	r1, [r5, #0]
 8003fa8:	2206      	movs	r2, #6
 8003faa:	4826      	ldr	r0, [pc, #152]	@ (8004044 <_svfiprintf_r+0x1f0>)
 8003fac:	1c6e      	adds	r6, r5, #1
 8003fae:	7621      	strb	r1, [r4, #24]
 8003fb0:	f001 f80c 	bl	8004fcc <memchr>
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d038      	beq.n	800402a <_svfiprintf_r+0x1d6>
 8003fb8:	4b23      	ldr	r3, [pc, #140]	@ (8004048 <_svfiprintf_r+0x1f4>)
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d122      	bne.n	8004004 <_svfiprintf_r+0x1b0>
 8003fbe:	2207      	movs	r2, #7
 8003fc0:	9b07      	ldr	r3, [sp, #28]
 8003fc2:	3307      	adds	r3, #7
 8003fc4:	4393      	bics	r3, r2
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	9307      	str	r3, [sp, #28]
 8003fca:	6963      	ldr	r3, [r4, #20]
 8003fcc:	9a04      	ldr	r2, [sp, #16]
 8003fce:	189b      	adds	r3, r3, r2
 8003fd0:	6163      	str	r3, [r4, #20]
 8003fd2:	e762      	b.n	8003e9a <_svfiprintf_r+0x46>
 8003fd4:	4343      	muls	r3, r0
 8003fd6:	0035      	movs	r5, r6
 8003fd8:	2101      	movs	r1, #1
 8003fda:	189b      	adds	r3, r3, r2
 8003fdc:	e7a4      	b.n	8003f28 <_svfiprintf_r+0xd4>
 8003fde:	2300      	movs	r3, #0
 8003fe0:	200a      	movs	r0, #10
 8003fe2:	0019      	movs	r1, r3
 8003fe4:	3501      	adds	r5, #1
 8003fe6:	6063      	str	r3, [r4, #4]
 8003fe8:	782a      	ldrb	r2, [r5, #0]
 8003fea:	1c6e      	adds	r6, r5, #1
 8003fec:	3a30      	subs	r2, #48	@ 0x30
 8003fee:	2a09      	cmp	r2, #9
 8003ff0:	d903      	bls.n	8003ffa <_svfiprintf_r+0x1a6>
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d0c8      	beq.n	8003f88 <_svfiprintf_r+0x134>
 8003ff6:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ff8:	e7c6      	b.n	8003f88 <_svfiprintf_r+0x134>
 8003ffa:	4341      	muls	r1, r0
 8003ffc:	0035      	movs	r5, r6
 8003ffe:	2301      	movs	r3, #1
 8004000:	1889      	adds	r1, r1, r2
 8004002:	e7f1      	b.n	8003fe8 <_svfiprintf_r+0x194>
 8004004:	aa07      	add	r2, sp, #28
 8004006:	9200      	str	r2, [sp, #0]
 8004008:	0021      	movs	r1, r4
 800400a:	003a      	movs	r2, r7
 800400c:	4b0f      	ldr	r3, [pc, #60]	@ (800404c <_svfiprintf_r+0x1f8>)
 800400e:	9803      	ldr	r0, [sp, #12]
 8004010:	e000      	b.n	8004014 <_svfiprintf_r+0x1c0>
 8004012:	bf00      	nop
 8004014:	9004      	str	r0, [sp, #16]
 8004016:	9b04      	ldr	r3, [sp, #16]
 8004018:	3301      	adds	r3, #1
 800401a:	d1d6      	bne.n	8003fca <_svfiprintf_r+0x176>
 800401c:	89bb      	ldrh	r3, [r7, #12]
 800401e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8004020:	065b      	lsls	r3, r3, #25
 8004022:	d500      	bpl.n	8004026 <_svfiprintf_r+0x1d2>
 8004024:	e72c      	b.n	8003e80 <_svfiprintf_r+0x2c>
 8004026:	b021      	add	sp, #132	@ 0x84
 8004028:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402a:	aa07      	add	r2, sp, #28
 800402c:	9200      	str	r2, [sp, #0]
 800402e:	0021      	movs	r1, r4
 8004030:	003a      	movs	r2, r7
 8004032:	4b06      	ldr	r3, [pc, #24]	@ (800404c <_svfiprintf_r+0x1f8>)
 8004034:	9803      	ldr	r0, [sp, #12]
 8004036:	f000 fb7d 	bl	8004734 <_printf_i>
 800403a:	e7eb      	b.n	8004014 <_svfiprintf_r+0x1c0>
 800403c:	08005858 	.word	0x08005858
 8004040:	0800585e 	.word	0x0800585e
 8004044:	08005862 	.word	0x08005862
 8004048:	00000000 	.word	0x00000000
 800404c:	08003d95 	.word	0x08003d95

08004050 <_sungetc_r>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	0014      	movs	r4, r2
 8004054:	1c4b      	adds	r3, r1, #1
 8004056:	d103      	bne.n	8004060 <_sungetc_r+0x10>
 8004058:	2501      	movs	r5, #1
 800405a:	426d      	negs	r5, r5
 800405c:	0028      	movs	r0, r5
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	8993      	ldrh	r3, [r2, #12]
 8004062:	2220      	movs	r2, #32
 8004064:	4393      	bics	r3, r2
 8004066:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004068:	81a3      	strh	r3, [r4, #12]
 800406a:	b2ce      	uxtb	r6, r1
 800406c:	6863      	ldr	r3, [r4, #4]
 800406e:	b2cd      	uxtb	r5, r1
 8004070:	2a00      	cmp	r2, #0
 8004072:	d010      	beq.n	8004096 <_sungetc_r+0x46>
 8004074:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004076:	429a      	cmp	r2, r3
 8004078:	dd07      	ble.n	800408a <_sungetc_r+0x3a>
 800407a:	6823      	ldr	r3, [r4, #0]
 800407c:	3b01      	subs	r3, #1
 800407e:	6023      	str	r3, [r4, #0]
 8004080:	701e      	strb	r6, [r3, #0]
 8004082:	6863      	ldr	r3, [r4, #4]
 8004084:	3301      	adds	r3, #1
 8004086:	6063      	str	r3, [r4, #4]
 8004088:	e7e8      	b.n	800405c <_sungetc_r+0xc>
 800408a:	0021      	movs	r1, r4
 800408c:	f000 ff16 	bl	8004ebc <__submore>
 8004090:	2800      	cmp	r0, #0
 8004092:	d0f2      	beq.n	800407a <_sungetc_r+0x2a>
 8004094:	e7e0      	b.n	8004058 <_sungetc_r+0x8>
 8004096:	6921      	ldr	r1, [r4, #16]
 8004098:	6822      	ldr	r2, [r4, #0]
 800409a:	2900      	cmp	r1, #0
 800409c:	d007      	beq.n	80040ae <_sungetc_r+0x5e>
 800409e:	4291      	cmp	r1, r2
 80040a0:	d205      	bcs.n	80040ae <_sungetc_r+0x5e>
 80040a2:	1e51      	subs	r1, r2, #1
 80040a4:	7808      	ldrb	r0, [r1, #0]
 80040a6:	42a8      	cmp	r0, r5
 80040a8:	d101      	bne.n	80040ae <_sungetc_r+0x5e>
 80040aa:	6021      	str	r1, [r4, #0]
 80040ac:	e7ea      	b.n	8004084 <_sungetc_r+0x34>
 80040ae:	6423      	str	r3, [r4, #64]	@ 0x40
 80040b0:	0023      	movs	r3, r4
 80040b2:	3344      	adds	r3, #68	@ 0x44
 80040b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80040b6:	2303      	movs	r3, #3
 80040b8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80040ba:	0023      	movs	r3, r4
 80040bc:	3346      	adds	r3, #70	@ 0x46
 80040be:	63e2      	str	r2, [r4, #60]	@ 0x3c
 80040c0:	701e      	strb	r6, [r3, #0]
 80040c2:	6023      	str	r3, [r4, #0]
 80040c4:	2301      	movs	r3, #1
 80040c6:	e7de      	b.n	8004086 <_sungetc_r+0x36>

080040c8 <__ssrefill_r>:
 80040c8:	b510      	push	{r4, lr}
 80040ca:	000c      	movs	r4, r1
 80040cc:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80040ce:	2900      	cmp	r1, #0
 80040d0:	d00e      	beq.n	80040f0 <__ssrefill_r+0x28>
 80040d2:	0023      	movs	r3, r4
 80040d4:	3344      	adds	r3, #68	@ 0x44
 80040d6:	4299      	cmp	r1, r3
 80040d8:	d001      	beq.n	80040de <__ssrefill_r+0x16>
 80040da:	f7ff fd5f 	bl	8003b9c <_free_r>
 80040de:	2000      	movs	r0, #0
 80040e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80040e2:	6360      	str	r0, [r4, #52]	@ 0x34
 80040e4:	6063      	str	r3, [r4, #4]
 80040e6:	4283      	cmp	r3, r0
 80040e8:	d002      	beq.n	80040f0 <__ssrefill_r+0x28>
 80040ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd10      	pop	{r4, pc}
 80040f0:	6923      	ldr	r3, [r4, #16]
 80040f2:	2001      	movs	r0, #1
 80040f4:	6023      	str	r3, [r4, #0]
 80040f6:	2300      	movs	r3, #0
 80040f8:	89a2      	ldrh	r2, [r4, #12]
 80040fa:	6063      	str	r3, [r4, #4]
 80040fc:	3320      	adds	r3, #32
 80040fe:	4313      	orrs	r3, r2
 8004100:	81a3      	strh	r3, [r4, #12]
 8004102:	4240      	negs	r0, r0
 8004104:	e7f3      	b.n	80040ee <__ssrefill_r+0x26>
	...

08004108 <__ssvfiscanf_r>:
 8004108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800410a:	4caa      	ldr	r4, [pc, #680]	@ (80043b4 <__ssvfiscanf_r+0x2ac>)
 800410c:	44a5      	add	sp, r4
 800410e:	000c      	movs	r4, r1
 8004110:	2100      	movs	r1, #0
 8004112:	9001      	str	r0, [sp, #4]
 8004114:	20be      	movs	r0, #190	@ 0xbe
 8004116:	9146      	str	r1, [sp, #280]	@ 0x118
 8004118:	9147      	str	r1, [sp, #284]	@ 0x11c
 800411a:	a903      	add	r1, sp, #12
 800411c:	9148      	str	r1, [sp, #288]	@ 0x120
 800411e:	49a6      	ldr	r1, [pc, #664]	@ (80043b8 <__ssvfiscanf_r+0x2b0>)
 8004120:	0040      	lsls	r0, r0, #1
 8004122:	ad43      	add	r5, sp, #268	@ 0x10c
 8004124:	5029      	str	r1, [r5, r0]
 8004126:	49a5      	ldr	r1, [pc, #660]	@ (80043bc <__ssvfiscanf_r+0x2b4>)
 8004128:	3004      	adds	r0, #4
 800412a:	ad43      	add	r5, sp, #268	@ 0x10c
 800412c:	5029      	str	r1, [r5, r0]
 800412e:	9302      	str	r3, [sp, #8]
 8004130:	7813      	ldrb	r3, [r2, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d100      	bne.n	8004138 <__ssvfiscanf_r+0x30>
 8004136:	e13a      	b.n	80043ae <__ssvfiscanf_r+0x2a6>
 8004138:	2108      	movs	r1, #8
 800413a:	2708      	movs	r7, #8
 800413c:	4ea0      	ldr	r6, [pc, #640]	@ (80043c0 <__ssvfiscanf_r+0x2b8>)
 800413e:	1c55      	adds	r5, r2, #1
 8004140:	5cf0      	ldrb	r0, [r6, r3]
 8004142:	4001      	ands	r1, r0
 8004144:	4238      	tst	r0, r7
 8004146:	d01c      	beq.n	8004182 <__ssvfiscanf_r+0x7a>
 8004148:	6863      	ldr	r3, [r4, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	dd0f      	ble.n	800416e <__ssvfiscanf_r+0x66>
 800414e:	6823      	ldr	r3, [r4, #0]
 8004150:	781a      	ldrb	r2, [r3, #0]
 8004152:	5cb2      	ldrb	r2, [r6, r2]
 8004154:	423a      	tst	r2, r7
 8004156:	d101      	bne.n	800415c <__ssvfiscanf_r+0x54>
 8004158:	002a      	movs	r2, r5
 800415a:	e7e9      	b.n	8004130 <__ssvfiscanf_r+0x28>
 800415c:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 800415e:	3301      	adds	r3, #1
 8004160:	3201      	adds	r2, #1
 8004162:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004164:	6862      	ldr	r2, [r4, #4]
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	3a01      	subs	r2, #1
 800416a:	6062      	str	r2, [r4, #4]
 800416c:	e7ec      	b.n	8004148 <__ssvfiscanf_r+0x40>
 800416e:	22c0      	movs	r2, #192	@ 0xc0
 8004170:	ab43      	add	r3, sp, #268	@ 0x10c
 8004172:	0052      	lsls	r2, r2, #1
 8004174:	0021      	movs	r1, r4
 8004176:	589b      	ldr	r3, [r3, r2]
 8004178:	9801      	ldr	r0, [sp, #4]
 800417a:	4798      	blx	r3
 800417c:	2800      	cmp	r0, #0
 800417e:	d0e6      	beq.n	800414e <__ssvfiscanf_r+0x46>
 8004180:	e7ea      	b.n	8004158 <__ssvfiscanf_r+0x50>
 8004182:	001e      	movs	r6, r3
 8004184:	2b25      	cmp	r3, #37	@ 0x25
 8004186:	d160      	bne.n	800424a <__ssvfiscanf_r+0x142>
 8004188:	9145      	str	r1, [sp, #276]	@ 0x114
 800418a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800418c:	7853      	ldrb	r3, [r2, #1]
 800418e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004190:	d102      	bne.n	8004198 <__ssvfiscanf_r+0x90>
 8004192:	3b1a      	subs	r3, #26
 8004194:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004196:	1c95      	adds	r5, r2, #2
 8004198:	002e      	movs	r6, r5
 800419a:	220a      	movs	r2, #10
 800419c:	7831      	ldrb	r1, [r6, #0]
 800419e:	1c75      	adds	r5, r6, #1
 80041a0:	000b      	movs	r3, r1
 80041a2:	3b30      	subs	r3, #48	@ 0x30
 80041a4:	2b09      	cmp	r3, #9
 80041a6:	d91d      	bls.n	80041e4 <__ssvfiscanf_r+0xdc>
 80041a8:	4f86      	ldr	r7, [pc, #536]	@ (80043c4 <__ssvfiscanf_r+0x2bc>)
 80041aa:	2203      	movs	r2, #3
 80041ac:	0038      	movs	r0, r7
 80041ae:	f000 ff0d 	bl	8004fcc <memchr>
 80041b2:	2800      	cmp	r0, #0
 80041b4:	d006      	beq.n	80041c4 <__ssvfiscanf_r+0xbc>
 80041b6:	2301      	movs	r3, #1
 80041b8:	1bc0      	subs	r0, r0, r7
 80041ba:	4083      	lsls	r3, r0
 80041bc:	002e      	movs	r6, r5
 80041be:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 80041c0:	4313      	orrs	r3, r2
 80041c2:	9343      	str	r3, [sp, #268]	@ 0x10c
 80041c4:	1c75      	adds	r5, r6, #1
 80041c6:	7836      	ldrb	r6, [r6, #0]
 80041c8:	2e78      	cmp	r6, #120	@ 0x78
 80041ca:	d806      	bhi.n	80041da <__ssvfiscanf_r+0xd2>
 80041cc:	2e57      	cmp	r6, #87	@ 0x57
 80041ce:	d810      	bhi.n	80041f2 <__ssvfiscanf_r+0xea>
 80041d0:	2e25      	cmp	r6, #37	@ 0x25
 80041d2:	d03a      	beq.n	800424a <__ssvfiscanf_r+0x142>
 80041d4:	d834      	bhi.n	8004240 <__ssvfiscanf_r+0x138>
 80041d6:	2e00      	cmp	r6, #0
 80041d8:	d055      	beq.n	8004286 <__ssvfiscanf_r+0x17e>
 80041da:	2303      	movs	r3, #3
 80041dc:	9349      	str	r3, [sp, #292]	@ 0x124
 80041de:	3307      	adds	r3, #7
 80041e0:	9344      	str	r3, [sp, #272]	@ 0x110
 80041e2:	e069      	b.n	80042b8 <__ssvfiscanf_r+0x1b0>
 80041e4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 80041e6:	002e      	movs	r6, r5
 80041e8:	4353      	muls	r3, r2
 80041ea:	3b30      	subs	r3, #48	@ 0x30
 80041ec:	185b      	adds	r3, r3, r1
 80041ee:	9345      	str	r3, [sp, #276]	@ 0x114
 80041f0:	e7d4      	b.n	800419c <__ssvfiscanf_r+0x94>
 80041f2:	0030      	movs	r0, r6
 80041f4:	3858      	subs	r0, #88	@ 0x58
 80041f6:	2820      	cmp	r0, #32
 80041f8:	d8ef      	bhi.n	80041da <__ssvfiscanf_r+0xd2>
 80041fa:	f7fb ff8d 	bl	8000118 <__gnu_thumb1_case_shi>
 80041fe:	004b      	.short	0x004b
 8004200:	ffeeffee 	.word	0xffeeffee
 8004204:	ffee007d 	.word	0xffee007d
 8004208:	ffeeffee 	.word	0xffeeffee
 800420c:	ffeeffee 	.word	0xffeeffee
 8004210:	ffeeffee 	.word	0xffeeffee
 8004214:	007b0088 	.word	0x007b0088
 8004218:	00240024 	.word	0x00240024
 800421c:	ffee0024 	.word	0xffee0024
 8004220:	ffee0055 	.word	0xffee0055
 8004224:	ffeeffee 	.word	0xffeeffee
 8004228:	0090ffee 	.word	0x0090ffee
 800422c:	00470059 	.word	0x00470059
 8004230:	ffeeffee 	.word	0xffeeffee
 8004234:	ffee008e 	.word	0xffee008e
 8004238:	ffee007b 	.word	0xffee007b
 800423c:	004bffee 	.word	0x004bffee
 8004240:	3e45      	subs	r6, #69	@ 0x45
 8004242:	2e02      	cmp	r6, #2
 8004244:	d8c9      	bhi.n	80041da <__ssvfiscanf_r+0xd2>
 8004246:	2305      	movs	r3, #5
 8004248:	e035      	b.n	80042b6 <__ssvfiscanf_r+0x1ae>
 800424a:	6863      	ldr	r3, [r4, #4]
 800424c:	2b00      	cmp	r3, #0
 800424e:	dd0d      	ble.n	800426c <__ssvfiscanf_r+0x164>
 8004250:	6823      	ldr	r3, [r4, #0]
 8004252:	781a      	ldrb	r2, [r3, #0]
 8004254:	42b2      	cmp	r2, r6
 8004256:	d000      	beq.n	800425a <__ssvfiscanf_r+0x152>
 8004258:	e0a9      	b.n	80043ae <__ssvfiscanf_r+0x2a6>
 800425a:	3301      	adds	r3, #1
 800425c:	6862      	ldr	r2, [r4, #4]
 800425e:	6023      	str	r3, [r4, #0]
 8004260:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8004262:	3a01      	subs	r2, #1
 8004264:	3301      	adds	r3, #1
 8004266:	6062      	str	r2, [r4, #4]
 8004268:	9347      	str	r3, [sp, #284]	@ 0x11c
 800426a:	e775      	b.n	8004158 <__ssvfiscanf_r+0x50>
 800426c:	23c0      	movs	r3, #192	@ 0xc0
 800426e:	aa43      	add	r2, sp, #268	@ 0x10c
 8004270:	005b      	lsls	r3, r3, #1
 8004272:	0021      	movs	r1, r4
 8004274:	58d3      	ldr	r3, [r2, r3]
 8004276:	9801      	ldr	r0, [sp, #4]
 8004278:	4798      	blx	r3
 800427a:	2800      	cmp	r0, #0
 800427c:	d0e8      	beq.n	8004250 <__ssvfiscanf_r+0x148>
 800427e:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8004280:	2800      	cmp	r0, #0
 8004282:	d000      	beq.n	8004286 <__ssvfiscanf_r+0x17e>
 8004284:	e08b      	b.n	800439e <__ssvfiscanf_r+0x296>
 8004286:	2001      	movs	r0, #1
 8004288:	4240      	negs	r0, r0
 800428a:	e08c      	b.n	80043a6 <__ssvfiscanf_r+0x29e>
 800428c:	2320      	movs	r3, #32
 800428e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004290:	4313      	orrs	r3, r2
 8004292:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004294:	2380      	movs	r3, #128	@ 0x80
 8004296:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4313      	orrs	r3, r2
 800429c:	9343      	str	r3, [sp, #268]	@ 0x10c
 800429e:	2310      	movs	r3, #16
 80042a0:	9344      	str	r3, [sp, #272]	@ 0x110
 80042a2:	2e6e      	cmp	r6, #110	@ 0x6e
 80042a4:	d902      	bls.n	80042ac <__ssvfiscanf_r+0x1a4>
 80042a6:	e005      	b.n	80042b4 <__ssvfiscanf_r+0x1ac>
 80042a8:	2300      	movs	r3, #0
 80042aa:	9344      	str	r3, [sp, #272]	@ 0x110
 80042ac:	2303      	movs	r3, #3
 80042ae:	e002      	b.n	80042b6 <__ssvfiscanf_r+0x1ae>
 80042b0:	2308      	movs	r3, #8
 80042b2:	9344      	str	r3, [sp, #272]	@ 0x110
 80042b4:	2304      	movs	r3, #4
 80042b6:	9349      	str	r3, [sp, #292]	@ 0x124
 80042b8:	6863      	ldr	r3, [r4, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	dd3e      	ble.n	800433c <__ssvfiscanf_r+0x234>
 80042be:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80042c0:	065b      	lsls	r3, r3, #25
 80042c2:	d408      	bmi.n	80042d6 <__ssvfiscanf_r+0x1ce>
 80042c4:	27c0      	movs	r7, #192	@ 0xc0
 80042c6:	2608      	movs	r6, #8
 80042c8:	007f      	lsls	r7, r7, #1
 80042ca:	6823      	ldr	r3, [r4, #0]
 80042cc:	493c      	ldr	r1, [pc, #240]	@ (80043c0 <__ssvfiscanf_r+0x2b8>)
 80042ce:	781a      	ldrb	r2, [r3, #0]
 80042d0:	5c8a      	ldrb	r2, [r1, r2]
 80042d2:	4232      	tst	r2, r6
 80042d4:	d13c      	bne.n	8004350 <__ssvfiscanf_r+0x248>
 80042d6:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 80042d8:	2b02      	cmp	r3, #2
 80042da:	dc4c      	bgt.n	8004376 <__ssvfiscanf_r+0x26e>
 80042dc:	0022      	movs	r2, r4
 80042de:	9801      	ldr	r0, [sp, #4]
 80042e0:	ab02      	add	r3, sp, #8
 80042e2:	a943      	add	r1, sp, #268	@ 0x10c
 80042e4:	f000 fb34 	bl	8004950 <_scanf_chars>
 80042e8:	2801      	cmp	r0, #1
 80042ea:	d060      	beq.n	80043ae <__ssvfiscanf_r+0x2a6>
 80042ec:	2802      	cmp	r0, #2
 80042ee:	d000      	beq.n	80042f2 <__ssvfiscanf_r+0x1ea>
 80042f0:	e732      	b.n	8004158 <__ssvfiscanf_r+0x50>
 80042f2:	e7c4      	b.n	800427e <__ssvfiscanf_r+0x176>
 80042f4:	230a      	movs	r3, #10
 80042f6:	e7d3      	b.n	80042a0 <__ssvfiscanf_r+0x198>
 80042f8:	0029      	movs	r1, r5
 80042fa:	a803      	add	r0, sp, #12
 80042fc:	f000 fda5 	bl	8004e4a <__sccl>
 8004300:	2340      	movs	r3, #64	@ 0x40
 8004302:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004304:	0005      	movs	r5, r0
 8004306:	4313      	orrs	r3, r2
 8004308:	9343      	str	r3, [sp, #268]	@ 0x10c
 800430a:	2301      	movs	r3, #1
 800430c:	e7d3      	b.n	80042b6 <__ssvfiscanf_r+0x1ae>
 800430e:	2340      	movs	r3, #64	@ 0x40
 8004310:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004312:	4313      	orrs	r3, r2
 8004314:	9343      	str	r3, [sp, #268]	@ 0x10c
 8004316:	2300      	movs	r3, #0
 8004318:	e7cd      	b.n	80042b6 <__ssvfiscanf_r+0x1ae>
 800431a:	2302      	movs	r3, #2
 800431c:	e7cb      	b.n	80042b6 <__ssvfiscanf_r+0x1ae>
 800431e:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8004320:	06d3      	lsls	r3, r2, #27
 8004322:	d500      	bpl.n	8004326 <__ssvfiscanf_r+0x21e>
 8004324:	e718      	b.n	8004158 <__ssvfiscanf_r+0x50>
 8004326:	9b02      	ldr	r3, [sp, #8]
 8004328:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 800432a:	1d18      	adds	r0, r3, #4
 800432c:	9002      	str	r0, [sp, #8]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	07d6      	lsls	r6, r2, #31
 8004332:	d501      	bpl.n	8004338 <__ssvfiscanf_r+0x230>
 8004334:	8019      	strh	r1, [r3, #0]
 8004336:	e70f      	b.n	8004158 <__ssvfiscanf_r+0x50>
 8004338:	6019      	str	r1, [r3, #0]
 800433a:	e70d      	b.n	8004158 <__ssvfiscanf_r+0x50>
 800433c:	23c0      	movs	r3, #192	@ 0xc0
 800433e:	aa43      	add	r2, sp, #268	@ 0x10c
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	0021      	movs	r1, r4
 8004344:	58d3      	ldr	r3, [r2, r3]
 8004346:	9801      	ldr	r0, [sp, #4]
 8004348:	4798      	blx	r3
 800434a:	2800      	cmp	r0, #0
 800434c:	d0b7      	beq.n	80042be <__ssvfiscanf_r+0x1b6>
 800434e:	e796      	b.n	800427e <__ssvfiscanf_r+0x176>
 8004350:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8004352:	3201      	adds	r2, #1
 8004354:	9247      	str	r2, [sp, #284]	@ 0x11c
 8004356:	6862      	ldr	r2, [r4, #4]
 8004358:	3a01      	subs	r2, #1
 800435a:	6062      	str	r2, [r4, #4]
 800435c:	2a00      	cmp	r2, #0
 800435e:	dd02      	ble.n	8004366 <__ssvfiscanf_r+0x25e>
 8004360:	3301      	adds	r3, #1
 8004362:	6023      	str	r3, [r4, #0]
 8004364:	e7b1      	b.n	80042ca <__ssvfiscanf_r+0x1c2>
 8004366:	ab43      	add	r3, sp, #268	@ 0x10c
 8004368:	0021      	movs	r1, r4
 800436a:	59db      	ldr	r3, [r3, r7]
 800436c:	9801      	ldr	r0, [sp, #4]
 800436e:	4798      	blx	r3
 8004370:	2800      	cmp	r0, #0
 8004372:	d0aa      	beq.n	80042ca <__ssvfiscanf_r+0x1c2>
 8004374:	e783      	b.n	800427e <__ssvfiscanf_r+0x176>
 8004376:	2b04      	cmp	r3, #4
 8004378:	dc06      	bgt.n	8004388 <__ssvfiscanf_r+0x280>
 800437a:	0022      	movs	r2, r4
 800437c:	9801      	ldr	r0, [sp, #4]
 800437e:	ab02      	add	r3, sp, #8
 8004380:	a943      	add	r1, sp, #268	@ 0x10c
 8004382:	f000 fb45 	bl	8004a10 <_scanf_i>
 8004386:	e7af      	b.n	80042e8 <__ssvfiscanf_r+0x1e0>
 8004388:	4b0f      	ldr	r3, [pc, #60]	@ (80043c8 <__ssvfiscanf_r+0x2c0>)
 800438a:	2b00      	cmp	r3, #0
 800438c:	d100      	bne.n	8004390 <__ssvfiscanf_r+0x288>
 800438e:	e6e3      	b.n	8004158 <__ssvfiscanf_r+0x50>
 8004390:	0022      	movs	r2, r4
 8004392:	9801      	ldr	r0, [sp, #4]
 8004394:	ab02      	add	r3, sp, #8
 8004396:	a943      	add	r1, sp, #268	@ 0x10c
 8004398:	e000      	b.n	800439c <__ssvfiscanf_r+0x294>
 800439a:	bf00      	nop
 800439c:	e7a4      	b.n	80042e8 <__ssvfiscanf_r+0x1e0>
 800439e:	89a3      	ldrh	r3, [r4, #12]
 80043a0:	065b      	lsls	r3, r3, #25
 80043a2:	d500      	bpl.n	80043a6 <__ssvfiscanf_r+0x29e>
 80043a4:	e76f      	b.n	8004286 <__ssvfiscanf_r+0x17e>
 80043a6:	23a5      	movs	r3, #165	@ 0xa5
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	449d      	add	sp, r3
 80043ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ae:	9846      	ldr	r0, [sp, #280]	@ 0x118
 80043b0:	e7f9      	b.n	80043a6 <__ssvfiscanf_r+0x29e>
 80043b2:	46c0      	nop			@ (mov r8, r8)
 80043b4:	fffffd6c 	.word	0xfffffd6c
 80043b8:	08004051 	.word	0x08004051
 80043bc:	080040c9 	.word	0x080040c9
 80043c0:	080058a7 	.word	0x080058a7
 80043c4:	0800585e 	.word	0x0800585e
 80043c8:	00000000 	.word	0x00000000

080043cc <__sfputc_r>:
 80043cc:	6893      	ldr	r3, [r2, #8]
 80043ce:	b510      	push	{r4, lr}
 80043d0:	3b01      	subs	r3, #1
 80043d2:	6093      	str	r3, [r2, #8]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	da04      	bge.n	80043e2 <__sfputc_r+0x16>
 80043d8:	6994      	ldr	r4, [r2, #24]
 80043da:	42a3      	cmp	r3, r4
 80043dc:	db07      	blt.n	80043ee <__sfputc_r+0x22>
 80043de:	290a      	cmp	r1, #10
 80043e0:	d005      	beq.n	80043ee <__sfputc_r+0x22>
 80043e2:	6813      	ldr	r3, [r2, #0]
 80043e4:	1c58      	adds	r0, r3, #1
 80043e6:	6010      	str	r0, [r2, #0]
 80043e8:	7019      	strb	r1, [r3, #0]
 80043ea:	0008      	movs	r0, r1
 80043ec:	bd10      	pop	{r4, pc}
 80043ee:	f7ff fa9b 	bl	8003928 <__swbuf_r>
 80043f2:	0001      	movs	r1, r0
 80043f4:	e7f9      	b.n	80043ea <__sfputc_r+0x1e>

080043f6 <__sfputs_r>:
 80043f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043f8:	0006      	movs	r6, r0
 80043fa:	000f      	movs	r7, r1
 80043fc:	0014      	movs	r4, r2
 80043fe:	18d5      	adds	r5, r2, r3
 8004400:	42ac      	cmp	r4, r5
 8004402:	d101      	bne.n	8004408 <__sfputs_r+0x12>
 8004404:	2000      	movs	r0, #0
 8004406:	e007      	b.n	8004418 <__sfputs_r+0x22>
 8004408:	7821      	ldrb	r1, [r4, #0]
 800440a:	003a      	movs	r2, r7
 800440c:	0030      	movs	r0, r6
 800440e:	f7ff ffdd 	bl	80043cc <__sfputc_r>
 8004412:	3401      	adds	r4, #1
 8004414:	1c43      	adds	r3, r0, #1
 8004416:	d1f3      	bne.n	8004400 <__sfputs_r+0xa>
 8004418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800441c <_vfiprintf_r>:
 800441c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800441e:	b0a1      	sub	sp, #132	@ 0x84
 8004420:	000f      	movs	r7, r1
 8004422:	0015      	movs	r5, r2
 8004424:	001e      	movs	r6, r3
 8004426:	9003      	str	r0, [sp, #12]
 8004428:	2800      	cmp	r0, #0
 800442a:	d004      	beq.n	8004436 <_vfiprintf_r+0x1a>
 800442c:	6a03      	ldr	r3, [r0, #32]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <_vfiprintf_r+0x1a>
 8004432:	f7ff f92b 	bl	800368c <__sinit>
 8004436:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004438:	07db      	lsls	r3, r3, #31
 800443a:	d405      	bmi.n	8004448 <_vfiprintf_r+0x2c>
 800443c:	89bb      	ldrh	r3, [r7, #12]
 800443e:	059b      	lsls	r3, r3, #22
 8004440:	d402      	bmi.n	8004448 <_vfiprintf_r+0x2c>
 8004442:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004444:	f7ff fba7 	bl	8003b96 <__retarget_lock_acquire_recursive>
 8004448:	89bb      	ldrh	r3, [r7, #12]
 800444a:	071b      	lsls	r3, r3, #28
 800444c:	d502      	bpl.n	8004454 <_vfiprintf_r+0x38>
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d113      	bne.n	800447c <_vfiprintf_r+0x60>
 8004454:	0039      	movs	r1, r7
 8004456:	9803      	ldr	r0, [sp, #12]
 8004458:	f7ff faa8 	bl	80039ac <__swsetup_r>
 800445c:	2800      	cmp	r0, #0
 800445e:	d00d      	beq.n	800447c <_vfiprintf_r+0x60>
 8004460:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004462:	07db      	lsls	r3, r3, #31
 8004464:	d503      	bpl.n	800446e <_vfiprintf_r+0x52>
 8004466:	2001      	movs	r0, #1
 8004468:	4240      	negs	r0, r0
 800446a:	b021      	add	sp, #132	@ 0x84
 800446c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800446e:	89bb      	ldrh	r3, [r7, #12]
 8004470:	059b      	lsls	r3, r3, #22
 8004472:	d4f8      	bmi.n	8004466 <_vfiprintf_r+0x4a>
 8004474:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8004476:	f7ff fb8f 	bl	8003b98 <__retarget_lock_release_recursive>
 800447a:	e7f4      	b.n	8004466 <_vfiprintf_r+0x4a>
 800447c:	2300      	movs	r3, #0
 800447e:	ac08      	add	r4, sp, #32
 8004480:	6163      	str	r3, [r4, #20]
 8004482:	3320      	adds	r3, #32
 8004484:	7663      	strb	r3, [r4, #25]
 8004486:	3310      	adds	r3, #16
 8004488:	76a3      	strb	r3, [r4, #26]
 800448a:	9607      	str	r6, [sp, #28]
 800448c:	002e      	movs	r6, r5
 800448e:	7833      	ldrb	r3, [r6, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d001      	beq.n	8004498 <_vfiprintf_r+0x7c>
 8004494:	2b25      	cmp	r3, #37	@ 0x25
 8004496:	d148      	bne.n	800452a <_vfiprintf_r+0x10e>
 8004498:	1b73      	subs	r3, r6, r5
 800449a:	9305      	str	r3, [sp, #20]
 800449c:	42ae      	cmp	r6, r5
 800449e:	d00b      	beq.n	80044b8 <_vfiprintf_r+0x9c>
 80044a0:	002a      	movs	r2, r5
 80044a2:	0039      	movs	r1, r7
 80044a4:	9803      	ldr	r0, [sp, #12]
 80044a6:	f7ff ffa6 	bl	80043f6 <__sfputs_r>
 80044aa:	3001      	adds	r0, #1
 80044ac:	d100      	bne.n	80044b0 <_vfiprintf_r+0x94>
 80044ae:	e0ae      	b.n	800460e <_vfiprintf_r+0x1f2>
 80044b0:	6963      	ldr	r3, [r4, #20]
 80044b2:	9a05      	ldr	r2, [sp, #20]
 80044b4:	189b      	adds	r3, r3, r2
 80044b6:	6163      	str	r3, [r4, #20]
 80044b8:	7833      	ldrb	r3, [r6, #0]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d100      	bne.n	80044c0 <_vfiprintf_r+0xa4>
 80044be:	e0a6      	b.n	800460e <_vfiprintf_r+0x1f2>
 80044c0:	2201      	movs	r2, #1
 80044c2:	2300      	movs	r3, #0
 80044c4:	4252      	negs	r2, r2
 80044c6:	6062      	str	r2, [r4, #4]
 80044c8:	a904      	add	r1, sp, #16
 80044ca:	3254      	adds	r2, #84	@ 0x54
 80044cc:	1852      	adds	r2, r2, r1
 80044ce:	1c75      	adds	r5, r6, #1
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	60e3      	str	r3, [r4, #12]
 80044d4:	60a3      	str	r3, [r4, #8]
 80044d6:	7013      	strb	r3, [r2, #0]
 80044d8:	65a3      	str	r3, [r4, #88]	@ 0x58
 80044da:	4b59      	ldr	r3, [pc, #356]	@ (8004640 <_vfiprintf_r+0x224>)
 80044dc:	2205      	movs	r2, #5
 80044de:	0018      	movs	r0, r3
 80044e0:	7829      	ldrb	r1, [r5, #0]
 80044e2:	9305      	str	r3, [sp, #20]
 80044e4:	f000 fd72 	bl	8004fcc <memchr>
 80044e8:	1c6e      	adds	r6, r5, #1
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d11f      	bne.n	800452e <_vfiprintf_r+0x112>
 80044ee:	6822      	ldr	r2, [r4, #0]
 80044f0:	06d3      	lsls	r3, r2, #27
 80044f2:	d504      	bpl.n	80044fe <_vfiprintf_r+0xe2>
 80044f4:	2353      	movs	r3, #83	@ 0x53
 80044f6:	a904      	add	r1, sp, #16
 80044f8:	185b      	adds	r3, r3, r1
 80044fa:	2120      	movs	r1, #32
 80044fc:	7019      	strb	r1, [r3, #0]
 80044fe:	0713      	lsls	r3, r2, #28
 8004500:	d504      	bpl.n	800450c <_vfiprintf_r+0xf0>
 8004502:	2353      	movs	r3, #83	@ 0x53
 8004504:	a904      	add	r1, sp, #16
 8004506:	185b      	adds	r3, r3, r1
 8004508:	212b      	movs	r1, #43	@ 0x2b
 800450a:	7019      	strb	r1, [r3, #0]
 800450c:	782b      	ldrb	r3, [r5, #0]
 800450e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004510:	d016      	beq.n	8004540 <_vfiprintf_r+0x124>
 8004512:	002e      	movs	r6, r5
 8004514:	2100      	movs	r1, #0
 8004516:	200a      	movs	r0, #10
 8004518:	68e3      	ldr	r3, [r4, #12]
 800451a:	7832      	ldrb	r2, [r6, #0]
 800451c:	1c75      	adds	r5, r6, #1
 800451e:	3a30      	subs	r2, #48	@ 0x30
 8004520:	2a09      	cmp	r2, #9
 8004522:	d950      	bls.n	80045c6 <_vfiprintf_r+0x1aa>
 8004524:	2900      	cmp	r1, #0
 8004526:	d111      	bne.n	800454c <_vfiprintf_r+0x130>
 8004528:	e017      	b.n	800455a <_vfiprintf_r+0x13e>
 800452a:	3601      	adds	r6, #1
 800452c:	e7af      	b.n	800448e <_vfiprintf_r+0x72>
 800452e:	9b05      	ldr	r3, [sp, #20]
 8004530:	6822      	ldr	r2, [r4, #0]
 8004532:	1ac0      	subs	r0, r0, r3
 8004534:	2301      	movs	r3, #1
 8004536:	4083      	lsls	r3, r0
 8004538:	4313      	orrs	r3, r2
 800453a:	0035      	movs	r5, r6
 800453c:	6023      	str	r3, [r4, #0]
 800453e:	e7cc      	b.n	80044da <_vfiprintf_r+0xbe>
 8004540:	9b07      	ldr	r3, [sp, #28]
 8004542:	1d19      	adds	r1, r3, #4
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	9107      	str	r1, [sp, #28]
 8004548:	2b00      	cmp	r3, #0
 800454a:	db01      	blt.n	8004550 <_vfiprintf_r+0x134>
 800454c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800454e:	e004      	b.n	800455a <_vfiprintf_r+0x13e>
 8004550:	425b      	negs	r3, r3
 8004552:	60e3      	str	r3, [r4, #12]
 8004554:	2302      	movs	r3, #2
 8004556:	4313      	orrs	r3, r2
 8004558:	6023      	str	r3, [r4, #0]
 800455a:	7833      	ldrb	r3, [r6, #0]
 800455c:	2b2e      	cmp	r3, #46	@ 0x2e
 800455e:	d10c      	bne.n	800457a <_vfiprintf_r+0x15e>
 8004560:	7873      	ldrb	r3, [r6, #1]
 8004562:	2b2a      	cmp	r3, #42	@ 0x2a
 8004564:	d134      	bne.n	80045d0 <_vfiprintf_r+0x1b4>
 8004566:	9b07      	ldr	r3, [sp, #28]
 8004568:	3602      	adds	r6, #2
 800456a:	1d1a      	adds	r2, r3, #4
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	9207      	str	r2, [sp, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	da01      	bge.n	8004578 <_vfiprintf_r+0x15c>
 8004574:	2301      	movs	r3, #1
 8004576:	425b      	negs	r3, r3
 8004578:	9309      	str	r3, [sp, #36]	@ 0x24
 800457a:	4d32      	ldr	r5, [pc, #200]	@ (8004644 <_vfiprintf_r+0x228>)
 800457c:	2203      	movs	r2, #3
 800457e:	0028      	movs	r0, r5
 8004580:	7831      	ldrb	r1, [r6, #0]
 8004582:	f000 fd23 	bl	8004fcc <memchr>
 8004586:	2800      	cmp	r0, #0
 8004588:	d006      	beq.n	8004598 <_vfiprintf_r+0x17c>
 800458a:	2340      	movs	r3, #64	@ 0x40
 800458c:	1b40      	subs	r0, r0, r5
 800458e:	4083      	lsls	r3, r0
 8004590:	6822      	ldr	r2, [r4, #0]
 8004592:	3601      	adds	r6, #1
 8004594:	4313      	orrs	r3, r2
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	7831      	ldrb	r1, [r6, #0]
 800459a:	2206      	movs	r2, #6
 800459c:	482a      	ldr	r0, [pc, #168]	@ (8004648 <_vfiprintf_r+0x22c>)
 800459e:	1c75      	adds	r5, r6, #1
 80045a0:	7621      	strb	r1, [r4, #24]
 80045a2:	f000 fd13 	bl	8004fcc <memchr>
 80045a6:	2800      	cmp	r0, #0
 80045a8:	d040      	beq.n	800462c <_vfiprintf_r+0x210>
 80045aa:	4b28      	ldr	r3, [pc, #160]	@ (800464c <_vfiprintf_r+0x230>)
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d122      	bne.n	80045f6 <_vfiprintf_r+0x1da>
 80045b0:	2207      	movs	r2, #7
 80045b2:	9b07      	ldr	r3, [sp, #28]
 80045b4:	3307      	adds	r3, #7
 80045b6:	4393      	bics	r3, r2
 80045b8:	3308      	adds	r3, #8
 80045ba:	9307      	str	r3, [sp, #28]
 80045bc:	6963      	ldr	r3, [r4, #20]
 80045be:	9a04      	ldr	r2, [sp, #16]
 80045c0:	189b      	adds	r3, r3, r2
 80045c2:	6163      	str	r3, [r4, #20]
 80045c4:	e762      	b.n	800448c <_vfiprintf_r+0x70>
 80045c6:	4343      	muls	r3, r0
 80045c8:	002e      	movs	r6, r5
 80045ca:	2101      	movs	r1, #1
 80045cc:	189b      	adds	r3, r3, r2
 80045ce:	e7a4      	b.n	800451a <_vfiprintf_r+0xfe>
 80045d0:	2300      	movs	r3, #0
 80045d2:	200a      	movs	r0, #10
 80045d4:	0019      	movs	r1, r3
 80045d6:	3601      	adds	r6, #1
 80045d8:	6063      	str	r3, [r4, #4]
 80045da:	7832      	ldrb	r2, [r6, #0]
 80045dc:	1c75      	adds	r5, r6, #1
 80045de:	3a30      	subs	r2, #48	@ 0x30
 80045e0:	2a09      	cmp	r2, #9
 80045e2:	d903      	bls.n	80045ec <_vfiprintf_r+0x1d0>
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0c8      	beq.n	800457a <_vfiprintf_r+0x15e>
 80045e8:	9109      	str	r1, [sp, #36]	@ 0x24
 80045ea:	e7c6      	b.n	800457a <_vfiprintf_r+0x15e>
 80045ec:	4341      	muls	r1, r0
 80045ee:	002e      	movs	r6, r5
 80045f0:	2301      	movs	r3, #1
 80045f2:	1889      	adds	r1, r1, r2
 80045f4:	e7f1      	b.n	80045da <_vfiprintf_r+0x1be>
 80045f6:	aa07      	add	r2, sp, #28
 80045f8:	9200      	str	r2, [sp, #0]
 80045fa:	0021      	movs	r1, r4
 80045fc:	003a      	movs	r2, r7
 80045fe:	4b14      	ldr	r3, [pc, #80]	@ (8004650 <_vfiprintf_r+0x234>)
 8004600:	9803      	ldr	r0, [sp, #12]
 8004602:	e000      	b.n	8004606 <_vfiprintf_r+0x1ea>
 8004604:	bf00      	nop
 8004606:	9004      	str	r0, [sp, #16]
 8004608:	9b04      	ldr	r3, [sp, #16]
 800460a:	3301      	adds	r3, #1
 800460c:	d1d6      	bne.n	80045bc <_vfiprintf_r+0x1a0>
 800460e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004610:	07db      	lsls	r3, r3, #31
 8004612:	d405      	bmi.n	8004620 <_vfiprintf_r+0x204>
 8004614:	89bb      	ldrh	r3, [r7, #12]
 8004616:	059b      	lsls	r3, r3, #22
 8004618:	d402      	bmi.n	8004620 <_vfiprintf_r+0x204>
 800461a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800461c:	f7ff fabc 	bl	8003b98 <__retarget_lock_release_recursive>
 8004620:	89bb      	ldrh	r3, [r7, #12]
 8004622:	065b      	lsls	r3, r3, #25
 8004624:	d500      	bpl.n	8004628 <_vfiprintf_r+0x20c>
 8004626:	e71e      	b.n	8004466 <_vfiprintf_r+0x4a>
 8004628:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800462a:	e71e      	b.n	800446a <_vfiprintf_r+0x4e>
 800462c:	aa07      	add	r2, sp, #28
 800462e:	9200      	str	r2, [sp, #0]
 8004630:	0021      	movs	r1, r4
 8004632:	003a      	movs	r2, r7
 8004634:	4b06      	ldr	r3, [pc, #24]	@ (8004650 <_vfiprintf_r+0x234>)
 8004636:	9803      	ldr	r0, [sp, #12]
 8004638:	f000 f87c 	bl	8004734 <_printf_i>
 800463c:	e7e3      	b.n	8004606 <_vfiprintf_r+0x1ea>
 800463e:	46c0      	nop			@ (mov r8, r8)
 8004640:	08005858 	.word	0x08005858
 8004644:	0800585e 	.word	0x0800585e
 8004648:	08005862 	.word	0x08005862
 800464c:	00000000 	.word	0x00000000
 8004650:	080043f7 	.word	0x080043f7

08004654 <_printf_common>:
 8004654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004656:	0016      	movs	r6, r2
 8004658:	9301      	str	r3, [sp, #4]
 800465a:	688a      	ldr	r2, [r1, #8]
 800465c:	690b      	ldr	r3, [r1, #16]
 800465e:	000c      	movs	r4, r1
 8004660:	9000      	str	r0, [sp, #0]
 8004662:	4293      	cmp	r3, r2
 8004664:	da00      	bge.n	8004668 <_printf_common+0x14>
 8004666:	0013      	movs	r3, r2
 8004668:	0022      	movs	r2, r4
 800466a:	6033      	str	r3, [r6, #0]
 800466c:	3243      	adds	r2, #67	@ 0x43
 800466e:	7812      	ldrb	r2, [r2, #0]
 8004670:	2a00      	cmp	r2, #0
 8004672:	d001      	beq.n	8004678 <_printf_common+0x24>
 8004674:	3301      	adds	r3, #1
 8004676:	6033      	str	r3, [r6, #0]
 8004678:	6823      	ldr	r3, [r4, #0]
 800467a:	069b      	lsls	r3, r3, #26
 800467c:	d502      	bpl.n	8004684 <_printf_common+0x30>
 800467e:	6833      	ldr	r3, [r6, #0]
 8004680:	3302      	adds	r3, #2
 8004682:	6033      	str	r3, [r6, #0]
 8004684:	6822      	ldr	r2, [r4, #0]
 8004686:	2306      	movs	r3, #6
 8004688:	0015      	movs	r5, r2
 800468a:	401d      	ands	r5, r3
 800468c:	421a      	tst	r2, r3
 800468e:	d027      	beq.n	80046e0 <_printf_common+0x8c>
 8004690:	0023      	movs	r3, r4
 8004692:	3343      	adds	r3, #67	@ 0x43
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	1e5a      	subs	r2, r3, #1
 8004698:	4193      	sbcs	r3, r2
 800469a:	6822      	ldr	r2, [r4, #0]
 800469c:	0692      	lsls	r2, r2, #26
 800469e:	d430      	bmi.n	8004702 <_printf_common+0xae>
 80046a0:	0022      	movs	r2, r4
 80046a2:	9901      	ldr	r1, [sp, #4]
 80046a4:	9800      	ldr	r0, [sp, #0]
 80046a6:	9d08      	ldr	r5, [sp, #32]
 80046a8:	3243      	adds	r2, #67	@ 0x43
 80046aa:	47a8      	blx	r5
 80046ac:	3001      	adds	r0, #1
 80046ae:	d025      	beq.n	80046fc <_printf_common+0xa8>
 80046b0:	2206      	movs	r2, #6
 80046b2:	6823      	ldr	r3, [r4, #0]
 80046b4:	2500      	movs	r5, #0
 80046b6:	4013      	ands	r3, r2
 80046b8:	2b04      	cmp	r3, #4
 80046ba:	d105      	bne.n	80046c8 <_printf_common+0x74>
 80046bc:	6833      	ldr	r3, [r6, #0]
 80046be:	68e5      	ldr	r5, [r4, #12]
 80046c0:	1aed      	subs	r5, r5, r3
 80046c2:	43eb      	mvns	r3, r5
 80046c4:	17db      	asrs	r3, r3, #31
 80046c6:	401d      	ands	r5, r3
 80046c8:	68a3      	ldr	r3, [r4, #8]
 80046ca:	6922      	ldr	r2, [r4, #16]
 80046cc:	4293      	cmp	r3, r2
 80046ce:	dd01      	ble.n	80046d4 <_printf_common+0x80>
 80046d0:	1a9b      	subs	r3, r3, r2
 80046d2:	18ed      	adds	r5, r5, r3
 80046d4:	2600      	movs	r6, #0
 80046d6:	42b5      	cmp	r5, r6
 80046d8:	d120      	bne.n	800471c <_printf_common+0xc8>
 80046da:	2000      	movs	r0, #0
 80046dc:	e010      	b.n	8004700 <_printf_common+0xac>
 80046de:	3501      	adds	r5, #1
 80046e0:	68e3      	ldr	r3, [r4, #12]
 80046e2:	6832      	ldr	r2, [r6, #0]
 80046e4:	1a9b      	subs	r3, r3, r2
 80046e6:	42ab      	cmp	r3, r5
 80046e8:	ddd2      	ble.n	8004690 <_printf_common+0x3c>
 80046ea:	0022      	movs	r2, r4
 80046ec:	2301      	movs	r3, #1
 80046ee:	9901      	ldr	r1, [sp, #4]
 80046f0:	9800      	ldr	r0, [sp, #0]
 80046f2:	9f08      	ldr	r7, [sp, #32]
 80046f4:	3219      	adds	r2, #25
 80046f6:	47b8      	blx	r7
 80046f8:	3001      	adds	r0, #1
 80046fa:	d1f0      	bne.n	80046de <_printf_common+0x8a>
 80046fc:	2001      	movs	r0, #1
 80046fe:	4240      	negs	r0, r0
 8004700:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004702:	2030      	movs	r0, #48	@ 0x30
 8004704:	18e1      	adds	r1, r4, r3
 8004706:	3143      	adds	r1, #67	@ 0x43
 8004708:	7008      	strb	r0, [r1, #0]
 800470a:	0021      	movs	r1, r4
 800470c:	1c5a      	adds	r2, r3, #1
 800470e:	3145      	adds	r1, #69	@ 0x45
 8004710:	7809      	ldrb	r1, [r1, #0]
 8004712:	18a2      	adds	r2, r4, r2
 8004714:	3243      	adds	r2, #67	@ 0x43
 8004716:	3302      	adds	r3, #2
 8004718:	7011      	strb	r1, [r2, #0]
 800471a:	e7c1      	b.n	80046a0 <_printf_common+0x4c>
 800471c:	0022      	movs	r2, r4
 800471e:	2301      	movs	r3, #1
 8004720:	9901      	ldr	r1, [sp, #4]
 8004722:	9800      	ldr	r0, [sp, #0]
 8004724:	9f08      	ldr	r7, [sp, #32]
 8004726:	321a      	adds	r2, #26
 8004728:	47b8      	blx	r7
 800472a:	3001      	adds	r0, #1
 800472c:	d0e6      	beq.n	80046fc <_printf_common+0xa8>
 800472e:	3601      	adds	r6, #1
 8004730:	e7d1      	b.n	80046d6 <_printf_common+0x82>
	...

08004734 <_printf_i>:
 8004734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004736:	b08b      	sub	sp, #44	@ 0x2c
 8004738:	9206      	str	r2, [sp, #24]
 800473a:	000a      	movs	r2, r1
 800473c:	3243      	adds	r2, #67	@ 0x43
 800473e:	9307      	str	r3, [sp, #28]
 8004740:	9005      	str	r0, [sp, #20]
 8004742:	9203      	str	r2, [sp, #12]
 8004744:	7e0a      	ldrb	r2, [r1, #24]
 8004746:	000c      	movs	r4, r1
 8004748:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800474a:	2a78      	cmp	r2, #120	@ 0x78
 800474c:	d809      	bhi.n	8004762 <_printf_i+0x2e>
 800474e:	2a62      	cmp	r2, #98	@ 0x62
 8004750:	d80b      	bhi.n	800476a <_printf_i+0x36>
 8004752:	2a00      	cmp	r2, #0
 8004754:	d100      	bne.n	8004758 <_printf_i+0x24>
 8004756:	e0bc      	b.n	80048d2 <_printf_i+0x19e>
 8004758:	497b      	ldr	r1, [pc, #492]	@ (8004948 <_printf_i+0x214>)
 800475a:	9104      	str	r1, [sp, #16]
 800475c:	2a58      	cmp	r2, #88	@ 0x58
 800475e:	d100      	bne.n	8004762 <_printf_i+0x2e>
 8004760:	e090      	b.n	8004884 <_printf_i+0x150>
 8004762:	0025      	movs	r5, r4
 8004764:	3542      	adds	r5, #66	@ 0x42
 8004766:	702a      	strb	r2, [r5, #0]
 8004768:	e022      	b.n	80047b0 <_printf_i+0x7c>
 800476a:	0010      	movs	r0, r2
 800476c:	3863      	subs	r0, #99	@ 0x63
 800476e:	2815      	cmp	r0, #21
 8004770:	d8f7      	bhi.n	8004762 <_printf_i+0x2e>
 8004772:	f7fb fcd1 	bl	8000118 <__gnu_thumb1_case_shi>
 8004776:	0016      	.short	0x0016
 8004778:	fff6001f 	.word	0xfff6001f
 800477c:	fff6fff6 	.word	0xfff6fff6
 8004780:	001ffff6 	.word	0x001ffff6
 8004784:	fff6fff6 	.word	0xfff6fff6
 8004788:	fff6fff6 	.word	0xfff6fff6
 800478c:	003600a1 	.word	0x003600a1
 8004790:	fff60080 	.word	0xfff60080
 8004794:	00b2fff6 	.word	0x00b2fff6
 8004798:	0036fff6 	.word	0x0036fff6
 800479c:	fff6fff6 	.word	0xfff6fff6
 80047a0:	0084      	.short	0x0084
 80047a2:	0025      	movs	r5, r4
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	3542      	adds	r5, #66	@ 0x42
 80047a8:	1d11      	adds	r1, r2, #4
 80047aa:	6019      	str	r1, [r3, #0]
 80047ac:	6813      	ldr	r3, [r2, #0]
 80047ae:	702b      	strb	r3, [r5, #0]
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0a0      	b.n	80048f6 <_printf_i+0x1c2>
 80047b4:	6818      	ldr	r0, [r3, #0]
 80047b6:	6809      	ldr	r1, [r1, #0]
 80047b8:	1d02      	adds	r2, r0, #4
 80047ba:	060d      	lsls	r5, r1, #24
 80047bc:	d50b      	bpl.n	80047d6 <_printf_i+0xa2>
 80047be:	6806      	ldr	r6, [r0, #0]
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	2e00      	cmp	r6, #0
 80047c4:	da03      	bge.n	80047ce <_printf_i+0x9a>
 80047c6:	232d      	movs	r3, #45	@ 0x2d
 80047c8:	9a03      	ldr	r2, [sp, #12]
 80047ca:	4276      	negs	r6, r6
 80047cc:	7013      	strb	r3, [r2, #0]
 80047ce:	4b5e      	ldr	r3, [pc, #376]	@ (8004948 <_printf_i+0x214>)
 80047d0:	270a      	movs	r7, #10
 80047d2:	9304      	str	r3, [sp, #16]
 80047d4:	e018      	b.n	8004808 <_printf_i+0xd4>
 80047d6:	6806      	ldr	r6, [r0, #0]
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	0649      	lsls	r1, r1, #25
 80047dc:	d5f1      	bpl.n	80047c2 <_printf_i+0x8e>
 80047de:	b236      	sxth	r6, r6
 80047e0:	e7ef      	b.n	80047c2 <_printf_i+0x8e>
 80047e2:	6808      	ldr	r0, [r1, #0]
 80047e4:	6819      	ldr	r1, [r3, #0]
 80047e6:	c940      	ldmia	r1!, {r6}
 80047e8:	0605      	lsls	r5, r0, #24
 80047ea:	d402      	bmi.n	80047f2 <_printf_i+0xbe>
 80047ec:	0640      	lsls	r0, r0, #25
 80047ee:	d500      	bpl.n	80047f2 <_printf_i+0xbe>
 80047f0:	b2b6      	uxth	r6, r6
 80047f2:	6019      	str	r1, [r3, #0]
 80047f4:	4b54      	ldr	r3, [pc, #336]	@ (8004948 <_printf_i+0x214>)
 80047f6:	270a      	movs	r7, #10
 80047f8:	9304      	str	r3, [sp, #16]
 80047fa:	2a6f      	cmp	r2, #111	@ 0x6f
 80047fc:	d100      	bne.n	8004800 <_printf_i+0xcc>
 80047fe:	3f02      	subs	r7, #2
 8004800:	0023      	movs	r3, r4
 8004802:	2200      	movs	r2, #0
 8004804:	3343      	adds	r3, #67	@ 0x43
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	6863      	ldr	r3, [r4, #4]
 800480a:	60a3      	str	r3, [r4, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	db03      	blt.n	8004818 <_printf_i+0xe4>
 8004810:	2104      	movs	r1, #4
 8004812:	6822      	ldr	r2, [r4, #0]
 8004814:	438a      	bics	r2, r1
 8004816:	6022      	str	r2, [r4, #0]
 8004818:	2e00      	cmp	r6, #0
 800481a:	d102      	bne.n	8004822 <_printf_i+0xee>
 800481c:	9d03      	ldr	r5, [sp, #12]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00c      	beq.n	800483c <_printf_i+0x108>
 8004822:	9d03      	ldr	r5, [sp, #12]
 8004824:	0030      	movs	r0, r6
 8004826:	0039      	movs	r1, r7
 8004828:	f7fb fd06 	bl	8000238 <__aeabi_uidivmod>
 800482c:	9b04      	ldr	r3, [sp, #16]
 800482e:	3d01      	subs	r5, #1
 8004830:	5c5b      	ldrb	r3, [r3, r1]
 8004832:	702b      	strb	r3, [r5, #0]
 8004834:	0033      	movs	r3, r6
 8004836:	0006      	movs	r6, r0
 8004838:	429f      	cmp	r7, r3
 800483a:	d9f3      	bls.n	8004824 <_printf_i+0xf0>
 800483c:	2f08      	cmp	r7, #8
 800483e:	d109      	bne.n	8004854 <_printf_i+0x120>
 8004840:	6823      	ldr	r3, [r4, #0]
 8004842:	07db      	lsls	r3, r3, #31
 8004844:	d506      	bpl.n	8004854 <_printf_i+0x120>
 8004846:	6862      	ldr	r2, [r4, #4]
 8004848:	6923      	ldr	r3, [r4, #16]
 800484a:	429a      	cmp	r2, r3
 800484c:	dc02      	bgt.n	8004854 <_printf_i+0x120>
 800484e:	2330      	movs	r3, #48	@ 0x30
 8004850:	3d01      	subs	r5, #1
 8004852:	702b      	strb	r3, [r5, #0]
 8004854:	9b03      	ldr	r3, [sp, #12]
 8004856:	1b5b      	subs	r3, r3, r5
 8004858:	6123      	str	r3, [r4, #16]
 800485a:	9b07      	ldr	r3, [sp, #28]
 800485c:	0021      	movs	r1, r4
 800485e:	9300      	str	r3, [sp, #0]
 8004860:	9805      	ldr	r0, [sp, #20]
 8004862:	9b06      	ldr	r3, [sp, #24]
 8004864:	aa09      	add	r2, sp, #36	@ 0x24
 8004866:	f7ff fef5 	bl	8004654 <_printf_common>
 800486a:	3001      	adds	r0, #1
 800486c:	d148      	bne.n	8004900 <_printf_i+0x1cc>
 800486e:	2001      	movs	r0, #1
 8004870:	4240      	negs	r0, r0
 8004872:	b00b      	add	sp, #44	@ 0x2c
 8004874:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004876:	2220      	movs	r2, #32
 8004878:	6809      	ldr	r1, [r1, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	6022      	str	r2, [r4, #0]
 800487e:	2278      	movs	r2, #120	@ 0x78
 8004880:	4932      	ldr	r1, [pc, #200]	@ (800494c <_printf_i+0x218>)
 8004882:	9104      	str	r1, [sp, #16]
 8004884:	0021      	movs	r1, r4
 8004886:	3145      	adds	r1, #69	@ 0x45
 8004888:	700a      	strb	r2, [r1, #0]
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	6822      	ldr	r2, [r4, #0]
 800488e:	c940      	ldmia	r1!, {r6}
 8004890:	0610      	lsls	r0, r2, #24
 8004892:	d402      	bmi.n	800489a <_printf_i+0x166>
 8004894:	0650      	lsls	r0, r2, #25
 8004896:	d500      	bpl.n	800489a <_printf_i+0x166>
 8004898:	b2b6      	uxth	r6, r6
 800489a:	6019      	str	r1, [r3, #0]
 800489c:	07d3      	lsls	r3, r2, #31
 800489e:	d502      	bpl.n	80048a6 <_printf_i+0x172>
 80048a0:	2320      	movs	r3, #32
 80048a2:	4313      	orrs	r3, r2
 80048a4:	6023      	str	r3, [r4, #0]
 80048a6:	2e00      	cmp	r6, #0
 80048a8:	d001      	beq.n	80048ae <_printf_i+0x17a>
 80048aa:	2710      	movs	r7, #16
 80048ac:	e7a8      	b.n	8004800 <_printf_i+0xcc>
 80048ae:	2220      	movs	r2, #32
 80048b0:	6823      	ldr	r3, [r4, #0]
 80048b2:	4393      	bics	r3, r2
 80048b4:	6023      	str	r3, [r4, #0]
 80048b6:	e7f8      	b.n	80048aa <_printf_i+0x176>
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	680d      	ldr	r5, [r1, #0]
 80048bc:	1d10      	adds	r0, r2, #4
 80048be:	6949      	ldr	r1, [r1, #20]
 80048c0:	6018      	str	r0, [r3, #0]
 80048c2:	6813      	ldr	r3, [r2, #0]
 80048c4:	062e      	lsls	r6, r5, #24
 80048c6:	d501      	bpl.n	80048cc <_printf_i+0x198>
 80048c8:	6019      	str	r1, [r3, #0]
 80048ca:	e002      	b.n	80048d2 <_printf_i+0x19e>
 80048cc:	066d      	lsls	r5, r5, #25
 80048ce:	d5fb      	bpl.n	80048c8 <_printf_i+0x194>
 80048d0:	8019      	strh	r1, [r3, #0]
 80048d2:	2300      	movs	r3, #0
 80048d4:	9d03      	ldr	r5, [sp, #12]
 80048d6:	6123      	str	r3, [r4, #16]
 80048d8:	e7bf      	b.n	800485a <_printf_i+0x126>
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	1d11      	adds	r1, r2, #4
 80048de:	6019      	str	r1, [r3, #0]
 80048e0:	6815      	ldr	r5, [r2, #0]
 80048e2:	2100      	movs	r1, #0
 80048e4:	0028      	movs	r0, r5
 80048e6:	6862      	ldr	r2, [r4, #4]
 80048e8:	f000 fb70 	bl	8004fcc <memchr>
 80048ec:	2800      	cmp	r0, #0
 80048ee:	d001      	beq.n	80048f4 <_printf_i+0x1c0>
 80048f0:	1b40      	subs	r0, r0, r5
 80048f2:	6060      	str	r0, [r4, #4]
 80048f4:	6863      	ldr	r3, [r4, #4]
 80048f6:	6123      	str	r3, [r4, #16]
 80048f8:	2300      	movs	r3, #0
 80048fa:	9a03      	ldr	r2, [sp, #12]
 80048fc:	7013      	strb	r3, [r2, #0]
 80048fe:	e7ac      	b.n	800485a <_printf_i+0x126>
 8004900:	002a      	movs	r2, r5
 8004902:	6923      	ldr	r3, [r4, #16]
 8004904:	9906      	ldr	r1, [sp, #24]
 8004906:	9805      	ldr	r0, [sp, #20]
 8004908:	9d07      	ldr	r5, [sp, #28]
 800490a:	47a8      	blx	r5
 800490c:	3001      	adds	r0, #1
 800490e:	d0ae      	beq.n	800486e <_printf_i+0x13a>
 8004910:	6823      	ldr	r3, [r4, #0]
 8004912:	079b      	lsls	r3, r3, #30
 8004914:	d415      	bmi.n	8004942 <_printf_i+0x20e>
 8004916:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004918:	68e0      	ldr	r0, [r4, #12]
 800491a:	4298      	cmp	r0, r3
 800491c:	daa9      	bge.n	8004872 <_printf_i+0x13e>
 800491e:	0018      	movs	r0, r3
 8004920:	e7a7      	b.n	8004872 <_printf_i+0x13e>
 8004922:	0022      	movs	r2, r4
 8004924:	2301      	movs	r3, #1
 8004926:	9906      	ldr	r1, [sp, #24]
 8004928:	9805      	ldr	r0, [sp, #20]
 800492a:	9e07      	ldr	r6, [sp, #28]
 800492c:	3219      	adds	r2, #25
 800492e:	47b0      	blx	r6
 8004930:	3001      	adds	r0, #1
 8004932:	d09c      	beq.n	800486e <_printf_i+0x13a>
 8004934:	3501      	adds	r5, #1
 8004936:	68e3      	ldr	r3, [r4, #12]
 8004938:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800493a:	1a9b      	subs	r3, r3, r2
 800493c:	42ab      	cmp	r3, r5
 800493e:	dcf0      	bgt.n	8004922 <_printf_i+0x1ee>
 8004940:	e7e9      	b.n	8004916 <_printf_i+0x1e2>
 8004942:	2500      	movs	r5, #0
 8004944:	e7f7      	b.n	8004936 <_printf_i+0x202>
 8004946:	46c0      	nop			@ (mov r8, r8)
 8004948:	08005869 	.word	0x08005869
 800494c:	0800587a 	.word	0x0800587a

08004950 <_scanf_chars>:
 8004950:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004952:	0015      	movs	r5, r2
 8004954:	688a      	ldr	r2, [r1, #8]
 8004956:	000c      	movs	r4, r1
 8004958:	9001      	str	r0, [sp, #4]
 800495a:	2a00      	cmp	r2, #0
 800495c:	d104      	bne.n	8004968 <_scanf_chars+0x18>
 800495e:	698a      	ldr	r2, [r1, #24]
 8004960:	2a00      	cmp	r2, #0
 8004962:	d117      	bne.n	8004994 <_scanf_chars+0x44>
 8004964:	3201      	adds	r2, #1
 8004966:	60a2      	str	r2, [r4, #8]
 8004968:	6822      	ldr	r2, [r4, #0]
 800496a:	06d2      	lsls	r2, r2, #27
 800496c:	d403      	bmi.n	8004976 <_scanf_chars+0x26>
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	1d11      	adds	r1, r2, #4
 8004972:	6019      	str	r1, [r3, #0]
 8004974:	6817      	ldr	r7, [r2, #0]
 8004976:	2600      	movs	r6, #0
 8004978:	69a0      	ldr	r0, [r4, #24]
 800497a:	2800      	cmp	r0, #0
 800497c:	d016      	beq.n	80049ac <_scanf_chars+0x5c>
 800497e:	2801      	cmp	r0, #1
 8004980:	d10b      	bne.n	800499a <_scanf_chars+0x4a>
 8004982:	682b      	ldr	r3, [r5, #0]
 8004984:	6962      	ldr	r2, [r4, #20]
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	5cd3      	ldrb	r3, [r2, r3]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10e      	bne.n	80049ac <_scanf_chars+0x5c>
 800498e:	2e00      	cmp	r6, #0
 8004990:	d03b      	beq.n	8004a0a <_scanf_chars+0xba>
 8004992:	e029      	b.n	80049e8 <_scanf_chars+0x98>
 8004994:	2201      	movs	r2, #1
 8004996:	4252      	negs	r2, r2
 8004998:	e7e5      	b.n	8004966 <_scanf_chars+0x16>
 800499a:	2802      	cmp	r0, #2
 800499c:	d124      	bne.n	80049e8 <_scanf_chars+0x98>
 800499e:	682b      	ldr	r3, [r5, #0]
 80049a0:	4a1a      	ldr	r2, [pc, #104]	@ (8004a0c <_scanf_chars+0xbc>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	5cd3      	ldrb	r3, [r2, r3]
 80049a6:	2208      	movs	r2, #8
 80049a8:	4213      	tst	r3, r2
 80049aa:	d11d      	bne.n	80049e8 <_scanf_chars+0x98>
 80049ac:	2210      	movs	r2, #16
 80049ae:	6823      	ldr	r3, [r4, #0]
 80049b0:	3601      	adds	r6, #1
 80049b2:	4213      	tst	r3, r2
 80049b4:	d103      	bne.n	80049be <_scanf_chars+0x6e>
 80049b6:	682b      	ldr	r3, [r5, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	703b      	strb	r3, [r7, #0]
 80049bc:	3701      	adds	r7, #1
 80049be:	682a      	ldr	r2, [r5, #0]
 80049c0:	686b      	ldr	r3, [r5, #4]
 80049c2:	3201      	adds	r2, #1
 80049c4:	602a      	str	r2, [r5, #0]
 80049c6:	68a2      	ldr	r2, [r4, #8]
 80049c8:	3b01      	subs	r3, #1
 80049ca:	3a01      	subs	r2, #1
 80049cc:	606b      	str	r3, [r5, #4]
 80049ce:	60a2      	str	r2, [r4, #8]
 80049d0:	2a00      	cmp	r2, #0
 80049d2:	d009      	beq.n	80049e8 <_scanf_chars+0x98>
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	dccf      	bgt.n	8004978 <_scanf_chars+0x28>
 80049d8:	23c0      	movs	r3, #192	@ 0xc0
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	0029      	movs	r1, r5
 80049de:	58e3      	ldr	r3, [r4, r3]
 80049e0:	9801      	ldr	r0, [sp, #4]
 80049e2:	4798      	blx	r3
 80049e4:	2800      	cmp	r0, #0
 80049e6:	d0c7      	beq.n	8004978 <_scanf_chars+0x28>
 80049e8:	6822      	ldr	r2, [r4, #0]
 80049ea:	2310      	movs	r3, #16
 80049ec:	0011      	movs	r1, r2
 80049ee:	4019      	ands	r1, r3
 80049f0:	421a      	tst	r2, r3
 80049f2:	d106      	bne.n	8004a02 <_scanf_chars+0xb2>
 80049f4:	68e3      	ldr	r3, [r4, #12]
 80049f6:	3301      	adds	r3, #1
 80049f8:	60e3      	str	r3, [r4, #12]
 80049fa:	69a3      	ldr	r3, [r4, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d000      	beq.n	8004a02 <_scanf_chars+0xb2>
 8004a00:	7039      	strb	r1, [r7, #0]
 8004a02:	2000      	movs	r0, #0
 8004a04:	6923      	ldr	r3, [r4, #16]
 8004a06:	199b      	adds	r3, r3, r6
 8004a08:	6123      	str	r3, [r4, #16]
 8004a0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004a0c:	080058a7 	.word	0x080058a7

08004a10 <_scanf_i>:
 8004a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a12:	b08b      	sub	sp, #44	@ 0x2c
 8004a14:	9301      	str	r3, [sp, #4]
 8004a16:	4b78      	ldr	r3, [pc, #480]	@ (8004bf8 <_scanf_i+0x1e8>)
 8004a18:	0016      	movs	r6, r2
 8004a1a:	9004      	str	r0, [sp, #16]
 8004a1c:	aa07      	add	r2, sp, #28
 8004a1e:	cba1      	ldmia	r3!, {r0, r5, r7}
 8004a20:	c2a1      	stmia	r2!, {r0, r5, r7}
 8004a22:	4a76      	ldr	r2, [pc, #472]	@ (8004bfc <_scanf_i+0x1ec>)
 8004a24:	698b      	ldr	r3, [r1, #24]
 8004a26:	000c      	movs	r4, r1
 8004a28:	9205      	str	r2, [sp, #20]
 8004a2a:	2b03      	cmp	r3, #3
 8004a2c:	d101      	bne.n	8004a32 <_scanf_i+0x22>
 8004a2e:	4b74      	ldr	r3, [pc, #464]	@ (8004c00 <_scanf_i+0x1f0>)
 8004a30:	9305      	str	r3, [sp, #20]
 8004a32:	22ae      	movs	r2, #174	@ 0xae
 8004a34:	2000      	movs	r0, #0
 8004a36:	68a3      	ldr	r3, [r4, #8]
 8004a38:	0052      	lsls	r2, r2, #1
 8004a3a:	1e59      	subs	r1, r3, #1
 8004a3c:	9003      	str	r0, [sp, #12]
 8004a3e:	4291      	cmp	r1, r2
 8004a40:	d905      	bls.n	8004a4e <_scanf_i+0x3e>
 8004a42:	3b5e      	subs	r3, #94	@ 0x5e
 8004a44:	3bff      	subs	r3, #255	@ 0xff
 8004a46:	9303      	str	r3, [sp, #12]
 8004a48:	235e      	movs	r3, #94	@ 0x5e
 8004a4a:	33ff      	adds	r3, #255	@ 0xff
 8004a4c:	60a3      	str	r3, [r4, #8]
 8004a4e:	0023      	movs	r3, r4
 8004a50:	331c      	adds	r3, #28
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	23d0      	movs	r3, #208	@ 0xd0
 8004a56:	2700      	movs	r7, #0
 8004a58:	6822      	ldr	r2, [r4, #0]
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	6023      	str	r3, [r4, #0]
 8004a60:	9b00      	ldr	r3, [sp, #0]
 8004a62:	9302      	str	r3, [sp, #8]
 8004a64:	6833      	ldr	r3, [r6, #0]
 8004a66:	a807      	add	r0, sp, #28
 8004a68:	7819      	ldrb	r1, [r3, #0]
 8004a6a:	00bb      	lsls	r3, r7, #2
 8004a6c:	2202      	movs	r2, #2
 8004a6e:	5818      	ldr	r0, [r3, r0]
 8004a70:	f000 faac 	bl	8004fcc <memchr>
 8004a74:	2800      	cmp	r0, #0
 8004a76:	d029      	beq.n	8004acc <_scanf_i+0xbc>
 8004a78:	2f01      	cmp	r7, #1
 8004a7a:	d15e      	bne.n	8004b3a <_scanf_i+0x12a>
 8004a7c:	6863      	ldr	r3, [r4, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d106      	bne.n	8004a90 <_scanf_i+0x80>
 8004a82:	3308      	adds	r3, #8
 8004a84:	6822      	ldr	r2, [r4, #0]
 8004a86:	6063      	str	r3, [r4, #4]
 8004a88:	33f9      	adds	r3, #249	@ 0xf9
 8004a8a:	33ff      	adds	r3, #255	@ 0xff
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	6023      	str	r3, [r4, #0]
 8004a90:	6823      	ldr	r3, [r4, #0]
 8004a92:	4a5c      	ldr	r2, [pc, #368]	@ (8004c04 <_scanf_i+0x1f4>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	6023      	str	r3, [r4, #0]
 8004a98:	68a3      	ldr	r3, [r4, #8]
 8004a9a:	1e5a      	subs	r2, r3, #1
 8004a9c:	60a2      	str	r2, [r4, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d014      	beq.n	8004acc <_scanf_i+0xbc>
 8004aa2:	6833      	ldr	r3, [r6, #0]
 8004aa4:	1c5a      	adds	r2, r3, #1
 8004aa6:	6032      	str	r2, [r6, #0]
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	9a02      	ldr	r2, [sp, #8]
 8004aac:	7013      	strb	r3, [r2, #0]
 8004aae:	6873      	ldr	r3, [r6, #4]
 8004ab0:	1c55      	adds	r5, r2, #1
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	6073      	str	r3, [r6, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	dc07      	bgt.n	8004aca <_scanf_i+0xba>
 8004aba:	23c0      	movs	r3, #192	@ 0xc0
 8004abc:	005b      	lsls	r3, r3, #1
 8004abe:	0031      	movs	r1, r6
 8004ac0:	58e3      	ldr	r3, [r4, r3]
 8004ac2:	9804      	ldr	r0, [sp, #16]
 8004ac4:	4798      	blx	r3
 8004ac6:	2800      	cmp	r0, #0
 8004ac8:	d17e      	bne.n	8004bc8 <_scanf_i+0x1b8>
 8004aca:	9502      	str	r5, [sp, #8]
 8004acc:	3701      	adds	r7, #1
 8004ace:	2f03      	cmp	r7, #3
 8004ad0:	d1c8      	bne.n	8004a64 <_scanf_i+0x54>
 8004ad2:	6863      	ldr	r3, [r4, #4]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <_scanf_i+0xcc>
 8004ad8:	330a      	adds	r3, #10
 8004ada:	6063      	str	r3, [r4, #4]
 8004adc:	2700      	movs	r7, #0
 8004ade:	6863      	ldr	r3, [r4, #4]
 8004ae0:	4949      	ldr	r1, [pc, #292]	@ (8004c08 <_scanf_i+0x1f8>)
 8004ae2:	6960      	ldr	r0, [r4, #20]
 8004ae4:	1ac9      	subs	r1, r1, r3
 8004ae6:	f000 f9b0 	bl	8004e4a <__sccl>
 8004aea:	9d02      	ldr	r5, [sp, #8]
 8004aec:	68a3      	ldr	r3, [r4, #8]
 8004aee:	6820      	ldr	r0, [r4, #0]
 8004af0:	9302      	str	r3, [sp, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d03f      	beq.n	8004b76 <_scanf_i+0x166>
 8004af6:	6831      	ldr	r1, [r6, #0]
 8004af8:	6963      	ldr	r3, [r4, #20]
 8004afa:	780a      	ldrb	r2, [r1, #0]
 8004afc:	5c9b      	ldrb	r3, [r3, r2]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d039      	beq.n	8004b76 <_scanf_i+0x166>
 8004b02:	2a30      	cmp	r2, #48	@ 0x30
 8004b04:	d128      	bne.n	8004b58 <_scanf_i+0x148>
 8004b06:	2380      	movs	r3, #128	@ 0x80
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	4218      	tst	r0, r3
 8004b0c:	d024      	beq.n	8004b58 <_scanf_i+0x148>
 8004b0e:	9b03      	ldr	r3, [sp, #12]
 8004b10:	3701      	adds	r7, #1
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d005      	beq.n	8004b22 <_scanf_i+0x112>
 8004b16:	001a      	movs	r2, r3
 8004b18:	9b02      	ldr	r3, [sp, #8]
 8004b1a:	3a01      	subs	r2, #1
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	9203      	str	r2, [sp, #12]
 8004b20:	60a3      	str	r3, [r4, #8]
 8004b22:	6873      	ldr	r3, [r6, #4]
 8004b24:	3b01      	subs	r3, #1
 8004b26:	6073      	str	r3, [r6, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	dd1c      	ble.n	8004b66 <_scanf_i+0x156>
 8004b2c:	6833      	ldr	r3, [r6, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	6033      	str	r3, [r6, #0]
 8004b32:	68a3      	ldr	r3, [r4, #8]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60a3      	str	r3, [r4, #8]
 8004b38:	e7d8      	b.n	8004aec <_scanf_i+0xdc>
 8004b3a:	2f02      	cmp	r7, #2
 8004b3c:	d1ac      	bne.n	8004a98 <_scanf_i+0x88>
 8004b3e:	23c0      	movs	r3, #192	@ 0xc0
 8004b40:	2180      	movs	r1, #128	@ 0x80
 8004b42:	6822      	ldr	r2, [r4, #0]
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4013      	ands	r3, r2
 8004b48:	0089      	lsls	r1, r1, #2
 8004b4a:	428b      	cmp	r3, r1
 8004b4c:	d1c1      	bne.n	8004ad2 <_scanf_i+0xc2>
 8004b4e:	2310      	movs	r3, #16
 8004b50:	6063      	str	r3, [r4, #4]
 8004b52:	33f0      	adds	r3, #240	@ 0xf0
 8004b54:	4313      	orrs	r3, r2
 8004b56:	e79e      	b.n	8004a96 <_scanf_i+0x86>
 8004b58:	4b2c      	ldr	r3, [pc, #176]	@ (8004c0c <_scanf_i+0x1fc>)
 8004b5a:	4003      	ands	r3, r0
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	780b      	ldrb	r3, [r1, #0]
 8004b60:	702b      	strb	r3, [r5, #0]
 8004b62:	3501      	adds	r5, #1
 8004b64:	e7dd      	b.n	8004b22 <_scanf_i+0x112>
 8004b66:	23c0      	movs	r3, #192	@ 0xc0
 8004b68:	005b      	lsls	r3, r3, #1
 8004b6a:	0031      	movs	r1, r6
 8004b6c:	58e3      	ldr	r3, [r4, r3]
 8004b6e:	9804      	ldr	r0, [sp, #16]
 8004b70:	4798      	blx	r3
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d0dd      	beq.n	8004b32 <_scanf_i+0x122>
 8004b76:	6823      	ldr	r3, [r4, #0]
 8004b78:	05db      	lsls	r3, r3, #23
 8004b7a:	d50e      	bpl.n	8004b9a <_scanf_i+0x18a>
 8004b7c:	9b00      	ldr	r3, [sp, #0]
 8004b7e:	429d      	cmp	r5, r3
 8004b80:	d907      	bls.n	8004b92 <_scanf_i+0x182>
 8004b82:	23be      	movs	r3, #190	@ 0xbe
 8004b84:	3d01      	subs	r5, #1
 8004b86:	005b      	lsls	r3, r3, #1
 8004b88:	0032      	movs	r2, r6
 8004b8a:	7829      	ldrb	r1, [r5, #0]
 8004b8c:	58e3      	ldr	r3, [r4, r3]
 8004b8e:	9804      	ldr	r0, [sp, #16]
 8004b90:	4798      	blx	r3
 8004b92:	9b00      	ldr	r3, [sp, #0]
 8004b94:	2001      	movs	r0, #1
 8004b96:	429d      	cmp	r5, r3
 8004b98:	d029      	beq.n	8004bee <_scanf_i+0x1de>
 8004b9a:	6821      	ldr	r1, [r4, #0]
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	000a      	movs	r2, r1
 8004ba0:	401a      	ands	r2, r3
 8004ba2:	4219      	tst	r1, r3
 8004ba4:	d11c      	bne.n	8004be0 <_scanf_i+0x1d0>
 8004ba6:	702a      	strb	r2, [r5, #0]
 8004ba8:	6863      	ldr	r3, [r4, #4]
 8004baa:	9900      	ldr	r1, [sp, #0]
 8004bac:	9804      	ldr	r0, [sp, #16]
 8004bae:	9e05      	ldr	r6, [sp, #20]
 8004bb0:	47b0      	blx	r6
 8004bb2:	9b01      	ldr	r3, [sp, #4]
 8004bb4:	6822      	ldr	r2, [r4, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	0691      	lsls	r1, r2, #26
 8004bba:	d507      	bpl.n	8004bcc <_scanf_i+0x1bc>
 8004bbc:	9901      	ldr	r1, [sp, #4]
 8004bbe:	1d1a      	adds	r2, r3, #4
 8004bc0:	600a      	str	r2, [r1, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6018      	str	r0, [r3, #0]
 8004bc6:	e008      	b.n	8004bda <_scanf_i+0x1ca>
 8004bc8:	2700      	movs	r7, #0
 8004bca:	e7d4      	b.n	8004b76 <_scanf_i+0x166>
 8004bcc:	1d19      	adds	r1, r3, #4
 8004bce:	07d6      	lsls	r6, r2, #31
 8004bd0:	d50f      	bpl.n	8004bf2 <_scanf_i+0x1e2>
 8004bd2:	9a01      	ldr	r2, [sp, #4]
 8004bd4:	6011      	str	r1, [r2, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	8018      	strh	r0, [r3, #0]
 8004bda:	68e3      	ldr	r3, [r4, #12]
 8004bdc:	3301      	adds	r3, #1
 8004bde:	60e3      	str	r3, [r4, #12]
 8004be0:	2000      	movs	r0, #0
 8004be2:	9b00      	ldr	r3, [sp, #0]
 8004be4:	1aed      	subs	r5, r5, r3
 8004be6:	6923      	ldr	r3, [r4, #16]
 8004be8:	19ed      	adds	r5, r5, r7
 8004bea:	195b      	adds	r3, r3, r5
 8004bec:	6123      	str	r3, [r4, #16]
 8004bee:	b00b      	add	sp, #44	@ 0x2c
 8004bf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bf2:	9a01      	ldr	r2, [sp, #4]
 8004bf4:	6011      	str	r1, [r2, #0]
 8004bf6:	e7e4      	b.n	8004bc2 <_scanf_i+0x1b2>
 8004bf8:	080057d4 	.word	0x080057d4
 8004bfc:	08005275 	.word	0x08005275
 8004c00:	08005169 	.word	0x08005169
 8004c04:	fffffaff 	.word	0xfffffaff
 8004c08:	0800589b 	.word	0x0800589b
 8004c0c:	fffff6ff 	.word	0xfffff6ff

08004c10 <__sflush_r>:
 8004c10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c12:	220c      	movs	r2, #12
 8004c14:	5e8b      	ldrsh	r3, [r1, r2]
 8004c16:	0005      	movs	r5, r0
 8004c18:	000c      	movs	r4, r1
 8004c1a:	071a      	lsls	r2, r3, #28
 8004c1c:	d456      	bmi.n	8004ccc <__sflush_r+0xbc>
 8004c1e:	684a      	ldr	r2, [r1, #4]
 8004c20:	2a00      	cmp	r2, #0
 8004c22:	dc02      	bgt.n	8004c2a <__sflush_r+0x1a>
 8004c24:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8004c26:	2a00      	cmp	r2, #0
 8004c28:	dd4e      	ble.n	8004cc8 <__sflush_r+0xb8>
 8004c2a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004c2c:	2f00      	cmp	r7, #0
 8004c2e:	d04b      	beq.n	8004cc8 <__sflush_r+0xb8>
 8004c30:	2200      	movs	r2, #0
 8004c32:	2080      	movs	r0, #128	@ 0x80
 8004c34:	682e      	ldr	r6, [r5, #0]
 8004c36:	602a      	str	r2, [r5, #0]
 8004c38:	001a      	movs	r2, r3
 8004c3a:	0140      	lsls	r0, r0, #5
 8004c3c:	6a21      	ldr	r1, [r4, #32]
 8004c3e:	4002      	ands	r2, r0
 8004c40:	4203      	tst	r3, r0
 8004c42:	d033      	beq.n	8004cac <__sflush_r+0x9c>
 8004c44:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	075b      	lsls	r3, r3, #29
 8004c4a:	d506      	bpl.n	8004c5a <__sflush_r+0x4a>
 8004c4c:	6863      	ldr	r3, [r4, #4]
 8004c4e:	1ad2      	subs	r2, r2, r3
 8004c50:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d001      	beq.n	8004c5a <__sflush_r+0x4a>
 8004c56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c58:	1ad2      	subs	r2, r2, r3
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	0028      	movs	r0, r5
 8004c5e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8004c60:	6a21      	ldr	r1, [r4, #32]
 8004c62:	47b8      	blx	r7
 8004c64:	89a2      	ldrh	r2, [r4, #12]
 8004c66:	1c43      	adds	r3, r0, #1
 8004c68:	d106      	bne.n	8004c78 <__sflush_r+0x68>
 8004c6a:	6829      	ldr	r1, [r5, #0]
 8004c6c:	291d      	cmp	r1, #29
 8004c6e:	d846      	bhi.n	8004cfe <__sflush_r+0xee>
 8004c70:	4b29      	ldr	r3, [pc, #164]	@ (8004d18 <__sflush_r+0x108>)
 8004c72:	410b      	asrs	r3, r1
 8004c74:	07db      	lsls	r3, r3, #31
 8004c76:	d442      	bmi.n	8004cfe <__sflush_r+0xee>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	6063      	str	r3, [r4, #4]
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	6023      	str	r3, [r4, #0]
 8004c80:	04d2      	lsls	r2, r2, #19
 8004c82:	d505      	bpl.n	8004c90 <__sflush_r+0x80>
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	d102      	bne.n	8004c8e <__sflush_r+0x7e>
 8004c88:	682b      	ldr	r3, [r5, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d100      	bne.n	8004c90 <__sflush_r+0x80>
 8004c8e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c92:	602e      	str	r6, [r5, #0]
 8004c94:	2900      	cmp	r1, #0
 8004c96:	d017      	beq.n	8004cc8 <__sflush_r+0xb8>
 8004c98:	0023      	movs	r3, r4
 8004c9a:	3344      	adds	r3, #68	@ 0x44
 8004c9c:	4299      	cmp	r1, r3
 8004c9e:	d002      	beq.n	8004ca6 <__sflush_r+0x96>
 8004ca0:	0028      	movs	r0, r5
 8004ca2:	f7fe ff7b 	bl	8003b9c <_free_r>
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	6363      	str	r3, [r4, #52]	@ 0x34
 8004caa:	e00d      	b.n	8004cc8 <__sflush_r+0xb8>
 8004cac:	2301      	movs	r3, #1
 8004cae:	0028      	movs	r0, r5
 8004cb0:	47b8      	blx	r7
 8004cb2:	0002      	movs	r2, r0
 8004cb4:	1c43      	adds	r3, r0, #1
 8004cb6:	d1c6      	bne.n	8004c46 <__sflush_r+0x36>
 8004cb8:	682b      	ldr	r3, [r5, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d0c3      	beq.n	8004c46 <__sflush_r+0x36>
 8004cbe:	2b1d      	cmp	r3, #29
 8004cc0:	d001      	beq.n	8004cc6 <__sflush_r+0xb6>
 8004cc2:	2b16      	cmp	r3, #22
 8004cc4:	d11a      	bne.n	8004cfc <__sflush_r+0xec>
 8004cc6:	602e      	str	r6, [r5, #0]
 8004cc8:	2000      	movs	r0, #0
 8004cca:	e01e      	b.n	8004d0a <__sflush_r+0xfa>
 8004ccc:	690e      	ldr	r6, [r1, #16]
 8004cce:	2e00      	cmp	r6, #0
 8004cd0:	d0fa      	beq.n	8004cc8 <__sflush_r+0xb8>
 8004cd2:	680f      	ldr	r7, [r1, #0]
 8004cd4:	600e      	str	r6, [r1, #0]
 8004cd6:	1bba      	subs	r2, r7, r6
 8004cd8:	9201      	str	r2, [sp, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	079b      	lsls	r3, r3, #30
 8004cde:	d100      	bne.n	8004ce2 <__sflush_r+0xd2>
 8004ce0:	694a      	ldr	r2, [r1, #20]
 8004ce2:	60a2      	str	r2, [r4, #8]
 8004ce4:	9b01      	ldr	r3, [sp, #4]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	ddee      	ble.n	8004cc8 <__sflush_r+0xb8>
 8004cea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004cec:	0032      	movs	r2, r6
 8004cee:	001f      	movs	r7, r3
 8004cf0:	0028      	movs	r0, r5
 8004cf2:	9b01      	ldr	r3, [sp, #4]
 8004cf4:	6a21      	ldr	r1, [r4, #32]
 8004cf6:	47b8      	blx	r7
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	dc07      	bgt.n	8004d0c <__sflush_r+0xfc>
 8004cfc:	89a2      	ldrh	r2, [r4, #12]
 8004cfe:	2340      	movs	r3, #64	@ 0x40
 8004d00:	2001      	movs	r0, #1
 8004d02:	4313      	orrs	r3, r2
 8004d04:	b21b      	sxth	r3, r3
 8004d06:	81a3      	strh	r3, [r4, #12]
 8004d08:	4240      	negs	r0, r0
 8004d0a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004d0c:	9b01      	ldr	r3, [sp, #4]
 8004d0e:	1836      	adds	r6, r6, r0
 8004d10:	1a1b      	subs	r3, r3, r0
 8004d12:	9301      	str	r3, [sp, #4]
 8004d14:	e7e6      	b.n	8004ce4 <__sflush_r+0xd4>
 8004d16:	46c0      	nop			@ (mov r8, r8)
 8004d18:	dfbffffe 	.word	0xdfbffffe

08004d1c <_fflush_r>:
 8004d1c:	690b      	ldr	r3, [r1, #16]
 8004d1e:	b570      	push	{r4, r5, r6, lr}
 8004d20:	0005      	movs	r5, r0
 8004d22:	000c      	movs	r4, r1
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d102      	bne.n	8004d2e <_fflush_r+0x12>
 8004d28:	2500      	movs	r5, #0
 8004d2a:	0028      	movs	r0, r5
 8004d2c:	bd70      	pop	{r4, r5, r6, pc}
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	d004      	beq.n	8004d3c <_fflush_r+0x20>
 8004d32:	6a03      	ldr	r3, [r0, #32]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <_fflush_r+0x20>
 8004d38:	f7fe fca8 	bl	800368c <__sinit>
 8004d3c:	220c      	movs	r2, #12
 8004d3e:	5ea3      	ldrsh	r3, [r4, r2]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d0f1      	beq.n	8004d28 <_fflush_r+0xc>
 8004d44:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d46:	07d2      	lsls	r2, r2, #31
 8004d48:	d404      	bmi.n	8004d54 <_fflush_r+0x38>
 8004d4a:	059b      	lsls	r3, r3, #22
 8004d4c:	d402      	bmi.n	8004d54 <_fflush_r+0x38>
 8004d4e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d50:	f7fe ff21 	bl	8003b96 <__retarget_lock_acquire_recursive>
 8004d54:	0028      	movs	r0, r5
 8004d56:	0021      	movs	r1, r4
 8004d58:	f7ff ff5a 	bl	8004c10 <__sflush_r>
 8004d5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d5e:	0005      	movs	r5, r0
 8004d60:	07db      	lsls	r3, r3, #31
 8004d62:	d4e2      	bmi.n	8004d2a <_fflush_r+0xe>
 8004d64:	89a3      	ldrh	r3, [r4, #12]
 8004d66:	059b      	lsls	r3, r3, #22
 8004d68:	d4df      	bmi.n	8004d2a <_fflush_r+0xe>
 8004d6a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d6c:	f7fe ff14 	bl	8003b98 <__retarget_lock_release_recursive>
 8004d70:	e7db      	b.n	8004d2a <_fflush_r+0xe>
	...

08004d74 <__swhatbuf_r>:
 8004d74:	b570      	push	{r4, r5, r6, lr}
 8004d76:	000e      	movs	r6, r1
 8004d78:	001d      	movs	r5, r3
 8004d7a:	230e      	movs	r3, #14
 8004d7c:	5ec9      	ldrsh	r1, [r1, r3]
 8004d7e:	0014      	movs	r4, r2
 8004d80:	b096      	sub	sp, #88	@ 0x58
 8004d82:	2900      	cmp	r1, #0
 8004d84:	da0c      	bge.n	8004da0 <__swhatbuf_r+0x2c>
 8004d86:	89b2      	ldrh	r2, [r6, #12]
 8004d88:	2380      	movs	r3, #128	@ 0x80
 8004d8a:	0011      	movs	r1, r2
 8004d8c:	4019      	ands	r1, r3
 8004d8e:	421a      	tst	r2, r3
 8004d90:	d114      	bne.n	8004dbc <__swhatbuf_r+0x48>
 8004d92:	2380      	movs	r3, #128	@ 0x80
 8004d94:	00db      	lsls	r3, r3, #3
 8004d96:	2000      	movs	r0, #0
 8004d98:	6029      	str	r1, [r5, #0]
 8004d9a:	6023      	str	r3, [r4, #0]
 8004d9c:	b016      	add	sp, #88	@ 0x58
 8004d9e:	bd70      	pop	{r4, r5, r6, pc}
 8004da0:	466a      	mov	r2, sp
 8004da2:	f000 f8dd 	bl	8004f60 <_fstat_r>
 8004da6:	2800      	cmp	r0, #0
 8004da8:	dbed      	blt.n	8004d86 <__swhatbuf_r+0x12>
 8004daa:	23f0      	movs	r3, #240	@ 0xf0
 8004dac:	9901      	ldr	r1, [sp, #4]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	4019      	ands	r1, r3
 8004db2:	4b04      	ldr	r3, [pc, #16]	@ (8004dc4 <__swhatbuf_r+0x50>)
 8004db4:	18c9      	adds	r1, r1, r3
 8004db6:	424b      	negs	r3, r1
 8004db8:	4159      	adcs	r1, r3
 8004dba:	e7ea      	b.n	8004d92 <__swhatbuf_r+0x1e>
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	2340      	movs	r3, #64	@ 0x40
 8004dc0:	e7e9      	b.n	8004d96 <__swhatbuf_r+0x22>
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	ffffe000 	.word	0xffffe000

08004dc8 <__smakebuf_r>:
 8004dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dca:	2602      	movs	r6, #2
 8004dcc:	898b      	ldrh	r3, [r1, #12]
 8004dce:	0005      	movs	r5, r0
 8004dd0:	000c      	movs	r4, r1
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	4233      	tst	r3, r6
 8004dd6:	d007      	beq.n	8004de8 <__smakebuf_r+0x20>
 8004dd8:	0023      	movs	r3, r4
 8004dda:	3347      	adds	r3, #71	@ 0x47
 8004ddc:	6023      	str	r3, [r4, #0]
 8004dde:	6123      	str	r3, [r4, #16]
 8004de0:	2301      	movs	r3, #1
 8004de2:	6163      	str	r3, [r4, #20]
 8004de4:	b005      	add	sp, #20
 8004de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004de8:	ab03      	add	r3, sp, #12
 8004dea:	aa02      	add	r2, sp, #8
 8004dec:	f7ff ffc2 	bl	8004d74 <__swhatbuf_r>
 8004df0:	9f02      	ldr	r7, [sp, #8]
 8004df2:	9001      	str	r0, [sp, #4]
 8004df4:	0039      	movs	r1, r7
 8004df6:	0028      	movs	r0, r5
 8004df8:	f7fe ff3c 	bl	8003c74 <_malloc_r>
 8004dfc:	2800      	cmp	r0, #0
 8004dfe:	d108      	bne.n	8004e12 <__smakebuf_r+0x4a>
 8004e00:	220c      	movs	r2, #12
 8004e02:	5ea3      	ldrsh	r3, [r4, r2]
 8004e04:	059a      	lsls	r2, r3, #22
 8004e06:	d4ed      	bmi.n	8004de4 <__smakebuf_r+0x1c>
 8004e08:	2203      	movs	r2, #3
 8004e0a:	4393      	bics	r3, r2
 8004e0c:	431e      	orrs	r6, r3
 8004e0e:	81a6      	strh	r6, [r4, #12]
 8004e10:	e7e2      	b.n	8004dd8 <__smakebuf_r+0x10>
 8004e12:	2380      	movs	r3, #128	@ 0x80
 8004e14:	89a2      	ldrh	r2, [r4, #12]
 8004e16:	6020      	str	r0, [r4, #0]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	81a3      	strh	r3, [r4, #12]
 8004e1c:	9b03      	ldr	r3, [sp, #12]
 8004e1e:	6120      	str	r0, [r4, #16]
 8004e20:	6167      	str	r7, [r4, #20]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00c      	beq.n	8004e40 <__smakebuf_r+0x78>
 8004e26:	0028      	movs	r0, r5
 8004e28:	230e      	movs	r3, #14
 8004e2a:	5ee1      	ldrsh	r1, [r4, r3]
 8004e2c:	f000 f8aa 	bl	8004f84 <_isatty_r>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d005      	beq.n	8004e40 <__smakebuf_r+0x78>
 8004e34:	2303      	movs	r3, #3
 8004e36:	89a2      	ldrh	r2, [r4, #12]
 8004e38:	439a      	bics	r2, r3
 8004e3a:	3b02      	subs	r3, #2
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	81a3      	strh	r3, [r4, #12]
 8004e40:	89a3      	ldrh	r3, [r4, #12]
 8004e42:	9a01      	ldr	r2, [sp, #4]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	81a3      	strh	r3, [r4, #12]
 8004e48:	e7cc      	b.n	8004de4 <__smakebuf_r+0x1c>

08004e4a <__sccl>:
 8004e4a:	b570      	push	{r4, r5, r6, lr}
 8004e4c:	780b      	ldrb	r3, [r1, #0]
 8004e4e:	0004      	movs	r4, r0
 8004e50:	2b5e      	cmp	r3, #94	@ 0x5e
 8004e52:	d018      	beq.n	8004e86 <__sccl+0x3c>
 8004e54:	2200      	movs	r2, #0
 8004e56:	1c4d      	adds	r5, r1, #1
 8004e58:	0021      	movs	r1, r4
 8004e5a:	1c60      	adds	r0, r4, #1
 8004e5c:	30ff      	adds	r0, #255	@ 0xff
 8004e5e:	700a      	strb	r2, [r1, #0]
 8004e60:	3101      	adds	r1, #1
 8004e62:	4281      	cmp	r1, r0
 8004e64:	d1fb      	bne.n	8004e5e <__sccl+0x14>
 8004e66:	1e68      	subs	r0, r5, #1
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <__sccl+0x3a>
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	404a      	eors	r2, r1
 8004e70:	0028      	movs	r0, r5
 8004e72:	54e2      	strb	r2, [r4, r3]
 8004e74:	7801      	ldrb	r1, [r0, #0]
 8004e76:	1c45      	adds	r5, r0, #1
 8004e78:	292d      	cmp	r1, #45	@ 0x2d
 8004e7a:	d00a      	beq.n	8004e92 <__sccl+0x48>
 8004e7c:	295d      	cmp	r1, #93	@ 0x5d
 8004e7e:	d01b      	beq.n	8004eb8 <__sccl+0x6e>
 8004e80:	2900      	cmp	r1, #0
 8004e82:	d104      	bne.n	8004e8e <__sccl+0x44>
 8004e84:	bd70      	pop	{r4, r5, r6, pc}
 8004e86:	2201      	movs	r2, #1
 8004e88:	784b      	ldrb	r3, [r1, #1]
 8004e8a:	1c8d      	adds	r5, r1, #2
 8004e8c:	e7e4      	b.n	8004e58 <__sccl+0xe>
 8004e8e:	000b      	movs	r3, r1
 8004e90:	e7ee      	b.n	8004e70 <__sccl+0x26>
 8004e92:	7846      	ldrb	r6, [r0, #1]
 8004e94:	2e5d      	cmp	r6, #93	@ 0x5d
 8004e96:	d0fa      	beq.n	8004e8e <__sccl+0x44>
 8004e98:	42b3      	cmp	r3, r6
 8004e9a:	dcf8      	bgt.n	8004e8e <__sccl+0x44>
 8004e9c:	0019      	movs	r1, r3
 8004e9e:	3002      	adds	r0, #2
 8004ea0:	3101      	adds	r1, #1
 8004ea2:	5462      	strb	r2, [r4, r1]
 8004ea4:	428e      	cmp	r6, r1
 8004ea6:	dcfb      	bgt.n	8004ea0 <__sccl+0x56>
 8004ea8:	2100      	movs	r1, #0
 8004eaa:	1c5d      	adds	r5, r3, #1
 8004eac:	42b3      	cmp	r3, r6
 8004eae:	da01      	bge.n	8004eb4 <__sccl+0x6a>
 8004eb0:	1af1      	subs	r1, r6, r3
 8004eb2:	3901      	subs	r1, #1
 8004eb4:	186b      	adds	r3, r5, r1
 8004eb6:	e7dd      	b.n	8004e74 <__sccl+0x2a>
 8004eb8:	0028      	movs	r0, r5
 8004eba:	e7e3      	b.n	8004e84 <__sccl+0x3a>

08004ebc <__submore>:
 8004ebc:	000b      	movs	r3, r1
 8004ebe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ec0:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8004ec2:	3344      	adds	r3, #68	@ 0x44
 8004ec4:	000c      	movs	r4, r1
 8004ec6:	429d      	cmp	r5, r3
 8004ec8:	d11c      	bne.n	8004f04 <__submore+0x48>
 8004eca:	2680      	movs	r6, #128	@ 0x80
 8004ecc:	00f6      	lsls	r6, r6, #3
 8004ece:	0031      	movs	r1, r6
 8004ed0:	f7fe fed0 	bl	8003c74 <_malloc_r>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	d102      	bne.n	8004ede <__submore+0x22>
 8004ed8:	2001      	movs	r0, #1
 8004eda:	4240      	negs	r0, r0
 8004edc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ede:	0023      	movs	r3, r4
 8004ee0:	6360      	str	r0, [r4, #52]	@ 0x34
 8004ee2:	63a6      	str	r6, [r4, #56]	@ 0x38
 8004ee4:	3346      	adds	r3, #70	@ 0x46
 8004ee6:	781a      	ldrb	r2, [r3, #0]
 8004ee8:	4b10      	ldr	r3, [pc, #64]	@ (8004f2c <__submore+0x70>)
 8004eea:	54c2      	strb	r2, [r0, r3]
 8004eec:	0023      	movs	r3, r4
 8004eee:	3345      	adds	r3, #69	@ 0x45
 8004ef0:	781a      	ldrb	r2, [r3, #0]
 8004ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f30 <__submore+0x74>)
 8004ef4:	54c2      	strb	r2, [r0, r3]
 8004ef6:	782a      	ldrb	r2, [r5, #0]
 8004ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8004f34 <__submore+0x78>)
 8004efa:	54c2      	strb	r2, [r0, r3]
 8004efc:	18c0      	adds	r0, r0, r3
 8004efe:	6020      	str	r0, [r4, #0]
 8004f00:	2000      	movs	r0, #0
 8004f02:	e7eb      	b.n	8004edc <__submore+0x20>
 8004f04:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8004f06:	0029      	movs	r1, r5
 8004f08:	0073      	lsls	r3, r6, #1
 8004f0a:	001a      	movs	r2, r3
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	f000 f871 	bl	8004ff4 <_realloc_r>
 8004f12:	1e05      	subs	r5, r0, #0
 8004f14:	d0e0      	beq.n	8004ed8 <__submore+0x1c>
 8004f16:	1987      	adds	r7, r0, r6
 8004f18:	0001      	movs	r1, r0
 8004f1a:	0032      	movs	r2, r6
 8004f1c:	0038      	movs	r0, r7
 8004f1e:	f000 f860 	bl	8004fe2 <memcpy>
 8004f22:	9b01      	ldr	r3, [sp, #4]
 8004f24:	6027      	str	r7, [r4, #0]
 8004f26:	6365      	str	r5, [r4, #52]	@ 0x34
 8004f28:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f2a:	e7e9      	b.n	8004f00 <__submore+0x44>
 8004f2c:	000003ff 	.word	0x000003ff
 8004f30:	000003fe 	.word	0x000003fe
 8004f34:	000003fd 	.word	0x000003fd

08004f38 <memmove>:
 8004f38:	b510      	push	{r4, lr}
 8004f3a:	4288      	cmp	r0, r1
 8004f3c:	d806      	bhi.n	8004f4c <memmove+0x14>
 8004f3e:	2300      	movs	r3, #0
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d008      	beq.n	8004f56 <memmove+0x1e>
 8004f44:	5ccc      	ldrb	r4, [r1, r3]
 8004f46:	54c4      	strb	r4, [r0, r3]
 8004f48:	3301      	adds	r3, #1
 8004f4a:	e7f9      	b.n	8004f40 <memmove+0x8>
 8004f4c:	188b      	adds	r3, r1, r2
 8004f4e:	4298      	cmp	r0, r3
 8004f50:	d2f5      	bcs.n	8004f3e <memmove+0x6>
 8004f52:	3a01      	subs	r2, #1
 8004f54:	d200      	bcs.n	8004f58 <memmove+0x20>
 8004f56:	bd10      	pop	{r4, pc}
 8004f58:	5c8b      	ldrb	r3, [r1, r2]
 8004f5a:	5483      	strb	r3, [r0, r2]
 8004f5c:	e7f9      	b.n	8004f52 <memmove+0x1a>
	...

08004f60 <_fstat_r>:
 8004f60:	2300      	movs	r3, #0
 8004f62:	b570      	push	{r4, r5, r6, lr}
 8004f64:	4d06      	ldr	r5, [pc, #24]	@ (8004f80 <_fstat_r+0x20>)
 8004f66:	0004      	movs	r4, r0
 8004f68:	0008      	movs	r0, r1
 8004f6a:	0011      	movs	r1, r2
 8004f6c:	602b      	str	r3, [r5, #0]
 8004f6e:	f7fb fe08 	bl	8000b82 <_fstat>
 8004f72:	1c43      	adds	r3, r0, #1
 8004f74:	d103      	bne.n	8004f7e <_fstat_r+0x1e>
 8004f76:	682b      	ldr	r3, [r5, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d000      	beq.n	8004f7e <_fstat_r+0x1e>
 8004f7c:	6023      	str	r3, [r4, #0]
 8004f7e:	bd70      	pop	{r4, r5, r6, pc}
 8004f80:	20000284 	.word	0x20000284

08004f84 <_isatty_r>:
 8004f84:	2300      	movs	r3, #0
 8004f86:	b570      	push	{r4, r5, r6, lr}
 8004f88:	4d06      	ldr	r5, [pc, #24]	@ (8004fa4 <_isatty_r+0x20>)
 8004f8a:	0004      	movs	r4, r0
 8004f8c:	0008      	movs	r0, r1
 8004f8e:	602b      	str	r3, [r5, #0]
 8004f90:	f7fb fe05 	bl	8000b9e <_isatty>
 8004f94:	1c43      	adds	r3, r0, #1
 8004f96:	d103      	bne.n	8004fa0 <_isatty_r+0x1c>
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d000      	beq.n	8004fa0 <_isatty_r+0x1c>
 8004f9e:	6023      	str	r3, [r4, #0]
 8004fa0:	bd70      	pop	{r4, r5, r6, pc}
 8004fa2:	46c0      	nop			@ (mov r8, r8)
 8004fa4:	20000284 	.word	0x20000284

08004fa8 <_sbrk_r>:
 8004fa8:	2300      	movs	r3, #0
 8004faa:	b570      	push	{r4, r5, r6, lr}
 8004fac:	4d06      	ldr	r5, [pc, #24]	@ (8004fc8 <_sbrk_r+0x20>)
 8004fae:	0004      	movs	r4, r0
 8004fb0:	0008      	movs	r0, r1
 8004fb2:	602b      	str	r3, [r5, #0]
 8004fb4:	f7fb fe08 	bl	8000bc8 <_sbrk>
 8004fb8:	1c43      	adds	r3, r0, #1
 8004fba:	d103      	bne.n	8004fc4 <_sbrk_r+0x1c>
 8004fbc:	682b      	ldr	r3, [r5, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d000      	beq.n	8004fc4 <_sbrk_r+0x1c>
 8004fc2:	6023      	str	r3, [r4, #0]
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
 8004fc6:	46c0      	nop			@ (mov r8, r8)
 8004fc8:	20000284 	.word	0x20000284

08004fcc <memchr>:
 8004fcc:	b2c9      	uxtb	r1, r1
 8004fce:	1882      	adds	r2, r0, r2
 8004fd0:	4290      	cmp	r0, r2
 8004fd2:	d101      	bne.n	8004fd8 <memchr+0xc>
 8004fd4:	2000      	movs	r0, #0
 8004fd6:	4770      	bx	lr
 8004fd8:	7803      	ldrb	r3, [r0, #0]
 8004fda:	428b      	cmp	r3, r1
 8004fdc:	d0fb      	beq.n	8004fd6 <memchr+0xa>
 8004fde:	3001      	adds	r0, #1
 8004fe0:	e7f6      	b.n	8004fd0 <memchr+0x4>

08004fe2 <memcpy>:
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d100      	bne.n	8004fec <memcpy+0xa>
 8004fea:	bd10      	pop	{r4, pc}
 8004fec:	5ccc      	ldrb	r4, [r1, r3]
 8004fee:	54c4      	strb	r4, [r0, r3]
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	e7f8      	b.n	8004fe6 <memcpy+0x4>

08004ff4 <_realloc_r>:
 8004ff4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ff6:	0006      	movs	r6, r0
 8004ff8:	000c      	movs	r4, r1
 8004ffa:	0015      	movs	r5, r2
 8004ffc:	2900      	cmp	r1, #0
 8004ffe:	d105      	bne.n	800500c <_realloc_r+0x18>
 8005000:	0011      	movs	r1, r2
 8005002:	f7fe fe37 	bl	8003c74 <_malloc_r>
 8005006:	0004      	movs	r4, r0
 8005008:	0020      	movs	r0, r4
 800500a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800500c:	2a00      	cmp	r2, #0
 800500e:	d103      	bne.n	8005018 <_realloc_r+0x24>
 8005010:	f7fe fdc4 	bl	8003b9c <_free_r>
 8005014:	2400      	movs	r4, #0
 8005016:	e7f7      	b.n	8005008 <_realloc_r+0x14>
 8005018:	f000 f930 	bl	800527c <_malloc_usable_size_r>
 800501c:	0007      	movs	r7, r0
 800501e:	4285      	cmp	r5, r0
 8005020:	d802      	bhi.n	8005028 <_realloc_r+0x34>
 8005022:	0843      	lsrs	r3, r0, #1
 8005024:	42ab      	cmp	r3, r5
 8005026:	d3ef      	bcc.n	8005008 <_realloc_r+0x14>
 8005028:	0029      	movs	r1, r5
 800502a:	0030      	movs	r0, r6
 800502c:	f7fe fe22 	bl	8003c74 <_malloc_r>
 8005030:	9001      	str	r0, [sp, #4]
 8005032:	2800      	cmp	r0, #0
 8005034:	d0ee      	beq.n	8005014 <_realloc_r+0x20>
 8005036:	002a      	movs	r2, r5
 8005038:	42bd      	cmp	r5, r7
 800503a:	d900      	bls.n	800503e <_realloc_r+0x4a>
 800503c:	003a      	movs	r2, r7
 800503e:	0021      	movs	r1, r4
 8005040:	9801      	ldr	r0, [sp, #4]
 8005042:	f7ff ffce 	bl	8004fe2 <memcpy>
 8005046:	0021      	movs	r1, r4
 8005048:	0030      	movs	r0, r6
 800504a:	f7fe fda7 	bl	8003b9c <_free_r>
 800504e:	9c01      	ldr	r4, [sp, #4]
 8005050:	e7da      	b.n	8005008 <_realloc_r+0x14>
	...

08005054 <_strtol_l.constprop.0>:
 8005054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005056:	b085      	sub	sp, #20
 8005058:	0017      	movs	r7, r2
 800505a:	001e      	movs	r6, r3
 800505c:	9003      	str	r0, [sp, #12]
 800505e:	9101      	str	r1, [sp, #4]
 8005060:	2b24      	cmp	r3, #36	@ 0x24
 8005062:	d844      	bhi.n	80050ee <_strtol_l.constprop.0+0x9a>
 8005064:	000c      	movs	r4, r1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d041      	beq.n	80050ee <_strtol_l.constprop.0+0x9a>
 800506a:	4b3d      	ldr	r3, [pc, #244]	@ (8005160 <_strtol_l.constprop.0+0x10c>)
 800506c:	2208      	movs	r2, #8
 800506e:	469c      	mov	ip, r3
 8005070:	0023      	movs	r3, r4
 8005072:	4661      	mov	r1, ip
 8005074:	781d      	ldrb	r5, [r3, #0]
 8005076:	3401      	adds	r4, #1
 8005078:	5d48      	ldrb	r0, [r1, r5]
 800507a:	0001      	movs	r1, r0
 800507c:	4011      	ands	r1, r2
 800507e:	4210      	tst	r0, r2
 8005080:	d1f6      	bne.n	8005070 <_strtol_l.constprop.0+0x1c>
 8005082:	2d2d      	cmp	r5, #45	@ 0x2d
 8005084:	d13a      	bne.n	80050fc <_strtol_l.constprop.0+0xa8>
 8005086:	7825      	ldrb	r5, [r4, #0]
 8005088:	1c9c      	adds	r4, r3, #2
 800508a:	2301      	movs	r3, #1
 800508c:	9300      	str	r3, [sp, #0]
 800508e:	2210      	movs	r2, #16
 8005090:	0033      	movs	r3, r6
 8005092:	4393      	bics	r3, r2
 8005094:	d109      	bne.n	80050aa <_strtol_l.constprop.0+0x56>
 8005096:	2d30      	cmp	r5, #48	@ 0x30
 8005098:	d136      	bne.n	8005108 <_strtol_l.constprop.0+0xb4>
 800509a:	2120      	movs	r1, #32
 800509c:	7823      	ldrb	r3, [r4, #0]
 800509e:	438b      	bics	r3, r1
 80050a0:	2b58      	cmp	r3, #88	@ 0x58
 80050a2:	d131      	bne.n	8005108 <_strtol_l.constprop.0+0xb4>
 80050a4:	0016      	movs	r6, r2
 80050a6:	7865      	ldrb	r5, [r4, #1]
 80050a8:	3402      	adds	r4, #2
 80050aa:	4a2e      	ldr	r2, [pc, #184]	@ (8005164 <_strtol_l.constprop.0+0x110>)
 80050ac:	9b00      	ldr	r3, [sp, #0]
 80050ae:	4694      	mov	ip, r2
 80050b0:	4463      	add	r3, ip
 80050b2:	0031      	movs	r1, r6
 80050b4:	0018      	movs	r0, r3
 80050b6:	9302      	str	r3, [sp, #8]
 80050b8:	f7fb f8be 	bl	8000238 <__aeabi_uidivmod>
 80050bc:	2200      	movs	r2, #0
 80050be:	4684      	mov	ip, r0
 80050c0:	0010      	movs	r0, r2
 80050c2:	002b      	movs	r3, r5
 80050c4:	3b30      	subs	r3, #48	@ 0x30
 80050c6:	2b09      	cmp	r3, #9
 80050c8:	d825      	bhi.n	8005116 <_strtol_l.constprop.0+0xc2>
 80050ca:	001d      	movs	r5, r3
 80050cc:	42ae      	cmp	r6, r5
 80050ce:	dd31      	ble.n	8005134 <_strtol_l.constprop.0+0xe0>
 80050d0:	1c53      	adds	r3, r2, #1
 80050d2:	d009      	beq.n	80050e8 <_strtol_l.constprop.0+0x94>
 80050d4:	2201      	movs	r2, #1
 80050d6:	4252      	negs	r2, r2
 80050d8:	4584      	cmp	ip, r0
 80050da:	d305      	bcc.n	80050e8 <_strtol_l.constprop.0+0x94>
 80050dc:	d101      	bne.n	80050e2 <_strtol_l.constprop.0+0x8e>
 80050de:	42a9      	cmp	r1, r5
 80050e0:	db25      	blt.n	800512e <_strtol_l.constprop.0+0xda>
 80050e2:	2201      	movs	r2, #1
 80050e4:	4370      	muls	r0, r6
 80050e6:	1828      	adds	r0, r5, r0
 80050e8:	7825      	ldrb	r5, [r4, #0]
 80050ea:	3401      	adds	r4, #1
 80050ec:	e7e9      	b.n	80050c2 <_strtol_l.constprop.0+0x6e>
 80050ee:	f7fe fd27 	bl	8003b40 <__errno>
 80050f2:	2316      	movs	r3, #22
 80050f4:	6003      	str	r3, [r0, #0]
 80050f6:	2000      	movs	r0, #0
 80050f8:	b005      	add	sp, #20
 80050fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80050fc:	9100      	str	r1, [sp, #0]
 80050fe:	2d2b      	cmp	r5, #43	@ 0x2b
 8005100:	d1c5      	bne.n	800508e <_strtol_l.constprop.0+0x3a>
 8005102:	7825      	ldrb	r5, [r4, #0]
 8005104:	1c9c      	adds	r4, r3, #2
 8005106:	e7c2      	b.n	800508e <_strtol_l.constprop.0+0x3a>
 8005108:	2e00      	cmp	r6, #0
 800510a:	d1ce      	bne.n	80050aa <_strtol_l.constprop.0+0x56>
 800510c:	3608      	adds	r6, #8
 800510e:	2d30      	cmp	r5, #48	@ 0x30
 8005110:	d0cb      	beq.n	80050aa <_strtol_l.constprop.0+0x56>
 8005112:	3602      	adds	r6, #2
 8005114:	e7c9      	b.n	80050aa <_strtol_l.constprop.0+0x56>
 8005116:	002b      	movs	r3, r5
 8005118:	3b41      	subs	r3, #65	@ 0x41
 800511a:	2b19      	cmp	r3, #25
 800511c:	d801      	bhi.n	8005122 <_strtol_l.constprop.0+0xce>
 800511e:	3d37      	subs	r5, #55	@ 0x37
 8005120:	e7d4      	b.n	80050cc <_strtol_l.constprop.0+0x78>
 8005122:	002b      	movs	r3, r5
 8005124:	3b61      	subs	r3, #97	@ 0x61
 8005126:	2b19      	cmp	r3, #25
 8005128:	d804      	bhi.n	8005134 <_strtol_l.constprop.0+0xe0>
 800512a:	3d57      	subs	r5, #87	@ 0x57
 800512c:	e7ce      	b.n	80050cc <_strtol_l.constprop.0+0x78>
 800512e:	2201      	movs	r2, #1
 8005130:	4252      	negs	r2, r2
 8005132:	e7d9      	b.n	80050e8 <_strtol_l.constprop.0+0x94>
 8005134:	1c53      	adds	r3, r2, #1
 8005136:	d108      	bne.n	800514a <_strtol_l.constprop.0+0xf6>
 8005138:	2322      	movs	r3, #34	@ 0x22
 800513a:	9a03      	ldr	r2, [sp, #12]
 800513c:	9802      	ldr	r0, [sp, #8]
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	2f00      	cmp	r7, #0
 8005142:	d0d9      	beq.n	80050f8 <_strtol_l.constprop.0+0xa4>
 8005144:	1e63      	subs	r3, r4, #1
 8005146:	9301      	str	r3, [sp, #4]
 8005148:	e007      	b.n	800515a <_strtol_l.constprop.0+0x106>
 800514a:	9b00      	ldr	r3, [sp, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d000      	beq.n	8005152 <_strtol_l.constprop.0+0xfe>
 8005150:	4240      	negs	r0, r0
 8005152:	2f00      	cmp	r7, #0
 8005154:	d0d0      	beq.n	80050f8 <_strtol_l.constprop.0+0xa4>
 8005156:	2a00      	cmp	r2, #0
 8005158:	d1f4      	bne.n	8005144 <_strtol_l.constprop.0+0xf0>
 800515a:	9b01      	ldr	r3, [sp, #4]
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	e7cb      	b.n	80050f8 <_strtol_l.constprop.0+0xa4>
 8005160:	080058a7 	.word	0x080058a7
 8005164:	7fffffff 	.word	0x7fffffff

08005168 <_strtol_r>:
 8005168:	b510      	push	{r4, lr}
 800516a:	f7ff ff73 	bl	8005054 <_strtol_l.constprop.0>
 800516e:	bd10      	pop	{r4, pc}

08005170 <_strtoul_l.constprop.0>:
 8005170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005172:	001e      	movs	r6, r3
 8005174:	4b3e      	ldr	r3, [pc, #248]	@ (8005270 <_strtoul_l.constprop.0+0x100>)
 8005176:	0017      	movs	r7, r2
 8005178:	000c      	movs	r4, r1
 800517a:	469c      	mov	ip, r3
 800517c:	2208      	movs	r2, #8
 800517e:	b085      	sub	sp, #20
 8005180:	9003      	str	r0, [sp, #12]
 8005182:	9100      	str	r1, [sp, #0]
 8005184:	0023      	movs	r3, r4
 8005186:	4661      	mov	r1, ip
 8005188:	781d      	ldrb	r5, [r3, #0]
 800518a:	3401      	adds	r4, #1
 800518c:	5d48      	ldrb	r0, [r1, r5]
 800518e:	0001      	movs	r1, r0
 8005190:	4011      	ands	r1, r2
 8005192:	4210      	tst	r0, r2
 8005194:	d1f6      	bne.n	8005184 <_strtoul_l.constprop.0+0x14>
 8005196:	2d2d      	cmp	r5, #45	@ 0x2d
 8005198:	d137      	bne.n	800520a <_strtoul_l.constprop.0+0x9a>
 800519a:	7825      	ldrb	r5, [r4, #0]
 800519c:	1c9c      	adds	r4, r3, #2
 800519e:	2301      	movs	r3, #1
 80051a0:	9302      	str	r3, [sp, #8]
 80051a2:	2210      	movs	r2, #16
 80051a4:	0033      	movs	r3, r6
 80051a6:	4393      	bics	r3, r2
 80051a8:	d109      	bne.n	80051be <_strtoul_l.constprop.0+0x4e>
 80051aa:	2d30      	cmp	r5, #48	@ 0x30
 80051ac:	d133      	bne.n	8005216 <_strtoul_l.constprop.0+0xa6>
 80051ae:	2120      	movs	r1, #32
 80051b0:	7823      	ldrb	r3, [r4, #0]
 80051b2:	438b      	bics	r3, r1
 80051b4:	2b58      	cmp	r3, #88	@ 0x58
 80051b6:	d12e      	bne.n	8005216 <_strtoul_l.constprop.0+0xa6>
 80051b8:	0016      	movs	r6, r2
 80051ba:	7865      	ldrb	r5, [r4, #1]
 80051bc:	3402      	adds	r4, #2
 80051be:	2001      	movs	r0, #1
 80051c0:	0031      	movs	r1, r6
 80051c2:	4240      	negs	r0, r0
 80051c4:	f7fa ffb2 	bl	800012c <__udivsi3>
 80051c8:	9001      	str	r0, [sp, #4]
 80051ca:	2001      	movs	r0, #1
 80051cc:	0031      	movs	r1, r6
 80051ce:	4240      	negs	r0, r0
 80051d0:	f7fb f832 	bl	8000238 <__aeabi_uidivmod>
 80051d4:	2300      	movs	r3, #0
 80051d6:	2201      	movs	r2, #1
 80051d8:	0018      	movs	r0, r3
 80051da:	4694      	mov	ip, r2
 80051dc:	002a      	movs	r2, r5
 80051de:	3a30      	subs	r2, #48	@ 0x30
 80051e0:	2a09      	cmp	r2, #9
 80051e2:	d81f      	bhi.n	8005224 <_strtoul_l.constprop.0+0xb4>
 80051e4:	0015      	movs	r5, r2
 80051e6:	42ae      	cmp	r6, r5
 80051e8:	dd2b      	ble.n	8005242 <_strtoul_l.constprop.0+0xd2>
 80051ea:	1c5a      	adds	r2, r3, #1
 80051ec:	d00a      	beq.n	8005204 <_strtoul_l.constprop.0+0x94>
 80051ee:	2301      	movs	r3, #1
 80051f0:	9a01      	ldr	r2, [sp, #4]
 80051f2:	425b      	negs	r3, r3
 80051f4:	4282      	cmp	r2, r0
 80051f6:	d305      	bcc.n	8005204 <_strtoul_l.constprop.0+0x94>
 80051f8:	d101      	bne.n	80051fe <_strtoul_l.constprop.0+0x8e>
 80051fa:	42a9      	cmp	r1, r5
 80051fc:	db1e      	blt.n	800523c <_strtoul_l.constprop.0+0xcc>
 80051fe:	4663      	mov	r3, ip
 8005200:	4370      	muls	r0, r6
 8005202:	1828      	adds	r0, r5, r0
 8005204:	7825      	ldrb	r5, [r4, #0]
 8005206:	3401      	adds	r4, #1
 8005208:	e7e8      	b.n	80051dc <_strtoul_l.constprop.0+0x6c>
 800520a:	9102      	str	r1, [sp, #8]
 800520c:	2d2b      	cmp	r5, #43	@ 0x2b
 800520e:	d1c8      	bne.n	80051a2 <_strtoul_l.constprop.0+0x32>
 8005210:	7825      	ldrb	r5, [r4, #0]
 8005212:	1c9c      	adds	r4, r3, #2
 8005214:	e7c5      	b.n	80051a2 <_strtoul_l.constprop.0+0x32>
 8005216:	2e00      	cmp	r6, #0
 8005218:	d1d1      	bne.n	80051be <_strtoul_l.constprop.0+0x4e>
 800521a:	3608      	adds	r6, #8
 800521c:	2d30      	cmp	r5, #48	@ 0x30
 800521e:	d0ce      	beq.n	80051be <_strtoul_l.constprop.0+0x4e>
 8005220:	3602      	adds	r6, #2
 8005222:	e7cc      	b.n	80051be <_strtoul_l.constprop.0+0x4e>
 8005224:	002a      	movs	r2, r5
 8005226:	3a41      	subs	r2, #65	@ 0x41
 8005228:	2a19      	cmp	r2, #25
 800522a:	d801      	bhi.n	8005230 <_strtoul_l.constprop.0+0xc0>
 800522c:	3d37      	subs	r5, #55	@ 0x37
 800522e:	e7da      	b.n	80051e6 <_strtoul_l.constprop.0+0x76>
 8005230:	002a      	movs	r2, r5
 8005232:	3a61      	subs	r2, #97	@ 0x61
 8005234:	2a19      	cmp	r2, #25
 8005236:	d804      	bhi.n	8005242 <_strtoul_l.constprop.0+0xd2>
 8005238:	3d57      	subs	r5, #87	@ 0x57
 800523a:	e7d4      	b.n	80051e6 <_strtoul_l.constprop.0+0x76>
 800523c:	2301      	movs	r3, #1
 800523e:	425b      	negs	r3, r3
 8005240:	e7e0      	b.n	8005204 <_strtoul_l.constprop.0+0x94>
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	d107      	bne.n	8005256 <_strtoul_l.constprop.0+0xe6>
 8005246:	2222      	movs	r2, #34	@ 0x22
 8005248:	9903      	ldr	r1, [sp, #12]
 800524a:	0018      	movs	r0, r3
 800524c:	600a      	str	r2, [r1, #0]
 800524e:	2f00      	cmp	r7, #0
 8005250:	d109      	bne.n	8005266 <_strtoul_l.constprop.0+0xf6>
 8005252:	b005      	add	sp, #20
 8005254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005256:	9a02      	ldr	r2, [sp, #8]
 8005258:	2a00      	cmp	r2, #0
 800525a:	d000      	beq.n	800525e <_strtoul_l.constprop.0+0xee>
 800525c:	4240      	negs	r0, r0
 800525e:	2f00      	cmp	r7, #0
 8005260:	d0f7      	beq.n	8005252 <_strtoul_l.constprop.0+0xe2>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d001      	beq.n	800526a <_strtoul_l.constprop.0+0xfa>
 8005266:	1e63      	subs	r3, r4, #1
 8005268:	9300      	str	r3, [sp, #0]
 800526a:	9b00      	ldr	r3, [sp, #0]
 800526c:	603b      	str	r3, [r7, #0]
 800526e:	e7f0      	b.n	8005252 <_strtoul_l.constprop.0+0xe2>
 8005270:	080058a7 	.word	0x080058a7

08005274 <_strtoul_r>:
 8005274:	b510      	push	{r4, lr}
 8005276:	f7ff ff7b 	bl	8005170 <_strtoul_l.constprop.0>
 800527a:	bd10      	pop	{r4, pc}

0800527c <_malloc_usable_size_r>:
 800527c:	1f0b      	subs	r3, r1, #4
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	1f18      	subs	r0, r3, #4
 8005282:	2b00      	cmp	r3, #0
 8005284:	da01      	bge.n	800528a <_malloc_usable_size_r+0xe>
 8005286:	580b      	ldr	r3, [r1, r0]
 8005288:	18c0      	adds	r0, r0, r3
 800528a:	4770      	bx	lr

0800528c <_init>:
 800528c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800528e:	46c0      	nop			@ (mov r8, r8)
 8005290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005292:	bc08      	pop	{r3}
 8005294:	469e      	mov	lr, r3
 8005296:	4770      	bx	lr

08005298 <_fini>:
 8005298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800529a:	46c0      	nop			@ (mov r8, r8)
 800529c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800529e:	bc08      	pop	{r3}
 80052a0:	469e      	mov	lr, r3
 80052a2:	4770      	bx	lr
