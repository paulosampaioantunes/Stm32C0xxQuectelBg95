
QuectelBg95Stm32C0Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d8c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08003e4c  08003e4c  00004e4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ec4  08003ec4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003ec4  08003ec4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ec4  08003ec4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ec4  08003ec4  00004ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ec8  08003ec8  00004ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003ecc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e0  2000000c  08003ed8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08003ed8  000051ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce3e  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f57  00000000  00000000  00011e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00013dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078f  00000000  00000000  00014790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000129eb  00000000  00000000  00014f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca1d  00000000  00000000  0002790a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073d2b  00000000  00000000  00034327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a8052  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021c0  00000000  00000000  000a8098  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000aa258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003e34 	.word	0x08003e34

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003e34 	.word	0x08003e34

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fafe 	bl	8000826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f83d 	bl	80002a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f959 	bl	80004e4 <MX_GPIO_Init>
  MX_RTC_Init();
 8000232:	f000 f87f 	bl	8000334 <MX_RTC_Init>
  MX_USART2_UART_Init();
 8000236:	f000 f921 	bl	800047c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //configurando rtc apos reset
  	__HAL_RCC_PWR_CLK_ENABLE();
 800023a:	4b17      	ldr	r3, [pc, #92]	@ (8000298 <main+0x78>)
 800023c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800023e:	4b16      	ldr	r3, [pc, #88]	@ (8000298 <main+0x78>)
 8000240:	2180      	movs	r1, #128	@ 0x80
 8000242:	0549      	lsls	r1, r1, #21
 8000244:	430a      	orrs	r2, r1
 8000246:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000248:	4b13      	ldr	r3, [pc, #76]	@ (8000298 <main+0x78>)
 800024a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800024c:	2380      	movs	r3, #128	@ 0x80
 800024e:	055b      	lsls	r3, r3, #21
 8000250:	4013      	ands	r3, r2
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
  	__HAL_RCC_RTC_ENABLE();
 8000256:	4b10      	ldr	r3, [pc, #64]	@ (8000298 <main+0x78>)
 8000258:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800025a:	4b0f      	ldr	r3, [pc, #60]	@ (8000298 <main+0x78>)
 800025c:	2180      	movs	r1, #128	@ 0x80
 800025e:	0209      	lsls	r1, r1, #8
 8000260:	430a      	orrs	r2, r1
 8000262:	65da      	str	r2, [r3, #92]	@ 0x5c
  	InitFlags();
 8000264:	f000 f98c 	bl	8000580 <InitFlags>

    /* USER CODE BEGIN 3 */



	        while (!responseReceived) {
 8000268:	e00b      	b.n	8000282 <main+0x62>
	        	sendATCommand();
 800026a:	f000 f96b 	bl	8000544 <sendATCommand>
	        	HAL_Delay(100);
 800026e:	2064      	movs	r0, #100	@ 0x64
 8000270:	f000 fb56 	bl	8000920 <HAL_Delay>
	        	HAL_UART_Receive_IT(&huart2, responseBuffer,
 8000274:	2380      	movs	r3, #128	@ 0x80
 8000276:	005a      	lsls	r2, r3, #1
 8000278:	4908      	ldr	r1, [pc, #32]	@ (800029c <main+0x7c>)
 800027a:	4b09      	ldr	r3, [pc, #36]	@ (80002a0 <main+0x80>)
 800027c:	0018      	movs	r0, r3
 800027e:	f001 ffc9 	bl	8002214 <HAL_UART_Receive_IT>
	        while (!responseReceived) {
 8000282:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <main+0x84>)
 8000284:	781b      	ldrb	r3, [r3, #0]
 8000286:	b2db      	uxtb	r3, r3
 8000288:	2b00      	cmp	r3, #0
 800028a:	d0ee      	beq.n	800026a <main+0x4a>
	        		    	RESPONSE_BUFFER_SIZE);
	        }
	        break;
 800028c:	46c0      	nop			@ (mov r8, r8)
 800028e:	2300      	movs	r3, #0

		EnterSleepMode();
		*/
  }
  /* USER CODE END 3 */
}
 8000290:	0018      	movs	r0, r3
 8000292:	46bd      	mov	sp, r7
 8000294:	b002      	add	sp, #8
 8000296:	bd80      	pop	{r7, pc}
 8000298:	40021000 	.word	0x40021000
 800029c:	200000e4 	.word	0x200000e4
 80002a0:	20000050 	.word	0x20000050
 80002a4:	200001e4 	.word	0x200001e4

080002a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a8:	b590      	push	{r4, r7, lr}
 80002aa:	b08d      	sub	sp, #52	@ 0x34
 80002ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ae:	2414      	movs	r4, #20
 80002b0:	193b      	adds	r3, r7, r4
 80002b2:	0018      	movs	r0, r3
 80002b4:	231c      	movs	r3, #28
 80002b6:	001a      	movs	r2, r3
 80002b8:	2100      	movs	r1, #0
 80002ba:	f003 fd8f 	bl	8003ddc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	003b      	movs	r3, r7
 80002c0:	0018      	movs	r0, r3
 80002c2:	2314      	movs	r3, #20
 80002c4:	001a      	movs	r2, r3
 80002c6:	2100      	movs	r1, #0
 80002c8:	f003 fd88 	bl	8003ddc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	220a      	movs	r2, #10
 80002d0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002d2:	193b      	adds	r3, r7, r4
 80002d4:	2280      	movs	r2, #128	@ 0x80
 80002d6:	0052      	lsls	r2, r2, #1
 80002d8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002da:	193b      	adds	r3, r7, r4
 80002dc:	2200      	movs	r2, #0
 80002de:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002e0:	193b      	adds	r3, r7, r4
 80002e2:	2240      	movs	r2, #64	@ 0x40
 80002e4:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80002e6:	193b      	adds	r3, r7, r4
 80002e8:	2201      	movs	r2, #1
 80002ea:	619a      	str	r2, [r3, #24]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	0018      	movs	r0, r3
 80002f0:	f000 fe72 	bl	8000fd8 <HAL_RCC_OscConfig>
 80002f4:	1e03      	subs	r3, r0, #0
 80002f6:	d001      	beq.n	80002fc <SystemClock_Config+0x54>
  {
    Error_Handler();
 80002f8:	f000 f95e 	bl	80005b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fc:	003b      	movs	r3, r7
 80002fe:	2207      	movs	r2, #7
 8000300:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000302:	003b      	movs	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000308:	003b      	movs	r3, r7
 800030a:	2200      	movs	r2, #0
 800030c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800030e:	003b      	movs	r3, r7
 8000310:	2200      	movs	r2, #0
 8000312:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000314:	003b      	movs	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031a:	003b      	movs	r3, r7
 800031c:	2101      	movs	r1, #1
 800031e:	0018      	movs	r0, r3
 8000320:	f001 f83e 	bl	80013a0 <HAL_RCC_ClockConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000328:	f000 f946 	bl	80005b8 <Error_Handler>
  }
}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b00d      	add	sp, #52	@ 0x34
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b090      	sub	sp, #64	@ 0x40
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800033a:	232c      	movs	r3, #44	@ 0x2c
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	0018      	movs	r0, r3
 8000340:	2314      	movs	r3, #20
 8000342:	001a      	movs	r2, r3
 8000344:	2100      	movs	r1, #0
 8000346:	f003 fd49 	bl	8003ddc <memset>
  RTC_DateTypeDef sDate = {0};
 800034a:	2328      	movs	r3, #40	@ 0x28
 800034c:	18fb      	adds	r3, r7, r3
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
  RTC_AlarmTypeDef sAlarm = {0};
 8000352:	003b      	movs	r3, r7
 8000354:	0018      	movs	r0, r3
 8000356:	2328      	movs	r3, #40	@ 0x28
 8000358:	001a      	movs	r2, r3
 800035a:	2100      	movs	r1, #0
 800035c:	f003 fd3e 	bl	8003ddc <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000360:	4b44      	ldr	r3, [pc, #272]	@ (8000474 <MX_RTC_Init+0x140>)
 8000362:	4a45      	ldr	r2, [pc, #276]	@ (8000478 <MX_RTC_Init+0x144>)
 8000364:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000366:	4b43      	ldr	r3, [pc, #268]	@ (8000474 <MX_RTC_Init+0x140>)
 8000368:	2200      	movs	r2, #0
 800036a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800036c:	4b41      	ldr	r3, [pc, #260]	@ (8000474 <MX_RTC_Init+0x140>)
 800036e:	227f      	movs	r2, #127	@ 0x7f
 8000370:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000372:	4b40      	ldr	r3, [pc, #256]	@ (8000474 <MX_RTC_Init+0x140>)
 8000374:	22ff      	movs	r2, #255	@ 0xff
 8000376:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000378:	4b3e      	ldr	r3, [pc, #248]	@ (8000474 <MX_RTC_Init+0x140>)
 800037a:	2200      	movs	r2, #0
 800037c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800037e:	4b3d      	ldr	r3, [pc, #244]	@ (8000474 <MX_RTC_Init+0x140>)
 8000380:	2200      	movs	r2, #0
 8000382:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000384:	4b3b      	ldr	r3, [pc, #236]	@ (8000474 <MX_RTC_Init+0x140>)
 8000386:	2200      	movs	r2, #0
 8000388:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800038a:	4b3a      	ldr	r3, [pc, #232]	@ (8000474 <MX_RTC_Init+0x140>)
 800038c:	2280      	movs	r2, #128	@ 0x80
 800038e:	05d2      	lsls	r2, r2, #23
 8000390:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000392:	4b38      	ldr	r3, [pc, #224]	@ (8000474 <MX_RTC_Init+0x140>)
 8000394:	2200      	movs	r2, #0
 8000396:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000398:	4b36      	ldr	r3, [pc, #216]	@ (8000474 <MX_RTC_Init+0x140>)
 800039a:	0018      	movs	r0, r3
 800039c:	f001 fa7c 	bl	8001898 <HAL_RTC_Init>
 80003a0:	1e03      	subs	r3, r0, #0
 80003a2:	d001      	beq.n	80003a8 <MX_RTC_Init+0x74>
  {
    Error_Handler();
 80003a4:	f000 f908 	bl	80005b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80003a8:	212c      	movs	r1, #44	@ 0x2c
 80003aa:	187b      	adds	r3, r7, r1
 80003ac:	2200      	movs	r2, #0
 80003ae:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80003b0:	187b      	adds	r3, r7, r1
 80003b2:	2200      	movs	r2, #0
 80003b4:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80003b6:	187b      	adds	r3, r7, r1
 80003b8:	2200      	movs	r2, #0
 80003ba:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80003bc:	187b      	adds	r3, r7, r1
 80003be:	2200      	movs	r2, #0
 80003c0:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80003c2:	187b      	adds	r3, r7, r1
 80003c4:	2200      	movs	r2, #0
 80003c6:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80003c8:	187b      	adds	r3, r7, r1
 80003ca:	2200      	movs	r2, #0
 80003cc:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80003ce:	1879      	adds	r1, r7, r1
 80003d0:	4b28      	ldr	r3, [pc, #160]	@ (8000474 <MX_RTC_Init+0x140>)
 80003d2:	2201      	movs	r2, #1
 80003d4:	0018      	movs	r0, r3
 80003d6:	f001 faed 	bl	80019b4 <HAL_RTC_SetTime>
 80003da:	1e03      	subs	r3, r0, #0
 80003dc:	d001      	beq.n	80003e2 <MX_RTC_Init+0xae>
  {
    Error_Handler();
 80003de:	f000 f8eb 	bl	80005b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80003e2:	2128      	movs	r1, #40	@ 0x28
 80003e4:	187b      	adds	r3, r7, r1
 80003e6:	2201      	movs	r2, #1
 80003e8:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80003ea:	187b      	adds	r3, r7, r1
 80003ec:	2201      	movs	r2, #1
 80003ee:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 80003f0:	187b      	adds	r3, r7, r1
 80003f2:	2201      	movs	r2, #1
 80003f4:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 80003f6:	187b      	adds	r3, r7, r1
 80003f8:	2200      	movs	r2, #0
 80003fa:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80003fc:	1879      	adds	r1, r7, r1
 80003fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000474 <MX_RTC_Init+0x140>)
 8000400:	2201      	movs	r2, #1
 8000402:	0018      	movs	r0, r3
 8000404:	f001 fb7e 	bl	8001b04 <HAL_RTC_SetDate>
 8000408:	1e03      	subs	r3, r0, #0
 800040a:	d001      	beq.n	8000410 <MX_RTC_Init+0xdc>
  {
    Error_Handler();
 800040c:	f000 f8d4 	bl	80005b8 <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000410:	003b      	movs	r3, r7
 8000412:	2200      	movs	r2, #0
 8000414:	701a      	strb	r2, [r3, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8000416:	003b      	movs	r3, r7
 8000418:	2200      	movs	r2, #0
 800041a:	705a      	strb	r2, [r3, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800041c:	003b      	movs	r3, r7
 800041e:	2200      	movs	r2, #0
 8000420:	709a      	strb	r2, [r3, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8000422:	003b      	movs	r3, r7
 8000424:	2200      	movs	r2, #0
 8000426:	605a      	str	r2, [r3, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000428:	003b      	movs	r3, r7
 800042a:	2200      	movs	r2, #0
 800042c:	60da      	str	r2, [r3, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800042e:	003b      	movs	r3, r7
 8000430:	2200      	movs	r2, #0
 8000432:	611a      	str	r2, [r3, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8000434:	003b      	movs	r3, r7
 8000436:	2200      	movs	r2, #0
 8000438:	615a      	str	r2, [r3, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800043a:	003b      	movs	r3, r7
 800043c:	2200      	movs	r2, #0
 800043e:	619a      	str	r2, [r3, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8000440:	003b      	movs	r3, r7
 8000442:	2200      	movs	r2, #0
 8000444:	61da      	str	r2, [r3, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8000446:	003b      	movs	r3, r7
 8000448:	2220      	movs	r2, #32
 800044a:	2101      	movs	r1, #1
 800044c:	5499      	strb	r1, [r3, r2]
  sAlarm.Alarm = RTC_ALARM_A;
 800044e:	003b      	movs	r3, r7
 8000450:	2280      	movs	r2, #128	@ 0x80
 8000452:	0052      	lsls	r2, r2, #1
 8000454:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8000456:	0039      	movs	r1, r7
 8000458:	4b06      	ldr	r3, [pc, #24]	@ (8000474 <MX_RTC_Init+0x140>)
 800045a:	2201      	movs	r2, #1
 800045c:	0018      	movs	r0, r3
 800045e:	f001 fbe3 	bl	8001c28 <HAL_RTC_SetAlarm_IT>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <MX_RTC_Init+0x136>
  {
    Error_Handler();
 8000466:	f000 f8a7 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	46bd      	mov	sp, r7
 800046e:	b010      	add	sp, #64	@ 0x40
 8000470:	bd80      	pop	{r7, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)
 8000474:	20000028 	.word	0x20000028
 8000478:	40002800 	.word	0x40002800

0800047c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000480:	4b16      	ldr	r3, [pc, #88]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 8000482:	4a17      	ldr	r2, [pc, #92]	@ (80004e0 <MX_USART2_UART_Init+0x64>)
 8000484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000486:	4b15      	ldr	r3, [pc, #84]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 8000488:	22e1      	movs	r2, #225	@ 0xe1
 800048a:	0252      	lsls	r2, r2, #9
 800048c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800048e:	4b13      	ldr	r3, [pc, #76]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000494:	4b11      	ldr	r3, [pc, #68]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800049a:	4b10      	ldr	r3, [pc, #64]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 800049c:	2200      	movs	r2, #0
 800049e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004a0:	4b0e      	ldr	r3, [pc, #56]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 80004a2:	220c      	movs	r2, #12
 80004a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004ac:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004b2:	4b0a      	ldr	r3, [pc, #40]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80004b8:	4b08      	ldr	r3, [pc, #32]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004be:	4b07      	ldr	r3, [pc, #28]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004c4:	4b05      	ldr	r3, [pc, #20]	@ (80004dc <MX_USART2_UART_Init+0x60>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f001 fdaa 	bl	8002020 <HAL_UART_Init>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80004d0:	f000 f872 	bl	80005b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004d4:	46c0      	nop			@ (mov r8, r8)
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	46c0      	nop			@ (mov r8, r8)
 80004dc:	20000050 	.word	0x20000050
 80004e0:	40004400 	.word	0x40004400

080004e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000524 <MX_GPIO_Init+0x40>)
 80004ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80004ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000524 <MX_GPIO_Init+0x40>)
 80004f0:	2104      	movs	r1, #4
 80004f2:	430a      	orrs	r2, r1
 80004f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80004f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000524 <MX_GPIO_Init+0x40>)
 80004f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80004fa:	2204      	movs	r2, #4
 80004fc:	4013      	ands	r3, r2
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b08      	ldr	r3, [pc, #32]	@ (8000524 <MX_GPIO_Init+0x40>)
 8000504:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000506:	4b07      	ldr	r3, [pc, #28]	@ (8000524 <MX_GPIO_Init+0x40>)
 8000508:	2101      	movs	r1, #1
 800050a:	430a      	orrs	r2, r1
 800050c:	635a      	str	r2, [r3, #52]	@ 0x34
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <MX_GPIO_Init+0x40>)
 8000510:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000512:	2201      	movs	r2, #1
 8000514:	4013      	ands	r3, r2
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	b002      	add	sp, #8
 8000520:	bd80      	pop	{r7, pc}
 8000522:	46c0      	nop			@ (mov r8, r8)
 8000524:	40021000 	.word	0x40021000

08000528 <HAL_UART_RxCpltCallback>:
    sendCommandAndWait("AT+QMTCFG=\"keepalive\",0,3600\r\n");

    // Configurar o "Will Message" do MQTT
    sendCommandAndWait("AT+QMTCFG=\"will\",0,1,0,1,\"/test/will\",\"Client disconnected unexpectedly\"\r\n");
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
	// Callback chamado quando a recepção completa é detectada
	responseReceived = 1; // Marca que a resposta foi recebida
 8000530:	4b03      	ldr	r3, [pc, #12]	@ (8000540 <HAL_UART_RxCpltCallback+0x18>)
 8000532:	2201      	movs	r2, #1
 8000534:	701a      	strb	r2, [r3, #0]
}
 8000536:	46c0      	nop			@ (mov r8, r8)
 8000538:	46bd      	mov	sp, r7
 800053a:	b002      	add	sp, #8
 800053c:	bd80      	pop	{r7, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	200001e4 	.word	0x200001e4

08000544 <sendATCommand>:

void sendATCommand() {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	// Limpar o buffer de resposta
	memset(responseBuffer, 0, sizeof(responseBuffer));
 800054a:	2380      	movs	r3, #128	@ 0x80
 800054c:	005a      	lsls	r2, r3, #1
 800054e:	4b09      	ldr	r3, [pc, #36]	@ (8000574 <sendATCommand+0x30>)
 8000550:	2100      	movs	r1, #0
 8000552:	0018      	movs	r0, r3
 8000554:	f003 fc42 	bl	8003ddc <memset>



	// Comando AT a ser enviado
	uint8_t command[] = { 'A', 'T', '\r', '\n' };
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	4a07      	ldr	r2, [pc, #28]	@ (8000578 <sendATCommand+0x34>)
 800055c:	601a      	str	r2, [r3, #0]

	// Enviar o comando AT
	HAL_UART_Transmit(&huart2, command, sizeof(command), HAL_MAX_DELAY);
 800055e:	2301      	movs	r3, #1
 8000560:	425b      	negs	r3, r3
 8000562:	1d39      	adds	r1, r7, #4
 8000564:	4805      	ldr	r0, [pc, #20]	@ (800057c <sendATCommand+0x38>)
 8000566:	2204      	movs	r2, #4
 8000568:	f001 fdb0 	bl	80020cc <HAL_UART_Transmit>
}
 800056c:	46c0      	nop			@ (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}
 8000574:	200000e4 	.word	0x200000e4
 8000578:	0a0d5441 	.word	0x0a0d5441
 800057c:	20000050 	.word	0x20000050

08000580 <InitFlags>:
	}


}

void InitFlags() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	if (__HAL_PWR_GET_FLAG(PWR_FLAG_SB) != RESET) {
 8000584:	4b0a      	ldr	r3, [pc, #40]	@ (80005b0 <InitFlags+0x30>)
 8000586:	691a      	ldr	r2, [r3, #16]
 8000588:	2380      	movs	r3, #128	@ 0x80
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	401a      	ands	r2, r3
 800058e:	2380      	movs	r3, #128	@ 0x80
 8000590:	005b      	lsls	r3, r3, #1
 8000592:	429a      	cmp	r2, r3
 8000594:	d106      	bne.n	80005a4 <InitFlags+0x24>
		__HAL_PWR_CLEAR_FLAG(PWR_FLAG_SB);  // clear the flag
 8000596:	4b06      	ldr	r3, [pc, #24]	@ (80005b0 <InitFlags+0x30>)
 8000598:	4a06      	ldr	r2, [pc, #24]	@ (80005b4 <InitFlags+0x34>)
 800059a:	619a      	str	r2, [r3, #24]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN1);  // disable PA0
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fd07 	bl	8000fb0 <HAL_PWR_DisableWakeUpPin>
	} else {
		MX_RTC_Init();
	}

}
 80005a2:	e001      	b.n	80005a8 <InitFlags+0x28>
		MX_RTC_Init();
 80005a4:	f7ff fec6 	bl	8000334 <MX_RTC_Init>
}
 80005a8:	46c0      	nop			@ (mov r8, r8)
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			@ (mov r8, r8)
 80005b0:	40007000 	.word	0x40007000
 80005b4:	00010100 	.word	0x00010100

080005b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005bc:	b672      	cpsid	i
}
 80005be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005c0:	46c0      	nop			@ (mov r8, r8)
 80005c2:	e7fd      	b.n	80005c0 <Error_Handler+0x8>

080005c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005ca:	4b13      	ldr	r3, [pc, #76]	@ (8000618 <HAL_MspInit+0x54>)
 80005cc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005ce:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <HAL_MspInit+0x54>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80005d6:	4b10      	ldr	r3, [pc, #64]	@ (8000618 <HAL_MspInit+0x54>)
 80005d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	607b      	str	r3, [r7, #4]
 80005e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000618 <HAL_MspInit+0x54>)
 80005e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000618 <HAL_MspInit+0x54>)
 80005e8:	2180      	movs	r1, #128	@ 0x80
 80005ea:	0549      	lsls	r1, r1, #21
 80005ec:	430a      	orrs	r2, r1
 80005ee:	63da      	str	r2, [r3, #60]	@ 0x3c
 80005f0:	4b09      	ldr	r3, [pc, #36]	@ (8000618 <HAL_MspInit+0x54>)
 80005f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	055b      	lsls	r3, r3, #21
 80005f8:	4013      	ands	r3, r2
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 80005fe:	2200      	movs	r2, #0
 8000600:	2100      	movs	r1, #0
 8000602:	2004      	movs	r0, #4
 8000604:	f000 fa5c 	bl	8000ac0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000608:	2004      	movs	r0, #4
 800060a:	f000 fa6e 	bl	8000aea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060e:	46c0      	nop			@ (mov r8, r8)
 8000610:	46bd      	mov	sp, r7
 8000612:	b002      	add	sp, #8
 8000614:	bd80      	pop	{r7, pc}
 8000616:	46c0      	nop			@ (mov r8, r8)
 8000618:	40021000 	.word	0x40021000

0800061c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b08b      	sub	sp, #44	@ 0x2c
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000624:	240c      	movs	r4, #12
 8000626:	193b      	adds	r3, r7, r4
 8000628:	0018      	movs	r0, r3
 800062a:	231c      	movs	r3, #28
 800062c:	001a      	movs	r2, r3
 800062e:	2100      	movs	r1, #0
 8000630:	f003 fbd4 	bl	8003ddc <memset>
  if(hrtc->Instance==RTC)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a19      	ldr	r2, [pc, #100]	@ (80006a0 <HAL_RTC_MspInit+0x84>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d12b      	bne.n	8000696 <HAL_RTC_MspInit+0x7a>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800063e:	193b      	adds	r3, r7, r4
 8000640:	2240      	movs	r2, #64	@ 0x40
 8000642:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2280      	movs	r2, #128	@ 0x80
 8000648:	0092      	lsls	r2, r2, #2
 800064a:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064c:	193b      	adds	r3, r7, r4
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f836 	bl	80016c0 <HAL_RCCEx_PeriphCLKConfig>
 8000654:	1e03      	subs	r3, r0, #0
 8000656:	d001      	beq.n	800065c <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8000658:	f7ff ffae 	bl	80005b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800065c:	4b11      	ldr	r3, [pc, #68]	@ (80006a4 <HAL_RTC_MspInit+0x88>)
 800065e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8000660:	4b10      	ldr	r3, [pc, #64]	@ (80006a4 <HAL_RTC_MspInit+0x88>)
 8000662:	2180      	movs	r1, #128	@ 0x80
 8000664:	0209      	lsls	r1, r1, #8
 8000666:	430a      	orrs	r2, r1
 8000668:	65da      	str	r2, [r3, #92]	@ 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800066a:	4b0e      	ldr	r3, [pc, #56]	@ (80006a4 <HAL_RTC_MspInit+0x88>)
 800066c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800066e:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <HAL_RTC_MspInit+0x88>)
 8000670:	2180      	movs	r1, #128	@ 0x80
 8000672:	00c9      	lsls	r1, r1, #3
 8000674:	430a      	orrs	r2, r1
 8000676:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000678:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <HAL_RTC_MspInit+0x88>)
 800067a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800067c:	2380      	movs	r3, #128	@ 0x80
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4013      	ands	r3, r2
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8000686:	2200      	movs	r2, #0
 8000688:	2100      	movs	r1, #0
 800068a:	2002      	movs	r0, #2
 800068c:	f000 fa18 	bl	8000ac0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8000690:	2002      	movs	r0, #2
 8000692:	f000 fa2a 	bl	8000aea <HAL_NVIC_EnableIRQ>

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000696:	46c0      	nop			@ (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b00b      	add	sp, #44	@ 0x2c
 800069c:	bd90      	pop	{r4, r7, pc}
 800069e:	46c0      	nop			@ (mov r8, r8)
 80006a0:	40002800 	.word	0x40002800
 80006a4:	40021000 	.word	0x40021000

080006a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006a8:	b590      	push	{r4, r7, lr}
 80006aa:	b08b      	sub	sp, #44	@ 0x2c
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b0:	2414      	movs	r4, #20
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	0018      	movs	r0, r3
 80006b6:	2314      	movs	r3, #20
 80006b8:	001a      	movs	r2, r3
 80006ba:	2100      	movs	r1, #0
 80006bc:	f003 fb8e 	bl	8003ddc <memset>
  if(huart->Instance==USART2)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a1f      	ldr	r2, [pc, #124]	@ (8000744 <HAL_UART_MspInit+0x9c>)
 80006c6:	4293      	cmp	r3, r2
 80006c8:	d138      	bne.n	800073c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006d0:	2180      	movs	r1, #128	@ 0x80
 80006d2:	0289      	lsls	r1, r1, #10
 80006d4:	430a      	orrs	r2, r1
 80006d6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006d8:	4b1b      	ldr	r3, [pc, #108]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80006dc:	2380      	movs	r3, #128	@ 0x80
 80006de:	029b      	lsls	r3, r3, #10
 80006e0:	4013      	ands	r3, r2
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006e6:	4b18      	ldr	r3, [pc, #96]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006ea:	4b17      	ldr	r3, [pc, #92]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006ec:	2101      	movs	r1, #1
 80006ee:	430a      	orrs	r2, r1
 80006f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80006f2:	4b15      	ldr	r3, [pc, #84]	@ (8000748 <HAL_UART_MspInit+0xa0>)
 80006f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006f6:	2201      	movs	r2, #1
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80006fe:	0021      	movs	r1, r4
 8000700:	187b      	adds	r3, r7, r1
 8000702:	220c      	movs	r2, #12
 8000704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	187b      	adds	r3, r7, r1
 8000708:	2202      	movs	r2, #2
 800070a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070c:	187b      	adds	r3, r7, r1
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2201      	movs	r2, #1
 800071c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800071e:	187a      	adds	r2, r7, r1
 8000720:	23a0      	movs	r3, #160	@ 0xa0
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	0011      	movs	r1, r2
 8000726:	0018      	movs	r0, r3
 8000728:	f000 fad8 	bl	8000cdc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2100      	movs	r1, #0
 8000730:	201c      	movs	r0, #28
 8000732:	f000 f9c5 	bl	8000ac0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000736:	201c      	movs	r0, #28
 8000738:	f000 f9d7 	bl	8000aea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800073c:	46c0      	nop			@ (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b00b      	add	sp, #44	@ 0x2c
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	40004400 	.word	0x40004400
 8000748:	40021000 	.word	0x40021000

0800074c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000750:	46c0      	nop			@ (mov r8, r8)
 8000752:	e7fd      	b.n	8000750 <NMI_Handler+0x4>

08000754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000758:	46c0      	nop			@ (mov r8, r8)
 800075a:	e7fd      	b.n	8000758 <HardFault_Handler+0x4>

0800075c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000760:	46c0      	nop			@ (mov r8, r8)
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}

08000766 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}

08000770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000774:	f000 f8b8 	bl	80008e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000778:	46c0      	nop			@ (mov r8, r8)
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
	...

08000780 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC interrupts through EXTI lines 19 and 21.
  */
void RTC_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <RTC_IRQHandler+0x14>)
 8000786:	0018      	movs	r0, r3
 8000788:	f001 fb3a 	bl	8001e00 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

  /* USER CODE END RTC_IRQn 1 */
}
 800078c:	46c0      	nop			@ (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			@ (mov r8, r8)
 8000794:	20000028 	.word	0x20000028

08000798 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800079c:	46c0      	nop			@ (mov r8, r8)
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
	...

080007a4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007a8:	4b03      	ldr	r3, [pc, #12]	@ (80007b8 <USART2_IRQHandler+0x14>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f001 fd8a 	bl	80022c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007b0:	46c0      	nop			@ (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	20000050 	.word	0x20000050

080007bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <SystemInit+0x14>)
 80007c2:	2280      	movs	r2, #128	@ 0x80
 80007c4:	0512      	lsls	r2, r2, #20
 80007c6:	609a      	str	r2, [r3, #8]
#endif
}
 80007c8:	46c0      	nop			@ (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	46c0      	nop			@ (mov r8, r8)
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007d4:	480d      	ldr	r0, [pc, #52]	@ (800080c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007d8:	f7ff fff0 	bl	80007bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007de:	e003      	b.n	80007e8 <LoopCopyDataInit>

080007e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000810 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80007e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007e6:	3104      	adds	r1, #4

080007e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007e8:	480a      	ldr	r0, [pc, #40]	@ (8000814 <LoopForever+0xa>)
  ldr r3, =_edata
 80007ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000818 <LoopForever+0xe>)
  adds r2, r0, r1
 80007ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007f0:	d3f6      	bcc.n	80007e0 <CopyDataInit>
  ldr r2, =_sbss
 80007f2:	4a0a      	ldr	r2, [pc, #40]	@ (800081c <LoopForever+0x12>)
  b LoopFillZerobss
 80007f4:	e002      	b.n	80007fc <LoopFillZerobss>

080007f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007f6:	2300      	movs	r3, #0
  str  r3, [r2]
 80007f8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007fa:	3204      	adds	r2, #4

080007fc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80007fc:	4b08      	ldr	r3, [pc, #32]	@ (8000820 <LoopForever+0x16>)
  cmp r2, r3
 80007fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000800:	d3f9      	bcc.n	80007f6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000802:	f003 faf3 	bl	8003dec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000806:	f7ff fd0b 	bl	8000220 <main>

0800080a <LoopForever>:

LoopForever:
    b LoopForever
 800080a:	e7fe      	b.n	800080a <LoopForever>
  ldr   r0, =_estack
 800080c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000810:	08003ecc 	.word	0x08003ecc
  ldr r0, =_sdata
 8000814:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000818:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800081c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000820:	200001ec 	.word	0x200001ec

08000824 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000824:	e7fe      	b.n	8000824 <ADC1_IRQHandler>

08000826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000826:	b580      	push	{r7, lr}
 8000828:	b082      	sub	sp, #8
 800082a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800082c:	1dfb      	adds	r3, r7, #7
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000832:	2003      	movs	r0, #3
 8000834:	f000 f80e 	bl	8000854 <HAL_InitTick>
 8000838:	1e03      	subs	r3, r0, #0
 800083a:	d003      	beq.n	8000844 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800083c:	1dfb      	adds	r3, r7, #7
 800083e:	2201      	movs	r2, #1
 8000840:	701a      	strb	r2, [r3, #0]
 8000842:	e001      	b.n	8000848 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000844:	f7ff febe 	bl	80005c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000848:	1dfb      	adds	r3, r7, #7
 800084a:	781b      	ldrb	r3, [r3, #0]
}
 800084c:	0018      	movs	r0, r3
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}

08000854 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b590      	push	{r4, r7, lr}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800085c:	230f      	movs	r3, #15
 800085e:	18fb      	adds	r3, r7, r3
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000864:	4b1d      	ldr	r3, [pc, #116]	@ (80008dc <HAL_InitTick+0x88>)
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d02b      	beq.n	80008c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800086c:	4b1c      	ldr	r3, [pc, #112]	@ (80008e0 <HAL_InitTick+0x8c>)
 800086e:	681c      	ldr	r4, [r3, #0]
 8000870:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <HAL_InitTick+0x88>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	0019      	movs	r1, r3
 8000876:	23fa      	movs	r3, #250	@ 0xfa
 8000878:	0098      	lsls	r0, r3, #2
 800087a:	f7ff fc45 	bl	8000108 <__udivsi3>
 800087e:	0003      	movs	r3, r0
 8000880:	0019      	movs	r1, r3
 8000882:	0020      	movs	r0, r4
 8000884:	f7ff fc40 	bl	8000108 <__udivsi3>
 8000888:	0003      	movs	r3, r0
 800088a:	0018      	movs	r0, r3
 800088c:	f000 f93d 	bl	8000b0a <HAL_SYSTICK_Config>
 8000890:	1e03      	subs	r3, r0, #0
 8000892:	d112      	bne.n	80008ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	2b03      	cmp	r3, #3
 8000898:	d80a      	bhi.n	80008b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800089a:	6879      	ldr	r1, [r7, #4]
 800089c:	2301      	movs	r3, #1
 800089e:	425b      	negs	r3, r3
 80008a0:	2200      	movs	r2, #0
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 f90c 	bl	8000ac0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	@ (80008e4 <HAL_InitTick+0x90>)
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e00d      	b.n	80008cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80008b0:	230f      	movs	r3, #15
 80008b2:	18fb      	adds	r3, r7, r3
 80008b4:	2201      	movs	r2, #1
 80008b6:	701a      	strb	r2, [r3, #0]
 80008b8:	e008      	b.n	80008cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80008ba:	230f      	movs	r3, #15
 80008bc:	18fb      	adds	r3, r7, r3
 80008be:	2201      	movs	r2, #1
 80008c0:	701a      	strb	r2, [r3, #0]
 80008c2:	e003      	b.n	80008cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80008c4:	230f      	movs	r3, #15
 80008c6:	18fb      	adds	r3, r7, r3
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80008cc:	230f      	movs	r3, #15
 80008ce:	18fb      	adds	r3, r7, r3
 80008d0:	781b      	ldrb	r3, [r3, #0]
}
 80008d2:	0018      	movs	r0, r3
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b005      	add	sp, #20
 80008d8:	bd90      	pop	{r4, r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	20000008 	.word	0x20000008
 80008e0:	20000000 	.word	0x20000000
 80008e4:	20000004 	.word	0x20000004

080008e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008ec:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <HAL_IncTick+0x1c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	001a      	movs	r2, r3
 80008f2:	4b05      	ldr	r3, [pc, #20]	@ (8000908 <HAL_IncTick+0x20>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	18d2      	adds	r2, r2, r3
 80008f8:	4b03      	ldr	r3, [pc, #12]	@ (8000908 <HAL_IncTick+0x20>)
 80008fa:	601a      	str	r2, [r3, #0]
}
 80008fc:	46c0      	nop			@ (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	20000008 	.word	0x20000008
 8000908:	200001e8 	.word	0x200001e8

0800090c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  return uwTick;
 8000910:	4b02      	ldr	r3, [pc, #8]	@ (800091c <HAL_GetTick+0x10>)
 8000912:	681b      	ldr	r3, [r3, #0]
}
 8000914:	0018      	movs	r0, r3
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			@ (mov r8, r8)
 800091c:	200001e8 	.word	0x200001e8

08000920 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000928:	f7ff fff0 	bl	800090c <HAL_GetTick>
 800092c:	0003      	movs	r3, r0
 800092e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	3301      	adds	r3, #1
 8000938:	d005      	beq.n	8000946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093a:	4b0a      	ldr	r3, [pc, #40]	@ (8000964 <HAL_Delay+0x44>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	001a      	movs	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	189b      	adds	r3, r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000946:	46c0      	nop			@ (mov r8, r8)
 8000948:	f7ff ffe0 	bl	800090c <HAL_GetTick>
 800094c:	0002      	movs	r2, r0
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8f7      	bhi.n	8000948 <HAL_Delay+0x28>
  {
  }
}
 8000958:	46c0      	nop			@ (mov r8, r8)
 800095a:	46c0      	nop			@ (mov r8, r8)
 800095c:	46bd      	mov	sp, r7
 800095e:	b004      	add	sp, #16
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	20000008 	.word	0x20000008

08000968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	0002      	movs	r2, r0
 8000970:	1dfb      	adds	r3, r7, #7
 8000972:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000974:	1dfb      	adds	r3, r7, #7
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	2b7f      	cmp	r3, #127	@ 0x7f
 800097a:	d809      	bhi.n	8000990 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800097c:	1dfb      	adds	r3, r7, #7
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	001a      	movs	r2, r3
 8000982:	231f      	movs	r3, #31
 8000984:	401a      	ands	r2, r3
 8000986:	4b04      	ldr	r3, [pc, #16]	@ (8000998 <__NVIC_EnableIRQ+0x30>)
 8000988:	2101      	movs	r1, #1
 800098a:	4091      	lsls	r1, r2
 800098c:	000a      	movs	r2, r1
 800098e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000990:	46c0      	nop			@ (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b002      	add	sp, #8
 8000996:	bd80      	pop	{r7, pc}
 8000998:	e000e100 	.word	0xe000e100

0800099c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800099c:	b590      	push	{r4, r7, lr}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	0002      	movs	r2, r0
 80009a4:	6039      	str	r1, [r7, #0]
 80009a6:	1dfb      	adds	r3, r7, #7
 80009a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009aa:	1dfb      	adds	r3, r7, #7
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80009b0:	d828      	bhi.n	8000a04 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009b2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a70 <__NVIC_SetPriority+0xd4>)
 80009b4:	1dfb      	adds	r3, r7, #7
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	b25b      	sxtb	r3, r3
 80009ba:	089b      	lsrs	r3, r3, #2
 80009bc:	33c0      	adds	r3, #192	@ 0xc0
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	589b      	ldr	r3, [r3, r2]
 80009c2:	1dfa      	adds	r2, r7, #7
 80009c4:	7812      	ldrb	r2, [r2, #0]
 80009c6:	0011      	movs	r1, r2
 80009c8:	2203      	movs	r2, #3
 80009ca:	400a      	ands	r2, r1
 80009cc:	00d2      	lsls	r2, r2, #3
 80009ce:	21ff      	movs	r1, #255	@ 0xff
 80009d0:	4091      	lsls	r1, r2
 80009d2:	000a      	movs	r2, r1
 80009d4:	43d2      	mvns	r2, r2
 80009d6:	401a      	ands	r2, r3
 80009d8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	019b      	lsls	r3, r3, #6
 80009de:	22ff      	movs	r2, #255	@ 0xff
 80009e0:	401a      	ands	r2, r3
 80009e2:	1dfb      	adds	r3, r7, #7
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	0018      	movs	r0, r3
 80009e8:	2303      	movs	r3, #3
 80009ea:	4003      	ands	r3, r0
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80009f0:	481f      	ldr	r0, [pc, #124]	@ (8000a70 <__NVIC_SetPriority+0xd4>)
 80009f2:	1dfb      	adds	r3, r7, #7
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	430a      	orrs	r2, r1
 80009fc:	33c0      	adds	r3, #192	@ 0xc0
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a02:	e031      	b.n	8000a68 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a04:	4a1b      	ldr	r2, [pc, #108]	@ (8000a74 <__NVIC_SetPriority+0xd8>)
 8000a06:	1dfb      	adds	r3, r7, #7
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	0019      	movs	r1, r3
 8000a0c:	230f      	movs	r3, #15
 8000a0e:	400b      	ands	r3, r1
 8000a10:	3b08      	subs	r3, #8
 8000a12:	089b      	lsrs	r3, r3, #2
 8000a14:	3306      	adds	r3, #6
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	18d3      	adds	r3, r2, r3
 8000a1a:	3304      	adds	r3, #4
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	1dfa      	adds	r2, r7, #7
 8000a20:	7812      	ldrb	r2, [r2, #0]
 8000a22:	0011      	movs	r1, r2
 8000a24:	2203      	movs	r2, #3
 8000a26:	400a      	ands	r2, r1
 8000a28:	00d2      	lsls	r2, r2, #3
 8000a2a:	21ff      	movs	r1, #255	@ 0xff
 8000a2c:	4091      	lsls	r1, r2
 8000a2e:	000a      	movs	r2, r1
 8000a30:	43d2      	mvns	r2, r2
 8000a32:	401a      	ands	r2, r3
 8000a34:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	019b      	lsls	r3, r3, #6
 8000a3a:	22ff      	movs	r2, #255	@ 0xff
 8000a3c:	401a      	ands	r2, r3
 8000a3e:	1dfb      	adds	r3, r7, #7
 8000a40:	781b      	ldrb	r3, [r3, #0]
 8000a42:	0018      	movs	r0, r3
 8000a44:	2303      	movs	r3, #3
 8000a46:	4003      	ands	r3, r0
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a4c:	4809      	ldr	r0, [pc, #36]	@ (8000a74 <__NVIC_SetPriority+0xd8>)
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	001c      	movs	r4, r3
 8000a54:	230f      	movs	r3, #15
 8000a56:	4023      	ands	r3, r4
 8000a58:	3b08      	subs	r3, #8
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	3306      	adds	r3, #6
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	18c3      	adds	r3, r0, r3
 8000a64:	3304      	adds	r3, #4
 8000a66:	601a      	str	r2, [r3, #0]
}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	b003      	add	sp, #12
 8000a6e:	bd90      	pop	{r4, r7, pc}
 8000a70:	e000e100 	.word	0xe000e100
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b082      	sub	sp, #8
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	1e5a      	subs	r2, r3, #1
 8000a84:	2380      	movs	r3, #128	@ 0x80
 8000a86:	045b      	lsls	r3, r3, #17
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d301      	bcc.n	8000a90 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	e010      	b.n	8000ab2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a90:	4b0a      	ldr	r3, [pc, #40]	@ (8000abc <SysTick_Config+0x44>)
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	3a01      	subs	r2, #1
 8000a96:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a98:	2301      	movs	r3, #1
 8000a9a:	425b      	negs	r3, r3
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	0018      	movs	r0, r3
 8000aa0:	f7ff ff7c 	bl	800099c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000aa4:	4b05      	ldr	r3, [pc, #20]	@ (8000abc <SysTick_Config+0x44>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000aaa:	4b04      	ldr	r3, [pc, #16]	@ (8000abc <SysTick_Config+0x44>)
 8000aac:	2207      	movs	r2, #7
 8000aae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b002      	add	sp, #8
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			@ (mov r8, r8)
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60b9      	str	r1, [r7, #8]
 8000ac8:	607a      	str	r2, [r7, #4]
 8000aca:	210f      	movs	r1, #15
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	1c02      	adds	r2, r0, #0
 8000ad0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000ad2:	68ba      	ldr	r2, [r7, #8]
 8000ad4:	187b      	adds	r3, r7, r1
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b25b      	sxtb	r3, r3
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ff5d 	bl	800099c <__NVIC_SetPriority>
}
 8000ae2:	46c0      	nop			@ (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b004      	add	sp, #16
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b082      	sub	sp, #8
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	0002      	movs	r2, r0
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	b25b      	sxtb	r3, r3
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff ff33 	bl	8000968 <__NVIC_EnableIRQ>
}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	46bd      	mov	sp, r7
 8000b06:	b002      	add	sp, #8
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	0018      	movs	r0, r3
 8000b16:	f7ff ffaf 	bl	8000a78 <SysTick_Config>
 8000b1a:	0003      	movs	r3, r0
}
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	b002      	add	sp, #8
 8000b22:	bd80      	pop	{r7, pc}

08000b24 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d101      	bne.n	8000b36 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000b32:	2301      	movs	r3, #1
 8000b34:	e050      	b.n	8000bd8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	2225      	movs	r2, #37	@ 0x25
 8000b3a:	5c9b      	ldrb	r3, [r3, r2]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d008      	beq.n	8000b54 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2204      	movs	r2, #4
 8000b46:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2224      	movs	r2, #36	@ 0x24
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	e041      	b.n	8000bd8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	210e      	movs	r1, #14
 8000b60:	438a      	bics	r2, r1
 8000b62:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b68:	681a      	ldr	r2, [r3, #0]
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b6e:	491c      	ldr	r1, [pc, #112]	@ (8000be0 <HAL_DMA_Abort+0xbc>)
 8000b70:	400a      	ands	r2, r1
 8000b72:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681a      	ldr	r2, [r3, #0]
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2101      	movs	r1, #1
 8000b80:	438a      	bics	r2, r1
 8000b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000b84:	4b17      	ldr	r3, [pc, #92]	@ (8000be4 <HAL_DMA_Abort+0xc0>)
 8000b86:	6859      	ldr	r1, [r3, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8c:	221c      	movs	r2, #28
 8000b8e:	4013      	ands	r3, r2
 8000b90:	2201      	movs	r2, #1
 8000b92:	409a      	lsls	r2, r3
 8000b94:	4b13      	ldr	r3, [pc, #76]	@ (8000be4 <HAL_DMA_Abort+0xc0>)
 8000b96:	430a      	orrs	r2, r1
 8000b98:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ba2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d00c      	beq.n	8000bc6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000bb6:	490a      	ldr	r1, [pc, #40]	@ (8000be0 <HAL_DMA_Abort+0xbc>)
 8000bb8:	400a      	ands	r2, r1
 8000bba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000bc4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2225      	movs	r2, #37	@ 0x25
 8000bca:	2101      	movs	r1, #1
 8000bcc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2224      	movs	r2, #36	@ 0x24
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
}
 8000bd8:	0018      	movs	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	b002      	add	sp, #8
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	fffffeff 	.word	0xfffffeff
 8000be4:	40020000 	.word	0x40020000

08000be8 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b084      	sub	sp, #16
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2224      	movs	r2, #36	@ 0x24
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2224      	movs	r2, #36	@ 0x24
 8000c04:	5c9b      	ldrb	r3, [r3, r2]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d101      	bne.n	8000c0e <HAL_DMA_Abort_IT+0x26>
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	e05e      	b.n	8000ccc <HAL_DMA_Abort_IT+0xe4>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2224      	movs	r2, #36	@ 0x24
 8000c12:	2101      	movs	r1, #1
 8000c14:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2225      	movs	r2, #37	@ 0x25
 8000c1a:	5c9b      	ldrb	r3, [r3, r2]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	2b02      	cmp	r3, #2
 8000c20:	d007      	beq.n	8000c32 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2204      	movs	r2, #4
 8000c26:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000c28:	230f      	movs	r3, #15
 8000c2a:	18fb      	adds	r3, r7, r3
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	701a      	strb	r2, [r3, #0]
 8000c30:	e049      	b.n	8000cc6 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	681a      	ldr	r2, [r3, #0]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	210e      	movs	r1, #14
 8000c3e:	438a      	bics	r2, r1
 8000c40:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	681a      	ldr	r2, [r3, #0]
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	438a      	bics	r2, r1
 8000c50:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c56:	681a      	ldr	r2, [r3, #0]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5c:	491d      	ldr	r1, [pc, #116]	@ (8000cd4 <HAL_DMA_Abort_IT+0xec>)
 8000c5e:	400a      	ands	r2, r1
 8000c60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000c62:	4b1d      	ldr	r3, [pc, #116]	@ (8000cd8 <HAL_DMA_Abort_IT+0xf0>)
 8000c64:	6859      	ldr	r1, [r3, #4]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c6a:	221c      	movs	r2, #28
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	2201      	movs	r2, #1
 8000c70:	409a      	lsls	r2, r3
 8000c72:	4b19      	ldr	r3, [pc, #100]	@ (8000cd8 <HAL_DMA_Abort_IT+0xf0>)
 8000c74:	430a      	orrs	r2, r1
 8000c76:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000c80:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d00c      	beq.n	8000ca4 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000c94:	490f      	ldr	r1, [pc, #60]	@ (8000cd4 <HAL_DMA_Abort_IT+0xec>)
 8000c96:	400a      	ands	r2, r1
 8000c98:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000ca2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2225      	movs	r2, #37	@ 0x25
 8000ca8:	2101      	movs	r1, #1
 8000caa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2224      	movs	r2, #36	@ 0x24
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d004      	beq.n	8000cc6 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000cc0:	687a      	ldr	r2, [r7, #4]
 8000cc2:	0010      	movs	r0, r2
 8000cc4:	4798      	blx	r3
    }
  }
  return status;
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	781b      	ldrb	r3, [r3, #0]
}
 8000ccc:	0018      	movs	r0, r3
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	b004      	add	sp, #16
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	fffffeff 	.word	0xfffffeff
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000cea:	e14d      	b.n	8000f88 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	000a      	movs	r2, r1
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d100      	bne.n	8000d04 <HAL_GPIO_Init+0x28>
 8000d02:	e13e      	b.n	8000f82 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b02      	cmp	r3, #2
 8000d0a:	d003      	beq.n	8000d14 <HAL_GPIO_Init+0x38>
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	2b12      	cmp	r3, #18
 8000d12:	d125      	bne.n	8000d60 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	08da      	lsrs	r2, r3, #3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	3208      	adds	r2, #8
 8000d1c:	0092      	lsls	r2, r2, #2
 8000d1e:	58d3      	ldr	r3, [r2, r3]
 8000d20:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000d22:	693b      	ldr	r3, [r7, #16]
 8000d24:	2207      	movs	r2, #7
 8000d26:	4013      	ands	r3, r2
 8000d28:	009b      	lsls	r3, r3, #2
 8000d2a:	220f      	movs	r2, #15
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	43da      	mvns	r2, r3
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	4013      	ands	r3, r2
 8000d36:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	220f      	movs	r2, #15
 8000d3e:	401a      	ands	r2, r3
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	2107      	movs	r1, #7
 8000d44:	400b      	ands	r3, r1
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	0013      	movs	r3, r2
 8000d4c:	697a      	ldr	r2, [r7, #20]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000d52:	693b      	ldr	r3, [r7, #16]
 8000d54:	08da      	lsrs	r2, r3, #3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3208      	adds	r2, #8
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	6979      	ldr	r1, [r7, #20]
 8000d5e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	005b      	lsls	r3, r3, #1
 8000d6a:	2203      	movs	r2, #3
 8000d6c:	409a      	lsls	r2, r3
 8000d6e:	0013      	movs	r3, r2
 8000d70:	43da      	mvns	r2, r3
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	4013      	ands	r3, r2
 8000d76:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685b      	ldr	r3, [r3, #4]
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	401a      	ands	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	409a      	lsls	r2, r3
 8000d86:	0013      	movs	r3, r2
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	4313      	orrs	r3, r2
 8000d8c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	697a      	ldr	r2, [r7, #20]
 8000d92:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d00b      	beq.n	8000db4 <HAL_GPIO_Init+0xd8>
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d007      	beq.n	8000db4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000da8:	2b11      	cmp	r3, #17
 8000daa:	d003      	beq.n	8000db4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b12      	cmp	r3, #18
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000dba:	693b      	ldr	r3, [r7, #16]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	43da      	mvns	r2, r3
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	697a      	ldr	r2, [r7, #20]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	4013      	ands	r3, r2
 8000df8:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	2201      	movs	r2, #1
 8000e02:	401a      	ands	r2, r3
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	697a      	ldr	r2, [r7, #20]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	697a      	ldr	r2, [r7, #20]
 8000e14:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d017      	beq.n	8000e4e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000e24:	693b      	ldr	r3, [r7, #16]
 8000e26:	005b      	lsls	r3, r3, #1
 8000e28:	2203      	movs	r2, #3
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	4013      	ands	r3, r2
 8000e34:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	693b      	ldr	r3, [r7, #16]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	409a      	lsls	r2, r3
 8000e40:	0013      	movs	r3, r2
 8000e42:	697a      	ldr	r2, [r7, #20]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	2380      	movs	r3, #128	@ 0x80
 8000e54:	055b      	lsls	r3, r3, #21
 8000e56:	4013      	ands	r3, r2
 8000e58:	d100      	bne.n	8000e5c <HAL_GPIO_Init+0x180>
 8000e5a:	e092      	b.n	8000f82 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000e5c:	4a50      	ldr	r2, [pc, #320]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	089b      	lsrs	r3, r3, #2
 8000e62:	3318      	adds	r3, #24
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	589b      	ldr	r3, [r3, r2]
 8000e68:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	4013      	ands	r3, r2
 8000e70:	00db      	lsls	r3, r3, #3
 8000e72:	220f      	movs	r2, #15
 8000e74:	409a      	lsls	r2, r3
 8000e76:	0013      	movs	r3, r2
 8000e78:	43da      	mvns	r2, r3
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000e80:	687a      	ldr	r2, [r7, #4]
 8000e82:	23a0      	movs	r3, #160	@ 0xa0
 8000e84:	05db      	lsls	r3, r3, #23
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d013      	beq.n	8000eb2 <HAL_GPIO_Init+0x1d6>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4a45      	ldr	r2, [pc, #276]	@ (8000fa4 <HAL_GPIO_Init+0x2c8>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d00d      	beq.n	8000eae <HAL_GPIO_Init+0x1d2>
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	4a44      	ldr	r2, [pc, #272]	@ (8000fa8 <HAL_GPIO_Init+0x2cc>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d007      	beq.n	8000eaa <HAL_GPIO_Init+0x1ce>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a43      	ldr	r2, [pc, #268]	@ (8000fac <HAL_GPIO_Init+0x2d0>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d101      	bne.n	8000ea6 <HAL_GPIO_Init+0x1ca>
 8000ea2:	2305      	movs	r3, #5
 8000ea4:	e006      	b.n	8000eb4 <HAL_GPIO_Init+0x1d8>
 8000ea6:	2306      	movs	r3, #6
 8000ea8:	e004      	b.n	8000eb4 <HAL_GPIO_Init+0x1d8>
 8000eaa:	2302      	movs	r3, #2
 8000eac:	e002      	b.n	8000eb4 <HAL_GPIO_Init+0x1d8>
 8000eae:	2301      	movs	r3, #1
 8000eb0:	e000      	b.n	8000eb4 <HAL_GPIO_Init+0x1d8>
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	2103      	movs	r1, #3
 8000eb8:	400a      	ands	r2, r1
 8000eba:	00d2      	lsls	r2, r2, #3
 8000ebc:	4093      	lsls	r3, r2
 8000ebe:	697a      	ldr	r2, [r7, #20]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000ec4:	4936      	ldr	r1, [pc, #216]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3318      	adds	r3, #24
 8000ecc:	009b      	lsls	r3, r3, #2
 8000ece:	697a      	ldr	r2, [r7, #20]
 8000ed0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000ed2:	4a33      	ldr	r2, [pc, #204]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000ed4:	2380      	movs	r3, #128	@ 0x80
 8000ed6:	58d3      	ldr	r3, [r2, r3]
 8000ed8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43da      	mvns	r2, r3
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685a      	ldr	r2, [r3, #4]
 8000ee8:	2380      	movs	r3, #128	@ 0x80
 8000eea:	025b      	lsls	r3, r3, #9
 8000eec:	4013      	ands	r3, r2
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000ef0:	697a      	ldr	r2, [r7, #20]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000ef8:	4929      	ldr	r1, [pc, #164]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000efa:	2280      	movs	r2, #128	@ 0x80
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000f00:	4a27      	ldr	r2, [pc, #156]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000f02:	2384      	movs	r3, #132	@ 0x84
 8000f04:	58d3      	ldr	r3, [r2, r3]
 8000f06:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	43da      	mvns	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	2380      	movs	r3, #128	@ 0x80
 8000f18:	029b      	lsls	r3, r3, #10
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	d003      	beq.n	8000f26 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000f1e:	697a      	ldr	r2, [r7, #20]
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000f26:	491e      	ldr	r1, [pc, #120]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000f28:	2284      	movs	r2, #132	@ 0x84
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	43da      	mvns	r2, r3
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685a      	ldr	r2, [r3, #4]
 8000f42:	2380      	movs	r3, #128	@ 0x80
 8000f44:	035b      	lsls	r3, r3, #13
 8000f46:	4013      	ands	r3, r2
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000f52:	4b13      	ldr	r3, [pc, #76]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000f58:	4b11      	ldr	r3, [pc, #68]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	43da      	mvns	r2, r3
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	4013      	ands	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685a      	ldr	r2, [r3, #4]
 8000f6c:	2380      	movs	r3, #128	@ 0x80
 8000f6e:	039b      	lsls	r3, r3, #14
 8000f70:	4013      	ands	r3, r2
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	@ (8000fa0 <HAL_GPIO_Init+0x2c4>)
 8000f7e:	697a      	ldr	r2, [r7, #20]
 8000f80:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	3301      	adds	r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	40da      	lsrs	r2, r3
 8000f90:	1e13      	subs	r3, r2, #0
 8000f92:	d000      	beq.n	8000f96 <HAL_GPIO_Init+0x2ba>
 8000f94:	e6aa      	b.n	8000cec <HAL_GPIO_Init+0x10>
  }
}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	46c0      	nop			@ (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b006      	add	sp, #24
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	40021800 	.word	0x40021800
 8000fa4:	50000400 	.word	0x50000400
 8000fa8:	50000800 	.word	0x50000800
 8000fac:	50001400 	.word	0x50001400

08000fb0 <HAL_PWR_DisableWakeUpPin>:
  *                PWR_WAKEUP_PIN4, PWR_WAKEUP_PIN5 (*), PWR_WAKEUP_PIN6
  * @note   (*) Availability depends on devices
  * @retval None
  */
void HAL_PWR_DisableWakeUpPin(uint32_t WakeUpPinx)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  assert_param(IS_PWR_WAKEUP_PIN(WakeUpPinx));

  CLEAR_BIT(PWR->CR3, (PWR_CR3_EWUP & WakeUpPinx));
 8000fb8:	4b06      	ldr	r3, [pc, #24]	@ (8000fd4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8000fba:	689a      	ldr	r2, [r3, #8]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	212f      	movs	r1, #47	@ 0x2f
 8000fc0:	400b      	ands	r3, r1
 8000fc2:	43d9      	mvns	r1, r3
 8000fc4:	4b03      	ldr	r3, [pc, #12]	@ (8000fd4 <HAL_PWR_DisableWakeUpPin+0x24>)
 8000fc6:	400a      	ands	r2, r1
 8000fc8:	609a      	str	r2, [r3, #8]
}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	b002      	add	sp, #8
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			@ (mov r8, r8)
 8000fd4:	40007000 	.word	0x40007000

08000fd8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d101      	bne.n	8000fea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e1d0      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	2201      	movs	r2, #1
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d100      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x1e>
 8000ff4:	e069      	b.n	80010ca <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ff6:	4bc8      	ldr	r3, [pc, #800]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8000ff8:	689b      	ldr	r3, [r3, #8]
 8000ffa:	2238      	movs	r2, #56	@ 0x38
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	2b08      	cmp	r3, #8
 8001004:	d105      	bne.n	8001012 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d15d      	bne.n	80010ca <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e1bc      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	2380      	movs	r3, #128	@ 0x80
 8001018:	025b      	lsls	r3, r3, #9
 800101a:	429a      	cmp	r2, r3
 800101c:	d107      	bne.n	800102e <HAL_RCC_OscConfig+0x56>
 800101e:	4bbe      	ldr	r3, [pc, #760]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	4bbd      	ldr	r3, [pc, #756]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001024:	2180      	movs	r1, #128	@ 0x80
 8001026:	0249      	lsls	r1, r1, #9
 8001028:	430a      	orrs	r2, r1
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	e020      	b.n	8001070 <HAL_RCC_OscConfig+0x98>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	685a      	ldr	r2, [r3, #4]
 8001032:	23a0      	movs	r3, #160	@ 0xa0
 8001034:	02db      	lsls	r3, r3, #11
 8001036:	429a      	cmp	r2, r3
 8001038:	d10e      	bne.n	8001058 <HAL_RCC_OscConfig+0x80>
 800103a:	4bb7      	ldr	r3, [pc, #732]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	4bb6      	ldr	r3, [pc, #728]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001040:	2180      	movs	r1, #128	@ 0x80
 8001042:	02c9      	lsls	r1, r1, #11
 8001044:	430a      	orrs	r2, r1
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	4bb3      	ldr	r3, [pc, #716]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	4bb2      	ldr	r3, [pc, #712]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800104e:	2180      	movs	r1, #128	@ 0x80
 8001050:	0249      	lsls	r1, r1, #9
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	e00b      	b.n	8001070 <HAL_RCC_OscConfig+0x98>
 8001058:	4baf      	ldr	r3, [pc, #700]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4bae      	ldr	r3, [pc, #696]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800105e:	49af      	ldr	r1, [pc, #700]	@ (800131c <HAL_RCC_OscConfig+0x344>)
 8001060:	400a      	ands	r2, r1
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	4bac      	ldr	r3, [pc, #688]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4bab      	ldr	r3, [pc, #684]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800106a:	49ad      	ldr	r1, [pc, #692]	@ (8001320 <HAL_RCC_OscConfig+0x348>)
 800106c:	400a      	ands	r2, r1
 800106e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d014      	beq.n	80010a2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001078:	f7ff fc48 	bl	800090c <HAL_GetTick>
 800107c:	0003      	movs	r3, r0
 800107e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001080:	e008      	b.n	8001094 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001082:	f7ff fc43 	bl	800090c <HAL_GetTick>
 8001086:	0002      	movs	r2, r0
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	2b64      	cmp	r3, #100	@ 0x64
 800108e:	d901      	bls.n	8001094 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001090:	2303      	movs	r3, #3
 8001092:	e17b      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001094:	4ba0      	ldr	r3, [pc, #640]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001096:	681a      	ldr	r2, [r3, #0]
 8001098:	2380      	movs	r3, #128	@ 0x80
 800109a:	029b      	lsls	r3, r3, #10
 800109c:	4013      	ands	r3, r2
 800109e:	d0f0      	beq.n	8001082 <HAL_RCC_OscConfig+0xaa>
 80010a0:	e013      	b.n	80010ca <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010a2:	f7ff fc33 	bl	800090c <HAL_GetTick>
 80010a6:	0003      	movs	r3, r0
 80010a8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010aa:	e008      	b.n	80010be <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80010ac:	f7ff fc2e 	bl	800090c <HAL_GetTick>
 80010b0:	0002      	movs	r2, r0
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b64      	cmp	r3, #100	@ 0x64
 80010b8:	d901      	bls.n	80010be <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80010ba:	2303      	movs	r3, #3
 80010bc:	e166      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010be:	4b96      	ldr	r3, [pc, #600]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	029b      	lsls	r3, r3, #10
 80010c6:	4013      	ands	r3, r2
 80010c8:	d1f0      	bne.n	80010ac <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2202      	movs	r2, #2
 80010d0:	4013      	ands	r3, r2
 80010d2:	d100      	bne.n	80010d6 <HAL_RCC_OscConfig+0xfe>
 80010d4:	e086      	b.n	80011e4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010d6:	4b90      	ldr	r3, [pc, #576]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	2238      	movs	r2, #56	@ 0x38
 80010dc:	4013      	ands	r3, r2
 80010de:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d12f      	bne.n	8001146 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d101      	bne.n	80010f2 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e14c      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010f2:	4b89      	ldr	r3, [pc, #548]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	4a8b      	ldr	r2, [pc, #556]	@ (8001324 <HAL_RCC_OscConfig+0x34c>)
 80010f8:	4013      	ands	r3, r2
 80010fa:	0019      	movs	r1, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	021a      	lsls	r2, r3, #8
 8001102:	4b85      	ldr	r3, [pc, #532]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001104:	430a      	orrs	r2, r1
 8001106:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d112      	bne.n	8001134 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800110e:	4b82      	ldr	r3, [pc, #520]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	4a85      	ldr	r2, [pc, #532]	@ (8001328 <HAL_RCC_OscConfig+0x350>)
 8001114:	4013      	ands	r3, r2
 8001116:	0019      	movs	r1, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	4b7e      	ldr	r3, [pc, #504]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800111e:	430a      	orrs	r2, r1
 8001120:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001122:	4b7d      	ldr	r3, [pc, #500]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	0adb      	lsrs	r3, r3, #11
 8001128:	2207      	movs	r2, #7
 800112a:	4013      	ands	r3, r2
 800112c:	4a7f      	ldr	r2, [pc, #508]	@ (800132c <HAL_RCC_OscConfig+0x354>)
 800112e:	40da      	lsrs	r2, r3
 8001130:	4b7f      	ldr	r3, [pc, #508]	@ (8001330 <HAL_RCC_OscConfig+0x358>)
 8001132:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001134:	4b7f      	ldr	r3, [pc, #508]	@ (8001334 <HAL_RCC_OscConfig+0x35c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	0018      	movs	r0, r3
 800113a:	f7ff fb8b 	bl	8000854 <HAL_InitTick>
 800113e:	1e03      	subs	r3, r0, #0
 8001140:	d050      	beq.n	80011e4 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e122      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d030      	beq.n	80011b0 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800114e:	4b72      	ldr	r3, [pc, #456]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a75      	ldr	r2, [pc, #468]	@ (8001328 <HAL_RCC_OscConfig+0x350>)
 8001154:	4013      	ands	r3, r2
 8001156:	0019      	movs	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	691a      	ldr	r2, [r3, #16]
 800115c:	4b6e      	ldr	r3, [pc, #440]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800115e:	430a      	orrs	r2, r1
 8001160:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001162:	4b6d      	ldr	r3, [pc, #436]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4b6c      	ldr	r3, [pc, #432]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001168:	2180      	movs	r1, #128	@ 0x80
 800116a:	0049      	lsls	r1, r1, #1
 800116c:	430a      	orrs	r2, r1
 800116e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001170:	f7ff fbcc 	bl	800090c <HAL_GetTick>
 8001174:	0003      	movs	r3, r0
 8001176:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001178:	e008      	b.n	800118c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800117a:	f7ff fbc7 	bl	800090c <HAL_GetTick>
 800117e:	0002      	movs	r2, r0
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	1ad3      	subs	r3, r2, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d901      	bls.n	800118c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e0ff      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800118c:	4b62      	ldr	r3, [pc, #392]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2380      	movs	r3, #128	@ 0x80
 8001192:	00db      	lsls	r3, r3, #3
 8001194:	4013      	ands	r3, r2
 8001196:	d0f0      	beq.n	800117a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001198:	4b5f      	ldr	r3, [pc, #380]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	4a61      	ldr	r2, [pc, #388]	@ (8001324 <HAL_RCC_OscConfig+0x34c>)
 800119e:	4013      	ands	r3, r2
 80011a0:	0019      	movs	r1, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	021a      	lsls	r2, r3, #8
 80011a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80011aa:	430a      	orrs	r2, r1
 80011ac:	605a      	str	r2, [r3, #4]
 80011ae:	e019      	b.n	80011e4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80011b0:	4b59      	ldr	r3, [pc, #356]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b58      	ldr	r3, [pc, #352]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80011b6:	4960      	ldr	r1, [pc, #384]	@ (8001338 <HAL_RCC_OscConfig+0x360>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011bc:	f7ff fba6 	bl	800090c <HAL_GetTick>
 80011c0:	0003      	movs	r3, r0
 80011c2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011c4:	e008      	b.n	80011d8 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80011c6:	f7ff fba1 	bl	800090c <HAL_GetTick>
 80011ca:	0002      	movs	r2, r0
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	1ad3      	subs	r3, r2, r3
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d901      	bls.n	80011d8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e0d9      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4013      	ands	r3, r2
 80011e2:	d1f0      	bne.n	80011c6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2208      	movs	r2, #8
 80011ea:	4013      	ands	r3, r2
 80011ec:	d042      	beq.n	8001274 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80011ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2238      	movs	r2, #56	@ 0x38
 80011f4:	4013      	ands	r3, r2
 80011f6:	2b18      	cmp	r3, #24
 80011f8:	d105      	bne.n	8001206 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d138      	bne.n	8001274 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e0c2      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d019      	beq.n	8001242 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800120e:	4b42      	ldr	r3, [pc, #264]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001210:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001212:	4b41      	ldr	r3, [pc, #260]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001214:	2101      	movs	r1, #1
 8001216:	430a      	orrs	r2, r1
 8001218:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fb77 	bl	800090c <HAL_GetTick>
 800121e:	0003      	movs	r3, r0
 8001220:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001222:	e008      	b.n	8001236 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001224:	f7ff fb72 	bl	800090c <HAL_GetTick>
 8001228:	0002      	movs	r2, r0
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d901      	bls.n	8001236 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001232:	2303      	movs	r3, #3
 8001234:	e0aa      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001236:	4b38      	ldr	r3, [pc, #224]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001238:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800123a:	2202      	movs	r2, #2
 800123c:	4013      	ands	r3, r2
 800123e:	d0f1      	beq.n	8001224 <HAL_RCC_OscConfig+0x24c>
 8001240:	e018      	b.n	8001274 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001242:	4b35      	ldr	r3, [pc, #212]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001244:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001246:	4b34      	ldr	r3, [pc, #208]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 8001248:	2101      	movs	r1, #1
 800124a:	438a      	bics	r2, r1
 800124c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800124e:	f7ff fb5d 	bl	800090c <HAL_GetTick>
 8001252:	0003      	movs	r3, r0
 8001254:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001258:	f7ff fb58 	bl	800090c <HAL_GetTick>
 800125c:	0002      	movs	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e090      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800126a:	4b2b      	ldr	r3, [pc, #172]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800126c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800126e:	2202      	movs	r2, #2
 8001270:	4013      	ands	r3, r2
 8001272:	d1f1      	bne.n	8001258 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2204      	movs	r2, #4
 800127a:	4013      	ands	r3, r2
 800127c:	d100      	bne.n	8001280 <HAL_RCC_OscConfig+0x2a8>
 800127e:	e084      	b.n	800138a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001280:	230f      	movs	r3, #15
 8001282:	18fb      	adds	r3, r7, r3
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001288:	4b23      	ldr	r3, [pc, #140]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2238      	movs	r2, #56	@ 0x38
 800128e:	4013      	ands	r3, r2
 8001290:	2b20      	cmp	r3, #32
 8001292:	d106      	bne.n	80012a2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d000      	beq.n	800129e <HAL_RCC_OscConfig+0x2c6>
 800129c:	e075      	b.n	800138a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e074      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x2e0>
 80012aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012ac:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012b0:	2101      	movs	r1, #1
 80012b2:	430a      	orrs	r2, r1
 80012b4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012b6:	e01c      	b.n	80012f2 <HAL_RCC_OscConfig+0x31a>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d10c      	bne.n	80012da <HAL_RCC_OscConfig+0x302>
 80012c0:	4b15      	ldr	r3, [pc, #84]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012c2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012c4:	4b14      	ldr	r3, [pc, #80]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012c6:	2104      	movs	r1, #4
 80012c8:	430a      	orrs	r2, r1
 80012ca:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012cc:	4b12      	ldr	r3, [pc, #72]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012ce:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012d2:	2101      	movs	r1, #1
 80012d4:	430a      	orrs	r2, r1
 80012d6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012d8:	e00b      	b.n	80012f2 <HAL_RCC_OscConfig+0x31a>
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012dc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012de:	4b0e      	ldr	r3, [pc, #56]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012e0:	2101      	movs	r1, #1
 80012e2:	438a      	bics	r2, r1
 80012e4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80012ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001318 <HAL_RCC_OscConfig+0x340>)
 80012ec:	2104      	movs	r1, #4
 80012ee:	438a      	bics	r2, r1
 80012f0:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d028      	beq.n	800134c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fa:	f7ff fb07 	bl	800090c <HAL_GetTick>
 80012fe:	0003      	movs	r3, r0
 8001300:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f7ff fb02 	bl	800090c <HAL_GetTick>
 8001308:	0002      	movs	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	4a0b      	ldr	r2, [pc, #44]	@ (800133c <HAL_RCC_OscConfig+0x364>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d915      	bls.n	8001340 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e039      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
 8001318:	40021000 	.word	0x40021000
 800131c:	fffeffff 	.word	0xfffeffff
 8001320:	fffbffff 	.word	0xfffbffff
 8001324:	ffff80ff 	.word	0xffff80ff
 8001328:	ffffc7ff 	.word	0xffffc7ff
 800132c:	02dc6c00 	.word	0x02dc6c00
 8001330:	20000000 	.word	0x20000000
 8001334:	20000004 	.word	0x20000004
 8001338:	fffffeff 	.word	0xfffffeff
 800133c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001340:	4b14      	ldr	r3, [pc, #80]	@ (8001394 <HAL_RCC_OscConfig+0x3bc>)
 8001342:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001344:	2202      	movs	r2, #2
 8001346:	4013      	ands	r3, r2
 8001348:	d0dc      	beq.n	8001304 <HAL_RCC_OscConfig+0x32c>
 800134a:	e013      	b.n	8001374 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134c:	f7ff fade 	bl	800090c <HAL_GetTick>
 8001350:	0003      	movs	r3, r0
 8001352:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001354:	e009      	b.n	800136a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001356:	f7ff fad9 	bl	800090c <HAL_GetTick>
 800135a:	0002      	movs	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	4a0d      	ldr	r2, [pc, #52]	@ (8001398 <HAL_RCC_OscConfig+0x3c0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e010      	b.n	800138c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_RCC_OscConfig+0x3bc>)
 800136c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800136e:	2202      	movs	r2, #2
 8001370:	4013      	ands	r3, r2
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001374:	230f      	movs	r3, #15
 8001376:	18fb      	adds	r3, r7, r3
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d105      	bne.n	800138a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800137e:	4b05      	ldr	r3, [pc, #20]	@ (8001394 <HAL_RCC_OscConfig+0x3bc>)
 8001380:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001382:	4b04      	ldr	r3, [pc, #16]	@ (8001394 <HAL_RCC_OscConfig+0x3bc>)
 8001384:	4905      	ldr	r1, [pc, #20]	@ (800139c <HAL_RCC_OscConfig+0x3c4>)
 8001386:	400a      	ands	r2, r1
 8001388:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	0018      	movs	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	b006      	add	sp, #24
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40021000 	.word	0x40021000
 8001398:	00001388 	.word	0x00001388
 800139c:	efffffff 	.word	0xefffffff

080013a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
 80013a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0e9      	b.n	8001588 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013b4:	4b76      	ldr	r3, [pc, #472]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2207      	movs	r2, #7
 80013ba:	4013      	ands	r3, r2
 80013bc:	683a      	ldr	r2, [r7, #0]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d91e      	bls.n	8001400 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013c2:	4b73      	ldr	r3, [pc, #460]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2207      	movs	r2, #7
 80013c8:	4393      	bics	r3, r2
 80013ca:	0019      	movs	r1, r3
 80013cc:	4b70      	ldr	r3, [pc, #448]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80013ce:	683a      	ldr	r2, [r7, #0]
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80013d4:	f7ff fa9a 	bl	800090c <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013dc:	e009      	b.n	80013f2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80013de:	f7ff fa95 	bl	800090c <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	4a6a      	ldr	r2, [pc, #424]	@ (8001594 <HAL_RCC_ClockConfig+0x1f4>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0ca      	b.n	8001588 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80013f2:	4b67      	ldr	r3, [pc, #412]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2207      	movs	r2, #7
 80013f8:	4013      	ands	r3, r2
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d1ee      	bne.n	80013de <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2202      	movs	r2, #2
 8001406:	4013      	ands	r3, r2
 8001408:	d017      	beq.n	800143a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2204      	movs	r2, #4
 8001410:	4013      	ands	r3, r2
 8001412:	d008      	beq.n	8001426 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001414:	4b60      	ldr	r3, [pc, #384]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	4a60      	ldr	r2, [pc, #384]	@ (800159c <HAL_RCC_ClockConfig+0x1fc>)
 800141a:	401a      	ands	r2, r3
 800141c:	4b5e      	ldr	r3, [pc, #376]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 800141e:	21b0      	movs	r1, #176	@ 0xb0
 8001420:	0109      	lsls	r1, r1, #4
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001426:	4b5c      	ldr	r3, [pc, #368]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	4a5d      	ldr	r2, [pc, #372]	@ (80015a0 <HAL_RCC_ClockConfig+0x200>)
 800142c:	4013      	ands	r3, r2
 800142e:	0019      	movs	r1, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68da      	ldr	r2, [r3, #12]
 8001434:	4b58      	ldr	r3, [pc, #352]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001436:	430a      	orrs	r2, r1
 8001438:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2201      	movs	r2, #1
 8001440:	4013      	ands	r3, r2
 8001442:	d055      	beq.n	80014f0 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001444:	4b54      	ldr	r3, [pc, #336]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	221c      	movs	r2, #28
 800144a:	4393      	bics	r3, r2
 800144c:	0019      	movs	r1, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	4b51      	ldr	r3, [pc, #324]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d107      	bne.n	8001470 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001460:	4b4d      	ldr	r3, [pc, #308]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	2380      	movs	r3, #128	@ 0x80
 8001466:	029b      	lsls	r3, r3, #10
 8001468:	4013      	ands	r3, r2
 800146a:	d11f      	bne.n	80014ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800146c:	2301      	movs	r3, #1
 800146e:	e08b      	b.n	8001588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d107      	bne.n	8001488 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001478:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	2380      	movs	r3, #128	@ 0x80
 800147e:	00db      	lsls	r3, r3, #3
 8001480:	4013      	ands	r3, r2
 8001482:	d113      	bne.n	80014ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001484:	2301      	movs	r3, #1
 8001486:	e07f      	b.n	8001588 <HAL_RCC_ClockConfig+0x1e8>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	2b03      	cmp	r3, #3
 800148e:	d106      	bne.n	800149e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001490:	4b41      	ldr	r3, [pc, #260]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001492:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001494:	2202      	movs	r2, #2
 8001496:	4013      	ands	r3, r2
 8001498:	d108      	bne.n	80014ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e074      	b.n	8001588 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800149e:	4b3e      	ldr	r3, [pc, #248]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 80014a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a2:	2202      	movs	r2, #2
 80014a4:	4013      	ands	r3, r2
 80014a6:	d101      	bne.n	80014ac <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e06d      	b.n	8001588 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80014ac:	4b3a      	ldr	r3, [pc, #232]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2207      	movs	r2, #7
 80014b2:	4393      	bics	r3, r2
 80014b4:	0019      	movs	r1, r3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4b37      	ldr	r3, [pc, #220]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 80014bc:	430a      	orrs	r2, r1
 80014be:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014c0:	f7ff fa24 	bl	800090c <HAL_GetTick>
 80014c4:	0003      	movs	r3, r0
 80014c6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c8:	e009      	b.n	80014de <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80014ca:	f7ff fa1f 	bl	800090c <HAL_GetTick>
 80014ce:	0002      	movs	r2, r0
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	4a2f      	ldr	r2, [pc, #188]	@ (8001594 <HAL_RCC_ClockConfig+0x1f4>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e054      	b.n	8001588 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014de:	4b2e      	ldr	r3, [pc, #184]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 80014e0:	689b      	ldr	r3, [r3, #8]
 80014e2:	2238      	movs	r2, #56	@ 0x38
 80014e4:	401a      	ands	r2, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	00db      	lsls	r3, r3, #3
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d1ec      	bne.n	80014ca <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014f0:	4b27      	ldr	r3, [pc, #156]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2207      	movs	r2, #7
 80014f6:	4013      	ands	r3, r2
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	d21e      	bcs.n	800153c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fe:	4b24      	ldr	r3, [pc, #144]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2207      	movs	r2, #7
 8001504:	4393      	bics	r3, r2
 8001506:	0019      	movs	r1, r3
 8001508:	4b21      	ldr	r3, [pc, #132]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001510:	f7ff f9fc 	bl	800090c <HAL_GetTick>
 8001514:	0003      	movs	r3, r0
 8001516:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001518:	e009      	b.n	800152e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800151a:	f7ff f9f7 	bl	800090c <HAL_GetTick>
 800151e:	0002      	movs	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <HAL_RCC_ClockConfig+0x1f4>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d901      	bls.n	800152e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e02c      	b.n	8001588 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800152e:	4b18      	ldr	r3, [pc, #96]	@ (8001590 <HAL_RCC_ClockConfig+0x1f0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2207      	movs	r2, #7
 8001534:	4013      	ands	r3, r2
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	429a      	cmp	r2, r3
 800153a:	d1ee      	bne.n	800151a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2204      	movs	r2, #4
 8001542:	4013      	ands	r3, r2
 8001544:	d009      	beq.n	800155a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001546:	4b14      	ldr	r3, [pc, #80]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4a16      	ldr	r2, [pc, #88]	@ (80015a4 <HAL_RCC_ClockConfig+0x204>)
 800154c:	4013      	ands	r3, r2
 800154e:	0019      	movs	r1, r3
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691a      	ldr	r2, [r3, #16]
 8001554:	4b10      	ldr	r3, [pc, #64]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001556:	430a      	orrs	r2, r1
 8001558:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800155a:	f000 f82b 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 800155e:	0001      	movs	r1, r0
 8001560:	4b0d      	ldr	r3, [pc, #52]	@ (8001598 <HAL_RCC_ClockConfig+0x1f8>)
 8001562:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	220f      	movs	r2, #15
 8001568:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800156a:	4b0f      	ldr	r3, [pc, #60]	@ (80015a8 <HAL_RCC_ClockConfig+0x208>)
 800156c:	0092      	lsls	r2, r2, #2
 800156e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001570:	221f      	movs	r2, #31
 8001572:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001574:	000a      	movs	r2, r1
 8001576:	40da      	lsrs	r2, r3
 8001578:	4b0c      	ldr	r3, [pc, #48]	@ (80015ac <HAL_RCC_ClockConfig+0x20c>)
 800157a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800157c:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <HAL_RCC_ClockConfig+0x210>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	0018      	movs	r0, r3
 8001582:	f7ff f967 	bl	8000854 <HAL_InitTick>
 8001586:	0003      	movs	r3, r0
}
 8001588:	0018      	movs	r0, r3
 800158a:	46bd      	mov	sp, r7
 800158c:	b004      	add	sp, #16
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40022000 	.word	0x40022000
 8001594:	00001388 	.word	0x00001388
 8001598:	40021000 	.word	0x40021000
 800159c:	ffff84ff 	.word	0xffff84ff
 80015a0:	fffff0ff 	.word	0xfffff0ff
 80015a4:	ffff8fff 	.word	0xffff8fff
 80015a8:	08003e4c 	.word	0x08003e4c
 80015ac:	20000000 	.word	0x20000000
 80015b0:	20000004 	.word	0x20000004

080015b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
 80015ba:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	089b      	lsrs	r3, r3, #2
 80015c0:	2207      	movs	r2, #7
 80015c2:	4013      	ands	r3, r2
 80015c4:	3301      	adds	r3, #1
 80015c6:	60bb      	str	r3, [r7, #8]
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	2238      	movs	r2, #56	@ 0x38
 80015ce:	4013      	ands	r3, r2
 80015d0:	d10f      	bne.n	80015f2 <HAL_RCC_GetSysClockFreq+0x3e>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80015d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	0adb      	lsrs	r3, r3, #11
 80015d8:	2207      	movs	r2, #7
 80015da:	4013      	ands	r3, r2
 80015dc:	2201      	movs	r2, #1
 80015de:	409a      	lsls	r2, r3
 80015e0:	0013      	movs	r3, r2
 80015e2:	607b      	str	r3, [r7, #4]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80015e4:	6879      	ldr	r1, [r7, #4]
 80015e6:	4819      	ldr	r0, [pc, #100]	@ (800164c <HAL_RCC_GetSysClockFreq+0x98>)
 80015e8:	f7fe fd8e 	bl	8000108 <__udivsi3>
 80015ec:	0003      	movs	r3, r0
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	e01e      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015f2:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	2238      	movs	r2, #56	@ 0x38
 80015f8:	4013      	ands	r3, r2
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d102      	bne.n	8001604 <HAL_RCC_GetSysClockFreq+0x50>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015fe:	4b14      	ldr	r3, [pc, #80]	@ (8001650 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e015      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001604:	4b10      	ldr	r3, [pc, #64]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	2238      	movs	r2, #56	@ 0x38
 800160a:	4013      	ands	r3, r2
 800160c:	2b20      	cmp	r3, #32
 800160e:	d103      	bne.n	8001618 <HAL_RCC_GetSysClockFreq+0x64>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001610:	2380      	movs	r3, #128	@ 0x80
 8001612:	021b      	lsls	r3, r3, #8
 8001614:	60fb      	str	r3, [r7, #12]
 8001616:	e00b      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x7c>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001618:	4b0b      	ldr	r3, [pc, #44]	@ (8001648 <HAL_RCC_GetSysClockFreq+0x94>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2238      	movs	r2, #56	@ 0x38
 800161e:	4013      	ands	r3, r2
 8001620:	2b18      	cmp	r3, #24
 8001622:	d103      	bne.n	800162c <HAL_RCC_GetSysClockFreq+0x78>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001624:	23fa      	movs	r3, #250	@ 0xfa
 8001626:	01db      	lsls	r3, r3, #7
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	e001      	b.n	8001630 <HAL_RCC_GetSysClockFreq+0x7c>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	68f8      	ldr	r0, [r7, #12]
 8001634:	f7fe fd68 	bl	8000108 <__udivsi3>
 8001638:	0003      	movs	r3, r0
 800163a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800163c:	68fb      	ldr	r3, [r7, #12]
}
 800163e:	0018      	movs	r0, r3
 8001640:	46bd      	mov	sp, r7
 8001642:	b004      	add	sp, #16
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	40021000 	.word	0x40021000
 800164c:	02dc6c00 	.word	0x02dc6c00
 8001650:	007a1200 	.word	0x007a1200

08001654 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001658:	f7ff ffac 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 800165c:	0001      	movs	r1, r0
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_RCC_GetHCLKFreq+0x30>)
 8001660:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001662:	0a1b      	lsrs	r3, r3, #8
 8001664:	220f      	movs	r2, #15
 8001666:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001668:	4b07      	ldr	r3, [pc, #28]	@ (8001688 <HAL_RCC_GetHCLKFreq+0x34>)
 800166a:	0092      	lsls	r2, r2, #2
 800166c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800166e:	221f      	movs	r2, #31
 8001670:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001672:	000a      	movs	r2, r1
 8001674:	40da      	lsrs	r2, r3
 8001676:	4b05      	ldr	r3, [pc, #20]	@ (800168c <HAL_RCC_GetHCLKFreq+0x38>)
 8001678:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800167a:	4b04      	ldr	r3, [pc, #16]	@ (800168c <HAL_RCC_GetHCLKFreq+0x38>)
 800167c:	681b      	ldr	r3, [r3, #0]
}
 800167e:	0018      	movs	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40021000 	.word	0x40021000
 8001688:	08003e4c 	.word	0x08003e4c
 800168c:	20000000 	.word	0x20000000

08001690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8001694:	f7ff ffde 	bl	8001654 <HAL_RCC_GetHCLKFreq>
 8001698:	0001      	movs	r1, r0
 800169a:	4b07      	ldr	r3, [pc, #28]	@ (80016b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	0b1b      	lsrs	r3, r3, #12
 80016a0:	2207      	movs	r2, #7
 80016a2:	401a      	ands	r2, r3
 80016a4:	4b05      	ldr	r3, [pc, #20]	@ (80016bc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80016a6:	0092      	lsls	r2, r2, #2
 80016a8:	58d3      	ldr	r3, [r2, r3]
 80016aa:	221f      	movs	r2, #31
 80016ac:	4013      	ands	r3, r2
 80016ae:	40d9      	lsrs	r1, r3
 80016b0:	000b      	movs	r3, r1
}
 80016b2:	0018      	movs	r0, r3
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	40021000 	.word	0x40021000
 80016bc:	08003e8c 	.word	0x08003e8c

080016c0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80016c8:	2313      	movs	r3, #19
 80016ca:	18fb      	adds	r3, r7, r3
 80016cc:	2200      	movs	r2, #0
 80016ce:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80016d0:	2312      	movs	r3, #18
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	2200      	movs	r2, #0
 80016d6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2240      	movs	r2, #64	@ 0x40
 80016de:	4013      	ands	r3, r2
 80016e0:	d100      	bne.n	80016e4 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80016e2:	e079      	b.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e4:	2011      	movs	r0, #17
 80016e6:	183b      	adds	r3, r7, r0
 80016e8:	2200      	movs	r2, #0
 80016ea:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ec:	4b63      	ldr	r3, [pc, #396]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80016ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016f0:	2380      	movs	r3, #128	@ 0x80
 80016f2:	055b      	lsls	r3, r3, #21
 80016f4:	4013      	ands	r3, r2
 80016f6:	d110      	bne.n	800171a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	4b60      	ldr	r3, [pc, #384]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80016fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016fc:	4b5f      	ldr	r3, [pc, #380]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80016fe:	2180      	movs	r1, #128	@ 0x80
 8001700:	0549      	lsls	r1, r1, #21
 8001702:	430a      	orrs	r2, r1
 8001704:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001706:	4b5d      	ldr	r3, [pc, #372]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001708:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800170a:	2380      	movs	r3, #128	@ 0x80
 800170c:	055b      	lsls	r3, r3, #21
 800170e:	4013      	ands	r3, r2
 8001710:	60bb      	str	r3, [r7, #8]
 8001712:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001714:	183b      	adds	r3, r7, r0
 8001716:	2201      	movs	r2, #1
 8001718:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800171a:	4b58      	ldr	r3, [pc, #352]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800171c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800171e:	23c0      	movs	r3, #192	@ 0xc0
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	4013      	ands	r3, r2
 8001724:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d019      	beq.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	699b      	ldr	r3, [r3, #24]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	429a      	cmp	r2, r3
 8001734:	d014      	beq.n	8001760 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001736:	4b51      	ldr	r3, [pc, #324]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800173a:	4a51      	ldr	r2, [pc, #324]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800173c:	4013      	ands	r3, r2
 800173e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001740:	4b4e      	ldr	r3, [pc, #312]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001742:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001744:	4b4d      	ldr	r3, [pc, #308]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001746:	2180      	movs	r1, #128	@ 0x80
 8001748:	0249      	lsls	r1, r1, #9
 800174a:	430a      	orrs	r2, r1
 800174c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800174e:	4b4b      	ldr	r3, [pc, #300]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001750:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001752:	4b4a      	ldr	r3, [pc, #296]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001754:	494b      	ldr	r1, [pc, #300]	@ (8001884 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001756:	400a      	ands	r2, r1
 8001758:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800175a:	4b48      	ldr	r3, [pc, #288]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800175c:	697a      	ldr	r2, [r7, #20]
 800175e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	2201      	movs	r2, #1
 8001764:	4013      	ands	r3, r2
 8001766:	d016      	beq.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff f8d0 	bl	800090c <HAL_GetTick>
 800176c:	0003      	movs	r3, r0
 800176e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001770:	e00c      	b.n	800178c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff f8cb 	bl	800090c <HAL_GetTick>
 8001776:	0002      	movs	r2, r0
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	4a42      	ldr	r2, [pc, #264]	@ (8001888 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d904      	bls.n	800178c <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001782:	2313      	movs	r3, #19
 8001784:	18fb      	adds	r3, r7, r3
 8001786:	2203      	movs	r2, #3
 8001788:	701a      	strb	r2, [r3, #0]
          break;
 800178a:	e004      	b.n	8001796 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800178c:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800178e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001790:	2202      	movs	r2, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d0ed      	beq.n	8001772 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001796:	2313      	movs	r3, #19
 8001798:	18fb      	adds	r3, r7, r3
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10a      	bne.n	80017b6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80017a0:	4b36      	ldr	r3, [pc, #216]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a4:	4a36      	ldr	r2, [pc, #216]	@ (8001880 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80017a6:	4013      	ands	r3, r2
 80017a8:	0019      	movs	r1, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	699a      	ldr	r2, [r3, #24]
 80017ae:	4b33      	ldr	r3, [pc, #204]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017b0:	430a      	orrs	r2, r1
 80017b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80017b4:	e005      	b.n	80017c2 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80017b6:	2312      	movs	r3, #18
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	2213      	movs	r2, #19
 80017bc:	18ba      	adds	r2, r7, r2
 80017be:	7812      	ldrb	r2, [r2, #0]
 80017c0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80017c2:	2311      	movs	r3, #17
 80017c4:	18fb      	adds	r3, r7, r3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d105      	bne.n	80017d8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017cc:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80017d0:	4b2a      	ldr	r3, [pc, #168]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017d2:	492e      	ldr	r1, [pc, #184]	@ (800188c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80017d4:	400a      	ands	r2, r1
 80017d6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2201      	movs	r2, #1
 80017de:	4013      	ands	r3, r2
 80017e0:	d009      	beq.n	80017f6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80017e2:	4b26      	ldr	r3, [pc, #152]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e6:	2203      	movs	r2, #3
 80017e8:	4393      	bics	r3, r2
 80017ea:	0019      	movs	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4b22      	ldr	r3, [pc, #136]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80017f2:	430a      	orrs	r2, r1
 80017f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	2202      	movs	r2, #2
 80017fc:	4013      	ands	r3, r2
 80017fe:	d009      	beq.n	8001814 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001800:	4b1e      	ldr	r3, [pc, #120]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001804:	4a22      	ldr	r2, [pc, #136]	@ (8001890 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001806:	4013      	ands	r3, r2
 8001808:	0019      	movs	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	68da      	ldr	r2, [r3, #12]
 800180e:	4b1b      	ldr	r3, [pc, #108]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001810:	430a      	orrs	r2, r1
 8001812:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2220      	movs	r2, #32
 800181a:	4013      	ands	r3, r2
 800181c:	d008      	beq.n	8001830 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800181e:	4b17      	ldr	r3, [pc, #92]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	0899      	lsrs	r1, r3, #2
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	695a      	ldr	r2, [r3, #20]
 800182a:	4b14      	ldr	r3, [pc, #80]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800182c:	430a      	orrs	r2, r1
 800182e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);

  }
#endif /* USB_DRD_FS */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2204      	movs	r2, #4
 8001836:	4013      	ands	r3, r2
 8001838:	d009      	beq.n	800184e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800183c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800183e:	4a15      	ldr	r2, [pc, #84]	@ (8001894 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001840:	4013      	ands	r3, r2
 8001842:	0019      	movs	r1, r3
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	4b0c      	ldr	r3, [pc, #48]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800184a:	430a      	orrs	r2, r1
 800184c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2280      	movs	r2, #128	@ 0x80
 8001854:	4013      	ands	r3, r2
 8001856:	d009      	beq.n	800186c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	22e0      	movs	r2, #224	@ 0xe0
 800185e:	4393      	bics	r3, r2
 8001860:	0019      	movs	r1, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685a      	ldr	r2, [r3, #4]
 8001866:	4b05      	ldr	r3, [pc, #20]	@ (800187c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001868:	430a      	orrs	r2, r1
 800186a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800186c:	2312      	movs	r3, #18
 800186e:	18fb      	adds	r3, r7, r3
 8001870:	781b      	ldrb	r3, [r3, #0]
}
 8001872:	0018      	movs	r0, r3
 8001874:	46bd      	mov	sp, r7
 8001876:	b006      	add	sp, #24
 8001878:	bd80      	pop	{r7, pc}
 800187a:	46c0      	nop			@ (mov r8, r8)
 800187c:	40021000 	.word	0x40021000
 8001880:	fffffcff 	.word	0xfffffcff
 8001884:	fffeffff 	.word	0xfffeffff
 8001888:	00001388 	.word	0x00001388
 800188c:	efffffff 	.word	0xefffffff
 8001890:	ffffcfff 	.word	0xffffcfff
 8001894:	ffff3fff 	.word	0xffff3fff

08001898 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80018a0:	230f      	movs	r3, #15
 80018a2:	18fb      	adds	r3, r7, r3
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d100      	bne.n	80018b0 <HAL_RTC_Init+0x18>
 80018ae:	e075      	b.n	800199c <HAL_RTC_Init+0x104>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2225      	movs	r2, #37	@ 0x25
 80018b4:	5c9b      	ldrb	r3, [r3, r2]
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d107      	bne.n	80018cc <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2224      	movs	r2, #36	@ 0x24
 80018c0:	2100      	movs	r1, #0
 80018c2:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	0018      	movs	r0, r3
 80018c8:	f7fe fea8 	bl	800061c <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2225      	movs	r2, #37	@ 0x25
 80018d0:	2102      	movs	r1, #2
 80018d2:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2210      	movs	r2, #16
 80018dc:	4013      	ands	r3, r2
 80018de:	2b10      	cmp	r3, #16
 80018e0:	d04f      	beq.n	8001982 <HAL_RTC_Init+0xea>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	22ca      	movs	r2, #202	@ 0xca
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2253      	movs	r2, #83	@ 0x53
 80018f0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80018f2:	250f      	movs	r5, #15
 80018f4:	197c      	adds	r4, r7, r5
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	0018      	movs	r0, r3
 80018fa:	f000 fadd 	bl	8001eb8 <RTC_EnterInitMode>
 80018fe:	0003      	movs	r3, r0
 8001900:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 8001902:	0028      	movs	r0, r5
 8001904:	183b      	adds	r3, r7, r0
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d121      	bne.n	8001950 <HAL_RTC_Init+0xb8>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL));
 800190c:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <HAL_RTC_Init+0x114>)
 800190e:	699a      	ldr	r2, [r3, #24]
 8001910:	4b26      	ldr	r3, [pc, #152]	@ (80019ac <HAL_RTC_Init+0x114>)
 8001912:	4927      	ldr	r1, [pc, #156]	@ (80019b0 <HAL_RTC_Init+0x118>)
 8001914:	400a      	ands	r2, r1
 8001916:	619a      	str	r2, [r3, #24]

        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8001918:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <HAL_RTC_Init+0x114>)
 800191a:	6999      	ldr	r1, [r3, #24]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	699b      	ldr	r3, [r3, #24]
 800192a:	431a      	orrs	r2, r3
 800192c:	4b1f      	ldr	r3, [pc, #124]	@ (80019ac <HAL_RTC_Init+0x114>)
 800192e:	430a      	orrs	r2, r1
 8001930:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68d9      	ldr	r1, [r3, #12]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	041a      	lsls	r2, r3, #16
 800193c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ac <HAL_RTC_Init+0x114>)
 800193e:	430a      	orrs	r2, r1
 8001940:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8001942:	183c      	adds	r4, r7, r0
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	0018      	movs	r0, r3
 8001948:	f000 fafe 	bl	8001f48 <RTC_ExitInitMode>
 800194c:	0003      	movs	r3, r0
 800194e:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8001950:	230f      	movs	r3, #15
 8001952:	18fb      	adds	r3, r7, r3
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10e      	bne.n	8001978 <HAL_RTC_Init+0xe0>
      {
        MODIFY_REG(RTC->CR, \
 800195a:	4b14      	ldr	r3, [pc, #80]	@ (80019ac <HAL_RTC_Init+0x114>)
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	08d9      	lsrs	r1, r3, #3
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6a1a      	ldr	r2, [r3, #32]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	431a      	orrs	r2, r3
 8001972:	4b0e      	ldr	r3, [pc, #56]	@ (80019ac <HAL_RTC_Init+0x114>)
 8001974:	430a      	orrs	r2, r1
 8001976:	619a      	str	r2, [r3, #24]
                   RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN, \
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	22ff      	movs	r2, #255	@ 0xff
 800197e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001980:	e003      	b.n	800198a <HAL_RTC_Init+0xf2>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8001982:	230f      	movs	r3, #15
 8001984:	18fb      	adds	r3, r7, r3
 8001986:	2200      	movs	r2, #0
 8001988:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800198a:	230f      	movs	r3, #15
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d103      	bne.n	800199c <HAL_RTC_Init+0x104>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2225      	movs	r2, #37	@ 0x25
 8001998:	2101      	movs	r1, #1
 800199a:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 800199c:	230f      	movs	r3, #15
 800199e:	18fb      	adds	r3, r7, r3
 80019a0:	781b      	ldrb	r3, [r3, #0]
}
 80019a2:	0018      	movs	r0, r3
 80019a4:	46bd      	mov	sp, r7
 80019a6:	b004      	add	sp, #16
 80019a8:	bdb0      	pop	{r4, r5, r7, pc}
 80019aa:	46c0      	nop			@ (mov r8, r8)
 80019ac:	40002800 	.word	0x40002800
 80019b0:	ff8fffbf 	.word	0xff8fffbf

080019b4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80019b4:	b5b0      	push	{r4, r5, r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2224      	movs	r2, #36	@ 0x24
 80019c4:	5c9b      	ldrb	r3, [r3, r2]
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_RTC_SetTime+0x1a>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e092      	b.n	8001af4 <HAL_RTC_SetTime+0x140>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2224      	movs	r2, #36	@ 0x24
 80019d2:	2101      	movs	r1, #1
 80019d4:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2225      	movs	r2, #37	@ 0x25
 80019da:	2102      	movs	r1, #2
 80019dc:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	22ca      	movs	r2, #202	@ 0xca
 80019e4:	625a      	str	r2, [r3, #36]	@ 0x24
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	2253      	movs	r2, #83	@ 0x53
 80019ec:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80019ee:	2513      	movs	r5, #19
 80019f0:	197c      	adds	r4, r7, r5
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	0018      	movs	r0, r3
 80019f6:	f000 fa5f 	bl	8001eb8 <RTC_EnterInitMode>
 80019fa:	0003      	movs	r3, r0
 80019fc:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80019fe:	197b      	adds	r3, r7, r5
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d162      	bne.n	8001acc <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d125      	bne.n	8001a58 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	2240      	movs	r2, #64	@ 0x40
 8001a14:	4013      	ands	r3, r2
 8001a16:	d102      	bne.n	8001a1e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	0018      	movs	r0, r3
 8001a24:	f000 fad4 	bl	8001fd0 <RTC_ByteToBcd2>
 8001a28:	0003      	movs	r3, r0
 8001a2a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	785b      	ldrb	r3, [r3, #1]
 8001a30:	0018      	movs	r0, r3
 8001a32:	f000 facd 	bl	8001fd0 <RTC_ByteToBcd2>
 8001a36:	0003      	movs	r3, r0
 8001a38:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a3a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	789b      	ldrb	r3, [r3, #2]
 8001a40:	0018      	movs	r0, r3
 8001a42:	f000 fac5 	bl	8001fd0 <RTC_ByteToBcd2>
 8001a46:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a48:	0022      	movs	r2, r4
 8001a4a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	78db      	ldrb	r3, [r3, #3]
 8001a50:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
 8001a56:	e017      	b.n	8001a88 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2240      	movs	r2, #64	@ 0x40
 8001a60:	4013      	ands	r3, r2
 8001a62:	d102      	bne.n	8001a6a <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	2200      	movs	r2, #0
 8001a68:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	785b      	ldrb	r3, [r3, #1]
 8001a74:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a76:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8001a78:	68ba      	ldr	r2, [r7, #8]
 8001a7a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001a7c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	78db      	ldrb	r3, [r3, #3]
 8001a82:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	491b      	ldr	r1, [pc, #108]	@ (8001afc <HAL_RTC_SetTime+0x148>)
 8001a90:	400a      	ands	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	699a      	ldr	r2, [r3, #24]
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4918      	ldr	r1, [pc, #96]	@ (8001b00 <HAL_RTC_SetTime+0x14c>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6999      	ldr	r1, [r3, #24]
 8001aaa:	68bb      	ldr	r3, [r7, #8]
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001abc:	2313      	movs	r3, #19
 8001abe:	18fc      	adds	r4, r7, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f000 fa40 	bl	8001f48 <RTC_ExitInitMode>
 8001ac8:	0003      	movs	r3, r0
 8001aca:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	22ff      	movs	r2, #255	@ 0xff
 8001ad2:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001ad4:	2313      	movs	r3, #19
 8001ad6:	18fb      	adds	r3, r7, r3
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d103      	bne.n	8001ae6 <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2225      	movs	r2, #37	@ 0x25
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	2224      	movs	r2, #36	@ 0x24
 8001aea:	2100      	movs	r1, #0
 8001aec:	5499      	strb	r1, [r3, r2]

  return status;
 8001aee:	2313      	movs	r3, #19
 8001af0:	18fb      	adds	r3, r7, r3
 8001af2:	781b      	ldrb	r3, [r3, #0]
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b006      	add	sp, #24
 8001afa:	bdb0      	pop	{r4, r5, r7, pc}
 8001afc:	007f7f7f 	.word	0x007f7f7f
 8001b00:	fffbffff 	.word	0xfffbffff

08001b04 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2224      	movs	r2, #36	@ 0x24
 8001b14:	5c9b      	ldrb	r3, [r3, r2]
 8001b16:	2b01      	cmp	r3, #1
 8001b18:	d101      	bne.n	8001b1e <HAL_RTC_SetDate+0x1a>
 8001b1a:	2302      	movs	r3, #2
 8001b1c:	e07e      	b.n	8001c1c <HAL_RTC_SetDate+0x118>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2224      	movs	r2, #36	@ 0x24
 8001b22:	2101      	movs	r1, #1
 8001b24:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2225      	movs	r2, #37	@ 0x25
 8001b2a:	2102      	movs	r1, #2
 8001b2c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d10e      	bne.n	8001b52 <HAL_RTC_SetDate+0x4e>
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	785b      	ldrb	r3, [r3, #1]
 8001b38:	001a      	movs	r2, r3
 8001b3a:	2310      	movs	r3, #16
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d008      	beq.n	8001b52 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	785b      	ldrb	r3, [r3, #1]
 8001b44:	2210      	movs	r2, #16
 8001b46:	4393      	bics	r3, r2
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	330a      	adds	r3, #10
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d11c      	bne.n	8001b92 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	78db      	ldrb	r3, [r3, #3]
 8001b5c:	0018      	movs	r0, r3
 8001b5e:	f000 fa37 	bl	8001fd0 <RTC_ByteToBcd2>
 8001b62:	0003      	movs	r3, r0
 8001b64:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	785b      	ldrb	r3, [r3, #1]
 8001b6a:	0018      	movs	r0, r3
 8001b6c:	f000 fa30 	bl	8001fd0 <RTC_ByteToBcd2>
 8001b70:	0003      	movs	r3, r0
 8001b72:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b74:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	789b      	ldrb	r3, [r3, #2]
 8001b7a:	0018      	movs	r0, r3
 8001b7c:	f000 fa28 	bl	8001fd0 <RTC_ByteToBcd2>
 8001b80:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8001b82:	0022      	movs	r2, r4
 8001b84:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	e00e      	b.n	8001bb0 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	78db      	ldrb	r3, [r3, #3]
 8001b96:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	785b      	ldrb	r3, [r3, #1]
 8001b9c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001b9e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8001ba0:	68ba      	ldr	r2, [r7, #8]
 8001ba2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8001ba4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8001bac:	4313      	orrs	r3, r2
 8001bae:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	22ca      	movs	r2, #202	@ 0xca
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2253      	movs	r2, #83	@ 0x53
 8001bbe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001bc0:	2513      	movs	r5, #19
 8001bc2:	197c      	adds	r4, r7, r5
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 f976 	bl	8001eb8 <RTC_EnterInitMode>
 8001bcc:	0003      	movs	r3, r0
 8001bce:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8001bd0:	0028      	movs	r0, r5
 8001bd2:	183b      	adds	r3, r7, r0
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d10c      	bne.n	8001bf4 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	697a      	ldr	r2, [r7, #20]
 8001be0:	4910      	ldr	r1, [pc, #64]	@ (8001c24 <HAL_RTC_SetDate+0x120>)
 8001be2:	400a      	ands	r2, r1
 8001be4:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001be6:	183c      	adds	r4, r7, r0
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	0018      	movs	r0, r3
 8001bec:	f000 f9ac 	bl	8001f48 <RTC_ExitInitMode>
 8001bf0:	0003      	movs	r3, r0
 8001bf2:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	22ff      	movs	r2, #255	@ 0xff
 8001bfa:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8001bfc:	2313      	movs	r3, #19
 8001bfe:	18fb      	adds	r3, r7, r3
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d103      	bne.n	8001c0e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2225      	movs	r2, #37	@ 0x25
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2224      	movs	r2, #36	@ 0x24
 8001c12:	2100      	movs	r1, #0
 8001c14:	5499      	strb	r1, [r3, r2]

  return status;
 8001c16:	2313      	movs	r3, #19
 8001c18:	18fb      	adds	r3, r7, r3
 8001c1a:	781b      	ldrb	r3, [r3, #0]
}
 8001c1c:	0018      	movs	r0, r3
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b006      	add	sp, #24
 8001c22:	bdb0      	pop	{r4, r5, r7, pc}
 8001c24:	00ffff3f 	.word	0x00ffff3f

08001c28 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b089      	sub	sp, #36	@ 0x24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2224      	movs	r2, #36	@ 0x24
 8001c38:	5c9b      	ldrb	r3, [r3, r2]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_RTC_SetAlarm_IT+0x1a>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e0d6      	b.n	8001df0 <HAL_RTC_SetAlarm_IT+0x1c8>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2224      	movs	r2, #36	@ 0x24
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2225      	movs	r2, #37	@ 0x25
 8001c4e:	2102      	movs	r1, #2
 8001c50:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d136      	bne.n	8001cc6 <HAL_RTC_SetAlarm_IT+0x9e>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2240      	movs	r2, #64	@ 0x40
 8001c60:	4013      	ands	r3, r2
 8001c62:	d102      	bne.n	8001c6a <HAL_RTC_SetAlarm_IT+0x42>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2200      	movs	r2, #0
 8001c68:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	0018      	movs	r0, r3
 8001c70:	f000 f9ae 	bl	8001fd0 <RTC_ByteToBcd2>
 8001c74:	0003      	movs	r3, r0
 8001c76:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	785b      	ldrb	r3, [r3, #1]
 8001c7c:	0018      	movs	r0, r3
 8001c7e:	f000 f9a7 	bl	8001fd0 <RTC_ByteToBcd2>
 8001c82:	0003      	movs	r3, r0
 8001c84:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001c86:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	789b      	ldrb	r3, [r3, #2]
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	f000 f99f 	bl	8001fd0 <RTC_ByteToBcd2>
 8001c92:	0003      	movs	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001c94:	0022      	movs	r2, r4
 8001c96:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	78db      	ldrb	r3, [r3, #3]
 8001c9c:	059b      	lsls	r3, r3, #22
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	0014      	movs	r4, r2
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2220      	movs	r2, #32
 8001ca6:	5c9b      	ldrb	r3, [r3, r2]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f000 f991 	bl	8001fd0 <RTC_ByteToBcd2>
 8001cae:	0003      	movs	r3, r0
 8001cb0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001cb2:	0022      	movs	r2, r4
 8001cb4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001cba:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61fb      	str	r3, [r7, #28]
 8001cc4:	e022      	b.n	8001d0c <HAL_RTC_SetAlarm_IT+0xe4>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	2240      	movs	r2, #64	@ 0x40
 8001cce:	4013      	ands	r3, r2
 8001cd0:	d102      	bne.n	8001cd8 <HAL_RTC_SetAlarm_IT+0xb0>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	785b      	ldrb	r3, [r3, #1]
 8001ce2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001ce4:	4313      	orrs	r3, r2
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001ce6:	68ba      	ldr	r2, [r7, #8]
 8001ce8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8001cea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	78db      	ldrb	r3, [r3, #3]
 8001cf0:	059b      	lsls	r3, r3, #22
              ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8001cf2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	2120      	movs	r1, #32
 8001cf8:	5c5b      	ldrb	r3, [r3, r1]
 8001cfa:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8001cfc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8001d02:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8001d08:	4313      	orrs	r3, r2
 8001d0a:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	22ca      	movs	r2, #202	@ 0xca
 8001d1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2253      	movs	r2, #83	@ 0x53
 8001d26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d2c:	2380      	movs	r3, #128	@ 0x80
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d147      	bne.n	8001dc4 <HAL_RTC_SetAlarm_IT+0x19c>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	699a      	ldr	r2, [r3, #24]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	492e      	ldr	r1, [pc, #184]	@ (8001df8 <HAL_RTC_SetAlarm_IT+0x1d0>)
 8001d40:	400a      	ands	r2, r1
 8001d42:	619a      	str	r2, [r3, #24]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2201      	movs	r2, #1
 8001d4a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tickstart = HAL_GetTick();
 8001d4c:	f7fe fdde 	bl	800090c <HAL_GetTick>
 8001d50:	0003      	movs	r3, r0
 8001d52:	617b      	str	r3, [r7, #20]
    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001d54:	e016      	b.n	8001d84 <HAL_RTC_SetAlarm_IT+0x15c>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001d56:	f7fe fdd9 	bl	800090c <HAL_GetTick>
 8001d5a:	0002      	movs	r2, r0
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	1ad2      	subs	r2, r2, r3
 8001d60:	23fa      	movs	r3, #250	@ 0xfa
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d90d      	bls.n	8001d84 <HAL_RTC_SetAlarm_IT+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	22ff      	movs	r2, #255	@ 0xff
 8001d6e:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2225      	movs	r2, #37	@ 0x25
 8001d74:	2103      	movs	r1, #3
 8001d76:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	2224      	movs	r2, #36	@ 0x24
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e035      	b.n	8001df0 <HAL_RTC_SetAlarm_IT+0x1c8>
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == 0U)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	68db      	ldr	r3, [r3, #12]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4013      	ands	r3, r2
 8001d8e:	d0e2      	beq.n	8001d56 <HAL_RTC_SetAlarm_IT+0x12e>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699a      	ldr	r2, [r3, #24]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	2180      	movs	r1, #128	@ 0x80
 8001dac:	0049      	lsls	r1, r1, #1
 8001dae:	430a      	orrs	r2, r1
 8001db0:	619a      	str	r2, [r3, #24]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRA);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	699a      	ldr	r2, [r3, #24]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	2180      	movs	r1, #128	@ 0x80
 8001dbe:	0149      	lsls	r1, r1, #5
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	619a      	str	r2, [r3, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8001dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8001dfc <HAL_RTC_SetAlarm_IT+0x1d4>)
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	58d3      	ldr	r3, [r2, r3]
 8001dca:	490c      	ldr	r1, [pc, #48]	@ (8001dfc <HAL_RTC_SetAlarm_IT+0x1d4>)
 8001dcc:	2280      	movs	r2, #128	@ 0x80
 8001dce:	0312      	lsls	r2, r2, #12
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	2280      	movs	r2, #128	@ 0x80
 8001dd4:	508b      	str	r3, [r1, r2]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	22ff      	movs	r2, #255	@ 0xff
 8001ddc:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2225      	movs	r2, #37	@ 0x25
 8001de2:	2101      	movs	r1, #1
 8001de4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2224      	movs	r2, #36	@ 0x24
 8001dea:	2100      	movs	r1, #0
 8001dec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	0018      	movs	r0, r3
 8001df2:	46bd      	mov	sp, r7
 8001df4:	b009      	add	sp, #36	@ 0x24
 8001df6:	bd90      	pop	{r4, r7, pc}
 8001df8:	fffffeff 	.word	0xfffffeff
 8001dfc:	40021800 	.word	0x40021800

08001e00 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if (__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != 0U)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	699a      	ldr	r2, [r3, #24]
 8001e0e:	2380      	movs	r3, #128	@ 0x80
 8001e10:	015b      	lsls	r3, r3, #5
 8001e12:	4013      	ands	r3, r2
 8001e14:	d00d      	beq.n	8001e32 <HAL_RTC_AlarmIRQHandler+0x32>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != 0U)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	4013      	ands	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_RTC_AlarmIRQHandler+0x32>
    {
      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2201      	movs	r2, #1
 8001e28:	65da      	str	r2, [r3, #92]	@ 0x5c
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      /* Call Compare Match registered Callback */
      hrtc->AlarmAEventCallback(hrtc);
#else
      /* AlarmA callback */
      HAL_RTC_AlarmAEventCallback(hrtc);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f000 f808 	bl	8001e42 <HAL_RTC_AlarmAEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
    }
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2225      	movs	r2, #37	@ 0x25
 8001e36:	2101      	movs	r1, #1
 8001e38:	5499      	strb	r1, [r3, r2]
}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b002      	add	sp, #8
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_RTC_AlarmAEventCallback>:
  * @brief  Alarm A callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8001e4a:	46c0      	nop			@ (mov r8, r8)
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	b002      	add	sp, #8
 8001e50:	bd80      	pop	{r7, pc}
	...

08001e54 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8001e5c:	4b15      	ldr	r3, [pc, #84]	@ (8001eb4 <HAL_RTC_WaitForSynchro+0x60>)
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	4b14      	ldr	r3, [pc, #80]	@ (8001eb4 <HAL_RTC_WaitForSynchro+0x60>)
 8001e62:	2120      	movs	r1, #32
 8001e64:	438a      	bics	r2, r1
 8001e66:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8001e68:	f7fe fd50 	bl	800090c <HAL_GetTick>
 8001e6c:	0003      	movs	r3, r0
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8001e70:	e013      	b.n	8001e9a <HAL_RTC_WaitForSynchro+0x46>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8001e72:	f7fe fd4b 	bl	800090c <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad2      	subs	r2, r2, r3
 8001e7c:	23fa      	movs	r3, #250	@ 0xfa
 8001e7e:	009b      	lsls	r3, r3, #2
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d90a      	bls.n	8001e9a <HAL_RTC_WaitForSynchro+0x46>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8001e84:	4b0b      	ldr	r3, [pc, #44]	@ (8001eb4 <HAL_RTC_WaitForSynchro+0x60>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2220      	movs	r2, #32
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	d10b      	bne.n	8001ea6 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2225      	movs	r2, #37	@ 0x25
 8001e92:	2103      	movs	r1, #3
 8001e94:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e007      	b.n	8001eaa <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8001e9a:	4b06      	ldr	r3, [pc, #24]	@ (8001eb4 <HAL_RTC_WaitForSynchro+0x60>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d0e6      	beq.n	8001e72 <HAL_RTC_WaitForSynchro+0x1e>
 8001ea4:	e000      	b.n	8001ea8 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 8001ea6:	46c0      	nop			@ (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 8001ea8:	2300      	movs	r3, #0
}
 8001eaa:	0018      	movs	r0, r3
 8001eac:	46bd      	mov	sp, r7
 8001eae:	b004      	add	sp, #16
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	40002800 	.word	0x40002800

08001eb8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8001ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8001f44 <RTC_EnterInitMode+0x8c>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	2240      	movs	r2, #64	@ 0x40
 8001ece:	4013      	ands	r3, r2
 8001ed0:	d130      	bne.n	8001f34 <RTC_EnterInitMode+0x7c>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001ed2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f44 <RTC_EnterInitMode+0x8c>)
 8001ed4:	68da      	ldr	r2, [r3, #12]
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <RTC_EnterInitMode+0x8c>)
 8001ed8:	2180      	movs	r1, #128	@ 0x80
 8001eda:	430a      	orrs	r2, r1
 8001edc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8001ede:	f7fe fd15 	bl	800090c <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001ee6:	e019      	b.n	8001f1c <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8001ee8:	f7fe fd10 	bl	800090c <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	200f      	movs	r0, #15
 8001ef4:	183b      	adds	r3, r7, r0
 8001ef6:	1839      	adds	r1, r7, r0
 8001ef8:	7809      	ldrb	r1, [r1, #0]
 8001efa:	7019      	strb	r1, [r3, #0]
 8001efc:	23fa      	movs	r3, #250	@ 0xfa
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d90b      	bls.n	8001f1c <RTC_EnterInitMode+0x64>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8001f04:	4b0f      	ldr	r3, [pc, #60]	@ (8001f44 <RTC_EnterInitMode+0x8c>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	2240      	movs	r2, #64	@ 0x40
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	d111      	bne.n	8001f32 <RTC_EnterInitMode+0x7a>
        {
          status = HAL_TIMEOUT;
 8001f0e:	183b      	adds	r3, r7, r0
 8001f10:	2203      	movs	r2, #3
 8001f12:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2225      	movs	r2, #37	@ 0x25
 8001f18:	2103      	movs	r1, #3
 8001f1a:	5499      	strb	r1, [r3, r2]
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8001f1c:	4b09      	ldr	r3, [pc, #36]	@ (8001f44 <RTC_EnterInitMode+0x8c>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	2240      	movs	r2, #64	@ 0x40
 8001f22:	4013      	ands	r3, r2
 8001f24:	d106      	bne.n	8001f34 <RTC_EnterInitMode+0x7c>
 8001f26:	230f      	movs	r3, #15
 8001f28:	18fb      	adds	r3, r7, r3
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	2b03      	cmp	r3, #3
 8001f2e:	d1db      	bne.n	8001ee8 <RTC_EnterInitMode+0x30>
 8001f30:	e000      	b.n	8001f34 <RTC_EnterInitMode+0x7c>
        }
        else
        {
          break;
 8001f32:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }

  return status;
 8001f34:	230f      	movs	r3, #15
 8001f36:	18fb      	adds	r3, r7, r3
 8001f38:	781b      	ldrb	r3, [r3, #0]
}
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	b004      	add	sp, #16
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	46c0      	nop			@ (mov r8, r8)
 8001f44:	40002800 	.word	0x40002800

08001f48 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8001f48:	b590      	push	{r4, r7, lr}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f50:	240f      	movs	r4, #15
 8001f52:	193b      	adds	r3, r7, r4
 8001f54:	2200      	movs	r2, #0
 8001f56:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8001f58:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <RTC_ExitInitMode+0x84>)
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fcc <RTC_ExitInitMode+0x84>)
 8001f5e:	2180      	movs	r1, #128	@ 0x80
 8001f60:	438a      	bics	r2, r1
 8001f62:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <RTC_ExitInitMode+0x84>)
 8001f66:	699b      	ldr	r3, [r3, #24]
 8001f68:	2220      	movs	r2, #32
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d10d      	bne.n	8001f8a <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	0018      	movs	r0, r3
 8001f72:	f7ff ff6f 	bl	8001e54 <HAL_RTC_WaitForSynchro>
 8001f76:	1e03      	subs	r3, r0, #0
 8001f78:	d021      	beq.n	8001fbe <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2225      	movs	r2, #37	@ 0x25
 8001f7e:	2103      	movs	r1, #3
 8001f80:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001f82:	193b      	adds	r3, r7, r4
 8001f84:	2203      	movs	r2, #3
 8001f86:	701a      	strb	r2, [r3, #0]
 8001f88:	e019      	b.n	8001fbe <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001f8a:	4b10      	ldr	r3, [pc, #64]	@ (8001fcc <RTC_ExitInitMode+0x84>)
 8001f8c:	699a      	ldr	r2, [r3, #24]
 8001f8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001fcc <RTC_ExitInitMode+0x84>)
 8001f90:	2120      	movs	r1, #32
 8001f92:	438a      	bics	r2, r1
 8001f94:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f7ff ff5b 	bl	8001e54 <HAL_RTC_WaitForSynchro>
 8001f9e:	1e03      	subs	r3, r0, #0
 8001fa0:	d007      	beq.n	8001fb2 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2225      	movs	r2, #37	@ 0x25
 8001fa6:	2103      	movs	r1, #3
 8001fa8:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8001faa:	230f      	movs	r3, #15
 8001fac:	18fb      	adds	r3, r7, r3
 8001fae:	2203      	movs	r2, #3
 8001fb0:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8001fb2:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <RTC_ExitInitMode+0x84>)
 8001fb4:	699a      	ldr	r2, [r3, #24]
 8001fb6:	4b05      	ldr	r3, [pc, #20]	@ (8001fcc <RTC_ExitInitMode+0x84>)
 8001fb8:	2120      	movs	r1, #32
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	619a      	str	r2, [r3, #24]
  }

  return status;
 8001fbe:	230f      	movs	r3, #15
 8001fc0:	18fb      	adds	r3, r7, r3
 8001fc2:	781b      	ldrb	r3, [r3, #0]
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b005      	add	sp, #20
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	40002800 	.word	0x40002800

08001fd0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	0002      	movs	r2, r0
 8001fd8:	1dfb      	adds	r3, r7, #7
 8001fda:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8001fe0:	230b      	movs	r3, #11
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	1dfa      	adds	r2, r7, #7
 8001fe6:	7812      	ldrb	r2, [r2, #0]
 8001fe8:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8001fea:	e008      	b.n	8001ffe <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8001ff2:	220b      	movs	r2, #11
 8001ff4:	18bb      	adds	r3, r7, r2
 8001ff6:	18ba      	adds	r2, r7, r2
 8001ff8:	7812      	ldrb	r2, [r2, #0]
 8001ffa:	3a0a      	subs	r2, #10
 8001ffc:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8001ffe:	210b      	movs	r1, #11
 8002000:	187b      	adds	r3, r7, r1
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b09      	cmp	r3, #9
 8002006:	d8f1      	bhi.n	8001fec <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	b2db      	uxtb	r3, r3
 800200c:	011b      	lsls	r3, r3, #4
 800200e:	b2da      	uxtb	r2, r3
 8002010:	187b      	adds	r3, r7, r1
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4313      	orrs	r3, r2
 8002016:	b2db      	uxtb	r3, r3
}
 8002018:	0018      	movs	r0, r3
 800201a:	46bd      	mov	sp, r7
 800201c:	b004      	add	sp, #16
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d101      	bne.n	8002032 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e046      	b.n	80020c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2288      	movs	r2, #136	@ 0x88
 8002036:	589b      	ldr	r3, [r3, r2]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d107      	bne.n	800204c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2284      	movs	r2, #132	@ 0x84
 8002040:	2100      	movs	r1, #0
 8002042:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	0018      	movs	r0, r3
 8002048:	f7fe fb2e 	bl	80006a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2288      	movs	r2, #136	@ 0x88
 8002050:	2124      	movs	r1, #36	@ 0x24
 8002052:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2101      	movs	r1, #1
 8002060:	438a      	bics	r2, r1
 8002062:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	0018      	movs	r0, r3
 8002070:	f000 fe08 	bl	8002c84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 fc86 	bl	8002988 <UART_SetConfig>
 800207c:	0003      	movs	r3, r0
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e01c      	b.n	80020c0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	490d      	ldr	r1, [pc, #52]	@ (80020c8 <HAL_UART_Init+0xa8>)
 8002092:	400a      	ands	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	689a      	ldr	r2, [r3, #8]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	212a      	movs	r1, #42	@ 0x2a
 80020a2:	438a      	bics	r2, r1
 80020a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2101      	movs	r1, #1
 80020b2:	430a      	orrs	r2, r1
 80020b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	0018      	movs	r0, r3
 80020ba:	f000 fe97 	bl	8002dec <UART_CheckIdleState>
 80020be:	0003      	movs	r3, r0
}
 80020c0:	0018      	movs	r0, r3
 80020c2:	46bd      	mov	sp, r7
 80020c4:	b002      	add	sp, #8
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	ffffb7ff 	.word	0xffffb7ff

080020cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08a      	sub	sp, #40	@ 0x28
 80020d0:	af02      	add	r7, sp, #8
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	1dbb      	adds	r3, r7, #6
 80020da:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2288      	movs	r2, #136	@ 0x88
 80020e0:	589b      	ldr	r3, [r3, r2]
 80020e2:	2b20      	cmp	r3, #32
 80020e4:	d000      	beq.n	80020e8 <HAL_UART_Transmit+0x1c>
 80020e6:	e090      	b.n	800220a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d003      	beq.n	80020f6 <HAL_UART_Transmit+0x2a>
 80020ee:	1dbb      	adds	r3, r7, #6
 80020f0:	881b      	ldrh	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d101      	bne.n	80020fa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e088      	b.n	800220c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	2380      	movs	r3, #128	@ 0x80
 8002100:	015b      	lsls	r3, r3, #5
 8002102:	429a      	cmp	r2, r3
 8002104:	d109      	bne.n	800211a <HAL_UART_Transmit+0x4e>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	691b      	ldr	r3, [r3, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d105      	bne.n	800211a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2201      	movs	r2, #1
 8002112:	4013      	ands	r3, r2
 8002114:	d001      	beq.n	800211a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e078      	b.n	800220c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2290      	movs	r2, #144	@ 0x90
 800211e:	2100      	movs	r1, #0
 8002120:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2288      	movs	r2, #136	@ 0x88
 8002126:	2121      	movs	r1, #33	@ 0x21
 8002128:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800212a:	f7fe fbef 	bl	800090c <HAL_GetTick>
 800212e:	0003      	movs	r3, r0
 8002130:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	1dba      	adds	r2, r7, #6
 8002136:	2154      	movs	r1, #84	@ 0x54
 8002138:	8812      	ldrh	r2, [r2, #0]
 800213a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1dba      	adds	r2, r7, #6
 8002140:	2156      	movs	r1, #86	@ 0x56
 8002142:	8812      	ldrh	r2, [r2, #0]
 8002144:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	689a      	ldr	r2, [r3, #8]
 800214a:	2380      	movs	r3, #128	@ 0x80
 800214c:	015b      	lsls	r3, r3, #5
 800214e:	429a      	cmp	r2, r3
 8002150:	d108      	bne.n	8002164 <HAL_UART_Transmit+0x98>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	691b      	ldr	r3, [r3, #16]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d104      	bne.n	8002164 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 800215a:	2300      	movs	r3, #0
 800215c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	61bb      	str	r3, [r7, #24]
 8002162:	e003      	b.n	800216c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002168:	2300      	movs	r3, #0
 800216a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800216c:	e030      	b.n	80021d0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800216e:	697a      	ldr	r2, [r7, #20]
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	0013      	movs	r3, r2
 8002178:	2200      	movs	r2, #0
 800217a:	2180      	movs	r1, #128	@ 0x80
 800217c:	f000 fee0 	bl	8002f40 <UART_WaitOnFlagUntilTimeout>
 8002180:	1e03      	subs	r3, r0, #0
 8002182:	d005      	beq.n	8002190 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2288      	movs	r2, #136	@ 0x88
 8002188:	2120      	movs	r1, #32
 800218a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e03d      	b.n	800220c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d10b      	bne.n	80021ae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002196:	69bb      	ldr	r3, [r7, #24]
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	001a      	movs	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	05d2      	lsls	r2, r2, #23
 80021a2:	0dd2      	lsrs	r2, r2, #23
 80021a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	3302      	adds	r3, #2
 80021aa:	61bb      	str	r3, [r7, #24]
 80021ac:	e007      	b.n	80021be <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	781a      	ldrb	r2, [r3, #0]
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	3301      	adds	r3, #1
 80021bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2256      	movs	r2, #86	@ 0x56
 80021c2:	5a9b      	ldrh	r3, [r3, r2]
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	3b01      	subs	r3, #1
 80021c8:	b299      	uxth	r1, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2256      	movs	r2, #86	@ 0x56
 80021ce:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2256      	movs	r2, #86	@ 0x56
 80021d4:	5a9b      	ldrh	r3, [r3, r2]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1c8      	bne.n	800216e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	0013      	movs	r3, r2
 80021e6:	2200      	movs	r2, #0
 80021e8:	2140      	movs	r1, #64	@ 0x40
 80021ea:	f000 fea9 	bl	8002f40 <UART_WaitOnFlagUntilTimeout>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d005      	beq.n	80021fe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2288      	movs	r2, #136	@ 0x88
 80021f6:	2120      	movs	r1, #32
 80021f8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e006      	b.n	800220c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2288      	movs	r2, #136	@ 0x88
 8002202:	2120      	movs	r1, #32
 8002204:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002206:	2300      	movs	r3, #0
 8002208:	e000      	b.n	800220c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 800220a:	2302      	movs	r3, #2
  }
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b008      	add	sp, #32
 8002212:	bd80      	pop	{r7, pc}

08002214 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	1dbb      	adds	r3, r7, #6
 8002220:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	228c      	movs	r2, #140	@ 0x8c
 8002226:	589b      	ldr	r3, [r3, r2]
 8002228:	2b20      	cmp	r3, #32
 800222a:	d145      	bne.n	80022b8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d003      	beq.n	800223a <HAL_UART_Receive_IT+0x26>
 8002232:	1dbb      	adds	r3, r7, #6
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e03d      	b.n	80022ba <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	689a      	ldr	r2, [r3, #8]
 8002242:	2380      	movs	r3, #128	@ 0x80
 8002244:	015b      	lsls	r3, r3, #5
 8002246:	429a      	cmp	r2, r3
 8002248:	d109      	bne.n	800225e <HAL_UART_Receive_IT+0x4a>
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	691b      	ldr	r3, [r3, #16]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d105      	bne.n	800225e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	2201      	movs	r2, #1
 8002256:	4013      	ands	r3, r2
 8002258:	d001      	beq.n	800225e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e02d      	b.n	80022ba <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	2380      	movs	r3, #128	@ 0x80
 800226c:	041b      	lsls	r3, r3, #16
 800226e:	4013      	ands	r3, r2
 8002270:	d019      	beq.n	80022a6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002272:	f3ef 8310 	mrs	r3, PRIMASK
 8002276:	613b      	str	r3, [r7, #16]
  return(result);
 8002278:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800227a:	61fb      	str	r3, [r7, #28]
 800227c:	2301      	movs	r3, #1
 800227e:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f383 8810 	msr	PRIMASK, r3
}
 8002286:	46c0      	nop			@ (mov r8, r8)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2180      	movs	r1, #128	@ 0x80
 8002294:	04c9      	lsls	r1, r1, #19
 8002296:	430a      	orrs	r2, r1
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	f383 8810 	msr	PRIMASK, r3
}
 80022a4:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80022a6:	1dbb      	adds	r3, r7, #6
 80022a8:	881a      	ldrh	r2, [r3, #0]
 80022aa:	68b9      	ldr	r1, [r7, #8]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	0018      	movs	r0, r3
 80022b0:	f000 feb6 	bl	8003020 <UART_Start_Receive_IT>
 80022b4:	0003      	movs	r3, r0
 80022b6:	e000      	b.n	80022ba <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	0018      	movs	r0, r3
 80022bc:	46bd      	mov	sp, r7
 80022be:	b008      	add	sp, #32
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022c4:	b5b0      	push	{r4, r5, r7, lr}
 80022c6:	b0aa      	sub	sp, #168	@ 0xa8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	69db      	ldr	r3, [r3, #28]
 80022d2:	22a4      	movs	r2, #164	@ 0xa4
 80022d4:	18b9      	adds	r1, r7, r2
 80022d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	20a0      	movs	r0, #160	@ 0xa0
 80022e0:	1839      	adds	r1, r7, r0
 80022e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	249c      	movs	r4, #156	@ 0x9c
 80022ec:	1939      	adds	r1, r7, r4
 80022ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80022f0:	0011      	movs	r1, r2
 80022f2:	18bb      	adds	r3, r7, r2
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4aa2      	ldr	r2, [pc, #648]	@ (8002580 <HAL_UART_IRQHandler+0x2bc>)
 80022f8:	4013      	ands	r3, r2
 80022fa:	2298      	movs	r2, #152	@ 0x98
 80022fc:	18bd      	adds	r5, r7, r2
 80022fe:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002300:	18bb      	adds	r3, r7, r2
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d11a      	bne.n	800233e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002308:	187b      	adds	r3, r7, r1
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2220      	movs	r2, #32
 800230e:	4013      	ands	r3, r2
 8002310:	d015      	beq.n	800233e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002312:	183b      	adds	r3, r7, r0
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2220      	movs	r2, #32
 8002318:	4013      	ands	r3, r2
 800231a:	d105      	bne.n	8002328 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800231c:	193b      	adds	r3, r7, r4
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	2380      	movs	r3, #128	@ 0x80
 8002322:	055b      	lsls	r3, r3, #21
 8002324:	4013      	ands	r3, r2
 8002326:	d00a      	beq.n	800233e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800232c:	2b00      	cmp	r3, #0
 800232e:	d100      	bne.n	8002332 <HAL_UART_IRQHandler+0x6e>
 8002330:	e2fb      	b.n	800292a <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	0010      	movs	r0, r2
 800233a:	4798      	blx	r3
      }
      return;
 800233c:	e2f5      	b.n	800292a <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800233e:	2398      	movs	r3, #152	@ 0x98
 8002340:	18fb      	adds	r3, r7, r3
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d100      	bne.n	800234a <HAL_UART_IRQHandler+0x86>
 8002348:	e122      	b.n	8002590 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800234a:	239c      	movs	r3, #156	@ 0x9c
 800234c:	18fb      	adds	r3, r7, r3
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a8c      	ldr	r2, [pc, #560]	@ (8002584 <HAL_UART_IRQHandler+0x2c0>)
 8002352:	4013      	ands	r3, r2
 8002354:	d106      	bne.n	8002364 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002356:	23a0      	movs	r3, #160	@ 0xa0
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a8a      	ldr	r2, [pc, #552]	@ (8002588 <HAL_UART_IRQHandler+0x2c4>)
 800235e:	4013      	ands	r3, r2
 8002360:	d100      	bne.n	8002364 <HAL_UART_IRQHandler+0xa0>
 8002362:	e115      	b.n	8002590 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002364:	23a4      	movs	r3, #164	@ 0xa4
 8002366:	18fb      	adds	r3, r7, r3
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2201      	movs	r2, #1
 800236c:	4013      	ands	r3, r2
 800236e:	d012      	beq.n	8002396 <HAL_UART_IRQHandler+0xd2>
 8002370:	23a0      	movs	r3, #160	@ 0xa0
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	2380      	movs	r3, #128	@ 0x80
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4013      	ands	r3, r2
 800237c:	d00b      	beq.n	8002396 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2290      	movs	r2, #144	@ 0x90
 800238a:	589b      	ldr	r3, [r3, r2]
 800238c:	2201      	movs	r2, #1
 800238e:	431a      	orrs	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2190      	movs	r1, #144	@ 0x90
 8002394:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002396:	23a4      	movs	r3, #164	@ 0xa4
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2202      	movs	r2, #2
 800239e:	4013      	ands	r3, r2
 80023a0:	d011      	beq.n	80023c6 <HAL_UART_IRQHandler+0x102>
 80023a2:	239c      	movs	r3, #156	@ 0x9c
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	4013      	ands	r3, r2
 80023ac:	d00b      	beq.n	80023c6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2202      	movs	r2, #2
 80023b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2290      	movs	r2, #144	@ 0x90
 80023ba:	589b      	ldr	r3, [r3, r2]
 80023bc:	2204      	movs	r2, #4
 80023be:	431a      	orrs	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2190      	movs	r1, #144	@ 0x90
 80023c4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80023c6:	23a4      	movs	r3, #164	@ 0xa4
 80023c8:	18fb      	adds	r3, r7, r3
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2204      	movs	r2, #4
 80023ce:	4013      	ands	r3, r2
 80023d0:	d011      	beq.n	80023f6 <HAL_UART_IRQHandler+0x132>
 80023d2:	239c      	movs	r3, #156	@ 0x9c
 80023d4:	18fb      	adds	r3, r7, r3
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2201      	movs	r2, #1
 80023da:	4013      	ands	r3, r2
 80023dc:	d00b      	beq.n	80023f6 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2204      	movs	r2, #4
 80023e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2290      	movs	r2, #144	@ 0x90
 80023ea:	589b      	ldr	r3, [r3, r2]
 80023ec:	2202      	movs	r2, #2
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2190      	movs	r1, #144	@ 0x90
 80023f4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80023f6:	23a4      	movs	r3, #164	@ 0xa4
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2208      	movs	r2, #8
 80023fe:	4013      	ands	r3, r2
 8002400:	d017      	beq.n	8002432 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002402:	23a0      	movs	r3, #160	@ 0xa0
 8002404:	18fb      	adds	r3, r7, r3
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2220      	movs	r2, #32
 800240a:	4013      	ands	r3, r2
 800240c:	d105      	bne.n	800241a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800240e:	239c      	movs	r3, #156	@ 0x9c
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a5b      	ldr	r2, [pc, #364]	@ (8002584 <HAL_UART_IRQHandler+0x2c0>)
 8002416:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002418:	d00b      	beq.n	8002432 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2208      	movs	r2, #8
 8002420:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2290      	movs	r2, #144	@ 0x90
 8002426:	589b      	ldr	r3, [r3, r2]
 8002428:	2208      	movs	r2, #8
 800242a:	431a      	orrs	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2190      	movs	r1, #144	@ 0x90
 8002430:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002432:	23a4      	movs	r3, #164	@ 0xa4
 8002434:	18fb      	adds	r3, r7, r3
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	@ 0x80
 800243a:	011b      	lsls	r3, r3, #4
 800243c:	4013      	ands	r3, r2
 800243e:	d013      	beq.n	8002468 <HAL_UART_IRQHandler+0x1a4>
 8002440:	23a0      	movs	r3, #160	@ 0xa0
 8002442:	18fb      	adds	r3, r7, r3
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	2380      	movs	r3, #128	@ 0x80
 8002448:	04db      	lsls	r3, r3, #19
 800244a:	4013      	ands	r3, r2
 800244c:	d00c      	beq.n	8002468 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2280      	movs	r2, #128	@ 0x80
 8002454:	0112      	lsls	r2, r2, #4
 8002456:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2290      	movs	r2, #144	@ 0x90
 800245c:	589b      	ldr	r3, [r3, r2]
 800245e:	2220      	movs	r2, #32
 8002460:	431a      	orrs	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2190      	movs	r1, #144	@ 0x90
 8002466:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2290      	movs	r2, #144	@ 0x90
 800246c:	589b      	ldr	r3, [r3, r2]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d100      	bne.n	8002474 <HAL_UART_IRQHandler+0x1b0>
 8002472:	e25c      	b.n	800292e <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002474:	23a4      	movs	r3, #164	@ 0xa4
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2220      	movs	r2, #32
 800247c:	4013      	ands	r3, r2
 800247e:	d015      	beq.n	80024ac <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002480:	23a0      	movs	r3, #160	@ 0xa0
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2220      	movs	r2, #32
 8002488:	4013      	ands	r3, r2
 800248a:	d106      	bne.n	800249a <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800248c:	239c      	movs	r3, #156	@ 0x9c
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	2380      	movs	r3, #128	@ 0x80
 8002494:	055b      	lsls	r3, r3, #21
 8002496:	4013      	ands	r3, r2
 8002498:	d008      	beq.n	80024ac <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d004      	beq.n	80024ac <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	0010      	movs	r0, r2
 80024aa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2290      	movs	r2, #144	@ 0x90
 80024b0:	589b      	ldr	r3, [r3, r2]
 80024b2:	2194      	movs	r1, #148	@ 0x94
 80024b4:	187a      	adds	r2, r7, r1
 80024b6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2240      	movs	r2, #64	@ 0x40
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b40      	cmp	r3, #64	@ 0x40
 80024c4:	d004      	beq.n	80024d0 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80024c6:	187b      	adds	r3, r7, r1
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2228      	movs	r2, #40	@ 0x28
 80024cc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80024ce:	d04c      	beq.n	800256a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	0018      	movs	r0, r3
 80024d4:	f000 fec8 	bl	8003268 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2240      	movs	r2, #64	@ 0x40
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b40      	cmp	r3, #64	@ 0x40
 80024e4:	d13c      	bne.n	8002560 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024e6:	f3ef 8310 	mrs	r3, PRIMASK
 80024ea:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80024ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024ee:	2090      	movs	r0, #144	@ 0x90
 80024f0:	183a      	adds	r2, r7, r0
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	2301      	movs	r3, #1
 80024f6:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024fa:	f383 8810 	msr	PRIMASK, r3
}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689a      	ldr	r2, [r3, #8]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2140      	movs	r1, #64	@ 0x40
 800250c:	438a      	bics	r2, r1
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	183b      	adds	r3, r7, r0
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002516:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002518:	f383 8810 	msr	PRIMASK, r3
}
 800251c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2280      	movs	r2, #128	@ 0x80
 8002522:	589b      	ldr	r3, [r3, r2]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d016      	beq.n	8002556 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2280      	movs	r2, #128	@ 0x80
 800252c:	589b      	ldr	r3, [r3, r2]
 800252e:	4a17      	ldr	r2, [pc, #92]	@ (800258c <HAL_UART_IRQHandler+0x2c8>)
 8002530:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2280      	movs	r2, #128	@ 0x80
 8002536:	589b      	ldr	r3, [r3, r2]
 8002538:	0018      	movs	r0, r3
 800253a:	f7fe fb55 	bl	8000be8 <HAL_DMA_Abort_IT>
 800253e:	1e03      	subs	r3, r0, #0
 8002540:	d01c      	beq.n	800257c <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2280      	movs	r2, #128	@ 0x80
 8002546:	589b      	ldr	r3, [r3, r2]
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	2180      	movs	r1, #128	@ 0x80
 800254e:	5852      	ldr	r2, [r2, r1]
 8002550:	0010      	movs	r0, r2
 8002552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002554:	e012      	b.n	800257c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	0018      	movs	r0, r3
 800255a:	f000 fa01 	bl	8002960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800255e:	e00d      	b.n	800257c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f9fc 	bl	8002960 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002568:	e008      	b.n	800257c <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	0018      	movs	r0, r3
 800256e:	f000 f9f7 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2290      	movs	r2, #144	@ 0x90
 8002576:	2100      	movs	r1, #0
 8002578:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800257a:	e1d8      	b.n	800292e <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800257c:	46c0      	nop			@ (mov r8, r8)
    return;
 800257e:	e1d6      	b.n	800292e <HAL_UART_IRQHandler+0x66a>
 8002580:	0000080f 	.word	0x0000080f
 8002584:	10000001 	.word	0x10000001
 8002588:	04000120 	.word	0x04000120
 800258c:	08003335 	.word	0x08003335

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002594:	2b01      	cmp	r3, #1
 8002596:	d000      	beq.n	800259a <HAL_UART_IRQHandler+0x2d6>
 8002598:	e15d      	b.n	8002856 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800259a:	23a4      	movs	r3, #164	@ 0xa4
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2210      	movs	r2, #16
 80025a2:	4013      	ands	r3, r2
 80025a4:	d100      	bne.n	80025a8 <HAL_UART_IRQHandler+0x2e4>
 80025a6:	e156      	b.n	8002856 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80025a8:	23a0      	movs	r3, #160	@ 0xa0
 80025aa:	18fb      	adds	r3, r7, r3
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	2210      	movs	r2, #16
 80025b0:	4013      	ands	r3, r2
 80025b2:	d100      	bne.n	80025b6 <HAL_UART_IRQHandler+0x2f2>
 80025b4:	e14f      	b.n	8002856 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2210      	movs	r2, #16
 80025bc:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2240      	movs	r2, #64	@ 0x40
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b40      	cmp	r3, #64	@ 0x40
 80025ca:	d000      	beq.n	80025ce <HAL_UART_IRQHandler+0x30a>
 80025cc:	e0c3      	b.n	8002756 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2280      	movs	r2, #128	@ 0x80
 80025d2:	589b      	ldr	r3, [r3, r2]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	217e      	movs	r1, #126	@ 0x7e
 80025da:	187b      	adds	r3, r7, r1
 80025dc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	881b      	ldrh	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d100      	bne.n	80025e8 <HAL_UART_IRQHandler+0x324>
 80025e6:	e097      	b.n	8002718 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	225c      	movs	r2, #92	@ 0x5c
 80025ec:	5a9b      	ldrh	r3, [r3, r2]
 80025ee:	187a      	adds	r2, r7, r1
 80025f0:	8812      	ldrh	r2, [r2, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d300      	bcc.n	80025f8 <HAL_UART_IRQHandler+0x334>
 80025f6:	e08f      	b.n	8002718 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	187a      	adds	r2, r7, r1
 80025fc:	215e      	movs	r1, #94	@ 0x5e
 80025fe:	8812      	ldrh	r2, [r2, #0]
 8002600:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2280      	movs	r2, #128	@ 0x80
 8002606:	589b      	ldr	r3, [r3, r2]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2220      	movs	r2, #32
 800260e:	4013      	ands	r3, r2
 8002610:	d170      	bne.n	80026f4 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002612:	f3ef 8310 	mrs	r3, PRIMASK
 8002616:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800261a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800261c:	2301      	movs	r3, #1
 800261e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002622:	f383 8810 	msr	PRIMASK, r3
}
 8002626:	46c0      	nop			@ (mov r8, r8)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	49c4      	ldr	r1, [pc, #784]	@ (8002944 <HAL_UART_IRQHandler+0x680>)
 8002634:	400a      	ands	r2, r1
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800263a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800263c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800263e:	f383 8810 	msr	PRIMASK, r3
}
 8002642:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002644:	f3ef 8310 	mrs	r3, PRIMASK
 8002648:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800264a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264c:	677b      	str	r3, [r7, #116]	@ 0x74
 800264e:	2301      	movs	r3, #1
 8002650:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002652:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002654:	f383 8810 	msr	PRIMASK, r3
}
 8002658:	46c0      	nop			@ (mov r8, r8)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2101      	movs	r1, #1
 8002666:	438a      	bics	r2, r1
 8002668:	609a      	str	r2, [r3, #8]
 800266a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800266c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800266e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002670:	f383 8810 	msr	PRIMASK, r3
}
 8002674:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002676:	f3ef 8310 	mrs	r3, PRIMASK
 800267a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800267c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800267e:	673b      	str	r3, [r7, #112]	@ 0x70
 8002680:	2301      	movs	r3, #1
 8002682:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002686:	f383 8810 	msr	PRIMASK, r3
}
 800268a:	46c0      	nop			@ (mov r8, r8)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2140      	movs	r1, #64	@ 0x40
 8002698:	438a      	bics	r2, r1
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800269e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026a2:	f383 8810 	msr	PRIMASK, r3
}
 80026a6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	228c      	movs	r2, #140	@ 0x8c
 80026ac:	2120      	movs	r1, #32
 80026ae:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80026b6:	f3ef 8310 	mrs	r3, PRIMASK
 80026ba:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80026bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026c0:	2301      	movs	r3, #1
 80026c2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026c4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026c6:	f383 8810 	msr	PRIMASK, r3
}
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	2110      	movs	r1, #16
 80026d8:	438a      	bics	r2, r1
 80026da:	601a      	str	r2, [r3, #0]
 80026dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80026de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80026e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026e2:	f383 8810 	msr	PRIMASK, r3
}
 80026e6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2280      	movs	r2, #128	@ 0x80
 80026ec:	589b      	ldr	r3, [r3, r2]
 80026ee:	0018      	movs	r0, r3
 80026f0:	f7fe fa18 	bl	8000b24 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2202      	movs	r2, #2
 80026f8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	225c      	movs	r2, #92	@ 0x5c
 80026fe:	5a9a      	ldrh	r2, [r3, r2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	215e      	movs	r1, #94	@ 0x5e
 8002704:	5a5b      	ldrh	r3, [r3, r1]
 8002706:	b29b      	uxth	r3, r3
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	b29a      	uxth	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	0011      	movs	r1, r2
 8002710:	0018      	movs	r0, r3
 8002712:	f000 f92d 	bl	8002970 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002716:	e10c      	b.n	8002932 <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	225c      	movs	r2, #92	@ 0x5c
 800271c:	5a9b      	ldrh	r3, [r3, r2]
 800271e:	227e      	movs	r2, #126	@ 0x7e
 8002720:	18ba      	adds	r2, r7, r2
 8002722:	8812      	ldrh	r2, [r2, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d000      	beq.n	800272a <HAL_UART_IRQHandler+0x466>
 8002728:	e103      	b.n	8002932 <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2280      	movs	r2, #128	@ 0x80
 800272e:	589b      	ldr	r3, [r3, r2]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2220      	movs	r2, #32
 8002736:	4013      	ands	r3, r2
 8002738:	2b20      	cmp	r3, #32
 800273a:	d000      	beq.n	800273e <HAL_UART_IRQHandler+0x47a>
 800273c:	e0f9      	b.n	8002932 <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2202      	movs	r2, #2
 8002742:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	225c      	movs	r2, #92	@ 0x5c
 8002748:	5a9a      	ldrh	r2, [r3, r2]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	0011      	movs	r1, r2
 800274e:	0018      	movs	r0, r3
 8002750:	f000 f90e 	bl	8002970 <HAL_UARTEx_RxEventCallback>
      return;
 8002754:	e0ed      	b.n	8002932 <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	225c      	movs	r2, #92	@ 0x5c
 800275a:	5a99      	ldrh	r1, [r3, r2]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	225e      	movs	r2, #94	@ 0x5e
 8002760:	5a9b      	ldrh	r3, [r3, r2]
 8002762:	b29a      	uxth	r2, r3
 8002764:	208e      	movs	r0, #142	@ 0x8e
 8002766:	183b      	adds	r3, r7, r0
 8002768:	1a8a      	subs	r2, r1, r2
 800276a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	225e      	movs	r2, #94	@ 0x5e
 8002770:	5a9b      	ldrh	r3, [r3, r2]
 8002772:	b29b      	uxth	r3, r3
 8002774:	2b00      	cmp	r3, #0
 8002776:	d100      	bne.n	800277a <HAL_UART_IRQHandler+0x4b6>
 8002778:	e0dd      	b.n	8002936 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 800277a:	183b      	adds	r3, r7, r0
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d100      	bne.n	8002784 <HAL_UART_IRQHandler+0x4c0>
 8002782:	e0d8      	b.n	8002936 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002784:	f3ef 8310 	mrs	r3, PRIMASK
 8002788:	60fb      	str	r3, [r7, #12]
  return(result);
 800278a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800278c:	2488      	movs	r4, #136	@ 0x88
 800278e:	193a      	adds	r2, r7, r4
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	2301      	movs	r3, #1
 8002794:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	f383 8810 	msr	PRIMASK, r3
}
 800279c:	46c0      	nop			@ (mov r8, r8)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4967      	ldr	r1, [pc, #412]	@ (8002948 <HAL_UART_IRQHandler+0x684>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
 80027ae:	193b      	adds	r3, r7, r4
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f383 8810 	msr	PRIMASK, r3
}
 80027ba:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027bc:	f3ef 8310 	mrs	r3, PRIMASK
 80027c0:	61bb      	str	r3, [r7, #24]
  return(result);
 80027c2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80027c4:	2484      	movs	r4, #132	@ 0x84
 80027c6:	193a      	adds	r2, r7, r4
 80027c8:	6013      	str	r3, [r2, #0]
 80027ca:	2301      	movs	r3, #1
 80027cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	f383 8810 	msr	PRIMASK, r3
}
 80027d4:	46c0      	nop			@ (mov r8, r8)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	689a      	ldr	r2, [r3, #8]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	495a      	ldr	r1, [pc, #360]	@ (800294c <HAL_UART_IRQHandler+0x688>)
 80027e2:	400a      	ands	r2, r1
 80027e4:	609a      	str	r2, [r3, #8]
 80027e6:	193b      	adds	r3, r7, r4
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	f383 8810 	msr	PRIMASK, r3
}
 80027f2:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	228c      	movs	r2, #140	@ 0x8c
 80027f8:	2120      	movs	r1, #32
 80027fa:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002808:	f3ef 8310 	mrs	r3, PRIMASK
 800280c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002810:	2480      	movs	r4, #128	@ 0x80
 8002812:	193a      	adds	r2, r7, r4
 8002814:	6013      	str	r3, [r2, #0]
 8002816:	2301      	movs	r3, #1
 8002818:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800281a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800281c:	f383 8810 	msr	PRIMASK, r3
}
 8002820:	46c0      	nop			@ (mov r8, r8)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	2110      	movs	r1, #16
 800282e:	438a      	bics	r2, r1
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	193b      	adds	r3, r7, r4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800283a:	f383 8810 	msr	PRIMASK, r3
}
 800283e:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2202      	movs	r2, #2
 8002844:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002846:	183b      	adds	r3, r7, r0
 8002848:	881a      	ldrh	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	0011      	movs	r1, r2
 800284e:	0018      	movs	r0, r3
 8002850:	f000 f88e 	bl	8002970 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002854:	e06f      	b.n	8002936 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002856:	23a4      	movs	r3, #164	@ 0xa4
 8002858:	18fb      	adds	r3, r7, r3
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	035b      	lsls	r3, r3, #13
 8002860:	4013      	ands	r3, r2
 8002862:	d010      	beq.n	8002886 <HAL_UART_IRQHandler+0x5c2>
 8002864:	239c      	movs	r3, #156	@ 0x9c
 8002866:	18fb      	adds	r3, r7, r3
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	@ 0x80
 800286c:	03db      	lsls	r3, r3, #15
 800286e:	4013      	ands	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	0352      	lsls	r2, r2, #13
 800287a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	0018      	movs	r0, r3
 8002880:	f001 fa94 	bl	8003dac <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002884:	e05a      	b.n	800293c <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002886:	23a4      	movs	r3, #164	@ 0xa4
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2280      	movs	r2, #128	@ 0x80
 800288e:	4013      	ands	r3, r2
 8002890:	d016      	beq.n	80028c0 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002892:	23a0      	movs	r3, #160	@ 0xa0
 8002894:	18fb      	adds	r3, r7, r3
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2280      	movs	r2, #128	@ 0x80
 800289a:	4013      	ands	r3, r2
 800289c:	d106      	bne.n	80028ac <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800289e:	239c      	movs	r3, #156	@ 0x9c
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	2380      	movs	r3, #128	@ 0x80
 80028a6:	041b      	lsls	r3, r3, #16
 80028a8:	4013      	ands	r3, r2
 80028aa:	d009      	beq.n	80028c0 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d042      	beq.n	800293a <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	0010      	movs	r0, r2
 80028bc:	4798      	blx	r3
    }
    return;
 80028be:	e03c      	b.n	800293a <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80028c0:	23a4      	movs	r3, #164	@ 0xa4
 80028c2:	18fb      	adds	r3, r7, r3
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2240      	movs	r2, #64	@ 0x40
 80028c8:	4013      	ands	r3, r2
 80028ca:	d00a      	beq.n	80028e2 <HAL_UART_IRQHandler+0x61e>
 80028cc:	23a0      	movs	r3, #160	@ 0xa0
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2240      	movs	r2, #64	@ 0x40
 80028d4:	4013      	ands	r3, r2
 80028d6:	d004      	beq.n	80028e2 <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	0018      	movs	r0, r3
 80028dc:	f000 fd41 	bl	8003362 <UART_EndTransmit_IT>
    return;
 80028e0:	e02c      	b.n	800293c <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80028e2:	23a4      	movs	r3, #164	@ 0xa4
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	2380      	movs	r3, #128	@ 0x80
 80028ea:	041b      	lsls	r3, r3, #16
 80028ec:	4013      	ands	r3, r2
 80028ee:	d00b      	beq.n	8002908 <HAL_UART_IRQHandler+0x644>
 80028f0:	23a0      	movs	r3, #160	@ 0xa0
 80028f2:	18fb      	adds	r3, r7, r3
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	2380      	movs	r3, #128	@ 0x80
 80028f8:	05db      	lsls	r3, r3, #23
 80028fa:	4013      	ands	r3, r2
 80028fc:	d004      	beq.n	8002908 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	0018      	movs	r0, r3
 8002902:	f001 fa63 	bl	8003dcc <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002906:	e019      	b.n	800293c <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002908:	23a4      	movs	r3, #164	@ 0xa4
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	2380      	movs	r3, #128	@ 0x80
 8002910:	045b      	lsls	r3, r3, #17
 8002912:	4013      	ands	r3, r2
 8002914:	d012      	beq.n	800293c <HAL_UART_IRQHandler+0x678>
 8002916:	23a0      	movs	r3, #160	@ 0xa0
 8002918:	18fb      	adds	r3, r7, r3
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	da0d      	bge.n	800293c <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	0018      	movs	r0, r3
 8002924:	f001 fa4a 	bl	8003dbc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002928:	e008      	b.n	800293c <HAL_UART_IRQHandler+0x678>
      return;
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	e006      	b.n	800293c <HAL_UART_IRQHandler+0x678>
    return;
 800292e:	46c0      	nop			@ (mov r8, r8)
 8002930:	e004      	b.n	800293c <HAL_UART_IRQHandler+0x678>
      return;
 8002932:	46c0      	nop			@ (mov r8, r8)
 8002934:	e002      	b.n	800293c <HAL_UART_IRQHandler+0x678>
      return;
 8002936:	46c0      	nop			@ (mov r8, r8)
 8002938:	e000      	b.n	800293c <HAL_UART_IRQHandler+0x678>
    return;
 800293a:	46c0      	nop			@ (mov r8, r8)
  }
}
 800293c:	46bd      	mov	sp, r7
 800293e:	b02a      	add	sp, #168	@ 0xa8
 8002940:	bdb0      	pop	{r4, r5, r7, pc}
 8002942:	46c0      	nop			@ (mov r8, r8)
 8002944:	fffffeff 	.word	0xfffffeff
 8002948:	fffffedf 	.word	0xfffffedf
 800294c:	effffffe 	.word	0xeffffffe

08002950 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002958:	46c0      	nop			@ (mov r8, r8)
 800295a:	46bd      	mov	sp, r7
 800295c:	b002      	add	sp, #8
 800295e:	bd80      	pop	{r7, pc}

08002960 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002968:	46c0      	nop			@ (mov r8, r8)
 800296a:	46bd      	mov	sp, r7
 800296c:	b002      	add	sp, #8
 800296e:	bd80      	pop	{r7, pc}

08002970 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	000a      	movs	r2, r1
 800297a:	1cbb      	adds	r3, r7, #2
 800297c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800297e:	46c0      	nop			@ (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	b002      	add	sp, #8
 8002984:	bd80      	pop	{r7, pc}
	...

08002988 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b088      	sub	sp, #32
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002990:	231e      	movs	r3, #30
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	2200      	movs	r2, #0
 8002996:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	691b      	ldr	r3, [r3, #16]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	695b      	ldr	r3, [r3, #20]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4aab      	ldr	r2, [pc, #684]	@ (8002c64 <UART_SetConfig+0x2dc>)
 80029b8:	4013      	ands	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	4aa6      	ldr	r2, [pc, #664]	@ (8002c68 <UART_SetConfig+0x2e0>)
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	68da      	ldr	r2, [r3, #12]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	697a      	ldr	r2, [r7, #20]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	4a9d      	ldr	r2, [pc, #628]	@ (8002c6c <UART_SetConfig+0x2e4>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	0019      	movs	r1, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a0a:	220f      	movs	r2, #15
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a93      	ldr	r2, [pc, #588]	@ (8002c70 <UART_SetConfig+0x2e8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d127      	bne.n	8002a76 <UART_SetConfig+0xee>
 8002a26:	4b93      	ldr	r3, [pc, #588]	@ (8002c74 <UART_SetConfig+0x2ec>)
 8002a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b03      	cmp	r3, #3
 8002a30:	d017      	beq.n	8002a62 <UART_SetConfig+0xda>
 8002a32:	d81b      	bhi.n	8002a6c <UART_SetConfig+0xe4>
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d00a      	beq.n	8002a4e <UART_SetConfig+0xc6>
 8002a38:	d818      	bhi.n	8002a6c <UART_SetConfig+0xe4>
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <UART_SetConfig+0xbc>
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d00a      	beq.n	8002a58 <UART_SetConfig+0xd0>
 8002a42:	e013      	b.n	8002a6c <UART_SetConfig+0xe4>
 8002a44:	231f      	movs	r3, #31
 8002a46:	18fb      	adds	r3, r7, r3
 8002a48:	2200      	movs	r2, #0
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e021      	b.n	8002a92 <UART_SetConfig+0x10a>
 8002a4e:	231f      	movs	r3, #31
 8002a50:	18fb      	adds	r3, r7, r3
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]
 8002a56:	e01c      	b.n	8002a92 <UART_SetConfig+0x10a>
 8002a58:	231f      	movs	r3, #31
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2204      	movs	r2, #4
 8002a5e:	701a      	strb	r2, [r3, #0]
 8002a60:	e017      	b.n	8002a92 <UART_SetConfig+0x10a>
 8002a62:	231f      	movs	r3, #31
 8002a64:	18fb      	adds	r3, r7, r3
 8002a66:	2208      	movs	r2, #8
 8002a68:	701a      	strb	r2, [r3, #0]
 8002a6a:	e012      	b.n	8002a92 <UART_SetConfig+0x10a>
 8002a6c:	231f      	movs	r3, #31
 8002a6e:	18fb      	adds	r3, r7, r3
 8002a70:	2210      	movs	r2, #16
 8002a72:	701a      	strb	r2, [r3, #0]
 8002a74:	e00d      	b.n	8002a92 <UART_SetConfig+0x10a>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a7f      	ldr	r2, [pc, #508]	@ (8002c78 <UART_SetConfig+0x2f0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d104      	bne.n	8002a8a <UART_SetConfig+0x102>
 8002a80:	231f      	movs	r3, #31
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e003      	b.n	8002a92 <UART_SetConfig+0x10a>
 8002a8a:	231f      	movs	r3, #31
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2210      	movs	r2, #16
 8002a90:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	69da      	ldr	r2, [r3, #28]
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d000      	beq.n	8002aa0 <UART_SetConfig+0x118>
 8002a9e:	e06f      	b.n	8002b80 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002aa0:	231f      	movs	r3, #31
 8002aa2:	18fb      	adds	r3, r7, r3
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b08      	cmp	r3, #8
 8002aa8:	d01f      	beq.n	8002aea <UART_SetConfig+0x162>
 8002aaa:	dc22      	bgt.n	8002af2 <UART_SetConfig+0x16a>
 8002aac:	2b04      	cmp	r3, #4
 8002aae:	d017      	beq.n	8002ae0 <UART_SetConfig+0x158>
 8002ab0:	dc1f      	bgt.n	8002af2 <UART_SetConfig+0x16a>
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <UART_SetConfig+0x134>
 8002ab6:	2b02      	cmp	r3, #2
 8002ab8:	d005      	beq.n	8002ac6 <UART_SetConfig+0x13e>
 8002aba:	e01a      	b.n	8002af2 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002abc:	f7fe fde8 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	61bb      	str	r3, [r7, #24]
        break;
 8002ac4:	e01c      	b.n	8002b00 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002ac6:	4b6b      	ldr	r3, [pc, #428]	@ (8002c74 <UART_SetConfig+0x2ec>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	095b      	lsrs	r3, r3, #5
 8002acc:	2207      	movs	r2, #7
 8002ace:	4013      	ands	r3, r2
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	0019      	movs	r1, r3
 8002ad4:	4869      	ldr	r0, [pc, #420]	@ (8002c7c <UART_SetConfig+0x2f4>)
 8002ad6:	f7fd fb17 	bl	8000108 <__udivsi3>
 8002ada:	0003      	movs	r3, r0
 8002adc:	61bb      	str	r3, [r7, #24]
        break;
 8002ade:	e00f      	b.n	8002b00 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ae0:	f7fe fd68 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	61bb      	str	r3, [r7, #24]
        break;
 8002ae8:	e00a      	b.n	8002b00 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	61bb      	str	r3, [r7, #24]
        break;
 8002af0:	e006      	b.n	8002b00 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002af6:	231e      	movs	r3, #30
 8002af8:	18fb      	adds	r3, r7, r3
 8002afa:	2201      	movs	r2, #1
 8002afc:	701a      	strb	r2, [r3, #0]
        break;
 8002afe:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d100      	bne.n	8002b08 <UART_SetConfig+0x180>
 8002b06:	e097      	b.n	8002c38 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b0c:	4b5c      	ldr	r3, [pc, #368]	@ (8002c80 <UART_SetConfig+0x2f8>)
 8002b0e:	0052      	lsls	r2, r2, #1
 8002b10:	5ad3      	ldrh	r3, [r2, r3]
 8002b12:	0019      	movs	r1, r3
 8002b14:	69b8      	ldr	r0, [r7, #24]
 8002b16:	f7fd faf7 	bl	8000108 <__udivsi3>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	005a      	lsls	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	085b      	lsrs	r3, r3, #1
 8002b24:	18d2      	adds	r2, r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	0019      	movs	r1, r3
 8002b2c:	0010      	movs	r0, r2
 8002b2e:	f7fd faeb 	bl	8000108 <__udivsi3>
 8002b32:	0003      	movs	r3, r0
 8002b34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	2b0f      	cmp	r3, #15
 8002b3a:	d91c      	bls.n	8002b76 <UART_SetConfig+0x1ee>
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	2380      	movs	r3, #128	@ 0x80
 8002b40:	025b      	lsls	r3, r3, #9
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d217      	bcs.n	8002b76 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	200e      	movs	r0, #14
 8002b4c:	183b      	adds	r3, r7, r0
 8002b4e:	210f      	movs	r1, #15
 8002b50:	438a      	bics	r2, r1
 8002b52:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	085b      	lsrs	r3, r3, #1
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2207      	movs	r2, #7
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	b299      	uxth	r1, r3
 8002b60:	183b      	adds	r3, r7, r0
 8002b62:	183a      	adds	r2, r7, r0
 8002b64:	8812      	ldrh	r2, [r2, #0]
 8002b66:	430a      	orrs	r2, r1
 8002b68:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	183a      	adds	r2, r7, r0
 8002b70:	8812      	ldrh	r2, [r2, #0]
 8002b72:	60da      	str	r2, [r3, #12]
 8002b74:	e060      	b.n	8002c38 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002b76:	231e      	movs	r3, #30
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
 8002b7e:	e05b      	b.n	8002c38 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b80:	231f      	movs	r3, #31
 8002b82:	18fb      	adds	r3, r7, r3
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b08      	cmp	r3, #8
 8002b88:	d01f      	beq.n	8002bca <UART_SetConfig+0x242>
 8002b8a:	dc22      	bgt.n	8002bd2 <UART_SetConfig+0x24a>
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d017      	beq.n	8002bc0 <UART_SetConfig+0x238>
 8002b90:	dc1f      	bgt.n	8002bd2 <UART_SetConfig+0x24a>
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d002      	beq.n	8002b9c <UART_SetConfig+0x214>
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d005      	beq.n	8002ba6 <UART_SetConfig+0x21e>
 8002b9a:	e01a      	b.n	8002bd2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b9c:	f7fe fd78 	bl	8001690 <HAL_RCC_GetPCLK1Freq>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	61bb      	str	r3, [r7, #24]
        break;
 8002ba4:	e01c      	b.n	8002be0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002ba6:	4b33      	ldr	r3, [pc, #204]	@ (8002c74 <UART_SetConfig+0x2ec>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	095b      	lsrs	r3, r3, #5
 8002bac:	2207      	movs	r2, #7
 8002bae:	4013      	ands	r3, r2
 8002bb0:	3301      	adds	r3, #1
 8002bb2:	0019      	movs	r1, r3
 8002bb4:	4831      	ldr	r0, [pc, #196]	@ (8002c7c <UART_SetConfig+0x2f4>)
 8002bb6:	f7fd faa7 	bl	8000108 <__udivsi3>
 8002bba:	0003      	movs	r3, r0
 8002bbc:	61bb      	str	r3, [r7, #24]
        break;
 8002bbe:	e00f      	b.n	8002be0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bc0:	f7fe fcf8 	bl	80015b4 <HAL_RCC_GetSysClockFreq>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	61bb      	str	r3, [r7, #24]
        break;
 8002bc8:	e00a      	b.n	8002be0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002bca:	2380      	movs	r3, #128	@ 0x80
 8002bcc:	021b      	lsls	r3, r3, #8
 8002bce:	61bb      	str	r3, [r7, #24]
        break;
 8002bd0:	e006      	b.n	8002be0 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bd6:	231e      	movs	r3, #30
 8002bd8:	18fb      	adds	r3, r7, r3
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
        break;
 8002bde:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d028      	beq.n	8002c38 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bea:	4b25      	ldr	r3, [pc, #148]	@ (8002c80 <UART_SetConfig+0x2f8>)
 8002bec:	0052      	lsls	r2, r2, #1
 8002bee:	5ad3      	ldrh	r3, [r2, r3]
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	69b8      	ldr	r0, [r7, #24]
 8002bf4:	f7fd fa88 	bl	8000108 <__udivsi3>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	085b      	lsrs	r3, r3, #1
 8002c02:	18d2      	adds	r2, r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	0019      	movs	r1, r3
 8002c0a:	0010      	movs	r0, r2
 8002c0c:	f7fd fa7c 	bl	8000108 <__udivsi3>
 8002c10:	0003      	movs	r3, r0
 8002c12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	d90a      	bls.n	8002c30 <UART_SetConfig+0x2a8>
 8002c1a:	693a      	ldr	r2, [r7, #16]
 8002c1c:	2380      	movs	r3, #128	@ 0x80
 8002c1e:	025b      	lsls	r3, r3, #9
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d205      	bcs.n	8002c30 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	e003      	b.n	8002c38 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002c30:	231e      	movs	r3, #30
 8002c32:	18fb      	adds	r3, r7, r3
 8002c34:	2201      	movs	r2, #1
 8002c36:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	226a      	movs	r2, #106	@ 0x6a
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2268      	movs	r2, #104	@ 0x68
 8002c44:	2101      	movs	r1, #1
 8002c46:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002c54:	231e      	movs	r3, #30
 8002c56:	18fb      	adds	r3, r7, r3
 8002c58:	781b      	ldrb	r3, [r3, #0]
}
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b008      	add	sp, #32
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	cfff69f3 	.word	0xcfff69f3
 8002c68:	ffffcfff 	.word	0xffffcfff
 8002c6c:	11fff4ff 	.word	0x11fff4ff
 8002c70:	40013800 	.word	0x40013800
 8002c74:	40021000 	.word	0x40021000
 8002c78:	40004400 	.word	0x40004400
 8002c7c:	02dc6c00 	.word	0x02dc6c00
 8002c80:	08003eac 	.word	0x08003eac

08002c84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c90:	2208      	movs	r2, #8
 8002c92:	4013      	ands	r3, r2
 8002c94:	d00b      	beq.n	8002cae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	4a4a      	ldr	r2, [pc, #296]	@ (8002dc8 <UART_AdvFeatureConfig+0x144>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d00b      	beq.n	8002cd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	4a43      	ldr	r2, [pc, #268]	@ (8002dcc <UART_AdvFeatureConfig+0x148>)
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	4a3b      	ldr	r2, [pc, #236]	@ (8002dd0 <UART_AdvFeatureConfig+0x14c>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	0019      	movs	r1, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cf6:	2204      	movs	r2, #4
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	d00b      	beq.n	8002d14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	4a34      	ldr	r2, [pc, #208]	@ (8002dd4 <UART_AdvFeatureConfig+0x150>)
 8002d04:	4013      	ands	r3, r2
 8002d06:	0019      	movs	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d18:	2210      	movs	r2, #16
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	d00b      	beq.n	8002d36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	4a2c      	ldr	r2, [pc, #176]	@ (8002dd8 <UART_AdvFeatureConfig+0x154>)
 8002d26:	4013      	ands	r3, r2
 8002d28:	0019      	movs	r1, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	4a25      	ldr	r2, [pc, #148]	@ (8002ddc <UART_AdvFeatureConfig+0x158>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	0019      	movs	r1, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	2240      	movs	r2, #64	@ 0x40
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d01d      	beq.n	8002d9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	4a1d      	ldr	r2, [pc, #116]	@ (8002de0 <UART_AdvFeatureConfig+0x15c>)
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	0019      	movs	r1, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d7e:	2380      	movs	r3, #128	@ 0x80
 8002d80:	035b      	lsls	r3, r3, #13
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d10b      	bne.n	8002d9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	4a15      	ldr	r2, [pc, #84]	@ (8002de4 <UART_AdvFeatureConfig+0x160>)
 8002d8e:	4013      	ands	r3, r2
 8002d90:	0019      	movs	r1, r3
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002da2:	2280      	movs	r2, #128	@ 0x80
 8002da4:	4013      	ands	r3, r2
 8002da6:	d00b      	beq.n	8002dc0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	4a0e      	ldr	r2, [pc, #56]	@ (8002de8 <UART_AdvFeatureConfig+0x164>)
 8002db0:	4013      	ands	r3, r2
 8002db2:	0019      	movs	r1, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]
  }
}
 8002dc0:	46c0      	nop			@ (mov r8, r8)
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	ffff7fff 	.word	0xffff7fff
 8002dcc:	fffdffff 	.word	0xfffdffff
 8002dd0:	fffeffff 	.word	0xfffeffff
 8002dd4:	fffbffff 	.word	0xfffbffff
 8002dd8:	ffffefff 	.word	0xffffefff
 8002ddc:	ffffdfff 	.word	0xffffdfff
 8002de0:	ffefffff 	.word	0xffefffff
 8002de4:	ff9fffff 	.word	0xff9fffff
 8002de8:	fff7ffff 	.word	0xfff7ffff

08002dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b092      	sub	sp, #72	@ 0x48
 8002df0:	af02      	add	r7, sp, #8
 8002df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2290      	movs	r2, #144	@ 0x90
 8002df8:	2100      	movs	r1, #0
 8002dfa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002dfc:	f7fd fd86 	bl	800090c <HAL_GetTick>
 8002e00:	0003      	movs	r3, r0
 8002e02:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d12d      	bne.n	8002e6e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e14:	2280      	movs	r2, #128	@ 0x80
 8002e16:	0391      	lsls	r1, r2, #14
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	4a47      	ldr	r2, [pc, #284]	@ (8002f38 <UART_CheckIdleState+0x14c>)
 8002e1c:	9200      	str	r2, [sp, #0]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f000 f88e 	bl	8002f40 <UART_WaitOnFlagUntilTimeout>
 8002e24:	1e03      	subs	r3, r0, #0
 8002e26:	d022      	beq.n	8002e6e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e28:	f3ef 8310 	mrs	r3, PRIMASK
 8002e2c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002e30:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e32:	2301      	movs	r3, #1
 8002e34:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e38:	f383 8810 	msr	PRIMASK, r3
}
 8002e3c:	46c0      	nop			@ (mov r8, r8)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2180      	movs	r1, #128	@ 0x80
 8002e4a:	438a      	bics	r2, r1
 8002e4c:	601a      	str	r2, [r3, #0]
 8002e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e54:	f383 8810 	msr	PRIMASK, r3
}
 8002e58:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2288      	movs	r2, #136	@ 0x88
 8002e5e:	2120      	movs	r1, #32
 8002e60:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2284      	movs	r2, #132	@ 0x84
 8002e66:	2100      	movs	r1, #0
 8002e68:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e060      	b.n	8002f30 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2204      	movs	r2, #4
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b04      	cmp	r3, #4
 8002e7a:	d146      	bne.n	8002f0a <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e7e:	2280      	movs	r2, #128	@ 0x80
 8002e80:	03d1      	lsls	r1, r2, #15
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4a2c      	ldr	r2, [pc, #176]	@ (8002f38 <UART_CheckIdleState+0x14c>)
 8002e86:	9200      	str	r2, [sp, #0]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f000 f859 	bl	8002f40 <UART_WaitOnFlagUntilTimeout>
 8002e8e:	1e03      	subs	r3, r0, #0
 8002e90:	d03b      	beq.n	8002f0a <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e92:	f3ef 8310 	mrs	r3, PRIMASK
 8002e96:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e98:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f383 8810 	msr	PRIMASK, r3
}
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4922      	ldr	r1, [pc, #136]	@ (8002f3c <UART_CheckIdleState+0x150>)
 8002eb4:	400a      	ands	r2, r1
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	f383 8810 	msr	PRIMASK, r3
}
 8002ec2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8002ec8:	61bb      	str	r3, [r7, #24]
  return(result);
 8002eca:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8002ece:	2301      	movs	r3, #1
 8002ed0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	f383 8810 	msr	PRIMASK, r3
}
 8002ed8:	46c0      	nop			@ (mov r8, r8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	438a      	bics	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]
 8002eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	f383 8810 	msr	PRIMASK, r3
}
 8002ef4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	228c      	movs	r2, #140	@ 0x8c
 8002efa:	2120      	movs	r1, #32
 8002efc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2284      	movs	r2, #132	@ 0x84
 8002f02:	2100      	movs	r1, #0
 8002f04:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f06:	2303      	movs	r3, #3
 8002f08:	e012      	b.n	8002f30 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2288      	movs	r2, #136	@ 0x88
 8002f0e:	2120      	movs	r1, #32
 8002f10:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	228c      	movs	r2, #140	@ 0x8c
 8002f16:	2120      	movs	r1, #32
 8002f18:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2284      	movs	r2, #132	@ 0x84
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	0018      	movs	r0, r3
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b010      	add	sp, #64	@ 0x40
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	01ffffff 	.word	0x01ffffff
 8002f3c:	fffffedf 	.word	0xfffffedf

08002f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	1dfb      	adds	r3, r7, #7
 8002f4e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f50:	e051      	b.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	3301      	adds	r3, #1
 8002f56:	d04e      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f58:	f7fd fcd8 	bl	800090c <HAL_GetTick>
 8002f5c:	0002      	movs	r2, r0
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	69ba      	ldr	r2, [r7, #24]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d302      	bcc.n	8002f6e <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f6e:	2303      	movs	r3, #3
 8002f70:	e051      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	d03b      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	2b80      	cmp	r3, #128	@ 0x80
 8002f82:	d038      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b40      	cmp	r3, #64	@ 0x40
 8002f88:	d035      	beq.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2208      	movs	r2, #8
 8002f92:	4013      	ands	r3, r2
 8002f94:	2b08      	cmp	r3, #8
 8002f96:	d111      	bne.n	8002fbc <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	0018      	movs	r0, r3
 8002fa4:	f000 f960 	bl	8003268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2290      	movs	r2, #144	@ 0x90
 8002fac:	2108      	movs	r1, #8
 8002fae:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2284      	movs	r2, #132	@ 0x84
 8002fb4:	2100      	movs	r1, #0
 8002fb6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e02c      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	69da      	ldr	r2, [r3, #28]
 8002fc2:	2380      	movs	r3, #128	@ 0x80
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	401a      	ands	r2, r3
 8002fc8:	2380      	movs	r3, #128	@ 0x80
 8002fca:	011b      	lsls	r3, r3, #4
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d112      	bne.n	8002ff6 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2280      	movs	r2, #128	@ 0x80
 8002fd6:	0112      	lsls	r2, r2, #4
 8002fd8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f000 f943 	bl	8003268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2290      	movs	r2, #144	@ 0x90
 8002fe6:	2120      	movs	r1, #32
 8002fe8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2284      	movs	r2, #132	@ 0x84
 8002fee:	2100      	movs	r1, #0
 8002ff0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e00f      	b.n	8003016 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	68ba      	ldr	r2, [r7, #8]
 8002ffe:	4013      	ands	r3, r2
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	425a      	negs	r2, r3
 8003006:	4153      	adcs	r3, r2
 8003008:	b2db      	uxtb	r3, r3
 800300a:	001a      	movs	r2, r3
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	429a      	cmp	r2, r3
 8003012:	d09e      	beq.n	8002f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	0018      	movs	r0, r3
 8003018:	46bd      	mov	sp, r7
 800301a:	b004      	add	sp, #16
 800301c:	bd80      	pop	{r7, pc}
	...

08003020 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b098      	sub	sp, #96	@ 0x60
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	1dbb      	adds	r3, r7, #6
 800302c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	1dba      	adds	r2, r7, #6
 8003038:	215c      	movs	r1, #92	@ 0x5c
 800303a:	8812      	ldrh	r2, [r2, #0]
 800303c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	1dba      	adds	r2, r7, #6
 8003042:	215e      	movs	r1, #94	@ 0x5e
 8003044:	8812      	ldrh	r2, [r2, #0]
 8003046:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	2380      	movs	r3, #128	@ 0x80
 8003054:	015b      	lsls	r3, r3, #5
 8003056:	429a      	cmp	r2, r3
 8003058:	d10d      	bne.n	8003076 <UART_Start_Receive_IT+0x56>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d104      	bne.n	800306c <UART_Start_Receive_IT+0x4c>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2260      	movs	r2, #96	@ 0x60
 8003066:	497b      	ldr	r1, [pc, #492]	@ (8003254 <UART_Start_Receive_IT+0x234>)
 8003068:	5299      	strh	r1, [r3, r2]
 800306a:	e02e      	b.n	80030ca <UART_Start_Receive_IT+0xaa>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2260      	movs	r2, #96	@ 0x60
 8003070:	21ff      	movs	r1, #255	@ 0xff
 8003072:	5299      	strh	r1, [r3, r2]
 8003074:	e029      	b.n	80030ca <UART_Start_Receive_IT+0xaa>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10d      	bne.n	800309a <UART_Start_Receive_IT+0x7a>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	691b      	ldr	r3, [r3, #16]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d104      	bne.n	8003090 <UART_Start_Receive_IT+0x70>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2260      	movs	r2, #96	@ 0x60
 800308a:	21ff      	movs	r1, #255	@ 0xff
 800308c:	5299      	strh	r1, [r3, r2]
 800308e:	e01c      	b.n	80030ca <UART_Start_Receive_IT+0xaa>
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2260      	movs	r2, #96	@ 0x60
 8003094:	217f      	movs	r1, #127	@ 0x7f
 8003096:	5299      	strh	r1, [r3, r2]
 8003098:	e017      	b.n	80030ca <UART_Start_Receive_IT+0xaa>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	2380      	movs	r3, #128	@ 0x80
 80030a0:	055b      	lsls	r3, r3, #21
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d10d      	bne.n	80030c2 <UART_Start_Receive_IT+0xa2>
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d104      	bne.n	80030b8 <UART_Start_Receive_IT+0x98>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2260      	movs	r2, #96	@ 0x60
 80030b2:	217f      	movs	r1, #127	@ 0x7f
 80030b4:	5299      	strh	r1, [r3, r2]
 80030b6:	e008      	b.n	80030ca <UART_Start_Receive_IT+0xaa>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2260      	movs	r2, #96	@ 0x60
 80030bc:	213f      	movs	r1, #63	@ 0x3f
 80030be:	5299      	strh	r1, [r3, r2]
 80030c0:	e003      	b.n	80030ca <UART_Start_Receive_IT+0xaa>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2260      	movs	r2, #96	@ 0x60
 80030c6:	2100      	movs	r1, #0
 80030c8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2290      	movs	r2, #144	@ 0x90
 80030ce:	2100      	movs	r1, #0
 80030d0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	228c      	movs	r2, #140	@ 0x8c
 80030d6:	2122      	movs	r1, #34	@ 0x22
 80030d8:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030da:	f3ef 8310 	mrs	r3, PRIMASK
 80030de:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 80030e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80030e4:	2301      	movs	r3, #1
 80030e6:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80030ea:	f383 8810 	msr	PRIMASK, r3
}
 80030ee:	46c0      	nop			@ (mov r8, r8)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	689a      	ldr	r2, [r3, #8]
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	430a      	orrs	r2, r1
 80030fe:	609a      	str	r2, [r3, #8]
 8003100:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003102:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003104:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003106:	f383 8810 	msr	PRIMASK, r3
}
 800310a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	059b      	lsls	r3, r3, #22
 8003114:	429a      	cmp	r2, r3
 8003116:	d150      	bne.n	80031ba <UART_Start_Receive_IT+0x19a>
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2268      	movs	r2, #104	@ 0x68
 800311c:	5a9b      	ldrh	r3, [r3, r2]
 800311e:	1dba      	adds	r2, r7, #6
 8003120:	8812      	ldrh	r2, [r2, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d349      	bcc.n	80031ba <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	689a      	ldr	r2, [r3, #8]
 800312a:	2380      	movs	r3, #128	@ 0x80
 800312c:	015b      	lsls	r3, r3, #5
 800312e:	429a      	cmp	r2, r3
 8003130:	d107      	bne.n	8003142 <UART_Start_Receive_IT+0x122>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d103      	bne.n	8003142 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4a46      	ldr	r2, [pc, #280]	@ (8003258 <UART_Start_Receive_IT+0x238>)
 800313e:	675a      	str	r2, [r3, #116]	@ 0x74
 8003140:	e002      	b.n	8003148 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	4a45      	ldr	r2, [pc, #276]	@ (800325c <UART_Start_Receive_IT+0x23c>)
 8003146:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d019      	beq.n	8003184 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003150:	f3ef 8310 	mrs	r3, PRIMASK
 8003154:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8003156:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003158:	65bb      	str	r3, [r7, #88]	@ 0x58
 800315a:	2301      	movs	r3, #1
 800315c:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003160:	f383 8810 	msr	PRIMASK, r3
}
 8003164:	46c0      	nop			@ (mov r8, r8)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2180      	movs	r1, #128	@ 0x80
 8003172:	0049      	lsls	r1, r1, #1
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800317a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800317c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800317e:	f383 8810 	msr	PRIMASK, r3
}
 8003182:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003184:	f3ef 8310 	mrs	r3, PRIMASK
 8003188:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800318a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800318c:	657b      	str	r3, [r7, #84]	@ 0x54
 800318e:	2301      	movs	r3, #1
 8003190:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			@ (mov r8, r8)
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2180      	movs	r1, #128	@ 0x80
 80031a6:	0549      	lsls	r1, r1, #21
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
 80031ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ae:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031b2:	f383 8810 	msr	PRIMASK, r3
}
 80031b6:	46c0      	nop			@ (mov r8, r8)
 80031b8:	e047      	b.n	800324a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	689a      	ldr	r2, [r3, #8]
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	015b      	lsls	r3, r3, #5
 80031c2:	429a      	cmp	r2, r3
 80031c4:	d107      	bne.n	80031d6 <UART_Start_Receive_IT+0x1b6>
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	691b      	ldr	r3, [r3, #16]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d103      	bne.n	80031d6 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	4a23      	ldr	r2, [pc, #140]	@ (8003260 <UART_Start_Receive_IT+0x240>)
 80031d2:	675a      	str	r2, [r3, #116]	@ 0x74
 80031d4:	e002      	b.n	80031dc <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	4a22      	ldr	r2, [pc, #136]	@ (8003264 <UART_Start_Receive_IT+0x244>)
 80031da:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d019      	beq.n	8003218 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031e4:	f3ef 8310 	mrs	r3, PRIMASK
 80031e8:	61fb      	str	r3, [r7, #28]
  return(result);
 80031ea:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80031ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80031ee:	2301      	movs	r3, #1
 80031f0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f383 8810 	msr	PRIMASK, r3
}
 80031f8:	46c0      	nop			@ (mov r8, r8)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2190      	movs	r1, #144	@ 0x90
 8003206:	0049      	lsls	r1, r1, #1
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800320e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	f383 8810 	msr	PRIMASK, r3
}
 8003216:	e018      	b.n	800324a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003218:	f3ef 8310 	mrs	r3, PRIMASK
 800321c:	613b      	str	r3, [r7, #16]
  return(result);
 800321e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003220:	653b      	str	r3, [r7, #80]	@ 0x50
 8003222:	2301      	movs	r3, #1
 8003224:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f383 8810 	msr	PRIMASK, r3
}
 800322c:	46c0      	nop			@ (mov r8, r8)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2120      	movs	r1, #32
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003240:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	f383 8810 	msr	PRIMASK, r3
}
 8003248:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	0018      	movs	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	b018      	add	sp, #96	@ 0x60
 8003252:	bd80      	pop	{r7, pc}
 8003254:	000001ff 	.word	0x000001ff
 8003258:	08003a61 	.word	0x08003a61
 800325c:	0800372d 	.word	0x0800372d
 8003260:	08003575 	.word	0x08003575
 8003264:	080033bd 	.word	0x080033bd

08003268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08e      	sub	sp, #56	@ 0x38
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003270:	f3ef 8310 	mrs	r3, PRIMASK
 8003274:	617b      	str	r3, [r7, #20]
  return(result);
 8003276:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003278:	637b      	str	r3, [r7, #52]	@ 0x34
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	f383 8810 	msr	PRIMASK, r3
}
 8003284:	46c0      	nop			@ (mov r8, r8)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4926      	ldr	r1, [pc, #152]	@ (800332c <UART_EndRxTransfer+0xc4>)
 8003292:	400a      	ands	r2, r1
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003298:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f383 8810 	msr	PRIMASK, r3
}
 80032a0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032a2:	f3ef 8310 	mrs	r3, PRIMASK
 80032a6:	623b      	str	r3, [r7, #32]
  return(result);
 80032a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ac:	2301      	movs	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	f383 8810 	msr	PRIMASK, r3
}
 80032b6:	46c0      	nop			@ (mov r8, r8)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	689a      	ldr	r2, [r3, #8]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	491b      	ldr	r1, [pc, #108]	@ (8003330 <UART_EndRxTransfer+0xc8>)
 80032c4:	400a      	ands	r2, r1
 80032c6:	609a      	str	r2, [r3, #8]
 80032c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032ce:	f383 8810 	msr	PRIMASK, r3
}
 80032d2:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d118      	bne.n	800330e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032dc:	f3ef 8310 	mrs	r3, PRIMASK
 80032e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80032e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032e6:	2301      	movs	r3, #1
 80032e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	f383 8810 	msr	PRIMASK, r3
}
 80032f0:	46c0      	nop			@ (mov r8, r8)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	681a      	ldr	r2, [r3, #0]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2110      	movs	r1, #16
 80032fe:	438a      	bics	r2, r1
 8003300:	601a      	str	r2, [r3, #0]
 8003302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003304:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f383 8810 	msr	PRIMASK, r3
}
 800330c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	228c      	movs	r2, #140	@ 0x8c
 8003312:	2120      	movs	r1, #32
 8003314:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2200      	movs	r2, #0
 800331a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003322:	46c0      	nop			@ (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b00e      	add	sp, #56	@ 0x38
 8003328:	bd80      	pop	{r7, pc}
 800332a:	46c0      	nop			@ (mov r8, r8)
 800332c:	fffffedf 	.word	0xfffffedf
 8003330:	effffffe 	.word	0xeffffffe

08003334 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003340:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	225e      	movs	r2, #94	@ 0x5e
 8003346:	2100      	movs	r1, #0
 8003348:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2256      	movs	r2, #86	@ 0x56
 800334e:	2100      	movs	r1, #0
 8003350:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	0018      	movs	r0, r3
 8003356:	f7ff fb03 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800335a:	46c0      	nop			@ (mov r8, r8)
 800335c:	46bd      	mov	sp, r7
 800335e:	b004      	add	sp, #16
 8003360:	bd80      	pop	{r7, pc}

08003362 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003362:	b580      	push	{r7, lr}
 8003364:	b086      	sub	sp, #24
 8003366:	af00      	add	r7, sp, #0
 8003368:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800336a:	f3ef 8310 	mrs	r3, PRIMASK
 800336e:	60bb      	str	r3, [r7, #8]
  return(result);
 8003370:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003372:	617b      	str	r3, [r7, #20]
 8003374:	2301      	movs	r3, #1
 8003376:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f383 8810 	msr	PRIMASK, r3
}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2140      	movs	r1, #64	@ 0x40
 800338c:	438a      	bics	r2, r1
 800338e:	601a      	str	r2, [r3, #0]
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2288      	movs	r2, #136	@ 0x88
 80033a0:	2120      	movs	r1, #32
 80033a2:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	0018      	movs	r0, r3
 80033ae:	f7ff facf 	bl	8002950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033b2:	46c0      	nop			@ (mov r8, r8)
 80033b4:	46bd      	mov	sp, r7
 80033b6:	b006      	add	sp, #24
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b094      	sub	sp, #80	@ 0x50
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80033c4:	204e      	movs	r0, #78	@ 0x4e
 80033c6:	183b      	adds	r3, r7, r0
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	2160      	movs	r1, #96	@ 0x60
 80033cc:	5a52      	ldrh	r2, [r2, r1]
 80033ce:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	228c      	movs	r2, #140	@ 0x8c
 80033d4:	589b      	ldr	r3, [r3, r2]
 80033d6:	2b22      	cmp	r3, #34	@ 0x22
 80033d8:	d000      	beq.n	80033dc <UART_RxISR_8BIT+0x20>
 80033da:	e0ba      	b.n	8003552 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033e2:	214c      	movs	r1, #76	@ 0x4c
 80033e4:	187b      	adds	r3, r7, r1
 80033e6:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	881b      	ldrh	r3, [r3, #0]
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	183b      	adds	r3, r7, r0
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b2d9      	uxtb	r1, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	400a      	ands	r2, r1
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	225e      	movs	r2, #94	@ 0x5e
 800340c:	5a9b      	ldrh	r3, [r3, r2]
 800340e:	b29b      	uxth	r3, r3
 8003410:	3b01      	subs	r3, #1
 8003412:	b299      	uxth	r1, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	225e      	movs	r2, #94	@ 0x5e
 8003418:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	225e      	movs	r2, #94	@ 0x5e
 800341e:	5a9b      	ldrh	r3, [r3, r2]
 8003420:	b29b      	uxth	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d000      	beq.n	8003428 <UART_RxISR_8BIT+0x6c>
 8003426:	e09c      	b.n	8003562 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003428:	f3ef 8310 	mrs	r3, PRIMASK
 800342c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800342e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003430:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003432:	2301      	movs	r3, #1
 8003434:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	f383 8810 	msr	PRIMASK, r3
}
 800343c:	46c0      	nop			@ (mov r8, r8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4948      	ldr	r1, [pc, #288]	@ (800356c <UART_RxISR_8BIT+0x1b0>)
 800344a:	400a      	ands	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003450:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003452:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003454:	f383 8810 	msr	PRIMASK, r3
}
 8003458:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800345a:	f3ef 8310 	mrs	r3, PRIMASK
 800345e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003462:	647b      	str	r3, [r7, #68]	@ 0x44
 8003464:	2301      	movs	r3, #1
 8003466:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346a:	f383 8810 	msr	PRIMASK, r3
}
 800346e:	46c0      	nop			@ (mov r8, r8)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	2101      	movs	r1, #1
 800347c:	438a      	bics	r2, r1
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003482:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003486:	f383 8810 	msr	PRIMASK, r3
}
 800348a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	228c      	movs	r2, #140	@ 0x8c
 8003490:	2120      	movs	r1, #32
 8003492:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	685a      	ldr	r2, [r3, #4]
 80034a6:	2380      	movs	r3, #128	@ 0x80
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	4013      	ands	r3, r2
 80034ac:	d018      	beq.n	80034e0 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034ae:	f3ef 8310 	mrs	r3, PRIMASK
 80034b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80034b4:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80034b8:	2301      	movs	r3, #1
 80034ba:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	f383 8810 	msr	PRIMASK, r3
}
 80034c2:	46c0      	nop			@ (mov r8, r8)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4928      	ldr	r1, [pc, #160]	@ (8003570 <UART_RxISR_8BIT+0x1b4>)
 80034d0:	400a      	ands	r2, r1
 80034d2:	601a      	str	r2, [r3, #0]
 80034d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80034d6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	f383 8810 	msr	PRIMASK, r3
}
 80034de:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d12f      	bne.n	8003548 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034ee:	f3ef 8310 	mrs	r3, PRIMASK
 80034f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80034f4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034f8:	2301      	movs	r3, #1
 80034fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	f383 8810 	msr	PRIMASK, r3
}
 8003502:	46c0      	nop			@ (mov r8, r8)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2110      	movs	r1, #16
 8003510:	438a      	bics	r2, r1
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2210      	movs	r2, #16
 8003528:	4013      	ands	r3, r2
 800352a:	2b10      	cmp	r3, #16
 800352c:	d103      	bne.n	8003536 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2210      	movs	r2, #16
 8003534:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	225c      	movs	r2, #92	@ 0x5c
 800353a:	5a9a      	ldrh	r2, [r3, r2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	0011      	movs	r1, r2
 8003540:	0018      	movs	r0, r3
 8003542:	f7ff fa15 	bl	8002970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003546:	e00c      	b.n	8003562 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	0018      	movs	r0, r3
 800354c:	f7fc ffec 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 8003550:	e007      	b.n	8003562 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	699a      	ldr	r2, [r3, #24]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2108      	movs	r1, #8
 800355e:	430a      	orrs	r2, r1
 8003560:	619a      	str	r2, [r3, #24]
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b014      	add	sp, #80	@ 0x50
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	fffffedf 	.word	0xfffffedf
 8003570:	fbffffff 	.word	0xfbffffff

08003574 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b094      	sub	sp, #80	@ 0x50
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800357c:	204e      	movs	r0, #78	@ 0x4e
 800357e:	183b      	adds	r3, r7, r0
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	2160      	movs	r1, #96	@ 0x60
 8003584:	5a52      	ldrh	r2, [r2, r1]
 8003586:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	228c      	movs	r2, #140	@ 0x8c
 800358c:	589b      	ldr	r3, [r3, r2]
 800358e:	2b22      	cmp	r3, #34	@ 0x22
 8003590:	d000      	beq.n	8003594 <UART_RxISR_16BIT+0x20>
 8003592:	e0ba      	b.n	800370a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800359a:	214c      	movs	r1, #76	@ 0x4c
 800359c:	187b      	adds	r3, r7, r1
 800359e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80035a6:	187b      	adds	r3, r7, r1
 80035a8:	183a      	adds	r2, r7, r0
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	8812      	ldrh	r2, [r2, #0]
 80035ae:	4013      	ands	r3, r2
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80035b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ba:	1c9a      	adds	r2, r3, #2
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	225e      	movs	r2, #94	@ 0x5e
 80035c4:	5a9b      	ldrh	r3, [r3, r2]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b299      	uxth	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	225e      	movs	r2, #94	@ 0x5e
 80035d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	225e      	movs	r2, #94	@ 0x5e
 80035d6:	5a9b      	ldrh	r3, [r3, r2]
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d000      	beq.n	80035e0 <UART_RxISR_16BIT+0x6c>
 80035de:	e09c      	b.n	800371a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80035e0:	f3ef 8310 	mrs	r3, PRIMASK
 80035e4:	623b      	str	r3, [r7, #32]
  return(result);
 80035e6:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80035e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ea:	2301      	movs	r3, #1
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035f0:	f383 8810 	msr	PRIMASK, r3
}
 80035f4:	46c0      	nop			@ (mov r8, r8)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4948      	ldr	r1, [pc, #288]	@ (8003724 <UART_RxISR_16BIT+0x1b0>)
 8003602:	400a      	ands	r2, r1
 8003604:	601a      	str	r2, [r3, #0]
 8003606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003608:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800360c:	f383 8810 	msr	PRIMASK, r3
}
 8003610:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003612:	f3ef 8310 	mrs	r3, PRIMASK
 8003616:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8003618:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800361a:	643b      	str	r3, [r7, #64]	@ 0x40
 800361c:	2301      	movs	r3, #1
 800361e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003622:	f383 8810 	msr	PRIMASK, r3
}
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689a      	ldr	r2, [r3, #8]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2101      	movs	r1, #1
 8003634:	438a      	bics	r2, r1
 8003636:	609a      	str	r2, [r3, #8]
 8003638:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800363a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800363e:	f383 8810 	msr	PRIMASK, r3
}
 8003642:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	228c      	movs	r2, #140	@ 0x8c
 8003648:	2120      	movs	r1, #32
 800364a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	041b      	lsls	r3, r3, #16
 8003662:	4013      	ands	r3, r2
 8003664:	d018      	beq.n	8003698 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003666:	f3ef 8310 	mrs	r3, PRIMASK
 800366a:	617b      	str	r3, [r7, #20]
  return(result);
 800366c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800366e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003670:	2301      	movs	r3, #1
 8003672:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	f383 8810 	msr	PRIMASK, r3
}
 800367a:	46c0      	nop			@ (mov r8, r8)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4928      	ldr	r1, [pc, #160]	@ (8003728 <UART_RxISR_16BIT+0x1b4>)
 8003688:	400a      	ands	r2, r1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	f383 8810 	msr	PRIMASK, r3
}
 8003696:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800369c:	2b01      	cmp	r3, #1
 800369e:	d12f      	bne.n	8003700 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036a6:	f3ef 8310 	mrs	r3, PRIMASK
 80036aa:	60bb      	str	r3, [r7, #8]
  return(result);
 80036ac:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036b0:	2301      	movs	r3, #1
 80036b2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f383 8810 	msr	PRIMASK, r3
}
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2110      	movs	r1, #16
 80036c8:	438a      	bics	r2, r1
 80036ca:	601a      	str	r2, [r3, #0]
 80036cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f383 8810 	msr	PRIMASK, r3
}
 80036d6:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	2210      	movs	r2, #16
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b10      	cmp	r3, #16
 80036e4:	d103      	bne.n	80036ee <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2210      	movs	r2, #16
 80036ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	225c      	movs	r2, #92	@ 0x5c
 80036f2:	5a9a      	ldrh	r2, [r3, r2]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0011      	movs	r1, r2
 80036f8:	0018      	movs	r0, r3
 80036fa:	f7ff f939 	bl	8002970 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036fe:	e00c      	b.n	800371a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	0018      	movs	r0, r3
 8003704:	f7fc ff10 	bl	8000528 <HAL_UART_RxCpltCallback>
}
 8003708:	e007      	b.n	800371a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	699a      	ldr	r2, [r3, #24]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2108      	movs	r1, #8
 8003716:	430a      	orrs	r2, r1
 8003718:	619a      	str	r2, [r3, #24]
}
 800371a:	46c0      	nop			@ (mov r8, r8)
 800371c:	46bd      	mov	sp, r7
 800371e:	b014      	add	sp, #80	@ 0x50
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	fffffedf 	.word	0xfffffedf
 8003728:	fbffffff 	.word	0xfbffffff

0800372c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b0a0      	sub	sp, #128	@ 0x80
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8003734:	237a      	movs	r3, #122	@ 0x7a
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	2160      	movs	r1, #96	@ 0x60
 800373c:	5a52      	ldrh	r2, [r2, r1]
 800373e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	228c      	movs	r2, #140	@ 0x8c
 800375c:	589b      	ldr	r3, [r3, r2]
 800375e:	2b22      	cmp	r3, #34	@ 0x22
 8003760:	d000      	beq.n	8003764 <UART_RxISR_8BIT_FIFOEN+0x38>
 8003762:	e166      	b.n	8003a32 <UART_RxISR_8BIT_FIFOEN+0x306>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003764:	236e      	movs	r3, #110	@ 0x6e
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	2168      	movs	r1, #104	@ 0x68
 800376c:	5a52      	ldrh	r2, [r2, r1]
 800376e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003770:	e10d      	b.n	800398e <UART_RxISR_8BIT_FIFOEN+0x262>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003778:	216c      	movs	r1, #108	@ 0x6c
 800377a:	187b      	adds	r3, r7, r1
 800377c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800377e:	187b      	adds	r3, r7, r1
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b2da      	uxtb	r2, r3
 8003784:	237a      	movs	r3, #122	@ 0x7a
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	b2d9      	uxtb	r1, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003790:	400a      	ands	r2, r1
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800379a:	1c5a      	adds	r2, r3, #1
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	225e      	movs	r2, #94	@ 0x5e
 80037a4:	5a9b      	ldrh	r3, [r3, r2]
 80037a6:	b29b      	uxth	r3, r3
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b299      	uxth	r1, r3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	225e      	movs	r2, #94	@ 0x5e
 80037b0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	69db      	ldr	r3, [r3, #28]
 80037b8:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80037ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037bc:	2207      	movs	r2, #7
 80037be:	4013      	ands	r3, r2
 80037c0:	d049      	beq.n	8003856 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037c4:	2201      	movs	r2, #1
 80037c6:	4013      	ands	r3, r2
 80037c8:	d010      	beq.n	80037ec <UART_RxISR_8BIT_FIFOEN+0xc0>
 80037ca:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80037cc:	2380      	movs	r3, #128	@ 0x80
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4013      	ands	r3, r2
 80037d2:	d00b      	beq.n	80037ec <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2201      	movs	r2, #1
 80037da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2290      	movs	r2, #144	@ 0x90
 80037e0:	589b      	ldr	r3, [r3, r2]
 80037e2:	2201      	movs	r2, #1
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2190      	movs	r1, #144	@ 0x90
 80037ea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80037ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80037ee:	2202      	movs	r2, #2
 80037f0:	4013      	ands	r3, r2
 80037f2:	d00f      	beq.n	8003814 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80037f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80037f6:	2201      	movs	r2, #1
 80037f8:	4013      	ands	r3, r2
 80037fa:	d00b      	beq.n	8003814 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	2202      	movs	r2, #2
 8003802:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2290      	movs	r2, #144	@ 0x90
 8003808:	589b      	ldr	r3, [r3, r2]
 800380a:	2204      	movs	r2, #4
 800380c:	431a      	orrs	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2190      	movs	r1, #144	@ 0x90
 8003812:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003814:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003816:	2204      	movs	r2, #4
 8003818:	4013      	ands	r3, r2
 800381a:	d00f      	beq.n	800383c <UART_RxISR_8BIT_FIFOEN+0x110>
 800381c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800381e:	2201      	movs	r2, #1
 8003820:	4013      	ands	r3, r2
 8003822:	d00b      	beq.n	800383c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2204      	movs	r2, #4
 800382a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2290      	movs	r2, #144	@ 0x90
 8003830:	589b      	ldr	r3, [r3, r2]
 8003832:	2202      	movs	r2, #2
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2190      	movs	r1, #144	@ 0x90
 800383a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2290      	movs	r2, #144	@ 0x90
 8003840:	589b      	ldr	r3, [r3, r2]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d007      	beq.n	8003856 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	0018      	movs	r0, r3
 800384a:	f7ff f889 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2290      	movs	r2, #144	@ 0x90
 8003852:	2100      	movs	r1, #0
 8003854:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	225e      	movs	r2, #94	@ 0x5e
 800385a:	5a9b      	ldrh	r3, [r3, r2]
 800385c:	b29b      	uxth	r3, r3
 800385e:	2b00      	cmp	r3, #0
 8003860:	d000      	beq.n	8003864 <UART_RxISR_8BIT_FIFOEN+0x138>
 8003862:	e094      	b.n	800398e <UART_RxISR_8BIT_FIFOEN+0x262>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003864:	f3ef 8310 	mrs	r3, PRIMASK
 8003868:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800386a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800386c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800386e:	2301      	movs	r3, #1
 8003870:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003872:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003874:	f383 8810 	msr	PRIMASK, r3
}
 8003878:	46c0      	nop			@ (mov r8, r8)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4971      	ldr	r1, [pc, #452]	@ (8003a4c <UART_RxISR_8BIT_FIFOEN+0x320>)
 8003886:	400a      	ands	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
 800388a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800388c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800388e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003890:	f383 8810 	msr	PRIMASK, r3
}
 8003894:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003896:	f3ef 8310 	mrs	r3, PRIMASK
 800389a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 800389c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800389e:	667b      	str	r3, [r7, #100]	@ 0x64
 80038a0:	2301      	movs	r3, #1
 80038a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038a6:	f383 8810 	msr	PRIMASK, r3
}
 80038aa:	46c0      	nop			@ (mov r8, r8)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	689a      	ldr	r2, [r3, #8]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4966      	ldr	r1, [pc, #408]	@ (8003a50 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80038b8:	400a      	ands	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
 80038bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80038be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038c2:	f383 8810 	msr	PRIMASK, r3
}
 80038c6:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	228c      	movs	r2, #140	@ 0x8c
 80038cc:	2120      	movs	r1, #32
 80038ce:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	2380      	movs	r3, #128	@ 0x80
 80038e4:	041b      	lsls	r3, r3, #16
 80038e6:	4013      	ands	r3, r2
 80038e8:	d018      	beq.n	800391c <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038ea:	f3ef 8310 	mrs	r3, PRIMASK
 80038ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80038f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80038f2:	663b      	str	r3, [r7, #96]	@ 0x60
 80038f4:	2301      	movs	r3, #1
 80038f6:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038fa:	f383 8810 	msr	PRIMASK, r3
}
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4952      	ldr	r1, [pc, #328]	@ (8003a54 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800390c:	400a      	ands	r2, r1
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003912:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003916:	f383 8810 	msr	PRIMASK, r3
}
 800391a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003920:	2b01      	cmp	r3, #1
 8003922:	d12f      	bne.n	8003984 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800392a:	f3ef 8310 	mrs	r3, PRIMASK
 800392e:	623b      	str	r3, [r7, #32]
  return(result);
 8003930:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003932:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003934:	2301      	movs	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800393a:	f383 8810 	msr	PRIMASK, r3
}
 800393e:	46c0      	nop			@ (mov r8, r8)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2110      	movs	r1, #16
 800394c:	438a      	bics	r2, r1
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003952:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003954:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003956:	f383 8810 	msr	PRIMASK, r3
}
 800395a:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	2210      	movs	r2, #16
 8003964:	4013      	ands	r3, r2
 8003966:	2b10      	cmp	r3, #16
 8003968:	d103      	bne.n	8003972 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2210      	movs	r2, #16
 8003970:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	225c      	movs	r2, #92	@ 0x5c
 8003976:	5a9a      	ldrh	r2, [r3, r2]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	0011      	movs	r1, r2
 800397c:	0018      	movs	r0, r3
 800397e:	f7fe fff7 	bl	8002970 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8003982:	e00e      	b.n	80039a2 <UART_RxISR_8BIT_FIFOEN+0x276>
          HAL_UART_RxCpltCallback(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	0018      	movs	r0, r3
 8003988:	f7fc fdce 	bl	8000528 <HAL_UART_RxCpltCallback>
        break;
 800398c:	e009      	b.n	80039a2 <UART_RxISR_8BIT_FIFOEN+0x276>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800398e:	236e      	movs	r3, #110	@ 0x6e
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	881b      	ldrh	r3, [r3, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d004      	beq.n	80039a2 <UART_RxISR_8BIT_FIFOEN+0x276>
 8003998:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800399a:	2220      	movs	r2, #32
 800399c:	4013      	ands	r3, r2
 800399e:	d000      	beq.n	80039a2 <UART_RxISR_8BIT_FIFOEN+0x276>
 80039a0:	e6e7      	b.n	8003772 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80039a2:	205a      	movs	r0, #90	@ 0x5a
 80039a4:	183b      	adds	r3, r7, r0
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	215e      	movs	r1, #94	@ 0x5e
 80039aa:	5a52      	ldrh	r2, [r2, r1]
 80039ac:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80039ae:	0001      	movs	r1, r0
 80039b0:	187b      	adds	r3, r7, r1
 80039b2:	881b      	ldrh	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d044      	beq.n	8003a42 <UART_RxISR_8BIT_FIFOEN+0x316>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2268      	movs	r2, #104	@ 0x68
 80039bc:	5a9b      	ldrh	r3, [r3, r2]
 80039be:	187a      	adds	r2, r7, r1
 80039c0:	8812      	ldrh	r2, [r2, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d23d      	bcs.n	8003a42 <UART_RxISR_8BIT_FIFOEN+0x316>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039c6:	f3ef 8310 	mrs	r3, PRIMASK
 80039ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80039cc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80039ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80039d0:	2301      	movs	r3, #1
 80039d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f383 8810 	msr	PRIMASK, r3
}
 80039da:	46c0      	nop			@ (mov r8, r8)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	491c      	ldr	r1, [pc, #112]	@ (8003a58 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80039e8:	400a      	ands	r2, r1
 80039ea:	609a      	str	r2, [r3, #8]
 80039ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80039ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	f383 8810 	msr	PRIMASK, r3
}
 80039f6:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a18      	ldr	r2, [pc, #96]	@ (8003a5c <UART_RxISR_8BIT_FIFOEN+0x330>)
 80039fc:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003a02:	617b      	str	r3, [r7, #20]
  return(result);
 8003a04:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8003a08:	2301      	movs	r3, #1
 8003a0a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			@ (mov r8, r8)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2120      	movs	r1, #32
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a26:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f383 8810 	msr	PRIMASK, r3
}
 8003a2e:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003a30:	e007      	b.n	8003a42 <UART_RxISR_8BIT_FIFOEN+0x316>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699a      	ldr	r2, [r3, #24]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2108      	movs	r1, #8
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	619a      	str	r2, [r3, #24]
}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b020      	add	sp, #128	@ 0x80
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			@ (mov r8, r8)
 8003a4c:	fffffeff 	.word	0xfffffeff
 8003a50:	effffffe 	.word	0xeffffffe
 8003a54:	fbffffff 	.word	0xfbffffff
 8003a58:	efffffff 	.word	0xefffffff
 8003a5c:	080033bd 	.word	0x080033bd

08003a60 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b0a2      	sub	sp, #136	@ 0x88
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8003a68:	2382      	movs	r3, #130	@ 0x82
 8003a6a:	18fb      	adds	r3, r7, r3
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	2160      	movs	r1, #96	@ 0x60
 8003a70:	5a52      	ldrh	r2, [r2, r1]
 8003a72:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	2284      	movs	r2, #132	@ 0x84
 8003a7c:	18ba      	adds	r2, r7, r2
 8003a7e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	228c      	movs	r2, #140	@ 0x8c
 8003a94:	589b      	ldr	r3, [r3, r2]
 8003a96:	2b22      	cmp	r3, #34	@ 0x22
 8003a98:	d000      	beq.n	8003a9c <UART_RxISR_16BIT_FIFOEN+0x3c>
 8003a9a:	e170      	b.n	8003d7e <UART_RxISR_16BIT_FIFOEN+0x31e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8003a9c:	2376      	movs	r3, #118	@ 0x76
 8003a9e:	18fb      	adds	r3, r7, r3
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	2168      	movs	r1, #104	@ 0x68
 8003aa4:	5a52      	ldrh	r2, [r2, r1]
 8003aa6:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003aa8:	e115      	b.n	8003cd6 <UART_RxISR_16BIT_FIFOEN+0x276>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003ab0:	2174      	movs	r1, #116	@ 0x74
 8003ab2:	187b      	adds	r3, r7, r1
 8003ab4:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aba:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	2282      	movs	r2, #130	@ 0x82
 8003ac0:	18ba      	adds	r2, r7, r2
 8003ac2:	881b      	ldrh	r3, [r3, #0]
 8003ac4:	8812      	ldrh	r2, [r2, #0]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	b29a      	uxth	r2, r3
 8003aca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003acc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad2:	1c9a      	adds	r2, r3, #2
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	225e      	movs	r2, #94	@ 0x5e
 8003adc:	5a9b      	ldrh	r3, [r3, r2]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	b299      	uxth	r1, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	225e      	movs	r2, #94	@ 0x5e
 8003ae8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	2184      	movs	r1, #132	@ 0x84
 8003af2:	187a      	adds	r2, r7, r1
 8003af4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8003af6:	187b      	adds	r3, r7, r1
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2207      	movs	r2, #7
 8003afc:	4013      	ands	r3, r2
 8003afe:	d04e      	beq.n	8003b9e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b00:	187b      	adds	r3, r7, r1
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2201      	movs	r2, #1
 8003b06:	4013      	ands	r3, r2
 8003b08:	d010      	beq.n	8003b2c <UART_RxISR_16BIT_FIFOEN+0xcc>
 8003b0a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003b0c:	2380      	movs	r3, #128	@ 0x80
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	4013      	ands	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2290      	movs	r2, #144	@ 0x90
 8003b20:	589b      	ldr	r3, [r3, r2]
 8003b22:	2201      	movs	r2, #1
 8003b24:	431a      	orrs	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2190      	movs	r1, #144	@ 0x90
 8003b2a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b2c:	2384      	movs	r3, #132	@ 0x84
 8003b2e:	18fb      	adds	r3, r7, r3
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2202      	movs	r2, #2
 8003b34:	4013      	ands	r3, r2
 8003b36:	d00f      	beq.n	8003b58 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8003b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	d00b      	beq.n	8003b58 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2202      	movs	r2, #2
 8003b46:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2290      	movs	r2, #144	@ 0x90
 8003b4c:	589b      	ldr	r3, [r3, r2]
 8003b4e:	2204      	movs	r2, #4
 8003b50:	431a      	orrs	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2190      	movs	r1, #144	@ 0x90
 8003b56:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b58:	2384      	movs	r3, #132	@ 0x84
 8003b5a:	18fb      	adds	r3, r7, r3
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2204      	movs	r2, #4
 8003b60:	4013      	ands	r3, r2
 8003b62:	d00f      	beq.n	8003b84 <UART_RxISR_16BIT_FIFOEN+0x124>
 8003b64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003b66:	2201      	movs	r2, #1
 8003b68:	4013      	ands	r3, r2
 8003b6a:	d00b      	beq.n	8003b84 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2204      	movs	r2, #4
 8003b72:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2290      	movs	r2, #144	@ 0x90
 8003b78:	589b      	ldr	r3, [r3, r2]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2190      	movs	r1, #144	@ 0x90
 8003b82:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2290      	movs	r2, #144	@ 0x90
 8003b88:	589b      	ldr	r3, [r3, r2]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d007      	beq.n	8003b9e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	0018      	movs	r0, r3
 8003b92:	f7fe fee5 	bl	8002960 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2290      	movs	r2, #144	@ 0x90
 8003b9a:	2100      	movs	r1, #0
 8003b9c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	225e      	movs	r2, #94	@ 0x5e
 8003ba2:	5a9b      	ldrh	r3, [r3, r2]
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d000      	beq.n	8003bac <UART_RxISR_16BIT_FIFOEN+0x14c>
 8003baa:	e094      	b.n	8003cd6 <UART_RxISR_16BIT_FIFOEN+0x276>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bac:	f3ef 8310 	mrs	r3, PRIMASK
 8003bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8003bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bb4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bbc:	f383 8810 	msr	PRIMASK, r3
}
 8003bc0:	46c0      	nop			@ (mov r8, r8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681a      	ldr	r2, [r3, #0]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4972      	ldr	r1, [pc, #456]	@ (8003d98 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8003bce:	400a      	ands	r2, r1
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bd4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bd8:	f383 8810 	msr	PRIMASK, r3
}
 8003bdc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bde:	f3ef 8310 	mrs	r3, PRIMASK
 8003be2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8003be4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003be6:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003be8:	2301      	movs	r3, #1
 8003bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bee:	f383 8810 	msr	PRIMASK, r3
}
 8003bf2:	46c0      	nop			@ (mov r8, r8)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689a      	ldr	r2, [r3, #8]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4967      	ldr	r1, [pc, #412]	@ (8003d9c <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003c06:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c0a:	f383 8810 	msr	PRIMASK, r3
}
 8003c0e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	228c      	movs	r2, #140	@ 0x8c
 8003c14:	2120      	movs	r1, #32
 8003c16:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	2380      	movs	r3, #128	@ 0x80
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	4013      	ands	r3, r2
 8003c30:	d018      	beq.n	8003c64 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c32:	f3ef 8310 	mrs	r3, PRIMASK
 8003c36:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8003c38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c3a:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c42:	f383 8810 	msr	PRIMASK, r3
}
 8003c46:	46c0      	nop			@ (mov r8, r8)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4953      	ldr	r1, [pc, #332]	@ (8003da0 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8003c54:	400a      	ands	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c5e:	f383 8810 	msr	PRIMASK, r3
}
 8003c62:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d12f      	bne.n	8003ccc <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c72:	f3ef 8310 	mrs	r3, PRIMASK
 8003c76:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c82:	f383 8810 	msr	PRIMASK, r3
}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681a      	ldr	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2110      	movs	r1, #16
 8003c94:	438a      	bics	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
 8003c98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ca2:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	69db      	ldr	r3, [r3, #28]
 8003caa:	2210      	movs	r2, #16
 8003cac:	4013      	ands	r3, r2
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d103      	bne.n	8003cba <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2210      	movs	r2, #16
 8003cb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	225c      	movs	r2, #92	@ 0x5c
 8003cbe:	5a9a      	ldrh	r2, [r3, r2]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	0011      	movs	r1, r2
 8003cc4:	0018      	movs	r0, r3
 8003cc6:	f7fe fe53 	bl	8002970 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8003cca:	e010      	b.n	8003cee <UART_RxISR_16BIT_FIFOEN+0x28e>
          HAL_UART_RxCpltCallback(huart);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7fc fc2a 	bl	8000528 <HAL_UART_RxCpltCallback>
        break;
 8003cd4:	e00b      	b.n	8003cee <UART_RxISR_16BIT_FIFOEN+0x28e>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8003cd6:	2376      	movs	r3, #118	@ 0x76
 8003cd8:	18fb      	adds	r3, r7, r3
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d006      	beq.n	8003cee <UART_RxISR_16BIT_FIFOEN+0x28e>
 8003ce0:	2384      	movs	r3, #132	@ 0x84
 8003ce2:	18fb      	adds	r3, r7, r3
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d000      	beq.n	8003cee <UART_RxISR_16BIT_FIFOEN+0x28e>
 8003cec:	e6dd      	b.n	8003aaa <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8003cee:	205e      	movs	r0, #94	@ 0x5e
 8003cf0:	183b      	adds	r3, r7, r0
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	215e      	movs	r1, #94	@ 0x5e
 8003cf6:	5a52      	ldrh	r2, [r2, r1]
 8003cf8:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8003cfa:	0001      	movs	r1, r0
 8003cfc:	187b      	adds	r3, r7, r1
 8003cfe:	881b      	ldrh	r3, [r3, #0]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d044      	beq.n	8003d8e <UART_RxISR_16BIT_FIFOEN+0x32e>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2268      	movs	r2, #104	@ 0x68
 8003d08:	5a9b      	ldrh	r3, [r3, r2]
 8003d0a:	187a      	adds	r2, r7, r1
 8003d0c:	8812      	ldrh	r2, [r2, #0]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d23d      	bcs.n	8003d8e <UART_RxISR_16BIT_FIFOEN+0x32e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d12:	f3ef 8310 	mrs	r3, PRIMASK
 8003d16:	60fb      	str	r3, [r7, #12]
  return(result);
 8003d18:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			@ (mov r8, r8)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	491c      	ldr	r1, [pc, #112]	@ (8003da4 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8003d34:	400a      	ands	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d3a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f383 8810 	msr	PRIMASK, r3
}
 8003d42:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a18      	ldr	r2, [pc, #96]	@ (8003da8 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8003d48:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003d4a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d50:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d52:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d54:	2301      	movs	r3, #1
 8003d56:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	f383 8810 	msr	PRIMASK, r3
}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2120      	movs	r1, #32
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	601a      	str	r2, [r3, #0]
 8003d70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003d72:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d74:	6a3b      	ldr	r3, [r7, #32]
 8003d76:	f383 8810 	msr	PRIMASK, r3
}
 8003d7a:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003d7c:	e007      	b.n	8003d8e <UART_RxISR_16BIT_FIFOEN+0x32e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2108      	movs	r1, #8
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	619a      	str	r2, [r3, #24]
}
 8003d8e:	46c0      	nop			@ (mov r8, r8)
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b022      	add	sp, #136	@ 0x88
 8003d94:	bd80      	pop	{r7, pc}
 8003d96:	46c0      	nop			@ (mov r8, r8)
 8003d98:	fffffeff 	.word	0xfffffeff
 8003d9c:	effffffe 	.word	0xeffffffe
 8003da0:	fbffffff 	.word	0xfbffffff
 8003da4:	efffffff 	.word	0xefffffff
 8003da8:	08003575 	.word	0x08003575

08003dac <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003db4:	46c0      	nop			@ (mov r8, r8)
 8003db6:	46bd      	mov	sp, r7
 8003db8:	b002      	add	sp, #8
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003dc4:	46c0      	nop			@ (mov r8, r8)
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b002      	add	sp, #8
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003dd4:	46c0      	nop			@ (mov r8, r8)
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	b002      	add	sp, #8
 8003dda:	bd80      	pop	{r7, pc}

08003ddc <memset>:
 8003ddc:	0003      	movs	r3, r0
 8003dde:	1882      	adds	r2, r0, r2
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d100      	bne.n	8003de6 <memset+0xa>
 8003de4:	4770      	bx	lr
 8003de6:	7019      	strb	r1, [r3, #0]
 8003de8:	3301      	adds	r3, #1
 8003dea:	e7f9      	b.n	8003de0 <memset+0x4>

08003dec <__libc_init_array>:
 8003dec:	b570      	push	{r4, r5, r6, lr}
 8003dee:	2600      	movs	r6, #0
 8003df0:	4c0c      	ldr	r4, [pc, #48]	@ (8003e24 <__libc_init_array+0x38>)
 8003df2:	4d0d      	ldr	r5, [pc, #52]	@ (8003e28 <__libc_init_array+0x3c>)
 8003df4:	1b64      	subs	r4, r4, r5
 8003df6:	10a4      	asrs	r4, r4, #2
 8003df8:	42a6      	cmp	r6, r4
 8003dfa:	d109      	bne.n	8003e10 <__libc_init_array+0x24>
 8003dfc:	2600      	movs	r6, #0
 8003dfe:	f000 f819 	bl	8003e34 <_init>
 8003e02:	4c0a      	ldr	r4, [pc, #40]	@ (8003e2c <__libc_init_array+0x40>)
 8003e04:	4d0a      	ldr	r5, [pc, #40]	@ (8003e30 <__libc_init_array+0x44>)
 8003e06:	1b64      	subs	r4, r4, r5
 8003e08:	10a4      	asrs	r4, r4, #2
 8003e0a:	42a6      	cmp	r6, r4
 8003e0c:	d105      	bne.n	8003e1a <__libc_init_array+0x2e>
 8003e0e:	bd70      	pop	{r4, r5, r6, pc}
 8003e10:	00b3      	lsls	r3, r6, #2
 8003e12:	58eb      	ldr	r3, [r5, r3]
 8003e14:	4798      	blx	r3
 8003e16:	3601      	adds	r6, #1
 8003e18:	e7ee      	b.n	8003df8 <__libc_init_array+0xc>
 8003e1a:	00b3      	lsls	r3, r6, #2
 8003e1c:	58eb      	ldr	r3, [r5, r3]
 8003e1e:	4798      	blx	r3
 8003e20:	3601      	adds	r6, #1
 8003e22:	e7f2      	b.n	8003e0a <__libc_init_array+0x1e>
 8003e24:	08003ec4 	.word	0x08003ec4
 8003e28:	08003ec4 	.word	0x08003ec4
 8003e2c:	08003ec8 	.word	0x08003ec8
 8003e30:	08003ec4 	.word	0x08003ec4

08003e34 <_init>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	46c0      	nop			@ (mov r8, r8)
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr

08003e40 <_fini>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	46c0      	nop			@ (mov r8, r8)
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr
